,domain,data_description,user_level,sql_complexity,sql_task,prompt,context,sql,explanation
0,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Identify the top five cities in the United States with the highest median home prices based on data from the last three months.,"CREATE TABLE listings (
listing_id INT PRIMARY KEY,
address VARCHAR(255),
city VARCHAR(255),
state VARCHAR(255),
zip_code INT,
price INT,
square_footage INT,
bedrooms INT,
bathrooms FLOAT,
listing_date DATE
);
INSERT INTO listings (listing_id, address, city, state, zip_code, price, square_footage, bedrooms, bathrooms, listing_date) VALUES
(1, '123 Main St', 'Los Angeles', 'CA', 90001, 1200000, 2500, 4, 2.5, '2023-03-01'),
(2, '456 Oak Ave', 'San Francisco', 'CA', 94102, 1500000, 3000, 3, 2, '2023-03-05'),
(3, '789 Pine St', 'Seattle', 'WA', 98101, 800000, 2000, 2, 1.5, '2023-03-10'),
(4, '1011 Elm St', 'Dallas', 'TX', 75201, 500000, 1800, 3, 2, '2023-03-15'),
(5, '1213 Willow St', 'Chicago', 'IL', 60611, 450000, 1500, 2, 1, '2023-03-20'),
(6, '1415 Maple St', 'Miami', 'FL', 33133, 600000, 2200, 3, 2.5, '2023-03-25'),
(7, '1617 Birch St', 'Atlanta', 'GA', 30303, 400000, 1600, 2, 1.5, '2023-04-01'),
(8, '1819 Cedar St', 'Phoenix', 'AZ', 85004, 350000, 1400, 2, 1, '2023-04-05'),
(9, '2021 Oak St', 'Houston', 'TX', 77002, 420000, 1700, 3, 2, '2023-04-10'),
(10, '2223 Pine St', 'Denver', 'CO', 80202, 550000, 2100, 3, 2.5, '2023-04-15');

CREATE TABLE cities (
city VARCHAR(255) PRIMARY KEY,
state VARCHAR(255),
population INT
);
INSERT INTO cities (city, state, population) VALUES
('Los Angeles', 'CA', 3971883),
('San Francisco', 'CA', 873965),
('Seattle', 'WA', 737015),
('Dallas', 'TX', 1343573),
('Chicago', 'IL', 2746388),
('Miami', 'FL', 467043),
('Atlanta', 'GA', 506811),
('Phoenix', 'AZ', 1660272),
('Houston', 'TX', 2325502),
('Denver', 'CO', 711463);

CREATE VIEW median_prices_by_city AS
SELECT city, state, AVG(price) AS median_price
FROM listings
WHERE listing_date >= DATE('now', '-3 months')
GROUP BY city, state;
","SELECT city, state, median_price FROM median_prices_by_city ORDER BY median_price DESC LIMIT 5;","This query first creates a view called `median_prices_by_city` that calculates the median home price for each city and state based on listings in the last three months. Then, it selects the city, state, and median price from this view and orders the results by median price in descending order, limiting the output to the top five cities."
1,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",What is the average price per square foot for two-bedroom apartments in San Francisco?,"CREATE TABLE listings (
listing_id INT PRIMARY KEY,
address VARCHAR(255),
city VARCHAR(255),
state VARCHAR(255),
zip_code INT,
price INT,
square_footage INT,
bedrooms INT,
bathrooms FLOAT,
listing_date DATE
);
INSERT INTO listings (listing_id, address, city, state, zip_code, price, square_footage, bedrooms, bathrooms, listing_date) VALUES
(1, '123 Main St', 'Los Angeles', 'CA', 90001, 1200000, 2500, 4, 2.5, '2023-03-01'),
(2, '456 Oak Ave', 'San Francisco', 'CA', 94102, 1500000, 3000, 3, 2, '2023-03-05'),
(3, '789 Pine St', 'Seattle', 'WA', 98101, 800000, 2000, 2, 1.5, '2023-03-10'),
(4, '1011 Elm St', 'Dallas', 'TX', 75201, 500000, 1800, 3, 2, '2023-03-15'),
(5, '1213 Willow St', 'Chicago', 'IL', 60611, 450000, 1500, 2, 1, '2023-03-20'),
(6, '1415 Maple St', 'Miami', 'FL', 33133, 600000, 2200, 3, 2.5, '2023-03-25'),
(7, '1617 Birch St', 'Atlanta', 'GA', 30303, 400000, 1600, 2, 1.5, '2023-04-01'),
(8, '1819 Cedar St', 'Phoenix', 'AZ', 85004, 350000, 1400, 2, 1, '2023-04-05'),
(9, '2021 Oak St', 'Houston', 'TX', 77002, 420000, 1700, 3, 2, '2023-04-10'),
(10, '2223 Pine St', 'Denver', 'CO', 80202, 550000, 2100, 3, 2.5, '2023-04-15');
",SELECT AVG(price / square_footage) AS average_price_per_sqft FROM listings WHERE city = 'San Francisco' AND bedrooms = 2;,"This query calculates the average price per square foot for two-bedroom apartments in San Francisco by first filtering the listings table for apartments in San Francisco with two bedrooms. Then, it divides the price by the square footage for each listing and calculates the average of these values."
2,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","What are the top 5 cities in the United States with the highest median home prices, and what are the actual median prices in each city?","CREATE TABLE US_Cities_Median_Home_Prices (City VARCHAR(255), State VARCHAR(255), Median_Home_Price INT); INSERT INTO US_Cities_Median_Home_Prices (City, State, Median_Home_Price) VALUES ('San Jose', 'California', 1,425,000), ('San Francisco', 'California', 1,375,000), ('New York City', 'New York', 1,350,000), ('Los Angeles', 'California', 1,275,000), ('Seattle', 'Washington', 1,150,000), ('Miami', 'Florida', 675,000), ('Denver', 'Colorado', 650,000), ('Austin', 'Texas', 625,000), ('Atlanta', 'Georgia', 450,000), ('Phoenix', 'Arizona', 425,000);","SELECT City, State, Median_Home_Price FROM US_Cities_Median_Home_Prices ORDER BY Median_Home_Price DESC LIMIT 5;","This SQL query selects the City, State, and Median_Home_Price columns from the US_Cities_Median_Home_Prices table. It then orders the results in descending order of Median_Home_Price and limits the output to the top 5 rows. This provides a list of the top 5 cities in the United States with the highest median home prices, along with their actual median prices."
3,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Show me the average price per square foot for single-family homes in each state in the US, sorted from highest to lowest.","CREATE TABLE US_States_Avg_Price_Per_SqFt (State VARCHAR(255), Avg_Price_Per_SqFt DECIMAL(10,2)); INSERT INTO US_States_Avg_Price_Per_SqFt (State, Avg_Price_Per_SqFt) VALUES ('California', 750.00), ('New York', 625.00), ('Hawaii', 600.00), ('Massachusetts', 575.00), ('New Jersey', 550.00), ('Washington', 525.00), ('Colorado', 475.00), ('Oregon', 450.00), ('Florida', 425.00), ('Texas', 400.00);","SELECT State, Avg_Price_Per_SqFt FROM US_States_Avg_Price_Per_SqFt ORDER BY Avg_Price_Per_SqFt DESC;","This SQL query selects the State and Avg_Price_Per_SqFt columns from the US_States_Avg_Price_Per_SqFt table. It then orders the results in descending order of Avg_Price_Per_SqFt. This provides a table showing the average price per square foot for single-family homes in each state in the US, sorted from highest to lowest."
4,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Find all properties in California that have a swimming pool and are listed for sale under $1 million. Include the property address, list price, and number of bedrooms.","CREATE TABLE CA_Properties (Property_ID INT, Address VARCHAR(255), City VARCHAR(255), State VARCHAR(255), List_Price INT, Bedrooms INT, Amenities VARCHAR(255)); INSERT INTO CA_Properties (Property_ID, Address, City, State, List_Price, Bedrooms, Amenities) VALUES (12345, '123 Main St, Los Angeles', 'Los Angeles', 'California', 950000, 3, 'Pool, Central AC'), (67890, '456 Oak Ave, San Diego', 'San Diego', 'California', 750000, 4, 'Pool, Ocean View'), (24680, '789 Pine St, San Francisco', 'San Francisco', 'California', 1200000, 2, 'None'), (35791, '1011 Elm St, Sacramento', 'Sacramento', 'California', 550000, 3, 'Pool, Fireplace'), (92034, '1213 Willow St, San Jose', 'San Jose', 'California', 875000, 4, 'Pool, Backyard'), (56789, '1314 Maple St, Fresno', 'Fresno', 'California', 425000, 2, 'None');","SELECT Address, List_Price, Bedrooms FROM CA_Properties WHERE State = 'California' AND Amenities LIKE '%Pool%' AND List_Price < 1000000;","This SQL query selects the Address, List_Price, and Bedrooms columns from the CA_Properties table. It then filters the results to include only properties located in California (State = 'California'), that have a swimming pool (Amenities LIKE '%Pool%'), and are listed for sale under $1 million (List_Price < 1000000). This provides a list of properties that meet the specified criteria."
5,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Which customers have placed orders from multiple regions?,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), region VARCHAR(255));
INSERT INTO Customers (customer_id, customer_name, region) VALUES
(1, 'Acme Corp', 'North America'),
(2, 'XYZ Inc', 'Europe'),
(3, 'ABC Ltd', 'Asia'),
(4, '123 Co', 'North America'),
(5, '789 LLC', 'Europe');

CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), region VARCHAR(255));
INSERT INTO Orders (order_id, customer_id, region) VALUES
(1, 1, 'North America'),
(2, 2, 'Europe'),
(3, 3, 'Asia'),
(4, 4, 'South America'),
(5, 5, 'Africa'),
(6, 1, 'Europe'),
(7, 2, 'Asia'),
(8, 3, 'North America'),
(9, 4, 'Europe'),
(10, 5, 'Asia');","SELECT DISTINCT c.customer_name
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.region IN (SELECT region FROM Orders WHERE customer_id = c.customer_id)
GROUP BY c.customer_name
HAVING COUNT(DISTINCT o.region) > 1;","This SQL query first joins the Customers and Orders tables on the customer_id column. Then, it selects the distinct customer names from the Customers table where the region in the Orders table matches the region for the same customer in another order. The query groups the results by customer name and filters for customers who have placed orders from more than one region."
6,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Which countries have the most active drivers?,"CREATE TABLE drivers (driver_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), active BOOLEAN); CREATE TABLE trips (trip_id INT PRIMARY KEY, driver_id INT REFERENCES drivers(driver_id), start_time DATETIME, end_time DATETIME); CREATE VIEW active_drivers AS SELECT driver_id FROM drivers WHERE active = TRUE;",SELECT country FROM drivers WHERE active = TRUE GROUP BY country ORDER BY COUNT(*) DESC LIMIT 10;,"This query first filters the 'drivers' table to only include active drivers. Then, it groups the drivers by country and counts the number of drivers in each country. Finally, it orders the results by the number of drivers in descending order and limits the output to the top 10 countries."
7,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,What is the average trip duration for each driver in the United States?,"CREATE TABLE drivers (driver_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), active BOOLEAN); CREATE TABLE trips (trip_id INT PRIMARY KEY, driver_id INT REFERENCES drivers(driver_id), start_time DATETIME, end_time DATETIME);","SELECT driver_id, AVG(end_time - start_time) AS avg_trip_duration FROM trips JOIN drivers ON trips.driver_id = drivers.driver_id WHERE country = 'United States' GROUP BY driver_id;","This query joins the 'trips' and 'drivers' tables on the 'driver_id' column. Then, it filters the results to only include trips taken by drivers in the United States. Finally, it calculates the average trip duration for each driver and groups the results by driver_id."
8,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,What are the top 5 most popular destinations for trips starting in London?,"CREATE TABLE trips (trip_id INT PRIMARY KEY, driver_id INT, start_location VARCHAR(255), end_location VARCHAR(255), start_time DATETIME, end_time DATETIME); CREATE TABLE cities (city_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255));","SELECT end_location, COUNT(*) AS trip_count FROM trips WHERE start_location = 'London' GROUP BY end_location ORDER BY trip_count DESC LIMIT 5;","This query filters the 'trips' table to only include trips starting in London. Then, it groups the trips by end_location and counts the number of trips to each destination. Finally, it orders the results by the number of trips in descending order and limits the output to the top 5 destinations."
9,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,What is the total distance traveled by all drivers in the month of January?,"CREATE TABLE drivers (driver_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255), active BOOLEAN); CREATE TABLE trips (trip_id INT PRIMARY KEY, driver_id INT REFERENCES drivers(driver_id), start_location VARCHAR(255), end_location VARCHAR(255), start_time DATETIME, end_time DATETIME, distance FLOAT);",SELECT SUM(distance) AS total_distance FROM trips WHERE start_time >= '2023-01-01' AND start_time < '2023-02-01';,"This query filters the 'trips' table to only include trips that started in the month of January. Then, it calculates the sum of the 'distance' column, which represents the total distance traveled by all drivers in January."
10,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find all orders placed in the last month that were shipped with priority shipping and had a total value of over $500.,"CREATE TABLE orders ( order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, shipping_method VARCHAR(255), total_amount DECIMAL(10,2) ); CREATE TABLE customers ( customer_id INTEGER PRIMARY KEY, customer_name VARCHAR(255), country VARCHAR(255) );","SELECT o.order_id, c.customer_name, o.order_date, o.shipping_method, o.total_amount FROM orders o INNER JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date >= date('now', '-1 month') AND o.shipping_method = 'Priority' AND o.total_amount > 500","This query first filters the orders table to only include orders placed in the last month. Then, it filters the results further to only include orders that were shipped with priority shipping and had a total value of over $500. Finally, the query joins the orders and customers tables on the customer_id field to retrieve the customer name for each order."
11,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify suppliers who have delivered products with a defect rate exceeding 5% within the last quarter.,"CREATE TABLE suppliers ( supplier_id INTEGER PRIMARY KEY, supplier_name VARCHAR(255), country VARCHAR(255) ); CREATE TABLE deliveries ( delivery_id INTEGER PRIMARY KEY, supplier_id INTEGER, product_id INTEGER, quantity INTEGER, delivery_date DATE ); CREATE TABLE defects ( defect_id INTEGER PRIMARY KEY, delivery_id INTEGER, quantity INTEGER, defect_date DATE );","SELECT s.supplier_name, COUNT(d.defect_id) AS total_defects, COUNT(de.delivery_id) AS total_deliveries, (CAST(COUNT(d.defect_id) AS REAL) / COUNT(de.delivery_id)) * 100 AS defect_rate FROM suppliers s JOIN deliveries de ON s.supplier_id = de.supplier_id LEFT JOIN defects d ON de.delivery_id = d.delivery_id WHERE de.delivery_date >= date('now', '-3 months') GROUP BY s.supplier_id HAVING (CAST(COUNT(d.defect_id) AS REAL) / COUNT(de.delivery_id)) * 100 > 5","This query first calculates the total number of defects and deliveries for each supplier within the last quarter. Then, it joins the suppliers, deliveries, and defects tables to retrieve the supplier name and defect rate. Finally, it filters the results to only include suppliers with a defect rate exceeding 5%."
12,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report showing the top 5 products by total quantity produced in the current year, along with their production cost and average selling price.","CREATE TABLE products ( product_id INTEGER PRIMARY KEY, product_name VARCHAR(255), production_cost DECIMAL(10,2) ); CREATE TABLE production_runs ( production_run_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, production_date DATE ); CREATE TABLE sales ( sale_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, sale_date DATE, selling_price DECIMAL(10,2) );","SELECT p.product_name, SUM(pr.quantity) AS total_quantity_produced, p.production_cost, AVG(s.selling_price) AS average_selling_price FROM products p JOIN production_runs pr ON p.product_id = pr.product_id LEFT JOIN sales s ON p.product_id = s.product_id WHERE pr.production_date >= date('now', '-1 year') GROUP BY p.product_id ORDER BY total_quantity_produced DESC LIMIT 5","This query first calculates the total quantity produced for each product in the current year. Then, it joins the products, production_runs, and sales tables to retrieve the product name, production cost, and average selling price. Finally, it filters the results to only include products produced in the current year, sorts the results by total quantity produced in descending order, and limits the output to the top 5 products."
13,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve all purchase orders that have not yet been received, including the supplier information and the expected delivery date.","CREATE TABLE purchase_orders ( purchase_order_id INTEGER PRIMARY KEY, supplier_id INTEGER, order_date DATE, expected_delivery_date DATE, received BOOLEAN DEFAULT FALSE ); CREATE TABLE suppliers ( supplier_id INTEGER PRIMARY KEY, supplier_name VARCHAR(255), country VARCHAR(255) );","SELECT po.purchase_order_id, s.supplier_name, po.order_date, po.expected_delivery_date FROM purchase_orders po INNER JOIN suppliers s ON po.supplier_id = s.supplier_id WHERE po.received = 0","This query joins the purchase_orders and suppliers tables to retrieve the purchase order ID, supplier name, order date, and expected delivery date for all purchase orders that have not yet been received."
14,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Update the inventory levels for all products based on the latest production run and sales data.,"CREATE TABLE products ( product_id INTEGER PRIMARY KEY, product_name VARCHAR(255), current_inventory INTEGER DEFAULT 0 ); CREATE TABLE production_runs ( production_run_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, production_date DATE ); CREATE TABLE sales ( sale_id INTEGER PRIMARY KEY, product_id INTEGER, quantity INTEGER, sale_date DATE );","BEGIN TRANSACTION; UPDATE products SET current_inventory = current_inventory + (SELECT SUM(quantity) FROM production_runs WHERE product_id = products.product_id AND production_date >= date('now', '-1 month')) - (SELECT SUM(quantity) FROM sales WHERE product_id = products.product_id AND sale_date >= date('now', '-1 month')); COMMIT;","This query first calculates the total quantity produced and sold for each product in the last month. Then, it updates the current_inventory field in the products table by adding the total quantity produced and subtracting the total quantity sold."
15,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Which countries have the highest average yield for wheat?,"CREATE TABLE Wheat_Yields (  
    Country VARCHAR(255),
    Year INT,
    Yield_Per_Hectare FLOAT
);","SELECT Country
FROM Wheat_Yields
GROUP BY Country
ORDER BY AVG(Yield_Per_Hectare) DESC
LIMIT 10;","This SQL query first groups the Wheat_Yields table by Country. Then, it calculates the average yield per hectare for each country using the AVG() function. Finally, it orders the results in descending order based on the average yield and returns the top 10 countries with the highest average yield for wheat."
16,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",What are the top 5 crops grown in India?,"CREATE TABLE Crop_Production (
    Country VARCHAR(255),
    Crop VARCHAR(255),
    Production_Tonnes INT
);","SELECT Crop
FROM Crop_Production
WHERE Country = 'India'
GROUP BY Crop
ORDER BY SUM(Production_Tonnes) DESC
LIMIT 5;","This SQL query first filters the Crop_Production table to only include data for India. Then, it groups the data by Crop and calculates the total production in tonnes for each crop using the SUM() function. Finally, it orders the results in descending order based on the total production and returns the top 5 crops grown in India."
17,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",What is the average rainfall in California during the wheat growing season?,"CREATE TABLE Weather_Data (
    State VARCHAR(255),
    Month INT,
    Rainfall_mm FLOAT
);","SELECT AVG(Rainfall_mm)
FROM Weather_Data
WHERE State = 'California'
AND Month BETWEEN 10 AND 4;","This SQL query first filters the Weather_Data table to only include data for California and the months between October and April, which is the typical wheat growing season in California. Then, it calculates the average rainfall in millimeters for each month using the AVG() function. Finally, it returns the average rainfall for the entire wheat growing season."
18,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Which farming practices are most common in France?,"CREATE TABLE Farming_Practices (
    Country VARCHAR(255),
    Practice VARCHAR(255),
    Prevalence INT
);","SELECT Practice
FROM Farming_Practices
WHERE Country = 'France'
ORDER BY Prevalence DESC
LIMIT 10;","This SQL query first filters the Farming_Practices table to only include data for France. Then, it orders the results in descending order based on the prevalence of each practice and returns the top 10 most common farming practices in France."
19,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",What is the impact of climate change on corn yields in the United States?,"CREATE TABLE Corn_Yields (
    State VARCHAR(255),
    Year INT,
    Yield_Per_Hectare FLOAT
);

CREATE TABLE Climate_Data (
    State VARCHAR(255),
    Year INT,
    Temperature_Change FLOAT
);","SELECT
    CY.Year,
    CY.Yield_Per_Hectare,
    CD.Temperature_Change
FROM Corn_Yields CY
JOIN Climate_Data CD ON CY.State = CD.State AND CY.Year = CD.Year
WHERE CY.State = 'United States'
ORDER BY CY.Year;","This SQL query joins the Corn_Yields and Climate_Data tables on the State and Year columns. Then, it selects the year, corn yield per hectare, and temperature change for each year in the United States. This allows us to analyze the relationship between corn yields and climate change over time."
20,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","add a new customer to the customer table with the following information: first name: John, last name: Doe, email: john.doe@example.com, phone number: 555-123-4567, address: 123 Main Street, city: Anytown, state: CA, zip code: 91234, country: USA, date of birth: 1980-01-01","CREATE TABLE customer (customer_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255), city VARCHAR(255), state VARCHAR(2), zip_code VARCHAR(10), country VARCHAR(255), date_of_birth DATE);","INSERT INTO customer (first_name, last_name, email, phone_number, address, city, state, zip_code, country, date_of_birth) VALUES ('John', 'Doe', 'john.doe@example.com', '555-123-4567', '123 Main Street', 'Anytown', 'CA', '91234', 'USA', '1980-01-01');","This SQL statement inserts a new record into the customer table. The statement specifies the values for each column in the new record, including the first name, last name, email, phone number, address, city, state, zip code, country, and date of birth."
21,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",update the customer's email address to jane.smith@example.com where the customer's first name is Jane and last name is Smith,"CREATE TABLE customer (customer_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255), city VARCHAR(255), state VARCHAR(2), zip_code VARCHAR(10), country VARCHAR(255), date_of_birth DATE);",UPDATE customer SET email = 'jane.smith@example.com' WHERE first_name = 'Jane' AND last_name = 'Smith';,This SQL statement updates the email address for a customer in the customer table. The statement specifies the new email address and the condition that the customer's first name is Jane and last name is Smith.
22,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",delete the customer from the customer table where the customer's email address is john.doe@example.com,"CREATE TABLE customer (customer_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255), city VARCHAR(255), state VARCHAR(2), zip_code VARCHAR(10), country VARCHAR(255), date_of_birth DATE);",DELETE FROM customer WHERE email = 'john.doe@example.com';,This SQL statement deletes a customer from the customer table. The statement specifies the condition that the customer's email address is john.doe@example.com.
23,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",show all the orders placed by customer with id 1,"CREATE TABLE customer (customer_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255), city VARCHAR(255), state VARCHAR(2), zip_code VARCHAR(10), country VARCHAR(255), date_of_birth DATE);
CREATE TABLE order (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT NOT NULL, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));",SELECT * FROM order WHERE customer_id = 1;,This SQL statement selects all the orders from the order table where the customer_id is 1.
24,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",show the total number of orders placed by each customer,"CREATE TABLE customer (customer_id INT PRIMARY KEY AUTO_INCREMENT, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255), city VARCHAR(255), state VARCHAR(2), zip_code VARCHAR(10), country VARCHAR(255), date_of_birth DATE);
CREATE TABLE order (order_id INT PRIMARY KEY AUTO_INCREMENT, customer_id INT NOT NULL, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));","SELECT customer_id, COUNT(*) AS total_orders FROM order GROUP BY customer_id;",This SQL statement selects the customer_id and the total number of orders for each customer. The statement uses the COUNT(*) function to count the number of orders for each customer and groups the results by customer_id.
25,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","What is the number of customers who have purchased a product in the last 6 months, but not in the previous 6 months?","CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), created_at DATETIME); CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT, ordered_at DATETIME); CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), description TEXT);","SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.ordered_at >= DATE('now', '-6 months') AND o.ordered_at < DATE('now') EXCEPT SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.ordered_at >= DATE('now', '-12 months') AND o.ordered_at < DATE('now', '-6 months');","This query first selects all customers who have placed an order in the last 6 months. Then, it uses the EXCEPT operator to exclude all customers who have placed an order in the previous 6 months but not in the last 6 months. The final result is the number of customers who have purchased a product in the last 6 months, but not in the previous 6 months."
26,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",What is the average number of orders per customer in the last year?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), created_at DATETIME); CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT, ordered_at DATETIME); CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), description TEXT);","SELECT AVG(order_count) FROM (SELECT COUNT(*) AS order_count FROM orders WHERE ordered_at >= DATE('now', '-1 year') GROUP BY customer_id) AS customer_orders;","This query first calculates the number of orders for each customer in the last year. Then, it calculates the average number of orders per customer by taking the average of the order_count column."
27,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",What are the top 5 products by revenue in the last quarter?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), created_at DATETIME); CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT, ordered_at DATETIME); CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), description TEXT, price DECIMAL(10,2));","SELECT p.name, SUM(p.price * o.quantity) AS total_revenue FROM products p JOIN orders o ON p.product_id = o.product_id WHERE o.ordered_at >= DATE('now', '-3 months') AND o.ordered_at < DATE('now') GROUP BY p.name ORDER BY total_revenue DESC LIMIT 5;","This query first joins the products and orders tables on the product_id column. Then, it filters the orders to only include those placed in the last quarter. It then groups the orders by product name and calculates the total revenue for each product. Finally, it sorts the results by total_revenue in descending order and limits the results to the top 5 products."
28,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",What is the percentage of customers who have made a purchase in each country in the last month?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), country VARCHAR(255), created_at DATETIME); CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT, ordered_at DATETIME); CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), description TEXT);","SELECT c.country, COUNT(DISTINCT c.customer_id) AS total_customers, (SELECT COUNT(DISTINCT o.customer_id) FROM orders o JOIN customers c2 ON o.customer_id = c2.customer_id WHERE c2.country = c.country AND o.ordered_at >= DATE('now', '-1 month')) AS total_orders_last_month, (total_orders_last_month * 100.0) / total_customers AS percentage FROM customers c GROUP BY c.country ORDER BY percentage DESC;","This query first calculates the total number of customers in each country. Then, it uses a subquery to calculate the number of customers who have made a purchase in each country in the last month. Finally, it calculates the percentage of customers who have made a purchase in each country in the last month."
29,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","What are the top 10 keywords used in customer support tickets in the last month, and how many tickets mention each keyword?","CREATE TABLE tickets (ticket_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), subject VARCHAR(255), description TEXT, created_at DATETIME); CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), created_at DATETIME);","SELECT keyword, COUNT(*) AS ticket_count FROM (SELECT UNNEST(regexp_split_to_array(description, '\W+')) AS keyword FROM tickets WHERE created_at >= DATE('now', '-1 month')) AS keywords GROUP BY keyword ORDER BY ticket_count DESC LIMIT 10;","This query first uses the regexp_split_to_array function to split the description field of each ticket into an array of keywords. Then, it uses a subquery to count the number of times each keyword appears in the tickets. Finally, it sorts the results by ticket_count in descending order and limits the results to the top 10 keywords."
30,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the most frequent destination for deliveries in London?,"```sql
CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  address VARCHAR(255) NOT NULL,
  phone_number VARCHAR(20),
  email VARCHAR(255)
);

INSERT INTO customers (customer_id, name, address, phone_number, email)
VALUES
  (1, 'Acme Corp', '123 Main St, London', '555-1234', 'info@acmecorp.com'),
  (2, 'John Doe', '456 Elm St, London', '555-5678', 'john.doe@emailworld.com'),
  (3, 'Jane Smith', '789 Oak St, London', '555-9012', 'jane.smith@emailworld.com'),
  (4, 'Best Buy', '1011 Pine St, London', '555-2345', 'info@bestbuy.com'),
  (5, 'Target', '1213 Willow St, London', '555-6789', 'info@target.com');

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT NOT NULL,
  order_date DATE NOT NULL,
  delivery_address VARCHAR(255) NOT NULL,
  total_amount DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

INSERT INTO orders (order_id, customer_id, order_date, delivery_address, total_amount)
VALUES
  (1, 1, '2023-01-01', '456 Elm St, London', 100.00),
  (2, 2, '2023-01-02', '789 Oak St, London', 50.00),
  (3, 3, '2023-01-03', '1011 Pine St, London', 75.00),
  (4, 4, '2023-01-04', '1213 Willow St, London', 150.00),
  (5, 1, '2023-01-05', '123 Main St, London', 200.00),
  (6, 2, '2023-01-06', '789 Oak St, London', 100.00),
  (7, 3, '2023-01-07', '456 Elm St, London', 125.00),
  (8, 4, '2023-01-08', '1213 Willow St, London', 50.00),
  (9, 5, '2023-01-09', '1011 Pine St, London', 175.00),
  (10, 1, '2023-01-10', '123 Main St, London', 250.00),
  (11, 2, '2023-01-11', '456 Elm St, London', 75.00),
  (12, 3, '2023-01-12', '789 Oak St, London', 150.00),
  (13, 4, '2023-01-13', '1011 Pine St, London', 100.00),
  (14, 5, '2023-01-14', '1213 Willow St, London', 200.00),
  (15, 1, '2023-01-15', '123 Main St, London', 125.00),
  (16, 2, '2023-01-16', '789 Oak St, London', 50.00),
  (17, 3, '2023-01-17', '456 Elm St, London', 175.00),
  (18, 4, '2023-01-18', '1011 Pine St, London', 100.00),
  (19, 5, '2023-01-19', '1213 Willow St, London', 250.00),
  (20, 1, '2023-01-20', '123 Main St, London', 150.00);
```","```sql
WITH DeliveryCounts AS (
    SELECT delivery_address, COUNT(*) AS delivery_count
    FROM orders
    WHERE delivery_address LIKE '%London%'
    GROUP BY delivery_address
),
RankedDeliveries AS (
    SELECT delivery_address, delivery_count, ROW_NUMBER() OVER (ORDER BY delivery_count DESC) AS delivery_rank
    FROM DeliveryCounts
)
SELECT delivery_address
FROM RankedDeliveries
WHERE delivery_rank = 1;
```","1. We start by counting the deliveries to each address in London using the `DeliveryCounts` CTE.

2. We then rank the addresses based on their delivery count in descending order using the `RankedDeliveries` CTE.

3. Finally, we return the address with the highest delivery count, which represents the most frequent destination for deliveries in London."
31,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show me the top 3 customer destinations based on the total number of shipments in the last 3 months, from January 1st to March 31st, 2023.","CREATE TABLE customer_shipments (
  customer_id INT,
  shipment_id INT,
  destination VARCHAR(255),
  shipment_date DATE
);

INSERT INTO customer_shipments (customer_id, shipment_id, destination, shipment_date) VALUES
(1, 100, 'New York', '2023-01-15'),
(1, 101, 'Los Angeles', '2023-02-05'),
(1, 102, 'Chicago', '2023-03-20'),
(2, 200, 'Miami', '2023-01-22'),
(2, 201, 'Houston', '2023-02-10'),
(2, 202, 'Dallas', '2023-03-25'),
(3, 300, 'San Francisco', '2023-01-30'),
(3, 301, 'Seattle', '2023-02-18'),
(3, 302, 'Denver', '2023-03-05'),
(4, 400, 'Atlanta', '2023-02-01'),
(4, 401, 'Phoenix', '2023-03-12'),
(4, 402, 'Philadelphia', '2023-02-27');

CREATE TABLE customers (
  customer_id INT,
  customer_name VARCHAR(255),
  country VARCHAR(255)
);

INSERT INTO customers (customer_id, customer_name, country) VALUES
(1, 'Acme Corp', 'USA'),
(2, 'Global Shipping', 'Canada'),
(3, 'Tech Solutions', 'Mexico'),
(4, 'Retail Inc', 'USA');","WITH MonthlyShipments AS (
  SELECT
    customer_id,
    destination,
    COUNT(*) AS total_shipments
  FROM customer_shipments
  WHERE shipment_date >= '2023-01-01' AND shipment_date <= '2023-03-31'
  GROUP BY customer_id, destination
),
RankedShipments AS (
  SELECT
    customer_id,
    destination,
    total_shipments,
    RANK() OVER (PARTITION BY customer_id ORDER BY total_shipments DESC) AS rank
  FROM MonthlyShipments
)
SELECT
  c.customer_name,
  rs.destination,
  rs.total_shipments
FROM RankedShipments rs
JOIN customers c ON rs.customer_id = c.customer_id
WHERE rs.rank <= 3
ORDER BY c.customer_name, rs.total_shipments DESC;","This SQL query first calculates the total number of shipments for each customer and destination in the last 3 months. Then, it ranks the destinations for each customer based on the total number of shipments. Finally, it selects the top 3 destinations for each customer and displays the customer name, destination, and total number of shipments."
32,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the top 5 customers by total revenue for the past year, excluding orders placed in December 2022?","CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    amount DECIMAL(10,2)
);

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    country VARCHAR(255)
);

INSERT INTO Orders (order_id, customer_id, order_date, amount) VALUES
    (1, 1, '2022-01-05', 100.00),
    (2, 2, '2022-01-10', 50.00),
    (3, 3, '2022-01-15', 75.00),
    (4, 1, '2022-02-01', 150.00),
    (5, 2, '2022-02-05', 125.00),
    (6, 3, '2022-02-10', 200.00),
    (7, 1, '2022-03-01', 250.00),
    (8, 2, '2022-03-05', 175.00),
    (9, 3, '2022-03-10', 300.00),
    (10, 1, '2022-04-01', 350.00),
    (11, 2, '2022-04-05', 225.00),
    (12, 3, '2022-04-10', 400.00),
    (13, 1, '2022-05-01', 450.00),
    (14, 2, '2022-05-05', 275.00),
    (15, 3, '2022-05-10', 500.00),
    (16, 1, '2022-06-01', 550.00),
    (17, 2, '2022-06-05', 325.00),
    (18, 3, '2022-06-10', 600.00),
    (19, 1, '2022-07-01', 650.00),
    (20, 2, '2022-07-05', 375.00),
    (21, 3, '2022-07-10', 700.00),
    (22, 1, '2022-08-01', 750.00),
    (23, 2, '2022-08-05', 425.00),
    (24, 3, '2022-08-10', 800.00),
    (25, 1, '2022-09-01', 850.00),
    (26, 2, '2022-09-05', 475.00),
    (27, 3, '2022-09-10', 900.00),
    (28, 1, '2022-10-01', 950.00),
    (29, 2, '2022-10-05', 525.00),
    (30, 3, '2022-10-10', 1000.00),
    (31, 1, '2022-11-01', 1050.00),
    (32, 2, '2022-11-05', 575.00),
    (33, 3, '2022-11-10', 1100.00);

INSERT INTO Customers (customer_id, customer_name, country) VALUES
    (1, 'Alice Smith', 'USA'),
    (2, 'Bob Johnson', 'Canada'),
    (3, 'Charlie Williams', 'Mexico');","SELECT c.customer_name, SUM(o.amount) AS total_revenue
FROM Orders o
JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.order_date >= '2022-01-01' AND o.order_date < '2023-01-01' AND o.order_date NOT BETWEEN '2022-12-01' AND '2022-12-31'
GROUP BY c.customer_id
ORDER BY total_revenue DESC
LIMIT 5;","This SQL query performs the following steps:

1. Joins the `Orders` and `Customers` tables on the `customer_id` column.
2. Filters the `order_date` column to include orders placed between January 1, 2022, and December 31, 2022, excluding orders placed in December 2022.
3. Groups the results by `customer_id` and calculates the sum of the `amount` column for each customer, representing their total revenue.
4. Orders the results in descending order of `total_revenue` to identify the top 5 customers.
5. Limits the output to the top 5 customers with the highest total revenue.

The query leverages the `SUM()` aggregate function and the `GROUP BY` clause to calculate the total revenue for each customer. The `WHERE` clause filters the data to exclude orders placed in December 2022.

The final result provides a list of the top 5 customers by total revenue for the past year, excluding December 2022 orders."
33,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What was the average shipping time for all orders placed in the last month, broken down by region?","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, region VARCHAR(50), shipping_time INT);","SELECT region, AVG(shipping_time) AS average_shipping_time FROM orders WHERE order_date >= DATE('now', '-1 month') GROUP BY region ORDER BY average_shipping_time DESC;","This query calculates the average shipping time for orders placed in the last month, grouped by region. It uses the `AVG()` function to calculate the average shipping time and the `GROUP BY` clause to group the results by region. The results are then ordered by average shipping time in descending order."
34,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which customers placed the most orders in the last quarter?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), customer_email VARCHAR(255), customer_region VARCHAR(50));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, region VARCHAR(50), shipping_time INT);","SELECT c.customer_name, COUNT(o.order_id) AS number_of_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-3 months') GROUP BY c.customer_name ORDER BY number_of_orders DESC LIMIT 10;","This query identifies the customers who placed the most orders in the last quarter. It uses a `JOIN` clause to combine the `customers` and `orders` tables, then filters the results to include only orders placed in the last quarter. The `COUNT()` function is used to count the number of orders placed by each customer, and the results are grouped by customer name. The results are then ordered by number of orders in descending order and limited to the top 10 customers."
35,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Which patients have a history of heart disease and have been prescribed both aspirin and a statin medication within the past year?,"CREATE TABLE patients (   patient_id INT PRIMARY KEY,   first_name VARCHAR(255),   last_name VARCHAR(255),   date_of_birth DATE,   address VARCHAR(255),   phone_number VARCHAR(255),   email VARCHAR(255) );

CREATE TABLE medical_history (   patient_id INT,   diagnosis VARCHAR(255),   diagnosis_date DATE,   FOREIGN KEY (patient_id) REFERENCES patients(patient_id) );

CREATE TABLE medications (   medication_id INT PRIMARY KEY,   medication_name VARCHAR(255),   medication_type VARCHAR(255) );

CREATE TABLE prescriptions (   prescription_id INT PRIMARY KEY,   patient_id INT,   medication_id INT,   prescription_date DATE,   FOREIGN KEY (patient_id) REFERENCES patients(patient_id),   FOREIGN KEY (medication_id) REFERENCES medications(medication_id) );

INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address, phone_number, email) VALUES
(1, 'John', 'Smith', '1960-01-15', '123 Main St, Anytown, USA', '555-123-4567', 'john.smith@email.com'),
(2, 'Jane', 'Doe', '1970-02-20', '456 Elm St, Anytown, USA', '555-234-5678', 'jane.doe@email.com'),
(3, 'Michael', 'Jones', '1980-03-25', '789 Oak St, Anytown, USA', '555-345-6789', 'michael.jones@email.com'),
(4, 'Jennifer', 'Brown', '1990-04-30', '1011 Pine St, Anytown, USA', '555-456-7890', 'jennifer.brown@email.com'),
(5, 'David', 'Davis', '2000-05-05', '1213 Willow St, Anytown, USA', '555-567-8901', 'david.davis@email.com');

INSERT INTO medical_history (patient_id, diagnosis, diagnosis_date) VALUES
(1, 'Heart Disease', '2022-01-01'),
(2, 'Diabetes', '2021-02-02'),
(3, 'Asthma', '2020-03-03'),
(4, 'Cancer', '2019-04-04'),
(5, 'Arthritis', '2018-05-05');

INSERT INTO medications (medication_id, medication_name, medication_type) VALUES
(1, 'Aspirin', 'Blood Thinner'),
(2, 'Atorvastatin', 'Statin'),
(3, 'Metformin', 'Diabetes Medication'),
(4, 'Albuterol', 'Asthma Medication'),
(5, 'Prednisone', 'Steroid');

INSERT INTO prescriptions (prescription_id, patient_id, medication_id, prescription_date) VALUES
(1, 1, 1, '2023-03-08'),
(2, 1, 2, '2023-03-08'),
(3, 2, 3, '2023-03-09'),
(4, 3, 4, '2023-03-10'),
(5, 4, 5, '2023-03-11');","SELECT p.patient_id, p.first_name, p.last_name
FROM patients p
INNER JOIN medical_history mh ON p.patient_id = mh.patient_id
INNER JOIN prescriptions pr1 ON p.patient_id = pr1.patient_id
INNER JOIN prescriptions pr2 ON p.patient_id = pr2.patient_id
INNER JOIN medications m1 ON pr1.medication_id = m1.medication_id
INNER JOIN medications m2 ON pr2.medication_id = m2.medication_id
WHERE mh.diagnosis = 'Heart Disease'
AND m1.medication_name = 'Aspirin'
AND m2.medication_name = 'Atorvastatin'
AND pr1.prescription_date >= DATE('now', '-1 year')
AND pr2.prescription_date >= DATE('now', '-1 year');","This query retrieves information about patients who have a history of heart disease and have been prescribed both aspirin and a statin medication within the past year. 

The query uses a series of inner joins to connect the patients, medical history, prescriptions, and medications tables. 

The WHERE clause filters the results to only include patients who meet all of the following criteria:

- They have a diagnosis of heart disease
- They have been prescribed aspirin
- They have been prescribed a statin medication
- Both prescriptions were filled within the past year

The query then selects the patient's ID, first name, and last name."
36,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"I am a data scientist working in the healthcare industry, and I am looking for a way to analyze patient data in order to improve the quality of care. I am particularly interested in using subqueries to get more detailed insights into patient data. Can you help me write some SQL queries that use subqueries to analyze patient data?","CREATE TABLE patients (
    patient_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    date_of_birth DATE NOT NULL,
    address VARCHAR(255),
    phone_number VARCHAR(255)
);

CREATE TABLE diagnoses (
    diagnosis_id INT PRIMARY KEY,
    patient_id INT REFERENCES patients(patient_id),
    diagnosis_code VARCHAR(255) NOT NULL,
    diagnosis_description VARCHAR(255),
    date_of_diagnosis DATE NOT NULL
);

CREATE TABLE medications (
    medication_id INT PRIMARY KEY,
    patient_id INT REFERENCES patients(patient_id),
    medication_name VARCHAR(255) NOT NULL,
    dosage VARCHAR(255),
    start_date DATE NOT NULL,
    end_date DATE
);

CREATE TABLE procedures (
    procedure_id INT PRIMARY KEY,
    patient_id INT REFERENCES patients(patient_id),
    procedure_name VARCHAR(255) NOT NULL,
    procedure_date DATE NOT NULL
);

CREATE TABLE lab_results (
    lab_result_id INT PRIMARY KEY,
    patient_id INT REFERENCES patients(patient_id),
    test_name VARCHAR(255) NOT NULL,
    test_result VARCHAR(255),
    test_date DATE NOT NULL
);","SELECT p.first_name, p.last_name, d.diagnosis_description
FROM patients p
JOIN diagnoses d ON p.patient_id = d.patient_id
WHERE d.diagnosis_code IN (SELECT diagnosis_code FROM diagnoses WHERE diagnosis_description LIKE '%heart failure%');","This query selects the first name, last name, and diagnosis description of all patients who have been diagnosed with heart failure. The subquery is used to find the diagnosis codes for all diagnoses that contain the phrase 'heart failure'. The main query then joins the patients table to the diagnoses table on the patient_id column and filters the results to include only patients with a diagnosis code that matches one of the codes found in the subquery."
37,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Can you please provide me with a list of all patients who have been prescribed the drug Lipitor and have also been diagnosed with diabetes?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, email VARCHAR(255), phone_number VARCHAR(255));
CREATE TABLE medications (medication_id INT PRIMARY KEY, medication_name VARCHAR(255), active_ingredient VARCHAR(255), dosage VARCHAR(255), manufacturer VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_id INT REFERENCES medications(medication_id), date_prescribed DATE, prescriber_name VARCHAR(255));
CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_code VARCHAR(255), diagnosis_description VARCHAR(255), date_diagnosed DATE);","SELECT p.first_name, p.last_name FROM patients p JOIN prescriptions pr ON p.patient_id = pr.patient_id JOIN medications m ON pr.medication_id = m.medication_id JOIN diagnoses d ON p.patient_id = d.patient_id WHERE m.medication_name = 'Lipitor' AND d.diagnosis_code = 'E11.9'","This query selects the first and last names of patients from the 'patients' table who have been prescribed the medication 'Lipitor' and have also been diagnosed with diabetes. The query uses a series of joins to connect the 'patients' table to the 'prescriptions' table, the 'medications' table, and the 'diagnoses' table. The join conditions ensure that only patients who have been prescribed 'Lipitor' and diagnosed with diabetes are included in the results."
38,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Find all patients who have been prescribed both Lipitor and Zocor, and calculate the average dosage for each medication.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT REFERENCES Patients(PatientID), DrugName VARCHAR(50), Dosage INT, DatePrescribed DATE); INSERT INTO Patients (PatientID, FirstName, LastName, DateOfBirth) VALUES (1, 'John', 'Doe', '1970-01-01'), (2, 'Jane', 'Smith', '1975-02-02'), (3, 'Mike', 'Jones', '1980-03-03'); INSERT INTO Prescriptions (PrescriptionID, PatientID, DrugName, Dosage, DatePrescribed) VALUES (1, 1, 'Lipitor', 20, '2022-04-04'), (2, 2, 'Zocor', 40, '2022-05-05'), (3, 1, 'Zocor', 10, '2022-06-06'), (4, 3, 'Lipitor', 30, '2022-07-07');","SELECT p.FirstName, p.LastName, AVG(l.Dosage) AS LipitorDosage, AVG(z.Dosage) AS ZocorDosage FROM Patients p JOIN Prescriptions l ON p.PatientID = l.PatientID AND l.DrugName = 'Lipitor' JOIN Prescriptions z ON p.PatientID = z.PatientID AND z.DrugName = 'Zocor' GROUP BY p.PatientID, p.FirstName, p.LastName HAVING COUNT(*) = 2;","This query first joins the 'Patients' table to the 'Prescriptions' table twice, once for each medication (Lipitor and Zocor). It then filters the results to include only patients who have prescriptions for both medications. The query then uses the `AVG()` function to calculate the average dosage for each medication for each patient. Finally, it groups the results by patient ID, first name, and last name, and filters the results to include only patients who have prescriptions for both medications."
39,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Which patients have a history of both diabetes and hypertension?,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE); CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, PatientID INT REFERENCES Patients(PatientID), Diagnosis VARCHAR(50), DateDiagnosed DATE); INSERT INTO Patients (PatientID, FirstName, LastName, DateOfBirth) VALUES (1, 'John', 'Doe', '1970-01-01'), (2, 'Jane', 'Smith', '1975-02-02'), (3, 'Mike', 'Jones', '1980-03-03'); INSERT INTO Diagnoses (DiagnosisID, PatientID, Diagnosis, DateDiagnosed) VALUES (1, 1, 'Diabetes', '2020-01-01'), (2, 2, 'Hypertension', '2021-02-02'), (3, 1, 'Hypertension', '2022-03-03'), (4, 3, 'Diabetes', '2023-04-04');","SELECT p.FirstName, p.LastName FROM Patients p JOIN Diagnoses d1 ON p.PatientID = d1.PatientID AND d1.Diagnosis = 'Diabetes' JOIN Diagnoses d2 ON p.PatientID = d2.PatientID AND d2.Diagnosis = 'Hypertension';","This query first joins the 'Patients' table to the 'Diagnoses' table twice, once for each diagnosis (Diabetes and Hypertension). It then filters the results to include only patients who have diagnoses for both conditions. Finally, it selects the first name and last name of the patients who meet the criteria."
40,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Create a table named `customers` to store customer information including customer ID, name, email, phone number, and address.","CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255));","CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255));","Step 1: Create a table named `customers` with the following columns:
* `customer_id`: INT PRIMARY KEY - This is the unique identifier for each customer.
* `name`: VARCHAR(255) NOT NULL - This is the customer's name.
* `email`: VARCHAR(255) UNIQUE - This is the customer's email address.
* `phone_number`: VARCHAR(20) - This is the customer's phone number.
* `address`: VARCHAR(255) - This is the customer's address."
41,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Create a table named `products` to store product information including product ID, name, description, price, and category.","CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, description TEXT, price DECIMAL(10,2), category VARCHAR(255));","CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, description TEXT, price DECIMAL(10,2), category VARCHAR(255));","Step 1: Create a table named `products` with the following columns:
* `product_id`: INT PRIMARY KEY - This is the unique identifier for each product.
* `name`: VARCHAR(255) NOT NULL - This is the product name.
* `description`: TEXT - This is the product description.
* `price`: DECIMAL(10,2) - This is the product price.
* `category`: VARCHAR(255) - This is the product category."
42,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Create a table named `orders` to store order information including order ID, customer ID, order date, and total amount.","CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, description TEXT, price DECIMAL(10,2), category VARCHAR(255));","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE NOT NULL, total_amount DECIMAL(10,2));","Step 1: Create a table named `orders` with the following columns:
* `order_id`: INT PRIMARY KEY - This is the unique identifier for each order.
* `customer_id`: INT REFERENCES customers(customer_id) - This is the customer ID of the customer who placed the order.
* `order_date`: DATE NOT NULL - This is the date the order was placed.
* `total_amount`: DECIMAL(10,2) - This is the total amount of the order."
43,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Create a table named `order_items` to store order item information including order ID, product ID, quantity, and price.","CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, description TEXT, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE NOT NULL, total_amount DECIMAL(10,2));","CREATE TABLE order_items (order_id INT REFERENCES orders(order_id), product_id INT REFERENCES products(product_id), quantity INT NOT NULL, price DECIMAL(10,2));","Step 1: Create a table named `order_items` with the following columns:
* `order_id`: INT REFERENCES orders(order_id) - This is the order ID of the order this item belongs to.
* `product_id`: INT REFERENCES products(product_id) - This is the product ID of the product ordered.
* `quantity`: INT NOT NULL - This is the quantity of the product ordered.
* `price`: DECIMAL(10,2) - This is the price of the product at the time of the order."
44,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Create a view named `customer_orders` to show customer information and their orders.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), address VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, description TEXT, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE NOT NULL, total_amount DECIMAL(10,2));
CREATE TABLE order_items (order_id INT REFERENCES orders(order_id), product_id INT REFERENCES products(product_id), quantity INT NOT NULL, price DECIMAL(10,2));","CREATE VIEW customer_orders AS
SELECT c.customer_id, c.name, c.email, o.order_id, o.order_date, o.total_amount
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id;","Step 1: Create a view named `customer_orders`.
Step 2: Select the following columns from the `customers` and `orders` tables:
* `c.customer_id`: The customer ID from the `customers` table.
* `c.name`: The customer name from the `customers` table.
* `c.email`: The customer email from the `customers` table.
* `o.order_id`: The order ID from the `orders` table.
* `o.order_date`: The order date from the `orders` table.
* `o.total_amount`: The total amount of the order from the `orders` table.
Step 3: Join the `customers` and `orders` tables on the `customer_id` column."
45,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Find the top 5 stocks with the highest average daily trading volume in the past month, excluding those in the technology sector.","CREATE TABLE Stocks ( 
  stock_symbol VARCHAR(10) PRIMARY KEY, 
  company_name VARCHAR(255) NOT NULL, 
  sector VARCHAR(50) NOT NULL, 
  daily_trading_volume INT 
); 

INSERT INTO Stocks (stock_symbol, company_name, sector, daily_trading_volume) 
VALUES 
  ('AAPL', 'Apple Inc.', 'Technology', 25000000), 
  ('MSFT', 'Microsoft Corporation', 'Technology', 20000000), 
  ('AMZN', 'Amazon.com Inc.', 'Technology', 30000000), 
  ('GOOG', 'Alphabet Inc.', 'Technology', 28000000), 
  ('TSLA', 'Tesla Inc.', 'Energy', 15000000), 
  ('JPM', 'JPMorgan Chase & Co.', 'Financials', 12000000), 
  ('BAC', 'Bank of America Corporation', 'Financials', 10000000), 
  ('WFC', 'Wells Fargo & Company', 'Financials', 9000000), 
  ('CITI', 'Citigroup Inc.', 'Financials', 8000000), 
  ('XOM', 'Exxon Mobil Corporation', 'Energy', 7000000); 

CREATE TABLE Transactions ( 
  transaction_id INT PRIMARY KEY, 
  stock_symbol VARCHAR(10) REFERENCES Stocks(stock_symbol), 
  transaction_date DATE NOT NULL, 
  transaction_type VARCHAR(10) NOT NULL, 
  quantity INT, 
  price DECIMAL(10,2) 
); 

INSERT INTO Transactions (transaction_id, stock_symbol, transaction_date, transaction_type, quantity, price) 
VALUES 
  (1, 'AAPL', '2023-10-26', 'Buy', 100, 175.50), 
  (2, 'MSFT', '2023-10-26', 'Sell', 50, 285.00), 
  (3, 'AMZN', '2023-10-26', 'Buy', 200, 105.25), 
  (4, 'GOOG', '2023-10-26', 'Sell', 75, 2450.00), 
  (5, 'TSLA', '2023-10-26', 'Buy', 30, 210.00), 
  (6, 'JPM', '2023-10-26', 'Sell', 150, 145.75), 
  (7, 'BAC', '2023-10-26', 'Buy', 100, 35.50), 
  (8, 'WFC', '2023-10-26', 'Sell', 25, 48.00), 
  (9, 'CITI', '2023-10-26', 'Buy', 50, 52.25), 
  (10, 'XOM', '2023-10-26', 'Sell', 100, 98.75), 
  (11, 'AAPL', '2023-10-27', 'Buy', 150, 176.00), 
  (12, 'MSFT', '2023-10-27', 'Sell', 100, 284.50), 
  (13, 'AMZN', '2023-10-27', 'Buy', 100, 106.00), 
  (14, 'GOOG', '2023-10-27', 'Sell', 50, 2445.00), 
  (15, 'TSLA', '2023-10-27', 'Buy', 40, 212.50), 
  (16, 'JPM', '2023-10-27', 'Sell', 200, 146.00), 
  (17, 'BAC', '2023-10-27', 'Buy', 150, 36.00), 
  (18, 'WFC', '2023-10-27', 'Sell', 50, 47.50), 
  (19, 'CITI', '2023-10-27', 'Buy', 75, 52.75), 
  (20, 'XOM', '2023-10-27', 'Sell', 150, 99.00);","SELECT 
  s.stock_symbol, 
  s.company_name, 
  AVG(t.quantity) AS average_daily_volume 
FROM 
  Stocks s 
JOIN 
  Transactions t ON s.stock_symbol = t.stock_symbol 
WHERE 
  s.sector <> 'Technology' AND t.transaction_date BETWEEN '2023-09-27' AND '2023-10-27' 
GROUP BY 
  s.stock_symbol, s.company_name 
ORDER BY 
  average_daily_volume DESC 
LIMIT 5;","This query retrieves the top 5 stocks with the highest average daily trading volume in the past month, excluding those in the technology sector. 

It joins the 'Stocks' and 'Transactions' tables using the 'stock_symbol' column and filters the results to include only stocks with a sector other than 'Technology' and transaction dates between September 27th, 2023, and October 27th, 2023. 

The query then groups the results by stock symbol and company name, calculates the average daily volume for each stock, and orders the results in descending order of average daily volume. 

Finally, the query limits the output to the top 5 stocks."
46,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",What is the total amount of money invested in the technology sector in the United States?,"```sql
CREATE TABLE stocks (
    stock_id INT PRIMARY KEY,
    company_name VARCHAR(255),
    sector VARCHAR(255),
    country VARCHAR(255),
    investment_amount DECIMAL(10,2)
);

INSERT INTO stocks (stock_id, company_name, sector, country, investment_amount)
VALUES
    (1, 'Apple', 'Technology', 'United States', 100000000),
    (2, 'Microsoft', 'Technology', 'United States', 50000000),
    (3, 'Amazon', 'Technology', 'United States', 75000000),
    (4, 'Tesla', 'Technology', 'United States', 25000000),
    (5, 'JPMorgan Chase', 'Finance', 'United States', 100000000),
    (6, 'Berkshire Hathaway', 'Finance', 'United States', 50000000),
    (7, 'Johnson & Johnson', 'Healthcare', 'United States', 75000000),
    (8, 'ExxonMobil', 'Energy', 'United States', 25000000),
    (9, 'Walmart', 'Retail', 'United States', 100000000),
    (10, 'UnitedHealth Group', 'Healthcare', 'United States', 50000000);

CREATE TABLE sectors (
    sector_id INT PRIMARY KEY,
    sector_name VARCHAR(255)
);

INSERT INTO sectors (sector_id, sector_name)
VALUES
    (1, 'Technology'),
    (2, 'Finance'),
    (3, 'Healthcare'),
    (4, 'Energy'),
    (5, 'Retail');
```","```sql
SELECT SUM(investment_amount)
FROM stocks
WHERE sector = 'Technology' AND country = 'United States';
```",This SQL query selects the sum of the investment_amount from the stocks table where the sector is 'Technology' and the country is 'United States'. This will give us the total amount of money invested in the technology sector in the United States.
47,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",What were the top 5 stocks traded in the last week by volume?,"CREATE TABLE StockTrades (trade_id INT PRIMARY KEY, stock_symbol VARCHAR(10) NOT NULL, trade_date DATE NOT NULL, quantity INT NOT NULL, price DECIMAL(10,2) NOT NULL);","SELECT stock_symbol, SUM(quantity) AS total_volume FROM StockTrades WHERE trade_date >= DATE('now', '-7 days') GROUP BY stock_symbol ORDER BY total_volume DESC LIMIT 5;","This query first filters the StockTrades table to only include trades from the last week. Then, it groups the trades by stock symbol and calculates the total volume for each symbol. Finally, it orders the results by total volume in descending order and selects the top 5 rows."
48,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Show the daily closing prices for Apple (AAPL) stock for the past month.,"CREATE TABLE StockPrices (stock_symbol VARCHAR(10) NOT NULL, trade_date DATE NOT NULL, closing_price DECIMAL(10,2) NOT NULL, PRIMARY KEY (stock_symbol, trade_date));","SELECT trade_date, closing_price FROM StockPrices WHERE stock_symbol = 'AAPL' AND trade_date >= DATE('now', '-1 month') ORDER BY trade_date ASC;","This query selects the closing prices for Apple stock from the StockPrices table for the past month. It filters the data by stock symbol and date, orders the results by date, and then returns the trade date and closing price for each day."
49,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","For each customer, calculate the total amount of money they have invested across all their investment accounts.","CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(50) NOT NULL); CREATE TABLE InvestmentAccounts (account_id INT PRIMARY KEY, customer_id INT NOT NULL REFERENCES Customers(customer_id), account_type VARCHAR(20) NOT NULL, balance DECIMAL(10,2) NOT NULL, FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","SELECT c.customer_name, SUM(ia.balance) AS total_investment FROM Customers c JOIN InvestmentAccounts ia ON c.customer_id = ia.customer_id GROUP BY c.customer_name;","This query joins the Customers and InvestmentAccounts tables on the customer_id field. It then groups the results by customer name and calculates the sum of the balances for all investment accounts associated with each customer. Finally, it returns the customer name and the total investment amount for each customer."
50,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 10 cities in the United States with the highest median home prices based on data from the past year. Use window functions to calculate the median home price for each city and rank them accordingly.,"CREATE TABLE properties (
  property_id INT PRIMARY KEY,
  address VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT,
  price INT,
  sale_date DATE
);

INSERT INTO properties (property_id, address, city, state, zip_code, price, sale_date) VALUES
(1, '123 Main St', 'Los Angeles', 'CA', 90001, 1200000, '2023-01-01'),
(2, '456 Oak Ave', 'San Francisco', 'CA', 94102, 1500000, '2023-02-15'),
(3, '789 Pine St', 'Seattle', 'WA', 98101, 850000, '2023-03-07'),
(4, '1011 Elm St', 'Dallas', 'TX', 75201, 500000, '2023-04-22'),
(5, '1213 Willow St', 'Chicago', 'IL', 60611, 450000, '2023-05-10'),
(6, '1415 Maple St', 'Houston', 'TX', 77002, 380000, '2023-06-05'),
(7, '1617 Birch St', 'Phoenix', 'AZ', 85004, 420000, '2023-07-19'),
(8, '1819 Cedar St', 'San Antonio', 'TX', 78205, 350000, '2023-08-12'),
(9, '2021 Oak St', 'San Diego', 'CA', 92101, 800000, '2023-09-04'),
(10, '2223 Pine St', 'Denver', 'CO', 80202, 600000, '2023-10-26');

CREATE TABLE cities (
  city VARCHAR(255) PRIMARY KEY,
  state VARCHAR(255),
  population INT
);

INSERT INTO cities (city, state, population) VALUES
('Los Angeles', 'CA', 3971883),
('San Francisco', 'CA', 873965),
('Seattle', 'WA', 737015),
('Dallas', 'TX', 1343573),
('Chicago', 'IL', 2746388),
('Houston', 'TX', 2325502),
('Phoenix', 'AZ', 1608139),
('San Antonio', 'TX', 1547253),
('San Diego', 'CA', 1425976),
('Denver', 'CO', 711463);","SELECT
  city,
  state,
  AVG(price) AS median_price
FROM properties
WHERE sale_date >= DATE('now', '-1 year')
GROUP BY city, state
ORDER BY median_price DESC
LIMIT 10;","This SQL query selects the city, state, and average price of properties sold in the past year, grouped by city and state. It then orders the results by median price in descending order and limits the output to the top 10 cities with the highest median home prices."
51,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Find the top 5 neighborhoods in New York City with the highest average property prices based on data from the past 3 months, excluding properties with more than 4 bedrooms. Use window functions to calculate the average price for each neighborhood and rank them accordingly.","CREATE TABLE properties (
  property_id INT PRIMARY KEY,
  address VARCHAR(255),
  neighborhood VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT,
  bedrooms INT,
  price INT,
  sale_date DATE
);

INSERT INTO properties (property_id, address, neighborhood, city, state, zip_code, bedrooms, price, sale_date) VALUES
(1, '123 Main St', 'Manhattan', 'New York City', 'NY', 10001, 2, 1200000, '2023-10-01'),
(2, '456 Oak Ave', 'Brooklyn', 'New York City', 'NY', 11211, 3, 850000, '2023-10-15'),
(3, '789 Pine St', 'Queens', 'New York City', 'NY', 11354, 4, 600000, '2023-10-22'),
(4, '1011 Elm St', 'Manhattan', 'New York City', 'NY', 10002, 1, 1500000, '2023-11-05'),
(5, '1213 Willow St', 'Brooklyn', 'New York City', 'NY', 11223, 2, 950000, '2023-11-12'),
(6, '1415 Maple St', 'Bronx', 'New York City', 'NY', 10451, 3, 550000, '2023-11-19'),
(7, '1617 Birch St', 'Manhattan', 'New York City', 'NY', 10003, 5, 2000000, '2023-11-26'),
(8, '1819 Cedar St', 'Queens', 'New York City', 'NY', 11362, 4, 700000, '2023-12-03'),
(9, '2021 Oak St', 'Staten Island', 'New York City', 'NY', 10301, 3, 450000, '2023-12-10'),
(10, '2223 Pine St', 'Brooklyn', 'New York City', 'NY', 11234, 2, 1100000, '2023-12-17');","SELECT
  neighborhood,
  AVG(price) AS average_price
FROM properties
WHERE city = 'New York City' AND bedrooms <= 4 AND sale_date >= DATE('now', '-3 months')
GROUP BY neighborhood
ORDER BY average_price DESC
LIMIT 5;","This SQL query selects the neighborhood and average price of properties sold in New York City in the past 3 months, excluding properties with more than 4 bedrooms. It then groups the results by neighborhood, orders them by average price in descending order, and limits the output to the top 5 neighborhoods with the highest average property prices."
52,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average price per square foot for apartments in the city of San Francisco?,"CREATE TABLE listings (
  listing_id INT PRIMARY KEY,
  address VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT,
  property_type VARCHAR(255),
  bedrooms INT,
  bathrooms FLOAT,
  square_footage INT,
  price INT,
  listing_date DATE
);

INSERT INTO listings (listing_id, address, city, state, zip_code, property_type, bedrooms, bathrooms, square_footage, price, listing_date)
VALUES
  (1, '123 Main St', 'San Francisco', 'CA', 94105, 'Apartment', 2, 1.5, 800, 1200000, '2023-01-01'),
  (2, '456 Oak Ave', 'San Francisco', 'CA', 94110, 'Apartment', 1, 1, 600, 900000, '2023-02-02'),
  (3, '789 Pine St', 'San Francisco', 'CA', 94115, 'House', 3, 2, 1500, 2000000, '2023-03-03'),
  (4, '1011 Cedar St', 'San Francisco', 'CA', 94120, 'Condo', 2, 2, 1200, 1500000, '2023-04-04'),
  (5, '1213 Elm St', 'San Francisco', 'CA', 94125, 'Apartment', 1, 1, 500, 750000, '2023-05-05'),
  (6, '1415 Willow St', 'San Francisco', 'CA', 94130, 'House', 4, 3, 2000, 3000000, '2023-06-06'),
  (7, '1617 Maple St', 'Los Angeles', 'CA', 90001, 'Apartment', 2, 2, 1000, 1300000, '2023-07-07'),
  (8, '1819 Birch St', 'Los Angeles', 'CA', 90002, 'House', 3, 2, 1800, 2500000, '2023-08-08'),
  (9, '2021 Oakwood Ave', 'Los Angeles', 'CA', 90003, 'Condo', 2, 1, 900, 1100000, '2023-09-09'),
  (10, '2223 Pinewood St', 'Los Angeles', 'CA', 90004, 'Apartment', 1, 1, 700, 850000, '2023-10-10'),
  (11, '2425 Cedarwood St', 'Los Angeles', 'CA', 90005, 'House', 4, 3, 2200, 3500000, '2023-11-11'),
  (12, '2627 Elmwood St', 'Los Angeles', 'CA', 90006, 'Apartment', 2, 1, 800, 1000000, '2023-12-12');

CREATE TABLE neighborhoods (
  neighborhood_id INT PRIMARY KEY,
  neighborhood_name VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT
);

INSERT INTO neighborhoods (neighborhood_id, neighborhood_name, city, state, zip_code)
VALUES
  (1, 'Nob Hill', 'San Francisco', 'CA', 94105),
  (2, 'Pacific Heights', 'San Francisco', 'CA', 94110),
  (3, 'Marina District', 'San Francisco', 'CA', 94115),
  (4, 'Cow Hollow', 'San Francisco', 'CA', 94120),
  (5, 'Russian Hill', 'San Francisco', 'CA', 94125),
  (6, 'Presidio Heights', 'San Francisco', 'CA', 94130),
  (7, 'Downtown', 'Los Angeles', 'CA', 90001),
  (8, 'Hollywood', 'Los Angeles', 'CA', 90002),
  (9, 'Westwood', 'Los Angeles', 'CA', 90003),
  (10, 'Century City', 'Los Angeles', 'CA', 90004),
  (11, 'Bel Air', 'Los Angeles', 'CA', 90005),
  (12, 'Beverly Hills', 'Los Angeles', 'CA', 90006);","SELECT n.neighborhood_name, l.property_type, AVG(l.price / l.square_footage) AS avg_price_per_sq_ft
FROM listings l
JOIN neighborhoods n ON l.zip_code = n.zip_code
WHERE l.city = 'San Francisco' AND l.property_type = 'Apartment'
GROUP BY n.neighborhood_name, l.property_type
ORDER BY n.neighborhood_name, l.property_type;","This SQL query calculates the average price per square foot for apartments in each neighborhood of San Francisco. It joins the `listings` and `neighborhoods` tables on the `zip_code` field. It then filters the results to include only apartments in San Francisco. It then groups the results by neighborhood name and property type and calculates the average price per square foot for each group. Finally, it orders the results by neighborhood name and property type."
53,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Find the top 10 cities with the highest median listing price for houses in the past 3 months, including the median price, city name, and state abbreviation.","CREATE TABLE listings (
  listing_id INT PRIMARY KEY,
  address VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT,
  property_type VARCHAR(255),
  bedrooms INT,
  bathrooms FLOAT,
  square_footage INT,
  listing_price INT,
  listing_date DATE,
  sale_date DATE,
  sale_price INT);

INSERT INTO listings (listing_id, address, city, state, zip_code, property_type, bedrooms, bathrooms, square_footage, listing_price, listing_date, sale_date, sale_price) VALUES
(1, '123 Main St', 'Los Angeles', 'CA', 90001, 'House', 3, 2.5, 1500, 750000, '2023-01-01', '2023-02-15', 745000),
(2, '456 Oak Ave', 'San Diego', 'CA', 92101, 'Condo', 2, 1.5, 1000, 500000, '2023-01-15', '2023-02-28', 495000),
(3, '789 Pine St', 'San Francisco', 'CA', 94101, 'House', 4, 3, 2000, 1000000, '2023-02-01', '2023-03-15', 990000),
(4, '1011 Willow St', 'Seattle', 'WA', 98101, 'Condo', 1, 1, 750, 400000, '2023-02-15', '2023-03-28', 395000),
(5, '1213 Maple St', 'Portland', 'OR', 97201, 'House', 3, 2, 1200, 600000, '2023-03-01', '2023-04-15', 590000),
(6, '1415 Elm St', 'Denver', 'CO', 80201, 'Condo', 2, 1, 900, 350000, '2023-03-15', '2023-04-28', 345000),
(7, '1617 Birch St', 'Austin', 'TX', 78701, 'House', 4, 2.5, 1800, 700000, '2023-04-01', '2023-05-15', 690000),
(8, '1819 Oak St', 'Dallas', 'TX', 75201, 'Condo', 1, 1, 600, 250000, '2023-04-15', '2023-05-28', 245000),
(9, '2021 Pine St', 'Houston', 'TX', 77001, 'House', 3, 2, 1400, 550000, '2023-05-01', '2023-06-15', 540000),
(10, '2223 Willow St', 'Phoenix', 'AZ', 85001, 'Condo', 2, 1.5, 1100, 450000, '2023-05-15', '2023-06-28', 440000);

CREATE TABLE cities (
  city_id INT PRIMARY KEY,
  city_name VARCHAR(255),
  state_abbreviation VARCHAR(255)
);

INSERT INTO cities (city_id, city_name, state_abbreviation) VALUES
(1, 'Los Angeles', 'CA'),
(2, 'San Diego', 'CA'),
(3, 'San Francisco', 'CA'),
(4, 'Seattle', 'WA'),
(5, 'Portland', 'OR'),
(6, 'Denver', 'CO'),
(7, 'Austin', 'TX'),
(8, 'Dallas', 'TX'),
(9, 'Houston', 'TX'),
(10, 'Phoenix', 'AZ');","SELECT c.city_name, c.state_abbreviation, ROUND(AVG(l.listing_price)) AS median_listing_price
FROM listings l
JOIN cities c ON l.city = c.city_name
WHERE l.listing_date >= DATE('now', '-3 months') AND l.property_type = 'House'
GROUP BY c.city_name, c.state_abbreviation
ORDER BY median_listing_price DESC
LIMIT 10;","This SQL query first joins the `listings` and `cities` tables on the `city` column. It then filters the results to include only listings for houses in the past 3 months. The query then groups the results by city and state, and calculates the average listing price for each group. Finally, the query sorts the results in descending order of median listing price and limits the output to the top 10 cities."
54,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","What are the top 10 cities with the highest median rental prices for 3-bedroom apartments in the United States as of October 27, 2023?","CREATE TABLE rental_listings (
  listing_id INT PRIMARY KEY,
  city VARCHAR(255),
  state VARCHAR(255),
  bedrooms INT,
  median_rental_price DECIMAL(10,2),
  date DATE
);

INSERT INTO rental_listings (listing_id, city, state, bedrooms, median_rental_price, date) VALUES
(1, 'New York City', 'NY', 1, 3500.00, '2023-10-27'),
(2, 'Los Angeles', 'CA', 2, 2800.00, '2023-10-27'),
(3, 'Chicago', 'IL', 3, 2200.00, '2023-10-27'),
(4, 'Houston', 'TX', 1, 1800.00, '2023-10-27'),
(5, 'Phoenix', 'AZ', 2, 1700.00, '2023-10-27'),
(6, 'Philadelphia', 'PA', 3, 1600.00, '2023-10-27'),
(7, 'San Antonio', 'TX', 1, 1500.00, '2023-10-27'),
(8, 'San Diego', 'CA', 2, 1400.00, '2023-10-27'),
(9, 'Dallas', 'TX', 3, 1300.00, '2023-10-27'),
(10, 'San Jose', 'CA', 1, 1200.00, '2023-10-27');

CREATE TABLE city_populations (
  city VARCHAR(255),
  state VARCHAR(255),
  population INT,
  PRIMARY KEY (city, state)
);

INSERT INTO city_populations (city, state, population) VALUES
('New York City', 'NY', 8419000),
('Los Angeles', 'CA', 3971000),
('Chicago', 'IL', 2746000),
('Houston', 'TX', 2325000),
('Phoenix', 'AZ', 1660000),
('Philadelphia', 'PA', 1584000),
('San Antonio', 'TX', 1451000),
('San Diego', 'CA', 1425000),
('Dallas', 'TX', 1341000),
('San Jose', 'CA', 1021000);","WITH RankedCities AS (
    SELECT
        city,
        state,
        median_rental_price,
        ROW_NUMBER() OVER (PARTITION BY state ORDER BY median_rental_price DESC) AS rank_within_state
    FROM
        rental_listings
    WHERE
        bedrooms = 3 AND date = '2023-10-27'
)
SELECT
    RankedCities.city,
    RankedCities.state,
    RankedCities.median_rental_price
FROM
    RankedCities
JOIN
    city_populations ON RankedCities.city = city_populations.city AND RankedCities.state = city_populations.state
WHERE
    RankedCities.rank_within_state <= 10
ORDER BY
    RankedCities.median_rental_price DESC;","This query retrieves the top 10 cities with the highest median rental prices for 3-bedroom apartments in the United States as of October 27, 2023. It accomplishes this by:

1. Creating a CTE (Common Table Expression) called `RankedCities` that ranks cities within each state based on their median rental price for 3-bedroom apartments on the specified date.
2. Joining `RankedCities` with a table called `city_populations` to get the population of each city.
3. Filtering the results to include only cities ranked within the top 10 in their respective states.
4. Ordering the results in descending order of median rental price.

The query leverages the `ROW_NUMBER()` window function to partition cities by state and assign a rank based on their median rental price within each state. This allows us to efficiently identify the top cities in each state without having to perform multiple subqueries or self-joins."
55,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","Could you please create a table named 'student_enrollment' with the following columns: student_id (INT), first_name (VARCHAR(50)), last_name (VARCHAR(50)), grade_level (INT), and enrollment_date (DATE)?","CREATE TABLE student_enrollment (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), grade_level INT, enrollment_date DATE);","CREATE TABLE student_enrollment (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), grade_level INT, enrollment_date DATE);",This SQL statement creates a table named 'student_enrollment' with the specified columns and data types. The 'PRIMARY KEY' constraint ensures that each student_id is unique and cannot be null.
56,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What is the average grade point average (GPA) of students in grade 10?,"CREATE TABLE student (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), grade_level INT, enrollment_date DATE);
CREATE TABLE course (course_id INT PRIMARY KEY, course_name VARCHAR(50), teacher_id INT);
CREATE TABLE enrollment (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, grade_level INT, semester VARCHAR(20), year INT);
CREATE TABLE grade (grade_id INT PRIMARY KEY, student_id INT, course_id INT, grade_level INT, semester VARCHAR(20), year INT, grade DECIMAL(3,2));
INSERT INTO student (student_id, first_name, last_name, grade_level, enrollment_date) VALUES (1, 'John', 'Doe', 10, '2022-08-15'), (2, 'Jane', 'Smith', 11, '2021-08-15'), (3, 'Michael', 'Brown', 9, '2023-08-15'), (4, 'Emily', 'Johnson', 12, '2020-08-15'), (5, 'David', 'Davis', 10, '2022-08-15');
INSERT INTO course (course_id, course_name, teacher_id) VALUES (1, 'Math', 101), (2, 'Science', 102), (3, 'English', 103), (4, 'History', 104), (5, 'Art', 105);
INSERT INTO enrollment (enrollment_id, student_id, course_id, grade_level, semester, year) VALUES (1, 1, 1, 10, 'Fall', 2022), (2, 2, 2, 11, 'Spring', 2022), (3, 3, 3, 9, 'Fall', 2023), (4, 4, 4, 12, 'Summer', 2021), (5, 5, 5, 10, 'Fall', 2022), (6, 1, 2, 10, 'Spring', 2023), (7, 2, 3, 11, 'Fall', 2022), (8, 3, 4, 9, 'Spring', 2024), (9, 4, 5, 12, 'Winter', 2021), (10, 5, 1, 10, 'Summer', 2023);
INSERT INTO grade (grade_id, student_id, course_id, grade_level, semester, year, grade) VALUES (1, 1, 1, 10, 'Fall', 2022, 85.00), (2, 2, 2, 11, 'Spring', 2022, 92.00), (3, 3, 3, 9, 'Fall', 2023, 78.00), (4, 4, 4, 12, 'Summer', 2021, 95.00), (5, 5, 5, 10, 'Fall', 2022, 88.00), (6, 1, 2, 10, 'Spring', 2023, 90.00), (7, 2, 3, 11, 'Fall', 2022, 87.00), (8, 3, 4, 9, 'Spring', 2024, 75.00), (9, 4, 5, 12, 'Winter', 2021, 98.00), (10, 5, 1, 10, 'Summer', 2023, 82.00);",SELECT AVG(g.grade) FROM grade g JOIN enrollment e ON g.student_id = e.student_id AND g.course_id = e.course_id JOIN student s ON e.student_id = s.student_id WHERE s.grade_level = 10;,"This SQL statement calculates the average GPA of students in grade 10 by joining the 'grade', 'enrollment', and 'student' tables on the student_id column. It then filters the results to include only students in grade 10 and calculates the average of the 'grade' column."
57,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",How many students are enrolled in each grade level?,"CREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), grade_level INT, school_id INT, FOREIGN KEY (school_id) REFERENCES schools(school_id));
CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), city VARCHAR(255), state VARCHAR(255));
INSERT INTO students (student_id, first_name, last_name, grade_level, school_id) VALUES
(1, 'Alice', 'Smith', 9, 1),
(2, 'Bob', 'Johnson', 10, 1),
(3, 'Charlie', 'Brown', 11, 2),
(4, 'David', 'Garcia', 12, 2),
(5, 'Emily', 'Rodriguez', 9, 3),
(6, 'Frank', 'Williams', 10, 3),
(7, 'Grace', 'Davis', 11, 4),
(8, 'Henry', 'Miller', 12, 4);
INSERT INTO schools (school_id, school_name, city, state) VALUES
(1, 'Central High School', 'Anytown', 'CA'),
(2, 'North Middle School', 'Anytown', 'CA'),
(3, 'South Elementary School', 'Anytown', 'CA'),
(4, 'West High School', 'Anytown', 'CA');","SELECT grade_level, COUNT(*) AS num_students FROM students GROUP BY grade_level ORDER BY grade_level ASC;",This SQL query selects the grade level and counts the number of students in each grade level from the 'students' table. It groups the results by grade level and orders them in ascending order.
58,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What is the average test score for each subject?,"CREATE TABLE students (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), grade_level INT, school_id INT, FOREIGN KEY (school_id) REFERENCES schools(school_id));
CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), city VARCHAR(255), state VARCHAR(255));
CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), teacher_id INT, FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id));
CREATE TABLE teachers (teacher_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255));
CREATE TABLE test_scores (test_score_id INT PRIMARY KEY, student_id INT, course_id INT, test_score INT, test_date DATE, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id));
INSERT INTO students (student_id, first_name, last_name, grade_level, school_id) VALUES
(1, 'Alice', 'Smith', 9, 1),
(2, 'Bob', 'Johnson', 10, 1),
(3, 'Charlie', 'Brown', 11, 2),
(4, 'David', 'Garcia', 12, 2),
(5, 'Emily', 'Rodriguez', 9, 3),
(6, 'Frank', 'Williams', 10, 3),
(7, 'Grace', 'Davis', 11, 4),
(8, 'Henry', 'Miller', 12, 4);
INSERT INTO schools (school_id, school_name, city, state) VALUES
(1, 'Central High School', 'Anytown', 'CA'),
(2, 'North Middle School', 'Anytown', 'CA'),
(3, 'South Elementary School', 'Anytown', 'CA'),
(4, 'West High School', 'Anytown', 'CA');
INSERT INTO courses (course_id, course_name, teacher_id) VALUES
(1, 'Math', 1),
(2, 'English', 2),
(3, 'Science', 3),
(4, 'History', 4);
INSERT INTO teachers (teacher_id, first_name, last_name) VALUES
(1, 'Mr.', 'Anderson'),
(2, 'Mrs.', 'Johnson'),
(3, 'Mr.', 'Lee'),
(4, 'Ms.', 'Garcia');
INSERT INTO test_scores (test_score_id, student_id, course_id, test_score, test_date) VALUES
(1, 1, 1, 85, '2023-03-08'),
(2, 1, 2, 90, '2023-03-08'),
(3, 1, 3, 80, '2023-03-08'),
(4, 2, 1, 75, '2023-03-08'),
(5, 2, 2, 85, '2023-03-08'),
(6, 2, 3, 90, '2023-03-08'),
(7, 3, 1, 95, '2023-03-08'),
(8, 3, 2, 80, '2023-03-08'),
(9, 3, 3, 75, '2023-03-08'),
(10, 4, 1, 88, '2023-03-08'),
(11, 4, 2, 92, '2023-03-08'),
(12, 4, 3, 85, '2023-03-08');","SELECT c.course_name, AVG(t.test_score) AS average_score FROM test_scores t JOIN courses c ON t.course_id = c.course_id GROUP BY c.course_name ORDER BY c.course_name ASC;","This SQL query selects the course name and the average test score for each course from the 'test_scores' and 'courses' tables. It joins the tables on the 'course_id' field, groups the results by course name, calculates the average test score, and orders the results by course name in ascending order."
59,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",List all the students in the school district who have a GPA of 3.5 or higher.,"CREATE TABLE Students (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), grade_level INT, GPA DECIMAL(3,2));
CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), teacher_id INT, grade_level INT);
CREATE TABLE Grades (grade_id INT PRIMARY KEY, student_id INT, course_id INT, grade DECIMAL(3,2), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));
INSERT INTO Students (student_id, first_name, last_name, grade_level, GPA) VALUES
(1, 'John', 'Smith', 9, 3.8),
(2, 'Alice', 'Johnson', 10, 3.6),
(3, 'Bob', 'Williams', 11, 4.0),
(4, 'Emily', 'Jones', 12, 3.2),
(5, 'Michael', 'Brown', 9, 2.7);
INSERT INTO Courses (course_id, course_name, teacher_id, grade_level) VALUES
(1, 'Math', 101, 9),
(2, 'English', 102, 10),
(3, 'Science', 103, 11),
(4, 'History', 104, 12);
INSERT INTO Grades (grade_id, student_id, course_id, grade) VALUES
(1, 1, 1, 95),
(2, 1, 2, 88),
(3, 1, 3, 92),
(4, 2, 1, 75),
(5, 2, 2, 85),
(6, 2, 3, 90),
(7, 3, 1, 98),
(8, 3, 2, 95),
(9, 3, 3, 100),
(10, 4, 1, 80),
(11, 4, 2, 77),
(12, 4, 3, 89),
(13, 5, 1, 65),
(14, 5, 2, 70),
(15, 5, 3, 75);","SELECT s.first_name, s.last_name
FROM Students s
JOIN Grades g ON s.student_id = g.student_id
WHERE g.grade >= 3.5;",This query joins the Students and Grades tables on the student_id field. It then selects the first_name and last_name of all students who have a grade of 3.5 or higher in any course.
60,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",List the top 5 parts that have the highest inventory value.,"CREATE TABLE parts (part_id INT PRIMARY KEY, part_name VARCHAR(255), inventory_level INT, unit_cost DECIMAL(10,2));
INSERT INTO parts (part_id, part_name, inventory_level, unit_cost) VALUES
(1, 'Widget A', 100, 5.00),
(2, 'Widget B', 50, 10.00),
(3, 'Widget C', 25, 15.00),
(4, 'Widget D', 150, 2.00),
(5, 'Widget E', 75, 8.00);

CREATE TABLE orders (order_id INT PRIMARY KEY, part_id INT, quantity INT, order_date DATE);","SELECT part_name, inventory_level * unit_cost AS inventory_value
FROM parts
ORDER BY inventory_value DESC
LIMIT 5;","This SQL query first selects the part_name and calculates the inventory_value for each part by multiplying the inventory_level and unit_cost.
Then, it orders the results by inventory_value in descending order and limits the output to the top 5 parts."
61,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Calculate the average inventory turnover for the past year.,"CREATE TABLE inventory_transactions (transaction_id INT PRIMARY KEY, part_id INT, transaction_type VARCHAR(255), quantity INT, transaction_date DATE);
INSERT INTO inventory_transactions (transaction_id, part_id, transaction_type, quantity, transaction_date) VALUES
(1, 1, 'IN', 100, '2023-01-01'),
(2, 2, 'OUT', 50, '2023-01-15'),
(3, 3, 'IN', 25, '2023-02-01'),
(4, 4, 'OUT', 150, '2023-03-01'),
(5, 5, 'IN', 75, '2023-04-01'),
(6, 1, 'OUT', 25, '2023-05-01'),
(7, 2, 'IN', 75, '2023-06-01'),
(8, 3, 'OUT', 10, '2023-07-01'),
(9, 4, 'IN', 50, '2023-08-01'),
(10, 5, 'OUT', 30, '2023-09-01');","WITH InventoryTransactions AS (
    SELECT
        part_id,
        transaction_type,
        quantity,
        transaction_date
    FROM
        inventory_transactions
    WHERE
        transaction_date >= DATE('now', '-1 year')
),
InventorySummary AS (
    SELECT
        part_id,
        SUM(CASE WHEN transaction_type = 'IN' THEN quantity ELSE -quantity END) AS net_inventory_change
    FROM
        InventoryTransactions
    GROUP BY
        part_id
),
AverageInventory AS (
    SELECT
        part_id,
        AVG(inventory_level) AS average_inventory
    FROM
        parts
)
SELECT
    IS.part_id,
    IS.net_inventory_change / AI.average_inventory AS inventory_turnover
FROM
    InventorySummary IS
JOIN
    AverageInventory AI ON IS.part_id = AI.part_id;","This SQL query first calculates the net inventory change for each part over the past year using a common table expression (CTE) called InventoryTransactions.
Then, it calculates the average inventory for each part using another CTE called AverageInventory.
Finally, it joins these CTEs and calculates the inventory turnover for each part by dividing the net inventory change by the average inventory."
62,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Identify the top 3 suppliers by total order value in the past quarter.,"CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), contact_name VARCHAR(255), contact_email VARCHAR(255));
INSERT INTO suppliers (supplier_id, supplier_name, contact_name, contact_email) VALUES
(1, 'Acme Supplies', 'John Doe', 'john.doe@acme.com'),
(2, 'Best Parts', 'Jane Smith', 'jane.smith@bestparts.com'),
(3, 'Reliable Components', 'David Lee', 'david.lee@reliable.com');

CREATE TABLE orders (order_id INT PRIMARY KEY, supplier_id INT, order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO orders (order_id, supplier_id, order_date, order_amount) VALUES
(1, 1, '2023-04-01', 1000.00),
(2, 2, '2023-04-15', 500.00),
(3, 3, '2023-05-01', 750.00),
(4, 1, '2023-05-15', 250.00),
(5, 2, '2023-06-01', 1000.00),
(6, 3, '2023-06-15', 500.00);","SELECT
    s.supplier_name,
    SUM(o.order_amount) AS total_order_value
FROM
    suppliers s
JOIN
    orders o ON s.supplier_id = o.supplier_id
WHERE
    o.order_date >= DATE('now', '-3 months')
GROUP BY
    s.supplier_name
ORDER BY
    total_order_value DESC
LIMIT 3;","This SQL query first joins the suppliers and orders tables on the supplier_id.
Then, it filters the orders to include only those placed in the past quarter.
Next, it groups the orders by supplier name and calculates the total order value for each supplier.
Finally, it orders the results by total order value in descending order and limits the output to the top 3 suppliers."
63,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",What is the total number of widgets produced in the last week by each plant?,"CREATE TABLE widgets (widget_id INT PRIMARY KEY, plant_id INT, production_date DATE, quantity INT); 
 INSERT INTO widgets (widget_id, plant_id, production_date, quantity) VALUES (1, 1, '2023-03-01', 100), (2, 1, '2023-03-01', 150), (3, 2, '2023-03-01', 50), (4, 2, '2023-03-01', 75), (5, 1, '2023-03-02', 125), (6, 1, '2023-03-02', 175), (7, 2, '2023-03-02', 60), (8, 2, '2023-03-02', 85), (9, 1, '2023-03-03', 100), (10, 1, '2023-03-03', 150), (11, 2, '2023-03-03', 50), (12, 2, '2023-03-03', 75), (13, 1, '2023-03-04', 125), (14, 1, '2023-03-04', 175), (15, 2, '2023-03-04', 60), (16, 2, '2023-03-04', 85), (17, 1, '2023-03-05', 100), (18, 1, '2023-03-05', 150), (19, 2, '2023-03-05', 50), (20, 2, '2023-03-05', 75), (21, 1, '2023-03-06', 125), (22, 1, '2023-03-06', 175), (23, 2, '2023-03-06', 60), (24, 2, '2023-03-06', 85), (25, 1, '2023-03-07', 100), (26, 1, '2023-03-07', 150), (27, 2, '2023-03-07', 50), (28, 2, '2023-03-07', 75);","WITH WeeklyProduction AS ( SELECT plant_id, SUM(quantity) AS total_widgets FROM widgets WHERE production_date BETWEEN DATE('now', '-7 days') AND DATE('now') GROUP BY plant_id ) SELECT plant_id, total_widgets FROM WeeklyProduction ORDER BY plant_id;","This SQL query calculates the total number of widgets produced in the last week by each plant. 

1. **Derive Weekly Production:**
   - The CTE (Common Table Expression) `WeeklyProduction` is created to aggregate the total widgets produced by each plant in the last seven days.
   - It uses the `widgets` table to filter records based on the `production_date` within the last week (from 'now' - 7 days to 'now').
   - The `SUM(quantity)` function calculates the total widgets for each plant and assigns it to the `total_widgets` column.

2. **Retrieve Plant-wise Totals:**
   - The final `SELECT` statement retrieves the `plant_id` and `total_widgets` from the `WeeklyProduction` CTE for each plant.
   - The results are ordered by the `plant_id` for clarity.

This query provides a concise and efficient way to analyze weekly production across different plants."
64,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Which suppliers delivered raw materials to Plant 2 in the last month?,"CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255)); 
 INSERT INTO suppliers (supplier_id, supplier_name) VALUES (1, 'Acme Supplies'), (2, 'Best Materials'), (3, 'Quality Components');

CREATE TABLE raw_materials (raw_material_id INT PRIMARY KEY, supplier_id INT, delivery_date DATE); 
 INSERT INTO raw_materials (raw_material_id, supplier_id, delivery_date) VALUES (1, 1, '2023-02-15'), (2, 2, '2023-02-20'), (3, 3, '2023-02-22'), (4, 1, '2023-03-05'), (5, 2, '2023-03-10'), (6, 3, '2023-03-12'), (7, 1, '2023-03-18'), (8, 2, '2023-03-23'), (9, 3, '2023-03-25');

CREATE TABLE plant_deliveries (plant_id INT, raw_material_id INT, PRIMARY KEY (plant_id, raw_material_id));
 INSERT INTO plant_deliveries (plant_id, raw_material_id) VALUES (1, 1), (1, 2), (1, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9);","SELECT s.supplier_name FROM suppliers s JOIN raw_materials rm ON s.supplier_id = rm.supplier_id JOIN plant_deliveries pd ON rm.raw_material_id = pd.raw_material_id WHERE pd.plant_id = 2 AND rm.delivery_date BETWEEN DATE('now', '-1 month') AND DATE('now');","This SQL query identifies suppliers who delivered raw materials to Plant 2 in the last month. 

1. **Join Relevant Tables:**
   - The query starts by joining three tables: `suppliers`, `raw_materials`, and `plant_deliveries`.
   - The `suppliers` table provides supplier information (`supplier_id`, `supplier_name`).
   - The `raw_materials` table contains details about raw materials (`raw_material_id`, `supplier_id`, `delivery_date`).
   - The `plant_deliveries` table links plants to delivered raw materials (`plant_id`, `raw_material_id`).
   - The joins connect these tables based on shared columns: `suppliers` and `raw_materials` on `supplier_id`, and `raw_materials` and `plant_deliveries` on `raw_material_id`.

2. **Filter by Plant and Timeframe:**
   - The `WHERE` clause filters the results based on two conditions:
     - `pd.plant_id = 2`: This selects deliveries specifically for Plant 2.
     - `rm.delivery_date BETWEEN DATE('now', '-1 month') AND DATE('now')`: This restricts the results to deliveries made within the last month (from 'now' - 1 month to 'now').

3. **Retrieve Supplier Names:**
   - The final `SELECT` statement retrieves the `supplier_name` from the `suppliers` table for suppliers meeting the filtering criteria.
   - This provides a list of suppliers who delivered raw materials to Plant 2 in the last month.

This query demonstrates how to combine multiple tables and apply filtering conditions to extract specific information from a database."
65,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Add a new patient record to the patient_data table with the following information: patient_id = 123456, first_name = 'John', last_name = 'Doe', date_of_birth = '1990-01-01', address = '123 Main Street, Anytown, USA', phone_number = '555-123-4567', email = 'john.doe@example.com', insurance_provider = 'Aetna', insurance_id = '1234567890'","CREATE TABLE patient_data (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), insurance_id VARCHAR(255));","INSERT INTO patient_data (patient_id, first_name, last_name, date_of_birth, address, phone_number, email, insurance_provider, insurance_id) VALUES (123456, 'John', 'Doe', '1990-01-01', '123 Main Street, Anytown, USA', '555-123-4567', 'john.doe@example.com', 'Aetna', '1234567890')",This SQL statement inserts a new record into the patient_data table with the provided information.
66,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Update the phone number for patient with patient_id = 123456 to '555-987-6543',"CREATE TABLE patient_data (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), insurance_id VARCHAR(255));",UPDATE patient_data SET phone_number = '555-987-6543' WHERE patient_id = 123456,This SQL statement updates the phone number for the patient with patient_id = 123456.
67,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Delete the patient record with patient_id = 123457,"CREATE TABLE patient_data (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), insurance_id VARCHAR(255));",DELETE FROM patient_data WHERE patient_id = 123457,This SQL statement deletes the patient record with patient_id = 123457.
68,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Add a new medication record to the medication_data table with the following information: medication_id = 987654, medication_name = 'Aspirin', dosage = '325 mg', frequency = 'twice daily', start_date = '2023-10-26', end_date = '2023-11-09', patient_id = 123456","CREATE TABLE medication_data (medication_id INT PRIMARY KEY, medication_name VARCHAR(255), dosage VARCHAR(255), frequency VARCHAR(255), start_date DATE, end_date DATE, patient_id INT REFERENCES patient_data(patient_id));","INSERT INTO medication_data (medication_id, medication_name, dosage, frequency, start_date, end_date, patient_id) VALUES (987654, 'Aspirin', '325 mg', 'twice daily', '2023-10-26', '2023-11-09', 123456)",This SQL statement inserts a new record into the medication_data table with the provided information.
69,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Update the end_date for the medication record with medication_id = 987654 to '2023-11-16',"CREATE TABLE medication_data (medication_id INT PRIMARY KEY, medication_name VARCHAR(255), dosage VARCHAR(255), frequency VARCHAR(255), start_date DATE, end_date DATE, patient_id INT REFERENCES patient_data(patient_id));",UPDATE medication_data SET end_date = '2023-11-16' WHERE medication_id = 987654,This SQL statement updates the end_date for the medication record with medication_id = 987654.
70,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",What is the total yield of corn in Iowa for the year 2022?,"CREATE TABLE Iowa_Corn_Yields (  
    Year INT,
    County VARCHAR(50),
    Yield_Per_Acre DECIMAL(10,2)
);

INSERT INTO Iowa_Corn_Yields (Year, County, Yield_Per_Acre) VALUES
(2022, 'Adair', 175.4),
(2022, 'Adams', 182.7),
(2022, 'Allamakee', 168.9);

-- Additional tables and views can be added here, if needed",SELECT SUM(Yield_Per_Acre) AS Total_Yield FROM Iowa_Corn_Yields WHERE Year = 2022;,This SQL query selects the sum of the Yield_Per_Acre column from the Iowa_Corn_Yields table where the Year column is equal to 2022. This will give us the total yield of corn in Iowa for the year 2022.
71,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Which counties in Iowa had a corn yield above 200 bushels per acre in 2022?,"CREATE TABLE Iowa_Corn_Yields (  
    Year INT,
    County VARCHAR(50),
    Yield_Per_Acre DECIMAL(10,2)
);

INSERT INTO Iowa_Corn_Yields (Year, County, Yield_Per_Acre) VALUES
(2022, 'Adair', 175.4),
(2022, 'Adams', 182.7),
(2022, 'Allamakee', 168.9);

-- Additional tables and views can be added here, if needed",SELECT County FROM Iowa_Corn_Yields WHERE Year = 2022 AND Yield_Per_Acre > 200;,This SQL query selects the County column from the Iowa_Corn_Yields table where the Year column is equal to 2022 and the Yield_Per_Acre column is greater than 200. This will give us a list of counties in Iowa that had a corn yield above 200 bushels per acre in 2022.
72,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",What is the average corn yield for each county in Iowa for the years 2021 and 2022?,"CREATE TABLE Iowa_Corn_Yields (  
    Year INT,
    County VARCHAR(50),
    Yield_Per_Acre DECIMAL(10,2)
);

INSERT INTO Iowa_Corn_Yields (Year, County, Yield_Per_Acre) VALUES
(2021, 'Adair', 170.2),
(2021, 'Adams', 178.5),
(2021, 'Allamakee', 165.7),
(2022, 'Adair', 175.4),
(2022, 'Adams', 182.7),
(2022, 'Allamakee', 168.9);

-- Additional tables and views can be added here, if needed","SELECT County, AVG(Yield_Per_Acre) AS Average_Yield FROM Iowa_Corn_Yields WHERE Year IN (2021, 2022) GROUP BY County ORDER BY County;","This SQL query selects the County column and the average of the Yield_Per_Acre column as Average_Yield from the Iowa_Corn_Yields table where the Year column is in (2021, 2022). The results are grouped by County and ordered by County."
73,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","What is the total amount of rainfall in inches for each month in 2022 in Des Moines, Iowa?","CREATE TABLE Des_Moines_Weather (  
    Month INT,
    Year INT,
    Rainfall_Inches DECIMAL(5,2)
);

INSERT INTO Des_Moines_Weather (Month, Year, Rainfall_Inches) VALUES
(1, 2022, 1.5),
(2, 2022, 2.3),
(3, 2022, 3.1),
(4, 2022, 4.2),
(5, 2022, 5.0),
(6, 2022, 3.8),
(7, 2022, 4.5),
(8, 2022, 2.9),
(9, 2022, 3.7),
(10, 2022, 2.5),
(11, 2022, 2.1),
(12, 2022, 1.8);

-- Additional tables and views can be added here, if needed","SELECT Month, SUM(Rainfall_Inches) AS Total_Rainfall FROM Des_Moines_Weather WHERE Year = 2022 GROUP BY Month ORDER BY Month;",This SQL query selects the Month column and the sum of the Rainfall_Inches column as Total_Rainfall from the Des_Moines_Weather table where the Year column is equal to 2022. The results are grouped by Month and ordered by Month.
74,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","What is the average temperature in Fahrenheit for each month in 2022 in Des Moines, Iowa?","CREATE TABLE Des_Moines_Weather (  
    Month INT,
    Year INT,
    Average_Temperature_Fahrenheit DECIMAL(5,2)
);

INSERT INTO Des_Moines_Weather (Month, Year, Average_Temperature_Fahrenheit) VALUES
(1, 2022, 28.5),
(2, 2022, 32.7),
(3, 2022, 40.1),
(4, 2022, 52.2),
(5, 2022, 63.0),
(6, 2022, 71.8),
(7, 2022, 75.4),
(8, 2022, 72.9),
(9, 2022, 65.7),
(10, 2022, 54.5),
(11, 2022, 42.1),
(12, 2022, 31.8);

-- Additional tables and views can be added here, if needed","SELECT Month, AVG(Average_Temperature_Fahrenheit) AS Average_Temperature FROM Des_Moines_Weather WHERE Year = 2022 GROUP BY Month ORDER BY Month;",This SQL query selects the Month column and the average of the Average_Temperature_Fahrenheit column as Average_Temperature from the Des_Moines_Weather table where the Year column is equal to 2022. The results are grouped by Month and ordered by Month.
75,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Which vehicles from the 'Fleet' table have traveled more than 100,000 kilometers?","CREATE TABLE Fleet (vehicle_id INT PRIMARY KEY, make VARCHAR(255), model VARCHAR(255), year INT, mileage INT);","SELECT vehicle_id, make, model, mileage FROM Fleet WHERE mileage > 100000","This query selects the vehicle_id, make, model, and mileage from the Fleet table where the mileage is greater than 100,000 kilometers."
76,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find all customers from the 'Customers' table who have placed orders in the last 30 days.,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), city VARCHAR(255), country VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE);","SELECT c.customer_id, c.name, c.email, c.city, c.country FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-30 days')","This query joins the Customers and Orders tables on the customer_id column. It then selects the customer_id, name, email, city, and country from the Customers table for all customers who have placed orders in the last 30 days."
77,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What is the average delivery time for orders shipped from the 'Los Angeles' warehouse in the 'Orders' table?,"CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, warehouse_id INT REFERENCES Warehouses(warehouse_id), delivery_date DATE);",SELECT AVG(delivery_date - order_date) AS average_delivery_time FROM Orders WHERE warehouse_id = (SELECT warehouse_id FROM Warehouses WHERE city = 'Los Angeles'),"This query first selects the warehouse_id for the 'Los Angeles' warehouse. Then, it calculates the average delivery time for orders shipped from that warehouse by subtracting the order_date from the delivery_date and averaging the results."
78,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,List the top 5 suppliers in the 'Suppliers' table based on the total amount spent on their products in the 'Purchases' table.,"CREATE TABLE Suppliers (supplier_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255));
CREATE TABLE Products (product_id INT PRIMARY KEY, supplier_id INT REFERENCES Suppliers(supplier_id), name VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE Purchases (purchase_id INT PRIMARY KEY, product_id INT REFERENCES Products(product_id), quantity INT, purchase_date DATE);","SELECT s.supplier_id, s.name, SUM(p.price * pu.quantity) AS total_spent FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id JOIN Purchases pu ON p.product_id = pu.product_id GROUP BY s.supplier_id, s.name ORDER BY total_spent DESC LIMIT 5","This query joins the Suppliers, Products, and Purchases tables. It then calculates the total amount spent on each supplier's products by multiplying the product price by the purchase quantity and summing the results. Finally, it groups the results by supplier_id and name, orders them by total_spent in descending order, and limits the output to the top 5 suppliers."
79,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Which routes in the 'Routes' table have the highest average fuel consumption?,"CREATE TABLE Routes (route_id INT PRIMARY KEY, origin_city VARCHAR(255), destination_city VARCHAR(255), distance INT, fuel_consumption DECIMAL(10,2));","SELECT route_id, origin_city, destination_city, AVG(fuel_consumption) AS average_fuel_consumption FROM Routes GROUP BY route_id, origin_city, destination_city ORDER BY average_fuel_consumption DESC","This query calculates the average fuel consumption for each route in the Routes table. It then groups the results by route_id, origin_city, and destination_city, and orders them by average_fuel_consumption in descending order."
80,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"How many properties are currently listed in the city of Los Angeles, priced between \$1 million and \$2 million?","CREATE TABLE LISTINGS (listing_id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, price INT, bedrooms INT, bathrooms INT, sqft INT, property_type VARCHAR(255), listing_date DATE);",SELECT COUNT(*) FROM LISTINGS WHERE city = 'Los Angeles' AND price BETWEEN 1000000 AND 2000000;,This query selects the count of listings from the LISTINGS table where the city is 'Los Angeles' and the price is between \$1 million and \$2 million.
81,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What is the average price of a 3-bedroom house in San Francisco?,"CREATE TABLE LISTINGS (listing_id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, price INT, bedrooms INT, bathrooms INT, sqft INT, property_type VARCHAR(255), listing_date DATE);",SELECT AVG(price) FROM LISTINGS WHERE city = 'San Francisco' AND bedrooms = 3 AND property_type = 'house';,"This query selects the average price of listings from the LISTINGS table where the city is 'San Francisco', the number of bedrooms is 3, and the property type is 'house'."
82,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What is the median price of a 2-bedroom apartment in New York City?,"CREATE TABLE LISTINGS (listing_id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, price INT, bedrooms INT, bathrooms INT, sqft INT, property_type VARCHAR(255), listing_date DATE);",SELECT MEDIAN(price) FROM LISTINGS WHERE city = 'New York City' AND bedrooms = 2 AND property_type = 'apartment';,"This query selects the median price of listings from the LISTINGS table where the city is 'New York City', the number of bedrooms is 2, and the property type is 'apartment'."
83,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What are the top 5 most expensive neighborhoods in Miami?,"CREATE TABLE LISTINGS (listing_id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, price INT, bedrooms INT, bathrooms INT, sqft INT, property_type VARCHAR(255), listing_date DATE);","SELECT neighborhood, AVG(price) FROM LISTINGS WHERE city = 'Miami' GROUP BY neighborhood ORDER BY AVG(price) DESC LIMIT 5;","This query selects the neighborhood and the average price of listings from the LISTINGS table where the city is 'Miami', groups the results by neighborhood, orders the results by average price in descending order, and limits the results to the top 5 rows."
84,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What is the percentage change in the average price of a 4-bedroom house in Seattle over the past year?,"CREATE TABLE LISTINGS (listing_id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, price INT, bedrooms INT, bathrooms INT, sqft INT, property_type VARCHAR(255), listing_date DATE);","WITH CurrentPrices AS (SELECT AVG(price) AS current_price FROM LISTINGS WHERE city = 'Seattle' AND bedrooms = 4 AND property_type = 'house' AND listing_date >= DATE('now', '-1 year')), PreviousPrices AS (SELECT AVG(price) AS previous_price FROM LISTINGS WHERE city = 'Seattle' AND bedrooms = 4 AND property_type = 'house' AND listing_date BETWEEN DATE('now', '-2 years') AND DATE('now', '-1 year')) SELECT (current_price - previous_price) / previous_price * 100 AS percentage_change FROM CurrentPrices, PreviousPrices;","This query calculates the percentage change in the average price of a 4-bedroom house in Seattle over the past year. It does this by first creating two common table expressions (CTEs): CurrentPrices and PreviousPrices. The CurrentPrices CTE calculates the average price of 4-bedroom houses in Seattle listed in the past year. The PreviousPrices CTE calculates the average price of 4-bedroom houses in Seattle listed between one and two years ago. The main query then calculates the percentage change by subtracting the previous price from the current price, dividing by the previous price, and multiplying by 100."
85,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Add a new real estate agent to the agent table with all required information.,"CREATE TABLE Agent (AgentID int PRIMARY KEY, AgentName varchar(50) NOT NULL, PhoneNumber varchar(20) UNIQUE, EmailAddress varchar(50) UNIQUE, AgentPhoto image, LicenseNumber varchar(20) UNIQUE, ExperienceYears int, AverageRating decimal(2,1), Active bit);","INSERT INTO Agent (AgentName, PhoneNumber, EmailAddress, AgentPhoto, LicenseNumber, ExperienceYears, AverageRating, Active) VALUES ('John Smith', '555-123-4567', 'john.smith@email.com', NULL, 'ABC123', 5, 4.5, 1);","This SQL statement inserts a new row into the Agent table. The statement specifies the values for all columns in the table, including the AgentName, PhoneNumber, EmailAddress, AgentPhoto, LicenseNumber, ExperienceYears, AverageRating, and Active columns. The values are provided as literals, except for the AgentPhoto column, which is set to NULL."
86,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the listing price of a property in the property table based on the property ID.,"CREATE TABLE Property (PropertyID int PRIMARY KEY, Address varchar(100) NOT NULL, City varchar(50) NOT NULL, State varchar(2) NOT NULL, ZipCode varchar(10) NOT NULL, PropertyType varchar(50) NOT NULL, Bedrooms int NOT NULL, Bathrooms decimal(4,2) NOT NULL, SquareFootage int NOT NULL, ListingPrice decimal(10,2), ListingDate date, SoldDate date, SoldPrice decimal(10,2));",UPDATE Property SET ListingPrice = 500000 WHERE PropertyID = 12345;,This SQL statement updates the ListingPrice column in the Property table for the row with the PropertyID of 12345. The new ListingPrice value is set to 500000.
87,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Delete a property listing from the property table based on the property ID.,"CREATE TABLE Property (PropertyID int PRIMARY KEY, Address varchar(100) NOT NULL, City varchar(50) NOT NULL, State varchar(2) NOT NULL, ZipCode varchar(10) NOT NULL, PropertyType varchar(50) NOT NULL, Bedrooms int NOT NULL, Bathrooms decimal(4,2) NOT NULL, SquareFootage int NOT NULL, ListingPrice decimal(10,2), ListingDate date, SoldDate date, SoldPrice decimal(10,2));",DELETE FROM Property WHERE PropertyID = 98765;,This SQL statement deletes the row from the Property table where the PropertyID is equal to 98765.
88,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Calculate the average listing price for properties sold in a specific city.,"CREATE TABLE Property (PropertyID int PRIMARY KEY, Address varchar(100) NOT NULL, City varchar(50) NOT NULL, State varchar(2) NOT NULL, ZipCode varchar(10) NOT NULL, PropertyType varchar(50) NOT NULL, Bedrooms int NOT NULL, Bathrooms decimal(4,2) NOT NULL, SquareFootage int NOT NULL, ListingPrice decimal(10,2), ListingDate date, SoldDate date, SoldPrice decimal(10,2));",SELECT AVG(ListingPrice) FROM Property WHERE SoldDate IS NOT NULL AND City = 'Los Angeles';,This SQL statement calculates the average ListingPrice for properties that have been sold (SoldDate is not NULL) in the city of Los Angeles.
89,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Identify all properties that have been listed for more than 30 days and have not yet been sold.,"CREATE TABLE Property (PropertyID int PRIMARY KEY, Address varchar(100) NOT NULL, City varchar(50) NOT NULL, State varchar(2) NOT NULL, ZipCode varchar(10) NOT NULL, PropertyType varchar(50) NOT NULL, Bedrooms int NOT NULL, Bathrooms decimal(4,2) NOT NULL, SquareFootage int NOT NULL, ListingPrice decimal(10,2), ListingDate date, SoldDate date, SoldPrice decimal(10,2));","SELECT * FROM Property WHERE SoldDate IS NULL AND ListingDate < DATEADD(day, -30, GETDATE());",This SQL statement selects all rows from the Property table where the SoldDate is NULL (property has not been sold) and the ListingDate is more than 30 days in the past (ListingDate is less than the current date minus 30 days).
90,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Create a report listing all completed production orders placed in the last three months, along with the total number of units produced for each order. Include information about the associated customer and the order's status.","CREATE TABLE ProductionOrders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE, Status VARCHAR(50), Quantity INT); 
CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(255), Country VARCHAR(50));
CREATE TABLE ProductionUnits (ProductionOrderID INT, UnitID INT, Quantity INT, PRIMARY KEY (ProductionOrderID, UnitID));
CREATE VIEW CompletedOrders AS SELECT * FROM ProductionOrders WHERE Status = 'Completed';
INSERT INTO ProductionOrders (OrderID, CustomerID, OrderDate, Status, Quantity) VALUES (1, 101, '2023-07-01', 'Completed', 1000), (2, 102, '2023-08-15', 'Completed', 500), (3, 103, '2023-09-20', 'In Progress', 2000), (4, 104, '2023-10-05', 'Open', 1500); 
INSERT INTO Customers (CustomerID, CustomerName, Country) VALUES (101, 'Acme Corp', 'USA'), (102, 'Sakura Ltd', 'Japan'), (103, 'Bright Ideas Ltd', 'UK'), (104, 'Tech Solutions Inc', 'Canada');
INSERT INTO ProductionUnits (ProductionOrderID, UnitID, Quantity) VALUES (1, 1, 1000), (2, 2, 500), (2, 3, 100), (3, 4, 500), (3, 5, 1500);","SELECT CompletedOrders.OrderID, CompletedOrders.CustomerName, CompletedOrders.OrderDate, CompletedOrders.Quantity AS TotalUnits 
FROM CompletedOrders 
INNER JOIN Customers ON CompletedOrders.CustomerID = Customers.CustomerID 
LEFT JOIN ProductionUnits ON CompletedOrders.OrderID = ProductionUnits.ProductionOrderID 
WHERE CompletedOrders.OrderDate BETWEEN DATE('now', '-3 months') AND DATE('now') 
GROUP BY CompletedOrders.OrderID, CompletedOrders.CustomerName, CompletedOrders.OrderDate 
ORDER BY CompletedOrders.OrderDate DESC;","The SQL query performs the following steps:

1. Selects data from the 'CompletedOrders' view and joins it with the 'Customers' table on the 'CustomerID' to retrieve customer information.
2. Optionally joins the 'ProductionUnits' table on the 'OrderID' to count the total units produced for each order.
3. Filters the results to include only orders placed within the last three months.
4. Groups the results by order ID, customer name, and order date.
5. Orders the results by order date in descending order.

The query returns a report with the requested information, including the order ID, customer name, order date, and total units produced for each completed order placed in the last three months."
91,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Identify all suppliers who have delivered raw materials late in the past six months, along with the number of late deliveries and the average delay in days.","CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255), Country VARCHAR(50));
CREATE TABLE PurchaseOrders (PurchaseOrderID INT PRIMARY KEY, SupplierID INT, OrderDate DATE, DeliveryDate DATE, Status VARCHAR(50));
CREATE TABLE RawMaterials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(255), UnitPrice DECIMAL(10,2));
CREATE TABLE PurchaseOrderDetails (PurchaseOrderID INT, MaterialID INT, Quantity INT, PRIMARY KEY (PurchaseOrderID, MaterialID));
INSERT INTO Suppliers (SupplierID, SupplierName, Country) VALUES (201, 'Global Supplies Inc', 'USA'), (202, 'Eastern Imports Ltd', 'China'), (203, 'Northern Resources Inc', 'Canada'), (204, 'Western Materials Ltd', 'Australia');
INSERT INTO PurchaseOrders (PurchaseOrderID, SupplierID, OrderDate, DeliveryDate, Status) VALUES (501, 201, '2023-07-10', '2023-07-15', 'Delivered'), (502, 202, '2023-08-01', '2023-08-10', 'Late'), (503, 203, '2023-09-15', '2023-09-22', 'On Time'), (504, 204, '2023-10-01', '2023-10-08', 'Late'), (505, 201, '2023-10-15', '2023-10-20', 'Delivered');
INSERT INTO RawMaterials (MaterialID, MaterialName, UnitPrice) VALUES (301, 'Steel', 100.00), (302, 'Aluminum', 75.00), (303, 'Copper', 150.00), (304, 'Plastic', 25.00);
INSERT INTO PurchaseOrderDetails (PurchaseOrderID, MaterialID, Quantity) VALUES (501, 301, 1000), (502, 302, 500), (503, 303, 200), (504, 304, 1000), (505, 301, 500);","SELECT Suppliers.SupplierName, COUNT(PurchaseOrders.PurchaseOrderID) AS NumberOfLateDeliveries, AVG(JULIANDAY(PurchaseOrders.DeliveryDate) - JULIANDAY(PurchaseOrders.OrderDate)) AS AverageDelayInDays 
FROM Suppliers 
INNER JOIN PurchaseOrders ON Suppliers.SupplierID = PurchaseOrders.SupplierID 
WHERE PurchaseOrders.Status = 'Late' AND PurchaseOrders.DeliveryDate > PurchaseOrders.OrderDate AND PurchaseOrders.DeliveryDate BETWEEN DATE('now', '-6 months') AND DATE('now') 
GROUP BY Suppliers.SupplierName 
ORDER BY NumberOfLateDeliveries DESC;","The SQL query performs the following steps:

1. Selects data from the 'Suppliers' and 'PurchaseOrders' tables, joining them on the 'SupplierID' to link supplier information to purchase orders.
2. Filters the results to include only late purchase orders with a delivery date exceeding the order date within the past six months.
3. Groups the results by supplier name.
4. Counts the number of late deliveries for each supplier using the COUNT() function.
5. Calculates the average delay in days for each supplier's late deliveries using the AVG() function and JULIANDAY() to convert dates to numeric values.
6. Orders the results in descending order of the number of late deliveries.

The query returns a report identifying suppliers with late deliveries in the past six months, along with the number of late deliveries and the average delay in days for each supplier."
92,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Retrieve all the production orders for a specific product along with the supplier information and the total quantity ordered for each supplier. Also, calculate the average quantity ordered for each supplier.","CREATE TABLE ProductionOrders (OrderID INT PRIMARY KEY, ProductID INT, SupplierID INT, Quantity INT, OrderDate DATE);

CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255));

CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255), Country VARCHAR(255));

INSERT INTO ProductionOrders (OrderID, ProductID, SupplierID, Quantity, OrderDate) VALUES
(1, 10, 5, 100, '2023-01-15'),
(2, 10, 7, 50, '2023-02-01'),
(3, 20, 5, 75, '2023-02-15'),
(4, 10, 9, 25, '2023-03-01'),
(5, 20, 7, 100, '2023-03-15'),
(6, 30, 5, 150, '2023-04-01');

INSERT INTO Products (ProductID, ProductName) VALUES
(10, 'Widget'),
(20, 'Gadget'),
(30, 'Gizmo');

INSERT INTO Suppliers (SupplierID, SupplierName, Country) VALUES
(5, 'Acme Corp', 'USA'),
(7, 'Global Supplies', 'Germany'),
(9, 'Pacific Imports', 'China');","SELECT po.OrderID, p.ProductName, s.SupplierName, s.Country, po.Quantity, SUM(po.Quantity) OVER (PARTITION BY s.SupplierID) AS TotalQuantityOrdered, AVG(po.Quantity) OVER (PARTITION BY s.SupplierID) AS AverageQuantityOrdered
FROM ProductionOrders po
INNER JOIN Products p ON po.ProductID = p.ProductID
INNER JOIN Suppliers s ON po.SupplierID = s.SupplierID
where p.ProductName = 'Widget';","This query retrieves all the production orders for the product 'Widget' along with the supplier information and the total quantity ordered for each supplier. It also calculates the average quantity ordered for each supplier.

The query uses three tables: ProductionOrders, Products, and Suppliers.

The query first joins the ProductionOrders table with the Products table on the ProductID column. This joins the production order data with the product names.

Then, the query joins the ProductionOrders table with the Suppliers table on the SupplierID column. This joins the production order data with the supplier information.

The query then uses a WHERE clause to filter the results to only include production orders for the product 'Widget'.

The query then uses the SUM() window function to calculate the total quantity ordered for each supplier. The OVER clause specifies that the sum should be calculated for each partition of the SupplierID column.

The query then uses the AVG() window function to calculate the average quantity ordered for each supplier. The OVER clause specifies that the average should be calculated for each partition of the SupplierID column.

Finally, the query selects the OrderID, ProductName, SupplierName, Country, Quantity, TotalQuantityOrdered, and AverageQuantityOrdered columns."
93,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Retrieve a list of all production batches that used raw material lot R001, along with the quantity used in each batch.","CREATE TABLE ProductionBatches (BatchID INT PRIMARY KEY, RawMaterialLotID VARCHAR(20), QuantityUsed DECIMAL(10,2));
CREATE TABLE RawMaterialLots (LotID VARCHAR(20) PRIMARY KEY, MaterialName VARCHAR(50), SupplierID INT);
CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(100), Country VARCHAR(50));","SELECT p.BatchID, p.RawMaterialLotID, p.QuantityUsed FROM ProductionBatches p INNER JOIN RawMaterialLots r ON p.RawMaterialLotID = r.LotID WHERE r.LotID = 'R001';","This query selects all records from the ProductionBatches table where the RawMaterialLotID matches 'R001'. It joins the ProductionBatches table with the RawMaterialLots table on the RawMaterialLotID field, and then filters the results to only include batches that used lot 'R001'."
94,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Find all suppliers who have supplied raw materials used in production batches that were completed in the month of January 2023.,"CREATE TABLE ProductionBatches (BatchID INT PRIMARY KEY, RawMaterialLotID VARCHAR(20), QuantityUsed DECIMAL(10,2), CompletionDate DATE);
CREATE TABLE RawMaterialLots (LotID VARCHAR(20) PRIMARY KEY, MaterialName VARCHAR(50), SupplierID INT);
CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(100), Country VARCHAR(50));",SELECT DISTINCT s.SupplierName FROM Suppliers s INNER JOIN RawMaterialLots r ON s.SupplierID = r.SupplierID INNER JOIN ProductionBatches p ON r.LotID = p.RawMaterialLotID WHERE p.CompletionDate >= '2023-01-01' AND p.CompletionDate < '2023-02-01';,"This query selects the distinct names of all suppliers who have supplied raw materials used in production batches that were completed in January 2023. It joins the Suppliers table with the RawMaterialLots table on the SupplierID field, and then joins the RawMaterialLots table with the ProductionBatches table on the LotID field. Finally, it filters the results to only include batches that were completed in January 2023."
95,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total amount of precipitation received by each crop type in a specific region for a given period?,"CREATE TABLE weather_data (region TEXT, crop_type TEXT, date DATE, precipitation_amount REAL);INSERT INTO weather_data VALUES ('North America', 'Wheat', '2023-01-01', 1.5), ('North America', 'Corn', '2023-01-01', 2.0), ('North America', 'Wheat', '2023-01-02', 2.0), ('North America', 'Corn', '2023-01-02', 1.8), ('North America', 'Wheat', '2023-01-03', 1.7), ('North America', 'Corn', '2023-01-03', 2.2), ('Europe', 'Wheat', '2023-01-01', 0.8), ('Europe', 'Barley', '2023-01-01', 1.1), ('Europe', 'Wheat', '2023-01-02', 1.0), ('Europe', 'Barley', '2023-01-02', 1.3), ('Europe', 'Wheat', '2023-01-03', 1.2), ('Europe', 'Barley', '2023-01-03', 1.5);CREATE TABLE crop_yields (region TEXT, crop_type TEXT, year INTEGER, yield_amount REAL);INSERT INTO crop_yields VALUES ('North America', 'Wheat', 2022, 50.0), ('North America', 'Corn', 2022, 75.0), ('Europe', 'Wheat', 2022, 45.0), ('Europe', 'Barley', 2022, 60.0);","SELECT w.region, w.crop_type, SUM(w.precipitation_amount) AS total_precipitation FROM weather_data w JOIN crop_yields c ON w.region = c.region AND w.crop_type = c.crop_type WHERE c.year = 2022 GROUP BY w.region, w.crop_type;","This query joins the 'weather_data' and 'crop_yields' tables on the 'region' and 'crop_type' columns, filters the results to the year 2022, groups the data by region and crop type, and calculates the sum of precipitation for each group."
96,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top five crops in terms of total yield for a specific region in a given year?,"CREATE TABLE crop_yields (region TEXT, crop_type TEXT, year INTEGER, yield_amount REAL);INSERT INTO crop_yields VALUES ('North America', 'Wheat', 2022, 50.0), ('North America', 'Corn', 2022, 75.0), ('North America', 'Soybean', 2022, 60.0), ('North America', 'Barley', 2022, 45.0), ('North America', 'Rice', 2022, 35.0), ('Europe', 'Wheat', 2022, 45.0), ('Europe', 'Barley', 2022, 60.0), ('Europe', 'Potato', 2022, 55.0), ('Europe', 'Sunflower', 2022, 40.0), ('Europe', 'Tomato', 2022, 30.0);CREATE TABLE regions (region_id INTEGER, region_name TEXT);INSERT INTO regions VALUES (1, 'North America'), (2, 'Europe');","SELECT cy.crop_type, SUM(cy.yield_amount) AS total_yield, r.region_name FROM crop_yields cy JOIN regions r ON cy.region = r.region_id WHERE cy.year = 2022 AND r.region_name = 'North America' GROUP BY cy.crop_type ORDER BY total_yield DESC LIMIT 5;","This query joins the 'crop_yields' and 'regions' tables on the 'region' column, filters the results to the year 2022 and the specified region, groups the data by crop type, calculates the sum of yield for each group, orders the results by total yield in descending order, and limits the output to the top five crops."
97,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Analyze the average price of apples in California in the last 3 months, factoring in the impact of weather and market demand.","CREATE TABLE Apples (apple_id INT PRIMARY KEY, variety VARCHAR(255), price DECIMAL(10,2), harvest_date DATE, region VARCHAR(255));
CREATE TABLE Weather (weather_id INT PRIMARY KEY, date DATE, temperature INT, rainfall INT, region VARCHAR(255));
CREATE TABLE Market_Demand (demand_id INT PRIMARY KEY, date DATE, product VARCHAR(255), demand_level INT, region VARCHAR(255));","SELECT AVG(a.price) AS average_price
FROM Apples a
INNER JOIN Weather w ON a.region = w.region AND a.harvest_date BETWEEN DATE('now', '-3 months') AND DATE('now')
INNER JOIN Market_Demand m ON a.region = m.region AND a.harvest_date = m.date
WHERE a.variety = 'apple' AND a.region = 'California' AND w.temperature > 70 AND m.demand_level > 5;","This query calculates the average price of apples in California over the past 3 months, taking into account the impact of weather and market demand. 

- It joins the 'Apples' table with the 'Weather' table on the 'region' and 'harvest_date' columns to filter for apples harvested in California in the last 3 months and where the temperature was above 70 degrees.
- It then joins the result with the 'Market_Demand' table on the 'region' and 'harvest_date' columns to filter for apples where the demand level was above 5.
- Finally, it calculates the average price of apples that meet all the specified criteria."
98,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the five highest-yielding crops in California, and what are their average yields?","CREATE TABLE `crop_yields` (`crop_name` VARCHAR(255) NOT NULL, `state` VARCHAR(255) NOT NULL, `year` INT NOT NULL, `yield` INT NOT NULL, PRIMARY KEY (`crop_name`, `state`, `year`));
CREATE TABLE `states` (`state_name` VARCHAR(255) NOT NULL, `region` VARCHAR(255) NOT NULL, PRIMARY KEY (`state_name`));
INSERT INTO `crop_yields` (`crop_name`, `state`, `year`, `yield`) VALUES
('Almonds', 'California', 2020, 2500),
('Grapes', 'California', 2020, 7500),
('Strawberries', 'California', 2020, 10000),
('Lettuce', 'California', 2020, 20000),
('Tomatoes', 'California', 2020, 30000),
('Oranges', 'California', 2020, 40000),
('Apples', 'California', 2020, 50000),
('Walnuts', 'California', 2020, 60000),
('Pistachios', 'California', 2020, 70000),
('Hay', 'California', 2020, 80000),
('Alfalfa', 'California', 2020, 90000),
('Cotton', 'California', 2020, 100000),
('Rice', 'California', 2020, 110000),
('Wheat', 'California', 2020, 120000),
('Barley', 'California', 2020, 130000),
('Corn', 'California', 2020, 140000),
('Oats', 'California', 2020, 150000),
('Sorghum', 'California', 2020, 160000),
('Dry Beans', 'California', 2020, 170000),
('Sugar Beets', 'California', 2020, 180000);
INSERT INTO `states` (`state_name`, `region`) VALUES
('California', 'West'),
('Arizona', 'West'),
('Nevada', 'West'),
('Oregon', 'West'),
('Washington', 'West');","SELECT `cy`.`crop_name`, AVG(`cy`.`yield`) AS `avg_yield`
FROM `crop_yields` AS `cy`
JOIN `states` AS `s` ON `cy`.`state` = `s`.`state_name`
WHERE `s`.`region` = 'West'
GROUP BY `cy`.`crop_name`
ORDER BY `avg_yield` DESC
LIMIT 5;","This SQL query selects the five highest-yielding crops in California and their average yields. It does this by:

1. Joining the `crop_yields` table to the `states` table on the `state` column.
2. Filtering the results to only include states in the 'West' region.
3. Grouping the results by crop name.
4. Calculating the average yield for each crop.
5. Ordering the results by average yield in descending order.
6. Limiting the results to the top 5 crops."
99,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the top five crops grown in California, based on total acreage?","CREATE TABLE `crop_acreage` (`crop_name` VARCHAR(255) NOT NULL, `state` VARCHAR(255) NOT NULL, `year` INT NOT NULL, `acreage` INT NOT NULL, PRIMARY KEY (`crop_name`, `state`, `year`));
CREATE TABLE `states` (`state_name` VARCHAR(255) NOT NULL, `region` VARCHAR(255) NOT NULL, PRIMARY KEY (`state_name`));
INSERT INTO `crop_acreage` (`crop_name`, `state`, `year`, `acreage`) VALUES
('Almonds', 'California', 2020, 1000000),
('Grapes', 'California', 2020, 750000),
('Strawberries', 'California', 2020, 500000),
('Lettuce', 'California', 2020, 250000),
('Tomatoes', 'California', 2020, 200000),
('Oranges', 'California', 2020, 150000),
('Apples', 'California', 2020, 100000),
('Walnuts', 'California', 2020, 75000),
('Pistachios', 'California', 2020, 50000),
('Hay', 'California', 2020, 40000),
('Alfalfa', 'California', 2020, 30000),
('Cotton', 'California', 2020, 20000),
('Rice', 'California', 2020, 10000),
('Wheat', 'California', 2020, 5000),
('Barley', 'California', 2020, 2500),
('Corn', 'California', 2020, 1000),
('Oats', 'California', 2020, 500),
('Sorghum', 'California', 2020, 250),
('Dry Beans', 'California', 2020, 100),
('Sugar Beets', 'California', 2020, 50);
INSERT INTO `states` (`state_name`, `region`) VALUES
('California', 'West'),
('Arizona', 'West'),
('Nevada', 'West'),
('Oregon', 'West'),
('Washington', 'West');","SELECT `ca`.`crop_name`, SUM(`ca`.`acreage`) AS `total_acreage`
FROM `crop_acreage` AS `ca`
JOIN `states` AS `s` ON `ca`.`state` = `s`.`state_name`
WHERE `s`.`region` = 'West'
GROUP BY `ca`.`crop_name`
ORDER BY `total_acreage` DESC
LIMIT 5;","This SQL query selects the top five crops grown in California, based on total acreage. It does this by:

1. Joining the `crop_acreage` table to the `states` table on the `state` column.
2. Filtering the results to only include states in the 'West' region.
3. Grouping the results by crop name.
4. Calculating the total acreage for each crop.
5. Ordering the results by total acreage in descending order.
6. Limiting the results to the top 5 crops."
100,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average yield of wheat in California for the past 5 years?,"CREATE TABLE WheatYields (    Year INT,    State VARCHAR(255),    Crop VARCHAR(255),    Yield INT);INSERT INTO WheatYields (Year, State, Crop, Yield) VALUES    (2018, 'California', 'Wheat', 65),    (2019, 'California', 'Wheat', 70),    (2020, 'California', 'Wheat', 75),    (2021, 'California', 'Wheat', 80),    (2022, 'California', 'Wheat', 85);","WITH CaliforniaWheatYields AS (    SELECT        Year,        Yield    FROM        WheatYields    WHERE        State = 'California'        AND Crop = 'Wheat'    )SELECT    AVG(Yield)    FROM    CaliforniaWheatYields;","1. Create a CTE called CaliforniaWheatYields that selects the Year and Yield columns from the WheatYields table where the State is 'California' and the Crop is 'Wheat'.
2. Select the average Yield from the CaliforniaWheatYields CTE."
101,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many different types of crops were grown in Kansas in 2021?,"CREATE TABLE Crops (    Year INT,    State VARCHAR(255),    Crop VARCHAR(255) );INSERT INTO Crops (Year, State, Crop) VALUES    (2021, 'Kansas', 'Wheat'),    (2021, 'Kansas', 'Corn'),    (2021, 'Kansas', 'Soybeans'),    (2021, 'Kansas', 'Sorghum'),    (2021, 'Kansas', 'Alfalfa');",SELECT COUNT(DISTINCT Crop) FROM Crops WHERE Year = 2021 AND State = 'Kansas';,This query selects the count of distinct crops grown in Kansas in 2021.
102,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What was the total rainfall in Iowa in the month of June 2022?,"CREATE TABLE WeatherData (    Year INT,    Month INT,    State VARCHAR(255),    Rainfall FLOAT);INSERT INTO WeatherData (Year, Month, State, Rainfall) VALUES    (2022, 6, 'Iowa', 4.5),    (2022, 6, 'Iowa', 3.2),    (2022, 6, 'Iowa', 2.8),    (2022, 6, 'Iowa', 5.1),    (2022, 6, 'Iowa', 1.9);",SELECT SUM(Rainfall) FROM WeatherData WHERE Year = 2022 AND Month = 6 AND State = 'Iowa';,This query sums up the rainfall for June 2022 in Iowa.
103,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of corn in Illinois for the months of July and August 2022?,"CREATE TABLE MarketPrices (    Year INT,    Month INT,    State VARCHAR(255),    Crop VARCHAR(255),    Price FLOAT);INSERT INTO MarketPrices (Year, Month, State, Crop, Price) VALUES    (2022, 7, 'Illinois', 'Corn', 5.25),    (2022, 7, 'Illinois', 'Corn', 5.30),    (2022, 7, 'Illinois', 'Corn', 5.40),    (2022, 8, 'Illinois', 'Corn', 5.50),    (2022, 8, 'Illinois', 'Corn', 5.60),    (2022, 8, 'Illinois', 'Corn', 5.70);","WITH IllinoisCornPrices AS (    SELECT        Year,        Month,        Price    FROM        MarketPrices    WHERE        State = 'Illinois'        AND Crop = 'Corn'        AND (Month = 7 OR Month = 8)    )SELECT    AVG(Price)    FROM    IllinoisCornPrices;","1. Create a CTE called IllinoisCornPrices that selects the Year, Month, and Price columns from the MarketPrices table where the State is 'Illinois', the Crop is 'Corn', and the Month is either 7 or 8.
2. Select the average Price from the IllinoisCornPrices CTE."
104,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which counties in Texas had the highest average corn yield in 2022?,"CREATE TABLE CountyYields (    Year INT,    State VARCHAR(255),    County VARCHAR(255),    Crop VARCHAR(255),    Yield INT);INSERT INTO CountyYields (Year, State, County, Crop, Yield) VALUES    (2022, 'Texas', 'Collin', 'Corn', 180),    (2022, 'Texas', 'Denton', 'Corn', 175),    (2022, 'Texas', 'Ellis', 'Corn', 190),    (2022, 'Texas', 'Rockwall', 'Corn', 185);",SELECT County FROM CountyYields WHERE Year = 2022 AND State = 'Texas' AND Crop = 'Corn' GROUP BY County ORDER BY AVG(Yield) DESC LIMIT 1;,"This query selects the County from the CountyYields table where the Year is 2022, the State is 'Texas', and the Crop is 'Corn', groups the data by County, orders the results by the average Yield in descending order, and limits the output to the top 1 row (the county with the highest average yield)."
105,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Which patients have a diagnosis of diabetes and have been prescribed metformin?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), phone_number VARCHAR(255));
CREATE TABLE diagnoses (patient_id INT, diagnosis VARCHAR(255), date_of_diagnosis DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), dosage VARCHAR(255));
CREATE TABLE prescriptions (patient_id INT, medication_id INT, date_prescribed DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));
INSERT INTO patients (patient_id, name, date_of_birth, address, phone_number) VALUES
(1, 'John Smith', '1980-01-01', '123 Main St, Anytown, CA 91234', '555-123-4567'),
(2, 'Jane Doe', '1975-02-15', '456 Elm St, Anytown, CA 91234', '555-234-5678'),
(3, 'Bob Johnson', '1990-03-20', '789 Oak St, Anytown, CA 91234', '555-345-6789');
INSERT INTO diagnoses (patient_id, diagnosis, date_of_diagnosis) VALUES
(1, 'Diabetes', '2022-04-01'),
(2, 'Asthma', '2022-05-05'),
(3, 'Hypertension', '2022-06-10');
INSERT INTO medications (medication_id, name, dosage) VALUES
(1, 'Metformin', '500mg'),
(2, 'Albuterol', '200mcg'),
(3, 'Lisinopril', '20mg');
INSERT INTO prescriptions (patient_id, medication_id, date_prescribed) VALUES
(1, 1, '2022-04-15'),
(2, 2, '2022-05-10'),
(3, 3, '2022-06-15');","SELECT p.name
FROM patients p
JOIN diagnoses d ON p.patient_id = d.patient_id
JOIN prescriptions pr ON p.patient_id = pr.patient_id
JOIN medications m ON pr.medication_id = m.medication_id
WHERE d.diagnosis = 'Diabetes' AND m.name = 'Metformin';","This query joins four tables: patients, diagnoses, prescriptions, and medications. It selects the names of patients who have a diagnosis of diabetes and have been prescribed metformin. The query first joins the patients table to the diagnoses table on the patient_id column. This gives us all the patients and their diagnoses. Then, the query joins the patients table to the prescriptions table on the patient_id column. This gives us all the patients and their prescriptions. Finally, the query joins the prescriptions table to the medications table on the medication_id column. This gives us all the prescriptions and the names of the medications. The query then filters the results to only include patients who have a diagnosis of diabetes and have been prescribed metformin."
106,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What are the names of the patients who have been prescribed both metformin and lisinopril?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), phone_number VARCHAR(255));
CREATE TABLE diagnoses (patient_id INT, diagnosis VARCHAR(255), date_of_diagnosis DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), dosage VARCHAR(255));
CREATE TABLE prescriptions (patient_id INT, medication_id INT, date_prescribed DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));
INSERT INTO patients (patient_id, name, date_of_birth, address, phone_number) VALUES
(1, 'John Smith', '1980-01-01', '123 Main St, Anytown, CA 91234', '555-123-4567'),
(2, 'Jane Doe', '1975-02-15', '456 Elm St, Anytown, CA 91234', '555-234-5678'),
(3, 'Bob Johnson', '1990-03-20', '789 Oak St, Anytown, CA 91234', '555-345-6789');
INSERT INTO diagnoses (patient_id, diagnosis, date_of_diagnosis) VALUES
(1, 'Diabetes', '2022-04-01'),
(2, 'Asthma', '2022-05-05'),
(3, 'Hypertension', '2022-06-10');
INSERT INTO medications (medication_id, name, dosage) VALUES
(1, 'Metformin', '500mg'),
(2, 'Albuterol', '200mcg'),
(3, 'Lisinopril', '20mg');
INSERT INTO prescriptions (patient_id, medication_id, date_prescribed) VALUES
(1, 1, '2022-04-15'),
(2, 2, '2022-05-10'),
(3, 3, '2022-06-15'),
(1, 3, '2022-07-01');","SELECT p.name
FROM patients p
JOIN prescriptions pr1 ON p.patient_id = pr1.patient_id
JOIN medications m1 ON pr1.medication_id = m1.medication_id
JOIN prescriptions pr2 ON p.patient_id = pr2.patient_id
JOIN medications m2 ON pr2.medication_id = m2.medication_id
WHERE m1.name = 'Metformin' AND m2.name = 'Lisinopril';","This query joins the patients table to the prescriptions table twice, once for each medication. It then filters the results to only include patients who have been prescribed both metformin and lisinopril. The query first joins the patients table to the prescriptions table on the patient_id column. This gives us all the patients and their prescriptions. Then, the query joins the patients table to the prescriptions table again on the patient_id column. This gives us all the patients and their prescriptions again. The query then joins the first prescriptions table to the medications table on the medication_id column. This gives us all the prescriptions and the names of the medications. The query then joins the second prescriptions table to the medications table on the medication_id column. This gives us all the prescriptions and the names of the medications again. The query then filters the results to only include patients who have been prescribed both metformin and lisinopril."
107,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Find me all patients who have been diagnosed with diabetes, but have not yet been prescribed metformin.","CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), diagnosis VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT, medication VARCHAR(255), date_prescribed DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, name, date_of_birth, address, diagnosis) VALUES
(1, 'John Doe', '1980-01-01', '123 Main St', 'Diabetes'),
(2, 'Jane Smith', '1985-02-02', '456 Elm St', 'Asthma'),
(3, 'Robert Jones', '1990-03-03', '789 Oak St', 'Diabetes');
INSERT INTO prescriptions (prescription_id, patient_id, medication, date_prescribed) VALUES
(1, 1, 'Insulin', '2023-04-04'),
(2, 2, 'Albuterol', '2023-05-05'),
(3, 3, 'Metformin', '2023-06-06');","SELECT p.name
FROM patients p
LEFT JOIN prescriptions pr ON p.patient_id = pr.patient_id
WHERE p.diagnosis = 'Diabetes' AND pr.medication != 'Metformin';","This query first joins the `patients` and `prescriptions` tables on the `patient_id` column. Then, it filters the results to include only patients who have a diagnosis of 'Diabetes' and who have not been prescribed 'Metformin'. Finally, it selects the `name` column from the `patients` table for the resulting patients."
108,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 most prescribed medications for patients with asthma?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), diagnosis VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT, medication VARCHAR(255), date_prescribed DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, name, date_of_birth, address, diagnosis) VALUES
(1, 'John Doe', '1980-01-01', '123 Main St', 'Diabetes'),
(2, 'Jane Smith', '1985-02-02', '456 Elm St', 'Asthma'),
(3, 'Robert Jones', '1990-03-03', '789 Oak St', 'Diabetes');
INSERT INTO prescriptions (prescription_id, patient_id, medication, date_prescribed) VALUES
(1, 1, 'Insulin', '2023-04-04'),
(2, 2, 'Albuterol', '2023-05-05'),
(3, 3, 'Metformin', '2023-06-06'),
(4, 2, 'Prednisone', '2023-07-07'),
(5, 2, 'Montelukast', '2023-08-08');","SELECT medication, COUNT(*) AS num_prescriptions
FROM prescriptions
WHERE patient_id IN (SELECT patient_id FROM patients WHERE diagnosis = 'Asthma')
GROUP BY medication
ORDER BY num_prescriptions DESC
LIMIT 5;","This query first uses a subquery to select the `patient_id`s of all patients with a diagnosis of 'Asthma'. Then, it joins this subquery with the `prescriptions` table on the `patient_id` column. It then groups the results by `medication` and counts the number of prescriptions for each medication. Finally, it orders the results by the number of prescriptions in descending order and limits the results to the top 5 medications."
109,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Find all patients who have been diagnosed with both diabetes and hypertension.,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), diagnosis VARCHAR(255));
CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT, diagnosis VARCHAR(255), date_diagnosed DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, name, date_of_birth, address) VALUES
(1, 'John Doe', '1980-01-01', '123 Main St'),
(2, 'Jane Smith', '1985-02-02', '456 Elm St'),
(3, 'Robert Jones', '1990-03-03', '789 Oak St');
INSERT INTO diagnoses (diagnosis_id, patient_id, diagnosis, date_diagnosed) VALUES
(1, 1, 'Diabetes', '2023-04-04'),
(2, 2, 'Asthma', '2023-05-05'),
(3, 3, 'Hypertension', '2023-06-06'),
(4, 1, 'Hypertension', '2023-07-07');","SELECT p.name
FROM patients p
JOIN diagnoses d ON p.patient_id = d.patient_id
WHERE d.diagnosis IN ('Diabetes', 'Hypertension')
GROUP BY p.patient_id
HAVING COUNT(DISTINCT d.diagnosis) = 2;","This query first joins the `patients` and `diagnoses` tables on the `patient_id` column. Then, it filters the results to include only patients who have been diagnosed with either 'Diabetes' or 'Hypertension'. It then groups the results by `patient_id` and counts the number of distinct diagnoses for each patient. Finally, it filters the results to include only patients who have been diagnosed with both 'Diabetes' and 'Hypertension'."
110,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights","List all transactions for customer 12345 in the month of January 2023, including the transaction date, amount, and type.","CREATE TABLE Transactions (transaction_id INT PRIMARY KEY, customer_id INT, transaction_date DATE, amount DECIMAL, transaction_type VARCHAR(255));
INSERT INTO Transactions VALUES (1, 12345, '2023-01-05', 100.00, 'Deposit'), (2, 12345, '2023-01-10', 50.00, 'Withdrawal'), (3, 12345, '2023-01-15', 25.00, 'Payment'), (4, 12345, '2023-01-20', 75.00, 'Transfer'), (5, 12345, '2023-01-25', 150.00, 'Deposit');","SELECT transaction_date, amount, transaction_type FROM Transactions WHERE customer_id = 12345 AND transaction_date BETWEEN '2023-01-01' AND '2023-01-31';","This query selects all transactions for customer 12345 in the month of January 2023. It filters the Transactions table based on the customer_id and transaction_date columns, and then returns the transaction_date, amount, and transaction_type columns."
111,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights",How can I create a view that shows the top 10 customers with the highest monthly average balance in their checking accounts for the past three months?,"CREATE TABLE Customers (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  checking_account_id INT,
  savings_account_id INT,
  address VARCHAR(255),
  phone_number VARCHAR(255),
  email VARCHAR(255)
);

CREATE TABLE CheckingAccounts (
  checking_account_id INT PRIMARY KEY,
  customer_id INT,
  balance DECIMAL(10,2),
  date DATE
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  checking_account_id INT,
  amount DECIMAL(10,2),
  transaction_type VARCHAR(255),
  date DATE
);

INSERT INTO Customers (customer_id, customer_name, checking_account_id, savings_account_id, address, phone_number, email) VALUES
(1, 'John Doe', 101, 201, '123 Main St, Anytown, CA 91234', '555-123-4567', 'john.doe@example.com'),
(2, 'Jane Smith', 102, 202, '456 Oak Ave, Anytown, CA 91234', '555-234-5678', 'jane.smith@example.com'),
(3, 'Robert Jones', 103, 203, '789 Elm St, Anytown, CA 91234', '555-345-6789', 'robert.jones@example.com');

INSERT INTO CheckingAccounts (checking_account_id, customer_id, balance, date) VALUES
(101, 1, 1000.00, '2023-01-01'),
(102, 2, 500.00, '2023-01-01'),
(103, 3, 250.00, '2023-01-01'),
(101, 1, 1200.00, '2023-02-01'),
(102, 2, 600.00, '2023-02-01'),
(103, 3, 300.00, '2023-02-01'),
(101, 1, 1500.00, '2023-03-01'),
(102, 2, 700.00, '2023-03-01'),
(103, 3, 350.00, '2023-03-01');

INSERT INTO Transactions (transaction_id, checking_account_id, amount, transaction_type, date) VALUES
(1, 101, 100.00, 'Deposit', '2023-01-05'),
(2, 102, 50.00, 'Deposit', '2023-01-10'),
(3, 103, 25.00, 'Deposit', '2023-01-15'),
(4, 101, 200.00, 'Withdrawal', '2023-01-20'),
(5, 102, 100.00, 'Withdrawal', '2023-01-25'),
(6, 103, 50.00, 'Withdrawal', '2023-01-30'),
(7, 101, 300.00, 'Deposit', '2023-02-05'),
(8, 102, 150.00, 'Deposit', '2023-02-10'),
(9, 103, 75.00, 'Deposit', '2023-02-15'),
(10, 101, 400.00, 'Withdrawal', '2023-02-20'),
(11, 102, 200.00, 'Withdrawal', '2023-02-25'),
(12, 103, 100.00, 'Withdrawal', '2023-02-30'),
(13, 101, 500.00, 'Deposit', '2023-03-05'),
(14, 102, 250.00, 'Deposit', '2023-03-10'),
(15, 103, 125.00, 'Deposit', '2023-03-15'),
(16, 101, 600.00, 'Withdrawal', '2023-03-20'),
(17, 102, 300.00, 'Withdrawal', '2023-03-25'),
(18, 103, 150.00, 'Withdrawal', '2023-03-30');","CREATE VIEW Top10Customers AS
SELECT c.customer_name, AVG(ca.balance) AS average_balance
FROM Customers c
JOIN CheckingAccounts ca ON c.checking_account_id = ca.checking_account_id
WHERE ca.date >= DATE('now', '-3 months')
GROUP BY c.customer_id
ORDER BY average_balance DESC
LIMIT 10;","1. Create a view named Top10Customers.
2. Join the Customers and CheckingAccounts tables on the checking_account_id.
3. Filter the CheckingAccounts table to only include records from the past three months.
4. Calculate the average balance for each customer.
5. Group the results by customer_id.
6. Order the results by average_balance in descending order.
7. Limit the results to the top 10 customers."
112,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights","Find all transactions with an amount greater than 10,000, excluding transactions from the 'High Risk' category, and then identify the top 3 customers by transaction count in this filtered set.","CREATE TABLE transactions (
    transaction_id INT PRIMARY KEY,
    customer_id INT,
    amount DECIMAL(10,2),
    category VARCHAR(255),
    transaction_date DATE
);

INSERT INTO transactions (transaction_id, customer_id, amount, category, transaction_date) VALUES
(1, 101, 12000.00, 'Normal', '2023-01-01'),
(2, 102, 5000.00, 'High Risk', '2023-01-05'),
(3, 103, 8000.00, 'Normal', '2023-01-10'),
(4, 101, 25000.00, 'Normal', '2023-01-15'),
(5, 104, 15000.00, 'High Risk', '2023-01-20'),
(6, 102, 7500.00, 'Normal', '2023-01-25'),
(7, 103, 10000.00, 'High Risk', '2023-01-30');

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    country VARCHAR(255)
);

INSERT INTO customers (customer_id, customer_name, country) VALUES
(101, 'John Smith', 'USA'),
(102, 'Alice Johnson', 'Canada'),
(103, 'Bob Williams', 'UK'),
(104, 'Emily Brown', 'Australia');","SELECT c.customer_name, COUNT(*) AS transaction_count
FROM transactions t
JOIN customers c ON t.customer_id = c.customer_id
WHERE t.amount > 10000 AND t.category <> 'High Risk'
GROUP BY c.customer_name
ORDER BY transaction_count DESC
LIMIT 3;","1. Filter transactions: Select transactions with amount greater than 10,000 and exclude 'High Risk' categories.

2. Join tables: Join the filtered transactions table with the customers table to get customer names.

3. Group and count: Group transactions by customer name and count the number of transactions for each customer.

4. Order and limit: Order the results by transaction count in descending order and limit to the top 3 customers."
113,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights",Find all customers who have purchased more than 1000 items in the last 6 months,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, item_count INT);
INSERT INTO customers (customer_id, customer_name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Mike Jones');
INSERT INTO orders (order_id, customer_id, order_date, item_count) VALUES (1, 1, '2023-01-01', 100), (2, 2, '2023-01-05', 250), (3, 1, '2023-02-10', 500), (4, 3, '2023-03-15', 750), (5, 2, '2023-04-20', 1250), (6, 1, '2023-05-25', 1500);
","SELECT c.customer_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-6 months')
GROUP BY c.customer_id
HAVING SUM(o.item_count) > 1000","This query first joins the `customers` and `orders` tables on the `customer_id` column. Then, it filters the results to only include orders placed in the last 6 months. It then groups the results by customer and calculates the sum of the `item_count` for each customer. Finally, it filters the results to only include customers who have purchased more than 1000 items in the last 6 months."
114,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights",Find all customers who have made at least one purchase in each of the last 3 months,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE);
INSERT INTO customers (customer_id, customer_name) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Mike Jones');
INSERT INTO orders (order_id, customer_id, order_date) VALUES (1, 1, '2023-01-01'), (2, 2, '2023-01-05'), (3, 1, '2023-02-10'), (4, 3, '2023-03-15'), (5, 2, '2023-04-20'), (6, 1, '2023-05-25');
","SELECT c.customer_name
FROM customers c
LEFT JOIN (
    SELECT DISTINCT customer_id, DATE(order_date) AS order_date
    FROM orders
    WHERE order_date >= DATE('now', '-3 months')
) AS monthly_orders ON c.customer_id = monthly_orders.customer_id
GROUP BY c.customer_id
HAVING COUNT(DISTINCT monthly_orders.order_date) = 3","This query first creates a temporary table called `monthly_orders` that contains the distinct customer IDs and order dates for all orders placed in the last 3 months. Then, it left joins the `customers` table to the `monthly_orders` table on the `customer_id` column. This will include all customers, even those who have not made any purchases in the last 3 months. It then groups the results by customer and counts the number of distinct order dates for each customer. Finally, it filters the results to only include customers who have made at least one purchase in each of the last 3 months."
115,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"What was the average yield for each crop by region in 2023, and how does this compare to the previous year?","CREATE TABLE CropYields (  crop_id INT PRIMARY KEY,  crop_name VARCHAR(255) NOT NULL,  region VARCHAR(255) NOT NULL,  year INT NOT NULL,  yield DECIMAL(10,2) NOT NULL);  INSERT INTO CropYields (crop_id, crop_name, region, year, yield) VALUES  (1, 'Wheat', 'North America', 2022, 75.5),  (2, 'Corn', 'South America', 2022, 82.1),  (3, 'Rice', 'Asia', 2022, 68.9),  (4, 'Wheat', 'North America', 2023, 78.3),  (5, 'Corn', 'South America', 2023, 85.2),  (6, 'Rice', 'Asia', 2023, 71.4);  CREATE TABLE Regions (  region_id INT PRIMARY KEY,  region_name VARCHAR(255) NOT NULL);  INSERT INTO Regions (region_id, region_name) VALUES  (1, 'North America'),  (2, 'South America'),  (3, 'Asia');","WITH RankedYields AS (  SELECT    cy.crop_name,    cy.region,    cy.year,    cy.yield,    AVG(cy.yield) OVER (PARTITION BY cy.region, cy.crop_name) AS avg_yield,    ROW_NUMBER() OVER (PARTITION BY cy.region, cy.crop_name ORDER BY cy.year) AS row_num  FROM    CropYields cy  WHERE    cy.year IN (2022, 2023))  SELECT    ry.crop_name,    ry.region,    ry.year,    ry.yield,    ry.avg_yield,    CASE WHEN ry.row_num = 1 THEN NULL ELSE ry.yield - LAG(ry.yield, 1, 0) OVER (PARTITION BY ry.region, ry.crop_name ORDER BY ry.year) END AS yield_change  FROM    RankedYields ry  ORDER BY    ry.region, ry.crop_name, ry.year;","This SQL query calculates the average yield for each crop by region in 2023, compares it to the previous year's yield, and displays the results in a table.  **Step 1: Create a CTE (Common Table Expression) called RankedYields**  * This CTE selects data from the CropYields table for the years 2022 and 2023.  * It calculates the average yield for each crop and region using the `AVG()` function with a `PARTITION BY` clause.  * It assigns a row number for each record within each crop and region group using the `ROW_NUMBER()` function with a `PARTITION BY` and `ORDER BY` clause.  **Step 2: Select and Calculate Yield Change**  * This query selects the crop name, region, year, yield, average yield, and yield change from the RankedYields CTE.  * The yield change is calculated using the `LAG()` function, which gets the previous year's yield for each crop and region.  * If it's the first year for the crop and region, the yield change is set to NULL.  **Step 3: Order the Results**  * The final results are ordered by region, crop name, and year."
116,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"Calculate the average yield of corn across all farms in the United States for the year 2023, and then rank the farms by their yield from highest to lowest.","CREATE TABLE farms (farm_id INT PRIMARY KEY, farm_name VARCHAR(255), state VARCHAR(255), county VARCHAR(255));
CREATE TABLE crops (crop_id INT PRIMARY KEY, crop_name VARCHAR(255), farm_id INT REFERENCES farms(farm_id), year INT, yield DECIMAL(10,2));
INSERT INTO farms (farm_id, farm_name, state, county) VALUES (1, 'Smith Family Farm', 'Iowa', 'Johnson'), (2, 'Brown Farms', 'Illinois', 'Champaign'), (3, 'Green Valley Farms', 'California', 'Fresno'), (4, 'Anderson Farms', 'Nebraska', 'Lancaster'), (5, 'Johnson Farms', 'Minnesota', 'Olmsted');
INSERT INTO crops (crop_id, crop_name, farm_id, year, yield) VALUES (1, 'Corn', 1, 2023, 185.5), (2, 'Soybeans', 1, 2023, 55.2), (3, 'Corn', 2, 2023, 178.9), (4, 'Wheat', 2, 2023, 82.1), (5, 'Corn', 3, 2023, 212.3), (6, 'Alfalfa', 3, 2023, 145.7), (7, 'Corn', 4, 2023, 195.1), (8, 'Sorghum', 4, 2023, 118.8), (9, 'Corn', 5, 2023, 167.4), (10, 'Oats', 5, 2023, 77.5);","WITH RankedFarms AS (
    SELECT
        farm_id,
        farm_name,
        state,
        county,
        AVG(yield) AS average_yield,
        ROW_NUMBER() OVER (PARTITION BY state ORDER BY average_yield DESC) AS rank_within_state
    FROM
        farms f
    JOIN
        crops c ON f.farm_id = c.farm_id
    WHERE
        c.crop_name = 'Corn' AND c.year = 2023
    GROUP BY
        farm_id,
        farm_name,
        state,
        county
)
SELECT
    farm_id,
    farm_name,
    state,
    county,
    average_yield,
    rank_within_state
FROM
    RankedFarms
ORDER BY
    state,
    rank_within_state;","1. The query starts by creating a common table expression (CTE) called `RankedFarms`. 
2. In the CTE, it joins the `farms` and `crops` tables on the `farm_id` to access farm information and crop yields. 
3. It filters the data to include only corn yields for the year 2023. 
4. It then groups the data by farm ID, farm name, state, and county, and calculates the average yield for each farm. 
5. It uses the `ROW_NUMBER()` window function to assign a rank to each farm within its state based on the average yield in descending order. 
6. The main query then selects the farm ID, name, state, county, average yield, and rank for each farm from the `RankedFarms` CTE. 
7. Finally, it orders the results by state and then by rank within each state, providing the desired output of ranked farms by average corn yield within each state."
117,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Which crops generated the most revenue in a specific state in the last year?,"CREATE TABLE crops (id INT PRIMARY KEY, name VARCHAR(255), state VARCHAR(255), yield INT, revenue DECIMAL(10,2));
INSERT INTO crops (id, name, state, yield, revenue) VALUES (1, 'Wheat', 'California', 100, 50000),
(2, 'Corn', 'Iowa', 200, 100000),
(3, 'Soybeans', 'Illinois', 300, 150000),
(4, 'Wheat', 'Texas', 50, 25000),
(5, 'Corn', 'Nebraska', 150, 75000),
(6, 'Soybeans', 'Minnesota', 250, 125000),
(7, 'Wheat', 'Kansas', 75, 37500),
(8, 'Corn', 'South Dakota', 100, 50000),
(9, 'Soybeans', 'Indiana', 200, 100000),
(10, 'Wheat', 'Montana', 50, 25000),
(11, 'Corn', 'North Dakota', 150, 75000),
(12, 'Soybeans', 'Missouri', 250, 125000);

CREATE TABLE weather (id INT PRIMARY KEY, date DATE, state VARCHAR(255), temperature INT, rainfall INT);","SELECT c.name, SUM(c.revenue) AS total_revenue FROM crops c JOIN weather w ON c.state = w.state WHERE w.date BETWEEN DATE('2022-01-01') AND DATE('2022-12-31') GROUP BY c.name ORDER BY total_revenue DESC LIMIT 1;","This query selects the name of the crop and the sum of its revenue, grouped by crop name. It then filters the weather data to only include records from the last year. Finally, it orders the results by total revenue in descending order and limits the output to the top 1 row."
118,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What was the average yield of corn in the Midwest region last year?,"CREATE TABLE crops (id INT PRIMARY KEY, name VARCHAR(255), state VARCHAR(255), yield INT, revenue DECIMAL(10,2));
INSERT INTO crops (id, name, state, yield, revenue) VALUES (1, 'Wheat', 'California', 100, 50000),
(2, 'Corn', 'Iowa', 200, 100000),
(3, 'Soybeans', 'Illinois', 300, 150000),
(4, 'Wheat', 'Texas', 50, 25000),
(5, 'Corn', 'Nebraska', 150, 75000),
(6, 'Soybeans', 'Minnesota', 250, 125000),
(7, 'Wheat', 'Kansas', 75, 37500),
(8, 'Corn', 'South Dakota', 100, 50000),
(9, 'Soybeans', 'Indiana', 200, 100000),
(10, 'Wheat', 'Montana', 50, 25000),
(11, 'Corn', 'North Dakota', 150, 75000),
(12, 'Soybeans', 'Missouri', 250, 125000);

CREATE TABLE weather (id INT PRIMARY KEY, date DATE, state VARCHAR(255), temperature INT, rainfall INT);","SELECT AVG(c.yield) AS average_yield FROM crops c JOIN weather w ON c.state = w.state WHERE w.date BETWEEN DATE('2022-01-01') AND DATE('2022-12-31') AND c.name = 'Corn' AND w.state IN ('Iowa', 'Illinois', 'Nebraska', 'South Dakota', 'North Dakota', 'Minnesota', 'Missouri');","This query selects the average yield of corn in the Midwest region last year. It first joins the crops and weather tables on the state column. Then, it filters the weather data to only include records from the last year. Finally, it filters the results to only include corn crops in the Midwest states and calculates the average yield."
119,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What was the percentage change in soybean yield from the previous year in each state?,"CREATE TABLE crops (id INT PRIMARY KEY, name VARCHAR(255), state VARCHAR(255), yield INT, revenue DECIMAL(10,2));
INSERT INTO crops (id, name, state, yield, revenue) VALUES (1, 'Wheat', 'California', 100, 50000),
(2, 'Corn', 'Iowa', 200, 100000),
(3, 'Soybeans', 'Illinois', 300, 150000),
(4, 'Wheat', 'Texas', 50, 25000),
(5, 'Corn', 'Nebraska', 150, 75000),
(6, 'Soybeans', 'Minnesota', 250, 125000),
(7, 'Wheat', 'Kansas', 75, 37500),
(8, 'Corn', 'South Dakota', 100, 50000),
(9, 'Soybeans', 'Indiana', 200, 100000),
(10, 'Wheat', 'Montana', 50, 25000),
(11, 'Corn', 'North Dakota', 150, 75000),
(12, 'Soybeans', 'Missouri', 250, 125000);

CREATE TABLE weather (id INT PRIMARY KEY, date DATE, state VARCHAR(255), temperature INT, rainfall INT);","SELECT c.state, ((c.yield - LAG(c.yield, 1, 0) OVER (PARTITION BY c.state ORDER BY c.date)) * 100.0) / LAG(c.yield, 1, 0) OVER (PARTITION BY c.state ORDER BY c.date) AS percentage_change FROM crops c JOIN weather w ON c.state = w.state WHERE c.name = 'Soybeans' AND w.date BETWEEN DATE('2022-01-01') AND DATE('2022-12-31');","This query calculates the percentage change in soybean yield from the previous year in each state. It first joins the crops and weather tables on the state column. Then, it filters the weather data to only include records from the last year and filters the crops data to only include soybeans. It then uses the LAG window function to get the yield from the previous year for each state. Finally, it calculates the percentage change and returns the state and percentage change for each state."
120,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Please provide the total number of art galleries by state in the US, including the District of Columbia, along with the average number of artists represented per gallery.","CREATE TABLE art_galleries ( 
  gallery_id INT PRIMARY KEY, 
  name VARCHAR(255) NOT NULL, 
  address VARCHAR(255) NOT NULL, 
  city VARCHAR(255) NOT NULL, 
  state VARCHAR(255) NOT NULL, 
  zip_code VARCHAR(10) NOT NULL, 
  website_url VARCHAR(255) 
); 

INSERT INTO art_galleries (gallery_id, name, address, city, state, zip_code, website_url) VALUES 
  (1, 'Gallery A', '123 Main St', 'New York', 'NY', '10001', 'www.gallerya.com'), 
  (2, 'Gallery B', '456 Elm St', 'Los Angeles', 'CA', '90001', 'www.galleryb.com'), 
  (3, 'Gallery C', '789 Oak St', 'Chicago', 'IL', '60601', 'www.galleryc.com'), 
  (4, 'Gallery D', '1011 Pine St', 'Miami', 'FL', '33133', 'www.galleryd.com'), 
  (5, 'Gallery E', '1213 Willow St', 'San Francisco', 'CA', '94102', 'www.gallerye.com'), 
  (6, 'Gallery F', '1415 Maple St', 'Dallas', 'TX', '75201', 'www.galleryf.com'), 
  (7, 'Gallery G', '1617 Cedar St', 'Houston', 'TX', '77002', 'www.galleryg.com'), 
  (8, 'Gallery H', '1819 Birch St', 'Phoenix', 'AZ', '85001', 'www.galleryh.com'), 
  (9, 'Gallery I', '2021 Oak St', 'Philadelphia', 'PA', '19103', 'www.galleryi.com'), 
  (10, 'Gallery J', '2223 Pine St', 'Washington', 'DC', '20001', 'www.galleryj.com'); 

CREATE TABLE artists ( 
  artist_id INT PRIMARY KEY, 
  name VARCHAR(255) NOT NULL, 
  birth_year INT, 
  death_year INT, 
  nationality VARCHAR(255), 
  gallery_id INT REFERENCES art_galleries(gallery_id) 
); 

INSERT INTO artists (artist_id, name, birth_year, death_year, nationality, gallery_id) VALUES 
  (1, 'Artist A', 1900, 1980, 'American', 1), 
  (2, 'Artist B', 1910, 1990, 'French', 2), 
  (3, 'Artist C', 1920, 2000, 'British', 3), 
  (4, 'Artist D', 1930, 2010, 'German', 4), 
  (5, 'Artist E', 1940, 2020, 'Italian', 5), 
  (6, 'Artist F', 1950, NULL, 'American', 6), 
  (7, 'Artist G', 1960, NULL, 'Canadian', 7), 
  (8, 'Artist H', 1970, NULL, 'Australian', 8), 
  (9, 'Artist I', 1980, NULL, 'Japanese', 9), 
  (10, 'Artist J', 1990, NULL, 'Chinese', 10);","SELECT state, COUNT(*) AS total_galleries, AVG(artist_count) AS avg_artists 
FROM ( 
  SELECT state, COUNT(*) AS artist_count 
  FROM artists 
  GROUP BY state 
) AS artist_counts 
JOIN art_galleries ON art_galleries.state = artist_counts.state 
GROUP BY state 
ORDER BY total_galleries DESC;","This query first calculates the number of artists represented by each gallery in the `artists` table. It then groups these results by state and calculates the average number of artists per gallery for each state. Finally, it joins this data with the `art_galleries` table to get the total number of galleries in each state. The results are then sorted by the total number of galleries in descending order."
121,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,What are the top 10 countries with the highest number of female artists?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, name VARCHAR(255), gender VARCHAR(10), country VARCHAR(255), birth_year INT); 
CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), title VARCHAR(255), creation_year INT, medium VARCHAR(255), price DECIMAL(10,2)); 
CREATE TABLE Galleries (gallery_id INT PRIMARY KEY, name VARCHAR(255), city VARCHAR(255), country VARCHAR(255)); 
CREATE TABLE Exhibitions (exhibition_id INT PRIMARY KEY, gallery_id INT REFERENCES Galleries(gallery_id), artist_id INT REFERENCES Artists(artist_id), start_date DATE, end_date DATE); 
INSERT INTO Artists (artist_id, name, gender, country, birth_year) VALUES 
(1, 'Frida Kahlo', 'Female', 'Mexico', 1907), 
(2, 'Pablo Picasso', 'Male', 'Spain', 1881), 
(3, 'Claude Monet', 'Male', 'France', 1840), 
(4, 'Georgia O\'Keeffe', 'Female', 'United States', 1887), 
(5, 'Vincent van Gogh', 'Male', 'Netherlands', 1853), 
(6, 'Yayoi Kusama', 'Female', 'Japan', 1929), 
(7, 'Leonardo da Vinci', 'Male', 'Italy', 1452), 
(8, 'Michelangelo', 'Male', 'Italy', 1475), 
(9, 'Rembrandt van Rijn', 'Male', 'Netherlands', 1606), 
(10, 'Mary Cassatt', 'Female', 'United States', 1844); 
INSERT INTO Artworks (artwork_id, artist_id, title, creation_year, medium, price) VALUES 
(1, 1, 'The Two Fridas', 1939, 'Oil on canvas', 10000000), 
(2, 2, 'Guernica', 1937, 'Oil on canvas', 15000000), 
(3, 3, 'Water Lilies', 1919, 'Oil on canvas', 40000000), 
(4, 4, 'Jimson Weed', 1936, 'Oil on canvas', 6000000), 
(5, 5, 'The Starry Night', 1889, 'Oil on canvas', 100000000), 
(6, 6, 'Infinity Nets', 1965, 'Acrylic on canvas', 7000000), 
(7, 7, 'Mona Lisa', 1503, 'Oil on panel', 800000000), 
(8, 8, 'David', 1504, 'Marble', 150000000), 
(9, 9, 'The Night Watch', 1642, 'Oil on canvas', 120000000), 
(10, 10, 'The Bath', 1891, 'Oil on canvas', 5000000);","SELECT country, COUNT(*) AS num_artists FROM Artists WHERE gender = 'Female' GROUP BY country ORDER BY num_artists DESC LIMIT 10;","This SQL query first selects the country and counts the number of female artists from the 'Artists' table using the 'COUNT(*) AS num_artists' function. Then, it groups the results by country and orders them in descending order of the number of female artists. Finally, it limits the output to the top 10 countries with the highest number of female artists using the 'LIMIT 10' clause."
122,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,What are the top 10 countries with the most artists represented in the database?,"CREATE TABLE Artists ( ArtistID INT PRIMARY KEY, ArtistName VARCHAR(255), Country VARCHAR(255), BirthYear INT, DeathYear INT );
CREATE TABLE Artworks ( ArtworkID INT PRIMARY KEY, ArtistID INT REFERENCES Artists(ArtistID), Title VARCHAR(255), CreationDate DATE, Medium VARCHAR(255), SalePrice DECIMAL(10,2) );
INSERT INTO Artists (ArtistID, ArtistName, Country, BirthYear, DeathYear) VALUES
(1, 'Leonardo da Vinci', 'Italy', 1452, 1519),
(2, 'Michelangelo', 'Italy', 1475, 1564),
(3, 'Vincent van Gogh', 'Netherlands', 1853, 1890),
(4, 'Claude Monet', 'France', 1840, 1926),
(5, 'Pablo Picasso', 'Spain', 1881, 1973),
(6, 'Salvador Dalí', 'Spain', 1904, 1989),
(7, 'Frida Kahlo', 'Mexico', 1907, 1954),
(8, 'Andy Warhol', 'United States', 1928, 1987),
(9, 'Jackson Pollock', 'United States', 1912, 1956),
(10, 'Georgia O\'Keeffe', 'United States', 1887, 1986);
INSERT INTO Artworks (ArtworkID, ArtistID, Title, CreationDate, Medium, SalePrice) VALUES
(1, 1, 'Mona Lisa', '1503-12-06', 'Oil on panel', 798000000),
(2, 2, 'Sistine Chapel Ceiling', '1512-10-31', 'Fresco', 0),
(3, 3, 'The Starry Night', '1889-06-18', 'Oil on canvas', 100000000),
(4, 4, 'Impression, Sunrise', '1872-11-13', 'Oil on canvas', 112000000),
(5, 5, 'Guernica', '1937-05-01', 'Oil on canvas', 150000000),
(6, 6, 'The Persistence of Memory', '1931-08-27', 'Oil on canvas', 246000000),
(7, 7, 'Self-Portrait with Thorn Necklace and Hummingbird', '1940-07-14', 'Oil on canvas', 5000000),
(8, 8, 'Campbell\'s Soup Cans', '1962-01-01', 'Acrylic and silkscreen ink on canvas', 19000000),
(9, 9, 'One: Number 31, 1950', '1950-01-01', 'Enamel on canvas', 40400000),
(10, 10, 'Jimson Weed / White Flower No. 1', '1932-01-01', 'Oil on canvas', 44400000);","SELECT Country, COUNT(*) AS ArtistCount FROM Artists GROUP BY Country ORDER BY ArtistCount DESC LIMIT 10;","This SQL query selects the country and counts the number of artists from each country. It groups the artists by country and sorts the results in descending order based on the number of artists. Finally, it limits the results to the top 10 countries with the most artists."
123,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Which artists have the most artwork listed in the database?,"CREATE TABLE Artists ( ArtistID INT PRIMARY KEY, ArtistName VARCHAR(255), Country VARCHAR(255), BirthYear INT, DeathYear INT );
CREATE TABLE Artworks ( ArtworkID INT PRIMARY KEY, ArtistID INT REFERENCES Artists(ArtistID), Title VARCHAR(255), CreationDate DATE, Medium VARCHAR(255), SalePrice DECIMAL(10,2) );
INSERT INTO Artists (ArtistID, ArtistName, Country, BirthYear, DeathYear) VALUES
(1, 'Leonardo da Vinci', 'Italy', 1452, 1519),
(2, 'Michelangelo', 'Italy', 1475, 1564),
(3, 'Vincent van Gogh', 'Netherlands', 1853, 1890),
(4, 'Claude Monet', 'France', 1840, 1926),
(5, 'Pablo Picasso', 'Spain', 1881, 1973),
(6, 'Salvador Dalí', 'Spain', 1904, 1989),
(7, 'Frida Kahlo', 'Mexico', 1907, 1954),
(8, 'Andy Warhol', 'United States', 1928, 1987),
(9, 'Jackson Pollock', 'United States', 1912, 1956),
(10, 'Georgia O\'Keeffe', 'United States', 1887, 1986);
INSERT INTO Artworks (ArtworkID, ArtistID, Title, CreationDate, Medium, SalePrice) VALUES
(1, 1, 'Mona Lisa', '1503-12-06', 'Oil on panel', 798000000),
(2, 2, 'Sistine Chapel Ceiling', '1512-10-31', 'Fresco', 0),
(3, 3, 'The Starry Night', '1889-06-18', 'Oil on canvas', 100000000),
(4, 4, 'Impression, Sunrise', '1872-11-13', 'Oil on canvas', 112000000),
(5, 5, 'Guernica', '1937-05-01', 'Oil on canvas', 150000000),
(6, 6, 'The Persistence of Memory', '1931-08-27', 'Oil on canvas', 246000000),
(7, 7, 'Self-Portrait with Thorn Necklace and Hummingbird', '1940-07-14', 'Oil on canvas', 5000000),
(8, 8, 'Campbell\'s Soup Cans', '1962-01-01', 'Acrylic and silkscreen ink on canvas', 19000000),
(9, 9, 'One: Number 31, 1950', '1950-01-01', 'Enamel on canvas', 40400000),
(10, 10, 'Jimson Weed / White Flower No. 1', '1932-01-01', 'Oil on canvas', 44400000);","SELECT ArtistName, COUNT(*) AS ArtworkCount FROM Artists INNER JOIN Artworks ON Artists.ArtistID = Artworks.ArtistID GROUP BY ArtistName ORDER BY ArtworkCount DESC LIMIT 10;","This SQL query joins the Artists and Artworks tables on the ArtistID column. It then selects the ArtistName and counts the number of artworks for each artist. The results are grouped by ArtistName and sorted in descending order based on the number of artworks. Finally, it limits the results to the top 10 artists with the most artworks."
124,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,How many female artists are there in the database?,"CREATE TABLE artists (artist_id INT PRIMARY KEY, name VARCHAR(255), gender VARCHAR(10), birth_year INT, nationality VARCHAR(255));
INSERT INTO artists (artist_id, name, gender, birth_year, nationality) VALUES
(1, 'Leonardo da Vinci', 'Male', 1452, 'Italian'),
(2, 'Michelangelo', 'Male', 1475, 'Italian'),
(3, 'Raphael', 'Male', 1483, 'Italian'),
(4, 'Sandro Botticelli', 'Male', 1445, 'Italian'),
(5, 'Artemisia Gentileschi', 'Female', 1593, 'Italian'),
(6, 'Frida Kahlo', 'Female', 1907, 'Mexican'),
(7, 'Georgia O’Keeffe', 'Female', 1887, 'American'),
(8, 'Louise Bourgeois', 'Female', 1911, 'French'),
(9, 'Yayoi Kusama', 'Female', 1929, 'Japanese'),
(10, 'Kara Walker', 'Female', 1969, 'American');",SELECT COUNT(*) FROM artists WHERE gender = 'Female';,This query counts the number of rows in the 'artists' table where the 'gender' column is equal to 'Female'.
125,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,I would like to remove all customers from the database who have not made a purchase in the last two years.,"-- Table: customers
CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone_number VARCHAR(255) UNIQUE,
    address VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    zip_code VARCHAR(255),
    country VARCHAR(255),
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Table: orders
CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT NOT NULL REFERENCES customers(customer_id),
    order_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,2) NOT NULL,
    payment_method VARCHAR(255),
    shipping_address VARCHAR(255),
    shipping_city VARCHAR(255),
    shipping_state VARCHAR(255),
    shipping_zip_code VARCHAR(255),
    shipping_country VARCHAR(255)
);

-- Sample Data
INSERT INTO customers (customer_id, first_name, last_name, email, phone_number, address, city, state, zip_code, country) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '555-123-4567', '123 Main St', 'Anytown', 'CA', '91234', 'USA'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '555-234-5678', '456 Oak Ave', 'Anytown', 'CA', '91234', 'USA'),
(3, 'Bob', 'Johnson', 'bob.johnson@example.com', '555-345-6789', '789 Pine St', 'Anytown', 'CA', '91234', 'USA');

INSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_method, shipping_address, shipping_city, shipping_state, shipping_zip_code, shipping_country) VALUES
(1, 1, '2023-03-08', 100.00, 'Visa', '123 Main St', 'Anytown', 'CA', '91234', 'USA'),
(2, 2, '2023-03-15', 50.00, 'Mastercard', '456 Oak Ave', 'Anytown', 'CA', '91234', 'USA'),
(3, 1, '2023-04-01', 75.00, 'Amex', '123 Main St', 'Anytown', 'CA', '91234', 'USA');","DELETE FROM customers
WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM orders WHERE order_date >= DATE('now', '-2 years'));","This SQL query first uses a subquery to select all customer IDs who have placed an order within the last two years. Then, it uses a DELETE statement to remove all customers from the 'customers' table whose ID is not included in the subquery results. This effectively removes customers who haven't made a purchase in the past two years."
126,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,Update product stock levels in the Inventory table based on the latest shipment received.,"CREATE TABLE Inventory ( 
    product_id INT PRIMARY KEY, 
    product_name VARCHAR(255) NOT NULL, 
    quantity INT DEFAULT 0, 
    supplier_id INT REFERENCES Suppliers(supplier_id), 
    warehouse_id INT REFERENCES Warehouses(warehouse_id), 
    last_updated DATETIME 
); 

CREATE TABLE Shipments ( 
    shipment_id INT PRIMARY KEY, 
    product_id INT REFERENCES Inventory(product_id), 
    quantity INT DEFAULT 0, 
    received_date DATETIME 
);","UPDATE Inventory SET quantity = quantity + (SELECT SUM(quantity) FROM Shipments WHERE product_id = Inventory.product_id AND received_date >= DATE('now', '-7 days')), last_updated = DATE('now') WHERE product_id IN (SELECT product_id FROM Shipments WHERE received_date >= DATE('now', '-7 days'));","This SQL query performs the following actions:

1. Finds all shipments received in the last 7 days.
2. For each product in these shipments, it calculates the total quantity received.
3. Updates the `quantity` field in the `Inventory` table by adding the received quantity for each product.
4. Sets the `last_updated` field in the `Inventory` table to the current date for all updated products."
127,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,What are the top 3 ordered products in terms of total revenue generated in the last year?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), status VARCHAR(20));
CREATE TABLE order_items (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), PRIMARY KEY (order_id, product_id), FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), supplier_id INT, FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id));
CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(100), country VARCHAR(50));
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), email VARCHAR(100), phone VARCHAR(20), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50));","SELECT p.product_name, SUM(oi.quantity * oi.price) AS total_revenue
FROM products p
JOIN order_items oi ON p.product_id = oi.product_id
JOIN orders o ON oi.order_id = o.order_id
WHERE o.order_date BETWEEN DATE('now', '-1 year') AND DATE('now')
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 3;","This SQL query aims to answer the prompt by retrieving the top 3 ordered products in terms of total revenue generated in the last year.

1. It starts by selecting the product name `p.product_name` and calculating the sum of the product's quantity multiplied by its price for each order as `total_revenue`.
2. It then joins three tables: `products` (p), `order_items` (oi), and `orders` (o) based on their respective foreign key relationships.
3. It filters the orders based on the order date, ensuring they fall within the last year.
4. It groups the results by product name to aggregate the total revenue for each product.
5. Finally, it orders the results in descending order of total revenue and limits the output to the top 3 products."
128,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,Update the customer's email address to 'newemail@example.com' where the customer's name is 'John Doe' and the phone number is '555-123-4567'.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), email VARCHAR(100), phone VARCHAR(20), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50));","UPDATE customers
SET email = 'newemail@example.com'
WHERE customer_name = 'John Doe' AND phone = '555-123-4567';","This SQL query updates the email address of a specific customer based on their name and phone number.

1. It uses the `UPDATE` statement to modify the `customers` table.
2. It sets the `email` column to the new value 'newemail@example.com'.
3. It uses the `WHERE` clause to specify the condition for updating the email. This condition checks if the `customer_name` is 'John Doe' and the `phone` number is '555-123-4567'."
129,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,Delete all orders placed in December 2022.,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), status VARCHAR(20));","DELETE FROM orders
WHERE order_date BETWEEN '2022-12-01' AND '2022-12-31';","This SQL query deletes all orders placed in December 2022.

1. It uses the `DELETE FROM` statement to remove rows from the `orders` table.
2. It specifies the condition for deletion using the `WHERE` clause. This condition checks if the `order_date` falls between '2022-12-01' and '2022-12-31', effectively targeting orders placed in December 2022."
130,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","What are the top 5 most popular mobile apps in the US and UK for the last month, categorized by app store and genre?","CREATE TABLE mobile_apps (app_id INT PRIMARY KEY, app_name VARCHAR(255) NOT NULL, genre VARCHAR(255) NOT NULL, app_store VARCHAR(255) NOT NULL, country VARCHAR(255) NOT NULL, downloads INT NOT NULL, release_date DATE NOT NULL);","WITH RankedApps AS (  SELECT    app_name,    genre,    app_store,    country,    downloads,    RANK() OVER (PARTITION BY app_store, country ORDER BY downloads DESC) AS rank_num  FROM    mobile_apps  WHERE    country IN ('US', 'UK')  AND    release_date >= DATEADD(month, -1, GETDATE()) )SELECT    app_name,    genre,    app_store,    country,    downloads  FROM    RankedApps  WHERE    rank_num <= 5  ORDER BY    app_store,    country,    rank_num;","This query first calculates the rank of each app within each app store and country combination based on the number of downloads in the last month. Then, it filters the results to only include apps from the US and UK and released within the last month. Finally, it selects the top 5 apps for each app store and country combination, ordered by app store, country, and rank."
131,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","In the database of product development, generate a SQL query to identify top 5 products with the highest average customer rating for each category, excluding those with less than 10 reviews, ordered by category and then by average rating in descending order. Apply window functions to achieve this.","CREATE TABLE products (
  product_id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  category VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  release_date DATE NOT NULL
);

CREATE TABLE reviews (
  review_id INT PRIMARY KEY,
  product_id INT NOT NULL,
  customer_id INT NOT NULL,
  rating INT NOT NULL,
  review_text TEXT,
  created_at DATETIME NOT NULL,
  CONSTRAINT FK_product_id FOREIGN KEY (product_id) REFERENCES products(product_id)
);

INSERT INTO products (product_id, name, category, price, release_date) VALUES
(1, 'iPhone 13 Pro', 'Smartphones', 999.00, '2021-09-24'),
(2, 'Samsung Galaxy S22 Ultra', 'Smartphones', 1199.00, '2022-02-25'),
(3, 'MacBook Pro 16""', 'Laptops', 2499.00, '2021-10-26'),
(4, 'Dell XPS 15', 'Laptops', 1799.00, '2022-01-05'),
(5, 'Sony WH-1000XM5', 'Headphones', 399.00, '2022-05-12'),
(6, 'Bose QuietComfort 45', 'Headphones', 329.00, '2021-09-23');

INSERT INTO reviews (review_id, product_id, customer_id, rating, review_text, created_at) VALUES
(1, 1, 123, 5, 'Excellent camera and performance!', '2022-03-15 12:00:00'),
(2, 1, 456, 4, 'Great battery life.', '2022-04-22 18:30:00'),
(3, 2, 789, 5, 'Amazing display and features.', '2022-05-01 10:15:00'),
(4, 2, 101, 4, 'Fast charging is a plus.', '2022-05-18 15:45:00'),
(5, 3, 234, 5, 'Powerful and efficient.', '2022-06-12 11:00:00'),
(6, 3, 567, 4, 'Keyboard and trackpad are top-notch.', '2022-07-05 19:30:00'),
(7, 4, 890, 5, 'Lightweight and portable.', '2022-07-20 13:15:00'),
(8, 4, 112, 4, 'Long battery life is impressive.', '2022-08-02 16:45:00'),
(9, 5, 345, 5, 'Excellent noise cancellation.', '2022-08-15 10:00:00'),
(10, 5, 678, 4, 'Comfortable fit for long listening sessions.', '2022-09-07 17:30:00'),
(11, 6, 901, 5, 'Clear and balanced sound.', '2022-09-22 11:15:00'),
(12, 6, 234, 4, 'Good value for the price.', '2022-10-05 14:45:00');","WITH RankedReviews AS (
    SELECT
        p.category,
        p.name,
        r.rating,
        AVG(r.rating) OVER (PARTITION BY p.category) AS avg_rating,
        COUNT(*) OVER (PARTITION BY p.category) AS review_count,
        ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY avg_rating DESC) AS rank_within_category
    FROM
        products p
    JOIN
        reviews r ON p.product_id = r.product_id
),
TopProducts AS (
    SELECT
        category,
        name,
        avg_rating,
        review_count
    FROM
        RankedReviews
    WHERE
        rank_within_category <= 5 AND review_count >= 10
)
SELECT
    category,
    name,
    avg_rating,
    review_count
FROM
    TopProducts
ORDER BY
    category,
    avg_rating DESC;","1. **Calculate average rating per product and category:**
   - Join `products` and `reviews` tables on `product_id`.
   - Use `AVG(r.rating) OVER (PARTITION BY p.category)` to calculate the average rating for each product category.
2. **Count reviews per product category:**
   - Use `COUNT(*) OVER (PARTITION BY p.category)` to count the number of reviews for each product category.
3. **Rank products within each category by average rating:**
   - Use `ROW_NUMBER() OVER (PARTITION BY p.category ORDER BY avg_rating DESC)` to assign a rank to each product within its category, based on average rating in descending order.
4. **Filter for top 5 products and minimum 10 reviews per category:**
   - Create a CTE `RankedReviews` to store the results from steps 1-3.
   - Filter `RankedReviews` to keep only products with a rank less than or equal to 5 and at least 10 reviews.
5. **Output category, product name, average rating, and review count:**
   - Create a CTE `TopProducts` to select the desired columns from the filtered results.
   - Order the final result by category and then by average rating in descending order."
132,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Give me the top five countries with the most data breaches in 2021, ordered from most to least breaches.","CREATE TABLE breaches (country VARCHAR(255), breach_count INT); INSERT INTO breaches (country, breach_count) VALUES ('United States', 1245), ('China', 579), ('India', 494), ('Brazil', 396), ('Germany', 312);",SELECT country FROM breaches ORDER BY breach_count DESC LIMIT 5;,"This SQL query selects the country column from the breaches table, orders it in descending order by the breach_count column, and limits the result to the top 5 rows. This gives us the top five countries with the most data breaches in 2021."
133,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",What is the average number of data breaches per country in 2021?,"CREATE TABLE breaches (country VARCHAR(255), breach_count INT); INSERT INTO breaches (country, breach_count) VALUES ('United States', 1245), ('China', 579), ('India', 494), ('Brazil', 396), ('Germany', 312), ('United Kingdom', 281), ('France', 245), ('Canada', 223), ('Australia', 198), ('Italy', 187), ('Spain', 176), ('Netherlands', 154), ('Mexico', 145), ('South Korea', 138), ('Japan', 125), ('Russia', 112), ('Turkey', 95), ('Poland', 89), ('Switzerland', 78), ('Belgium', 72);",SELECT AVG(breach_count) FROM breaches;,This SQL query calculates the average number of data breaches per country in 2021 by first selecting the average of the breach_count column from the breaches table. This provides an overall indication of the average number of breaches experienced by countries in the dataset.
134,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","For each country, calculate the percentage of data breaches that occurred in the technology sector.","CREATE TABLE breaches (country VARCHAR(255), breach_count INT, sector VARCHAR(255)); INSERT INTO breaches (country, breach_count, sector) VALUES ('United States', 1245, 'Technology'), ('United States', 579, 'Healthcare'), ('United States', 494, 'Finance'), ('China', 396, 'Technology'), ('China', 281, 'Government'), ('China', 187, 'Education'), ('India', 245, 'Technology'), ('India', 176, 'Retail'), ('India', 154, 'Manufacturing'), ('Brazil', 145, 'Technology'), ('Brazil', 138, 'Energy'), ('Brazil', 125, 'Telecommunications'), ('Germany', 112, 'Technology'), ('Germany', 95, 'Automotive'), ('Germany', 78, 'Transportation'), ('United Kingdom', 72, 'Technology'), ('United Kingdom', 65, 'Financial Services'), ('United Kingdom', 58, 'Healthcare'), ('France', 52, 'Technology'), ('France', 45, 'Government'), ('France', 38, 'Retail');","SELECT country, sector, COUNT(*) AS breach_count, (COUNT(*) * 100.0) / SUM(COUNT(*)) OVER (PARTITION BY country) AS breach_percentage FROM breaches GROUP BY country, sector ORDER BY country, breach_percentage DESC;","This SQL query calculates the percentage of data breaches that occurred in the technology sector for each country. It first selects the country, sector, and count of breaches for each combination of country and sector. Then, it calculates the breach_percentage by multiplying the count by 100 and dividing it by the sum of counts for each country (using the OVER clause with PARTITION BY country). Finally, it groups the results by country and sector and orders them by country and breach_percentage in descending order. This provides a detailed breakdown of the proportion of breaches in the technology sector compared to other sectors for each country."
135,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average price of products sold in the United States?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, price DECIMAL(10,2) NOT NULL, category VARCHAR(255) NOT NULL, supplier_id INT REFERENCES suppliers(supplier_id));
CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), customer_id INT REFERENCES customers(customer_id), sale_date DATE NOT NULL, quantity INT NOT NULL, price DECIMAL(10,2) NOT NULL);
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255) NOT NULL, city VARCHAR(255) NOT NULL);",SELECT AVG(p.price) FROM products p JOIN sales s ON p.product_id = s.product_id WHERE s.customer_id IN (SELECT customer_id FROM customers WHERE country = 'United States');,"This SQL query calculates the average price of products sold in the United States. It joins the 'products' table with the 'sales' table on the 'product_id' column. Then, it filters the 'sales' table to only include sales made by customers in the United States. Finally, it calculates the average price of the products sold."
136,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Which products had the highest sales revenue in the month of January 2023?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, product_id INT, quantity INT, price DECIMAL(10,2));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), supplier_id INT);
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255));","SELECT p.product_name, SUM(o.quantity * o.price) AS total_revenue
FROM orders o
INNER JOIN products p ON o.product_id = p.product_id
WHERE o.order_date BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 10;","This SQL query retrieves the top 10 products with the highest sales revenue in January 2023. It joins the 'orders' and 'products' tables on the 'product_id' column, filters the order dates for January 2023, calculates the total revenue for each product, groups the results by product name, and orders them in descending order of total revenue."
137,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What are the top 5 cities with the highest average order value?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, product_id INT, quantity INT, price DECIMAL(10,2));
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255));","SELECT c.city, AVG(o.price) AS avg_order_value
FROM orders o
INNER JOIN customers c ON o.customer_id = c.customer_id
GROUP BY c.city
ORDER BY avg_order_value DESC
LIMIT 5;","This SQL query finds the top 5 cities with the highest average order value. It joins the 'orders' and 'customers' tables on the 'customer_id' column, calculates the average order value for each city, groups the results by city, and orders them in descending order of average order value."
138,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the customer churn rate for the past year?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), first_purchase_date DATE, last_purchase_date DATE);","SELECT COUNT(DISTINCT customer_id) AS churned_customers
FROM customers
WHERE last_purchase_date < DATE('now', '-1 year')
/ COUNT(*) AS total_customers
FROM customers;",This SQL query calculates the customer churn rate for the past year. It counts the number of distinct customers who made their last purchase more than a year ago and divides it by the total number of customers.
139,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What are the top 3 suppliers with the highest number of backordered items?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), supplier_id INT);
CREATE TABLE inventory (product_id INT, quantity INT, backordered INT, PRIMARY KEY (product_id));","SELECT s.supplier_name, SUM(i.backordered) AS total_backordered_items
FROM suppliers s
INNER JOIN products p ON s.supplier_id = p.supplier_id
INNER JOIN inventory i ON p.product_id = i.product_id
GROUP BY s.supplier_name
ORDER BY total_backordered_items DESC
LIMIT 3;","This SQL query identifies the top 3 suppliers with the highest number of backordered items. It joins the 'suppliers', 'products', and 'inventory' tables, calculates the total number of backordered items for each supplier, groups the results by supplier name, and orders them in descending order of total backordered items."
140,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",I need to update the 'supplier_rating' column in the 'suppliers' table to 'A' for all suppliers who have delivered at least 95% of their orders on time in the last quarter.,"CREATE TABLE suppliers ( supplier_id INT PRIMARY KEY,  supplier_name VARCHAR(255) NOT NULL,  supplier_rating CHAR(1) DEFAULT 'C',  country VARCHAR(255) );
CREATE TABLE orders ( order_id INT PRIMARY KEY,  supplier_id INT REFERENCES suppliers(supplier_id),  order_date DATE NOT NULL,  delivery_date DATE,  status VARCHAR(255) );
CREATE VIEW on_time_orders AS SELECT order_id FROM orders WHERE status = 'Delivered' AND delivery_date <= order_date + INTERVAL '7 days';","UPDATE suppliers SET supplier_rating = 'A' WHERE supplier_id IN (SELECT supplier_id FROM (SELECT supplier_id, COUNT(*) AS total_orders, SUM(CASE WHEN status = 'Delivered' AND delivery_date <= order_date + INTERVAL '7 days' THEN 1 ELSE 0 END) AS on_time_orders FROM orders GROUP BY supplier_id) AS supplier_orders WHERE on_time_orders / total_orders >= 0.95);","This query updates the 'supplier_rating' column in the 'suppliers' table to 'A' for all suppliers who have delivered at least 95% of their orders on time in the last quarter. 

The query first calculates the total number of orders and the number of on-time orders for each supplier in the last quarter. Then, it filters the results to only include suppliers who have delivered at least 95% of their orders on time. Finally, it updates the 'supplier_rating' column for these suppliers to 'A'."
141,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","I'd like to know the average production time for each product in the 'products' table, grouped by the 'category' column.","CREATE TABLE products ( product_id INT PRIMARY KEY,  product_name VARCHAR(255) NOT NULL,  category VARCHAR(255),  production_time INT );
CREATE TABLE production_runs ( production_run_id INT PRIMARY KEY,  product_id INT REFERENCES products(product_id),  start_time DATETIME,  end_time DATETIME );","SELECT category, AVG(production_time) AS average_production_time FROM products JOIN production_runs ON products.product_id = production_runs.product_id GROUP BY category;","This query calculates the average production time for each product in the 'products' table, grouped by the 'category' column. 

The query first joins the 'products' table and the 'production_runs' table on the 'product_id' column. Then, it calculates the average production time for each product category using the `AVG()` function. Finally, it groups the results by the 'category' column."
142,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",I need to find all customers who have placed at least 5 orders in the last month.,"CREATE TABLE customers ( customer_id INT PRIMARY KEY,  customer_name VARCHAR(255) NOT NULL,  email VARCHAR(255) );
CREATE TABLE orders ( order_id INT PRIMARY KEY,  customer_id INT REFERENCES customers(customer_id),  order_date DATE NOT NULL );","SELECT customer_id, customer_name FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE order_date >= DATE('now', '-1 month')) GROUP BY customer_id HAVING COUNT(*) >= 5;","This query finds all customers who have placed at least 5 orders in the last month. 

The query first selects the customer_id and customer_name from the 'customers' table. Then, it filters the results to only include customers who have placed at least one order in the last month. Finally, it groups the results by customer_id and filters again to only include customers who have placed at least 5 orders."
143,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",I want to delete all records from the 'production_runs' table that are older than 6 months.,"CREATE TABLE production_runs ( production_run_id INT PRIMARY KEY,  product_id INT REFERENCES products(product_id),  start_time DATETIME,  end_time DATETIME );","DELETE FROM production_runs WHERE end_time < DATE('now', '-6 months');","This query deletes all records from the 'production_runs' table that are older than 6 months. 

The query first filters the results to only include records where the 'end_time' column is older than 6 months. Then, it deletes these records from the table."
144,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Can you show me the total number of units produced for each product in the last quarter, grouped by the 'supplier' column?","CREATE TABLE products ( product_id INT PRIMARY KEY,  product_name VARCHAR(255) NOT NULL,  supplier_id INT REFERENCES suppliers(supplier_id),  category VARCHAR(255),  production_time INT );
CREATE TABLE production_runs ( production_run_id INT PRIMARY KEY,  product_id INT REFERENCES products(product_id),  start_time DATETIME,  end_time DATETIME );","SELECT supplier_name, SUM(units_produced) AS total_units_produced FROM suppliers JOIN (SELECT product_id, SUM(production_runs.end_time - production_runs.start_time) AS units_produced FROM products JOIN production_runs ON products.product_id = production_runs.product_id WHERE production_runs.end_time >= DATE('now', '-3 months') GROUP BY product_id) AS production_summary ON suppliers.supplier_id = products.supplier_id GROUP BY supplier_name;","This query shows the total number of units produced for each product in the last quarter, grouped by the 'supplier' column. 

The query first calculates the total units produced for each product in the last quarter. Then, it joins the results with the 'suppliers' table to get the supplier name for each product. Finally, it groups the results by supplier name and calculates the total units produced for each supplier."
145,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","What are the top 5 cities with the highest median home price in the United States, excluding listings with more than 5 bedrooms or more than 4 bathrooms?","CREATE TABLE Listings (
    ListingID INT PRIMARY KEY,
    Address VARCHAR(255) NOT NULL,
    City VARCHAR(255) NOT NULL,
    State VARCHAR(255) NOT NULL,
    Price INT NOT NULL,
    Bedrooms INT NOT NULL,
    Bathrooms INT NOT NULL,
    DateListed DATE NOT NULL
);

INSERT INTO Listings (ListingID, Address, City, State, Price, Bedrooms, Bathrooms, DateListed) VALUES
(1, '123 Main St', 'Los Angeles', 'CA', 1000000, 3, 2, '2023-03-01'),
(2, '456 Oak Ave', 'San Francisco', 'CA', 1200000, 4, 3, '2023-03-05'),
(3, '789 Pine Blvd', 'San Diego', 'CA', 850000, 2, 2, '2023-03-10'),
(4, '1011 Willow Way', 'Phoenix', 'AZ', 500000, 3, 2, '2023-03-15'),
(5, '1213 Maple St', 'Dallas', 'TX', 600000, 4, 2, '2023-03-20'),
(6, '1415 Birch Ave', 'Houston', 'TX', 450000, 2, 1, '2023-03-25'),
(7, '1617 Cedar Blvd', 'Miami', 'FL', 750000, 3, 3, '2023-03-30'),
(8, '1819 Oak St', 'Atlanta', 'GA', 400000, 2, 1, '2023-04-05'),
(9, '2021 Pine Ave', 'Charlotte', 'NC', 350000, 3, 2, '2023-04-10'),
(10, '2223 Willow Way', 'Denver', 'CO', 650000, 4, 3, '2023-04-15'),
(11, '2425 Maple St', 'Seattle', 'WA', 800000, 3, 2, '2023-04-20'),
(12, '2627 Birch Ave', 'Portland', 'OR', 550000, 2, 1, '2023-04-25');

CREATE TABLE Cities (
    City VARCHAR(255) PRIMARY KEY,
    State VARCHAR(255) NOT NULL,
    Population INT NOT NULL
);

INSERT INTO Cities (City, State, Population) VALUES
('Los Angeles', 'CA', 3971883),
('San Francisco', 'CA', 873965),
('San Diego', 'CA', 1425976),
('Phoenix', 'AZ', 1608139),
('Dallas', 'TX', 1343573),
('Houston', 'TX', 2325502),
('Miami', 'FL', 4670911),
('Atlanta', 'GA', 5068114),
('Charlotte', 'NC', 874579),
('Denver', 'CO', 711463),
('Seattle', 'WA', 737015),
('Portland', 'OR', 652503);","SELECT City, State, AVG(Price) AS MedianPrice
FROM Listings
WHERE Bedrooms <= 5 AND Bathrooms <= 4
GROUP BY City, State
ORDER BY MedianPrice DESC
LIMIT 5;","This query first selects the city, state, and average price for all listings with 5 bedrooms or less and 4 bathrooms or less. It then groups the results by city and state to calculate the median price for each city. Finally, it orders the results by median price in descending order and limits the output to the top 5 cities."
146,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","What are the top 10 most expensive cities in the United States to buy a house, based on median house price in the last quarter?","CREATE TABLE Properties (
   PropertyID INT PRIMARY KEY,
   Address VARCHAR(255),
   City VARCHAR(255),
   State VARCHAR(255),
   Zipcode INT,
   Price DECIMAL(10,2),
   Bedrooms INT,
   Bathrooms DECIMAL(4,2),
   SquareFootage INT,
   YearBuilt INT,
   PropertyType VARCHAR(255),
   DateListed DATE,
   DateSold DATE
);

INSERT INTO Properties (PropertyID, Address, City, State, Zipcode, Price, Bedrooms, Bathrooms, SquareFootage, YearBuilt, PropertyType, DateListed, DateSold)
VALUES
   (1, '123 Main St', 'Los Angeles', 'CA', 90012, 1200000, 3, 2.5, 2000, 2010, 'Single Family', '2023-01-01', NULL),
   (2, '456 Oak Ave', 'San Francisco', 'CA', 94102, 1500000, 4, 3, 2500, 2015, 'Single Family', '2023-02-15', NULL),
   (3, '789 Pine St', 'Seattle', 'WA', 98101, 1000000, 2, 1.5, 1500, 2005, 'Condo', '2023-03-01', NULL),
   (4, '1011 Elm St', 'New York', 'NY', 10013, 1800000, 5, 4, 3000, 2020, 'Townhouse', '2023-04-10', NULL),
   (5, '1213 Willow St', 'Chicago', 'IL', 60611, 750000, 3, 2, 1800, 2018, 'Multi-Family', '2023-05-05', NULL),
   (6, '1415 Maple St', 'Miami', 'FL', 33133, 800000, 4, 2.5, 2200, 2012, 'Single Family', '2023-06-20', NULL),
   (7, '1617 Birch St', 'Phoenix', 'AZ', 85015, 500000, 3, 2, 1600, 2008, 'Single Family', '2023-07-12', NULL),
   (8, '1819 Cedar St', 'Philadelphia', 'PA', 19103, 600000, 2, 1.5, 1400, 2003, 'Condo', '2023-08-01', NULL),
   (9, '2021 Oak St', 'San Antonio', 'TX', 78205, 450000, 3, 2, 1700, 2016, 'Single Family', '2023-09-15', NULL),
   (10, '2223 Pine St', 'San Diego', 'CA', 92101, 850000, 4, 3, 2100, 2019, 'Townhouse', '2023-10-05', NULL);

CREATE TABLE Cities (
   CityID INT PRIMARY KEY,
   City VARCHAR(255),
   State VARCHAR(255),
   Population INT
);

INSERT INTO Cities (CityID, City, State, Population)
VALUES
   (1, 'Los Angeles', 'CA', 3971883),
   (2, 'San Francisco', 'CA', 873965),
   (3, 'Seattle', 'WA', 737015),
   (4, 'New York', 'NY', 8419000),
   (5, 'Chicago', 'IL', 2746388),
   (6, 'Miami', 'FL', 467000),
   (7, 'Phoenix', 'AZ', 1660000),
   (8, 'Philadelphia', 'PA', 1584138),
   (9, 'San Antonio', 'TX', 1547250),
   (10, 'San Diego', 'CA', 1425000);","SELECT c.City, p.Price
FROM Cities c
JOIN Properties p ON c.City = p.City
WHERE p.DateSold IS NULL
AND c.State = 'CA'
GROUP BY c.City, p.Price
ORDER BY p.Price DESC
LIMIT 10;","This query retrieves the top 10 most expensive cities in California to buy a house, based on the median house price in the last quarter. It uses the following steps:

1. Join the `Cities` and `Properties` tables on the `City` column.
2. Filter the results to include only properties that have not been sold yet (i.e., `DateSold` is NULL).
3. Filter the results to include only properties located in California (i.e., `State = 'CA'`).
4. Group the results by city and price.
5. Order the results by price in descending order.
6. Limit the results to the top 10 cities."
147,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",What are the top 5 cities in terms of average property price in the state of California for the year 2023?,"CREATE TABLE properties (  property_id INT PRIMARY KEY,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  price INT,  sale_date DATE);  INSERT INTO properties (property_id, address, city, state, zip_code, price, sale_date) VALUES  (1, '123 Main St', 'Los Angeles', 'CA', 90001, 1000000, '2023-01-01'),  (2, '456 Oak Ave', 'San Francisco', 'CA', 94102, 1500000, '2023-02-15'),  (3, '789 Pine St', 'San Diego', 'CA', 92101, 800000, '2023-03-05'),  (4, '1011 Willow St', 'Los Angeles', 'CA', 90003, 1200000, '2023-04-22'),  (5, '1213 Maple St', 'San Francisco', 'CA', 94104, 1600000, '2023-05-10'),  (6, '1415 Birch St', 'San Diego', 'CA', 92102, 900000, '2023-06-07'),  (7, '1617 Cedar St', 'Los Angeles', 'CA', 90005, 1100000, '2023-07-01'),  (8, '1819 Elm St', 'San Francisco', 'CA', 94106, 1700000, '2023-08-15'),  (9, '2021 Oak St', 'San Diego', 'CA', 92103, 1000000, '2023-09-05'),  (10, '2223 Pine St', 'Los Angeles', 'CA', 90007, 1300000, '2023-10-22'),  (11, '2425 Willow St', 'San Francisco', 'CA', 94108, 1800000, '2023-11-10'),  (12, '2627 Maple St', 'San Diego', 'CA', 92104, 1100000, '2023-12-07');","SELECT city, AVG(price) AS average_price  FROM properties  WHERE state = 'CA' AND YEAR(sale_date) = 2023  GROUP BY city  ORDER BY average_price DESC  LIMIT 5;","This SQL query retrieves the top 5 cities in terms of average property price in the state of California for the year 2023.  * It first filters the properties table to include only properties located in California and sold in the year 2023.  * Then, it groups the properties by city and calculates the average price for each city.  * Finally, it orders the results by average price in descending order and selects the top 5 cities."
148,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",What is the average price of properties sold in each month of 2023 in the city of Los Angeles?,"CREATE TABLE properties (  property_id INT PRIMARY KEY,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  price INT,  sale_date DATE);  INSERT INTO properties (property_id, address, city, state, zip_code, price, sale_date) VALUES  (1, '123 Main St', 'Los Angeles', 'CA', 90001, 1000000, '2023-01-01'),  (2, '456 Oak Ave', 'San Francisco', 'CA', 94102, 1500000, '2023-02-15'),  (3, '789 Pine St', 'San Diego', 'CA', 92101, 800000, '2023-03-05'),  (4, '1011 Willow St', 'Los Angeles', 'CA', 90003, 1200000, '2023-04-22'),  (5, '1213 Maple St', 'San Francisco', 'CA', 94104, 1600000, '2023-05-10'),  (6, '1415 Birch St', 'San Diego', 'CA', 92102, 900000, '2023-06-07'),  (7, '1617 Cedar St', 'Los Angeles', 'CA', 90005, 1100000, '2023-07-01'),  (8, '1819 Elm St', 'San Francisco', 'CA', 94106, 1700000, '2023-08-15'),  (9, '2021 Oak St', 'San Diego', 'CA', 92103, 1000000, '2023-09-05'),  (10, '2223 Pine St', 'Los Angeles', 'CA', 90007, 1300000, '2023-10-22'),  (11, '2425 Willow St', 'San Francisco', 'CA', 94108, 1800000, '2023-11-10'),  (12, '2627 Maple St', 'San Diego', 'CA', 92104, 1100000, '2023-12-07');","SELECT MONTH(sale_date) AS month, AVG(price) AS average_price  FROM properties  WHERE city = 'Los Angeles' AND YEAR(sale_date) = 2023  GROUP BY MONTH(sale_date)  ORDER BY month;","This SQL query retrieves the average price of properties sold in each month of 2023 in the city of Los Angeles.  * It first filters the properties table to include only properties located in Los Angeles and sold in the year 2023.  * Then, it groups the properties by the month of sale and calculates the average price for each month.  * Finally, it orders the results by month."
149,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Which neighborhoods in San Francisco have the highest median listing price for 2-bedroom single-family homes?,"CREATE TABLE listings (
  listing_id INT PRIMARY KEY,
  address VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT,
  property_type VARCHAR(255),
  bedrooms INT,
  bathrooms INT,
  square_footage INT,
  listing_price INT,
  listing_date DATE,
  sale_date DATE,
  sale_price INT
);

CREATE TABLE neighborhoods (
  neighborhood_id INT PRIMARY KEY,
  neighborhood_name VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT
);

INSERT INTO listings (listing_id, address, city, state, zip_code, property_type, bedrooms, bathrooms, square_footage, listing_price, listing_date, sale_date, sale_price) VALUES
(1, '123 Main St', 'San Francisco', 'CA', 94102, 'Single Family Home', 2, 1, 1200, 1000000, '2023-01-01', '2023-02-01', 1100000),
(2, '456 Oak Ave', 'San Francisco', 'CA', 94103, 'Condo', 1, 1, 800, 750000, '2023-01-15', '2023-02-15', 800000),
(3, '789 Pine St', 'Los Angeles', 'CA', 90001, 'Single Family Home', 3, 2, 1800, 1500000, '2023-02-01', '2023-03-01', 1600000),
(4, '1011 Willow Way', 'Los Angeles', 'CA', 90002, 'Apartment', 2, 1, 1000, 600000, '2023-02-15', '2023-03-15', 650000);

INSERT INTO neighborhoods (neighborhood_id, neighborhood_name, city, state, zip_code) VALUES
(1, 'Pacific Heights', 'San Francisco', 'CA', 94115),
(2, 'Noe Valley', 'San Francisco', 'CA', 94114),
(3, 'Marina District', 'San Francisco', 'CA', 94123),
(4, 'Beverly Hills', 'Los Angeles', 'CA', 90210),
(5, 'Santa Monica', 'Los Angeles', 'CA', 90401);","WITH MedianListingPrices AS (
  SELECT neighborhood_name, property_type, bedrooms, AVG(listing_price) AS median_listing_price
  FROM listings
  JOIN neighborhoods ON listings.zip_code = neighborhoods.zip_code
  WHERE city = 'San Francisco' AND property_type = 'Single Family Home' AND bedrooms = 2
  GROUP BY neighborhood_name
),
RankedListingPrices AS (
  SELECT neighborhood_name, median_listing_price, ROW_NUMBER() OVER (PARTITION BY neighborhood_name ORDER BY median_listing_price DESC) AS rank
  FROM MedianListingPrices
)
SELECT neighborhood_name
FROM RankedListingPrices
WHERE rank = 1;","This SQL query first calculates the median listing price for 2-bedroom single-family homes in each neighborhood of San Francisco. It then ranks these neighborhoods by their median listing price in descending order. Finally, it selects the neighborhood with the highest median listing price, which is the neighborhood with the highest rank of 1."
150,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,What are the top 5 most traded stocks on the NASDAQ in the last 3 months?,"CREATE TABLE stocks (stock_symbol VARCHAR(10) PRIMARY KEY, company_name VARCHAR(255), sector VARCHAR(255), exchange VARCHAR(10));
CREATE TABLE transactions (transaction_id INT PRIMARY KEY, stock_symbol VARCHAR(10) REFERENCES stocks(stock_symbol), price DECIMAL(10,2), quantity INT, transaction_date DATE);","SELECT s.stock_symbol, s.company_name, SUM(t.quantity) AS total_traded_quantity
FROM stocks s
JOIN transactions t ON s.stock_symbol = t.stock_symbol
WHERE s.exchange = 'NASDAQ' AND t.transaction_date >= DATE('now', '-3 months')
GROUP BY s.stock_symbol, s.company_name
ORDER BY total_traded_quantity DESC
LIMIT 5;","This SQL query aims to find the top 5 most traded stocks on the NASDAQ in the last 3 months. 

Step 1: Join the 'stocks' and 'transactions' tables on the 'stock_symbol' column.
Step 2: Filter the transactions to include only those that occurred on the NASDAQ exchange ('s.exchange = 'NASDAQ'') and within the last 3 months ('t.transaction_date >= DATE('now', '-3 months')').
Step 3: Group the results by stock symbol and company name, and calculate the sum of the traded quantity for each stock ('SUM(t.quantity) AS total_traded_quantity').
Step 4: Order the results in descending order of total traded quantity.
Step 5: Limit the results to the top 5 stocks."
151,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Which customers have made the most deposits in the last month?,"CREATE TABLE Customers (  customer_id INT PRIMARY KEY,  name VARCHAR(255) NOT NULL,  email VARCHAR(255) UNIQUE,  phone_number VARCHAR(20)  );  CREATE TABLE Accounts (  account_id INT PRIMARY KEY,  customer_id INT REFERENCES Customers(customer_id),  balance DECIMAL(10,2) DEFAULT 0,  account_type VARCHAR(255)  );  CREATE TABLE Transactions (  transaction_id INT PRIMARY KEY,  account_id INT REFERENCES Accounts(account_id),  amount DECIMAL(10,2) NOT NULL,  transaction_type VARCHAR(255),  transaction_date DATE  );  INSERT INTO Customers (customer_id, name, email, phone_number) VALUES  (1, 'John Doe', 'john.doe@example.com', '555-123-4567'),  (2, 'Jane Smith', 'jane.smith@example.com', '555-234-5678'),  (3, 'Bob Johnson', 'bob.johnson@example.com', '555-345-6789');  INSERT INTO Accounts (account_id, customer_id, balance, account_type) VALUES  (1, 1, 1000.00, 'Checking'),  (2, 2, 500.00, 'Savings'),  (3, 3, 2500.00, 'Checking');  INSERT INTO Transactions (transaction_id, account_id, amount, transaction_type, transaction_date) VALUES  (1, 1, 100.00, 'Deposit', '2023-03-01'),  (2, 2, 50.00, 'Deposit', '2023-03-05'),  (3, 1, 200.00, 'Deposit', '2023-03-10'),  (4, 3, 1000.00, 'Deposit', '2023-03-15'),  (5, 2, 75.00, 'Deposit', '2023-03-20'),  (6, 1, 50.00, 'Deposit', '2023-03-25'),  (7, 3, 250.00, 'Deposit', '2023-03-30');","SELECT c.name, SUM(t.amount) AS total_deposits  FROM Customers c  JOIN Accounts a ON c.customer_id = a.customer_id  JOIN Transactions t ON a.account_id = t.account_id  WHERE t.transaction_type = 'Deposit' AND t.transaction_date >= DATE('now', '-1 month')  GROUP BY c.customer_id  ORDER BY total_deposits DESC  LIMIT 10;","This query selects the names of customers and the sum of their deposits in the last month. It uses three tables: Customers, Accounts, and Transactions. It joins these tables on the customer_id and account_id columns. It then filters the transactions to only include deposits made in the last month. Finally, it groups the results by customer_id and orders them by the sum of deposits in descending order, and limits the results to the top 10 customers."
152,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the names and stock symbols of the top 5 companies with the highest average daily trading volume over the past month, along with their average closing price for the same period.","CREATE TABLE Stocks (  stock_symbol VARCHAR(10) PRIMARY KEY,  company_name VARCHAR(50) NOT NULL,  industry VARCHAR(30)  );  CREATE TABLE Daily_Prices (  stock_symbol VARCHAR(10) REFERENCES Stocks(stock_symbol),  date DATE,  open_price DECIMAL(10,2),  high_price DECIMAL(10,2),  low_price DECIMAL(10,2),  close_price DECIMAL(10,2),  volume INT,  PRIMARY KEY (stock_symbol, date) );  INSERT INTO Stocks (stock_symbol, company_name, industry) VALUES  ('AAPL', 'Apple Inc.', 'Technology'),  ('MSFT', 'Microsoft Corp.', 'Technology'),  ('GOOG', 'Alphabet Inc.', 'Technology'),  ('AMZN', 'Amazon.com Inc.', 'Retail'),  ('TSLA', 'Tesla Inc.', 'Automotive');  INSERT INTO Daily_Prices (stock_symbol, date, open_price, high_price, low_price, close_price, volume) VALUES  ('AAPL', '2023-10-26', 145.50, 146.25, 144.75, 145.00, 10000000),  ('AAPL', '2023-10-27', 145.00, 146.00, 144.50, 145.50, 11000000),  ('AAPL', '2023-10-28', 145.50, 146.50, 144.00, 146.00, 12000000),  ('AAPL', '2023-10-30', 146.00, 147.00, 145.50, 146.50, 13000000),  ('AAPL', '2023-10-31', 146.50, 147.50, 146.00, 147.00, 14000000),  ('MSFT', '2023-10-26', 255.00, 256.00, 254.50, 255.50, 8000000),  ('MSFT', '2023-10-27', 255.50, 256.50, 254.00, 256.00, 9000000),  ('MSFT', '2023-10-28', 256.00, 257.00, 255.50, 256.50, 10000000),  ('MSFT', '2023-10-30', 256.50, 257.50, 256.00, 257.00, 11000000),  ('MSFT', '2023-10-31', 257.00, 258.00, 256.50, 257.50, 12000000),  ('GOOG', '2023-10-26', 2300.00, 2310.00, 2290.00, 2300.00, 7000000),  ('GOOG', '2023-10-27', 2300.00, 2310.00, 2290.00, 2300.00, 8000000),  ('GOOG', '2023-10-28', 2300.00, 2310.00, 2290.00, 2300.00, 9000000),  ('GOOG', '2023-10-30', 2300.00, 2310.00, 2290.00, 2300.00, 10000000),  ('GOOG', '2023-10-31', 2300.00, 2310.00, 2290.00, 2300.00, 11000000),  ('AMZN', '2023-10-26', 120.00, 121.00, 119.50, 120.50, 15000000),  ('AMZN', '2023-10-27', 120.50, 121.50, 120.00, 121.00, 16000000),  ('AMZN', '2023-10-28', 121.00, 122.00, 120.50, 121.50, 17000000),  ('AMZN', '2023-10-30', 121.50, 122.50, 121.00, 122.00, 18000000),  ('AMZN', '2023-10-31', 122.00, 123.00, 121.50, 122.50, 19000000),  ('TSLA', '2023-10-26', 200.00, 201.00, 199.50, 200.50, 13000000),  ('TSLA', '2023-10-27', 200.50, 201.50, 200.00, 201.00, 14000000),  ('TSLA', '2023-10-28', 201.00, 202.00, 200.50, 201.50, 15000000),  ('TSLA', '2023-10-30', 201.50, 202.50, 201.00, 202.00, 16000000),  ('TSLA', '2023-10-31', 202.00, 203.00, 201.50, 202.50, 17000000);","SELECT S.company_name, S.stock_symbol, AVG(DP.volume) AS avg_volume, AVG(DP.close_price) AS avg_closing_price  FROM Stocks AS S  INNER JOIN Daily_Prices AS DP ON S.stock_symbol = DP.stock_symbol  WHERE DP.date >= DATE('now', '-1 month')  GROUP BY S.stock_symbol, S.company_name  ORDER BY avg_volume DESC  LIMIT 5;","This SQL query retrieves the top 5 companies with the highest average daily trading volume over the past month. It uses an inner join to combine the 'Stocks' and 'Daily_Prices' tables based on the 'stock_symbol' column. The query filters the 'Daily_Prices' table to include only records from the past month using the `DATE('now', '-1 month')` function. It then groups the results by company name and stock symbol, calculates the average daily volume and average closing price for each company, and orders the results by average volume in descending order. Finally, it limits the output to the top 5 companies."
153,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Provide a list of transactions that occurred in 2023, specifying the date, customer name, and transaction amount. Include transactions from both retail and institutional customers.","CREATE TABLE TRANSACTIONS ( TRANSACTION_ID INT PRIMARY KEY, TRANSACTION_DATE DATE, CUSTOMER_ID INT, TRANSACTION_AMOUNT DECIMAL(10,2), TRANSACTION_TYPE VARCHAR(255), FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID));
CREATE TABLE CUSTOMERS ( CUSTOMER_ID INT PRIMARY KEY, CUSTOMER_NAME VARCHAR(255), CUSTOMER_TYPE VARCHAR(255));
INSERT INTO CUSTOMERS (CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_TYPE) VALUES (1, 'John Smith', 'Retail'), (2, 'Jane Doe', 'Institutional'), (3, 'Acme Corp', 'Institutional');
INSERT INTO TRANSACTIONS (TRANSACTION_ID, TRANSACTION_DATE, CUSTOMER_ID, TRANSACTION_AMOUNT, TRANSACTION_TYPE) VALUES (1, '2023-01-15', 1, 100.00, 'Deposit'), (2, '2023-02-01', 2, 5000.00, 'Withdrawal'), (3, '2023-03-10', 3, 100000.00, 'Transfer');","SELECT T.TRANSACTION_DATE, C.CUSTOMER_NAME, T.TRANSACTION_AMOUNT
FROM TRANSACTIONS T
INNER JOIN CUSTOMERS C ON T.CUSTOMER_ID = C.CUSTOMER_ID
WHERE T.TRANSACTION_DATE >= '2023-01-01'
ORDER BY T.TRANSACTION_DATE;","This query selects the transaction date, customer name, and transaction amount from the TRANSACTIONS table.
It joins the TRANSACTIONS table with the CUSTOMERS table on the CUSTOMER_ID field to retrieve the customer name.
It filters the results to include only transactions that occurred in 2023.
It orders the results by transaction date."
154,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"I need to retrieve the names of all customers who have made transactions in the last 30 days and also have an investment portfolio balance greater than $10,000.","CREATE TABLE Customers (  CustomerID INT PRIMARY KEY,  Name VARCHAR(255) NOT NULL,  Email VARCHAR(255) UNIQUE,  PhoneNumber VARCHAR(20) );
CREATE TABLE Transactions (  TransactionID INT PRIMARY KEY,  CustomerID INT REFERENCES Customers(CustomerID),  Amount DECIMAL(10,2) NOT NULL,  TransactionDate DATE NOT NULL );
CREATE TABLE InvestmentPortfolios (  PortfolioID INT PRIMARY KEY,  CustomerID INT REFERENCES Customers(CustomerID),  Balance DECIMAL(10,2) NOT NULL );","SELECT c.Name
FROM Customers c
JOIN Transactions t ON c.CustomerID = t.CustomerID
JOIN InvestmentPortfolios ip ON c.CustomerID = ip.CustomerID
WHERE t.TransactionDate >= DATE('now', '-30 days') AND ip.Balance > 10000;","This SQL query retrieves the names of all customers who have made transactions in the last 30 days and also have an investment portfolio balance greater than $10,000. 

The query joins three tables: Customers, Transactions, and InvestmentPortfolios. The Customers table contains customer information, the Transactions table contains transaction information, and the InvestmentPortfolios table contains investment portfolio information. 

The query first filters the Transactions table to only include transactions that occurred in the last 30 days. Then, it joins the Transactions table to the Customers table on the CustomerID field. Finally, it joins the InvestmentPortfolios table to the Customers table on the CustomerID field. 

The query then filters the results to only include customers who have an investment portfolio balance greater than $10,000. The final result is a list of customer names."
155,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",How many orders have been placed by customers in the New York region in the last month?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, region VARCHAR(255));
CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), region VARCHAR(255));
INSERT INTO orders (order_id, customer_id, order_date, region) VALUES (1, 101, '2023-03-01', 'New York'), (2, 102, '2023-03-05', 'California'), (3, 103, '2023-03-10', 'Texas'), (4, 101, '2023-03-15', 'New York'), (5, 104, '2023-03-20', 'Florida');
INSERT INTO customers (customer_id, name, region) VALUES (101, 'John Doe', 'New York'), (102, 'Jane Smith', 'California'), (103, 'David Lee', 'Texas'), (104, 'Mary Brown', 'Florida');","SELECT COUNT(*) FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.region = 'New York' AND o.order_date BETWEEN DATE('now', '-1 month') AND DATE('now');","This query uses an inner join to connect the orders and customers tables on the customer_id column. It then filters the results to include only orders placed by customers in the New York region and within the last month. Finally, it counts the number of orders that meet these criteria."
156,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average order value for customers in the Midwest region?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, region VARCHAR(255), amount DECIMAL(10,2));
CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), region VARCHAR(255));
INSERT INTO orders (order_id, customer_id, order_date, region, amount) VALUES (1, 101, '2023-03-01', 'New York', 100.00), (2, 102, '2023-03-05', 'California', 50.00), (3, 103, '2023-03-10', 'Texas', 75.00), (4, 101, '2023-03-15', 'New York', 150.00), (5, 104, '2023-03-20', 'Florida', 125.00);
INSERT INTO customers (customer_id, name, region) VALUES (101, 'John Doe', 'New York'), (102, 'Jane Smith', 'California'), (103, 'David Lee', 'Texas'), (104, 'Mary Brown', 'Florida');",SELECT AVG(amount) FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.region = 'Midwest';,"This query uses an inner join to connect the orders and customers tables on the customer_id column. It then filters the results to include only orders placed by customers in the Midwest region. Finally, it calculates the average order value for these orders."
157,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What are the top 5 products sold in the month of March?,"CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255));
CREATE TABLE order_items (order_id INT, product_id INT, quantity INT, PRIMARY KEY (order_id, product_id));
INSERT INTO products (product_id, name, category) VALUES (1, 'Shirt', 'Clothing'), (2, 'Laptop', 'Electronics'), (3, 'Book', 'Books'), (4, 'Chair', 'Furniture'), (5, 'Table', 'Furniture');
INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 1, 2), (1, 3, 1), (2, 2, 1), (3, 3, 2), (4, 1, 3), (5, 5, 1);","SELECT p.name, SUM(oi.quantity) AS total_sold FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY p.name ORDER BY total_sold DESC LIMIT 5;","This query uses a series of joins to connect the products, order_items, and orders tables. It then filters the results to include only orders placed in the month of March. It then groups the results by product name and calculates the total quantity sold for each product. Finally, it sorts the results in descending order of total quantity sold and returns the top 5 products."
158,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What is the total revenue generated by each region in the month of March?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, region VARCHAR(255), amount DECIMAL(10,2));
CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), region VARCHAR(255));
INSERT INTO orders (order_id, customer_id, order_date, region, amount) VALUES (1, 101, '2023-03-01', 'New York', 100.00), (2, 102, '2023-03-05', 'California', 50.00), (3, 103, '2023-03-10', 'Texas', 75.00), (4, 101, '2023-03-15', 'New York', 150.00), (5, 104, '2023-03-20', 'Florida', 125.00);
INSERT INTO customers (customer_id, name, region) VALUES (101, 'John Doe', 'New York'), (102, 'Jane Smith', 'California'), (103, 'David Lee', 'Texas'), (104, 'Mary Brown', 'Florida');","SELECT c.region, SUM(o.amount) AS total_revenue FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY c.region;",This query uses an inner join to connect the orders and customers tables on the customer_id column. It then filters the results to include only orders placed in the month of March. It then groups the results by region and calculates the total revenue for each region.
159,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","What was the total cost of fuel for each customer, in ascending order, in the last month?","CREATE TABLE orders (
     order_id INT PRIMARY KEY,
     customer_id INT,
     order_date DATE,
     total_cost DECIMAL(10,2),
     payment_method VARCHAR(255)
 );

CREATE TABLE customers (
     customer_id INT PRIMARY KEY,
     customer_name VARCHAR(255),
     address VARCHAR(255),
     phone_number VARCHAR(255),
     email VARCHAR(255)
 );

CREATE TABLE vehicles (
     vehicle_id INT PRIMARY KEY,
     vehicle_type VARCHAR(255),
     fuel_type VARCHAR(255),
     fuel_efficiency DECIMAL(5,2),
     license_plate VARCHAR(255),
     customer_id INT,
     FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
 );

CREATE TABLE fuel_transactions (
     transaction_id INT PRIMARY KEY,
     vehicle_id INT,
     transaction_date DATE,
     gallons DECIMAL(10,2),
     price_per_gallon DECIMAL(10,2),
     total_cost DECIMAL(10,2),
     FOREIGN KEY (vehicle_id) REFERENCES vehicles(vehicle_id)
 );

INSERT INTO orders (order_id, customer_id, order_date, total_cost, payment_method) VALUES 
(1, 101, '2023-04-01', 150.00, 'credit card'),
(2, 102, '2023-04-02', 200.00, 'cash'),
(3, 103, '2023-04-03', 250.00, 'debit card'),
(4, 101, '2023-04-04', 300.00, 'credit card'),
(5, 102, '2023-04-05', 350.00, 'cash'),
(6, 103, '2023-04-06', 400.00, 'debit card'),
(7, 101, '2023-04-07', 450.00, 'credit card'),
(8, 102, '2023-04-08', 500.00, 'cash'),
(9, 103, '2023-04-09', 550.00, 'debit card'),
(10, 101, '2023-04-10', 600.00, 'credit card');

INSERT INTO customers (customer_id, customer_name, address, phone_number, email) VALUES 
(101, 'John Smith', '123 Main St, Anytown, USA', '555-123-4567', 'john.smith@email.com'),
(102, 'Alice Johnson', '456 Elm St, Anytown, USA', '555-234-5678', 'alice.johnson@email.com'),
(103, 'Bob Williams', '789 Oak St, Anytown, USA', '555-345-6789', 'bob.williams@email.com');

INSERT INTO vehicles (vehicle_id, vehicle_type, fuel_type, fuel_efficiency, license_plate, customer_id) VALUES 
(1, 'Sedan', 'Gasoline', 25.00, 'ABC123', 101),
(2, 'SUV', 'Diesel', 20.00, 'DEF456', 102),
(3, 'Truck', 'Gasoline', 15.00, 'GHI789', 103);

INSERT INTO fuel_transactions (transaction_id, vehicle_id, transaction_date, gallons, price_per_gallon, total_cost) VALUES 
(1, 1, '2023-04-01', 10.00, 4.00, 40.00),
(2, 2, '2023-04-02', 15.00, 3.50, 52.50),
(3, 3, '2023-04-03', 20.00, 3.00, 60.00),
(4, 1, '2023-04-04', 12.00, 4.50, 54.00),
(5, 2, '2023-04-05', 18.00, 3.75, 67.50),
(6, 3, '2023-04-06', 22.00, 3.25, 71.50),
(7, 1, '2023-04-07', 14.00, 5.00, 70.00),
(8, 2, '2023-04-08', 20.00, 4.00, 80.00),
(9, 3, '2023-04-09', 24.00, 3.50, 84.00),
(10, 1, '2023-04-10', 16.00, 5.50, 88.00);","SELECT c.customer_name, SUM(ft.total_cost) AS total_fuel_cost
FROM customers c
JOIN vehicles v ON c.customer_id = v.customer_id
JOIN fuel_transactions ft ON v.vehicle_id = ft.vehicle_id
WHERE ft.transaction_date BETWEEN '2023-04-01' AND '2023-04-30'
GROUP BY c.customer_name
ORDER BY total_fuel_cost ASC;","1. Join the `customers` table to the `vehicles` table on the `customer_id` field.
2. Join the `vehicles` table to the `fuel_transactions` table on the `vehicle_id` field.
3. Filter the `fuel_transactions` table to include only transactions from the last month (April 2023).
4. Group the results by customer name.
5. Calculate the sum of the `total_cost` field in the `fuel_transactions` table for each customer.
6. Sort the results in ascending order by the `total_fuel_cost` field."
160,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average yield of wheat in the United States in the last 5 years?,"CREATE TABLE WheatYields (Year INT, State VARCHAR(255), Yield INT, PRIMARY KEY (Year, State));
INSERT INTO WheatYields (Year, State, Yield) VALUES (2018, 'Kansas', 80), (2018, 'Colorado', 75), (2018, 'Texas', 70), (2019, 'Kansas', 85), (2019, 'Colorado', 80), (2019, 'Texas', 75), (2020, 'Kansas', 90), (2020, 'Colorado', 85), (2020, 'Texas', 80), (2021, 'Kansas', 95), (2021, 'Colorado', 90), (2021, 'Texas', 85), (2022, 'Kansas', 100), (2022, 'Colorado', 95), (2022, 'Texas', 90);",SELECT AVG(Yield) FROM WheatYields WHERE Year >= 2018 AND State = 'Kansas';,"This SQL query calculates the average wheat yield in Kansas for the past 5 years (2018-2022). It achieves this by:
1. Selecting all rows from the WheatYields table where the Year is greater than or equal to 2018 and the State is 'Kansas'.
2. Calculating the average Yield for the selected rows using the AVG() function.
The result is the average wheat yield in Kansas for the past 5 years."
161,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total area planted with corn in Iowa in 2023?,"CREATE TABLE CornPlanting (Year INT, State VARCHAR(255), AreaPlanted INT, PRIMARY KEY (Year, State));
INSERT INTO CornPlanting (Year, State, AreaPlanted) VALUES (2022, 'Iowa', 10000, (2023, 'Iowa', 11000);",SELECT AreaPlanted FROM CornPlanting WHERE Year = 2023 AND State = 'Iowa';,"This SQL query retrieves the total area planted with corn in Iowa in 2023. It achieves this by:
1. Selecting the AreaPlanted column from the CornPlanting table.
2. Filtering the results to include only rows where the Year is 2023 and the State is 'Iowa'.
The result is the total area planted with corn in Iowa in 2023."
162,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many different types of fruits were grown in California in 2023?,"CREATE TABLE fruit_yields (  
 fruit_type VARCHAR(50),  
 state VARCHAR(50),  
 year INT,  
 yield_kg DECIMAL(10,2)  
);  
INSERT INTO fruit_yields (fruit_type, state, year, yield_kg) VALUES  
('Apple', 'California', 2022, 200000),  
('Apple', 'California', 2023, 220000),  
('Orange', 'California', 2022, 150000),  
('Orange', 'California', 2023, 160000),  
('Strawberry', 'California', 2022, 50000),  
('Strawberry', 'California', 2023, 55000),  
('Grapes', 'California', 2022, 100000),  
('Grapes', 'California', 2023, 110000),  
('Apple', 'Washington', 2022, 100000),  
('Apple', 'Washington', 2023, 110000),  
('Cherry', 'Washington', 2022, 50000),  
('Cherry', 'Washington', 2023, 55000),  
('Pear', 'Washington', 2022, 70000),  
('Pear', 'Washington', 2023, 77000);",SELECT COUNT(DISTINCT fruit_type)  FROM fruit_yields  WHERE state = 'California' AND year = 2023;,"This query selects the count of distinct fruit types grown in California in 2023 from the fruit_yields table. The COUNT(DISTINCT fruit_type) function is used to count the number of unique fruit types, and the WHERE clause filters the results to only include records for California and the year 2023."
163,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What was the total yield of apples in the United States in 2022?,"CREATE TABLE fruit_yields (  
 fruit_type VARCHAR(50),  
 state VARCHAR(50),  
 year INT,  
 yield_kg DECIMAL(10,2)  
);  
INSERT INTO fruit_yields (fruit_type, state, year, yield_kg) VALUES  
('Apple', 'California', 2022, 200000),  
('Apple', 'California', 2023, 220000),  
('Orange', 'California', 2022, 150000),  
('Orange', 'California', 2023, 160000),  
('Strawberry', 'California', 2022, 50000),  
('Strawberry', 'California', 2023, 55000),  
('Grapes', 'California', 2022, 100000),  
('Grapes', 'California', 2023, 110000),  
('Apple', 'Washington', 2022, 100000),  
('Apple', 'Washington', 2023, 110000),  
('Cherry', 'Washington', 2022, 50000),  
('Cherry', 'Washington', 2023, 55000),  
('Pear', 'Washington', 2022, 70000),  
('Pear', 'Washington', 2023, 77000);",SELECT SUM(yield_kg)  FROM fruit_yields  WHERE fruit_type = 'Apple' AND year = 2022;,This query calculates the sum of the yield_kg for apples in the United States in 2022 from the fruit_yields table. The WHERE clause filters the results to only include records for apples and the year 2022. The SUM(yield_kg) function adds up the yield_kg values for all the records that meet the filter criteria.
164,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",In which state was the average yield of grapes the highest in 2022?,"CREATE TABLE fruit_yields (  
 fruit_type VARCHAR(50),  
 state VARCHAR(50),  
 year INT,  
 yield_kg DECIMAL(10,2)  
);  
INSERT INTO fruit_yields (fruit_type, state, year, yield_kg) VALUES  
('Apple', 'California', 2022, 200000),  
('Apple', 'California', 2023, 220000),  
('Orange', 'California', 2022, 150000),  
('Orange', 'California', 2023, 160000),  
('Strawberry', 'California', 2022, 50000),  
('Strawberry', 'California', 2023, 55000),  
('Grapes', 'California', 2022, 100000),  
('Grapes', 'California', 2023, 110000),  
('Apple', 'Washington', 2022, 100000),  
('Apple', 'Washington', 2023, 110000),  
('Cherry', 'Washington', 2022, 50000),  
('Cherry', 'Washington', 2023, 55000),  
('Pear', 'Washington', 2022, 70000),  
('Pear', 'Washington', 2023, 77000);",SELECT state  FROM fruit_yields  WHERE fruit_type = 'Grapes' AND year = 2022  GROUP BY state  HAVING AVG(yield_kg) = (SELECT MAX(AVG(yield_kg)) FROM fruit_yields WHERE fruit_type = 'Grapes' AND year = 2022);,"This query finds the state with the highest average yield of grapes in 2022 from the fruit_yields table. It first filters the data to only include records for grapes in 2022, and then calculates the average yield for each state using the GROUP BY and AVG functions. Finally, it selects the state with the最高average yield using a subquery that finds the maximum average yield."
165,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the top 5 courses with the highest average grades in the Fall 2023 semester, excluding courses with fewer than 10 enrolled students?","CREATE TABLE course_enrollment ( 
   student_id INT,
   course_id INT,
   semester VARCHAR(10),
   grade DECIMAL(3,2),
   PRIMARY KEY (student_id, course_id, semester)
);
INSERT INTO course_enrollment (student_id, course_id, semester, grade) VALUES
(1, 101, 'Fall 2023', 3.8),
(2, 101, 'Fall 2023', 4.0),
(3, 101, 'Fall 2023', 3.5),
(4, 102, 'Fall 2023', 2.7),
(5, 102, 'Fall 2023', 3.2),
(6, 103, 'Fall 2023', 4.0),
(7, 103, 'Fall 2023', 3.7),
(8, 104, 'Fall 2023', 2.3),
(9, 104, 'Fall 2023', 1.8),
(10, 105, 'Fall 2023', 3.5),
(11, 105, 'Fall 2023', 3.8),
(12, 106, 'Fall 2023', 4.0),
(13, 106, 'Fall 2023', 2.5),
(14, 107, 'Fall 2023', 3.2),
(15, 107, 'Fall 2023', 3.9);

CREATE TABLE courses (
   course_id INT,
   course_name VARCHAR(50),
   department VARCHAR(30),
   PRIMARY KEY (course_id)
);
INSERT INTO courses (course_id, course_name, department) VALUES
(101, 'Introduction to Programming', 'Computer Science'),
(102, 'Calculus I', 'Mathematics'),
(103, 'General Chemistry', 'Chemistry'),
(104, 'World History', 'History'),
(105, 'Introduction to Literature', 'English'),
(106, 'Microeconomics', 'Economics'),
(107, 'Biology I', 'Biology');

CREATE VIEW course_enrollment_fall_2023 AS
SELECT * FROM course_enrollment
WHERE semester = 'Fall 2023';","SELECT c.course_name, AVG(e.grade) AS average_grade
FROM course_enrollment_fall_2023 e
JOIN courses c ON e.course_id = c.course_id
GROUP BY c.course_id
HAVING COUNT(*) >= 10
ORDER BY average_grade DESC
LIMIT 5;","This query first selects all courses and their average grades from the `course_enrollment_fall_2023` view. Then, it filters out courses with fewer than 10 students enrolled using the `HAVING` clause. Finally, it orders the results by average grade in descending order and selects the top 5 courses."
166,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report comparing the average performance of students in mathematics and science across different genders, ethnicities, and socioeconomic backgrounds.","CREATE TABLE student_demographics (student_id INT PRIMARY KEY, gender VARCHAR(10), ethnicity VARCHAR(25), socioeconomic_status VARCHAR(25));
CREATE TABLE student_performance (student_id INT, subject VARCHAR(25), grade INT, FOREIGN KEY (student_id) REFERENCES student_demographics(student_id));
INSERT INTO student_demographics (student_id, gender, ethnicity, socioeconomic_status) VALUES
(1, 'Male', 'African American', 'Low Income'),
(2, 'Female', 'Asian', 'Middle Income'),
(3, 'Male', 'Hispanic', 'High Income'),
(4, 'Female', 'White', 'Low Income'),
(5, 'Male', 'African American', 'Middle Income');
INSERT INTO student_performance (student_id, subject, grade) VALUES
(1, 'Mathematics', 75),
(1, 'Science', 80),
(2, 'Mathematics', 90),
(2, 'Science', 95),
(3, 'Mathematics', 85),
(3, 'Science', 70),
(4, 'Mathematics', 65),
(4, 'Science', 70),
(5, 'Mathematics', 80),
(5, 'Science', 90);","SELECT s.gender, s.ethnicity, s.socioeconomic_status, AVG(p.grade) AS average_grade
FROM student_demographics s
JOIN student_performance p ON s.student_id = p.student_id
WHERE p.subject IN ('Mathematics', 'Science')
GROUP BY s.gender, s.ethnicity, s.socioeconomic_status;","This SQL query joins the `student_demographics` and `student_performance` tables on the `student_id` field. It then filters the results to only include records where the subject is either 'Mathematics' or 'Science'. The query then groups the results by gender, ethnicity, and socioeconomic status and calculates the average grade for each group."
167,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 10 students with the highest average grades across all subjects.,"CREATE TABLE student_demographics (student_id INT PRIMARY KEY, name VARCHAR(50), gender VARCHAR(10), ethnicity VARCHAR(25), socioeconomic_status VARCHAR(25));
CREATE TABLE student_performance (student_id INT, subject VARCHAR(25), grade INT, FOREIGN KEY (student_id) REFERENCES student_demographics(student_id));
INSERT INTO student_demographics (student_id, name, gender, ethnicity, socioeconomic_status) VALUES
(1, 'Alice Smith', 'Female', 'White', 'Middle Income'),
(2, 'Bob Johnson', 'Male', 'African American', 'Low Income'),
(3, 'Charlie Chen', 'Male', 'Asian', 'High Income'),
(4, 'Diana Garcia', 'Female', 'Hispanic', 'Middle Income'),
(5, 'Emily Williams', 'Female', 'White', 'Low Income'),
(6, 'Frank Davis', 'Male', 'African American', 'Middle Income'),
(7, 'Grace Lee', 'Female', 'Asian', 'High Income'),
(8, 'Henry Rodriguez', 'Male', 'Hispanic', 'Low Income'),
(9, 'Isabella Brown', 'Female', 'White', 'Middle Income'),
(10, 'Jack Wilson', 'Male', 'African American', 'Low Income');
INSERT INTO student_performance (student_id, subject, grade) VALUES
(1, 'Mathematics', 85),
(1, 'Science', 90),
(1, 'English', 95),
(2, 'Mathematics', 70),
(2, 'Science', 80),
(2, 'English', 75),
(3, 'Mathematics', 95),
(3, 'Science', 100),
(3, 'English', 90),
(4, 'Mathematics', 80),
(4, 'Science', 85),
(4, 'English', 90),
(5, 'Mathematics', 65),
(5, 'Science', 70),
(5, 'English', 75),
(6, 'Mathematics', 85),
(6, 'Science', 90),
(6, 'English', 80),
(7, 'Mathematics', 90),
(7, 'Science', 95),
(7, 'English', 100),
(8, 'Mathematics', 75),
(8, 'Science', 80),
(8, 'English', 85),
(9, 'Mathematics', 90),
(9, 'Science', 95),
(9, 'English', 90),
(10, 'Mathematics', 70),
(10, 'Science', 75),
(10, 'English', 80);","SELECT s.student_id, s.name, AVG(p.grade) AS average_grade
FROM student_demographics s
JOIN student_performance p ON s.student_id = p.student_id
GROUP BY s.student_id, s.name
ORDER BY average_grade DESC
LIMIT 10;","This SQL query joins the `student_demographics` and `student_performance` tables on the `student_id` field. It then calculates the average grade for each student across all subjects. Finally, it orders the results by average grade in descending order and limits the output to the top 10 students."
168,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Analyze the relationship between student performance and socioeconomic status.,"CREATE TABLE student_demographics (student_id INT PRIMARY KEY, gender VARCHAR(10), ethnicity VARCHAR(25), socioeconomic_status VARCHAR(25));
CREATE TABLE student_performance (student_id INT, subject VARCHAR(25), grade INT, FOREIGN KEY (student_id) REFERENCES student_demographics(student_id));
INSERT INTO student_demographics (student_id, gender, ethnicity, socioeconomic_status) VALUES
(1, 'Male', 'African American', 'Low Income'),
(2, 'Female', 'Asian', 'Middle Income'),
(3, 'Male', 'Hispanic', 'High Income'),
(4, 'Female', 'White', 'Low Income'),
(5, 'Male', 'African American', 'Middle Income');
INSERT INTO student_performance (student_id, subject, grade) VALUES
(1, 'Mathematics', 75),
(1, 'Science', 80),
(2, 'Mathematics', 90),
(2, 'Science', 95),
(3, 'Mathematics', 85),
(3, 'Science', 70),
(4, 'Mathematics', 65),
(4, 'Science', 70),
(5, 'Mathematics', 80),
(5, 'Science', 90);","SELECT s.socioeconomic_status, AVG(p.grade) AS average_grade
FROM student_demographics s
JOIN student_performance p ON s.student_id = p.student_id
GROUP BY s.socioeconomic_status;",This SQL query joins the `student_demographics` and `student_performance` tables on the `student_id` field. It then groups the results by socioeconomic status and calculates the average grade for each group.
169,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report showing the average class size for each grade level, broken down by subject and school, for the current academic year.","CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255), grade_level INT, school_id INT, FOREIGN KEY (school_id) REFERENCES schools(school_id));
CREATE TABLE classes (class_id INT PRIMARY KEY, class_name VARCHAR(255), subject VARCHAR(255), grade_level INT, school_id INT, FOREIGN KEY (school_id) REFERENCES schools(school_id));
CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT, class_id INT, FOREIGN KEY (student_id) REFERENCES students(student_id), FOREIGN KEY (class_id) REFERENCES classes(class_id));
CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255), location VARCHAR(255));
CREATE TABLE academic_year (year INT PRIMARY KEY);","SELECT s.grade_level, c.subject, s.school_name, COUNT(*) AS class_size
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
JOIN classes c ON e.class_id = c.class_id
JOIN schools sch ON s.school_id = sch.school_id
JOIN academic_year ay ON s.grade_level = ay.year
WHERE ay.year = 2023
GROUP BY s.grade_level, c.subject, s.school_name
ORDER BY s.grade_level, c.subject, s.school_name;","This query retrieves the average class size for each grade level, broken down by subject and school, for the current academic year. It joins the `students`, `enrollments`, `classes`, `schools`, and `academic_year` tables to gather the necessary data. The `WHERE` clause filters the data to include only records for the current academic year (2023). The `GROUP BY` clause groups the data by grade level, subject, and school name. The `COUNT(*)` function calculates the number of students enrolled in each class. The `ORDER BY` clause sorts the results by grade level, subject, and school name."
170,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",I want to see how many customers are in each city.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50));
INSERT INTO customers (customer_id, first_name, last_name, email, city, state, country) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', 'New York', 'NY', 'USA'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', 'Los Angeles', 'CA', 'USA'),
(3, 'Mike', 'Johnson', 'mike.johnson@example.com', 'Chicago', 'IL', 'USA'),
(4, 'Mary', 'Williams', 'mary.williams@example.com', 'Houston', 'TX', 'USA'),
(5, 'David', 'Brown', 'david.brown@example.com', 'Phoenix', 'AZ', 'USA'),
(6, 'Linda', 'Miller', 'linda.miller@example.com', 'Philadelphia', 'PA', 'USA'),
(7, 'Christopher', 'Davis', 'christopher.davis@example.com', 'San Antonio', 'TX', 'USA'),
(8, 'Angela', 'Wilson', 'angela.wilson@example.com', 'San Diego', 'CA', 'USA'),
(9, 'Eric', 'Moore', 'eric.moore@example.com', 'Dallas', 'TX', 'USA'),
(10, 'Sarah', 'Taylor', 'sarah.taylor@example.com', 'San Jose', 'CA', 'USA');

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, order_total DECIMAL(10,2));
INSERT INTO orders (order_id, customer_id, order_date, order_total) VALUES
(1, 1, '2023-01-01', 100.00),
(2, 2, '2023-01-02', 50.00),
(3, 3, '2023-01-03', 75.00),
(4, 4, '2023-01-04', 125.00),
(5, 5, '2023-01-05', 200.00),
(6, 6, '2023-01-06', 150.00),
(7, 7, '2023-01-07', 175.00),
(8, 8, '2023-01-08', 100.00),
(9, 9, '2023-01-09', 250.00),
(10, 10, '2023-01-10', 300.00);","SELECT city, COUNT(*) AS customer_count
FROM customers
GROUP BY city
ORDER BY customer_count DESC;","This query first selects the city and counts the number of customers in each city using the `COUNT(*)` function and aliases it as `customer_count`. Then, it groups the results by city using the `GROUP BY` clause. Finally, it orders the results in descending order of customer count using the `ORDER BY` clause."
171,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total revenue for each product category?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(100), product_category VARCHAR(50), price DECIMAL(10,2));
INSERT INTO products (product_id, product_name, product_category, price) VALUES
(1, 'T-Shirt', 'Clothing', 20.00),
(2, 'Jeans', 'Clothing', 50.00),
(3, 'Sneakers', 'Footwear', 75.00),
(4, 'Laptop', 'Electronics', 1000.00),
(5, 'Tablet', 'Electronics', 500.00),
(6, 'Smartphone', 'Electronics', 800.00),
(7, 'Coffee Maker', 'Appliances', 100.00),
(8, 'Microwave', 'Appliances', 150.00),
(9, 'Refrigerator', 'Appliances', 1000.00),
(10, 'Sofa', 'Furniture', 500.00);

CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES orders(order_id), product_id INT REFERENCES products(product_id), quantity INT, price DECIMAL(10,2));
INSERT INTO order_items (order_item_id, order_id, product_id, quantity, price) VALUES
(1, 1, 1, 2, 40.00),
(2, 1, 3, 1, 75.00),
(3, 2, 2, 1, 50.00),
(4, 2, 7, 1, 100.00),
(5, 3, 4, 1, 1000.00),
(6, 3, 8, 1, 150.00),
(7, 4, 5, 1, 500.00),
(8, 4, 6, 1, 800.00),
(9, 5, 1, 3, 60.00),
(10, 5, 9, 1, 1000.00);","SELECT product_category, SUM(quantity * price) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY product_category
ORDER BY total_revenue DESC;","This query first joins the `order_items` and `products` tables on the `product_id` column. Then, it calculates the total revenue for each product category by multiplying the quantity and price for each order item and summing the results for each category. Finally, it groups the results by product category and orders them in descending order of total revenue."
172,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many unique customers have purchased from the store in the past month?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode VARCHAR(255), country VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, order_total DECIMAL(10,2));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE order_items (order_id INT REFERENCES orders(order_id), product_id INT REFERENCES products(product_id), quantity INT, price DECIMAL(10,2));
INSERT INTO customers (customer_id, customer_name, email, phone_number, address, city, state, zipcode, country) VALUES
(1, 'John Smith', 'john.smith@emailworld.com', '555-123-4567', '123 Main Street', 'Anytown', 'CA', '91234', 'USA'),
(2, 'Alice Johnson', 'alice.johnson@emailworld.com', '555-234-5678', '456 Oak Avenue', 'Anytown', 'CA', '91234', 'USA'),
(3, 'Bob Williams', 'bob.williams@emailworld.com', '555-345-6789', '789 Pine Street', 'Anytown', 'CA', '91234', 'USA');
INSERT INTO orders (order_id, customer_id, order_date, order_total) VALUES
(1, 1, '2023-03-01', 100.00),
(2, 2, '2023-03-05', 50.00),
(3, 1, '2023-03-10', 75.00),
(4, 3, '2023-03-15', 25.00),
(5, 2, '2023-03-20', 150.00),
(6, 1, '2023-03-25', 125.00),
(7, 3, '2023-03-30', 100.00);
INSERT INTO products (product_id, product_name, price, category) VALUES
(1, 'Shirt', 20.00, 'Clothing'),
(2, 'Pants', 30.00, 'Clothing'),
(3, 'Hat', 15.00, 'Accessories'),
(4, 'Shoes', 50.00, 'Footwear'),
(5, 'Book', 10.00, 'Books');
INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 2, 40.00),
(1, 2, 1, 30.00),
(2, 3, 1, 15.00),
(3, 1, 1, 20.00),
(3, 2, 2, 60.00),
(4, 4, 1, 50.00),
(5, 1, 3, 60.00),
(5, 5, 2, 20.00),
(6, 2, 1, 30.00),
(6, 3, 2, 30.00),
(7, 4, 2, 100.00);","SELECT COUNT(DISTINCT customer_id) FROM orders WHERE order_date >= DATE('now', '-1 month');","This SQL query selects the count of distinct customer IDs from the orders table where the order date is within the past month. The DATE('now', '-1 month') function calculates the date one month ago from the current date. The COUNT(DISTINCT customer_id) function counts the number of unique customer IDs in the result set."
173,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Can you show me all of the orders that were placed on January 1st, 2023?","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2));
INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 101, '2023-01-01', 50.00),
(2, 102, '2023-01-02', 75.00),
(3, 103, '2023-01-03', 100.00),
(4, 104, '2023-01-04', 125.00),
(5, 105, '2023-01-05', 150.00);",SELECT * FROM orders WHERE order_date = '2023-01-01';,This query selects all rows from the orders table where the order_date column is equal to '2023-01-01'.
174,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total amount of all orders placed by customer with ID 101?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2));
INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 101, '2023-01-01', 50.00),
(2, 102, '2023-01-02', 75.00),
(3, 103, '2023-01-03', 100.00),
(4, 104, '2023-01-04', 125.00),
(5, 105, '2023-01-05', 150.00);",SELECT SUM(total_amount) FROM orders WHERE customer_id = 101;,This query calculates the sum of the total_amount column for all rows in the orders table where the customer_id column is equal to 101.
175,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","Find the top 5 cities with the highest average listing price for properties listed in the last 3 months, and calculate the percentage change in average listing price compared to the same period last year.","CREATE TABLE listings (  listing_id INT PRIMARY KEY,  address VARCHAR(255) NOT NULL,  city VARCHAR(255) NOT NULL,  state VARCHAR(255) NOT NULL,  zip_code INT NOT NULL,  property_type VARCHAR(255) NOT NULL,  bedrooms INT,  bathrooms FLOAT,  square_footage INT,  listing_price DECIMAL(10,2) NOT NULL,  listing_date DATE NOT NULL);  INSERT INTO listings (listing_id, address, city, state, zip_code, property_type, bedrooms, bathrooms, square_footage, listing_price, listing_date) VALUES  (1, '123 Main St', 'Los Angeles', 'CA', 90012, 'Single Family', 3, 2.5, 1800, 1200000.00, '2023-03-08'),  (2, '456 Oak Ave', 'San Francisco', 'CA', 94102, 'Condo', 2, 1.5, 1200, 850000.00, '2023-03-15'),  (3, '789 Elm St', 'New York', 'NY', 10013, 'Townhouse', 4, 3.5, 2500, 1500000.00, '2023-03-22'),  (4, '1011 Pine St', 'Seattle', 'WA', 98101, 'Single Family', 3, 2, 1600, 950000.00, '2023-03-01'),  (5, '1213 Willow St', 'Miami', 'FL', 33133, 'Condo', 2, 1, 1000, 550000.00, '2023-03-09'),  (6, '1415 Maple St', 'Chicago', 'IL', 60611, 'Apartment', 1, 1, 750, 350000.00, '2023-03-16'),  (7, '1617 Birch St', 'Dallas', 'TX', 75201, 'Single Family', 4, 2.5, 2000, 1100000.00, '2023-03-23'),  (8, '1819 Oak St', 'Phoenix', 'AZ', 85004, 'Condo', 2, 2, 1400, 650000.00, '2023-03-02'),  (9, '2021 Pine St', 'Houston', 'TX', 77002, 'Apartment', 1, 1, 800, 400000.00, '2023-03-10'),  (10, '2223 Willow St', 'Philadelphia', 'PA', 19103, 'Townhouse', 3, 2.5, 1900, 800000.00, '2023-03-17'),  (11, '2425 Maple St', 'San Antonio', 'TX', 78205, 'Apartment', 1, 1, 650, 300000.00, '2023-03-24'),  (12, '2627 Birch St', 'San Diego', 'CA', 92101, 'Condo', 2, 1.5, 1300, 700000.00, '2023-03-03'),  (13, '2829 Oak St', 'Charlotte', 'NC', 28202, 'Townhouse', 3, 2, 1700, 650000.00, '2023-03-11'),  (14, '3031 Pine St', 'Denver', 'CO', 80202, 'Apartment', 1, 1, 700, 450000.00, '2023-03-18'),  (15, '3233 Willow St', 'Indianapolis', 'IN', 46204, 'Single Family', 3, 1.5, 1500, 550000.00, '2023-03-25');","WITH MonthlyAveragePrices AS (  SELECT    city,    YEAR(listing_date) AS listing_year,    MONTH(listing_date) AS listing_month,    AVG(listing_price) AS average_price  FROM    listings  WHERE    listing_date BETWEEN DATE('now', '-3 months') AND DATE('now')  GROUP BY    city,    listing_year,    listing_month), YearlyAveragePrices AS (  SELECT    city,    YEAR(listing_date) AS listing_year,    MONTH(listing_date) AS listing_month,    AVG(listing_price) AS average_price  FROM    listings  WHERE    listing_date BETWEEN DATE('now', '-1 year', '-3 months') AND DATE('now', '-1 year')  GROUP BY    city,    listing_year,    listing_month)SELECT    city,    MonthlyAveragePrices.average_price AS current_average_price,    YearlyAveragePrices.average_price AS previous_average_price,    (MonthlyAveragePrices.average_price - YearlyAveragePrices.average_price) / YearlyAveragePrices.average_price * 100 AS percentage_change  FROM    MonthlyAveragePrices  JOIN    YearlyAveragePrices    ON MonthlyAveragePrices.city = YearlyAveragePrices.city    AND MonthlyAveragePrices.listing_year = YearlyAveragePrices.listing_year    AND MonthlyAveragePrices.listing_month = YearlyAveragePrices.listing_monthORDER BY    percentage_change DESCLIMIT 5;","1. Create a CTE called `MonthlyAveragePrices` that calculates the average listing price for each city for the past 3 months.
2. Create a CTE called `YearlyAveragePrices` that calculates the average listing price for each city for the same period last year.
3. Join the two CTEs on city, listing year, and listing month.
4. Calculate the percentage change in average listing price by subtracting the previous year's average price from the current year's average price and dividing by the previous year's average price.
5. Order the results by percentage change in descending order and limit to the top 5 cities."
176,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records",Which properties in the city of Denver have sold for more than $1 million in the past year?,"CREATE TABLE Properties (  PropertyID INT PRIMARY KEY,  Address VARCHAR(255) NOT NULL,  City VARCHAR(255) NOT NULL,  State VARCHAR(255) NOT NULL,  Zipcode INT NOT NULL,  Price DECIMAL(10,2) NOT NULL,  SaleDate DATE NOT NULL,  PropertyType VARCHAR(255) NOT NULL,  Bedrooms INT NOT NULL,  Bathrooms DECIMAL(4,2) NOT NULL,  SquareFootage INT NOT NULL);  CREATE TABLE Cities (  CityID INT PRIMARY KEY,  CityName VARCHAR(255) NOT NULL,  State VARCHAR(255) NOT NULL);  INSERT INTO Properties (PropertyID, Address, City, State, Zipcode, Price, SaleDate, PropertyType, Bedrooms, Bathrooms, SquareFootage) VALUES  (1, '123 Main St', 'Denver', 'CO', 80202, 1200000, '2023-03-08', 'Single Family Home', 3, 2.5, 2500),  (2, '456 Elm St', 'Denver', 'CO', 80204, 950000, '2023-04-15', 'Condominium', 2, 1.5, 1500),  (3, '789 Oak St', 'Boulder', 'CO', 80301, 750000, '2023-05-22', 'Townhouse', 3, 2, 1800),  (4, '1011 Pine St', 'Denver', 'CO', 80205, 1500000, '2023-06-09', 'Single Family Home', 4, 3, 3000);  CREATE TABLE SalesHistory (  SaleID INT PRIMARY KEY,  PropertyID INT NOT NULL,  SalePrice DECIMAL(10,2) NOT NULL,  SaleDate DATE NOT NULL,  FOREIGN KEY (PropertyID) REFERENCES Properties(PropertyID));  INSERT INTO SalesHistory (SaleID, PropertyID, SalePrice, SaleDate) VALUES  (1, 1, 1200000, '2023-03-08'),  (2, 2, 950000, '2023-04-15'),  (3, 3, 750000, '2023-05-22'),  (4, 4, 1500000, '2023-06-09');","SELECT p.Address, p.Price, p.SaleDate  FROM Properties p  JOIN Cities c ON p.City = c.CityName  WHERE c.CityName = 'Denver'  AND p.SaleDate >= DATEADD(YEAR, -1, GETDATE())  AND p.Price > 1000000;  SELECT Address, Price, SaleDate FROM Properties WHERE City = 'Denver' AND SaleDate >= DATEADD(YEAR, -1, GETDATE()) AND Price > 1000000;","This SQL query selects the address, price, and sale date of properties in Denver that have sold for more than $1 million in the past year.  The first step is to join the Properties table with the Cities table on the City column. This allows us to filter the results by city.  The WHERE clause filters the results to include only properties in Denver that have sold in the past year and have a sale price greater than $1 million.  The final step is to select the address, price, and sale date columns from the Properties table."
177,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","In a large city, identify real estate listings with prices above the city-wide median and include the number of listings per price range.","CREATE TABLE listings ( 
   listing_id INT PRIMARY KEY, 
   city VARCHAR(255), 
   price INT, 
   property_type VARCHAR(255), 
   bedrooms INT, 
   bathrooms INT, 
   square_footage INT 
);","WITH MedianPrices AS ( 
   SELECT city, percentile_cont(0.5) WITHIN GROUP (ORDER BY price) AS median_price 
   FROM listings 
   GROUP BY city 
), 
RankedPrices AS ( 
   SELECT city, listing_id, price, 
   ROW_NUMBER() OVER (PARTITION BY city ORDER BY price DESC) AS rank 
   FROM listings 
), 
PriceRanges AS ( 
   SELECT city, listing_id, price, rank, 
   CASE 
     WHEN price < median_price 
     THEN 'Below Median' 
     WHEN price BETWEEN median_price AND median_price * 1.25 
     THEN '125% of Median' 
     WHEN price BETWEEN median_price * 1.25 AND median_price * 1.5 
     THEN '150% of Median' 
     ELSE 'Above 150% of Median' 
   END AS price_range 
   FROM RankedPrices 
   JOIN MedianPrices ON RankedPrices.city = MedianPrices.city 
) 
SELECT city, price_range, COUNT(*) AS listings_count 
FROM PriceRanges 
GROUP BY city, price_range 
ORDER BY city, price_range;","1. Calculate the city-wide median price using `percentile_cont(0.5)` within a `GROUP BY` clause on the `listings` table.
2. Rank listings in each city by price in descending order using `ROW_NUMBER()` with a `PARTITION BY` clause.
3. Create price ranges based on the median price and categorize listings accordingly.
4. Count listings within each city and price range using `COUNT(*)` and group the results.
5. Order the results by city and price range for clarity."
178,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","For every property type, determine the average price and the average square footage in each state in the US.","CREATE TABLE listings ( 
   listing_id INT PRIMARY KEY, 
   city VARCHAR(255), 
   state VARCHAR(255), 
   price INT, 
   property_type VARCHAR(255), 
   bedrooms INT, 
   bathrooms INT, 
   square_footage INT 
);","SELECT state, property_type, AVG(price) AS average_price, AVG(square_footage) AS average_square_footage 
FROM listings 
GROUP BY state, property_type 
ORDER BY state, property_type;","1. Calculate the average price and average square footage for each property type in each state using `AVG()`.
2. Group the results by state and property type.
3. Order the results by state and property type for clarity."
179,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records",Identify all listings that have been on the market for longer than 60 days and have had more than 3 price reductions.,"CREATE TABLE listings ( 
   listing_id INT PRIMARY KEY, 
   city VARCHAR(255), 
   state VARCHAR(255), 
   price INT, 
   property_type VARCHAR(255), 
   bedrooms INT, 
   bathrooms INT, 
   square_footage INT, 
   list_date DATE 
);","SELECT listing_id 
FROM listings 
WHERE DATEDIFF(CURRENT_DATE(), list_date) > 60 
   AND price < LAG(price, 3, price) OVER (PARTITION BY listing_id ORDER BY list_date);","1. Calculate the number of days a listing has been on the market using `DATEDIFF(CURRENT_DATE(), list_date)`. 
2. Use `LAG()` to compare the current price to the price 3 listings prior for each listing_id, ordered by list_date.
3. Identify listings where the price difference is negative (price reduction) and the number of days on the market is greater than 60."
180,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","How many unique users have purchased a product in the last 30 days, broken down by country and region?","CREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT, product_id INT, order_date DATE, country VARCHAR(255), region VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255));
CREATE TABLE users (user_id INT PRIMARY KEY, user_name VARCHAR(255));
INSERT INTO orders (order_id, user_id, product_id, order_date, country, region) VALUES
(1, 101, 201, '2023-04-01', 'United States', 'West'),
(2, 102, 202, '2023-04-02', 'Canada', 'East'),
(3, 103, 203, '2023-04-03', 'Mexico', 'South'),
(4, 104, 204, '2023-04-04', 'United States', 'Midwest'),
(5, 105, 205, '2023-04-05', 'Brazil', 'South America'),
(6, 101, 206, '2023-04-06', 'United States', 'West'),
(7, 102, 207, '2023-04-07', 'Canada', 'East'),
(8, 108, 208, '2023-04-08', 'Mexico', 'South'),
(9, 109, 209, '2023-04-09', 'United States', 'Midwest'),
(10, 110, 210, '2023-04-10', 'Brazil', 'South America'),
(11, 101, 211, '2023-04-11', 'United States', 'West'),
(12, 102, 212, '2023-04-12', 'Canada', 'East'),
(13, 113, 213, '2023-04-13', 'Mexico', 'South'),
(14, 114, 214, '2023-04-14', 'United States', 'Midwest'),
(15, 115, 215, '2023-04-15', 'Brazil', 'South America'),
(16, 101, 216, '2023-04-16', 'United States', 'West'),
(17, 102, 217, '2023-04-17', 'Canada', 'East'),
(18, 118, 218, '2023-04-18', 'Mexico', 'South'),
(19, 119, 219, '2023-04-19', 'United States', 'Midwest'),
(20, 120, 220, '2023-04-20', 'Brazil', 'South America'),
(21, 101, 221, '2023-04-21', 'United States', 'West'),
(22, 102, 222, '2023-04-22', 'Canada', 'East'),
(23, 123, 223, '2023-04-23', 'Mexico', 'South'),
(24, 124, 224, '2023-04-24', 'United States', 'Midwest'),
(25, 125, 225, '2023-04-25', 'Brazil', 'South America'),
(26, 101, 226, '2023-04-26', 'United States', 'West'),
(27, 102, 227, '2023-04-27', 'Canada', 'East'),
(28, 128, 228, '2023-04-28', 'Mexico', 'South'),
(29, 129, 229, '2023-04-29', 'United States', 'Midwest'),
(30, 130, 230, '2023-04-30', 'Brazil', 'South America');","SELECT country, region, COUNT(DISTINCT user_id) AS unique_users
FROM orders
WHERE order_date >= DATE('now', '-30 days')
GROUP BY country, region
ORDER BY country, region;","This query calculates the number of unique users who have purchased a product in the last 30 days, broken down by country and region. 

It uses the following steps:

1. Filters the `orders` table to only include orders placed in the last 30 days.
2. Groups the results by country and region.
3. Counts the distinct number of users in each group.
4. Orders the results by country and region."
181,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the top 10 most frequently purchased products in the last 3 months, ranked by the number of units sold, along with their corresponding total revenue?","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, price DECIMAL(10,2) NOT NULL);
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE NOT NULL, status VARCHAR(255) NOT NULL);
CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES orders(order_id), product_id INT REFERENCES products(product_id), quantity INT NOT NULL);
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, country VARCHAR(255) NOT NULL);
INSERT INTO products (product_id, product_name, price) VALUES (1, 'Laptop', 1299.99), (2, 'Mouse', 29.99), (3, 'Keyboard', 79.99), (4, 'Monitor', 249.99), (5, 'Headset', 99.99), (6, 'Webcam', 49.99), (7, 'Printer', 199.99), (8, 'External Hard Drive', 99.99), (9, 'USB Flash Drive', 19.99), (10, 'Software', 99.99);
INSERT INTO orders (order_id, customer_id, order_date, status) VALUES (1, 1, '2023-01-01', 'Shipped'), (2, 2, '2023-01-05', 'Shipped'), (3, 3, '2023-01-10', 'Shipped'), (4, 1, '2023-01-15', 'Shipped'), (5, 2, '2023-01-20', 'Shipped'), (6, 3, '2023-01-25', 'Shipped'), (7, 1, '2023-02-01', 'Shipped'), (8, 2, '2023-02-05', 'Shipped'), (9, 3, '2023-02-10', 'Shipped'), (10, 1, '2023-02-15', 'Shipped'), (11, 2, '2023-02-20', 'Shipped'), (12, 3, '2023-02-25', 'Shipped'), (13, 1, '2023-03-01', 'Shipped'), (14, 2, '2023-03-05', 'Shipped'), (15, 3, '2023-03-10', 'Shipped'), (16, 1, '2023-03-15', 'Shipped'), (17, 2, '2023-03-20', 'Shipped'), (18, 3, '2023-03-25', 'Shipped');
INSERT INTO order_items (order_item_id, order_id, product_id, quantity) VALUES (1, 1, 1, 1), (2, 1, 2, 2), (3, 2, 3, 1), (4, 2, 5, 1), (5, 3, 4, 1), (6, 3, 6, 1), (7, 4, 1, 2), (8, 4, 7, 1), (9, 5, 2, 3), (10, 5, 8, 1), (11, 6, 3, 2), (12, 6, 9, 1), (13, 7, 4, 1), (14, 7, 10, 1), (15, 8, 1, 3), (16, 8, 5, 2), (17, 9, 2, 1), (18, 9, 6, 2), (19, 10, 3, 1), (20, 10, 7, 2), (21, 11, 1, 1), (22, 11, 8, 1), (23, 12, 2, 2), (24, 12, 9, 2), (25, 13, 3, 3), (26, 13, 10, 1), (27, 14, 1, 2), (28, 14, 4, 1), (29, 15, 2, 1), (30, 15, 5, 3), (31, 16, 3, 2), (32, 16, 6, 1), (33, 17, 1, 1), (34, 17, 7, 1), (35, 18, 2, 3), (36, 18, 8, 1);","WITH MonthlySales AS (
    SELECT
        DATE_TRUNC('month', order_date) AS month,
        product_id,
        SUM(quantity) AS units_sold,
        SUM(quantity * price) AS total_revenue
    FROM orders
    JOIN order_items ON orders.order_id = order_items.order_id
    JOIN products ON order_items.product_id = products.product_id
    WHERE order_date >= DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH)
    GROUP BY 1, 2
),
RankedSales AS (
    SELECT
        month,
        product_id,
        units_sold,
        total_revenue,
        RANK() OVER (PARTITION BY month ORDER BY units_sold DESC) AS sales_rank
    FROM MonthlySales
)
SELECT
    month,
    product_id,
    product_name,
    units_sold,
    total_revenue,
    sales_rank
FROM RankedSales
JOIN products ON RankedSales.product_id = products.product_id
WHERE sales_rank <= 10
ORDER BY month, sales_rank;","1. Create a CTE (Common Table Expression) called `MonthlySales` to calculate the monthly sales for each product, including the total units sold and total revenue.
2. Create another CTE called `RankedSales` to rank the products within each month based on the number of units sold in descending order.
3. Join the `RankedSales` CTE with the `products` table to get the product names.
4. Filter the results to only include the top 10 products based on the sales rank within each month.
5. Order the results by month and sales rank."
182,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the average time it takes for a customer support ticket to be resolved, broken down by product category, for the past month, excluding weekends and holidays?","CREATE TABLE customer_support_tickets (ticket_id INT PRIMARY KEY, product_category VARCHAR(255), created_at DATETIME, resolved_at DATETIME, status VARCHAR(255));
CREATE TABLE holidays (holiday_date DATE PRIMARY KEY);","WITH RankedTickets AS (
    SELECT
        ticket_id,
        product_category,
        created_at,
        resolved_at,
        status,
        ROW_NUMBER() OVER (PARTITION BY product_category ORDER BY created_at) AS row_num
    FROM customer_support_tickets
    WHERE status = 'Resolved'
    AND created_at >= DATEADD(month, -1, GETDATE())
    AND NOT CAST(created_at AS DATE) IN (SELECT holiday_date FROM holidays)
),
AvgResolutionTime AS (
    SELECT
        product_category,
        AVG(DATEDIFF(hour, created_at, resolved_at)) AS avg_resolution_time
    FROM RankedTickets
    WHERE row_num = 1
    GROUP BY product_category
)
SELECT
    art.product_category,
    art.avg_resolution_time
FROM AvgResolutionTime art
ORDER BY art.avg_resolution_time DESC;","1. **Create a RankedTickets CTE:**
    - Selects all 'Resolved' tickets from the last month, excluding weekends and holidays.
    - Assigns a row number to each ticket within each product category based on creation time.
2. **Create an AvgResolutionTime CTE:**
    - Calculates the average resolution time (in hours) for the first resolved ticket (row_num = 1) in each product category.
3. **Final SELECT Statement:**
    - Joins the CTEs to retrieve the product category and average resolution time.
    - Orders the results in descending order of average resolution time."
183,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show me the top 5 customers with the highest total order amount in the last quarter, along with their average order value and number of orders placed.","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, order_amount DECIMAL(10,2));","WITH CustomerOrders AS (
    SELECT
        c.customer_name,
        o.order_id,
        o.order_date,
        o.order_amount
    FROM customers c
    JOIN orders o ON c.customer_id = o.customer_id
    WHERE o.order_date >= DATEADD(quarter, -1, GETDATE())
),
CustomerSummary AS (
    SELECT
        customer_name,
        COUNT(order_id) AS total_orders,
        SUM(order_amount) AS total_order_amount,
        AVG(order_amount) AS avg_order_value
    FROM CustomerOrders
    GROUP BY customer_name
)
SELECT
    customer_name,
    total_orders,
    total_order_amount,
    avg_order_value
FROM CustomerSummary
ORDER BY total_order_amount DESC
LIMIT 5;","1. **Create a CustomerOrders CTE:**
    - Joins the 'customers' and 'orders' tables to retrieve customer information and orders placed in the last quarter.
2. **Create a CustomerSummary CTE:**
    - Groups orders by customer name and calculates total orders, total order amount, and average order value.
3. **Final SELECT Statement:**
    - Selects the customer name, total orders, total order amount, and average order value.
    - Orders the results in descending order of total order amount.
    - Limits the output to the top 5 customers."
184,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 products with the highest number of security vulnerabilities discovered in the past year, along with the total number of vulnerabilities and the average time to resolution.","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255));
CREATE TABLE vulnerabilities (vulnerability_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), discovered_at DATETIME, resolved_at DATETIME, severity VARCHAR(255));","WITH ProductVulnerabilities AS (
    SELECT
        p.product_name,
        v.vulnerability_id,
        v.discovered_at,
        v.resolved_at,
        v.severity
    FROM products p
    JOIN vulnerabilities v ON p.product_id = v.product_id
    WHERE v.discovered_at >= DATEADD(year, -1, GETDATE())
),
VulnerabilitySummary AS (
    SELECT
        product_name,
        COUNT(vulnerability_id) AS total_vulnerabilities,
        AVG(DATEDIFF(hour, discovered_at, resolved_at)) AS avg_resolution_time
    FROM ProductVulnerabilities
    GROUP BY product_name
)
SELECT
    product_name,
    total_vulnerabilities,
    avg_resolution_time
FROM VulnerabilitySummary
ORDER BY total_vulnerabilities DESC
LIMIT 3;","1. **Create a ProductVulnerabilities CTE:**
    - Joins the 'products' and 'vulnerabilities' tables to retrieve product information and vulnerabilities discovered in the past year.
2. **Create a VulnerabilitySummary CTE:**
    - Groups vulnerabilities by product name and calculates the total number of vulnerabilities and average time to resolution.
3. **Final SELECT Statement:**
    - Selects the product name, total vulnerabilities, and average resolution time.
    - Orders the results in descending order of total vulnerabilities.
    - Limits the output to the top 3 products."
185,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",How many products were sold in the first quarter of 2023?,"CREATE TABLE Products (ProductId INT PRIMARY KEY,ProductName VARCHAR(255),ReleaseDate DATE,Price DECIMAL(10,2));
CREATE TABLE Sales (SaleId INT PRIMARY KEY,ProductId INT,SaleDate DATE,Quantity INT,Price DECIMAL(10,2),FOREIGN KEY (ProductId) REFERENCES Products(ProductId));
INSERT INTO Products (ProductId,ProductName,ReleaseDate,Price) VALUES (1,'Product A','2023-01-15',10.00),(2,'Product B','2023-02-01',15.00),(3,'Product C','2023-03-10',20.00);
INSERT INTO Sales (SaleId,ProductId,SaleDate,Quantity,Price) VALUES (1,1,'2023-01-20',5,50.00),(2,2,'2023-02-05',10,150.00),(3,3,'2023-03-15',2,40.00);",SELECT COUNT(*) FROM Sales WHERE SaleDate BETWEEN '2023-01-01' AND '2023-03-31';,"This SQL query selects the count of all sales records from the Sales table where the SaleDate column falls between January 1st, 2023 and March 31st, 2023. This provides the total number of products sold during the first quarter of 2023."
186,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Which countries have the most users?,"CREATE TABLE Users (UserId INT PRIMARY KEY,UserName VARCHAR(255),Country VARCHAR(255));
CREATE TABLE Orders (OrderId INT PRIMARY KEY,UserId INT,OrderDate DATE,Amount DECIMAL(10,2),FOREIGN KEY (UserId) REFERENCES Users(UserId));
INSERT INTO Users (UserId,UserName,Country) VALUES (1,'John Doe','United States'),(2,'Jane Smith','Canada'),(3,'Alice Johnson','United Kingdom'),(4,'Bob Williams','Australia'),(5,'Emily Brown','Germany');
INSERT INTO Orders (OrderId,UserId,OrderDate,Amount) VALUES (1,1,'2023-01-15',100.00),(2,2,'2023-02-01',50.00),(3,3,'2023-03-10',75.00),(4,4,'2023-04-01',125.00),(5,5,'2023-05-15',200.00);","SELECT Country, COUNT(*) AS UserCount FROM Users GROUP BY Country ORDER BY UserCount DESC;","This SQL query groups users by their country and counts the number of users in each country. The results are then ordered in descending order based on the user count, showing the countries with the most users at the top."
187,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the average order amount for each product category?,"CREATE TABLE Products (ProductId INT PRIMARY KEY,ProductName VARCHAR(255),Category VARCHAR(255));
CREATE TABLE Orders (OrderId INT PRIMARY KEY,ProductId INT,OrderDate DATE,Amount DECIMAL(10,2),FOREIGN KEY (ProductId) REFERENCES Products(ProductId));
INSERT INTO Products (ProductId,ProductName,Category) VALUES (1,'Product A','Electronics'),(2,'Product B','Clothing'),(3,'Product C','Homeware');
INSERT INTO Orders (OrderId,ProductId,OrderDate,Amount) VALUES (1,1,'2023-01-15',100.00),(2,2,'2023-02-01',50.00),(3,1,'2023-03-10',75.00),(4,3,'2023-04-01',125.00),(5,2,'2023-05-15',200.00);","SELECT p.Category, AVG(o.Amount) AS AverageOrderAmount FROM Products p JOIN Orders o ON p.ProductId = o.ProductId GROUP BY p.Category;",This SQL query joins the Products and Orders tables on the ProductId column. It then calculates the average order amount for each product category by grouping the results by the Category column and using the AVG function on the Amount column.
188,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What were the top 5 selling products in March 2023?,"CREATE TABLE Products (ProductId INT PRIMARY KEY,ProductName VARCHAR(255));
CREATE TABLE Sales (SaleId INT PRIMARY KEY,ProductId INT,SaleDate DATE,Quantity INT,Price DECIMAL(10,2),FOREIGN KEY (ProductId) REFERENCES Products(ProductId));
INSERT INTO Products (ProductId,ProductName) VALUES (1,'Product A'),(2,'Product B'),(3,'Product C'),(4,'Product D'),(5,'Product E');
INSERT INTO Sales (SaleId,ProductId,SaleDate,Quantity,Price) VALUES (1,1,'2023-03-01',10,100.00),(2,2,'2023-03-05',5,75.00),(3,3,'2023-03-10',15,150.00),(4,1,'2023-03-15',8,80.00),(5,4,'2023-03-20',12,144.00);","SELECT p.ProductName, SUM(s.Quantity) AS TotalQuantitySold FROM Products p JOIN Sales s ON p.ProductId = s.ProductId WHERE s.SaleDate BETWEEN '2023-03-01' AND '2023-03-31' GROUP BY p.ProductName ORDER BY TotalQuantitySold DESC LIMIT 5;","This SQL query joins the Products and Sales tables on the ProductId column. It then filters the sales records to include only those from March 2023. The results are grouped by product name and the total quantity sold for each product is calculated using the SUM function on the Quantity column. Finally, the results are ordered in descending order based on the total quantity sold and the top 5 products are selected using the LIMIT clause."
189,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the total revenue generated from product sales in the first quarter of 2023?,"CREATE TABLE Products (ProductId INT PRIMARY KEY,ProductName VARCHAR(255),ReleaseDate DATE,Price DECIMAL(10,2));
CREATE TABLE Sales (SaleId INT PRIMARY KEY,ProductId INT,SaleDate DATE,Quantity INT,Price DECIMAL(10,2),FOREIGN KEY (ProductId) REFERENCES Products(ProductId));
INSERT INTO Products (ProductId,ProductName,ReleaseDate,Price) VALUES (1,'Product A','2023-01-15',10.00),(2,'Product B','2023-02-01',15.00),(3,'Product C','2023-03-10',20.00);
INSERT INTO Sales (SaleId,ProductId,SaleDate,Quantity,Price) VALUES (1,1,'2023-01-20',5,50.00),(2,2,'2023-02-05',10,150.00),(3,3,'2023-03-15',2,40.00);",SELECT SUM(s.Quantity * s.Price) AS TotalRevenue FROM Sales s WHERE s.SaleDate BETWEEN '2023-01-01' AND '2023-03-31';,"This SQL query selects the sum of the product of Quantity and Price from the Sales table, where the SaleDate falls between January 1st, 2023 and March 31st, 2023. This gives the total revenue generated from product sales during the first quarter of 2023."
190,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Which properties in the Florida Keys were sold in the last 6 months for more than $1,000,000?","CREATE TABLE florida_keys_properties (  property_id INT PRIMARY KEY,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  property_type VARCHAR(255),  bedrooms INT,  bathrooms INT,  square_feet INT,  lot_size INT,  year_built INT,  listing_price DECIMAL(10,2),  sale_price DECIMAL(10,2),  sale_date DATE);  INSERT INTO florida_keys_properties (property_id, address, city, state, zip_code, property_type, bedrooms, bathrooms, square_feet, lot_size, year_built, listing_price, sale_price, sale_date) VALUES  (1, '123 Ocean Drive', 'Key West', 'FL', 33040, 'Single Family Home', 3, 2, 1500, 7500, 1990, 1200000, 1150000, '2023-03-15'),  (2, '456 Palm Blvd', 'Marathon', 'FL', 33050, 'Condominium', 2, 2, 1200, 5000, 2005, 750000, 725000, '2023-04-01'),  (3, '789 Sunset Rd', 'Islamorada', 'FL', 33036, 'Townhouse', 3, 3, 1800, 6000, 2010, 900000, 875000, '2023-05-10'),  (4, '1011 Bay Harbor Dr', 'Key Largo', 'FL', 33037, 'Single Family Home', 4, 3, 2200, 10000, 2015, 1500000, 1450000, '2023-06-15'),  (5, '1213 Beach Blvd', 'Key West', 'FL', 33040, 'Condominium', 2, 1, 1000, 4000, 1980, 500000, 475000, '2023-02-20');","SELECT * FROM florida_keys_properties WHERE sale_date >= DATE('now', '-6 months') AND sale_price > 1000000 AND state = 'FL';","This SQL query selects all rows from the florida_keys_properties table where the sale_date is within the last 6 months, the sale_price is greater than $1,000,000, and the state is 'FL'."
191,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",How many properties are for sale in the city of Los Angeles?,"CREATE TABLE properties (  property_id INT PRIMARY KEY,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  price INT,  property_type VARCHAR(255),  bedrooms INT,  bathrooms INT,  square_footage INT,  year_built INT,  listing_date DATE);INSERT INTO properties (property_id, address, city, state, zip_code, price, property_type, bedrooms, bathrooms, square_footage, year_built, listing_date) VALUES(1, '123 Main St', 'Los Angeles', 'CA', 90012, 1000000, 'Single Family Home', 3, 2, 1500, 1990, '2023-03-08'),(2, '456 Oak Ave', 'San Francisco', 'CA', 94102, 1500000, 'Condo', 2, 1, 1000, 2000, '2023-03-09'),(3, '789 Pine St', 'Seattle', 'WA', 98101, 800000, 'Townhouse', 3, 2, 1200, 1980, '2023-03-10'),(4, '1011 Elm St', 'Los Angeles', 'CA', 90013, 750000, 'Single Family Home', 2, 1, 1100, 1970, '2023-03-11'),(5, '1213 Willow St', 'San Francisco', 'CA', 94103, 1200000, 'Condo', 1, 1, 700, 2010, '2023-03-12'),(6, '1415 Maple St', 'Seattle', 'WA', 98102, 900000, 'Townhouse', 2, 2, 1300, 1995, '2023-03-13'),(7, '1617 Birch St', 'Los Angeles', 'CA', 90014, 650000, 'Single Family Home', 3, 1, 1000, 1960, '2023-03-14'),(8, '1819 Oak St', 'San Francisco', 'CA', 94104, 1100000, 'Condo', 2, 1, 800, 2005, '2023-03-15'),(9, '2021 Pine St', 'Seattle', 'WA', 98103, 700000, 'Townhouse', 1, 1, 600, 2020, '2023-03-16'),(10, '2223 Elm St', 'Los Angeles', 'CA', 90015, 800000, 'Single Family Home', 4, 2, 1600, 1950, '2023-03-17'),(11, '2425 Willow St', 'San Francisco', 'CA', 94105, 1300000, 'Condo', 3, 2, 1400, 2015, '2023-03-18'),(12, '2627 Maple St', 'Seattle', 'WA', 98104, 1000000, 'Townhouse', 2, 1, 900, 2008, '2023-03-19');",SELECT COUNT(*) FROM properties WHERE city = 'Los Angeles' AND property_type = 'Single Family Home';,This SQL query selects the number of properties from the 'properties' table where the city is 'Los Angeles' and the property type is 'Single Family Home'.
192,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Show me all active listings for homes in the city of Denver, CO that have a price less than $400,000.","CREATE TABLE listings ( listing_id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode VARCHAR(255), price INT, bedrooms INT, bathrooms INT, sqft INT, property_type VARCHAR(255), year_built INT, listing_date DATE, status VARCHAR(255));
INSERT INTO listings (listing_id, address, city, state, zipcode, price, bedrooms, bathrooms, sqft, property_type, year_built, listing_date, status) VALUES
(1, '123 Main St', 'Denver', 'CO', '80202', 350000, 3, 2, 1500, 'Single Family', 1995, '2023-03-08', 'Active'),
(2, '456 Oak Ave', 'Denver', 'CO', '80204', 550000, 4, 3, 2000, 'Single Family', 2005, '2023-03-15', 'Pending'),
(3, '789 Elm St', 'Denver', 'CO', '80206', 280000, 2, 1, 1200, 'Condo', 1980, '2023-03-22', 'Active'),
(4, '1011 Pine St', 'Denver', 'CO', '80208', 620000, 5, 4, 2500, 'Single Family', 2010, '2023-03-29', 'Active'),
(5, '1213 Willow St', 'Denver', 'CO', '80210', 410000, 3, 2, 1800, 'Townhouse', 2000, '2023-04-05', 'Active');
CREATE TABLE cities ( city_id INT PRIMARY KEY, city_name VARCHAR(255), state VARCHAR(255));
INSERT INTO cities (city_id, city_name, state) VALUES
(1, 'Denver', 'CO'),
(2, 'Aurora', 'CO'),
(3, 'Fort Collins', 'CO'),
(4, 'Boulder', 'CO'),
(5, 'Colorado Springs', 'CO');",SELECT * FROM listings WHERE city = 'Denver' AND status = 'Active' AND price < 400000;,"This query selects all rows from the ""listings"" table where the ""city"" column is equal to 'Denver', the ""status"" column is equal to 'Active', and the ""price"" column is less than $400,000. This will return a list of all active listings for homes in Denver that are priced below $400,000."
193,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Find all listings in the state of California that have a pool and a price between $500,000 and $1,000,000.","CREATE TABLE listings ( listing_id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode VARCHAR(255), price INT, bedrooms INT, bathrooms INT, sqft INT, property_type VARCHAR(255), year_built INT, listing_date DATE, status VARCHAR(255), has_pool BOOLEAN);
INSERT INTO listings (listing_id, address, city, state, zipcode, price, bedrooms, bathrooms, sqft, property_type, year_built, listing_date, status, has_pool) VALUES
(1, '123 Main St', 'Los Angeles', 'CA', '90012', 850000, 4, 3, 2200, 'Single Family', 2015, '2023-03-08', 'Active', TRUE),
(2, '456 Oak Ave', 'San Francisco', 'CA', '94102', 980000, 3, 2, 1800, 'Condo', 2008, '2023-03-15', 'Pending', FALSE),
(3, '789 Elm St', 'San Diego', 'CA', '92101', 620000, 2, 1, 1400, 'Condo', 1990, '2023-03-22', 'Active', TRUE),
(4, '1011 Pine St', 'Sacramento', 'CA', '95814', 570000, 4, 2, 2000, 'Single Family', 2000, '2023-03-29', 'Active', FALSE),
(5, '1213 Willow St', 'Oakland', 'CA', '94607', 750000, 3, 2, 1600, 'Townhouse', 2010, '2023-04-05', 'Active', TRUE);
CREATE TABLE cities ( city_id INT PRIMARY KEY, city_name VARCHAR(255), state VARCHAR(255));
INSERT INTO cities (city_id, city_name, state) VALUES
(1, 'Los Angeles', 'CA'),
(2, 'San Francisco', 'CA'),
(3, 'San Diego', 'CA'),
(4, 'Sacramento', 'CA'),
(5, 'Oakland', 'CA');",SELECT * FROM listings WHERE state = 'CA' AND has_pool = TRUE AND price BETWEEN 500000 AND 1000000;,"This query selects all rows from the ""listings"" table where the ""state"" column is equal to 'CA', the ""has_pool"" column is equal to TRUE, and the ""price"" column is between $500,000 and $1,000,000. This will return a list of all listings in California that have a pool and are priced between $500,000 and $1,000,000."
194,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","List all the available properties in the 'Manhattan' neighborhood of 'New York City' that have a price between $500,000 and $750,000, and have at least 2 bedrooms and 1 bathroom.","CREATE TABLE properties (  property_id INT PRIMARY KEY,  address VARCHAR(255),  city VARCHAR(255),  neighborhood VARCHAR(255),  price INT,  bedrooms INT,  bathrooms INT);INSERT INTO properties (property_id, address, city, neighborhood, price, bedrooms, bathrooms) VALUES  (1, '123 Main St', 'New York City', 'Manhattan', 650000, 2, 2),  (2, '456 Elm St', 'New York City', 'Brooklyn', 400000, 1, 1),  (3, '789 Oak St', 'Los Angeles', 'Beverly Hills', 1200000, 4, 3),  (4, '1011 Pine St', 'San Francisco', 'Downtown', 800000, 3, 2),  (5, '1213 Willow St', 'Chicago', 'Lincoln Park', 550000, 2, 1);",SELECT * FROM properties WHERE neighborhood = 'Manhattan' AND price BETWEEN 500000 AND 750000 AND bedrooms >= 2 AND bathrooms >= 1;,"This query selects all rows from the 'properties' table where the 'neighborhood' column is equal to 'Manhattan', the 'price' column is between $500,000 and $750,000 (inclusive), the 'bedrooms' column is greater than or equal to 2, and the 'bathrooms' column is greater than or equal to 1. The results are then displayed in a table format."
195,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report showing the average price per square foot for different property types in New York City, broken down by neighborhood.","CREATE TABLE NYC_Properties (
  property_id INT PRIMARY KEY,
  address VARCHAR(255),
  neighborhood VARCHAR(255),
  property_type VARCHAR(255),
  square_footage INT,
  price INT
);

INSERT INTO NYC_Properties (property_id, address, neighborhood, property_type, square_footage, price)
VALUES
  (1, '123 Main St', 'Manhattan', 'Apartment', 500, 500000),
  (2, '456 Elm St', 'Brooklyn', 'House', 1000, 750000),
  (3, '789 Oak St', 'Queens', 'Condo', 750, 600000),
  (4, '1011 Pine St', 'Manhattan', 'Studio', 300, 350000),
  (5, '1213 Willow St', 'Brooklyn', 'Townhouse', 1500, 1200000),
  (6, '1415 Maple St', 'Queens', 'Apartment', 600, 550000),
  (7, '1617 Birch St', 'Manhattan', 'Condo', 800, 700000),
  (8, '1819 Cedar St', 'Brooklyn', 'Studio', 400, 400000),
  (9, '2021 Oak St', 'Queens', 'House', 1200, 900000),
  (10, '2223 Pine St', 'Manhattan', 'Townhouse', 2000, 1500000);

CREATE VIEW NYC_AvgPricePerSqft AS
SELECT
  neighborhood,
  property_type,
  AVG(price / square_footage) AS avg_price_per_sqft
FROM
  NYC_Properties
GROUP BY
  neighborhood,
  property_type;","SELECT
  neighborhood,
  property_type,
  avg_price_per_sqft
FROM
  NYC_AvgPricePerSqft
ORDER BY
  neighborhood,
  property_type;","This query first calculates the average price per square foot for each property type in each neighborhood by grouping the data by neighborhood and property type and then calculating the average price per square foot. Then, it selects the neighborhood, property type, and average price per square foot and orders the results by neighborhood and property type."
196,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total number of properties listed for sale in San Francisco?,"CREATE TABLE SF_Properties (
  property_id INT PRIMARY KEY,
  address VARCHAR(255),
  neighborhood VARCHAR(255),
  property_type VARCHAR(255),
  square_footage INT,
  price INT,
  listing_status VARCHAR(255)
);

INSERT INTO SF_Properties (property_id, address, neighborhood, property_type, square_footage, price, listing_status)
VALUES
  (1, '123 Main St', 'Nob Hill', 'Apartment', 500, 500000, 'For Sale'),
  (2, '456 Elm St', 'Mission District', 'House', 1000, 750000, 'For Sale'),
  (3, '789 Oak St', 'Pacific Heights', 'Condo', 750, 600000, 'For Sale'),
  (4, '1011 Pine St', 'Nob Hill', 'Studio', 300, 350000, 'For Sale'),
  (5, '1213 Willow St', 'Mission District', 'Townhouse', 1500, 1200000, 'For Sale'),
  (6, '1415 Maple St', 'Pacific Heights', 'Apartment', 600, 550000, 'For Sale'),
  (7, '1617 Birch St', 'Nob Hill', 'Condo', 800, 700000, 'For Sale'),
  (8, '1819 Cedar St', 'Mission District', 'Studio', 400, 400000, 'For Sale'),
  (9, '2021 Oak St', 'Pacific Heights', 'House', 1200, 900000, 'For Sale'),
  (10, '2223 Pine St', 'Nob Hill', 'Townhouse', 2000, 1500000, 'For Sale');",SELECT COUNT(*) FROM SF_Properties WHERE listing_status = 'For Sale';,This query selects all properties from the SF_Properties table where the listing_status is 'For Sale' and then counts the number of rows returned.
197,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table showing the top 5 most expensive properties listed for sale in Miami, along with their address, neighborhood, and property type.","CREATE TABLE Miami_Properties (
  property_id INT PRIMARY KEY,
  address VARCHAR(255),
  neighborhood VARCHAR(255),
  property_type VARCHAR(255),
  square_footage INT,
  price INT,
  listing_status VARCHAR(255)
);

INSERT INTO Miami_Properties (property_id, address, neighborhood, property_type, square_footage, price, listing_status)
VALUES
  (1, '123 Ocean Blvd', 'South Beach', 'Mansion', 10000, 25000000, 'For Sale'),
  (2, '456 Biscayne Blvd', 'Downtown', 'Penthouse', 5000, 15000000, 'For Sale'),
  (3, '789 Brickell Ave', 'Brickell', 'Waterfront Condo', 7500, 12000000, 'For Sale'),
  (4, '1011 Venetian Way', 'Coral Gables', 'Mediterranean Villa', 8000, 10000000, 'For Sale'),
  (5, '1213 Fisher Island Dr', 'Fisher Island', 'Luxury Estate', 12000, 20000000, 'For Sale'),
  (6, '1415 Lincoln Rd', 'South Beach', 'Art Deco Apartment', 3000, 5000000, 'For Sale'),
  (7, '1617 Alton Rd', 'Miami Beach', 'Oceanfront Mansion', 9000, 18000000, 'For Sale'),
  (8, '1819 Collins Ave', 'South Beach', 'Boutique Hotel', 4000, 7000000, 'For Sale'),
  (9, '2021 Bayshore Dr', 'Coconut Grove', 'Waterfront Estate', 11000, 16000000, 'For Sale'),
  (10, '2223 Sunset Dr', 'South Beach', 'Modern Villa', 6000, 9000000, 'For Sale');","SELECT address, neighborhood, property_type, price
FROM Miami_Properties
WHERE listing_status = 'For Sale'
ORDER BY price DESC
LIMIT 5;","This query selects the address, neighborhood, property_type, and price from the Miami_Properties table where the listing_status is 'For Sale', orders the results by price in descending order, and limits the results to the top 5 rows."
198,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How much did the average price of homes in California change between 2010 and 2022?,"CREATE TABLE us_realestate_data (
  state_code VARCHAR(2),
  year INTEGER,
  avg_home_price DECIMAL(10,2),
  PRIMARY KEY (state_code, year)
);

INSERT INTO us_realestate_data (state_code, year, avg_home_price) VALUES
('CA', 2010, 350000),
('CA', 2011, 360000),
('CA', 2012, 370000),
('CA', 2013, 380000),
('CA', 2014, 390000),
('CA', 2015, 400000),
('CA', 2016, 410000),
('CA', 2017, 420000),
('CA', 2018, 430000),
('CA', 2019, 440000),
('CA', 2020, 450000),
('CA', 2021, 460000),
('CA', 2022, 470000);

CREATE TABLE us_states (
  state_code VARCHAR(2),
  state_name VARCHAR(50),
  PRIMARY KEY (state_code)
);

INSERT INTO us_states (state_code, state_name) VALUES
('CA', 'California');

CREATE VIEW vw_us_realestate_data_with_state_name AS
SELECT
  urd.state_code,
  us.state_name,
  urd.year,
  urd.avg_home_price
FROM
  us_realestate_data urd
JOIN
  us_states us ON urd.state_code = us.state_code;","SELECT
  state_name,
  AVG(avg_home_price) AS average_home_price
FROM
  vw_us_realestate_data_with_state_name
WHERE
  state_code = 'CA' AND year BETWEEN 2010 AND 2022
GROUP BY
  state_name;","This query calculates the average home price in California between 2010 and 2022. 

1. We start by joining the `us_realestate_data` table with the `us_states` table on the `state_code` column to get the state name. 
2. We then filter the data to include only records for California and years between 2010 and 2022. 
3. We then group the data by state name and calculate the average home price for each group. 
4. Finally, we select the state name and the average home price as the result."
199,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","For each year, what was the average list price of single-family homes in San Francisco?","CREATE TABLE real_estate_listings (
  listing_id INT,
  address VARCHAR(255),
  city VARCHAR(50),
  state VARCHAR(2),
  zip_code VARCHAR(10),
  property_type VARCHAR(50),
  list_price DECIMAL(10,2),
  bedrooms INT,
  bathrooms DECIMAL(4,1),
  square_footage INT,
  lot_size DECIMAL(10,2),
  year_built INT,
  listing_date DATE,
  PRIMARY KEY (listing_id)
);

INSERT INTO real_estate_listings (listing_id, address, city, state, zip_code, property_type, list_price, bedrooms, bathrooms, square_footage, lot_size, year_built, listing_date) VALUES
(1, '123 Main St', 'San Francisco', 'CA', '94105', 'Single Family Home', 1200000, 3, 2.5, 1500, 5000, 1950, '2023-03-08'),
(2, '456 Oak Ave', 'San Francisco', 'CA', '94118', 'Condo', 800000, 2, 1.5, 1000, 2500, 1980, '2023-03-09'),
(3, '789 Pine St', 'San Francisco', 'CA', '94127', 'Single Family Home', 1500000, 4, 3.0, 2000, 7500, 1920, '2023-03-10'),
(4, '321 Elm St', 'San Francisco', 'CA', '94109', 'Condo', 700000, 1, 1.0, 750, 1500, 2000, '2023-03-11'),
(5, '654 Cedar St', 'San Francisco', 'CA', '94114', 'Single Family Home', 1300000, 3, 2.0, 1750, 6000, 1960, '2023-03-12'),
(6, '987 Willow St', 'San Francisco', 'CA', '94123', 'Condo', 900000, 2, 2.0, 1250, 3000, 1990, '2023-03-13');

CREATE VIEW vw_real_estate_listings_with_year AS
SELECT
  listing_id,
  address,
  city,
  state,
  zip_code,
  property_type,
  list_price,
  bedrooms,
  bathrooms,
  square_footage,
  lot_size,
  EXTRACT(YEAR FROM listing_date) AS listing_year
FROM
  real_estate_listings;","SELECT
  listing_year,
  AVG(list_price) AS average_list_price
FROM
  vw_real_estate_listings_with_year
WHERE
  city = 'San Francisco' AND property_type = 'Single Family Home'
GROUP BY
  listing_year
ORDER BY
  listing_year;","This query calculates the average list price of single-family homes in San Francisco for each year. 

1. We start by creating a view called `vw_real_estate_listings_with_year` that extracts the year from the `listing_date` column. 
2. We then filter the data to include only records for San Francisco and single-family homes. 
3. We then group the data by year and calculate the average list price for each group. 
4. Finally, we order the results by year."
200,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many artists in the database identify as female who live in the United States?,"CREATE TABLE Artists(
  artist_id INT PRIMARY KEY,
  artist_name VARCHAR(255) NOT NULL,
  birth_year INT,
  gender VARCHAR(20),
  country VARCHAR(255)
);

INSERT INTO Artists (artist_id, artist_name, birth_year, gender, country) VALUES
(1, 'Frida Kahlo', 1907, 'Female', 'Mexico'),
(2, 'Pablo Picasso', 1881, 'Male', 'Spain'),
(3, 'Georgia O’Keeffe', 1887, 'Female', 'United States'),
(4, 'Claude Monet', 1840, 'Male', 'France'),
(5, 'Yayoi Kusama', 1929, 'Female', 'Japan'),
(6, 'Vincent van Gogh', 1853, 'Male', 'Netherlands'),
(7, 'Mary Cassatt', 1844, 'Female', 'United States'),
(8, 'Leonardo da Vinci', 1452, 'Male', 'Italy'),
(9, 'Artemisia Gentileschi', 1593, 'Female', 'Italy'),
(10, 'Michelangelo', 1475, 'Male', 'Italy');

CREATE TABLE Artworks(
  artwork_id INT PRIMARY KEY,
  artist_id INT REFERENCES Artists(artist_id),
  title VARCHAR(255) NOT NULL,
  year INT,
  medium VARCHAR(255)
);

INSERT INTO Artworks (artwork_id, artist_id, title, year, medium) VALUES
(1, 1, 'The Two Fridas', 1939, 'Oil on canvas'),
(2, 2, 'Guernica', 1937, 'Oil on canvas'),
(3, 3, 'Black Iris', 1926, 'Oil on canvas'),
(4, 4, 'Water Lilies', 1919, 'Oil on canvas'),
(5, 5, 'Infinity Nets', 1965, 'Acrylic on canvas'),
(6, 6, 'The Starry Night', 1889, 'Oil on canvas'),
(7, 7, 'The Bath', 1891, 'Oil on canvas'),
(8, 8, 'Mona Lisa', 1503, 'Oil on panel'),
(9, 9, 'Judith Beheading Holofernes', 1614-1620, 'Oil on canvas'),
(10, 10, 'David', 1504, 'Marble');",SELECT COUNT(*) FROM Artists WHERE gender = 'Female' AND country = 'United States';,"This SQL query selects the number of artists from the Artists table who identify as female and live in the United States. 

1. The query starts by selecting the count(*) function, which counts the number of rows in the result set.
2. The FROM clause specifies the Artists table as the source of data.
3. The WHERE clause filters the results to include only artists whose gender is 'Female' and country is 'United States'."
201,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 genres by total sales in the past year?,"CREATE TABLE genres (genre_id INT PRIMARY KEY, genre_name VARCHAR(255));
CREATE TABLE albums (album_id INT PRIMARY KEY, genre_id INT REFERENCES genres(genre_id), album_name VARCHAR(255), release_date DATE, sales INT);","SELECT genre_name, SUM(sales) AS total_sales FROM albums AS a JOIN genres AS g ON a.genre_id = g.genre_id WHERE release_date BETWEEN DATE('now', '-1 year') AND DATE('now') GROUP BY genre_name ORDER BY total_sales DESC LIMIT 5;","This query selects the genre name and the sum of sales for each genre from the albums table in the past year. It then groups the results by genre name and orders them in descending order of total sales. Finally, it limits the results to the top 5 genres."
202,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of paintings sold in the last quarter?,"CREATE TABLE paintings (painting_id INT PRIMARY KEY, artist_id INT REFERENCES artists(artist_id), painting_name VARCHAR(255), creation_date DATE, sale_price DECIMAL(10,2));
CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), birth_date DATE);","SELECT AVG(sale_price) AS average_price FROM paintings WHERE sale_date BETWEEN DATE('now', '-3 months') AND DATE('now');",This query calculates the average price of paintings sold in the last quarter. It does this by selecting the average of the sale_price column from the paintings table where the sale_date is between three months ago and today.
203,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which artists have sold the most paintings in their career?,"CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), birth_date DATE);
CREATE TABLE paintings (painting_id INT PRIMARY KEY, artist_id INT REFERENCES artists(artist_id), painting_name VARCHAR(255), creation_date DATE, sale_price DECIMAL(10,2));","SELECT artist_name, COUNT(*) AS total_paintings_sold FROM artists AS a JOIN paintings AS p ON a.artist_id = p.artist_id GROUP BY artist_name ORDER BY total_paintings_sold DESC;","This query selects the artist's name and the total number of paintings sold by each artist. It does this by joining the artists and paintings tables on the artist_id column, and then grouping the results by artist_name. Finally, it orders the results in descending order of total_paintings_sold."
204,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the total revenue generated from concerts in the past year, broken down by region?","CREATE TABLE concerts (concert_id INT PRIMARY KEY, artist_id INT REFERENCES artists(artist_id), concert_date DATE, venue_id INT REFERENCES venues(venue_id), region VARCHAR(255), revenue DECIMAL(10,2));
CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), birth_date DATE);
CREATE TABLE venues (venue_id INT PRIMARY KEY, venue_name VARCHAR(255), city VARCHAR(255), region VARCHAR(255));","SELECT region, SUM(revenue) AS total_revenue FROM concerts WHERE concert_date BETWEEN DATE('now', '-1 year') GROUP BY region ORDER BY total_revenue DESC;","This query calculates the total revenue generated from concerts in the past year, broken down by region. It does this by selecting the region and the sum of the revenue column from the concerts table where the concert_date is between one year ago and today. It then groups the results by region and orders them in descending order of total_revenue."
205,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","What are all of the farms in California that have sold over 50,000 pounds of corn in the last year, and what is the average yield for each of those farms?","CREATE TABLE farms (farm_id INT PRIMARY KEY, farm_name VARCHAR(255), state VARCHAR(255), city VARCHAR(255));
INSERT INTO farms (farm_id, farm_name, state, city) VALUES
(1, 'Smith Family Farm', 'California', 'Fresno'),
(2, 'Johnson Farms', 'Texas', 'Dallas'),
(3, 'Miller Farms', 'Iowa', 'Des Moines'),
(4, 'Garcia Farms', 'California', 'Bakersfield'),
(5, 'Williams Farms', 'Illinois', 'Chicago');

CREATE TABLE crops (crop_id INT PRIMARY KEY, farm_id INT, crop_type VARCHAR(255), yield INT, units VARCHAR(255), date_harvested DATE);
INSERT INTO crops (crop_id, farm_id, crop_type, yield, units, date_harvested) VALUES
(1, 1, 'corn', 60000, 'pounds', '2023-07-15'),
(2, 2, 'soybeans', 40000, 'bushels', '2023-08-01'),
(3, 3, 'corn', 55000, 'pounds', '2023-07-22'),
(4, 4, 'alfalfa', 80000, 'tons', '2023-06-15'),
(5, 5, 'wheat', 30000, 'bushels', '2023-07-29'),
(6, 1, 'corn', 70000, 'pounds', '2022-07-15');

CREATE TABLE sales (sale_id INT PRIMARY KEY, farm_id INT, crop_type VARCHAR(255), quantity INT, units VARCHAR(255), sale_date DATE);
INSERT INTO sales (sale_id, farm_id, crop_type, quantity, units, sale_date) VALUES
(1, 1, 'corn', 55000, 'pounds', '2023-07-20'),
(2, 2, 'soybeans', 35000, 'bushels', '2023-08-05'),
(3, 3, 'corn', 45000, 'pounds', '2023-07-27'),
(4, 4, 'alfalfa', 75000, 'tons', '2023-06-20'),
(5, 5, 'wheat', 25000, 'bushels', '2023-08-02'),
(6, 1, 'corn', 65000, 'pounds', '2022-07-22');","SELECT f.farm_name, c.yield
FROM farms f
JOIN crops c ON f.farm_id = c.farm_id
WHERE f.state = 'California' AND c.crop_type = 'corn' AND c.yield > 50000
GROUP BY f.farm_name
HAVING AVG(c.yield) > 0;","This query joins the farms and crops tables on the farm_id field.
It then filters the results to only include farms in California that have sold over 50,000 pounds of corn in the last year.
Finally, it groups the results by farm name and calculates the average yield for each farm, only including farms with an average yield greater than 0."
206,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","List all the different types of crops grown in the state of California, along with their total yield for the year 2021, sorted by yield in descending order.","CREATE TABLE crops (crop_id INT PRIMARY KEY, crop_name VARCHAR(255) NOT NULL, state VARCHAR(255) NOT NULL, yield INT NOT NULL, year INT NOT NULL);","SELECT C.crop_name, SUM(C.yield) AS total_yield FROM crops C JOIN farms F ON C.crop_id = F.crop_id WHERE F.state = 'California' AND C.year = 2021 GROUP BY C.crop_name ORDER BY total_yield DESC;","This query first joins the 'crops' table with the 'farms' table on the 'crop_id' field. Then, it filters the data to include only records for the state of California and the year 2021. Next, it groups the data by crop name and calculates the sum of the yield for each crop. Finally, it orders the results by total yield in descending order."
207,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Find the average yield of wheat in the United States for each year from 2015 to 2021.,"CREATE TABLE crops (crop_id INT PRIMARY KEY, crop_name VARCHAR(255) NOT NULL, state VARCHAR(255) NOT NULL, yield INT NOT NULL, year INT NOT NULL);","SELECT C.year, AVG(C.yield) AS average_yield FROM crops C WHERE C.crop_name = 'Wheat' AND C.state = 'United States' AND C.year BETWEEN 2015 AND 2021 GROUP BY C.year ORDER BY C.year;","This query first filters the data to include only records for wheat grown in the United States between the years 2015 and 2021. Then, it groups the data by year and calculates the average yield for each year. Finally, it orders the results by year."
208,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 10 states in terms of corn production in 2021.,"CREATE TABLE crops (crop_id INT PRIMARY KEY, crop_name VARCHAR(255) NOT NULL, state VARCHAR(255) NOT NULL, yield INT NOT NULL, year INT NOT NULL);","SELECT C.state, SUM(C.yield) AS total_yield FROM crops C WHERE C.crop_name = 'Corn' AND C.year = 2021 GROUP BY C.state ORDER BY total_yield DESC LIMIT 10;","This query first filters the data to include only records for corn production in 2021. Then, it groups the data by state and calculates the sum of the yield for each state. Finally, it orders the results by total yield in descending order and limits the output to the top 10 states."
209,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Create a table to store information about agricultural practices used by farmers, including the type of practice, the date it was implemented, and the associated crop and farm.","CREATE TABLE practices (practice_id INT PRIMARY KEY, practice_name VARCHAR(255) NOT NULL, implementation_date DATE NOT NULL, crop_id INT REFERENCES crops(crop_id), farm_id INT REFERENCES farms(farm_id));",,"This query creates a new table called 'practices' with four columns: 'practice_id', 'practice_name', 'implementation_date', 'crop_id', and 'farm_id'. The 'practice_id' column is the primary key, and the 'crop_id' and 'farm_id' columns are foreign keys that reference the 'crops' and 'farms' tables, respectively."
210,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",What is the total sum of sales for each product in the Products table for the past year? (Use subqueries.),"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, Price DECIMAL(10,2), CategoryID INT REFERENCES Categories(CategoryID));
INSERT INTO Products (ProductID, ProductName, Price, CategoryID) VALUES (1, 'Laptop', 1200.00, 1), (2, 'Mouse', 25.00, 2), (3, 'Keyboard', 75.00, 2), (4, 'Monitor', 300.00, 1), (5, 'USB drive', 15.00, 3);
CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT REFERENCES Customers(CustomerID), OrderDate DATE, TotalAmount DECIMAL(10,2));
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES (1, 1, '2023-08-01', 1400.00), (2, 2, '2023-08-05', 50.00), (3, 3, '2023-08-10', 100.00), (4, 1, '2023-08-15', 400.00), (5, 2, '2023-08-20', 30.00);
CREATE TABLE OrderItems (OrderItemID INT PRIMARY KEY, OrderID INT REFERENCES Orders(OrderID), ProductID INT REFERENCES Products(ProductID), Quantity INT, Price DECIMAL(10,2));
INSERT INTO OrderItems (OrderItemID, OrderID, ProductID, Quantity, Price) VALUES (1, 1, 1, 1, 1200.00), (2, 1, 2, 2, 50.00), (3, 2, 3, 1, 75.00), (4, 3, 2, 2, 50.00), (5, 4, 1, 1, 1200.00), (6, 5, 3, 1, 75.00);
CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(255) NOT NULL, Email VARCHAR(255) UNIQUE);","SELECT ProductName, SUM(Quantity * Price) AS TotalSales FROM Products AS P JOIN OrderItems AS OI ON P.ProductID = OI.ProductID JOIN Orders AS O ON OI.OrderID = O.OrderID WHERE O.OrderDate >= DATE('now', '-1 year') GROUP BY ProductName;","1. Join the Products table with the OrderItems table on ProductID to link sales data.
2. Join the OrderItems table with the Orders table on OrderID to bring in order dates.
3. Filter the orders to include only those from the past year using the DATE function and subtracting 1 year.
4. Group the results by ProductName to calculate the total sales for each product.
5. Calculate the total sales by multiplying Quantity and Price for each product and summing them up using the SUM aggregate function."
211,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",What is the current status of all active projects that started this year?,"CREATE TABLE Project ( ProjectID int PRIMARY KEY,  ProjectName varchar(255) NOT NULL,  ProjectStatus varchar(255) NOT NULL ); INSERT INTO Project (ProjectID, ProjectName, ProjectStatus) VALUES  (1, 'Project X', 'Active'),  (2, 'Project Y', 'Completed'),  (3, 'Project Z', 'Active'),  (4, 'Project A', 'In Progress'),  (5, 'Project B', 'On Hold');  CREATE  TABLE StartDate  (  ProjectID int,  ProjectStart Date date,  PRIMARY KEY (ProjectID),  FOREIGN KEY (ProjectID) REFERENCES Project(ProjectID));  INSERT INTO StartDate (ProjectID, ProjectStart Date) VALUES  (1, '2022-04-01'),  (2, '2021-08-15'),  (3, '2022-03-22'),  (4, '2021-12-01'),  (5, '2022-01-10');","SELECT p.ProjectName, p.ProjectStatus  FROM Project p  JOIN StartDate sd ON p.ProjectID = sd.ProjectID  WHERE p.ProjectStatus = 'Active'  AND  sd.ProjectStart Date BETWEEN '2022-01-01' AND '2022-12-31';","1.  We start by joining Project and StartDate on ProjectID. This gives us access to both project information and start dates.
2.   Next, we filter the results to include only active projects.
3. Finally, we filter again to include projects that started in 2022. 
This query should return all active projects that began in the current year."
212,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find all customers who made at least two orders in the last quarter.,"CREATE TABLE Customer ( CustomerID int PRIMARY KEY,  CustomerName varchar(255) NOT NULL,  Email varchar(255) );  INSERT INTO Customer  (CustomerID, CustomerName, Email)  VALUES  (1, 'John Doe', 'john.doe@email.com'),  (2, 'Jane Smith', 'jane.smith@email.com'),  (3, 'Bob Johnson', 'bob.johnson@email.com'),  (4, 'Alice Walker', 'alice.walker@email.com'),  (5, 'Michael Brown', 'michael.brown@email.com');

CREATE TABLE Orders  ( OrderID int PRIMARY KEY,  CustomerID int,  OrderDate date,  FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID) );

INSERT INTO Orders  ( OrderID, CustomerID, OrderDate )
VALUES
 (1, 1, '2022-09-01'),
  (2, 2, '2022-09-05'),
 (3, 3, '2022-09-10'),
 (4, 1, '2022-09-15'),
 (5, 2, '2022-09-20'),
 (6, 3, '2022-09-25'),
 (7, 4, '2022-09-30'),
 (8, 1, '2022-10-05'),
 (9, 2, '2022-10-10'),
 (10, 3, '2022-10-15'),
  (11, 4, '2022-10-20'),
 (12, 5, '2022-10-25');","SELECT c.CustomerName  FROM Customer c  JOIN Orders o ON c.CustomerID = o.CustomerID  WHERE o.OrderDate BETWEEN '2022-07-01' AND '2022-09-30'  GROUP BY c.CustomerID, c.CustomerName  HAVING COUNT(*) > 1; ","The first step is to filter the Orders table to only include orders from the last quarter (July 1 - September 30). This can be done using the BETWEEN operator on the OrderDate column.

Next, we need to join this filtered Orders table with the Customer table to link customer IDs and names to their orders.

We then count the number of orders for each customer using COUNT(*) and group the results by the Customer ID and name.

Finally, we use the HAVING clause to filter these grouped results and only select customers with more than one order in this time frame.
"
213,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Provide a detailed report on the number of customer orders placed within the last 30 days, grouped by order status and product category. Include the total order amount and average order value for each category, and identify the top 5 products by total revenue generated within this time frame.","CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    order_status VARCHAR(255),
    product_id INT,
    quantity INT,
    price DECIMAL(10,2)
);

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    country VARCHAR(255)
);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category VARCHAR(255),
    price DECIMAL(10,2)
);

INSERT INTO orders (order_id, customer_id, order_date, order_status, product_id, quantity, price) VALUES
(1, 101, '2023-09-01', 'shipped', 1, 2, 10.00),
(2, 102, '2023-09-02', 'pending', 2, 1, 5.00),
(3, 103, '2023-09-03', 'cancelled', 3, 3, 15.00),
(4, 104, '2023-09-04', 'shipped', 1, 1, 10.00),
(5, 105, '2023-09-05', 'shipped', 2, 2, 10.00),
(6, 101, '2023-09-06', 'shipped', 3, 1, 15.00),
(7, 102, '2023-09-07', 'pending', 1, 3, 30.00),
(8, 103, '2023-09-08', 'cancelled', 2, 4, 20.00),
(9, 104, '2023-09-09', 'shipped', 3, 2, 30.00),
(10, 105, '2023-09-10', 'shipped', 1, 1, 10.00);

INSERT INTO customers (customer_id, customer_name, country) VALUES
(101, 'Alice Johnson', 'United States'),
(102, 'Bob Williams', 'Canada'),
(103, 'Charlie Brown', 'United Kingdom'),
(104, 'Diana Smith', 'Australia'),
(105, 'Emma Jones', 'France');

INSERT INTO products (product_id, product_name, category, price) VALUES
(1, 'Laptop', 'Electronics', 1000.00),
(2, 'Tablet', 'Electronics', 500.00),
(3, 'Smartphone', 'Electronics', 750.00);","SELECT
    o.order_status,
    p.category,
    COUNT(o.order_id) AS total_orders,
    SUM(o.quantity * o.price) AS total_amount,
    AVG(o.quantity * o.price) AS avg_order_value
FROM
    orders o
JOIN
    products p ON o.product_id = p.product_id
WHERE
    o.order_date >= DATE('now', '-30 days')
GROUP BY
    o.order_status,
    p.category
ORDER BY
    total_amount DESC;

-- Subquery to calculate total revenue per product
WITH ProductRevenue AS (
    SELECT
        p.product_id,
        p.product_name,
        SUM(o.quantity * o.price) AS total_revenue
    FROM
        orders o
    JOIN
        products p ON o.product_id = p.product_id
    WHERE
        o.order_date >= DATE('now', '-30 days')
    GROUP BY
        p.product_id,
        p.product_name
)

-- Main query to select top 5 products by revenue
SELECT
    pr.product_name,
    pr.total_revenue
FROM
    ProductRevenue pr
ORDER BY
    pr.total_revenue DESC
LIMIT 5;","1. Join the 'orders' and 'products' tables on the 'product_id' field.
2. Filter the orders to include those placed within the last 30 days.
3. Group the results by order status and product category.
4. Calculate the total number of orders, total order amount, and average order value for each group.
5. Order the results by total order amount in descending order.
6. Use a subquery to calculate the total revenue for each product.
7. Select the top 5 products with the highest total revenue."
214,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",How many customers are from France and Germany and have purchased products in the past month?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, country VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE NOT NULL); 
INSERT INTO customers (customer_id, name, country, email) VALUES 
(1, 'John Doe', 'France', 'john.doe@example.com'),
(2, 'Jane Smith', 'Germany', 'jane.smith@example.com'),
(3, 'Peter Jones', 'USA', 'peter.jones@example.com'),
(4, 'Alice Johnson', 'Canada', 'alice.johnson@example.com'),
(5, 'Bob Williams', 'France', 'bob.williams@example.com');

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), order_date DATE NOT NULL); 
INSERT INTO orders (order_id, customer_id, product_id, order_date) VALUES 
(1, 1, 10, '2023-03-01'),
(2, 2, 20, '2023-03-05'),
(3, 3, 30, '2023-03-10'),
(4, 4, 40, '2023-03-15'),
(5, 1, 50, '2023-03-20'),
(6, 2, 10, '2023-03-25'),
(7, 5, 20, '2023-03-30');","SELECT COUNT(*) FROM customers WHERE country IN ('France', 'Germany') AND EXISTS (SELECT 1 FROM orders WHERE customers.customer_id = orders.customer_id AND order_date >= DATE('now', '-1 month'))","This query first selects all customers from France and Germany using the `IN` operator. Then, it uses a subquery to check if each customer has placed an order in the past month. The `EXISTS` clause ensures that only customers with at least one order in the past month are included in the final count."
215,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Identify customers who have placed orders in the last 30 days, excluding those who have already received a loyalty discount in the last month.","CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), loyalty_discount_date DATE);CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE);","SELECT c.customer_id, c.name, c.email FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-30 days') EXCEPT SELECT c.customer_id, c.name, c.email FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN loyalty_discounts ld ON c.customer_id = ld.customer_id WHERE ld.discount_date >= DATE('now', '-30 days');","This query first identifies all customers who have placed orders in the last 30 days by joining the `customers` and `orders` tables on the `customer_id` field and filtering for orders placed within the last 30 days. Then, it excludes customers who have already received a loyalty discount in the last month by joining the results with the `loyalty_discounts` table on the `customer_id` field and filtering for discounts within the last 30 days. The final result is a list of customers who have placed orders in the last 30 days but have not yet received a loyalty discount."
216,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Calculate the total revenue generated by each product category in the past year, sorted from highest to lowest.","CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2));CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), quantity INT, order_date DATE);","SELECT p.category, SUM(p.price * o.quantity) AS total_revenue FROM products p JOIN orders o ON p.product_id = o.product_id WHERE o.order_date >= DATE('now', '-1 year') GROUP BY p.category ORDER BY total_revenue DESC;","This query calculates the total revenue for each product category by joining the `products` and `orders` tables on the `product_id` field. It then filters for orders placed in the past year and groups the results by product category. Finally, it calculates the sum of the product price multiplied by the order quantity for each category and sorts the results in descending order of total revenue."
217,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Update the inventory levels for all products in a specific warehouse, increasing the quantity by 10% for products with stock below 50 units and by 5% for products with stock between 50 and 100 units.","CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2));CREATE TABLE inventory (product_id INT PRIMARY KEY, warehouse_id INT, quantity INT);",UPDATE inventory SET quantity = CASE WHEN quantity < 50 THEN quantity * 1.10 WHEN quantity BETWEEN 50 AND 100 THEN quantity * 1.05 ELSE quantity END WHERE warehouse_id = /* warehouse_id */;SELECT * FROM inventory WHERE warehouse_id = /* warehouse_id */;,"This query updates the inventory levels for all products in a specific warehouse. It uses a `CASE` statement to increase the quantity by 10% for products with stock below 50 units, by 5% for products with stock between 50 and 100 units, and leaves the quantity unchanged for products with stock above 100 units. The `warehouse_id` should be replaced with the actual warehouse ID. The `SELECT` statement at the end retrieves the updated inventory levels for the specified warehouse."
218,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Find all suppliers who have not provided any products in the last 6 months, excluding those who have a contract expiring within the next 3 months.","CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, name VARCHAR(255), contract_expiry_date DATE);CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), supplier_id INT REFERENCES suppliers(supplier_id));","SELECT s.supplier_id, s.name FROM suppliers s LEFT JOIN products p ON s.supplier_id = p.supplier_id WHERE p.product_id IS NULL AND s.contract_expiry_date > DATE('now', '+3 months') AND NOT EXISTS (SELECT 1 FROM products WHERE supplier_id = s.supplier_id AND product_date >= DATE('now', '-6 months'));","This query identifies suppliers who have not provided any products in the last 6 months. It uses a `LEFT JOIN` to combine the `suppliers` and `products` tables, and then filters for suppliers who have no matching products in the `products` table. It also excludes suppliers whose contract is expiring within the next 3 months and those who have provided products in the last 6 months using a `NOT EXISTS` clause. The final result is a list of suppliers who meet all the criteria."
219,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Delete all customer records that have not placed an order in the past 2 years and whose loyalty points balance is below 1000 points.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), loyalty_points INT);CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE);","DELETE FROM customers WHERE customer_id NOT IN (SELECT DISTINCT customer_id FROM orders WHERE order_date >= DATE('now', '-2 years')) AND loyalty_points < 1000;","This query deletes customer records that have not placed an order in the past 2 years and whose loyalty points balance is below 1000 points. It first identifies customers who have not placed an order in the past 2 years by selecting distinct `customer_id` values from the `orders` table where the `order_date` is within the past 2 years. Then, it deletes customers from the `customers` table whose `customer_id` is not in the identified set and whose `loyalty_points` are less than 1000."
220,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the average sale price for each artist in the Impressionist movement, broken down by their country of origin. Additionally, identify the top five artists within the movement based on their total sales revenue.","CREATE TABLE Artists (  ArtistID INT PRIMARY KEY,  ArtistName VARCHAR(255) NOT NULL,  CountryOfOrigin VARCHAR(255) NOT NULL,  Movement VARCHAR(255) NOT NULL);CREATE TABLE Artworks (  ArtworkID INT PRIMARY KEY,  ArtistID INT REFERENCES Artists(ArtistID),  ArtworkTitle VARCHAR(255) NOT NULL,  SalePrice DECIMAL(10,2) NOT NULL,  SaleDate DATE NOT NULL);INSERT INTO Artists (ArtistID, ArtistName, CountryOfOrigin, Movement) VALUES  (1, 'Claude Monet', 'France', 'Impressionism'),  (2, 'Pierre-Auguste Renoir', 'France', 'Impressionism'),  (3, 'Edgar Degas', 'France', 'Impressionism'),  (4, 'Camille Pissarro', 'France', 'Impressionism'),  (5, 'Paul Cézanne', 'France', 'Post-Impressionism'),  (6, 'Vincent van Gogh', 'Netherlands', 'Post-Impressionism'),  (7, 'Paul Gauguin', 'France', 'Post-Impressionism'),  (8, 'Henri de Toulouse-Lautrec', 'France', 'Post-Impressionism');INSERT INTO Artworks (ArtworkID, ArtistID, ArtworkTitle, SalePrice, SaleDate) VALUES  (1, 1, 'Impression, Sunrise', 1000000.00, '1872-11-14'),  (2, 2, 'Bal du moulin de la Galette', 780000.00, '1876-03-17'),  (3, 3, 'La Classe de Danse', 950000.00, '1874-05-25'),  (4, 4, 'L'avenue de l'Opéra à Paris', 650000.00, '1898-02-10'),  (5, 5, 'Les Joueurs de Cartes', 2500000.00, '1895-04-23'),  (6, 6, 'The Starry Night', 1500000.00, '1889-06-18'),  (7, 7, 'Where Do We Come From? What Are We? Where Are We Going?', 5000000.00, '1897-12-01'),  (8, 8, 'Moulin Rouge, La Goulue', 1200000.00, '1891-10-26');","WITH ArtistAvgSales AS (  SELECT ArtistName, CountryOfOrigin, AVG(SalePrice) AS AverageSalePrice  FROM Artists  JOIN Artworks ON Artists.ArtistID = Artworks.ArtistID  GROUP BY ArtistName, CountryOfOrigin),  TopFiveArtists AS (  SELECT ArtistName, SUM(SalePrice) AS TotalSalesRevenue  FROM Artists  JOIN Artworks ON Artists.ArtistID = Artworks.ArtistID  GROUP BY ArtistName  ORDER BY TotalSalesRevenue DESC  LIMIT 5)SELECT ArtistAvgSales.ArtistName, ArtistAvgSales.CountryOfOrigin, ArtistAvgSales.AverageSalePrice, TopFiveArtists.ArtistName AS TopFiveArtists  FROM ArtistAvgSales  JOIN TopFiveArtists ON ArtistAvgSales.ArtistName = TopFiveArtists.ArtistName  WHERE ArtistAvgSales.Movement = 'Impressionism'  ORDER BY ArtistAvgSales.CountryOfOrigin, ArtistAvgSales.ArtistName;","This query retrieves the average sale price for each artist in the Impressionist movement, broken down by their country of origin. Additionally, it identifies the top five artists within the movement based on their total sales revenue.

The query starts by creating two CTEs: ArtistAvgSales and TopFiveArtists. The ArtistAvgSales CTE calculates the average sale price for each artist in the Impressionist movement, grouped by their artist name and country of origin. The TopFiveArtists CTE calculates the total sales revenue for each artist and then orders the results in descending order, limiting the output to the top five artists.

The main query then joins the ArtistAvgSales and TopFiveArtists CTEs on the ArtistName column. This allows us to retrieve the average sale price for each artist, their country of origin, and whether they are one of the top five artists based on total sales revenue.

The query then filters the results to only include artists in the Impressionist movement. Finally, the query orders the results by country of origin and then by artist name."
221,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which artists from underrepresented groups have had the highest auction sales in the past year?,"CREATE TABLE artists (  artist_id INT PRIMARY KEY,  name VARCHAR(255) NOT NULL,  birth_year INT,  death_year INT,  nationality VARCHAR(255)  );

CREATE TABLE artworks (  artwork_id INT PRIMARY KEY,  artist_id INT REFERENCES artists(artist_id),  title VARCHAR(255) NOT NULL,  creation_year INT,  medium VARCHAR(255)  );

CREATE TABLE auction_sales (  sale_id INT PRIMARY KEY,  artwork_id INT REFERENCES artworks(artwork_id),  auction_house VARCHAR(255) NOT NULL,  sale_date DATE NOT NULL,  price DECIMAL(10,2)  );","SELECT a.name, SUM(s.price) AS total_sales
FROM artists a
JOIN artworks aw ON a.artist_id = aw.artist_id
JOIN auction_sales s ON aw.artwork_id = s.artwork_id
WHERE a.nationality IN (SELECT nationality FROM artists GROUP BY nationality HAVING COUNT(*) < 100)
GROUP BY a.name
ORDER BY total_sales DESC
LIMIT 10;","This query finds the artists from underrepresented groups who have had the highest auction sales in the past year.

1. It starts by selecting the name of the artist and the sum of their auction sales.
2. It joins the artists table with the artworks table and the auction_sales table.
3. It filters the results to only include artists from underrepresented groups. An underrepresented group is defined as a nationality with less than 100 artists in the database.
4. It groups the results by artist name and orders them by total sales in descending order.
5. It limits the results to the top 10 artists."
222,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of paintings by female artists in the Impressionism movement for the year 2018?,"CREATE TABLE ImpressionismPaintings (paintingID INT PRIMARY KEY, artistID INT, movement VARCHAR(255), price DECIMAL(10,2), year INT); 
CREATE TABLE Artists (artistID INT PRIMARY KEY, name VARCHAR(255), gender VARCHAR(255));
INSERT INTO ImpressionismPaintings (paintingID, artistID, movement, price, year) VALUES (1, 1, 'Impressionism', 1000000, 2018), (2, 2, 'Impressionism', 500000, 2018), (3, 3, 'Impressionism', 750000, 2018), (4, 4, 'Impressionism', 1250000, 2018), (5, 5, 'Impressionism', 250000, 2018), (6, 6, 'Impressionism', 1500000, 2018), (7, 7, 'Impressionism', 350000, 2018), (8, 8, 'Impressionism', 400000, 2018), (9, 9, 'Impressionism', 600000, 2018), (10, 10, 'Impressionism', 800000, 2018), (11, 11, 'Impressionism', 200000, 2018), (12, 12, 'Impressionism', 900000, 2018), (13, 13, 'Impressionism', 1100000, 2018), (14, 14, 'Impressionism', 550000, 2018), (15, 15, 'Impressionism', 700000, 2018), (16, 16, 'Impressionism', 1300000, 2018), (17, 17, 'Impressionism', 450000, 2018), (18, 18, 'Impressionism', 650000, 2018), (19, 19, 'Impressionism', 1400000, 2018), (20, 20, 'Impressionism', 850000, 2018);
INSERT INTO Artists (artistID, name, gender) VALUES (1, 'Claude Monet', 'Male'), (2, 'Pierre-Auguste Renoir', 'Male'), (3, 'Edgar Degas', 'Male'), (4, 'Camille Pissarro', 'Male'), (5, 'Alfred Sisley', 'Male'), (6, 'Paul Cézanne', 'Male'), (7, 'Berthe Morisot', 'Female'), (8, 'Mary Cassatt', 'Female'), (9, 'Eva Gonzalès', 'Female'), (10, 'Marie Bracquemond', 'Female'), (11, 'Lilla Cabot Perry', 'Female'), (12, 'Anna Klumpke', 'Female'), (13, 'Marie Louise Catherine Breslau', 'Female'), (14, 'Sofonisba Anguissola', 'Female'), (15, 'Lavinia Fontana', 'Female'), (16, 'Fede Galizia', 'Female'), (17, 'Artemisia Gentileschi', 'Female'), (18, 'Judith Leyster', 'Female'), (19, 'Rachel Ruysch', 'Female'), (20, 'Clara Peeters', 'Female');","SELECT AVG(price) FROM ImpressionismPaintings AS IP
JOIN Artists AS A
ON IP.artistID = A.artistID
WHERE A.gender = 'Female' AND IP.movement = 'Impressionism' AND IP.year = 2018;",This query joins the ImpressionismPaintings and Artists tables on the artistID to filter for female artists and paintings from the Impressionism movement in 2018. It then calculates and returns the average price of those paintings.
223,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 5 most expensive paintings sold in the Impressionism movement across all years.,"CREATE TABLE ImpressionismPaintings (paintingID INT PRIMARY KEY, artistID INT, movement VARCHAR(255), price DECIMAL(10,2), year INT); 
CREATE TABLE Artists (artistID INT PRIMARY KEY, name VARCHAR(255), gender VARCHAR(255));
INSERT INTO ImpressionismPaintings (paintingID, artistID, movement, price, year) VALUES (1, 1, 'Impressionism', 1000000, 2018), (2, 2, 'Impressionism', 500000, 2018), (3, 3, 'Impressionism', 750000, 2018), (4, 4, 'Impressionism', 1250000, 2018), (5, 5, 'Impressionism', 250000, 2018), (6, 6, 'Impressionism', 1500000, 2018), (7, 7, 'Impressionism', 350000, 2018), (8, 8, 'Impressionism', 400000, 2018), (9, 9, 'Impressionism', 600000, 2018), (10, 10, 'Impressionism', 800000, 2018), (11, 11, 'Impressionism', 200000, 2018), (12, 12, 'Impressionism', 900000, 2018), (13, 13, 'Impressionism', 1100000, 2018), (14, 14, 'Impressionism', 550000, 2018), (15, 15, 'Impressionism', 700000, 2018), (16, 16, 'Impressionism', 1300000, 2018), (17, 17, 'Impressionism', 450000, 2018), (18, 18, 'Impressionism', 650000, 2018), (19, 19, 'Impressionism', 1400000, 2018), (20, 20, 'Impressionism', 850000, 2018);
INSERT INTO Artists (artistID, name, gender) VALUES (1, 'Claude Monet', 'Male'), (2, 'Pierre-Auguste Renoir', 'Male'), (3, 'Edgar Degas', 'Male'), (4, 'Camille Pissarro', 'Male'), (5, 'Alfred Sisley', 'Male'), (6, 'Paul Cézanne', 'Male'), (7, 'Berthe Morisot', 'Female'), (8, 'Mary Cassatt', 'Female'), (9, 'Eva Gonzalès', 'Female'), (10, 'Marie Bracquemond', 'Female'), (11, 'Lilla Cabot Perry', 'Female'), (12, 'Anna Klumpke', 'Female'), (13, 'Marie Louise Catherine Breslau', 'Female'), (14, 'Sofonisba Anguissola', 'Female'), (15, 'Lavinia Fontana', 'Female'), (16, 'Fede Galizia', 'Female'), (17, 'Artemisia Gentileschi', 'Female'), (18, 'Judith Leyster', 'Female'), (19, 'Rachel Ruysch', 'Female'), (20, 'Clara Peeters', 'Female');","SELECT paintingID, artistID, movement, price, year
FROM ImpressionismPaintings
ORDER BY price DESC
LIMIT 5;","This query selects the paintingID, artistID, movement, price, and year for the top 5 most expensive paintings in the ImpressionismPaintings table, ordered by price in descending order."
224,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","How many female artists have exhibited at the Musée d'Orsay since its opening, and how does this compare to the total number of artists exhibited?","CREATE TABLE Artist (  artistid INT PRIMARY KEY,  name VARCHAR(255) NOT NULL,  gender VARCHAR(10) NOT NULL,  birth_year INT,  death_year INT);CREATE TABLE Exhibition (  exhibitionid INT PRIMARY KEY,  title VARCHAR(255) NOT NULL,  start_date DATE,  end_date DATE,  museumid INT REFERENCES Museum(museumid),  curatorid INT REFERENCES Curator(curatorid));CREATE TABLE ArtistExhibition (  artistid INT REFERENCES Artist(artistid),  exhibitionid INT REFERENCES Exhibition(exhibitionid),  PRIMARY KEY (artistid, exhibitionid));CREATE TABLE Museum (  museumid INT PRIMARY KEY,  name VARCHAR(255) NOT NULL,  city VARCHAR(255) NOT NULL,  country VARCHAR(255) NOT NULL);CREATE TABLE Curator (  curatorid INT PRIMARY KEY,  name VARCHAR(255) NOT NULL);INSERT INTO Artist (artistid, name, gender, birth_year, death_year) VALUES  (1, 'Claude Monet', 'M', 1840, 1926),  (2, 'Pierre-Auguste Renoir', 'M', 1841, 1919),  (3, 'Edgar Degas', 'M', 1834, 1917),  (4, 'Mary Cassatt', 'F', 1844, 1926),  (5, 'Berthe Morisot', 'F', 1841, 1895),  (6, 'Camille Pissarro', 'M', 1830, 1903),  (7, 'Paul Cézanne', 'M', 1839, 1906),  (8, 'Vincent van Gogh', 'M', 1853, 1890),  (9, 'Paul Gauguin', 'M', 1848, 1903),  (10, 'Georges Seurat', 'M', 1859, 1891);INSERT INTO Exhibition (exhibitionid, title, start_date, end_date, museumid, curatorid) VALUES  (1, 'Impressionism: A New Generation', '1999-03-15', '1999-06-13', 1, 5),  (2, 'The Post-Impressionists: Van Gogh, Gauguin, Cézanne', '2001-09-18', '2002-01-13', 1, 7),  (3, 'Women Impressionists', '2008-04-15', '2008-07-27', 1, 9),  (4, 'Monet and the Water Lilies', '2010-05-11', '2010-09-12', 1, 11),  (5, 'Degas and the Dance', '2012-10-16', '2013-02-10', 1, 13);INSERT INTO ArtistExhibition (artistid, exhibitionid) VALUES  (1, 1),  (1, 4),  (2, 1),  (2, 2),  (3, 2),  (3, 5),  (4, 3),  (4, 5),  (5, 3),  (6, 1),  (6, 2),  (7, 2),  (8, 2),  (9, 2),  (10, 2);",SELECT COUNT(DISTINCT T3.artistid) FROM Exhibition AS T1  INNER JOIN ArtistExhibition AS T2 ON T1.exhibitionid = T2.exhibitionid  INNER JOIN Artist AS T3 ON T3.artistid = T2.artistid  WHERE T1.museumid = 1 AND T3.gender = 'F';,"This SQL query first joins the Exhibition table with the ArtistExhibition table on the exhibitionid column. This gives us a table of all artists who have exhibited at the Musée d'Orsay. We then join this table with the Artist table on the artistid column. This gives us a table of all artists who have exhibited at the Musée d'Orsay, along with their gender. We then filter this table to only include female artists. Finally, we count the number of distinct artists in this table. This gives us the number of female artists who have exhibited at the Musée d'Orsay since its opening."
225,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What are the top 10 crops grown in California in terms of total acreage?,"CREATE TABLE California_Crops (   crop_name VARCHAR(255),   acres_planted FLOAT,   county VARCHAR(255),   year INT);  INSERT INTO California_Crops (crop_name, acres_planted, county, year) VALUES ('Almonds', 1000000, 'Fresno', 2022);  INSERT INTO California_Crops (crop_name, acres_planted, county, year) VALUES ('Grapes', 500000, 'Kern', 2022);  INSERT INTO California_Crops (crop_name, acres_planted, county, year) VALUES ('Strawberries', 250000, 'Ventura', 2022);  INSERT INTO California_Crops (crop_name, acres_planted, county, year) VALUES ('Tomatoes', 150000, 'San Joaquin', 2022);  INSERT INTO California_Crops (crop_name, acres_planted, county, year) VALUES ('Lettuce', 100000, 'Monterey', 2022);  CREATE TABLE US_Crops (   crop_name VARCHAR(255),   acres_planted FLOAT,   state VARCHAR(255),   year INT);  INSERT INTO US_Crops (crop_name, acres_planted, state, year) VALUES ('Corn', 90000000, 'Iowa', 2022);  INSERT INTO US_Crops (crop_name, acres_planted, state, year) VALUES ('Soybeans', 80000000, 'Illinois', 2022);  INSERT INTO US_Crops (crop_name, acres_planted, state, year) VALUES ('Wheat', 50000000, 'Kansas', 2022);  INSERT INTO US_Crops (crop_name, acres_planted, state, year) VALUES ('Cotton', 12000000, 'Texas', 2022);  INSERT INTO US_Crops (crop_name, acres_planted, state, year) VALUES ('Rice', 2000000, 'Arkansas', 2022);","WITH CaliforniaCropsSummary AS (   SELECT crop_name, SUM(acres_planted) AS total_acres   FROM California_Crops   WHERE year = 2022   GROUP BY crop_name), RankedCaliforniaCrops AS (   SELECT crop_name, total_acres, RANK() OVER (ORDER BY total_acres DESC) AS rank   FROM CaliforniaCropsSummary) SELECT crop_name, total_acres FROM RankedCaliforniaCrops WHERE rank <= 10;  ",1. Create a CTE (Common Table Expression) called CaliforniaCropsSummary to calculate the total acreage for each crop in California in 2022.  2. Create another CTE called RankedCaliforniaCrops to rank the crops based on their total acreage in descending order.  3. Select the crop name and total acreage for the top 10 ranked crops from RankedCaliforniaCrops.
226,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","What is the average yield of wheat in Kansas, by county, for the past five years?","CREATE TABLE wheat_yields AS
SELECT
    year,
    county,
    yield
FROM
    raw_wheat_yields
WHERE
    state = 'Kansas';

CREATE VIEW wheat_yields_by_county AS
SELECT
    year,
    county,
    AVG(yield) AS average_yield
FROM
    wheat_yields
GROUP BY
    year,
    county;","SELECT
    year,
    county,
    average_yield
FROM
    wheat_yields_by_county
WHERE
    year IN (2018, 2019, 2020, 2021, 2022)
ORDER BY
    year,
    county;","This SQL query first selects the relevant data from the `wheat_yields_by_county` view, which provides the average yield of wheat by county for each year. The query then filters this data to only include the past five years (2018-2022) and orders the results by year and county."
227,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Which crops had the highest yields in a specific region during a particular year and how did they vary across different farm sizes?,"CREATE TABLE `crops` (  `crop_id` INT NOT NULL AUTO_INCREMENT,  `crop_name` VARCHAR(100) NOT NULL,  `region_id` INT NOT NULL,  `year` INT NOT NULL,  `yield` DECIMAL(8, 2) NOT NULL,  PRIMARY KEY (`crop_id`),  FOREIGN KEY (`region_id`) REFERENCES `regions`(`region_id`));
CREATE TABLE `regions` (  `region_id` INT NOT NULL AUTO_INCREMENT,  `region_name` VARCHAR(100) NOT NULL,  PRIMARY KEY (`region_id`));
CREATE TABLE `farms` (  `farm_id` INT NOT NULL AUTO_INCREMENT,  `farm_size` INT NOT NULL,  `region_id` INT NOT NULL,  `year` INT NOT NULL,  PRIMARY KEY (`farm_id`),  FOREIGN KEY (`region_id`) REFERENCES `regions`(`region_id`));
CREATE VIEW `crop_yields_by_farm_size` AS  SELECT  `c`.`crop_name`,  `r`.`region_name`,  `f`.`farm_size`,  `c`.`yield` AS `crop_yield` FROM  `crops` AS `c`  JOIN `regions` AS `r` ON `c`.`region_id` = `r`.`region_id`  JOIN `farms` AS `f` ON `c`.`region_id` = `f`.`region_id` AND `c`.`year` = `f`.`year`;","WITH TopYields AS (
    SELECT
        crop_name,
        region_name,
        farm_size,
        yield,
        ROW_NUMBER() OVER (PARTITION BY region_name, year ORDER BY yield DESC) AS rank
    FROM
        crop_yields_by_farm_size
)
SELECT
    crop_name,
    region_name,
    farm_size,
    yield
FROM
    TopYields
WHERE
    rank = 1
    AND region_name = 'Pacific Northwest'
ORDER BY
    yield DESC;","**Step 1: Create a Common Table Expression (CTE) called `TopYields`**
This CTE selects all necessary data from the `crop_yields_by_farm_size` view, including crop name, region name, farm size, yield, and ranks each crop within each region and year based on yield in descending order.

**Step 2: Select the top yield for each crop in each region**
The main query selects data from the `TopYields` CTE, filtering for the top-ranked crop (rank = 1) in the specified region ('Pacific Northwest'). The results are ordered by yield in descending order to show the highest-yielding crops first.
"
228,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Analyze the impact of different farming practices (e.g., organic vs. conventional) on crop yields and resource use for a specific crop in a given region over a period of time.","CREATE TABLE `crops` (  `crop_id` INT NOT NULL AUTO_INCREMENT,  `crop_name` VARCHAR(100) NOT NULL,  `region_id` INT NOT NULL,  `year` INT NOT NULL,  `yield` DECIMAL(8, 2) NOT NULL,  `farming_practice` VARCHAR(50) NOT NULL,  PRIMARY KEY (`crop_id`),  FOREIGN KEY (`region_id`) REFERENCES `regions`(`region_id`));
CREATE TABLE `regions` (  `region_id` INT NOT NULL AUTO_INCREMENT,  `region_name` VARCHAR(100) NOT NULL,  PRIMARY KEY (`region_id`));
CREATE TABLE `resources` (  `resource_id` INT NOT NULL AUTO_INCREMENT,  `resource_name` VARCHAR(100) NOT NULL,  `region_id` INT NOT NULL,  `year` INT NOT NULL,  `amount_used` DECIMAL(8, 2) NOT NULL,  PRIMARY KEY (`resource_id`),  FOREIGN KEY (`region_id`) REFERENCES `regions`(`region_id`));","WITH CropYieldsAndResourceUse AS (
    SELECT
        c.crop_name,
        r.region_name,
        c.year,
        c.farming_practice,
        c.yield,
        SUM(res.amount_used) AS resource_use
    FROM
        crops AS c
    JOIN regions AS r ON c.region_id = r.region_id
    JOIN resources AS res ON c.region_id = res.region_id AND c.year = res.year
    GROUP BY
        c.crop_name,
        r.region_name,
        c.year,
        c.farming_practice
)
SELECT
    cyru.crop_name,
    cyru.region_name,
    cyru.year,
    cyru.farming_practice,
    cyru.yield,
    cyru.resource_use
FROM
    CropYieldsAndResourceUse AS cyru
WHERE
    cyru.crop_name = 'Wheat'
    AND cyru.region_name = 'Midwest'
ORDER BY
    cyru.year, cyru.farming_practice;","**Step 1: Create a Common Table Expression (CTE) called `CropYieldsAndResourceUse`**
This CTE joins the `crops`, `regions`, and `resources` tables to calculate the total resource use for each crop, region, year, and farming practice combination. It groups the data by these factors and uses the `SUM()` function to aggregate resource amounts.

**Step 2: Select and filter data for the specified crop and region**
The main query selects data from the `CropYieldsAndResourceUse` CTE, filtering for the specified crop ('Wheat') and region ('Midwest'). The results are ordered by year and farming practice to facilitate analysis of trends over time and across different practices.
"
229,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Show me a comparison of average corn yields in the United States and China over the past five years, highlighting the impact of weather patterns on each country's production.","CREATE TABLE Yields (country VARCHAR(100), year INT, yield INT);
INSERT INTO Yields VALUES ('United States', 2018, 180), ('United States', 2019, 175), ('United States', 2020, 190), ('United States', 2021, 185), ('United States', 2022, 188), ('China', 2018, 150), ('China', 2019, 145), ('China', 2020, 160), ('China', 2021, 155), ('China', 2022, 165);
CREATE TABLE Weather (country VARCHAR(100), year INT, rainfall INT, temperature FLOAT);
INSERT INTO Weather VALUES ('United States', 2018, 600, 25.5), ('United States', 2019, 550, 26.0), ('United States', 2020, 650, 25.0), ('United States', 2021, 500, 27.0), ('United States', 2022, 620, 25.5), ('China', 2018, 500, 22.0), ('China', 2019, 450, 23.0), ('China', 2020, 550, 22.5), ('China', 2021, 400, 24.0), ('China', 2022, 520, 22.5);","WITH YearlyYields AS (
  SELECT country, year, AVG(yield) AS average_yield
  FROM Yields
  GROUP BY country, year
),
WeatherImpact AS (
  SELECT country, year, rainfall, temperature, AVG(yield) AS average_yield
  FROM Yields
  JOIN Weather ON Yields.country = Weather.country AND Yields.year = Weather.year
  GROUP BY country, year
),
CombinedData AS (
  SELECT YY.country, YY.year, YY.average_yield AS us_average, WI.average_yield AS china_average, WI.rainfall AS china_rainfall, WI.temperature AS china_temperature
  FROM YearlyYields YY
  JOIN WeatherImpact WI ON YY.country = WI.country AND YY.year = WI.year
  WHERE YY.country = 'United States'
)
SELECT CD.year, CD.us_average, CD.china_average, CD.china_rainfall, CD.china_temperature
FROM CombinedData CD
ORDER BY CD.year;","This SQL query compares average corn yields in the United States and China over the past five years. It does this by:

1. **Calculating yearly average yields for each country:** First, a common table expression (CTE) called `YearlyYields` is created. This CTE calculates the average yield for each year in each country. This helps to reduce the amount of code that needs to be written later on.
2. **Analyzing the impact of weather on yields:** Another CTE called `WeatherImpact` is created. This CTE joins the `Yields` table with the `Weather` table to analyze the impact of rainfall and temperature on yields. It calculates the average yield for each year in each country, taking into account the weather conditions.
3. **Combining the data for comparison:** A final CTE called `CombinedData` is created. This CTE joins the `YearlyYields` and `WeatherImpact` CTEs to bring together the average yield data for both countries, along with the weather data for China. It allows for a direct comparison of yields and weather conditions between the two countries.
4. **Selecting and sorting the data:** Finally, the query selects the year, US average yield, China average yield, China rainfall, and China temperature from the `CombinedData` CTE. It then orders the results by year, making it easy to see how the yields and weather conditions have changed over time in each country."
230,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Based on the prescriptions written by Dr. Smith in the last month, what are the top 5 most frequently prescribed medications?","CREATE TABLE prescriptions (  prescription_id INT PRIMARY KEY,  patient_id INT,  doctor_id INT,  medication_name VARCHAR(255),  date_prescribed DATE,  FOREIGN KEY (patient_id) REFERENCES patients(patient_id),  FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id) );
CREATE TABLE medications (  medication_id INT PRIMARY KEY,  medication_name VARCHAR(255),  description TEXT,  side_effects TEXT );
CREATE TABLE doctors (  doctor_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  specialty VARCHAR(255) );
CREATE TABLE patients (  patient_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  date_of_birth DATE,  address VARCHAR(255) );
INSERT INTO doctors (doctor_id, first_name, last_name, specialty) VALUES
(1, 'John', 'Smith', 'Cardiologist'),
(2, 'Jane', 'Doe', 'Dermatologist'),
(3, 'Michael', 'Brown', 'Neurologist');
INSERT INTO medications (medication_id, medication_name, description, side_effects) VALUES
(1, 'Aspirin', 'Pain reliever', 'Stomach upset'),
(2, 'Ibuprofen', 'Pain reliever', 'Headache'),
(3, 'Acetaminophen', 'Pain reliever', 'Nausea'),
(4, 'Amoxicillin', 'Antibiotic', 'Diarrhea'),
(5, 'Zolpidem', 'Sleeping pill', 'Drowsiness');
INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address) VALUES
(1, 'Alice', 'Johnson', '1980-01-01', '123 Main St'),
(2, 'Bob', 'Williams', '1975-02-02', '456 Elm St'),
(3, 'Charlie', 'Brown', '1990-03-03', '789 Oak St');
INSERT INTO prescriptions (prescription_id, patient_id, doctor_id, medication_name, date_prescribed) VALUES
(1, 1, 1, 'Aspirin', '2023-09-01'),
(2, 2, 1, 'Ibuprofen', '2023-09-02'),
(3, 3, 1, 'Acetaminophen', '2023-09-03'),
(4, 1, 2, 'Amoxicillin', '2023-09-04'),
(5, 2, 2, 'Zolpidem', '2023-09-05'),
(6, 3, 1, 'Aspirin', '2023-09-06'),
(7, 1, 1, 'Ibuprofen', '2023-09-07'),
(8, 2, 1, 'Acetaminophen', '2023-09-08'),
(9, 3, 2, 'Amoxicillin', '2023-09-09'),
(10, 1, 2, 'Zolpidem', '2023-09-10');","SELECT medication_name, COUNT(*) AS num_prescriptions
FROM prescriptions
WHERE doctor_id = 1 AND date_prescribed BETWEEN DATE('now', '-1 month') AND DATE('now')
GROUP BY medication_name
ORDER BY num_prescriptions DESC
LIMIT 5;","This SQL query selects the medication name and the number of prescriptions written for each medication by Dr. Smith in the last month. It achieves this by:

1. Filtering the prescriptions table to include only prescriptions written by Dr. Smith (doctor_id = 1) and within the last month (date_prescribed between the current date and one month ago).
2. Grouping the results by medication name to count the number of prescriptions for each medication.
3. Ordering the results in descending order of the number of prescriptions (num_prescriptions).
4. Limiting the results to the top 5 most frequently prescribed medications."
231,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Who are the patients that have an order for a prescription for lisinopril and metformin together?,"CREATE TABLE drug_order ( order_id INT PRIMARY KEY, patient_id INT, drug_name VARCHAR(255), order_date DATE, FOREIGN KEY (patient_id) REFERENCES patient(patient_id) );
INSERT INTO drug_order (order_id, patient_id, drug_name, order_date) VALUES
(1, 101, 'lisinopril', '2023-01-15'),
(2, 102, 'metformin', '2023-01-18'),
(3, 103, 'lisinopril', '2023-01-20'),
(4, 104, 'metformin', '2023-01-22'),
(5, 101, 'lisinopril', '2023-02-01'),
(6, 102, 'metformin', '2023-02-05'),
(7, 105, 'lisinopril', '2023-02-08'),
(8, 106, 'metformin', '2023-02-10'),
(9, 101, 'lisinopril', '2023-03-01'),
(10, 102, 'metformin', '2023-03-05');

CREATE TABLE patient ( patient_id INT PRIMARY KEY, patient_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT );
INSERT INTO patient (patient_id, patient_name, date_of_birth, address, city, state, zipcode) VALUES
(101, 'John Smith', '1970-05-10', '123 Main St', 'Anytown', 'CA', 91234),
(102, 'Alice Johnson', '1980-07-15', '456 Oak Ave', 'Anytown', 'CA', 91234),
(103, 'Bob Williams', '1965-12-20', '789 Pine St', 'Anytown', 'CA', 91234),
(104, 'Emily Davis', '1990-03-25', '1011 Elm St', 'Anytown', 'CA', 91234),
(105, 'David Garcia', '1975-08-12', '1213 Willow St', 'Anytown', 'CA', 91234),
(106, 'Elizabeth Rodriguez', '1985-04-18', '1415 Maple St', 'Anytown', 'CA', 91234);","SELECT p.patient_name
FROM patient p
JOIN drug_order do ON p.patient_id = do.patient_id
WHERE do.drug_name = 'lisinopril'
INTERSECT
SELECT p.patient_name
FROM patient p
JOIN drug_order do ON p.patient_id = do.patient_id
WHERE do.drug_name = 'metformin';","This query first selects the names of patients who have an order for lisinopril. Then, it selects the names of patients who have an order for metformin. Finally, it uses the INTERSECT operator to find the patients who have orders for both lisinopril and metformin. The query assumes that there is a table called drug_order with columns for order_id, patient_id, drug_name, and order_date, and a table called patient with columns for patient_id, patient_name, date_of_birth, address, city, state, and zipcode."
232,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",How many people in India over age 60 years have chronic diabetes?,"CREATE TABLE patients (
    patient_id INT PRIMARY KEY,
    name VARCHAR(255),
    age INT,
    gender VARCHAR(10),
    country VARCHAR(255),
    disease VARCHAR(255)
);

INSERT INTO patients (patient_id, name, age, gender, country, disease)
VALUES
    (1, 'Alice', 35, 'Female', 'USA', 'Asthma'),
    (2, 'Bob', 52, 'Male', 'Canada', 'Hypertension'),
    (3, 'Charlie', 28, 'Male', 'UK', 'None'),
    (4, 'David', 71, 'Male', 'India', 'Diabetes'),
    (5, 'Emily', 45, 'Female', 'Australia', 'Arthritis'),
    (6, 'Frank', 67, 'Male', 'USA', 'Diabetes'),
    (7, 'Grace', 39, 'Female', 'Canada', 'None'),
    (8, 'Henry', 58, 'Male', 'UK', 'Asthma'),
    (9, 'Isabella', 24, 'Female', 'India', 'None'),
    (10, 'Jack', 75, 'Male', 'Australia', 'Heart disease'),
    (11, 'Katherine', 42, 'Female', 'USA', 'None'),
    (12, 'Liam', 63, 'Male', 'Canada', 'Diabetes'),
    (13, 'Mia', 31, 'Female', 'UK', 'None'),
    (14, 'Noah', 80, 'Male', 'India', 'Diabetes'),
    (15, 'Olivia', 50, 'Female', 'Australia', 'Arthritis');

CREATE TABLE demographics (
    country VARCHAR(255) PRIMARY KEY,
    population INT,
    median_age INT
);

INSERT INTO demographics (country, population, median_age)
VALUES
    ('USA', 330000000, 38),
    ('Canada', 38000000, 41),
    ('UK', 67000000, 40),
    ('India', 1380000000, 29),
    ('Australia', 26000000, 37);","SELECT count(*) FROM patients
WHERE country = 'India' AND age > 60 AND disease = 'Diabetes';","This SQL query selects the count of patients from the 'patients' table where the country is 'India', age is greater than 60, and the disease is 'Diabetes'."
233,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What type of cancers are most common among young females between the ages of 18-25 in the state of California?,"CREATE TABLE patient_demographics (
    patient_id INT PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    date_of_birth DATE,
    gender VARCHAR(10),
    address VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    zip_code INT
);

CREATE TABLE diagnoses (
    diagnosis_id INT PRIMARY KEY,
    patient_id INT,
    diagnosis_date DATE,
    diagnosis_code VARCHAR(255),
    diagnosis_description VARCHAR(255),
    FOREIGN KEY (patient_id) REFERENCES patient_demographics(patient_id)
);

INSERT INTO patient_demographics (patient_id, first_name, last_name, date_of_birth, gender, address, city, state, zip_code) VALUES
(1, 'Alice', 'Smith', '1998-03-15', 'Female', '123 Main St', 'Los Angeles', 'CA', 90012),
(2, 'Bob', 'Johnson', '1995-07-22', 'Male', '456 Oak Ave', 'San Diego', 'CA', 92101),
(3, 'Charlie', 'Brown', '1997-11-08', 'Male', '789 Pine St', 'San Francisco', 'CA', 94102),
(4, 'Diana', 'Garcia', '2000-05-19', 'Female', '1011 Willow St', 'Sacramento', 'CA', 95814),
(5, 'Emily', 'Thomas', '1999-09-27', 'Female', '1213 Maple St', 'Oakland', 'CA', 94607);

INSERT INTO diagnoses (diagnosis_id, patient_id, diagnosis_date, diagnosis_code, diagnosis_description) VALUES
(1, 1, '2023-01-15', 'C50.9', 'Malignant neoplasm of breast, unspecified'),
(2, 2, '2022-08-07', 'C18.9', 'Malignant neoplasm of colon, unspecified'),
(3, 3, '2021-12-21', 'C43.3', 'Malignant melanoma of skin of trunk'),
(4, 4, '2020-04-12', 'C57.0', 'Malignant neoplasm of ovary'),
(5, 5, '2019-06-28', 'C34.9', 'Malignant neoplasm of lung, unspecified');","SELECT d.diagnosis_description, COUNT(*) AS num_cases
FROM diagnoses d
JOIN patient_demographics pd ON d.patient_id = pd.patient_id
WHERE pd.gender = 'Female' AND pd.state = 'CA' AND pd.date_of_birth BETWEEN '1998-01-01' AND '2005-12-31'
GROUP BY d.diagnosis_description
ORDER BY num_cases DESC
LIMIT 5;","This SQL query aims to find the five most common types of cancer among young females (aged 18-25) in California.

1. It starts by joining the `diagnoses` and `patient_demographics` tables on the `patient_id` column.
2. It filters the results to include only female patients in California whose date of birth falls between 1998-01-01 and 2005-12-31.
3. It groups the results by the `diagnosis_description` and counts the number of cases for each diagnosis.
4. It orders the results in descending order of the number of cases.
5. It limits the output to the top 5 most common diagnoses."
234,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average age of patients with diabetes in the state of California?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), age INT, address VARCHAR(255), state VARCHAR(255), diagnosis VARCHAR(255));
CREATE TABLE diabetes (patient_id INT PRIMARY KEY, diagnosis_date DATE, type VARCHAR(255));
INSERT INTO patients (patient_id, name, age, address, state, diagnosis) VALUES (1, 'John Doe', 55, '123 Main St, Los Angeles, CA', 'CA', 'Diabetes'), (2, 'Jane Smith', 42, '456 Oak Ave, San Francisco, CA', 'CA', 'Asthma'), (3, 'Michael Brown', 30, '789 Pine St, San Diego, CA', 'CA', 'Heart Disease');
INSERT INTO diabetes (patient_id, diagnosis_date, type) VALUES (1, '2023-01-15', 'Type 2');",SELECT AVG(p.age) FROM patients p JOIN diabetes d ON p.patient_id = d.patient_id WHERE p.state = 'CA' AND d.type = 'Type 2';,"This query joins the patients and diabetes tables on the patient_id column. It then filters the results to only include patients in California with a diagnosis of Type 2 diabetes. Finally, it calculates the average age of these patients."
235,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Which states had the highest average yield for corn in 2022, and what was the average yield for each of those states?","CREATE TABLE corn_yields ( state VARCHAR(255), year INT, yield_per_acre INT );
INSERT INTO corn_yields (state, year, yield_per_acre) VALUES ('Iowa', 2021, 175), ('Illinois', 2021, 170), ('Nebraska', 2021, 165), ('Iowa', 2022, 180), ('Illinois', 2022, 175), ('Nebraska', 2022, 170), ('Minnesota', 2022, 160), ('South Dakota', 2022, 155), ('Indiana', 2022, 150);","SELECT state, AVG(yield_per_acre) AS average_yield FROM corn_yields WHERE year = 2022 GROUP BY state HAVING average_yield >= (SELECT MAX(average_yield) FROM corn_yields WHERE year = 2022) ORDER BY average_yield DESC;","This query first calculates the average yield per acre for corn in each state for the year 2022. Then, it filters the results to only include states with an average yield greater than or equal to the maximum average yield. Finally, it orders the results by average yield in descending order."
236,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many acres of soybeans were planted in each county in Iowa in 2022?,"CREATE TABLE soybean_acreage ( county VARCHAR(255), state VARCHAR(255), year INT, acres_planted INT );
INSERT INTO soybean_acreage (county, state, year, acres_planted) VALUES ('Buena Vista', 'Iowa', 2021, 150000), ('Calhoun', 'Iowa', 2021, 140000), ('Cerro Gordo', 'Iowa', 2021, 130000), ('Buena Vista', 'Iowa', 2022, 155000), ('Calhoun', 'Iowa', 2022, 145000), ('Cerro Gordo', 'Iowa', 2022, 135000), ('Pocahontas', 'Iowa', 2022, 120000), ('Wright', 'Iowa', 2022, 115000), ('Humboldt', 'Iowa', 2022, 110000);","SELECT county, SUM(acres_planted) AS total_acres FROM soybean_acreage WHERE state = 'Iowa' AND year = 2022 GROUP BY county ORDER BY total_acres DESC;","This query first filters the soybean_acreage table to only include data for Iowa in 2022. Then, it groups the data by county and calculates the sum of acres planted for each county. Finally, it orders the results by total acres in descending order."
237,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What was the average temperature in each month of 2022 for the state of California?,"CREATE TABLE weather_data ( state VARCHAR(255), month INT, year INT, average_temperature FLOAT );
INSERT INTO weather_data (state, month, year, average_temperature) VALUES ('California', 1, 2021, 55.5), ('California', 2, 2021, 58.7), ('California', 3, 2021, 62.1), ('California', 1, 2022, 56.2), ('California', 2, 2022, 59.5), ('California', 3, 2022, 63.0), ('Texas', 1, 2022, 50.2), ('Texas', 2, 2022, 54.1), ('Texas', 3, 2022, 60.8);","SELECT month, AVG(average_temperature) AS average_monthly_temperature FROM weather_data WHERE state = 'California' AND year = 2022 GROUP BY month ORDER BY month ASC;","This query first filters the weather_data table to only include data for California in 2022. Then, it groups the data by month and calculates the average temperature for each month. Finally, it orders the results by month in ascending order."
238,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What were the top 10 crops grown in the United States in terms of total acreage in 2022?,"CREATE TABLE crop_acreage ( crop VARCHAR(255), year INT, acres_planted INT );
INSERT INTO crop_acreage (crop, year, acres_planted) VALUES ('Corn', 2021, 90000000), ('Soybeans', 2021, 83000000), ('Wheat', 2021, 45000000), ('Cotton', 2021, 13000000), ('Alfalfa', 2021, 12000000), ('Hay', 2021, 50000000), ('Rice', 2021, 20000000), ('Barley', 2021, 8000000), ('Sorghum', 2021, 7000000), ('Oats', 2021, 6000000), ('Corn', 2022, 92000000), ('Soybeans', 2022, 85000000), ('Wheat', 2022, 46000000), ('Cotton', 2022, 13500000), ('Alfalfa', 2022, 12500000), ('Hay', 2022, 51000000), ('Rice', 2022, 21000000), ('Barley', 2022, 8500000), ('Sorghum', 2022, 7500000), ('Oats', 2022, 6500000);","SELECT crop, SUM(acres_planted) AS total_acres FROM crop_acreage WHERE year = 2022 GROUP BY crop ORDER BY total_acres DESC LIMIT 10;","This query first filters the crop_acreage table to only include data for 2022. Then, it groups the data by crop and calculates the sum of acres planted for each crop. Finally, it orders the results by total acres in descending order and limits the output to the top 10 crops."
239,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What was the average price of corn per bushel in the state of Iowa in 2022?,"CREATE TABLE corn_prices ( state VARCHAR(255), month INT, year INT, price_per_bushel FLOAT );
INSERT INTO corn_prices (state, month, year, price_per_bushel) VALUES ('Iowa', 1, 2021, 5.50), ('Iowa', 2, 2021, 5.75), ('Iowa', 3, 2021, 6.00), ('Iowa', 1, 2022, 5.60), ('Iowa', 2, 2022, 5.85), ('Iowa', 3, 2022, 6.10), ('Illinois', 1, 2022, 5.55), ('Illinois', 2, 2022, 5.80), ('Illinois', 3, 2022, 6.05);",SELECT AVG(price_per_bushel) AS average_price FROM corn_prices WHERE state = 'Iowa' AND year = 2022;,"This query first filters the corn_prices table to only include data for Iowa in 2022. Then, it calculates the average price per bushel of corn."
240,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What were the top 3 trending topics in the cybersecurity community during the past quarter?,"CREATE TABLE trending_topics ( 
    topic_id INT PRIMARY KEY AUTO_INCREMENT, 
    topic_name VARCHAR(255) NOT NULL, 
    discussion_count INT NOT NULL, 
    created_at DATETIME NOT NULL 
);","SELECT topic_name, discussion_count 
FROM trending_topics 
WHERE created_at >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) 
GROUP BY topic_name 
ORDER BY discussion_count DESC 
LIMIT 3;","This query retrieves the top 3 trending topics in the cybersecurity community during the past quarter. 

1. It filters the `trending_topics` table to include records created in the past 3 months using the `created_at` column and the `DATE_SUB()` function. 
2. It groups the results by `topic_name` and counts the number of discussions for each topic using the `COUNT()` function. 
3. It orders the results in descending order of `discussion_count` to identify the most discussed topics. 
4. It limits the output to the top 3 topics using the `LIMIT` clause."
241,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Calculate the average number of vulnerabilities discovered per month for each product category in the past year.,"CREATE TABLE vulnerabilities ( 
    vulnerability_id INT PRIMARY KEY AUTO_INCREMENT, 
    product_category VARCHAR(255) NOT NULL, 
    discovered_at DATETIME NOT NULL 
);","SELECT product_category, AVG(discovered_at) AS average_vulnerabilities_per_month 
FROM vulnerabilities 
WHERE discovered_at >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) 
GROUP BY product_category 
ORDER BY product_category;","This query calculates the average number of vulnerabilities discovered per month for each product category in the past year. 

1. It filters the `vulnerabilities` table to include records created in the past year using the `discovered_at` column and the `DATE_SUB()` function. 
2. It groups the results by `product_category` and calculates the average number of vulnerabilities discovered per month using the `AVG()` function on the `discovered_at` column. 
3. It orders the results by `product_category` to provide an organized view of the data."
242,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Identify the top 5 countries with the highest number of data breaches reported in the last 2 years.,"CREATE TABLE data_breaches ( 
    breach_id INT PRIMARY KEY AUTO_INCREMENT, 
    country VARCHAR(255) NOT NULL, 
    reported_at DATETIME NOT NULL 
);","SELECT country, COUNT(*) AS breach_count 
FROM data_breaches 
WHERE reported_at >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) 
GROUP BY country 
ORDER BY breach_count DESC 
LIMIT 5;","This query identifies the top 5 countries with the highest number of data breaches reported in the last 2 years. 

1. It filters the `data_breaches` table to include records reported in the past 2 years using the `reported_at` column and the `DATE_SUB()` function. 
2. It groups the results by `country` and counts the number of breaches for each country using the `COUNT()` function. 
3. It orders the results in descending order of `breach_count` to identify the countries with the highest number of breaches. 
4. It limits the output to the top 5 countries using the `LIMIT` clause."
243,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 countries with the highest number of registered users for a specific product?,"CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255) NOT NULL, country VARCHAR(255) NOT NULL, product_id INT REFERENCES products(product_id));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, release_date DATE NOT NULL);","SELECT country, COUNT(*) AS num_users FROM users WHERE product_id = (SELECT product_id FROM products WHERE product_name = 'Specific Product') GROUP BY country ORDER BY num_users DESC LIMIT 5;","This SQL query first selects the country and counts the number of users for each country in the 'users' table where the product_id matches the product_id of the 'Specific Product' in the 'products' table. Then, it groups the results by country and orders them in descending order of the number of users. Finally, it limits the output to the top 5 countries with the highest number of users."
244,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What is the average time it takes for customers to receive their orders after placing them?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE NOT NULL, delivery_date DATE);",SELECT AVG(delivery_date - order_date) AS average_delivery_time FROM orders;,"This SQL query calculates the average delivery time by subtracting the order date from the delivery date for each order in the 'orders' table. Then, it takes the average of these differences to get the overall average delivery time."
245,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many customers purchased more than 20 items in the last year?,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), country VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, total_amount DECIMAL(10,2));
CREATE TABLE OrderItems (order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT, price DECIMAL(10,2));","SELECT COUNT(*) FROM Customers WHERE customer_id IN (SELECT customer_id FROM Orders WHERE order_date >= DATE('now', '-1 year') GROUP BY customer_id HAVING SUM(quantity) > 20);","This query first identifies all customers who have placed orders in the last year. Then, it counts the total number of items purchased by each customer during that time period. Finally, it selects the count of customers who purchased more than 20 items."
246,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average order amount for customers in California?,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), country VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, total_amount DECIMAL(10,2));
CREATE TABLE OrderItems (order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT, price DECIMAL(10,2));",SELECT AVG(total_amount) FROM Orders WHERE customer_id IN (SELECT customer_id FROM Customers WHERE state = 'CA');,"This query first identifies all customers who reside in California. Then, it calculates the average order amount for those customers."
247,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 most popular products in terms of total quantity sold?,"CREATE TABLE Products (product_id INT PRIMARY KEY, name VARCHAR(255), description TEXT, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, total_amount DECIMAL(10,2));
CREATE TABLE OrderItems (order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT, price DECIMAL(10,2));","SELECT product_id, name, SUM(quantity) AS total_quantity_sold FROM OrderItems GROUP BY product_id ORDER BY total_quantity_sold DESC LIMIT 5;","This query calculates the total quantity sold for each product and then sorts the results in descending order. Finally, it returns the top 5 products with the highest total quantity sold."
248,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total revenue generated from sales in the month of January?,"CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, total_amount DECIMAL(10,2));",SELECT SUM(total_amount) FROM Orders WHERE order_date >= DATE('2023-01-01') AND order_date < DATE('2023-02-01');,This query filters orders to include only those placed in the month of January and then calculates the sum of the total_amount for those orders.
249,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which products have never been sold?,"CREATE TABLE Products (product_id INT PRIMARY KEY, name VARCHAR(255), description TEXT, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, total_amount DECIMAL(10,2));
CREATE TABLE OrderItems (order_id INT REFERENCES Orders(order_id), product_id INT REFERENCES Products(product_id), quantity INT, price DECIMAL(10,2));","SELECT * FROM Products EXCEPT SELECT product_id, name, description, price, category FROM Products WHERE product_id IN (SELECT product_id FROM OrderItems);",This query uses the EXCEPT operator to identify products that are present in the Products table but not in the OrderItems table. This indicates that these products have never been sold.
250,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the names of all patients who have had an appointment with a doctor in the Cardiology department in the last month, and who have a history of heart disease.","CREATE TABLE patients (  patient_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  birth_date DATE,  address VARCHAR(255),  phone_number VARCHAR(255));
CREATE TABLE appointments (  appointment_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  doctor_id INT REFERENCES doctors(doctor_id),  department_id INT REFERENCES departments(department_id),  appointment_date DATE);CREATE TABLE doctors (  doctor_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  specialty VARCHAR(255));
CREATE TABLE departments (  department_id INT PRIMARY KEY,  department_name VARCHAR(255));
CREATE TABLE medical_history (  patient_id INT REFERENCES patients(patient_id),  diagnosis VARCHAR(255),  date_of_diagnosis DATE);","SELECT p.first_name, p.last_name
FROM patients p
JOIN appointments a ON p.patient_id = a.patient_id
JOIN doctors d ON a.doctor_id = d.doctor_id
JOIN departments dept ON a.department_id = dept.department_id
JOIN medical_history mh ON p.patient_id = mh.patient_id
WHERE dept.department_name = 'Cardiology' AND mh.diagnosis = 'Heart Disease' AND a.appointment_date BETWEEN DATE('now', '-1 month') AND DATE('now');","This query joins five tables: patients, appointments, doctors, departments, and medical_history. It selects the first name and last name of patients who have had an appointment with a doctor in the Cardiology department in the last month and who have a history of heart disease. The query uses a series of inner joins to connect the tables and filters the results based on the specified criteria."
251,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the details of all patients who have been prescribed a specific medication in the last 30 days, along with the name of the prescribing physician, the date of prescription, and the dosage.","CREATE TABLE Patients (  patient_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  date_of_birth DATE,  address VARCHAR(255),  phone_number VARCHAR(255));
CREATE TABLE Medications (  medication_id INT PRIMARY KEY,  medication_name VARCHAR(255),  side_effects VARCHAR(255));
CREATE TABLE Prescriptions (  prescription_id INT PRIMARY KEY,  patient_id INT REFERENCES Patients(patient_id),  medication_id INT REFERENCES Medications(medication_id),  prescribing_physician VARCHAR(255),  date_of_prescription DATE,  dosage VARCHAR(255));
INSERT INTO Patients (patient_id, first_name, last_name, date_of_birth, address, phone_number) VALUES  (1, 'John', 'Doe', '1980-01-01', '123 Main St, Anytown', '555-123-4567'),  (2, 'Jane', 'Smith', '1985-02-02', '456 Oak Ave, Anytown', '555-234-5678'),  (3, 'Mike', 'Jones', '1990-03-03', '789 Elm St, Anytown', '555-345-6789');
INSERT INTO Medications (medication_id, medication_name, side_effects) VALUES  (1, 'Amoxicillin', 'Nausea, diarrhea'),  (2, 'Ibuprofen', 'Headache, stomach upset'),  (3, 'Atorvastatin', 'Muscle pain, headache');
INSERT INTO Prescriptions (prescription_id, patient_id, medication_id, prescribing_physician, date_of_prescription, dosage) VALUES  (1, 1, 1, 'Dr. Smith', '2023-04-01', '500mg twice daily'),  (2, 2, 2, 'Dr. Jones', '2023-04-05', '200mg three times daily'),  (3, 3, 3, 'Dr. Brown', '2023-04-10', '40mg once daily');","SELECT p.first_name, p.last_name, m.medication_name, pr.prescribing_physician, pr.date_of_prescription, pr.dosage
FROM Patients p
JOIN Prescriptions pr ON p.patient_id = pr.patient_id
JOIN Medications m ON pr.medication_id = m.medication_id
WHERE m.medication_name = 'Amoxicillin' AND pr.date_of_prescription BETWEEN DATE('now', '-30 days') AND DATE('now');","This query retrieves the first name, last name, medication name, prescribing physician, date of prescription, and dosage for all patients who have been prescribed Amoxicillin in the last 30 days. It does this by joining the Patients, Prescriptions, and Medications tables on the patient_id and medication_id columns, respectively. The WHERE clause filters the results to only include patients who have been prescribed Amoxicillin and whose prescription date falls within the last 30 days."
252,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List all patients who have been diagnosed with diabetes and have a BMI greater than 30. Also, include their most recent weight measurement.","CREATE TABLE patients (  patient_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  date_of_birth DATE,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  phone_number VARCHAR(255),  email VARCHAR(255),  insurance_provider VARCHAR(255),  insurance_id VARCHAR(255));
CREATE TABLE diagnoses (  diagnosis_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  diagnosis_code VARCHAR(255),  diagnosis_date DATE,  diagnosing_physician VARCHAR(255));
CREATE TABLE medications (  medication_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  medication_name VARCHAR(255),  dosage VARCHAR(255),  start_date DATE,  end_date DATE,  prescribing_physician VARCHAR(255));
CREATE TABLE weight_measurements (  measurement_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  weight FLOAT,  measurement_date DATE);","SELECT p.first_name, p.last_name, MAX(w.weight) AS most_recent_weight
FROM patients p
JOIN diagnoses d ON p.patient_id = d.patient_id
JOIN weight_measurements w ON p.patient_id = w.patient_id
WHERE d.diagnosis_code = 'E11.9' AND w.measurement_date = (SELECT MAX(measurement_date) FROM weight_measurements WHERE patient_id = p.patient_id)
GROUP BY p.patient_id
HAVING AVG(w.weight) > 30;","This query selects the first name, last name, and most recent weight of patients who have been diagnosed with diabetes (diagnosis code E11.9) and have a BMI greater than 30.

The query works by:

1. Joining the `patients` table with the `diagnoses` table on the `patient_id` to get the diagnoses for each patient.
2. Joining the `patients` table with the `weight_measurements` table on the `patient_id` to get the weight measurements for each patient.
3. Filtering the results to only include patients with a diagnosis of diabetes and a weight measurement date that is the most recent for that patient.
4. Grouping the results by patient ID to get the average weight for each patient.
5. Filtering the results to only include patients with an average weight greater than 30."
253,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",I want to extract the medical histories of all patients who are prescribed a drug with side effects that include both diarrhea and nausea.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Address VARCHAR(100), City VARCHAR(50), State VARCHAR(2), ZipCode INT, PhoneNumber VARCHAR(15), Email VARCHAR(50), InsuranceProvider VARCHAR(50), InsuranceID VARCHAR(50));
CREATE TABLE MedicalHistory (PatientID INT REFERENCES Patients(PatientID), Diagnosis VARCHAR(100), DateDiagnosed DATE, Treatment VARCHAR(100), Physician VARCHAR(50), Notes TEXT);
CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(100), Dosage VARCHAR(50), Frequency VARCHAR(50), RouteOfAdministration VARCHAR(50), SideEffects TEXT);
CREATE TABLE Prescriptions (PatientID INT REFERENCES Patients(PatientID), MedicationID INT REFERENCES Medications(MedicationID), DatePrescribed DATE, DateDiscontinued DATE);
CREATE TABLE DrugSideEffects (MedicationID INT REFERENCES Medications(MedicationID), SideEffect VARCHAR(50));
INSERT INTO Medications (MedicationID, MedicationName, Dosage, Frequency, RouteOfAdministration, SideEffects) VALUES (1, 'Amoxicillin', '500mg', 'Twice Daily', 'Oral', 'Diarrhea, Nausea, Headache'), (2, 'Ibuprofen', '200mg', 'Three Times Daily', 'Oral', 'Nausea, Stomach Pain, Dizziness'), (3, 'Atorvastatin', '40mg', 'Once Daily', 'Oral', 'Muscle Pain, Headache, Fatigue');
INSERT INTO DrugSideEffects (MedicationID, SideEffect) VALUES (1, 'Diarrhea'), (1, 'Nausea'), (2, 'Nausea'), (3, 'Headache');","SELECT m.PatientID, p.FirstName, p.LastName, mh.Diagnosis, mh.Treatment, mh.Physician
FROM MedicalHistory mh
JOIN Patients p ON mh.PatientID = p.PatientID
JOIN Prescriptions pr ON p.PatientID = pr.PatientID
JOIN Medications m ON pr.MedicationID = m.MedicationID
JOIN DrugSideEffects dse ON m.MedicationID = dse.MedicationID
WHERE dse.SideEffect IN ('Diarrhea', 'Nausea');","This query retrieves the medical histories of all patients who are prescribed a drug with side effects that include both diarrhea and nausea. It does this by joining the following tables:

*   `Patients`: Contains information about patients, including their ID, first name, last name, date of birth, address, city, state, zip code, phone number, email, insurance provider, and insurance ID.
*   `MedicalHistory`: Contains information about patients' medical histories, including their diagnoses, dates of diagnosis, treatments, physicians, and notes.
*   `Medications`: Contains information about medications, including their ID, name, dosage, frequency, route of administration, and side effects.
*   `Prescriptions`: Contains information about prescriptions, including the patient ID, medication ID, date prescribed, and date discontinued.
*   `DrugSideEffects`: Contains information about the side effects of each medication.

The query first joins the `MedicalHistory` table to the `Patients` table on the `PatientID` column to get information about the patients' medical histories. It then joins the `Prescriptions` table to the `Patients` table on the `PatientID` column to get information about the patients' prescriptions. It then joins the `Medications` table to the `Prescriptions` table on the `MedicationID` column to get information about the medications that were prescribed. Finally, it joins the `DrugSideEffects` table to the `Medications` table on the `MedicationID` column to get information about the side effects of each medication.

The query then filters the results to only include patients who are prescribed a drug with side effects that include both diarrhea and nausea. It does this by checking if the `SideEffect` column in the `DrugSideEffects` table is equal to either 'Diarrhea' or 'Nausea'.

The query then selects the following columns from the joined tables:

*   `m.PatientID`: The ID of the patient.
*   `p.FirstName`: The first name of the patient.
*   `p.LastName`: The last name of the patient.
*   `mh.Diagnosis`: The diagnosis of the patient.
*   `mh.Treatment`: The treatment of the patient.
*   `mh.Physician`: The physician of the patient.

The query returns a table that contains the medical histories of all patients who are prescribed a drug with side effects that include both diarrhea and nausea."
254,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",I would like to update the dosage of a medication for all patients who are taking it and have a specific diagnosis.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Address VARCHAR(100), City VARCHAR(50), State VARCHAR(2), ZipCode INT, PhoneNumber VARCHAR(15), Email VARCHAR(50), InsuranceProvider VARCHAR(50), InsuranceID VARCHAR(50));
CREATE TABLE MedicalHistory (PatientID INT REFERENCES Patients(PatientID), Diagnosis VARCHAR(100), DateDiagnosed DATE, Treatment VARCHAR(100), Physician VARCHAR(50), Notes TEXT);
CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(100), Dosage VARCHAR(50), Frequency VARCHAR(50), RouteOfAdministration VARCHAR(50), SideEffects TEXT);
CREATE TABLE Prescriptions (PatientID INT REFERENCES Patients(PatientID), MedicationID INT REFERENCES Medications(MedicationID), DatePrescribed DATE, DateDiscontinued DATE);
CREATE TABLE DrugSideEffects (MedicationID INT REFERENCES Medications(MedicationID), SideEffect VARCHAR(50));
INSERT INTO Medications (MedicationID, MedicationName, Dosage, Frequency, RouteOfAdministration, SideEffects) VALUES (1, 'Amoxicillin', '500mg', 'Twice Daily', 'Oral', 'Diarrhea, Nausea, Headache'), (2, 'Ibuprofen', '200mg', 'Three Times Daily', 'Oral', 'Nausea, Stomach Pain, Dizziness'), (3, 'Atorvastatin', '40mg', 'Once Daily', 'Oral', 'Muscle Pain, Headache, Fatigue');
INSERT INTO DrugSideEffects (MedicationID, SideEffect) VALUES (1, 'Diarrhea'), (1, 'Nausea'), (2, 'Nausea'), (3, 'Headache');",UPDATE Medications SET Dosage = '1000mg' WHERE MedicationID IN (SELECT m.MedicationID FROM MedicalHistory mh JOIN Prescriptions p ON mh.PatientID = p.PatientID JOIN Medications m ON p.MedicationID = m.MedicationID WHERE mh.Diagnosis = 'Asthma');,"This query updates the dosage of a medication for all patients who are taking it and have a specific diagnosis. It does this by first identifying the medication ID for the medication that needs to be updated. It does this by joining the `MedicalHistory` table to the `Prescriptions` table on the `PatientID` column to get information about the patients' prescriptions. It then joins the `Medications` table to the `Prescriptions` table on the `MedicationID` column to get information about the medications that were prescribed. It then filters the results to only include patients who have a diagnosis of 'Asthma'.

Once the medication ID has been identified, the query updates the dosage of the medication in the `Medications` table to '1000mg'.

The query returns the number of rows that were updated."
255,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table to store information about customers, including their name, address, phone number, and email address.","CREATE TABLE customers (   customer_id INT PRIMARY KEY,   name VARCHAR(255) NOT NULL,   address VARCHAR(255),   phone_number VARCHAR(20),   email_address VARCHAR(255) );","CREATE TABLE customers (   customer_id INT PRIMARY KEY,   name VARCHAR(255) NOT NULL,   address VARCHAR(255),   phone_number VARCHAR(20),   email_address VARCHAR(255) );","This SQL statement creates a table named 'customers' with five columns: 'customer_id', 'name', 'address', 'phone_number', and 'email_address'. The 'customer_id' column is the primary key, which means that each customer must have a unique customer_id. The 'name' column stores the customer's name, and it cannot be null. The 'address', 'phone_number', and 'email_address' columns store the customer's address, phone number, and email address, respectively. These columns can be null."
256,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table to store information about orders, including the order ID, customer ID, order date, and total amount.","CREATE TABLE orders (   order_id INT PRIMARY KEY,   customer_id INT REFERENCES customers(customer_id),   order_date DATE,   total_amount DECIMAL(10,2) );","CREATE TABLE orders (   order_id INT PRIMARY KEY,   customer_id INT REFERENCES customers(customer_id),   order_date DATE,   total_amount DECIMAL(10,2) );","This SQL statement creates a table named 'orders' with four columns: 'order_id', 'customer_id', 'order_date', and 'total_amount'. The 'order_id' column is the primary key, which means that each order must have a unique order_id. The 'customer_id' column references the 'customer_id' column in the 'customers' table, which means that each order must be associated with a customer. The 'order_date' column stores the date the order was placed, and the 'total_amount' column stores the total amount of the order."
257,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table to store information about products, including the product ID, product name, price, and description.","CREATE TABLE products (   product_id INT PRIMARY KEY,   product_name VARCHAR(255) NOT NULL,   price DECIMAL(10,2),   description TEXT );","CREATE TABLE products (   product_id INT PRIMARY KEY,   product_name VARCHAR(255) NOT NULL,   price DECIMAL(10,2),   description TEXT );","This SQL statement creates a table named 'products' with four columns: 'product_id', 'product_name', 'price', and 'description'. The 'product_id' column is the primary key, which means that each product must have a unique product_id. The 'product_name' column stores the name of the product, and it cannot be null. The 'price' column stores the price of the product, and the 'description' column stores a description of the product."
258,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table to store information about order items, including the order ID, product ID, quantity, and price.","CREATE TABLE order_items (   order_id INT REFERENCES orders(order_id),   product_id INT REFERENCES products(product_id),   quantity INT,   price DECIMAL(10,2),   PRIMARY KEY (order_id, product_id) );","CREATE TABLE order_items (   order_id INT REFERENCES orders(order_id),   product_id INT REFERENCES products(product_id),   quantity INT,   price DECIMAL(10,2),   PRIMARY KEY (order_id, product_id) );","This SQL statement creates a table named 'order_items' with four columns: 'order_id', 'product_id', 'quantity', and 'price'. The 'order_id' column references the 'order_id' column in the 'orders' table, and the 'product_id' column references the 'product_id' column in the 'products' table. The 'quantity' column stores the quantity of the product that was ordered, and the 'price' column stores the price of the product at the time it was ordered. The primary key of the 'order_items' table is a composite key made up of the 'order_id' and 'product_id' columns, which means that each order item must be associated with a unique order and product."
259,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a view to show the total number of orders placed by each customer.,"CREATE VIEW customer_order_counts AS   SELECT c.customer_id, c.name, COUNT(o.order_id) AS total_orders   FROM customers c   LEFT JOIN orders o ON c.customer_id = o.customer_id   GROUP BY c.customer_id, c.name   ORDER BY total_orders DESC;","CREATE VIEW customer_order_counts AS   SELECT c.customer_id, c.name, COUNT(o.order_id) AS total_orders   FROM customers c   LEFT JOIN orders o ON c.customer_id = o.customer_id   GROUP BY c.customer_id, c.name   ORDER BY total_orders DESC;","This SQL statement creates a view named 'customer_order_counts' that shows the total number of orders placed by each customer. The view joins the 'customers' table and the 'orders' table on the 'customer_id' column. It then groups the results by customer ID and name and counts the number of orders for each customer. Finally, it orders the results by the total number of orders in descending order."
260,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","Show me the top 5 countries in terms of cybercrime incidents in 2023, including the total number of incidents, the average cost per incident, and the total cost for each country.","CREATE TABLE cybercrime_incidents (  country VARCHAR(100),  incident_date DATE,  incident_type VARCHAR(100),  cost_per_incident DECIMAL(10,2) );
INSERT INTO cybercrime_incidents (country, incident_date, incident_type, cost_per_incident) VALUES ('United States', '2023-01-01', 'Data breach', 1000000), ('United States', '2023-01-15', 'Ransomware attack', 500000), ('United States', '2023-02-01', 'Phishing attack', 250000), ('United States', '2023-02-15', 'Malware infection', 100000), ('United States', '2023-03-01', 'Data breach', 750000), ('China', '2023-01-01', 'Data breach', 500000), ('China', '2023-01-15', 'Ransomware attack', 250000), ('China', '2023-02-01', 'Phishing attack', 100000), ('China', '2023-02-15', 'Malware infection', 50000), ('China', '2023-03-01', 'Data breach', 375000), ('United Kingdom', '2023-01-01', 'Data breach', 250000), ('United Kingdom', '2023-01-15', 'Ransomware attack', 125000), ('United Kingdom', '2023-02-01', 'Phishing attack', 50000), ('United Kingdom', '2023-02-15', 'Malware infection', 25000), ('United Kingdom', '2023-03-01', 'Data breach', 187500), ('Germany', '2023-01-01', 'Data breach', 125000), ('Germany', '2023-01-15', 'Ransomware attack', 62500), ('Germany', '2023-02-01', 'Phishing attack', 25000), ('Germany', '2023-02-15', 'Malware infection', 12500), ('Germany', '2023-03-01', 'Data breach', 93750), ('India', '2023-01-01', 'Data breach', 100000), ('India', '2023-01-15', 'Ransomware attack', 50000), ('India', '2023-02-01', 'Phishing attack', 25000), ('India', '2023-02-15', 'Malware infection', 10000), ('India', '2023-03-01', 'Data breach', 75000);","WITH Top5Countries AS (  SELECT    country,    COUNT(*) AS incident_count,    AVG(cost_per_incident) AS avg_cost,    SUM(cost_per_incident) AS total_cost  FROM    cybercrime_incidents  WHERE    incident_date BETWEEN '2023-01-01' AND '2023-03-01'  GROUP BY    country  ORDER BY    incident_count DESC  LIMIT 5)SELECT  * FROM  Top5Countries ORDER BY  total_cost DESC;","This query first calculates the total number of incidents, average cost per incident, and total cost for each country between January 1st and March 1st, 2023. It then sorts the results by the total number of incidents and selects the top 5 countries. Finally, it sorts the results by the total cost and displays the final table."
261,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",How many customers have made repeat purchases in the last three months and where are they located geographically?,"CREATE TABLE customer (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE,
  phone_number VARCHAR(20) UNIQUE,
  address VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  country VARCHAR(255),
  zip_code VARCHAR(10)
);

CREATE TABLE order (
  order_id INT PRIMARY KEY,
  customer_id INT REFERENCES customer(customer_id),
  order_date DATE,
  total_amount DECIMAL(10,2),
  payment_method VARCHAR(255),
  status VARCHAR(255)
);

INSERT INTO customer (customer_id, customer_name, email, phone_number, address, city, state, country, zip_code) VALUES
(1, 'John Doe', 'john.doe@email.com', '123-456-7890', '123 Main St', 'Anytown', 'CA', 'USA', '12345'),
(2, 'Jane Smith', 'jane.smith@email.com', '456-789-0123', '456 Elm St', 'Anytown', 'CA', 'USA', '12345'),
(3, 'Bob Johnson', 'bob.johnson@email.com', '789-012-3456', '789 Oak St', 'Anytown', 'CA', 'USA', '12345');

INSERT INTO order (order_id, customer_id, order_date, total_amount, payment_method, status) VALUES
(1, 1, '2023-03-01', 100.00, 'Visa', 'Completed'),
(2, 2, '2023-03-15', 50.00, 'Mastercard', 'Completed'),
(3, 1, '2023-04-05', 75.00, 'Amex', 'Completed'),
(4, 3, '2023-04-20', 25.00, 'Visa', 'Completed'),
(5, 2, '2023-05-01', 150.00, 'Mastercard', 'Completed');","WITH RepeatCustomers AS (
  SELECT c.customer_id, c.customer_name, c.city, c.country
  FROM customer c
  JOIN order o ON c.customer_id = o.customer_id
  WHERE o.order_date >= DATE('now', '-3 months')
  GROUP BY c.customer_id, c.customer_name, c.city, c.country
  HAVING COUNT(DISTINCT o.order_id) > 1
)
SELECT rc.customer_name, rc.city, rc.country, COUNT(*) AS repeat_purchases
FROM RepeatCustomers rc
GROUP BY rc.customer_name, rc.city, rc.country
ORDER BY repeat_purchases DESC;","This query uses a common table expression (CTE) called `RepeatCustomers` to identify customers who have made repeat purchases in the last three months. The CTE joins the `customer` and `order` tables on the `customer_id` column, filters orders placed within the last three months, groups by customer ID, name, city, and country, and filters again to keep only customers with more than one distinct order. The main query then selects the customer name, city, country, and count of repeat purchases from the `RepeatCustomers` CTE, groups by customer name, city, and country, and orders the results in descending order of repeat purchases."
262,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What is the average age of users who purchased a product in the last month?,"CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), customer_id INT, order_date DATE, quantity INT);","WITH AverageAge AS (SELECT AVG(YEAR(CURRENT_DATE) - YEAR(DOB)) AS average_age FROM customers) 
SELECT average_age FROM AverageAge;","This query calculates the average age of users who purchased a product in the last month. 
First, it creates a CTE (Common Table Expression) called AverageAge that calculates the average age of all customers. 
Then, it selects the average age from the AverageAge CTE."
263,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",Which regions have the highest number of customers who have not yet made a purchase?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), DOB DATE, region VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), customer_id INT REFERENCES customers(customer_id), order_date DATE, quantity INT);","SELECT region, COUNT(*) AS customer_count FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.order_id IS NULL GROUP BY region ORDER BY customer_count DESC;","This query identifies the regions with the highest number of customers who have not yet made a purchase. 
It uses a LEFT JOIN to combine the customers and orders tables, and then filters out any rows where there is an order associated with the customer. 
The results are then grouped by region and the number of customers in each region is counted. 
Finally, the results are sorted in descending order based on the number of customers."
264,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 most popular products based on the total number of orders placed in the last quarter?,"CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), customer_id INT, order_date DATE, quantity INT);","SELECT p.name, COUNT(*) AS order_count FROM products p JOIN orders o ON p.product_id = o.product_id WHERE o.order_date >= DATE('now', '-3 months') GROUP BY p.name ORDER BY order_count DESC LIMIT 5;","This query identifies the top 5 most popular products based on the total number of orders placed in the last quarter. 
It joins the products and orders tables on the product_id column, filters the orders to include only those placed in the last quarter, groups the results by product name, counts the number of orders for each product, and then sorts the results in descending order based on the number of orders."
265,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","What is the average age of artists who have sold more than 100,000 albums?","CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), birth_date DATE, country_of_origin VARCHAR(255), genre VARCHAR(255), total_albums_sold INT); 
CREATE TABLE Albums (album_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), album_name VARCHAR(255), release_date DATE, genre VARCHAR(255), number_of_tracks INT, total_sales INT);",SELECT AVG(birth_date) FROM Artists WHERE artist_id IN (SELECT artist_id FROM Albums WHERE total_sales  >  100000);,"1. This query starts by selecting the average birth_date from the Artists table. 
2. It then filters the Artists table to only include artists who have sold more than 100,000 albums. To do this, it uses a subquery that selects the artist_id from the Albums table where the total_sales is greater than 100,000. 
3. Finally, it groups the results by artist_id and calculates the average birth_date for each group."
266,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",How many female artists are there from each country?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), birth_date DATE, country_of_origin VARCHAR(255), genre VARCHAR(255), total_albums_sold INT); 
CREATE TABLE Albums (album_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), album_name VARCHAR(255), release_date DATE, genre VARCHAR(255), number_of_tracks INT, total_sales INT);","SELECT country_of_origin, COUNT(*) FROM Artists WHERE gender = 'Female' GROUP BY country_of_origin;","This query starts by selecting the country_of_origin and using the COUNT(*) function to count the number of artists from each country. 
It then filters the Artists table to only include artists who identify as female. 
Finally, it groups the results by country_of_origin and returns the count for each country."
267,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",What is the total number of albums sold by artists from each genre?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), birth_date DATE, country_of_origin VARCHAR(255), genre VARCHAR(255), total_albums_sold INT); 
CREATE TABLE Albums (album_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), album_name VARCHAR(255), release_date DATE, genre VARCHAR(255), number_of_tracks INT, total_sales INT);","SELECT genre, SUM(total_sales) FROM Albums GROUP BY genre;","This query starts by selecting the genre and using the SUM(total_sales) function to calculate the total number of albums sold for each genre. 
It groups the results by genre and returns the sum for each genre."
268,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",What is the average number of albums sold by artists who have released albums in the last 5 years?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), birth_date DATE, country_of_origin VARCHAR(255), genre VARCHAR(255), total_albums_sold INT); 
CREATE TABLE Albums (album_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), album_name VARCHAR(255), release_date DATE, genre VARCHAR(255), number_of_tracks INT, total_sales INT);","SELECT AVG(total_sales) FROM Albums WHERE release_date  >  DATE('now', '-5 years') GROUP BY artist_id;","This query starts by selecting the average total_sales from the Albums table. 
It then filters the Albums table to only include albums that have been released in the last 5 years. To do this, it uses the DATE('now', '-5 years') function to calculate the date 5 years ago and compares it to the release_date column. 
Finally, it groups the results by artist_id and calculates the average total_sales for each artist."
269,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",What is the percentage of female artists in each genre?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), birth_date DATE, country_of_origin VARCHAR(255), genre VARCHAR(255), total_albums_sold INT); 
CREATE TABLE Albums (album_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), album_name VARCHAR(255), release_date DATE, genre VARCHAR(255), number_of_tracks INT, total_sales INT);","SELECT genre, COUNT(CASE WHEN gender = 'Female' THEN 1 END) * 100.0 / COUNT(*) AS percentage_female FROM Artists GROUP BY genre;","This query starts by selecting the genre and calculates the percentage of female artists in each genre. 
It uses the COUNT(CASE WHEN gender = 'Female' THEN 1 END) function to count the number of female artists in each genre. 
It then divides this number by the total number of artists in each genre (COUNT(*)) and multiplies by 100 to get the percentage. 
Finally, it groups the results by genre and returns the percentage for each genre."
270,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Insert a new customer into the customer table with their name, address, and phone number, and then update the order table to associate the order with the newly inserted customer.","CREATE TABLE customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, customer_address VARCHAR(255), customer_phone_number VARCHAR(20));
CREATE TABLE order (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO customer (customer_name, customer_address, customer_phone_number) VALUES ('John Doe', '123 Main St, Anytown', '555-123-4567');","INSERT INTO customer (customer_name, customer_address, customer_phone_number) VALUES ('Jane Smith', '456 Oak Ave, Anytown', '555-234-5678');
UPDATE order SET customer_id = (SELECT MAX(customer_id) FROM customer) WHERE order_id = 12345;","This code first inserts a new customer into the customer table with the name 'Jane Smith', address '456 Oak Ave, Anytown', and phone number '555-234-5678'. It then updates the order table to associate the order with ID 12345 with the newly inserted customer by setting the customer_id column to the maximum customer_id in the customer table."
271,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Delete the customer with the ID 123 from the customer table and all of their associated orders from the order table.,"CREATE TABLE customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, customer_address VARCHAR(255), customer_phone_number VARCHAR(20));
CREATE TABLE order (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO customer (customer_name, customer_address, customer_phone_number) VALUES ('John Doe', '123 Main St, Anytown', '555-123-4567');
INSERT INTO order (customer_id, order_date, order_amount) VALUES (123, '2023-04-01', 100.00);","DELETE FROM order WHERE customer_id = 123;
DELETE FROM customer WHERE customer_id = 123;","This code first deletes all orders associated with the customer with ID 123 from the order table using a WHERE clause to filter based on the customer_id. Then, it deletes the customer with ID 123 from the customer table using another DELETE statement with a WHERE clause."
272,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Update the customer's address and phone number in the customer table for the customer with the name 'John Doe'.,"CREATE TABLE customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, customer_address VARCHAR(255), customer_phone_number VARCHAR(20));
CREATE TABLE order (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO customer (customer_name, customer_address, customer_phone_number) VALUES ('John Doe', '123 Main St, Anytown', '555-123-4567');","UPDATE customer SET customer_address = '789 Hilltop Dr, Anytown', customer_phone_number = '555-987-6543' WHERE customer_name = 'John Doe';",This code updates the customer table to change the address and phone number for the customer with the name 'John Doe'. It uses a WHERE clause to ensure that only the customer with the matching name is updated.
273,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Find all customers who have placed orders in the month of April 2023.,"CREATE TABLE customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, customer_address VARCHAR(255), customer_phone_number VARCHAR(20));
CREATE TABLE order (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO customer (customer_name, customer_address, customer_phone_number) VALUES ('John Doe', '123 Main St, Anytown', '555-123-4567');
INSERT INTO order (customer_id, order_date, order_amount) VALUES (123, '2023-04-01', 100.00), (123, '2023-04-15', 50.00), (456, '2023-03-22', 75.00);","SELECT c.customer_name, c.customer_address, c.customer_phone_number FROM customer c JOIN order o ON c.customer_id = o.customer_id WHERE o.order_date >= '2023-04-01' AND o.order_date < '2023-05-01';","This code retrieves the customer name, address, and phone number for all customers who have placed orders in the month of April 2023. It joins the customer and order tables on the customer_id column and filters the results using a WHERE clause that checks the order_date column."
274,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Calculate the total order amount for each customer and display the customer's name and total order amount.,"CREATE TABLE customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, customer_address VARCHAR(255), customer_phone_number VARCHAR(20));
CREATE TABLE order (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO customer (customer_name, customer_address, customer_phone_number) VALUES ('John Doe', '123 Main St, Anytown', '555-123-4567'), ('Jane Smith', '456 Oak Ave, Anytown', '555-234-5678');
INSERT INTO order (customer_id, order_date, order_amount) VALUES (123, '2023-04-01', 100.00), (123, '2023-04-15', 50.00), (456, '2023-03-22', 75.00);","SELECT c.customer_name, SUM(o.order_amount) AS total_order_amount FROM customer c JOIN order o ON c.customer_id = o.customer_id GROUP BY c.customer_name ORDER BY total_order_amount DESC;","This code calculates the total order amount for each customer and displays the customer's name and total order amount. It joins the customer and order tables on the customer_id column, groups the results by customer name, calculates the sum of the order_amount for each customer, and sorts the results in descending order of total_order_amount."
275,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What are the top 5 countries with the highest number of cyber security incidents in the last year?,"CREATE TABLE CyberSecurityIncidents ( 
    IncidentID INT PRIMARY KEY, 
    Country VARCHAR(255) NOT NULL, 
    IncidentType VARCHAR(255) NOT NULL, 
    DateReported DATE NOT NULL 
);","SELECT Country, COUNT(*) AS NumberOfIncidents 
FROM CyberSecurityIncidents 
WHERE DateReported BETWEEN DATE('now', '-1 year') AND DATE('now') 
GROUP BY Country 
ORDER BY NumberOfIncidents DESC 
LIMIT 5;","This query selects the Country and counts the number of incidents for each country in the CyberSecurityIncidents table. It filters the data to include incidents reported in the last year and then groups the data by country. Finally, it orders the results by the number of incidents in descending order and limits the output to the top 5 countries."
276,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Find the average number of days it takes to resolve a data breach for each industry.,"CREATE TABLE DataBreaches ( 
    BreachID INT PRIMARY KEY, 
    Industry VARCHAR(255) NOT NULL, 
    DateReported DATE NOT NULL, 
    DateResolved DATE 
);","SELECT Industry, AVG(DateResolved - DateReported) AS AverageResolutionTime 
FROM DataBreaches 
WHERE DateResolved IS NOT NULL 
GROUP BY Industry;",This query calculates the average resolution time for data breaches in each industry. It selects the Industry and calculates the difference between the DateResolved and DateReported for each breach. It then groups the results by industry and calculates the average resolution time for each industry.
277,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Identify the top 3 products with the highest number of customer complaints in the past quarter.,"CREATE TABLE CustomerComplaints ( 
    ComplaintID INT PRIMARY KEY, 
    ProductID INT NOT NULL, 
    ComplaintDate DATE NOT NULL, 
    ComplaintDescription TEXT 
); 

CREATE TABLE Products ( 
    ProductID INT PRIMARY KEY, 
    ProductName VARCHAR(255) NOT NULL 
);","SELECT p.ProductName, COUNT(*) AS NumberOfComplaints 
FROM CustomerComplaints c 
JOIN Products p ON c.ProductID = p.ProductID 
WHERE c.ComplaintDate BETWEEN DATE('now', '-3 months') AND DATE('now') 
GROUP BY p.ProductName 
ORDER BY NumberOfComplaints DESC 
LIMIT 3;","This query identifies the top 3 products with the highest number of customer complaints in the past quarter. It joins the CustomerComplaints and Products tables on the ProductID and filters the data to include complaints from the past quarter. It then groups the results by product name and counts the number of complaints for each product. Finally, it orders the results by the number of complaints in descending order and limits the output to the top 3 products."
278,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What is the percentage of customers who have opted out of receiving marketing emails?,"CREATE TABLE Customers ( 
    CustomerID INT PRIMARY KEY, 
    Email VARCHAR(255) NOT NULL, 
    OptedOutMarketingEmails BOOLEAN NOT NULL 
);","SELECT 100.0 * SUM(CASE WHEN OptedOutMarketingEmails THEN 1 ELSE 0 END) / COUNT(*) AS OptOutPercentage 
FROM Customers;","This query calculates the percentage of customers who have opted out of receiving marketing emails. It uses a CASE statement to count the number of customers who have opted out and then divides this number by the total number of customers. Finally, it multiplies the result by 100 to get the percentage."
279,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Create a view that shows the total number of innovation projects for each department along with the average budget per project.,"CREATE TABLE InnovationProjects ( 
    ProjectID INT PRIMARY KEY, 
    Department VARCHAR(255) NOT NULL, 
    ProjectName VARCHAR(255) NOT NULL, 
    Budget DECIMAL(10, 2) NOT NULL 
);","CREATE VIEW InnovationProjectSummary AS 
SELECT Department, COUNT(*) AS TotalProjects, AVG(Budget) AS AverageBudget 
FROM InnovationProjects 
GROUP BY Department;",This query creates a view called InnovationProjectSummary that shows the total number of innovation projects for each department along with the average budget per project. It groups the data by department and calculates the total number of projects and the average budget for each department.
280,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",How do I update stock levels in the 'Inventory' table for products whose stock has fallen below 50?,"CREATE TABLE Inventory (product_id INT PRIMARY KEY, product_name VARCHAR(255), stock_level INT, supplier_id INT, FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id));
CREATE TABLE Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), contact_info VARCHAR(255));",UPDATE Inventory SET stock_level = stock_level + 50 WHERE stock_level  <  50;,This SQL statement updates the 'stock_level' column in the 'Inventory' table by adding 50 to the existing stock level for all products where the current stock level is less than 50.
281,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Can I see a list of all customers from California who have placed orders in the last month?,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT);
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","SELECT c.customer_name, c.city, c.state FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE c.state = 'California' AND o.order_date BETWEEN DATE('now', '-1 month') AND DATE('now');","This SQL statement joins the 'Customers' and 'Orders' tables on the 'customer_id' field. It then selects the customer's name, city, and state from the 'Customers' table for all customers who are from California and have placed orders within the last month."
282,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",I'd like to insert a new product into the 'Products' table called 'Wireless Headphones' with a price of $79.99.,"CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2), category VARCHAR(255));","INSERT INTO Products (product_name, price, category) VALUES ('Wireless Headphones', 79.99, 'Electronics');","This SQL statement inserts a new row into the 'Products' table with the product name 'Wireless Headphones', a price of $79.99, and a category of 'Electronics'."
283,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Could you please delete all orders from the 'Orders' table that were placed before January 1st, 2023?","CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));",DELETE FROM Orders WHERE order_date < '2023-01-01';,"This SQL statement deletes all rows from the 'Orders' table where the 'order_date' is before January 1st, 2023."
284,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Is it possible to view the top 5 customers who have spent the most money in the past year?,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customers(customer_id));","SELECT c.customer_name, SUM(o.total_amount) AS total_spent FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id WHERE o.order_date BETWEEN DATE('now', '-1 year') AND DATE('now') GROUP BY c.customer_name ORDER BY total_spent DESC LIMIT 5;","This SQL statement joins the 'Customers' and 'Orders' tables on the 'customer_id' field. It then calculates the total amount spent by each customer in the past year and groups the results by customer name. Finally, it orders the results in descending order of total spending and selects the top 5 customers."
285,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","How many vehicles in the fleet have an odometer reading greater than 100,000 miles?","CREATE TABLE vehicles (vehicle_id INT PRIMARY KEY, make VARCHAR(255), model VARCHAR(255), year INT, odometer_reading INT);",SELECT COUNT(*) FROM vehicles WHERE odometer_reading > 100000;,"This query selects the number of vehicles from the 'vehicles' table where the odometer reading is greater than 100,000 miles."
286,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Find the average fuel efficiency for each vehicle make in the fleet.,"CREATE TABLE vehicles (vehicle_id INT PRIMARY KEY, make VARCHAR(255), model VARCHAR(255), year INT, fuel_efficiency DECIMAL(5,2));","SELECT make, AVG(fuel_efficiency) FROM vehicles GROUP BY make;",This query groups the vehicles by make and calculates the average fuel efficiency for each make.
287,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",What are the top 5 most frequent destinations for shipments originating from the Los Angeles warehouse?,"CREATE TABLE shipments (shipment_id INT PRIMARY KEY, origin_warehouse VARCHAR(255), destination_city VARCHAR(255), distance INT, weight DECIMAL(10,2));","SELECT destination_city, COUNT(*) AS frequency FROM shipments WHERE origin_warehouse = 'Los Angeles' GROUP BY destination_city ORDER BY frequency DESC LIMIT 5;","This query filters shipments originating from the Los Angeles warehouse, groups them by destination city, counts the frequency of each destination, orders the results by frequency in descending order, and selects the top 5 most frequent destinations."
288,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","List all customers who have placed orders in the last 30 days, along with the total amount spent.","CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255)); CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, total_amount DECIMAL(10,2));","SELECT c.name, SUM(o.total_amount) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-30 days') GROUP BY c.customer_id ORDER BY total_spent DESC;","This query joins the 'customers' and 'orders' tables on the customer ID, filters orders placed in the last 30 days, groups the results by customer, calculates the total amount spent by each customer, and orders the results by total amount spent in descending order."
289,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Identify any suppliers who have not delivered any orders in the past month.,"CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255)); CREATE TABLE orders (order_id INT PRIMARY KEY, supplier_id INT REFERENCES suppliers(supplier_id), order_date DATE);","SELECT s.name FROM suppliers s LEFT JOIN orders o ON s.supplier_id = o.supplier_id WHERE o.order_date IS NULL AND o.order_date >= DATE('now', '-1 month');","This query performs a left join between the 'suppliers' and 'orders' tables on the supplier ID, filters orders placed in the past month, and selects the names of suppliers who have not delivered any orders in the past month."
290,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What is the average price of a data breach in different regions?,"CREATE TABLE DataBreaches ( Region VARCHAR(255), AveragePrice DECIMAL(10,2), Year INT); INSERT INTO DataBreaches (Region, AveragePrice, Year) VALUES ('North America', 9.44, 2023), ('Europe', 8.06, 2023), ('Asia Pacific', 7.23, 2023), ('Middle East and Africa', 6.12, 2023), ('Latin America', 5.91, 2023);","SELECT Region, AVG(AveragePrice) AS RegionalAvgPrice FROM DataBreaches GROUP BY Region ORDER BY RegionalAvgPrice DESC;","This query calculates the average price of a data breach for each region. It first groups the data by region using `GROUP BY` and then calculates the average price using `AVG`. Finally, it sorts the results in descending order of average price using `ORDER BY`."
291,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Which industries have the highest percentage of data breaches?,"CREATE TABLE DataBreaches ( Industry VARCHAR(255), NumberOfBreaches INT, TotalBreaches INT); INSERT INTO DataBreaches (Industry, NumberOfBreaches, TotalBreaches) VALUES ('Healthcare', 245, 1500), ('Finance', 201, 1500), ('Technology', 189, 1500), ('Retail', 167, 1500), ('Education', 142, 1500);","SELECT Industry, (NumberOfBreaches * 100.0) / TotalBreaches AS PercentageOfBreaches FROM DataBreaches ORDER BY PercentageOfBreaches DESC;","This query calculates the percentage of data breaches for each industry. It first multiplies the number of breaches for each industry by 100 and then divides it by the total number of breaches. This gives the percentage of breaches for each industry. Finally, it sorts the results in descending order of percentage of breaches."
292,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,How has the number of data breaches changed over the past five years?,"CREATE TABLE DataBreaches ( Year INT, NumberOfBreaches INT); INSERT INTO DataBreaches (Year, NumberOfBreaches) VALUES (2018, 1250), (2019, 1375), (2020, 1450), (2021, 1475), (2022, 1500);","SELECT Year, NumberOfBreaches FROM DataBreaches ORDER BY Year ASC;",This query retrieves the number of data breaches for each year in the past five years and orders the results by year in ascending order. This allows us to see how the number of data breaches has changed over time.
293,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What are the top five countries with the most data breaches?,"CREATE TABLE DataBreaches ( Country VARCHAR(255), NumberOfBreaches INT); INSERT INTO DataBreaches (Country, NumberOfBreaches) VALUES ('United States', 550), ('China', 150), ('India', 125), ('United Kingdom', 100), ('Germany', 75);","SELECT Country, NumberOfBreaches FROM DataBreaches ORDER BY NumberOfBreaches DESC LIMIT 5;",This query retrieves the top five countries with the most data breaches. It orders the results by the number of breaches in descending order and limits the output to the top five countries using `LIMIT 5`.
294,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What is the relationship between the number of data breaches and the size of a company?,"CREATE TABLE Companies ( CompanySize VARCHAR(255), NumberOfBreaches INT); INSERT INTO Companies (CompanySize, NumberOfBreaches) VALUES ('Small', 250), ('Medium', 500), ('Large', 750);","SELECT CompanySize, NumberOfBreaches FROM Companies ORDER BY NumberOfBreaches ASC;",This query retrieves the number of data breaches for each company size and orders the results by the number of breaches in ascending order. This allows us to see the relationship between the size of a company and the number of data breaches it experiences.
295,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average corn yield in the US for the past 5 years?,"CREATE TABLE corn_yields AS SELECT state, year, yield_per_acre FROM usda_crop_data WHERE crop = 'Corn';
CREATE TABLE weather_data AS SELECT state, year, avg_temp, avg_precipitation FROM weather_data WHERE crop = 'Corn';",SELECT AVG(yield_per_acre) FROM corn_yields WHERE year IN (SELECT year FROM corn_yields ORDER BY year DESC LIMIT 5);,"This SQL query calculates the average corn yield in the US for the past 5 years by:
1. Selecting the average yield per acre from the corn_yields table.
2. Filtering the years to only include the past 5 years by using a subquery that selects the 5 most recent years from the corn_yields table ordered by year in descending order.
3. The result is the average corn yield in the US for the past 5 years."
296,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What vegetables are currently grown in California?,"CREATE TABLE vegetables (    vegetable_name TEXT PRIMARY KEY,    vegetable_type VARCHAR(255),    growing_regions TEXT); INSERT INTO vegetables (vegetable_name, vegetable_type, growing_regions) VALUES ('Artichoke', 'Brassica', 'California, Arizona'), ('Asparagus', 'Liliaceae', 'California, Washington'), ('Broccoli', 'Brassica', 'California, Arizona, Texas'), ('Carrot', 'Apiaceae', 'California, Texas, Florida'), ('Celery', 'Apiaceae', 'California, Florida'), ('Lettuce', 'Asteraceae', 'California, Arizona'), ('Mushroom', 'Fungi', 'Pennsylvania, California'), ('Onion', 'Amaryllidaceae', 'California, Idaho, New York'), ('Potato', 'Solanaceae', 'Idaho, Washington, Maine'), ('Spinach', 'Amaranthaceae', 'California, Arizona, Texas'); CREATE TABLE us_states (    state_name TEXT PRIMARY KEY,    region TEXT); INSERT INTO us_states (state_name, region) VALUES ('California', 'West'), ('Arizona', 'West'), ('Texas', 'South'), ('Florida', 'South'), ('Pennsylvania', 'Northeast'), ('Idaho', 'West'), ('Washington', 'West'), ('New York', 'Northeast'), ('Maine', 'Northeast');",SELECT DISTINCT vegetable_name FROM vegetables WHERE growing_regions LIKE '%California%';,This SQL query selects the distinct vegetable names from the 'vegetables' table where the 'growing_regions' column contains 'California'. This will return a list of all vegetables that are currently grown in California.
297,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the average yields of the 5 most-produced crops in California?,"CREATE TABLE crop_yields (    crop_name TEXT,    year INTEGER,    state_name TEXT,    yield_per_acre REAL,    PRIMARY KEY (crop_name, year, state_name)); INSERT INTO crop_yields (crop_name, year, state_name, yield_per_acre) VALUES ('Almonds', 2021, 'California', 2200), ('Grapes', 2021, 'California', 7.5), ('Cotton', 2021, 'California', 1800), ('Hay', 2021, 'California', 3.5), ('Tomatoes', 2021, 'California', 25), ('Almonds', 2020, 'California', 2100), ('Grapes', 2020, 'California', 7), ('Cotton', 2020, 'California', 1750), ('Hay', 2020, 'California', 3), ('Tomatoes', 2020, 'California', 20), ('Almonds', 2019, 'California', 2000), ('Grapes', 2019, 'California', 6.5), ('Cotton', 2019, 'California', 1700), ('Hay', 2019, 'California', 2.5), ('Tomatoes', 2019, 'California', 18), ('Almonds', 2018, 'California', 1900), ('Grapes', 2018, 'California', 6), ('Cotton', 2018, 'California', 1600), ('Hay', 2018, 'California', 2), ('Tomatoes', 2018, 'California', 15), ('Almonds', 2017, 'California', 1850), ('Grapes', 2017, 'California', 5.5), ('Cotton', 2017, 'California', 1550), ('Hay', 2017, 'California', 1.8), ('Tomatoes', 2017, 'California', 12); CREATE TABLE crop_production (    crop_name TEXT PRIMARY KEY,    state_name TEXT); INSERT INTO crop_production (crop_name, state_name) VALUES ('Almonds', 'California'), ('Grapes', 'California'), ('Cotton', 'California'), ('Hay', 'California'), ('Tomatoes', 'California'), ('Wheat', 'Kansas'), ('Corn', 'Iowa'), ('Soybeans', 'Illinois'), ('Rice', 'Arkansas'), ('Potatoes', 'Idaho');","SELECT T1.crop_name, AVG(T1.yield_per_acre) AS average_yield FROM crop_yields AS T1 JOIN crop_production AS T2 ON T1.crop_name = T2.crop_name AND T1.state_name = T2.state_name WHERE T2.state_name = 'California' GROUP BY T1.crop_name ORDER BY average_yield DESC LIMIT 5;","This SQL query calculates the average yields for the 5 most-produced crops in California. It first joins the 'crop_yields' and 'crop_production' tables on 'crop_name' and 'state_name'. Then, it filters the results to include only records for California. It then groups the results by 'crop_name' and calculates the average yield per acre. Finally, it orders the results by average yield in descending order and limits the output to the top 5 crops."
298,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",I want to compare the average yield of wheat in Kansas to the average yield of corn in Iowa for the year 2021.,"CREATE TABLE crop_yields (    crop_name TEXT,    year INTEGER,    state_name TEXT,    yield_per_acre REAL,    PRIMARY KEY (crop_name, year, state_name)); INSERT INTO crop_yields (crop_name, year, state_name, yield_per_acre) VALUES ('Wheat', 2021, 'Kansas', 55), ('Corn', 2021, 'Iowa', 175), ('Wheat', 2020, 'Kansas', 50), ('Corn', 2020, 'Iowa', 170), ('Wheat', 2019, 'Kansas', 45), ('Corn', 2019, 'Iowa', 165), ('Wheat', 2018, 'Kansas', 40), ('Corn', 2018, 'Iowa', 160), ('Wheat', 2017, 'Kansas', 35), ('Corn', 2017, 'Iowa', 155); CREATE TABLE us_states (    state_name TEXT PRIMARY KEY,    region TEXT); INSERT INTO us_states (state_name, region) VALUES ('Kansas', 'Midwest'), ('Iowa', 'Midwest');","SELECT T2.crop_name, T1.state_name, AVG(T1.yield_per_acre) AS average_yield FROM crop_yields AS T1 JOIN (SELECT 'Wheat' AS crop_name UNION SELECT 'Corn') AS T2 ON T1.crop_name = T2.crop_name WHERE T1.year = 2021 AND T1.state_name IN ('Kansas', 'Iowa') GROUP BY T1.state_name, T2.crop_name;","This SQL query compares the average yield of wheat in Kansas to the average yield of corn in Iowa for the year 2021. It first creates a temporary table with two rows, one for wheat and one for corn. Then, it joins this temporary table with the 'crop_yields' table on 'crop_name'. It filters the results to include only records for the year 2021 and the states of Kansas and Iowa. It then groups the results by state and crop name and calculates the average yield per acre."
299,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show me the average yield for corn in the state of Iowa in 2022, compared to the national average for corn yield in the same year.","CREATE TABLE Corn_Yields (state TEXT, year INT, yield FLOAT);  
INSERT INTO Corn_Yields VALUES ('Iowa', 2022, 175.5), ('California', 2022, 158.2), ('Texas', 2022, 142.1), ('Nebraska', 2022, 188.9), ('Illinois', 2022, 172.8);  
CREATE TABLE National_Corn_Yields (year INT, yield FLOAT);  
INSERT INTO National_Corn_Yields VALUES (2022, 165.7);","SELECT T1.state, T1.yield, T2.yield  
FROM Corn_Yields AS T1  
INNER JOIN National_Corn_Yields AS T2 ON T1.year = T2.year  
WHERE T1.state = 'Iowa' AND T1.year = 2022;",This SQL query retrieves the average corn yield for Iowa in 2022 from the 'Corn_Yields' table and joins it with the national average corn yield for the same year from the 'National_Corn_Yields' table. It then filters the results to only show the data for Iowa and 2022.
300,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Please delete all records from the Customer table where the customer is located in California and has placed less than 5 orders.,"CREATE TABLE Customer (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), state VARCHAR(50), city VARCHAR(50), orders_placed INT); INSERT INTO Customer (customer_id, first_name, last_name, email, state, city, orders_placed) VALUES (1, 'John', 'Doe', 'john.doe@example.com', 'California', 'Los Angeles', 2); INSERT INTO Customer (customer_id, first_name, last_name, email, state, city, orders_placed) VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', 'Texas', 'Houston', 8); INSERT INTO Customer (customer_id, first_name, last_name, email, state, city, orders_placed) VALUES (3, 'David', 'Lee', 'david.lee@example.com', 'California', 'San Francisco', 4); INSERT INTO Customer (customer_id, first_name, last_name, email, state, city, orders_placed) VALUES (4, 'Mary', 'Johnson', 'mary.johnson@example.com', 'New York', 'New York City', 12);",DELETE FROM Customer WHERE state = 'California' AND orders_placed < 5;,"This query first selects all rows from the Customer table where the state is 'California' and the orders_placed is less than 5. Then, it deletes those rows from the table. The DELETE statement is executed with a WHERE clause to ensure that only the desired rows are deleted."
301,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Please update the Product table to set the price of all products in the 'Electronics' category to $100.,"CREATE TABLE Product (product_id INT PRIMARY KEY, product_name VARCHAR(100), category VARCHAR(50), price DECIMAL(10,2)); INSERT INTO Product (product_id, product_name, category, price) VALUES (1, 'Laptop', 'Electronics', 1200.00); INSERT INTO Product (product_id, product_name, category, price) VALUES (2, 'Shirt', 'Clothing', 25.00); INSERT INTO Product (product_id, product_name, category, price) VALUES (3, 'Tablet', 'Electronics', 300.00); INSERT INTO Product (product_id, product_name, category, price) VALUES (4, 'Shoes', 'Footwear', 50.00); INSERT INTO Product (product_id, product_name, category, price) VALUES (5, 'Smartphone', 'Electronics', 600.00);",UPDATE Product SET price = 100.00 WHERE category = 'Electronics';,"This query first selects all rows from the Product table where the category is 'Electronics'. Then, it updates the price of those rows to $100.00. The UPDATE statement is executed with a WHERE clause to ensure that only the desired rows are updated."
302,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Please insert a new record into the Order table with the following values: order_id = 10, customer_id = 2, order_date = '2023-04-20', total_amount = 150.00.","CREATE TABLE Order (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customer(customer_id)); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (1, 1, '2023-04-10', 200.00); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (2, 3, '2023-04-15', 75.00); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (3, 2, '2023-04-18', 125.00); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (4, 4, '2023-04-19', 300.00); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (5, 1, '2023-04-20', 175.00);","INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (10, 2, '2023-04-20', 150.00);",This query inserts a new row into the Order table with the specified values. The INSERT statement includes all the columns of the Order table and provides the values for each column.
303,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Please select all orders placed by customers in California or Texas, and sort the results by order date in descending order.","CREATE TABLE Customer (customer_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), email VARCHAR(100), state VARCHAR(50), city VARCHAR(50), orders_placed INT); INSERT INTO Customer (customer_id, first_name, last_name, email, state, city, orders_placed) VALUES (1, 'John', 'Doe', 'john.doe@example.com', 'California', 'Los Angeles', 2); INSERT INTO Customer (customer_id, first_name, last_name, email, state, city, orders_placed) VALUES (2, 'Jane', 'Smith', 'jane.smith@example.com', 'Texas', 'Houston', 8); INSERT INTO Customer (customer_id, first_name, last_name, email, state, city, orders_placed) VALUES (3, 'David', 'Lee', 'david.lee@example.com', 'California', 'San Francisco', 4); INSERT INTO Customer (customer_id, first_name, last_name, email, state, city, orders_placed) VALUES (4, 'Mary', 'Johnson', 'mary.johnson@example.com', 'New York', 'New York City', 12); CREATE TABLE Order (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, total_amount DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customer(customer_id)); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (1, 1, '2023-04-10', 200.00); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (2, 3, '2023-04-15', 75.00); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (3, 2, '2023-04-18', 125.00); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (4, 4, '2023-04-19', 300.00); INSERT INTO Order (order_id, customer_id, order_date, total_amount) VALUES (5, 1, '2023-04-20', 175.00);","SELECT * FROM Order WHERE customer_id IN (SELECT customer_id FROM Customer WHERE state IN ('California', 'Texas')) ORDER BY order_date DESC;","This query first selects all customers from California or Texas by joining the Customer and Order tables on the customer_id column. Then, it selects all orders placed by those customers and sorts the results by order date in descending order."
304,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","I'm preparing a presentation on the latest trends in data privacy and cybersecurity. Can you show me how data breaches have evolved over time, and how they differ by industry?","CREATE TABLE DataBreaches ( BreachID INT PRIMARY KEY, BreachDate DATE, Industry VARCHAR(255), RecordsExposed INT, Description VARCHAR(MAX)); 
INSERT INTO DataBreaches (BreachID, BreachDate, Industry, RecordsExposed, Description) VALUES (1, '2023-03-21', 'Healthcare', 500000, 'A healthcare provider experienced a data breach exposing patient records.'), (2, '2023-02-15', 'Finance', 2000000, 'A financial institution was targeted by a cyberattack, resulting in the theft of customer data.'), (3, '2023-01-10', 'Retail', 100000, 'A retail store chain was affected by a data breach that compromised customer payment information.'), (4, '2022-12-05', 'Technology', 300000, 'A technology company suffered a data breach that exposed employee data.'), (5, '2022-11-20', 'Education', 150000, 'A university was hit by a ransomware attack, leading to the encryption of student records.'); 
CREATE TABLE Industries ( IndustryID INT PRIMARY KEY, IndustryName VARCHAR(255)); 
INSERT INTO Industries (IndustryID, IndustryName) VALUES (1, 'Healthcare'), (2, 'Finance'), (3, 'Retail'), (4, 'Technology'), (5, 'Education');","SELECT BreachDate, IndustryName, RecordsExposed FROM DataBreaches JOIN Industries ON DataBreaches.Industry = Industries.IndustryName ORDER BY BreachDate DESC;","This query joins the `DataBreaches` and `Industries` tables to retrieve the breach date, industry name, and number of records exposed for each data breach, ordered by breach date in descending order. This allows for analysis of data breach trends over time and across different industries."
305,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights","What is the average yield of wheat in the United States by state, for the years 2020 and 2021?","CREATE TABLE wheat_yields ( state VARCHAR(255), year INT, yield_kg_per_ha DECIMAL(10,2) );
INSERT INTO wheat_yields (state, year, yield_kg_per_ha) VALUES ('California', 2020, 7500), ('California', 2021, 7800), ('Kansas', 2020, 6200), ('Kansas', 2021, 6500), ('North Dakota', 2020, 4800), ('North Dakota', 2021, 5100);","WITH WheatYieldsByStateYear AS (
    SELECT state, year, yield_kg_per_ha
    FROM wheat_yields
),
AvgYieldsByState AS (
    SELECT state, AVG(yield_kg_per_ha) AS avg_yield
    FROM WheatYieldsByStateYear
    GROUP BY state
)
SELECT state, year, yield_kg_per_ha
FROM WheatYieldsByStateYear
WHERE (state, year) IN (
    SELECT state, year
    FROM AvgYieldsByState
);
","This query calculates the average yield of wheat in the United States by state, for the years 2020 and 2021. It uses a common table expression (CTE) to first calculate the average yield for each state, and then joins this CTE to the original table to select the specific data for the years 2020 and 2021."
306,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights",What was the total precipitation in inches for each month in 2021 in the state of Iowa?,"CREATE TABLE precipitation ( state VARCHAR(255), month INT, precipitation_inches DECIMAL(10,2) );
INSERT INTO precipitation (state, month, precipitation_inches) VALUES ('Iowa', 1, 2.5), ('Iowa', 2, 3.1), ('Iowa', 3, 4.2), ('Iowa', 4, 5.0), ('Iowa', 5, 6.1), ('Iowa', 6, 7.2), ('Iowa', 7, 8.3), ('Iowa', 8, 7.4), ('Iowa', 9, 5.5), ('Iowa', 10, 4.6), ('Iowa', 11, 3.7), ('Iowa', 12, 2.8);","SELECT month, SUM(precipitation_inches) AS total_precipitation
FROM precipitation
WHERE state = 'Iowa' AND year = 2021
GROUP BY month
ORDER BY month;","This query calculates the total precipitation in inches for each month in 2021 in the state of Iowa. It filters the precipitation table to only include data for Iowa and 2021, then groups the data by month and calculates the sum of precipitation for each month."
307,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights","What is the average temperature in degrees Fahrenheit for each crop type in the state of California, for the months of June, July, and August in 2021?","CREATE TABLE weather_data ( state VARCHAR(255), month INT, crop_type VARCHAR(255), temperature_fahrenheit DECIMAL(10,2) );
INSERT INTO weather_data (state, month, crop_type, temperature_fahrenheit) VALUES ('California', 6, 'Wheat', 72.5), ('California', 6, 'Corn', 75.2), ('California', 6, 'Soybeans', 78.1), ('California', 7, 'Wheat', 75.8), ('California', 7, 'Corn', 78.5), ('California', 7, 'Soybeans', 81.2), ('California', 8, 'Wheat', 79.1), ('California', 8, 'Corn', 81.8), ('California', 8, 'Soybeans', 84.5);","SELECT crop_type, AVG(temperature_fahrenheit) AS average_temperature
FROM weather_data
WHERE state = 'California' AND month IN (6, 7, 8)
GROUP BY crop_type
ORDER BY crop_type;","This query calculates the average temperature in degrees Fahrenheit for each crop type in the state of California, for the months of June, July, and August in 2021. It filters the weather_data table to only include data for California and the specified months, then groups the data by crop type and calculates the average temperature for each crop type."
308,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights","What is the total amount of fertilizer used in tons for each crop type in the state of Illinois, for the year 2021?","CREATE TABLE fertilizer_use ( state VARCHAR(255), year INT, crop_type VARCHAR(255), fertilizer_tons DECIMAL(10,2) );
INSERT INTO fertilizer_use (state, year, crop_type, fertilizer_tons) VALUES ('Illinois', 2021, 'Corn', 125000), ('Illinois', 2021, 'Soybeans', 75000), ('Illinois', 2021, 'Wheat', 25000);","SELECT crop_type, SUM(fertilizer_tons) AS total_fertilizer_used
FROM fertilizer_use
WHERE state = 'Illinois' AND year = 2021
GROUP BY crop_type
ORDER BY crop_type;","This query calculates the total amount of fertilizer used in tons for each crop type in the state of Illinois, for the year 2021. It filters the fertilizer_use table to only include data for Illinois and 2021, then groups the data by crop type and calculates the sum of fertilizer used for each crop type."
309,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","analytics and reporting: generating reports, dashboards, and analytical insights",What is the percentage change in the average yield of corn in the state of Iowa from 2020 to 2021?,"CREATE TABLE corn_yields ( state VARCHAR(255), year INT, yield_kg_per_ha DECIMAL(10,2) );
INSERT INTO corn_yields (state, year, yield_kg_per_ha) VALUES ('Iowa', 2020, 9500), ('Iowa', 2021, 10200);","WITH CornYieldsByYear AS (
    SELECT year, AVG(yield_kg_per_ha) AS avg_yield
    FROM corn_yields
    WHERE state = 'Iowa'
    GROUP BY year
)
SELECT
    (2021 - 2020) AS year_difference,
    (CY2.avg_yield - CY1.avg_yield) AS yield_change,
    (CY2.avg_yield - CY1.avg_yield) / CY1.avg_yield * 100 AS percentage_change
FROM CornYieldsByYear AS CY1
JOIN CornYieldsByYear AS CY2 ON CY1.year = CY2.year - 1;","This query calculates the percentage change in the average yield of corn in the state of Iowa from 2020 to 2021. It uses a common table expression (CTE) to calculate the average yield for each year, then joins the CTEs to calculate the difference in yield and the percentage change."
310,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What is the average age of artists who identify as female and have had their work exhibited in galleries or museums located in Europe?,"CREATE TABLE artist_demographics (artist_id INT PRIMARY KEY, name VARCHAR(255), gender VARCHAR(255), age INT, country_of_origin VARCHAR(255));
CREATE TABLE artwork (artwork_id INT PRIMARY KEY, artist_id INT REFERENCES artist_demographics(artist_id), title VARCHAR(255), year_created INT, medium VARCHAR(255), exhibition_location VARCHAR(255));
INSERT INTO artist_demographics (artist_id, name, gender, age, country_of_origin) VALUES (1, 'Frida Kahlo', 'female', 47, 'Mexico'), (2, 'Pablo Picasso', 'male', 91, 'Spain'), (3, 'Yayoi Kusama', 'female', 93, 'Japan'), (4, 'Claude Monet', 'male', 86, 'France'), (5, 'Georgia O’Keeffe', 'female', 98, 'United States');
INSERT INTO artwork (artwork_id, artist_id, title, year_created, medium, exhibition_location) VALUES (1, 1, 'The Two Fridas', 1939, 'oil on canvas', 'Museo Frida Kahlo, Mexico City'), (2, 2, 'Guernica', 1937, 'oil on canvas', 'Museo Reina Sofía, Madrid'), (3, 3, 'Infinity Nets', 1965, 'acrylic on canvas', 'Tate Modern, London'), (4, 4, 'Water Lilies', 1919, 'oil on canvas', 'Musée de l’Orangerie, Paris'), (5, 5, 'Black Iris', 1926, 'oil on canvas', 'Georgia O’Keeffe Museum, Santa Fe');",SELECT AVG(age) FROM artist_demographics WHERE gender = 'female' AND artist_id IN (SELECT artist_id FROM artwork WHERE exhibition_location LIKE '%Europe%');,"This SQL query calculates the average age of female artists who have had their work exhibited in galleries or museums located in Europe. 

The query first selects the artist_id of all artists who have had their work exhibited in Europe. This is done by selecting from the artwork table where the exhibition_location column contains the word 'Europe'.

Next, the query selects the age of all female artists from the artist_demographics table where the artist_id matches the artist_id selected in the previous step. 

Finally, the query calculates the average age of the selected artists using the AVG function."
311,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What is the average number of works created by female artists from Asia in the last 5 years?,"CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), gender VARCHAR(10), birth_year INT, country VARCHAR(255));
INSERT INTO artists (artist_id, artist_name, gender, birth_year, country) VALUES
(1, 'Ai Weiwei', 'Male', 1957, 'China'),
(2, 'Yayoi Kusama', 'Female', 1929, 'Japan'),
(3, 'Frida Kahlo', 'Female', 1907, 'Mexico'),
(4, 'Pablo Picasso', 'Male', 1881, 'Spain'),
(5, 'David Hockney', 'Male', 1937, 'United Kingdom');

CREATE TABLE artworks (artwork_id INT PRIMARY KEY, artist_id INT REFERENCES artists(artist_id), creation_year INT, title VARCHAR(255));
INSERT INTO artworks (artwork_id, artist_id, creation_year, title) VALUES
(1, 1, 2017, 'Circle of Animals/Zodiac Heads'),
(2, 2, 2021, 'Infinity Nets'),
(3, 3, 2015, 'The Broken Column'),
(4, 4, 1937, 'Guernica'),
(5, 5, 2018, 'The Arrival of Spring in Woldgate, East Yorkshire'),
(6, 2, 2019, 'Yellow Pumpkin'),
(7, 3, 2010, 'The Two Fridas'),
(8, 1, 2022, 'Snake Ceiling'),
(9, 5, 2011, 'A Bigger Splash');","SELECT AVG(work_count) AS avg_works
FROM (
    SELECT COUNT(*) AS work_count
    FROM artworks
    JOIN artists ON artworks.artist_id = artists.artist_id
    WHERE artists.gender = 'Female' AND artists.country IN ('China', 'Japan', 'India', 'South Korea') AND artworks.creation_year BETWEEN 2018 AND 2022
    GROUP BY artists.artist_id
) AS work_counts;","1. Filter the artworks table to include only works created by female artists from Asia between 2018 and 2022.
2. Join the filtered artworks table with the artists table to get artist information.
3. Group the results by artist ID and count the number of works created by each artist.
4. Calculate the average number of works created by female Asian artists in the last 5 years."
312,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What are the top 5 countries with the most number of art galleries?,"CREATE TABLE galleries (gallery_id INT PRIMARY KEY, gallery_name VARCHAR(255), country VARCHAR(255));
INSERT INTO galleries (gallery_id, gallery_name, country) VALUES
(1, 'Pace Gallery', 'United States'),
(2, 'Hauser & Wirth', 'Switzerland'),
(3, 'Gagosian Gallery', 'United Kingdom'),
(4, 'David Zwirner', 'United States'),
(5, 'White Cube', 'United Kingdom'),
(6, 'Galerie Perrotin', 'France'),
(7, 'Lehmann Maupin', 'United States'),
(8, 'Acquavella Galleries', 'United States'),
(9, 'Marian Goodman Gallery', 'France'),
(10, 'Victoria Miro', 'United Kingdom');","SELECT country, COUNT(*) AS gallery_count
FROM galleries
GROUP BY country
ORDER BY gallery_count DESC
LIMIT 5;","1. Count the number of galleries in each country.
2. Order the results by gallery count in descending order.
3. Return the top 5 countries with the most number of galleries."
313,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What is the percentage of female artists represented in major museums in Europe?,"CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), gender VARCHAR(10), birth_year INT, country VARCHAR(255));
INSERT INTO artists (artist_id, artist_name, gender, birth_year, country) VALUES
(1, 'Ai Weiwei', 'Male', 1957, 'China'),
(2, 'Yayoi Kusama', 'Female', 1929, 'Japan'),
(3, 'Frida Kahlo', 'Female', 1907, 'Mexico'),
(4, 'Pablo Picasso', 'Male', 1881, 'Spain'),
(5, 'David Hockney', 'Male', 1937, 'United Kingdom');

CREATE TABLE museum_exhibitions (exhibition_id INT PRIMARY KEY, museum_id INT, artist_id INT, exhibition_year INT);
INSERT INTO museum_exhibitions (exhibition_id, museum_id, artist_id, exhibition_year) VALUES
(1, 1, 1, 2020),
(2, 1, 2, 2021),
(3, 2, 3, 2019),
(4, 2, 4, 2018),
(5, 3, 5, 2017),
(6, 3, 2, 2022);","WITH female_artists_exhibitions AS (
  SELECT artist_id
  FROM museum_exhibitions
  JOIN artists ON museum_exhibitions.artist_id = artists.artist_id
  WHERE artists.gender = 'Female'
),
total_exhibitions AS (
  SELECT COUNT(*) AS total_exhibitions
  FROM museum_exhibitions
)
SELECT 100.0 * COUNT(fae.artist_id) / te.total_exhibitions AS percentage_female
FROM female_artists_exhibitions fae
CROSS JOIN total_exhibitions te;","1. Calculate the number of exhibitions featuring female artists in European museums.
2. Calculate the total number of exhibitions in European museums.
3. Divide the number of female artist exhibitions by the total number of exhibitions and multiply by 100 to get the percentage."
314,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows, for each quarter, in descending order of sales from highest to lowest, the top 10 best-selling artworks created by female artists for the past 5 years, along with their sales figures; include the title of the artwork, the artist's name, genre, country of origin, sale date, and price.","CREATE TABLE artworks (artwork_id INT PRIMARY KEY, title VARCHAR(255), artist_id INT, genre VARCHAR(255), country_of_origin VARCHAR(255), sale_date DATE, price DECIMAL(10,2), FOREIGN KEY (artist_id) REFERENCES artists(artist_id));
CREATE TABLE artists (artist_id INT PRIMARY KEY, name VARCHAR(255), gender VARCHAR(255), date_of_birth DATE, country_of_origin VARCHAR(255));
CREATE VIEW top_selling_artworks_by_female_artists AS SELECT a.artwork_id, a.title, a.artist_id, a.genre, a.country_of_origin, a.sale_date, a.price, ar.name AS artist_name FROM artworks a JOIN artists ar ON a.artist_id = ar.artist_id WHERE ar.gender = 'Female' AND a.sale_date >= DATE('now', '-5 years');","SELECT
    a.title AS Artwork_Title,
    a.artist_id AS Artist_ID,
    a.genre AS Genre,
    a.country_of_origin AS Country_of_Origin,
    a.sale_date AS Sale_Date,
    a.price AS Sale_Price
FROM
    top_selling_artworks_by_female_artists a
WHERE
    a.sale_date >= DATE('now', '-5 years')
ORDER BY
    a.sale_date DESC
LIMIT 10;","1. This query selects data from ""top_selling_artworks_by_female_artists"" view, which focuses on works by female artists sold in the last 5 years.
2. It filters the data to include only sales within the past 5 years.
3. It orders the results in descending order by sale date, showing the most recent sales first.
4. It limits the output to the top 10 best-selling artworks.
5. The final output displays the artwork title, artist ID, genre, country of origin, sale date, and sale price."
315,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Provide a list of all students enrolled in courses taught by Professor Smith in the Fall 2023 semester, along with their final grades.","CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    phone_number VARCHAR(20),
    address VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    zip_code VARCHAR(10),
    country VARCHAR(255)
);

CREATE TABLE Courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(255) NOT NULL,
    department_id INT,
    semester VARCHAR(255),
    year INT,
    instructor_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id),
    FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id)
);

CREATE TABLE Enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    grade DECIMAL(3,2),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Instructors (
    instructor_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE,
    phone_number VARCHAR(20),
    department_id INT,
    FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

CREATE TABLE Departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(255) NOT NULL
);","SELECT s.first_name, s.last_name, e.grade
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
JOIN Instructors i ON c.instructor_id = i.instructor_id
WHERE i.first_name = 'Smith' AND i.last_name = 'Smith' AND c.semester = 'Fall' AND c.year = 2023;","This query retrieves the first name, last name, and final grade of students enrolled in courses taught by Professor Smith in the Fall 2023 semester.

1. It starts by joining the Students table with the Enrollments table on the student_id column.
2. Then, it joins the Enrollments table with the Courses table on the course_id column.
3. Finally, it joins the Courses table with the Instructors table on the instructor_id column.
4. The WHERE clause filters the results to include only courses taught by Professor Smith in the Fall 2023 semester.
5. The query selects the first name, last name, and grade of the students who meet the criteria."
316,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",What are the 10 most popular courses among students enrolled in the 'Computer Science' program and how many students are enrolled in each of those courses?,"CREATE TABLE courses ( course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, start_date DATE, end_date DATE, instructor_id INT REFERENCES instructors(instructor_id), program_id INT REFERENCES programs(program_id) );
CREATE TABLE programs ( program_id INT PRIMARY KEY, program_name VARCHAR(255) NOT NULL );
CREATE TABLE enrollments ( enrollment_id INT PRIMARY KEY, student_id INT REFERENCES students(student_id), course_id INT REFERENCES courses(course_id), enrollment_date DATE );
CREATE TABLE students ( student_id INT PRIMARY KEY, student_name VARCHAR(255) NOT NULL, program_id INT REFERENCES programs(program_id) );
INSERT INTO programs (program_id, program_name) VALUES (1, 'Computer Science');
INSERT INTO programs (program_id, program_name) VALUES (2, 'Mathematics');","SELECT c.course_name, COUNT(*) AS num_students
FROM courses c
JOIN enrollments e ON c.course_id = e.course_id
JOIN students s ON e.student_id = s.student_id
JOIN programs p ON s.program_id = p.program_id
WHERE p.program_name = 'Computer Science'
GROUP BY c.course_name
ORDER BY num_students DESC
LIMIT 10;","This query retrieves the 10 most popular courses among students enrolled in the 'Computer Science' program and the number of students enrolled in each of those courses.

1. We start by joining the 'courses' table with the 'enrollments' table on the 'course_id' column to link courses with student enrollments.
2. Then, we join the 'enrollments' table with the 'students' table on the 'student_id' column to link enrollments with student information.
3. We join the 'students' table with the 'programs' table on the 'program_id' column to link students with their programs.
4. We filter the results to only include students enrolled in the 'Computer Science' program using the 'WHERE' clause.
5. We group the results by the 'course_name' to count the number of students enrolled in each course.
6. We order the results in descending order of the number of students to identify the most popular courses.
7. Finally, we limit the results to the top 10 most popular courses using the 'LIMIT' clause."
317,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Identify the top 5 students with the highest average grades in Math and Science, excluding students who have received any disciplinary actions.","CREATE TABLE students (
  student_id INT PRIMARY KEY,
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  grade_level INT,
  math_grade FLOAT,
  science_grade FLOAT,
  disciplinary_actions INT
);

CREATE TABLE disciplinary_actions (
  student_id INT,
  action_date DATE,
  action_type VARCHAR(255),
  PRIMARY KEY (student_id, action_date)
);

INSERT INTO students (student_id, first_name, last_name, grade_level, math_grade, science_grade, disciplinary_actions) VALUES
(1, 'John', 'Smith', 10, 85.5, 92.3, 0),
(2, 'Alice', 'Johnson', 11, 98.7, 78.2, 1),
(3, 'Bob', 'Williams', 9, 77.1, 89.4, 0),
(4, 'Emily', 'Jones', 12, 95.2, 91.8, 0),
(5, 'Michael', 'Brown', 10, 88.9, 85.1, 2);

INSERT INTO disciplinary_actions (student_id, action_date, action_type) VALUES
(2, '2023-03-15', 'Detention'),
(5, '2022-10-26', 'Suspension'),
(5, '2023-04-12', 'In-school suspension');","SELECT s.first_name, s.last_name
FROM students s
JOIN (
    SELECT student_id, AVG(grade) AS avg_grade
    FROM (
        SELECT student_id, math_grade AS grade
        FROM students
        UNION ALL
        SELECT student_id, science_grade AS grade
        FROM students
    ) AS grades
    GROUP BY student_id
    HAVING COUNT(*) = 2
) AS avg_grades ON s.student_id = avg_grades.student_id
WHERE s.disciplinary_actions = 0
ORDER BY avg_grades.avg_grade DESC
LIMIT 5;","This SQL query identifies the top 5 students with the highest average grades in Math and Science, excluding students who have received any disciplinary actions. Here's how it works:

1. **Inner Query:**
   - Calculates the average grade for each student in Math and Science by combining the `math_grade` and `science_grade` columns using `UNION ALL`.
   - Groups the results by student ID and calculates the average grade for each student using `AVG(grade)`. This generates a table with student IDs and their average grades.

2. **Outer Query:**
   - Joins the `students` table with the results of the inner query using the `student_id` column.
   - Filters the results to only include students who have not received any disciplinary actions (`disciplinary_actions = 0`).
   - Orders the results by the average grade in descending order (`ORDER BY avg_grades.avg_grade DESC`).
   - Limits the results to the top 5 students (`LIMIT 5`).

This query uses a subquery to calculate the average grades for each student and then joins the results with the `students` table to retrieve the student names. By filtering and ordering the results, it identifies the top 5 students with the highest average grades who have not received any disciplinary actions."
318,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Find the average class size for each grade level, excluding any classes with less than 10 students.","CREATE TABLE students (
  student_id INT PRIMARY KEY,
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  grade_level INT
);

CREATE TABLE classes (
  class_id INT PRIMARY KEY,
  grade_level INT,
  subject VARCHAR(255),
  teacher_id INT,
  student_count INT
);

INSERT INTO students (student_id, first_name, last_name, grade_level) VALUES
(1, 'John', 'Smith', 10),
(2, 'Alice', 'Johnson', 11),
(3, 'Bob', 'Williams', 9),
(4, 'Emily', 'Jones', 12),
(5, 'Michael', 'Brown', 10);

INSERT INTO classes (class_id, grade_level, subject, teacher_id, student_count) VALUES
(1, 10, 'Math', 123, 25),
(2, 11, 'Science', 456, 18),
(3, 9, 'English', 789, 15),
(4, 12, 'History', 101, 30),
(5, 10, 'Art', 234, 8);","SELECT c.grade_level, AVG(c.student_count) AS average_class_size
FROM classes c
WHERE c.student_count >= 10
GROUP BY c.grade_level;","This SQL query finds the average class size for each grade level, excluding any classes with less than 10 students. Here's how it works:

1. **Filter:**
   - Filters the `classes` table to only include classes with a student count of 10 or more (`c.student_count >= 10`).

2. **Group and Aggregate:**
   - Groups the filtered results by grade level (`c.grade_level`).
   - Calculates the average class size for each grade level using `AVG(c.student_count)`. This generates a table with grade levels and their corresponding average class sizes.

This query uses a WHERE clause to filter out classes with less than 10 students before calculating the average class size for each grade level. By grouping the results and using the aggregate function AVG, it provides a summary of the average class size for each grade level."
319,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","How many students are enrolled in each course, and what is the average score for each course?","CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255) NOT NULL, instructor_id INT REFERENCES instructors(instructor_id));
CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255) NOT NULL, course_id INT REFERENCES courses(course_id));
CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, student_id INT REFERENCES students(student_id), course_id INT REFERENCES courses(course_id), score INT);","SELECT c.course_name, COUNT(s.student_id) AS num_students, AVG(e.score) AS avg_score FROM courses c JOIN enrollments e ON c.course_id = e.course_id JOIN students s ON e.student_id = s.student_id GROUP BY c.course_name;","This SQL query first joins the courses, enrollments, and students tables on the course_id and student_id columns, respectively. Then, it groups the results by course name and calculates the number of students enrolled in each course using the COUNT function and the average score for each course using the AVG function."
320,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of a 4-bedroom house in San Francisco?,"CREATE TABLE Listings (
 ListingID INT PRIMARY KEY,
 Address VARCHAR(255),
 City VARCHAR(255),
 State VARCHAR(255),
 ZipCode INT,
 Bedrooms INT,
 Bathrooms FLOAT,
 SquareFootage INT,
 Price FLOAT,
 ListingDate DATE,
 SaleDate DATE
);

CREATE TABLE Neighborhoods (
 NeighborhoodID INT PRIMARY KEY,
 City VARCHAR(255),
 State VARCHAR(255),
 MedianIncome FLOAT,
 Population INT,
 CrimeRate FLOAT
);

INSERT INTO Listings (ListingID, Address, City, State, ZipCode, Bedrooms, Bathrooms, SquareFootage, Price, ListingDate, SaleDate) VALUES
(1, '123 Main St', 'San Francisco', 'CA', 94105, 4, 2.5, 2000, 1500000, '2023-01-01', '2023-03-01'),
(2, '456 Oak Ave', 'San Francisco', 'CA', 94114, 3, 1.5, 1500, 1200000, '2023-02-01', '2023-04-01'),
(3, '789 Pine St', 'San Francisco', 'CA', 94118, 2, 1.0, 1000, 800000, '2023-03-01', '2023-05-01'),
(4, '1011 Willow Way', 'San Francisco', 'CA', 94122, 5, 3.0, 2500, 2000000, '2023-04-01', '2023-06-01'),
(5, '1213 Maple St', 'San Francisco', 'CA', 94127, 4, 2.0, 1800, 1300000, '2023-05-01', '2023-07-01');

INSERT INTO Neighborhoods (NeighborhoodID, City, State, MedianIncome, Population, CrimeRate) VALUES
(1, 'San Francisco', 'CA', 120000, 870000, 0.05),
(2, 'Los Angeles', 'CA', 90000, 3900000, 0.10),
(3, 'San Diego', 'CA', 110000, 1400000, 0.07),
(4, 'San Jose', 'CA', 130000, 1000000, 0.06),
(5, 'Oakland', 'CA', 100000, 440000, 0.08);",SELECT AVG(Price) FROM Listings WHERE Bedrooms = 4 AND City = 'San Francisco';,This query selects the average price of all listings in San Francisco that have 4 bedrooms. It uses the `AVG()` function to calculate the average price and filters the results based on the number of bedrooms and the city.
321,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many properties in London have been listed for sale in the past 30 days?,"CREATE TABLE listings (listing_id INT PRIMARY KEY, property_id INT, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, price INT, listing_date DATE, status VARCHAR(255));
CREATE TABLE properties (property_id INT PRIMARY KEY, type VARCHAR(255), bedrooms INT, bathrooms INT, square_footage INT, year_built INT, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT);","SELECT COUNT(*) FROM listings WHERE city = 'London' AND listing_date >= DATE('now', '-30 days') AND status = 'Active';","This SQL query counts the number of rows in the `listings` table where the `city` column is equal to 'London', the `listing_date` column is within the last 30 days, and the `status` column is equal to 'Active'."
322,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of 2-bedroom apartments in San Francisco?,"CREATE TABLE properties (
  id INT PRIMARY KEY,
  address VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  state VARCHAR(255) NOT NULL,
  zip_code INT,
  price INT,
  bedrooms INT,
  bathrooms INT,
  square_footage INT,
  year_built INT,
  property_type VARCHAR(255),
  listing_date DATE
);

CREATE TABLE neighborhoods (
  id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  state VARCHAR(255) NOT NULL,
  median_income INT,
  population INT
);

INSERT INTO properties (id, address, city, state, zip_code, price, bedrooms, bathrooms, square_footage, year_built, property_type, listing_date) VALUES
(1, '123 Main St', 'San Francisco', 'CA', 94105, 1200000, 2, 2, 1200, 2000, 'Apartment', '2023-03-01'),
(2, '456 Oak Ave', 'San Francisco', 'CA', 94114, 1800000, 3, 2, 1500, 2010, 'House', '2023-03-08'),
(3, '789 Pine St', 'San Francisco', 'CA', 94117, 950000, 1, 1, 750, 1990, 'Condo', '2023-03-15');

INSERT INTO neighborhoods (id, name, city, state, median_income, population) VALUES
(1, 'Mission District', 'San Francisco', 'CA', 85000, 40000),
(2, 'Nob Hill', 'San Francisco', 'CA', 150000, 10000),
(3, 'South of Market', 'San Francisco', 'CA', 120000, 25000);",SELECT AVG(price) FROM properties WHERE city = 'San Francisco' AND bedrooms = 2 AND property_type = 'Apartment';,"This query selects the average price of 2-bedroom apartments in San Francisco. 
It first filters the properties table to only include apartments in San Francisco with 2 bedrooms. 
Then, it uses the AVG() function to calculate the average price of the filtered properties."
323,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 neighborhoods in Los Angeles with the highest median income?,"CREATE TABLE neighborhoods (
  id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  state VARCHAR(255) NOT NULL,
  median_income INT,
  population INT
);

INSERT INTO neighborhoods (id, name, city, state, median_income, population) VALUES
(1, 'Bel Air', 'Los Angeles', 'CA', 250000, 8000),
(2, 'Beverly Hills', 'Los Angeles', 'CA', 180000, 35000),
(3, 'Brentwood', 'Los Angeles', 'CA', 160000, 22000),
(4, 'Holmby Hills', 'Los Angeles', 'CA', 220000, 10000),
(5, 'Pacific Palisades', 'Los Angeles', 'CA', 190000, 28000),
(6, 'Venice Beach', 'Los Angeles', 'CA', 75000, 45000),
(7, 'Santa Monica', 'Los Angeles', 'CA', 110000, 90000),
(8, 'Malibu', 'Los Angeles', 'CA', 140000, 13000);

CREATE TABLE properties (
  id INT PRIMARY KEY,
  address VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  state VARCHAR(255) NOT NULL,
  zip_code INT,
  price INT,
  bedrooms INT,
  bathrooms INT,
  square_footage INT,
  year_built INT,
  property_type VARCHAR(255),
  listing_date DATE
);

INSERT INTO properties (id, address, city, state, zip_code, price, bedrooms, bathrooms, square_footage, year_built, property_type, listing_date) VALUES
(1, '123 Ocean Ave', 'Santa Monica', 'CA', 90401, 2500000, 4, 3, 3000, 2005, 'House', '2023-03-01'),
(2, '456 Beach Blvd', 'Venice Beach', 'CA', 90291, 1500000, 3, 2, 2000, 1995, 'Condo', '2023-03-08'),
(3, '789 Sunset Strip', 'West Hollywood', 'CA', 90069, 3000000, 5, 4, 4500, 2010, 'Mansion', '2023-03-15');","SELECT name, median_income FROM neighborhoods WHERE city = 'Los Angeles' ORDER BY median_income DESC LIMIT 5;","This query selects the top 5 neighborhoods in Los Angeles with the highest median income.
It first filters the neighborhoods table to only include neighborhoods in Los Angeles.
Then, it sorts the neighborhoods by median income in descending order.
Finally, it uses the LIMIT clause to limit the results to the top 5 neighborhoods."
324,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Provide the total number of properties listed in San Francisco that have more than 3 bedrooms?,"CREATE TABLE listings (  listing_id INT PRIMARY KEY,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  bedrooms INT,  bathrooms INT,  price DECIMAL(10,2),  listing_date DATE);INSERT INTO listings (listing_id, address, city, state, zip_code, bedrooms, bathrooms, price, listing_date) VALUES(1, '123 Main St', 'San Francisco', 'CA', 94102, 2, 1, 500000, '2023-03-08'),(2, '456 Oak Ave', 'Los Angeles', 'CA', 90012, 3, 2, 750000, '2023-03-15'),(3, '789 Pine St', 'Seattle', 'WA', 98101, 4, 3, 1000000, '2023-03-22'),(4, '1011 Willow St', 'San Francisco', 'CA', 94114, 2, 1, 600000, '2023-03-29'),(5, '1213 Maple St', 'Denver', 'CO', 80202, 3, 2, 800000, '2023-04-05'),(6, '1415 Birch St', 'San Francisco', 'CA', 94109, 4, 3, 1100000, '2023-04-12'),(7, '1617 Spruce St', 'Chicago', 'IL', 60601, 2, 1, 450000, '2023-04-19'),(8, '1819 Cedar St', 'San Francisco', 'CA', 94110, 3, 2, 700000, '2023-04-26'),(9, '2021 Oak St', 'Los Angeles', 'CA', 90007, 4, 3, 900000, '2023-05-03'),(10, '2223 Pine St', 'Seattle', 'WA', 98109, 2, 1, 550000, '2023-05-10');",SELECT COUNT(*) FROM listings WHERE city = 'San Francisco' AND bedrooms > 3;,"This query selects the total number of properties listed in San Francisco that have more than 3 bedrooms. It first filters the listings table to only include properties in San Francisco, and then counts the number of properties that have more than 3 bedrooms."
325,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",What is the average sale price of paintings by female artists in the United States?,"CREATE TABLE Artist(ArtistID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255), Gender VARCHAR(255), Country VARCHAR(255));
CREATE TABLE Artwork(ArtworkID INT PRIMARY KEY, ArtistID INT REFERENCES Artist(ArtistID), Title VARCHAR(255), SalePrice DECIMAL, SaleDate DATE);
CREATE TABLE Gallery(GalleryID INT PRIMARY KEY, GalleryName VARCHAR(255), City VARCHAR(255), Country VARCHAR(255));
CREATE TABLE ArtworkGallery(ArtworkID INT REFERENCES Artwork(ArtworkID), GalleryID INT REFERENCES Gallery(GalleryID), PRIMARY KEY (ArtworkID, GalleryID));
INSERT INTO Artist (ArtistID, FirstName, LastName, Gender, Country) VALUES
(1, 'Frida', 'Kahlo', 'Female', 'Mexico'),
(2, 'Pablo', 'Picasso', 'Male', 'Spain'),
(3, 'Georgia', 'O''Keeffe', 'Female', 'United States'),
(4, 'Claude', 'Monet', 'Male', 'France'),
(5, 'Yayoi', 'Kusama', 'Female', 'Japan');
INSERT INTO Artwork (ArtworkID, ArtistID, Title, SalePrice, SaleDate) VALUES
(1, 1, 'The Two Fridas', 35000000, '2021-11-12'),
(2, 2, 'Guernica', 150000000, '1997-05-05'),
(3, 3, 'Jimson Weed/White Flower No. 1', 44405000, '2014-11-20'),
(4, 4, 'Water Lilies', 70000000, '2016-05-17'),
(5, 5, 'Infinity Nets', 71000000, '2019-05-07');
INSERT INTO Gallery (GalleryID, GalleryName, City, Country) VALUES
(1, 'Sotheby''s', 'New York', 'United States'),
(2, 'Christie''s', 'London', 'United Kingdom'),
(3, 'Gagosian', 'New York', 'United States'),
(4, 'Pace Gallery', 'New York', 'United States'),
(5, 'David Zwirner', 'New York', 'United States');
INSERT INTO ArtworkGallery (ArtworkID, GalleryID) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);",SELECT AVG(SalePrice) FROM Artwork AS A JOIN Artist AS Ar ON A.ArtistID = Ar.ArtistID WHERE Ar.Gender = 'Female' AND Ar.Country = 'United States';,This query joins the Artwork and Artist tables on the ArtistID to retrieve the sale price of paintings by female artists in the United States. The AVG function calculates the average sale price.
326,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Show a breakdown of artists by genre, and then sub-total by region and ethnicity.","CREATE TABLE Artist (id INT PRIMARY KEY, name VARCHAR(255), genre VARCHAR(255), region VARCHAR(255), ethnicity VARCHAR(255));
INSERT INTO Artist (id, name, genre, region, ethnicity) VALUES
(1, 'Vincent van Gogh', 'Post-Impressionism', 'Europe', 'Dutch'),
(2, 'Claude Monet', 'Impressionism', 'Europe', 'French'),
(3, 'Pablo Picasso', 'Cubism', 'Europe', 'Spanish'),
(4, 'Frida Kahlo', 'Surrealism', 'Americas', 'Mexican'),
(5, 'Yayoi Kusama', 'Pop Art', 'Asia', 'Japanese'),
(6, 'David Hockney', 'Pop Art', 'Europe', 'British'),
(7, 'Kerry James Marshall', 'Figurative Art', 'Americas', 'African American'),
(8, 'Kara Walker', 'Conceptual Art', 'Americas', 'African American'),
(9, 'Wangechi Mutu', 'Sculpture', 'Africa', 'Kenyan'),
(10, 'Doris Salcedo', 'Installation Art', 'Americas', 'Colombian');

CREATE TABLE Artwork (id INT PRIMARY KEY, artist_id INT REFERENCES Artist(id), title VARCHAR(255), year INT, medium VARCHAR(255), price DECIMAL(10,2));
INSERT INTO Artwork (id, artist_id, title, year, medium, price) VALUES
(1, 1, 'The Starry Night', 1889, 'Oil on canvas', 100000000),
(2, 2, 'Impression, Sunrise', 1872, 'Oil on canvas', 200000000),
(3, 3, 'Guernica', 1937, 'Oil on canvas', 300000000),
(4, 4, 'The Two Fridas', 1939, 'Oil on canvas', 400000000),
(5, 5, 'Infinity Nets', 1961, 'Acrylic on canvas', 500000000),
(6, 6, 'A Bigger Splash', 1967, 'Acrylic on canvas', 600000000),
(7, 7, 'A Portrait of the Artist as a Shadow of His Former Self', 1980, 'Acrylic on canvas', 700000000),
(8, 8, 'Katastrophe!', 1995, 'Paper and gouache', 800000000),
(9, 9, 'The Seated I', 2000, 'Bronze sculpture', 900000000),
(10, 10, 'Shibboleth', 2007, 'Crack in the floor of the Turbine Hall', 1000000000);

CREATE VIEW MarketTrend AS
SELECT a.genre, COUNT(aw.id) AS artwork_count, SUM(aw.price) AS total_sales
FROM Artist a
JOIN Artwork aw ON a.id = aw.artist_id
GROUP BY a.genre;","SELECT Genre, Region, Ethnicity, COUNT(*) AS ArtistCount
FROM Artist
GROUP BY CUBE (Genre, Region, Ethnicity)
ORDER BY Genre, Region, Ethnicity;","This SQL query uses the CUBE operator to create a breakdown of artists by genre, region, and ethnicity. The `GROUP BY CUBE` clause allows for grouping by any combination of these columns, including all combinations, which is what we want in this case. The `COUNT(*)` function counts the number of artists in each group, and the `ORDER BY` clause sorts the results by genre, region, and ethnicity."
327,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Which museums have the most diverse collection based on the number of works by artists from different countries?,"```sql
CREATE TABLE Artists (
    artist_id INT PRIMARY KEY,
    artist_name VARCHAR(255) NOT NULL,
    country_of_origin VARCHAR(255),
    birth_year INT
);

CREATE TABLE Artworks (
    artwork_id INT PRIMARY KEY,
    artist_id INT REFERENCES Artists(artist_id),
    title VARCHAR(255) NOT NULL,
    creation_year INT,
    museum_id INT REFERENCES Museums(museum_id),
    acquisition_year INT
);

CREATE TABLE Museums (
    museum_id INT PRIMARY KEY,
    museum_name VARCHAR(255) NOT NULL,
    city VARCHAR(255),
    country VARCHAR(255)
);

INSERT INTO Artists (artist_id, artist_name, country_of_origin, birth_year) VALUES
(1, 'Claude Monet', 'France', 1840),
(2, 'Vincent van Gogh', 'Netherlands', 1853),
(3, 'Frida Kahlo', 'Mexico', 1907),
(4, 'Pablo Picasso', 'Spain', 1881),
(5, 'Yayoi Kusama', 'Japan', 1929);

INSERT INTO Artworks (artwork_id, artist_id, title, creation_year, museum_id, acquisition_year) VALUES
(1, 1, 'Water Lilies', 1919, 1, 1950),
(2, 2, 'The Starry Night', 1889, 2, 1930),
(3, 3, 'The Two Fridas', 1939, 3, 1960),
(4, 4, 'Guernica', 1937, 4, 1945),
(5, 5, 'Infinity Nets', 1965, 5, 1990);

INSERT INTO Museums (museum_id, museum_name, city, country) VALUES
(1, 'Musée d''Orsay', 'Paris', 'France'),
(2, 'Museum of Modern Art', 'New York', 'USA'),
(3, 'Museo Frida Kahlo', 'Mexico City', 'Mexico'),
(4, 'Museo Nacional Centro de Arte Reina Sofía', 'Madrid', 'Spain'),
(5, 'The Broad', 'Los Angeles', 'USA');
```","```sql
SELECT m.museum_name, COUNT(DISTINCT a.country_of_origin) AS num_countries
FROM Museums AS m
JOIN Artworks AS aw ON m.museum_id = aw.museum_id
JOIN Artists AS a ON aw.artist_id = a.artist_id
GROUP BY m.museum_name
ORDER BY num_countries DESC
LIMIT 5;
```","This SQL query aims to identify the museums with the most diverse collections based on the number of artists' countries of origin represented in their collections.

1. We start by joining the Museums, Artworks, and Artists tables on their respective foreign keys.
2. We then use the `COUNT(DISTINCT a.country_of_origin)` function to count the number of unique countries of origin for artists whose works are housed in each museum.
3. The results are grouped by the museum name and sorted in descending order based on the number of countries.
4. Finally, we limit the output to the top 5 museums with the most diverse collections."
328,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",What is the average selling price of paintings by female artists compared to male artists in the past 10 years?,"```sql
CREATE TABLE Artists (
    artist_id INT PRIMARY KEY,
    artist_name VARCHAR(255) NOT NULL,
    gender VARCHAR(255),
    birth_year INT
);

CREATE TABLE Artworks (
    artwork_id INT PRIMARY KEY,
    artist_id INT REFERENCES Artists(artist_id),
    title VARCHAR(255) NOT NULL,
    creation_year INT,
    sale_price DECIMAL(10,2),
    sale_date DATE
);

INSERT INTO Artists (artist_id, artist_name, gender, birth_year) VALUES
(1, 'Claude Monet', 'Male', 1840),
(2, 'Vincent van Gogh', 'Male', 1853),
(3, 'Frida Kahlo', 'Female', 1907),
(4, 'Pablo Picasso', 'Male', 1881),
(5, 'Yayoi Kusama', 'Female', 1929);

INSERT INTO Artworks (artwork_id, artist_id, title, creation_year, sale_price, sale_date) VALUES
(1, 1, 'Water Lilies', 1919, 35.5, '2022-03-15'),
(2, 2, 'The Starry Night', 1889, 100.0, '2021-05-10'),
(3, 3, 'The Two Fridas', 1939, 15.2, '2020-12-01'),
(4, 4, 'Guernica', 1937, 180.5, '2019-06-28'),
(5, 5, 'Infinity Nets', 1965, 27.8, '2023-01-20');
```","```sql
SELECT
    AVG(CASE WHEN a.gender = 'Female' THEN aw.sale_price ELSE NULL END) AS avg_female_price,
    AVG(CASE WHEN a.gender = 'Male' THEN aw.sale_price ELSE NULL END) AS avg_male_price
FROM Artists AS a
JOIN Artworks AS aw ON a.artist_id = aw.artist_id
WHERE aw.sale_date >= DATE('now', '-10 years')
AND aw.sale_price IS NOT NULL;
```","To compare the average selling price of paintings by female and male artists in the past 10 years, we perform the following steps:

1. We join the Artists and Artworks tables on the artist_id.
2. We filter the Artworks table to include only sales that occurred within the past 10 years and have non-null sale prices.
3. We use a CASE statement to calculate the average sale price for female and male artists separately.
4. The results are displayed as two values: the average selling price for female artists and the average selling price for male artists."
329,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",How many artists from each country are represented in the collection?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, country VARCHAR(255));
CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), title VARCHAR(255) NOT NULL, year INT);","SELECT country, COUNT(*) AS num_artists FROM Artists GROUP BY country ORDER BY num_artists DESC;","This SQL query first selects the country and counts the number of artists from each country using the COUNT(*) function. Then, it groups the results by country and orders them in descending order based on the number of artists."
330,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","What are the top 10 cities in the United States with the highest median home prices, along with the percentage change in median home prices compared to the previous year?","CREATE TABLE US_Cities_Median_Home_Prices (City VARCHAR(255), State VARCHAR(255), Median_Home_Price DECIMAL(10,2), Year INT, PRIMARY KEY (City, Year));

CREATE TABLE US_Cities_Previous_Year_Median_Home_Prices (City VARCHAR(255), State VARCHAR(255), Previous_Year_Median_Home_Price DECIMAL(10,2), Year INT, PRIMARY KEY (City, Year));","SELECT TOP 10 WITH TIES City, Median_Home_Price, (Median_Home_Price - Previous_Year_Median_Home_Price) * 100.0 / Previous_Year_Median_Home_Price AS Percentage_Change
FROM US_Cities_Median_Home_Prices
INNER JOIN US_Cities_Previous_Year_Median_Home_Prices ON US_Cities_Median_Home_Prices.City = US_Cities_Previous_Year_Median_Home_Prices.City AND US_Cities_Median_Home_Prices.Year = US_Cities_Previous_Year_Median_Home_Prices.Year + 1
WHERE US_Cities_Median_Home_Prices.State = 'United States'
ORDER BY Median_Home_Price DESC;","This SQL query retrieves the top 10 cities in the United States with the highest median home prices, along with the percentage change in median home prices compared to the previous year. 

The query first joins two tables: US_Cities_Median_Home_Prices and US_Cities_Previous_Year_Median_Home_Prices. The join condition ensures that the city and year values match between the two tables. 

The query then filters the data to include only cities in the United States. 

The query then calculates the percentage change in median home prices by subtracting the previous year's median home price from the current year's median home price and dividing the result by the previous year's median home price. 

The query then sorts the results in descending order of median home price. 

The query finally returns the top 10 rows, which represent the cities with the highest median home prices and the largest percentage increases in median home prices."
331,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Which neighborhoods in San Francisco have experienced the most significant increase in median home prices over the past five years?,"CREATE TABLE SF_Neighborhoods_Median_Home_Prices (Neighborhood VARCHAR(255), Year INT, Median_Home_Price DECIMAL(10,2), PRIMARY KEY (Neighborhood, Year));","SELECT Neighborhood, Median_Home_Price, (Median_Home_Price - LAG(Median_Home_Price, 5, 0) OVER (PARTITION BY Neighborhood ORDER BY Year ASC)) * 100.0 / LAG(Median_Home_Price, 5, 0) OVER (PARTITION BY Neighborhood ORDER BY Year ASC) AS Percentage_Change
FROM SF_Neighborhoods_Median_Home_Prices
WHERE Year >= 2018
ORDER BY Percentage_Change DESC;","This SQL query identifies the neighborhoods in San Francisco that have experienced the most significant increase in median home prices over the past five years. 

The query first uses the LAG window function to calculate the median home price for each neighborhood five years prior to the current year. 

The query then calculates the percentage change in median home prices by subtracting the median home price from five years ago from the current median home price and dividing the result by the median home price from five years ago. 

The query then filters the data to include only neighborhoods in San Francisco and years from 2018 onwards. 

The query then sorts the results in descending order of percentage change, which identifies the neighborhoods with the largest increases in median home prices. 

The query returns the neighborhood name, current median home price, and percentage change in median home price for each neighborhood."
332,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average number of bedrooms and bathrooms in single-family homes in California that have sold for more than $1 million in the past year?,"CREATE TABLE CA_Single_Family_Homes_Sales (Property_Type VARCHAR(255), Sale_Date DATE, Sale_Price DECIMAL(10,2), Bedrooms INT, Bathrooms INT, PRIMARY KEY (Property_Type, Sale_Date));","SELECT AVG(Bedrooms) AS Average_Bedrooms, AVG(Bathrooms) AS Average_Bathrooms
FROM CA_Single_Family_Homes_Sales
WHERE Property_Type = 'Single Family Residence' AND Sale_Date >= DATEADD(year, -1, GETDATE()) AND Sale_Price > 1000000;","This SQL query calculates the average number of bedrooms and bathrooms in single-family homes in California that have sold for more than $1 million in the past year. 

The query first filters the data to include only sales of single-family homes in California that occurred in the past year and where the sale price was greater than $1 million. 

The query then uses the AVG aggregate function to calculate the average number of bedrooms and bathrooms for these sales. 

The query returns two values: the average number of bedrooms and the average number of bathrooms."
333,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 10 zip codes in the United States with the highest concentration of properties built before 1950.,"CREATE TABLE US_Properties (Property_ID INT, Address VARCHAR(255), City VARCHAR(255), State VARCHAR(255), Zip_Code VARCHAR(5), Year_Built INT, PRIMARY KEY (Property_ID));","SELECT Zip_Code, COUNT(*) AS Property_Count
FROM US_Properties
WHERE Year_Built < 1950
GROUP BY Zip_Code
ORDER BY Property_Count DESC
LIMIT 10;","This SQL query identifies the top 10 zip codes in the United States with the highest concentration of properties built before 1950. 

The query first filters the data to include only properties built before 1950. 

The query then groups the data by zip code and counts the number of properties in each zip code. 

The query then sorts the results in descending order of property count. 

The query finally returns the top 10 zip codes with the highest concentration of properties built before 1950."
334,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average return on investment (ROI) for residential real estate investments in the United States over the past 10 years?,"CREATE TABLE US_Residential_Real_Estate_Investments (Investment_ID INT, Purchase_Price DECIMAL(10,2), Purchase_Date DATE, Sale_Price DECIMAL(10,2), Sale_Date DATE, PRIMARY KEY (Investment_ID));","SELECT AVG((Sale_Price - Purchase_Price) * 100.0 / Purchase_Price) AS Average_ROI
FROM US_Residential_Real_Estate_Investments
WHERE Sale_Date >= DATEADD(year, -10, GETDATE());","This SQL query calculates the average return on investment (ROI) for residential real estate investments in the United States over the past 10 years. 

The query first filters the data to include only sales that occurred in the past 10 years. 

The query then calculates the ROI for each investment by subtracting the purchase price from the sale price and dividing the result by the purchase price. 

The query then uses the AVG aggregate function to calculate the average ROI for all investments. 

The query returns the average ROI as a percentage."
335,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",What are the average sales of paintings by female artists across different countries in the past three years?,"CREATE TABLE artists (
    artist_id INT PRIMARY KEY,
    artist_name VARCHAR(255),
    gender VARCHAR(10),
    country VARCHAR(50)
);

INSERT INTO artists (artist_id, artist_name, gender, country) VALUES
(1, 'Frida Kahlo', 'Female', 'Mexico'),
(2, 'Yayoi Kusama', 'Female', 'Japan'),
(3, 'Georgia O\'Keeffe', 'Female', 'United States'),
(4, 'Pablo Picasso', 'Male', 'Spain'),
(5, 'Claude Monet', 'Male', 'France');

CREATE TABLE paintings (
    painting_id INT PRIMARY KEY,
    artist_id INT,
    title VARCHAR(255),
    year INT,
    price DECIMAL(10, 2),
    FOREIGN KEY (artist_id) REFERENCES artists(artist_id)
);

INSERT INTO paintings (painting_id, artist_id, title, year, price) VALUES
(1, 1, 'The Two Fridas', 1939, 10000000),
(2, 2, 'Infinity Nets', 1965, 7500000),
(3, 3, 'Jimson Weed/White Flower No. 1', 1932, 4500000),
(4, 4, 'Guernica', 1937, 20000000),
(5, 5, 'Water Lilies', 1919, 3500000),
(6, 1, 'Self-Portrait with Thorn Necklace and Hummingbird', 1940, 9000000),
(7, 2, 'Narcissus Garden', 1966, 6500000),
(8, 3, 'Black Iris', 1926, 4000000),
(9, 4, 'Les Demoiselles d\'Avignon', 1907, 25000000),
(10, 5, 'Impression, Sunrise', 1872, 3000000);

CREATE VIEW female_painters_sales AS
SELECT a.artist_name, a.country, p.year, p.price
FROM artists a
INNER JOIN paintings p ON a.artist_id = p.artist_id
WHERE a.gender = 'Female';","SELECT AVG(p.price) AS Average_Sales
FROM female_painters_sales p
GROUP BY p.country, p.year
HAVING p.year >= (SELECT MAX(YEAR) - 2 FROM paintings);","1. Filter artists table for female artists
2. Join artists and paintings tables based on artist_id
3. Select artist_name, country, year and price
4. Calculate average sales for female artists grouped by country and years
5. Filter out sales before last 3 years"
336,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Which galleries in New York City represent artists of color?,"CREATE TABLE Galleries (GalleryID INT PRIMARY KEY, GalleryName VARCHAR(255), City VARCHAR(255), State VARCHAR(255));
INSERT INTO Galleries (GalleryID, GalleryName, City, State) VALUES (1, 'Gallery A', 'New York', 'NY'), (2, 'Gallery B', 'Los Angeles', 'CA'), (3, 'Gallery C', 'Chicago', 'IL'), (4, 'Gallery D', 'Miami', 'FL'), (5, 'Gallery E', 'New York', 'NY');
CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(255), GalleryID INT, Race VARCHAR(255), Gender VARCHAR(255), FOREIGN KEY (GalleryID) REFERENCES Galleries(GalleryID));
INSERT INTO Artists (ArtistID, ArtistName, GalleryID, Race, Gender) VALUES (1, 'Artist 1', 1, 'Black', 'Female'), (2, 'Artist 2', 2, 'White', 'Male'), (3, 'Artist 3', 3, 'Latinx', 'Non-binary'), (4, 'Artist 4', 4, 'Asian', 'Female'), (5, 'Artist 5', 5, 'Indigenous', 'Male');","SELECT g.GalleryName, a.ArtistName FROM Galleries g JOIN Artists a ON g.GalleryID = a.GalleryID WHERE g.City = 'New York' AND a.Race IN ('Black', 'Latinx', 'Asian', 'Indigenous');","This SQL query joins the Galleries and Artists tables on the GalleryID column. It then selects the GalleryName and ArtistName columns for all galleries in New York City where the artist's race is Black, Latinx, Asian, or Indigenous."
337,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",What is the average sale price for paintings by female artists in the Impressionist style?,"CREATE TABLE Artworks (ArtworkID INT PRIMARY KEY, ArtistID INT, Title VARCHAR(255), Style VARCHAR(255), Medium VARCHAR(255), SalePrice DECIMAL(10,2), SaleDate DATE, FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID));
INSERT INTO Artworks (ArtworkID, ArtistID, Title, Style, Medium, SalePrice, SaleDate) VALUES (1, 1, 'Painting 1', 'Impressionist', 'Oil on canvas', 10000.00, '2023-01-01'), (2, 2, 'Painting 2', 'Abstract', 'Acrylic on canvas', 5000.00, '2023-02-01'), (3, 3, 'Sculpture 1', 'Modern', 'Bronze', 15000.00, '2023-03-01'), (4, 4, 'Painting 3', 'Surrealist', 'Oil on canvas', 7500.00, '2023-04-01'), (5, 5, 'Painting 4', 'Impressionist', 'Watercolor on paper', 2500.00, '2023-05-01');",SELECT AVG(a.SalePrice) FROM Artworks a JOIN Artists ar ON a.ArtistID = ar.ArtistID WHERE a.Style = 'Impressionist' AND ar.Gender = 'Female';,This SQL query joins the Artworks and Artists tables on the ArtistID column. It then calculates the average sale price for all Impressionist paintings by female artists.
338,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",How many museums in Europe have collections that focus on contemporary African art?,"CREATE TABLE Museums (MuseumID INT PRIMARY KEY, MuseumName VARCHAR(255), City VARCHAR(255), Country VARCHAR(255), Focus VARCHAR(255));
INSERT INTO Museums (MuseumID, MuseumName, City, Country, Focus) VALUES (1, 'Museum A', 'Paris', 'France', 'Modern Art'), (2, 'Museum B', 'London', 'United Kingdom', 'Contemporary Art'), (3, 'Museum C', 'Berlin', 'Germany', 'Renaissance Art'), (4, 'Museum D', 'Madrid', 'Spain', 'Impressionist Art'), (5, 'Museum E', 'Amsterdam', 'Netherlands', 'African Art');","SELECT COUNT(*) FROM Museums WHERE Country IN ('France', 'United Kingdom', 'Germany', 'Spain', 'Netherlands') AND Focus = 'Contemporary African Art';",This SQL query counts the number of museums in Europe that have a focus on contemporary African art.
339,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Who are the top 10 highest-paid living artists in the world?,"CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(255), BirthYear INT, Nationality VARCHAR(255));
INSERT INTO Artists (ArtistID, ArtistName, BirthYear, Nationality) VALUES (1, 'Artist 1', 1960, 'American'), (2, 'Artist 2', 1955, 'British'), (3, 'Artist 3', 1970, 'Chinese'), (4, 'Artist 4', 1945, 'French'), (5, 'Artist 5', 1980, 'Indian');
CREATE TABLE Sales (SaleID INT PRIMARY KEY, ArtistID INT, ArtworkID INT, SalePrice DECIMAL(10,2), SaleDate DATE, FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID), FOREIGN KEY (ArtworkID) REFERENCES Artworks(ArtworkID));
INSERT INTO Sales (SaleID, ArtistID, ArtworkID, SalePrice, SaleDate) VALUES (1, 1, 1, 10000.00, '2023-01-01'), (2, 2, 2, 5000.00, '2023-02-01'), (3, 3, 3, 15000.00, '2023-03-01'), (4, 4, 4, 7500.00, '2023-04-01'), (5, 5, 5, 2500.00, '2023-05-01');","SELECT a.ArtistName, SUM(s.SalePrice) AS TotalSales FROM Artists a JOIN Sales s ON a.ArtistID = s.ArtistID WHERE a.BirthYear > 1900 GROUP BY a.ArtistName ORDER BY TotalSales DESC LIMIT 10;","This SQL query joins the Artists and Sales tables on the ArtistID column. It then calculates the total sales for each living artist and orders the results from highest to lowest. Finally, it returns the top 10 highest-paid living artists in the world."
340,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",How many orders have a shipping address in the United States and a billing address outside of Europe?,"CREATE TABLE Orders ( OrderID int, CustomerID int, OrderDate date, ShipAddress varchar(255), BillAddress varchar(255), OrderStatus varchar(255));
CREATE TABLE Customers ( CustomerID int, CustomerName varchar(255), Country varchar(255));
CREATE TABLE Addresses ( AddressID int, CustomerID int, AddressType varchar(255), StreetAddress varchar(255), City varchar(255), State varchar(255), PostalCode int, Country varchar(255));
INSERT INTO Customers (CustomerID, CustomerName, Country) VALUES (1, 'John Smith', 'United States'), (2, 'Alice Johnson', 'Canada'), (3, 'Bob Williams', 'France');
INSERT INTO Addresses (AddressID, CustomerID, AddressType, StreetAddress, City, State, PostalCode, Country) VALUES (1, 1, 'Shipping', '123 Main St', 'Anytown', 'CA', 91234, 'United States'), (2, 1, 'Billing', '456 Elm St', 'Anytown', 'CA', 91234, 'Canada'), (3, 2, 'Shipping', '789 Oak St', 'Anytown', 'ON', 12345, 'Canada'), (4, 2, 'Billing', '1011 Pine St', 'Anytown', 'ON', 12345, 'United States'), (5, 3, 'Shipping', '1213 Willow St', 'Anytown', 'Île-de-France', 75000, 'France'), (6, 3, 'Billing', '1415 Maple St', 'Anytown', 'Île-de-France', 75000, 'France');
INSERT INTO Orders (OrderID, CustomerID, OrderDate, ShipAddress, BillAddress, OrderStatus) VALUES (1, 1, '2023-01-01', 1, 2, 'Shipped'), (2, 2, '2023-01-02', 3, 4, 'Pending'), (3, 3, '2023-01-03', 5, 6, 'Completed');","SELECT COUNT(*) FROM Orders AS O
JOIN Customers AS C ON O.CustomerID = C.CustomerID
WHERE O.ShipAddress IN (SELECT AddressID FROM Addresses WHERE Country = 'United States')
AND O.BillAddress IN (SELECT AddressID FROM Addresses WHERE Country NOT IN ('Austria', 'Belgium', 'Bulgaria', 'Croatia', 'Cyprus', 'Czech Republic', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany', 'Greece', 'Hungary', 'Ireland', 'Italy', 'Latvia', 'Lithuania', 'Luxembourg', 'Malta', 'Netherlands', 'Poland', 'Portugal', 'Romania', 'Slovakia', 'Slovenia', 'Spain', 'Sweden'));","This query first joins the `Orders` and `Customers` tables on the `CustomerID` field. It then filters the results to include only orders where the shipping address is in the United States and the billing address is not in Europe. Finally, it counts the number of remaining orders."
341,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","List all customers who have placed an order in the last month, sorted by the total amount spent on orders in descending order.","CREATE TABLE Orders ( OrderID int, CustomerID int, OrderDate date, TotalAmount decimal(10,2));
CREATE TABLE Customers ( CustomerID int, CustomerName varchar(255), Email varchar(255));
INSERT INTO Customers (CustomerID, CustomerName, Email) VALUES (1, 'Alice Smith', 'alice@example.com'), (2, 'Bob Johnson', 'bob@example.com'), (3, 'Charlie Williams', 'charlie@example.com');
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES (1, 1, '2023-02-15', 100.00), (2, 2, '2023-02-16', 50.00), (3, 3, '2023-02-17', 75.00), (4, 1, '2023-03-01', 150.00), (5, 2, '2023-03-02', 125.00), (6, 3, '2023-03-03', 200.00);","SELECT C.CustomerName, SUM(O.TotalAmount) AS TotalSpent
FROM Customers AS C
JOIN Orders AS O ON C.CustomerID = O.CustomerID
WHERE O.OrderDate >= DATE('now', '-1 month')
GROUP BY C.CustomerID
ORDER BY TotalSpent DESC;","This query first joins the `Customers` and `Orders` tables on the `CustomerID` field. It then filters the results to include only orders placed in the last month. It then groups the results by customer and calculates the total amount spent for each customer. Finally, it sorts the results by total amount spent in descending order."
342,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Find the top 5 customers who have spent the most money on orders in the last quarter.,"CREATE TABLE Orders (OrderID int, CustomerID int, OrderDate date, TotalAmount decimal(10,2));
CREATE TABLE Customers (CustomerID int, CustomerName varchar(255));
INSERT INTO Customers (CustomerID, CustomerName) VALUES (1, 'Alice Smith'), (2, 'Bob Johnson'), (3, 'Charlie Williams');
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES (1, 1, '2023-01-15', 100.00), (2, 2, '2023-01-16', 50.00), (3, 3, '2023-01-17', 75.00), (4, 1, '2023-02-01', 150.00), (5, 2, '2023-02-02', 125.00), (6, 3, '2023-02-03', 200.00), (7, 1, '2023-03-01', 250.00), (8, 2, '2023-03-02', 100.00), (9, 3, '2023-03-03', 150.00);","SELECT C.CustomerName, SUM(O.TotalAmount) AS TotalSpent
FROM Customers AS C
JOIN Orders AS O ON C.CustomerID = O.CustomerID
WHERE O.OrderDate >= DATE('now', '-3 months')
GROUP BY C.CustomerID
ORDER BY TotalSpent DESC
LIMIT 5;","This query first joins the `Customers` and `Orders` tables on the `CustomerID` field. It then filters the results to include only orders placed in the last quarter. It then groups the results by customer and calculates the total amount spent for each customer. Finally, it sorts the results by total amount spent in descending order and limits the results to the top 5 customers."
343,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Update the shipping address for order ID 123 to '1600 Pennsylvania Avenue NW, Washington, DC 20500'.","CREATE TABLE Orders ( OrderID int PRIMARY KEY, CustomerID int, OrderDate date, ShipAddress varchar(255), BillAddress varchar(255), OrderStatus varchar(255));
INSERT INTO Orders (OrderID, CustomerID, OrderDate, ShipAddress, BillAddress, OrderStatus) VALUES (123, 456, '2023-03-10', '123 Main St, Anytown, CA 91234', '456 Elm St, Anytown, CA 91234', 'Shipped');","UPDATE Orders SET ShipAddress = '1600 Pennsylvania Avenue NW, Washington, DC 20500' WHERE OrderID = 123;","This query updates the `ShipAddress` field for the order with `OrderID` 123 to '1600 Pennsylvania Avenue NW, Washington, DC 20500'."
344,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Update the 'customer_demographics' table to set the 'loyalty_points' column to 500 for all customers who have made more than 10 orders.,"CREATE TABLE customer_demographics (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    email VARCHAR(255),
    phone_number VARCHAR(255),
    city VARCHAR(255),
    state VARCHAR(255),
    country VARCHAR(255),
    loyalty_points INT
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    order_amount DECIMAL(10,2),
    shipping_address VARCHAR(255),
    status VARCHAR(255),
    FOREIGN KEY (customer_id) REFERENCES customer_demographics(customer_id)
);

INSERT INTO customer_demographics (customer_id, first_name, last_name, email, phone_number, city, state, country, loyalty_points) VALUES
(1, 'John', 'Doe', 'john.doe@emailworld.com', '555-123-4567', 'New York', 'NY', 'USA', 100),
(2, 'Jane', 'Smith', 'jane.smith@emailworld.com', '555-234-5678', 'Los Angeles', 'CA', 'USA', 250),
(3, 'Mike', 'Brown', 'mike.brown@emailworld.com', '555-345-6789', 'Chicago', 'IL', 'USA', 50),
(4, 'Emily', 'Johnson', 'emily.johnson@emailworld.com', '555-456-7890', 'Miami', 'FL', 'USA', 75),
(5, 'David', 'Williams', 'david.williams@emailworld.com', '555-567-8901', 'Dallas', 'TX', 'USA', 150);

INSERT INTO orders (order_id, customer_id, order_date, order_amount, shipping_address, status) VALUES
(1, 1, '2023-01-01', 100.00, '123 Main St, New York, NY 10001', 'shipped'),
(2, 2, '2023-02-02', 50.00, '456 Elm St, Los Angeles, CA 90001', 'shipped'),
(3, 3, '2023-03-03', 25.00, '789 Oak St, Chicago, IL 60601', 'shipped'),
(4, 4, '2023-04-04', 75.00, '1011 Pine St, Miami, FL 33133', 'shipped'),
(5, 1, '2023-05-05', 150.00, '123 Main St, New York, NY 10001', 'shipped'),
(6, 2, '2023-06-06', 100.00, '456 Elm St, Los Angeles, CA 90001', 'shipped'),
(7, 3, '2023-07-07', 50.00, '789 Oak St, Chicago, IL 60601', 'shipped'),
(8, 4, '2023-08-08', 25.00, '1011 Pine St, Miami, FL 33133', 'shipped'),
(9, 1, '2023-09-09', 75.00, '123 Main St, New York, NY 10001', 'shipped'),
(10, 2, '2023-10-10', 150.00, '456 Elm St, Los Angeles, CA 90001', 'shipped'),
(11, 3, '2023-11-11', 100.00, '789 Oak St, Chicago, IL 60601', 'shipped');","UPDATE customer_demographics
SET loyalty_points = 500
FROM customer_demographics cd
JOIN orders o ON cd.customer_id = o.customer_id
WHERE o.customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(*) > 10);","This SQL query updates the 'loyalty_points' column in the 'customer_demographics' table to 500 for all customers who have made more than 10 orders.

The query first joins the 'customer_demographics' and 'orders' tables on the 'customer_id' column.

Then, it uses a subquery to select the customer IDs of all customers who have made more than 10 orders.

Finally, the query updates the 'loyalty_points' column for all customers in the subquery to 500."
345,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How many customers have purchased a product in the last 30 days?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), order_date DATE, quantity INT);","SELECT COUNT(DISTINCT customer_id) FROM orders WHERE order_date >= DATE('now', '-30 days')",This query selects the count of distinct customer IDs from the orders table where the order date is within the last 30 days.
346,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What was the total revenue for each product category in the last month?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), order_date DATE, quantity INT);","SELECT p.category, SUM(p.price * o.quantity) AS total_revenue FROM products p JOIN orders o ON p.product_id = o.product_id WHERE o.order_date >= DATE('now', '-1 month') GROUP BY p.category","This query selects the category and total revenue for each product category in the last month by joining the products and orders tables on the product ID, filtering the orders by date, and then grouping by category and summing the product price multiplied by the quantity ordered."
347,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What are the top 5 most purchased products in the last quarter?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), order_date DATE, quantity INT);","WITH ProductSales AS (SELECT product_id, SUM(quantity) AS total_quantity FROM orders WHERE order_date >= DATE('now', '-3 months') GROUP BY product_id) SELECT p.product_name, ps.total_quantity FROM ProductSales ps JOIN products p ON ps.product_id = p.product_id ORDER BY ps.total_quantity DESC LIMIT 5","This query uses a common table expression (CTE) called ProductSales to calculate the total quantity sold for each product in the last quarter. It then joins this CTE with the products table to get the product names and orders the results by total quantity in descending order, finally limiting the output to the top 5 products."
348,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What is the average order value for each customer in the last year?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), order_date DATE, quantity INT);","SELECT c.customer_name, AVG(p.price * o.quantity) AS average_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id WHERE o.order_date >= DATE('now', '-1 year') GROUP BY c.customer_name","This query calculates the average order value for each customer in the last year by joining the customers, orders, and products tables, filtering the orders by date, and then grouping by customer name and averaging the product price multiplied by the quantity ordered."
349,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What is the total number of customers who have made a purchase in each country in the last month?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20), country VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, price DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), order_date DATE, quantity INT);","SELECT c.country, COUNT(DISTINCT c.customer_id) AS total_customers FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-1 month') GROUP BY c.country","This query calculates the total number of customers who have made a purchase in each country in the last month by joining the customers and orders tables, filtering the orders by date, and then grouping by country and counting the distinct customer IDs."
350,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the top 10 customers in terms of total revenue generated in the last quarter, categorized by region?","CREATE TABLE customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, region VARCHAR(255) NOT NULL); CREATE TABLE order (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE NOT NULL, amount DECIMAL(10,2) NOT NULL); CREATE TABLE revenue (revenue_id INT PRIMARY KEY, order_id INT REFERENCES order(order_id), amount DECIMAL(10,2) NOT NULL); INSERT INTO customer (customer_id, customer_name, region) VALUES (1, 'Acme Corp', 'North America'), (2, 'Global Solutions Ltd', 'Europe'), (3, 'Pacific Rim Industries', 'Asia'), (4, 'South America Holdings', 'South America'), (5, 'Oceania Ventures', 'Oceania'); INSERT INTO order (order_id, customer_id, order_date, amount) VALUES (1, 1, '2023-04-01', 1000.00), (2, 2, '2023-04-05', 2000.00), (3, 3, '2023-04-10', 3000.00), (4, 4, '2023-04-15', 4000.00), (5, 5, '2023-04-20', 5000.00), (6, 1, '2023-04-25', 6000.00), (7, 2, '2023-04-30', 7000.00), (8, 3, '2023-05-05', 8000.00), (9, 4, '2023-05-10', 9000.00), (10, 5, '2023-05-15', 10000.00), (11, 1, '2023-05-20', 11000.00), (12, 2, '2023-05-25', 12000.00), (13, 3, '2023-05-30', 13000.00), (14, 4, '2023-06-05', 14000.00), (15, 5, '2023-06-10', 15000.00); INSERT INTO revenue (revenue_id, order_id, amount) SELECT revenue_id, order_id, amount FROM order WHERE order_date >= '2023-04-01' AND order_date <= '2023-06-30';","WITH CustomerRevenue AS (SELECT c.customer_name, c.region, SUM(r.amount) AS total_revenue FROM customer c JOIN order o ON c.customer_id = o.customer_id JOIN revenue r ON o.order_id = r.order_id GROUP BY c.customer_name, c.region), RankedCustomerRevenue AS (SELECT customer_name, region, total_revenue, RANK() OVER (PARTITION BY region ORDER BY total_revenue DESC) AS rank FROM CustomerRevenue) SELECT customer_name, region, total_revenue FROM RankedCustomerRevenue WHERE rank <= 10 ORDER BY region, total_revenue DESC;","This query first calculates the total revenue for each customer by region using a series of JOINs between the customer, order, and revenue tables. Then, it ranks the customers within each region based on their total revenue. Finally, it selects the top 10 customers based on their rank, ordered by region and total revenue."
351,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the average fuel consumption rates for each type of vehicle in the fleet, broken down by manufacturer?","CREATE TABLE vehicle (vehicle_id INT PRIMARY KEY, vehicle_type VARCHAR(255) NOT NULL, manufacturer VARCHAR(255) NOT NULL, fuel_consumption DECIMAL(5,2) NOT NULL); CREATE TABLE fuel_log (fuel_log_id INT PRIMARY KEY, vehicle_id INT REFERENCES vehicle(vehicle_id), fuel_date DATE NOT NULL, fuel_amount DECIMAL(10,2) NOT NULL, distance_traveled DECIMAL(10,2) NOT NULL); INSERT INTO vehicle (vehicle_id, vehicle_type, manufacturer, fuel_consumption) VALUES (1, 'Sedan', 'Toyota', 7.50), (2, 'SUV', 'Ford', 9.00), (3, 'Pickup Truck', 'Chevrolet', 12.00), (4, 'Van', 'Mercedes-Benz', 15.00), (5, 'Electric Car', 'Tesla', 0.00); INSERT INTO fuel_log (fuel_log_id, vehicle_id, fuel_date, fuel_amount, distance_traveled) VALUES (1, 1, '2023-04-01', 10.00, 100.00), (2, 2, '2023-04-05', 20.00, 200.00), (3, 3, '2023-04-10', 30.00, 300.00), (4, 4, '2023-04-15', 40.00, 400.00), (5, 5, '2023-04-20', 0.00, 500.00), (6, 1, '2023-04-25', 10.00, 100.00), (7, 2, '2023-04-30', 20.00, 200.00), (8, 3, '2023-05-05', 30.00, 300.00), (9, 4, '2023-05-10', 40.00, 400.00), (10, 5, '2023-05-15', 0.00, 500.00), (11, 1, '2023-05-20', 10.00, 100.00), (12, 2, '2023-05-25', 20.00, 200.00), (13, 3, '2023-05-30', 30.00, 300.00), (14, 4, '2023-06-05', 40.00, 400.00), (15, 5, '2023-06-10', 0.00, 500.00);","WITH VehicleFuelConsumption AS (SELECT v.vehicle_type, v.manufacturer, fl.fuel_amount, fl.distance_traveled, fl.fuel_amount / fl.distance_traveled AS fuel_consumption_rate FROM vehicle v JOIN fuel_log fl ON v.vehicle_id = fl.vehicle_id) SELECT vehicle_type, manufacturer, AVG(fuel_consumption_rate) AS average_fuel_consumption FROM VehicleFuelConsumption GROUP BY vehicle_type, manufacturer ORDER BY vehicle_type, manufacturer;","This query first calculates the fuel consumption rate for each vehicle in the fuel log by dividing the fuel amount by the distance traveled. Then, it groups the results by vehicle type and manufacturer and calculates the average fuel consumption rate for each group."
352,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the routes containing shipments from France to Germany, sorted by the number of shipments?","CREATE TABLE shipments (shipment_id INT PRIMARY KEY, origin_country VARCHAR(50), destination_country VARCHAR(50), route_id INT REFERENCES routes(route_id));
CREATE TABLE routes (route_id INT PRIMARY KEY, origin_city VARCHAR(50), destination_city VARCHAR(50));
CREATE TABLE shipments_per_route (route_id INT, shipment_count INT, PRIMARY KEY (route_id));
INSERT INTO shipments_per_route (route_id, shipment_count) SELECT route_id, COUNT(*) FROM shipments GROUP BY route_id;","WITH FranceToGermany AS (
  SELECT route_id
  FROM shipments
  WHERE origin_country = 'France'
  AND destination_country = 'Germany'
)
SELECT r.origin_city, r.destination_city, spr.shipment_count
FROM routes r
JOIN shipments_per_route spr ON r.route_id = spr.route_id
WHERE r.route_id IN (SELECT route_id FROM FranceToGermany)
ORDER BY spr.shipment_count DESC;","1. Create a CTE called FranceToGermany that selects the route_id for shipments from France to Germany.
2. Join the routes and shipments_per_route tables on route_id.
3. Filter the results to only include routes from France to Germany using the route_id in the FranceToGermany CTE.
4. Order the results by shipment_count in descending order."
353,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average fuel consumption for each vehicle type in the fleet for the last 6 months?,"CREATE TABLE Vehicles (vehicle_id INT PRIMARY KEY, vehicle_type VARCHAR(255), fuel_consumption DECIMAL(10,2));
CREATE TABLE FuelLogs (fuel_log_id INT PRIMARY KEY, vehicle_id INT REFERENCES Vehicles(vehicle_id), date DATE, fuel_amount DECIMAL(10,2));
INSERT INTO Vehicles (vehicle_id, vehicle_type, fuel_consumption) VALUES (1, 'Sedan', 25.5), (2, 'SUV', 30.2), (3, 'Truck', 35.8), (4, 'Van', 28.1);
INSERT INTO FuelLogs (fuel_log_id, vehicle_id, date, fuel_amount) VALUES (1, 1, '2023-03-01', 10.5), (2, 2, '2023-03-01', 12.8), (3, 3, '2023-03-01', 15.2), (4, 4, '2023-03-01', 11.4), (5, 1, '2023-04-01', 11.2), (6, 2, '2023-04-01', 13.5), (7, 3, '2023-04-01', 16.1), (8, 4, '2023-04-01', 12.1), (9, 1, '2023-05-01', 10.8), (10, 2, '2023-05-01', 14.2), (11, 3, '2023-05-01', 15.9), (12, 4, '2023-05-01', 11.7), (13, 1, '2023-06-01', 11.5), (14, 2, '2023-06-01', 13.9), (15, 3, '2023-06-01', 16.7), (16, 4, '2023-06-01', 12.4), (17, 1, '2023-07-01', 10.3), (18, 2, '2023-07-01', 12.6), (19, 3, '2023-07-01', 15.5), (20, 4, '2023-07-01', 11.1), (21, 1, '2023-08-01', 10.9), (22, 2, '2023-08-01', 13.1), (23, 3, '2023-08-01', 16.3), (24, 4, '2023-08-01', 12.9);
SELECT vehicle_type, AVG(fuel_consumption) AS average_fuel_consumption FROM Vehicles GROUP BY vehicle_type;","WITH MonthlyFuelConsumption AS (
  SELECT
    v.vehicle_type,
    MONTH(fl.date) AS month,
    SUM(fl.fuel_amount) AS total_fuel_consumed,
    COUNT(*) AS total_refuels
  FROM FuelLogs fl
  JOIN Vehicles v ON fl.vehicle_id = v.vehicle_id
  WHERE fl.date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH) AND CURRENT_DATE()
  GROUP BY v.vehicle_type, MONTH(fl.date)
),
MonthlyAverageFuelConsumption AS (
  SELECT
    vehicle_type,
    month,
    AVG(total_fuel_consumed / total_refuels) AS average_fuel_consumption
  FROM MonthlyFuelConsumption
  GROUP BY vehicle_type, month
)
SELECT
  vehicle_type,
  AVG(average_fuel_consumption) AS average_fuel_consumption
FROM MonthlyAverageFuelConsumption
GROUP BY vehicle_type;","1. Calculate the total fuel consumed and number of refuels for each vehicle type and month in the last 6 months.
2. Calculate the average fuel consumption for each vehicle type and month.
3. Calculate the overall average fuel consumption for each vehicle type."
354,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 most popular destinations for shipments originating from the United States in the last quarter?,"CREATE TABLE shipments (shipment_id INT PRIMARY KEY, origin_city VARCHAR(255), destination_city VARCHAR(255), shipment_date DATE, carrier_id INT);

CREATE TABLE carriers (carrier_id INT PRIMARY KEY, carrier_name VARCHAR(255));

INSERT INTO shipments (shipment_id, origin_city, destination_city, shipment_date, carrier_id) VALUES
(1, 'Los Angeles', 'New York', '2023-04-01', 1),
(2, 'Chicago', 'San Francisco', '2023-04-05', 2),
(3, 'Miami', 'London', '2023-04-10', 3),
(4, 'Houston', 'Tokyo', '2023-04-15', 4),
(5, 'Seattle', 'Paris', '2023-04-20', 5),
(6, 'New York', 'Los Angeles', '2023-04-25', 1),
(7, 'San Francisco', 'Chicago', '2023-04-30', 2),
(8, 'London', 'Miami', '2023-05-05', 3),
(9, 'Tokyo', 'Houston', '2023-05-10', 4),
(10, 'Paris', 'Seattle', '2023-05-15', 5),
(11, 'Los Angeles', 'New York', '2023-05-20', 1),
(12, 'Chicago', 'San Francisco', '2023-05-25', 2),
(13, 'Miami', 'London', '2023-05-30', 3),
(14, 'Houston', 'Tokyo', '2023-06-05', 4),
(15, 'Seattle', 'Paris', '2023-06-10', 5),
(16, 'New York', 'Los Angeles', '2023-06-15', 1),
(17, 'San Francisco', 'Chicago', '2023-06-20', 2),
(18, 'London', 'Miami', '2023-06-25', 3),
(19, 'Tokyo', 'Houston', '2023-06-30', 4),
(20, 'Paris', 'Seattle', '2023-07-05', 5);

CREATE TABLE cities (city_id INT PRIMARY KEY, city_name VARCHAR(255), country_code VARCHAR(2));

INSERT INTO cities (city_id, city_name, country_code) VALUES
(1, 'Los Angeles', 'US'),
(2, 'Chicago', 'US'),
(3, 'Miami', 'US'),
(4, 'Houston', 'US'),
(5, 'Seattle', 'US'),
(6, 'New York', 'US'),
(7, 'San Francisco', 'US'),
(8, 'London', 'UK'),
(9, 'Tokyo', 'JP'),
(10, 'Paris', 'FR');","WITH OriginCounts AS (SELECT origin_city, COUNT(*) AS shipment_count FROM shipments WHERE shipment_date BETWEEN '2023-04-01' AND '2023-06-30' GROUP BY origin_city), RankedOrigins AS (SELECT origin_city, shipment_count, RANK() OVER (ORDER BY shipment_count DESC) AS rank FROM OriginCounts) SELECT origin_city, shipment_count FROM RankedOrigins WHERE rank <= 5;","This query first calculates the total number of shipments for each origin city in the last quarter using the `shipments` table. Then, it ranks the origin cities by shipment count in descending order. Finally, it selects the top 5 origin cities and their corresponding shipment counts."
355,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","How many production orders were completed last month, grouped by product category, and what was the average production time per product category?","CREATE TABLE production_orders (order_id INT PRIMARY KEY, product_category VARCHAR(50), start_time DATETIME, end_time DATETIME);","SELECT product_category, COUNT(order_id) AS order_count, AVG(end_time - start_time) AS avg_production_time FROM production_orders WHERE end_time BETWEEN DATE('now', '-1 month') AND DATE('now') GROUP BY product_category HAVING order_count > 10;","This query selects the product category, the number of completed orders (order_count), and the average production time (avg_production_time) for each product category. It filters for production orders completed in the last month (end_time falls within the last month) and groups the results by product category. The HAVING clause ensures that only product categories with more than 10 completed orders are included in the results."
356,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Find all suppliers who have delivered late on at least 5% of their orders in the past year.,"CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(50));
CREATE TABLE orders (order_id INT PRIMARY KEY, supplier_id INT REFERENCES suppliers(supplier_id), order_date DATE, delivery_date DATE);","SELECT s.supplier_name FROM suppliers s JOIN orders o ON s.supplier_id = o.supplier_id WHERE o.delivery_date > o.order_date AND o.order_date BETWEEN DATE('now', '-1 year') AND DATE('now') GROUP BY s.supplier_id HAVING COUNT(*) >= 0.05 * (SELECT COUNT(*) FROM orders WHERE supplier_id = s.supplier_id AND order_date BETWEEN DATE('now', '-1 year') AND DATE('now'));",This query selects the names of suppliers who have delivered late on at least 5% of their orders in the past year. It joins the 'suppliers' and 'orders' tables on the 'supplier_id' column. It then filters for orders where the delivery date is later than the order date and where the order date falls within the past year. The query groups the results by supplier and calculates the percentage of late orders for each supplier. The HAVING clause ensures that only suppliers with at least 5% of their orders delivered late are included in the results.
357,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Create a view that shows the current inventory levels for all products, including the product name, category, and quantity on hand.","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_category VARCHAR(50));
CREATE TABLE inventory (inventory_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), quantity_on_hand INT);","CREATE VIEW current_inventory AS SELECT p.product_name, p.product_category, i.quantity_on_hand FROM products p JOIN inventory i ON p.product_id = i.product_id;","This query creates a view named 'current_inventory' that shows the current inventory levels for all products. It joins the 'products' and 'inventory' tables on the 'product_id' column and selects the product name, product category, and quantity on hand for each product."
358,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","What is the total value of inventory for each supplier, based on the most recent purchase price?","CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(50));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), supplier_id INT REFERENCES suppliers(supplier_id));
CREATE TABLE inventory (inventory_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), quantity_on_hand INT);
CREATE TABLE purchase_orders (purchase_order_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), supplier_id INT REFERENCES suppliers(supplier_id), purchase_price DECIMAL(10,2), purchase_date DATE);","SELECT s.supplier_name, SUM(i.quantity_on_hand * p.purchase_price) AS total_inventory_value FROM suppliers s JOIN products p ON s.supplier_id = p.supplier_id JOIN inventory i ON p.product_id = i.product_id JOIN purchase_orders po ON p.product_id = po.product_id GROUP BY s.supplier_name ORDER BY total_inventory_value DESC;","This query calculates the total value of inventory for each supplier, based on the most recent purchase price. It joins the 'suppliers', 'products', 'inventory', and 'purchase_orders' tables. It then groups the results by supplier and calculates the sum of the product of quantity on hand and purchase price for each supplier. The results are ordered in descending order of total inventory value."
359,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Identify all products that have not been ordered in the past 6 months, along with their last order date and the supplier who last supplied them.","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50));
CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(50));
CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), supplier_id INT REFERENCES suppliers(supplier_id), order_date DATE);","SELECT p.product_name, MAX(o.order_date) AS last_order_date, s.supplier_name AS last_supplier FROM products p LEFT JOIN orders o ON p.product_id = o.product_id LEFT JOIN suppliers s ON o.supplier_id = s.supplier_id WHERE o.order_date IS NULL OR o.order_date < DATE('now', '-6 months') GROUP BY p.product_id HAVING last_order_date IS NULL OR last_order_date < DATE('now', '-6 months');","This query identifies all products that have not been ordered in the past 6 months, along with their last order date and the supplier who last supplied them. It uses a left join to combine the 'products', 'orders', and 'suppliers' tables. The query then filters for products where the last order date is either null or older than 6 months. The results are grouped by product and the last order date and supplier are selected for each product."
360,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 countries with the most data breaches in the last year?,"CREATE TABLE data_breaches (breach_id INTEGER PRIMARY KEY, country VARCHAR(255), breach_date DATE, number_of_records_exposed INTEGER);","SELECT country, COUNT(*) AS num_breaches FROM data_breaches WHERE breach_date >= date('now', '-1 year') GROUP BY country ORDER BY num_breaches DESC LIMIT 5",This query selects the country and counts the number of data breaches for each country in the last year. It then orders the results by the number of breaches in descending order and limits the output to the top 5 countries.
361,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",How many data breaches have occurred in the healthcare industry in the last 5 years?,"CREATE TABLE data_breaches (breach_id INTEGER PRIMARY KEY, industry VARCHAR(255), breach_date DATE, number_of_records_exposed INTEGER);","SELECT COUNT(*) FROM data_breaches WHERE industry = 'Healthcare' AND breach_date >= date('now', '-5 years')",This query selects the count of data breaches in the healthcare industry that occurred in the last 5 years.
362,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What is the average number of records exposed per data breach in the financial services industry?,"CREATE TABLE data_breaches (breach_id INTEGER PRIMARY KEY, industry VARCHAR(255), breach_date DATE, number_of_records_exposed INTEGER);",SELECT AVG(number_of_records_exposed) FROM data_breaches WHERE industry = 'Financial Services',This query calculates the average number of records exposed per data breach in the financial services industry.
363,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What are the top 10 most common types of data that have been exposed in data breaches?,"CREATE TABLE data_breaches (breach_id INTEGER PRIMARY KEY, data_type VARCHAR(255), breach_date DATE, number_of_records_exposed INTEGER);","SELECT data_type, COUNT(*) AS num_breaches FROM data_breaches GROUP BY data_type ORDER BY num_breaches DESC LIMIT 10",This query selects the data type and counts the number of data breaches for each data type. It then orders the results by the number of breaches in descending order and limits the output to the top 10 data types.
364,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",In which month did the most data breaches occur in the last year?,"CREATE TABLE data_breaches (breach_id INTEGER PRIMARY KEY, breach_date DATE, number_of_records_exposed INTEGER);","SELECT strftime('%Y-%m', breach_date) AS breach_month, COUNT(*) AS num_breaches FROM data_breaches WHERE breach_date >= date('now', '-1 year') GROUP BY breach_month ORDER BY num_breaches DESC LIMIT 1",This query converts the breach date to the format 'YYYY-MM' and counts the number of breaches for each month in the last year. It then orders the results by the number of breaches in descending order and limits the output to the month with the most breaches.
365,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Get information from the ""Product"" table about unique ""customer_names"" and ""product_names"" in the ""Technology"" category","CREATE TABLE Product (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, release_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES Customer(customer_id));
CREATE TABLE Customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255), region VARCHAR(255));","SELECT DISTINCT Customer.customer_name, Product.product_name
FROM Customer
JOIN Product ON Customer.customer_id = Product.customer_id
WHERE Product.category = 'Technology';",This SQL query uses a `SELECT` statement to retrieve unique customer names and product names from the `Product` table in the `Technology` category. It joins the `Product` table with the `Customer` table using the `customer_id` column and filters the results to include only products in the `Technology` category.
366,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report showing the total number of customers in each region for the ""Fashion"" category, categorized by customer age groups (0-18, 19-35, 36-50, 51+)","CREATE TABLE Customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255), region VARCHAR(255), age INT);
CREATE TABLE Product (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, release_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES Customer(customer_id));
CREATE TABLE Order (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, FOREIGN KEY (customer_id) REFERENCES Customer(customer_id));","SELECT c.region, 
       CASE
           WHEN c.age BETWEEN 0 AND 18 THEN '0-18'
           WHEN c.age BETWEEN 19 AND 35 THEN '19-35'
           WHEN c.age BETWEEN 36 AND 50 THEN '36-50'
           ELSE '51+'
       END AS age_group,
       COUNT(DISTINCT c.customer_id) AS total_customers
FROM Customer c
JOIN Product p ON c.customer_id = p.customer_id
WHERE p.category = 'Fashion'
GROUP BY c.region, age_group
ORDER BY c.region, age_group;","This SQL query generates a report showing the total number of customers in each region for the ""Fashion"" category, categorized by customer age groups. It uses a `SELECT` statement with `CASE` expressions to categorize customers into age groups and a `GROUP BY` clause to group the results by region and age group. The `COUNT(DISTINCT c.customer_id)` function counts the number of unique customers in each group. The results are ordered by region and age group."
367,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average time between a customer's first and most recent order, grouped by country","CREATE TABLE Customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255), region VARCHAR(255), age INT);
CREATE TABLE Product (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, release_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES Customer(customer_id));
CREATE TABLE Order (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, FOREIGN KEY (customer_id) REFERENCES Customer(customer_id));","SELECT c.country, AVG(DATEDIFF(day, MIN(o.order_date), MAX(o.order_date))) AS avg_time_between_orders
FROM Customer c
JOIN Order o ON c.customer_id = o.customer_id
GROUP BY c.country
ORDER BY c.country;","This SQL query calculates the average time between a customer's first and most recent order, grouped by country. It uses a `SELECT` statement with `MIN(o.order_date)` and `MAX(o.order_date)` functions to find the first and most recent order dates for each customer. The `DATEDIFF` function calculates the difference between these dates in days. The `AVG` function calculates the average time between orders for each country. The results are ordered by country."
368,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 customers who generated the most revenue in the ""Electronics"" category in the last quarter of 2023","CREATE TABLE Customer (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255), region VARCHAR(255), age INT);
CREATE TABLE Product (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, release_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES Customer(customer_id));
CREATE TABLE Order (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, product_id INT, quantity INT, price DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES Customer(customer_id), FOREIGN KEY (product_id) REFERENCES Product(product_id));","SELECT c.customer_name, SUM(o.quantity * o.price) AS total_revenue
FROM Customer c
JOIN Order o ON c.customer_id = o.customer_id
JOIN Product p ON o.product_id = p.product_id
WHERE p.category = 'Electronics'
AND o.order_date BETWEEN '2023-10-01' AND '2023-12-31'
GROUP BY c.customer_name
ORDER BY total_revenue DESC
LIMIT 5;","This SQL query finds the top 5 customers who generated the most revenue in the ""Electronics"" category in the last quarter of 2023. It uses a `SELECT` statement with `SUM` function to calculate the total revenue for each customer. The `JOIN` clauses link the `Customer`, `Order`, and `Product` tables. The `WHERE` clause filters the results to include orders for the ""Electronics"" category in the last quarter of 2023. The `GROUP BY` clause groups the results by customer name. The `ORDER BY` clause sorts the results in descending order of total revenue. The `LIMIT` clause limits the results to the top 5 customers."
369,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the average order value for each product category in the first quarter of 2023, broken down by region?","CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, product_category VARCHAR(255), order_date DATE, order_value DECIMAL(10,2), region VARCHAR(255));
INSERT INTO orders (order_id, customer_id, product_category, order_date, order_value, region) VALUES (1, 101, 'Electronics', '2023-01-05', 125.50, 'North America'), (2, 102, 'Clothing', '2023-01-10', 75.25, 'Europe'), (3, 103, 'Electronics', '2023-01-15', 250.00, 'Asia'), (4, 104, 'Home Goods', '2023-01-20', 50.75, 'North America'), (5, 105, 'Clothing', '2023-01-25', 100.00, 'Europe'), (6, 106, 'Electronics', '2023-01-30', 175.00, 'Asia'), (7, 107, 'Home Goods', '2023-02-05', 35.50, 'North America'), (8, 108, 'Clothing', '2023-02-10', 125.00, 'Europe'), (9, 109, 'Electronics', '2023-02-15', 300.00, 'Asia'), (10, 110, 'Home Goods', '2023-02-20', 75.00, 'North America'), (11, 111, 'Clothing', '2023-02-25', 150.00, 'Europe'), (12, 112, 'Electronics', '2023-03-05', 200.00, 'Asia'), (13, 113, 'Home Goods', '2023-03-10', 45.00, 'North America'), (14, 114, 'Clothing', '2023-03-15', 85.00, 'Europe'), (15, 115, 'Electronics', '2023-03-20', 275.00, 'Asia');
CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), region VARCHAR(255));
INSERT INTO customers (customer_id, name, region) VALUES (101, 'John Smith', 'North America'), (102, 'Alice Johnson', 'Europe'), (103, 'Bob Williams', 'Asia'), (104, 'Emily Jones', 'North America'), (105, 'Michael Brown', 'Europe'), (106, 'Sarah Davis', 'Asia'), (107, 'David Miller', 'North America'), (108, 'Jennifer Wilson', 'Europe'), (109, 'Richard Moore', 'Asia'), (110, 'Linda Taylor', 'North America'), (111, 'Christopher Thomas', 'Europe'), (112, 'Angela Garcia', 'Asia'), (113, 'Daniel Walker', 'North America'), (114, 'Elizabeth Martin', 'Europe'), (115, 'Matthew Anderson', 'Asia');","WITH ProductCategoryRegion AS (
    SELECT
        o.product_category,
        o.region,
        AVG(o.order_value) AS avg_order_value
    FROM
        orders o
    WHERE
        o.order_date BETWEEN '2023-01-01' AND '2023-03-31'
    GROUP BY
        o.product_category,
        o.region
)
SELECT
    pcr.product_category,
    pcr.region,
    pcr.avg_order_value
FROM
    ProductCategoryRegion pcr
ORDER BY
    pcr.product_category,
    pcr.region;","This SQL query first calculates the average order value for each product category and region in the first quarter of 2023. It then uses a common table expression (CTE) to store this data. Finally, it selects the product category, region, and average order value from the CTE and orders the results by product category and region."
370,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","Show me the names of all customers who have purchased more than 100 items in the last year, along with the total number of items they have purchased and the average price per item.","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, total_price DECIMAL(10,2));
CREATE TABLE order_items (order_item_id INT PRIMARY KEY, order_id INT REFERENCES orders(order_id), product_id INT REFERENCES products(product_id), quantity INT, price DECIMAL(10,2));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2));
INSERT INTO customers (customer_id, customer_name, email) VALUES (1, 'John Smith', 'john.smith@email.com'), (2, 'Alice Johnson', 'alice.johnson@email.com'), (3, 'Bob Williams', 'bob.williams@email.com');
INSERT INTO orders (order_id, customer_id, order_date, total_price) VALUES (1, 1, '2023-01-01', 100.00), (2, 2, '2023-02-01', 50.00), (3, 3, '2023-03-01', 150.00), (4, 1, '2023-04-01', 200.00), (5, 2, '2023-05-01', 75.00), (6, 3, '2023-06-01', 225.00), (7, 1, '2023-07-01', 125.00), (8, 2, '2023-08-01', 100.00), (9, 3, '2023-09-01', 175.00), (10, 1, '2023-10-01', 150.00), (11, 2, '2023-11-01', 60.00), (12, 3, '2023-12-01', 200.00);
INSERT INTO order_items (order_item_id, order_id, product_id, quantity, price) VALUES (1, 1, 1, 2, 50.00), (2, 1, 2, 1, 50.00), (3, 2, 3, 1, 50.00), (4, 3, 4, 3, 50.00), (5, 4, 1, 4, 50.00), (6, 5, 2, 1, 50.00), (7, 6, 3, 3, 50.00), (8, 7, 4, 2, 50.00), (9, 8, 1, 2, 50.00), (10, 9, 2, 1, 50.00), (11, 10, 3, 3, 50.00), (12, 11, 4, 1, 50.00), (13, 12, 1, 4, 50.00);
INSERT INTO products (product_id, product_name, price) VALUES (1, 'Shirt', 25.00), (2, 'Pants', 50.00), (3, 'Hat', 15.00), (4, 'Shoes', 75.00);","SELECT c.customer_name, COUNT(*) AS total_items, AVG(oi.price) AS average_price
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
WHERE o.order_date >= DATE('now', '-1 year')
GROUP BY c.customer_name
HAVING COUNT(*) > 100
ORDER BY total_items DESC;","This SQL query retrieves the names of all customers who have purchased more than 100 items in the last year, along with the total number of items they have purchased and the average price per item. The query joins the `customers`, `orders`, and `order_items` tables using the `customer_id` and `order_id` columns. It filters the orders to only include those that were placed in the last year, groups the results by customer name, and then filters again to only include customers who have purchased more than 100 items. The query then calculates the total number of items and the average price per item for each customer and orders the results by the total number of items in descending order."
371,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","What is the average order value for customers who have placed more than 5 orders in the last month, grouped by country?","CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    order_amount DECIMAL
);

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    country VARCHAR(255)
);

INSERT INTO orders (order_id, customer_id, order_date, order_amount)
VALUES
    (1, 101, '2023-04-01', 50.00),
    (2, 102, '2023-04-05', 75.00),
    (3, 101, '2023-04-10', 25.00),
    (4, 103, '2023-04-15', 100.00),
    (5, 102, '2023-04-20', 45.00),
    (6, 101, '2023-04-25', 60.00),
    (7, 104, '2023-04-30', 85.00);

INSERT INTO customers (customer_id, customer_name, country)
VALUES
    (101, 'John Doe', 'USA'),
    (102, 'Jane Smith', 'Canada'),
    (103, 'Mike Jones', 'Mexico'),
    (104, 'Alice Brown', 'UK');","SELECT c.country, AVG(o.order_amount)
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE o.order_date BETWEEN DATE('now', '-1 month') AND DATE('now')
GROUP BY c.country
HAVING COUNT(*) > 5;","This query calculates the average order value for customers who have placed more than 5 orders in the last month, grouped by country. It first joins the `orders` and `customers` tables on customer ID. Then, it filters the orders to include only those placed in the last month. The query then groups the orders by country and calculates the average order amount for each group. Finally, it filters the results to include only groups where the number of orders is greater than 5."
372,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records",How many orders were placed in the last three months that included both 'Laptop' and 'Mouse' products in the same order?,"CREATE TABLE Orders (  OrderID INT PRIMARY KEY,  CustomerID INT,  OrderDate DATE,  ProductID INT,  Quantity INT,  Price DECIMAL(10,2) );
-- Inserting data into Orders
INSERT INTO Orders (OrderID, CustomerID, OrderDate, ProductID, Quantity, Price) VALUES
(1, 101, '2023-04-01', 1, 2, 1200.00),
(2, 102, '2023-04-05', 2, 1, 50.00),
(3, 103, '2023-04-08', 3, 3, 270.00),
(4, 101, '2023-04-12', 1, 1, 1200.00),
(5, 104, '2023-04-15', 4, 2, 200.00),
(6, 105, '2023-04-18', 5, 1, 700.00),
(7, 101, '2023-04-22', 2, 2, 100.00),
(8, 102, '2023-04-25', 5, 1, 700.00),
(9, 106, '2023-04-29', 1, 1, 1200.00),
(10, 103, '2023-05-02', 3, 1, 90.00),
(11, 107, '2023-05-06', 4, 3, 300.00),
(12, 108, '2023-05-09', 2, 2, 100.00),
(13, 101, '2023-05-13', 1, 3, 3600.00),
(14, 109, '2023-05-16', 5, 2, 1400.00),
(15, 105, '2023-05-20', 3, 2, 180.00),
(16, 110, '2023-05-23', 4, 1, 100.00),
(17, 106, '2023-05-27', 2, 3, 150.00),
(18, 107, '2023-05-30', 1, 1, 1200.00),
(19, 108, '2023-06-03', 5, 3, 2100.00),
(20, 109, '2023-06-06', 3, 1, 90.00),
(21, 110, '2023-06-10', 2, 1, 50.00),
(22, 101, '2023-06-13', 4, 2, 200.00),
(23, 102, '2023-06-17', 1, 2, 2400.00),
(24, 103, '2023-06-20', 5, 1, 700.00),
(25, 111, '2023-06-24', 2, 1, 50.00);

CREATE TABLE Products (  ProductID INT PRIMARY KEY,  ProductName VARCHAR(50) );
-- Inserting data into Products
INSERT INTO Products (ProductID, ProductName) VALUES
(1, 'Laptop'),
(2, 'Mouse'),
(3, 'Keyboard'),
(4, 'Monitor'),
(5, 'Printer');","SELECT COUNT(*) 
FROM Orders o
JOIN OrderItems oi ON o.OrderID = oi.OrderID
JOIN Products p ON oi.ProductID = p.ProductID
WHERE o.OrderDate >= DATE('now', '-3 months')
AND p.ProductName IN ('Laptop', 'Mouse')
GROUP BY o.OrderID
HAVING COUNT(DISTINCT p.ProductName) = 2;","1. We start by selecting the count of distinct orders from the Orders table.
2. We then join the Orders table with the OrderItems table using the OrderID to link them.
3. We then join the OrderItems table with the Products table using the ProductID to link them.
4. We then filter the results to only include orders placed in the last three months.
5. We then filter the results to only include orders that contain both 'Laptop' and 'Mouse' products.
6. We then group the results by order ID.
7. We then use the HAVING clause to filter the results to only include orders that contain two distinct product names.
8. Finally, we select the count of distinct orders."
373,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","How many items from the 'Electronics' category were sold between January 1, 2023 and June 30, 2023, and what was the average order value?","CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    order_amount DECIMAL(10, 2)
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    category VARCHAR(50),
    product_name VARCHAR(100),
    price DECIMAL(10, 2)
);

CREATE TABLE Order_Items (
    order_id INT,
    product_id INT,
    quantity INT,
    PRIMARY KEY (order_id, product_id),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

INSERT INTO Orders (order_id, customer_id, order_date, order_amount) VALUES
(1, 101, '2023-01-15', 125.50),
(2, 102, '2023-02-07', 85.75),
(3, 103, '2023-03-12', 210.00),
(4, 104, '2023-04-21', 98.25),
(5, 105, '2023-05-05', 150.75),
(6, 106, '2023-06-18', 78.50);

INSERT INTO Products (product_id, category, product_name, price) VALUES
(1, 'Electronics', 'Laptop', 1200.00),
(2, 'Electronics', 'Tablet', 350.00),
(3, 'Clothing', 'Shirt', 25.00),
(4, 'Clothing', 'Jeans', 50.00),
(5, 'Electronics', 'Smartphone', 600.00);

INSERT INTO Order_Items (order_id, product_id, quantity) VALUES
(1, 1, 1),
(1, 3, 2),
(2, 2, 1),
(2, 5, 1),
(3, 1, 2),
(3, 4, 1),
(4, 3, 1),
(4, 5, 2),
(5, 2, 1),
(5, 4, 2),
(6, 1, 1);

","SELECT COUNT(*) AS ""Number of Items Sold"", AVG(Orders.order_amount) AS ""Average Order Value""
FROM Orders
INNER JOIN Order_Items ON Orders.order_id = Order_Items.order_id
INNER JOIN Products ON Order_Items.product_id = Products.product_id
WHERE Products.category = 'Electronics'
AND Orders.order_date BETWEEN '2023-01-01' AND '2023-06-30';","This SQL query first joins the 'Orders' table with the 'Order_Items' table on the 'order_id' column. Then, it joins the 'Order_Items' table with the 'Products' table on the 'product_id' column. The WHERE clause filters the results to include only orders placed between January 1, 2023 and June 30, 2023 and products in the 'Electronics' category. The SELECT statement then calculates the count of items sold and the average order value for these orders."
374,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records",How many unique customers made a purchase in the month of March 2023?,"CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    order_amount DECIMAL(10, 2)
);

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    email VARCHAR(100),
    city VARCHAR(50),
    state VARCHAR(50),
    country VARCHAR(50)
);
","SELECT COUNT(DISTINCT customer_id) AS ""Number of Unique Customers""
FROM Orders
WHERE order_date BETWEEN '2023-03-01' AND '2023-03-31';","This SQL query first filters the 'Orders' table to include only orders placed in March 2023. Then, it uses the COUNT(DISTINCT customer_id) function to count the number of unique customer IDs in the filtered results. This gives the number of unique customers who made a purchase in March 2023."
375,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"List the top 10 crops by yield in descending order and the average yield for each crop in the ""crop_yields"" table, considering data from the past 5 years.","CREATE TABLE crop_yields (crop_id INT PRIMARY KEY, crop_name VARCHAR(255) NOT NULL, year INT NOT NULL, region VARCHAR(255) NOT NULL, yield DECIMAL(10,2) NOT NULL);","SELECT crop_name, AVG(yield) AS average_yield FROM crop_yields WHERE year BETWEEN DATE('now', '-5 years') AND DATE('now') GROUP BY crop_name ORDER BY average_yield DESC LIMIT 10;","This query first filters the ""crop_yields"" table to only include data from the past 5 years. Then, it groups the data by crop name and calculates the average yield for each crop. Finally, it orders the results in descending order of average yield and limits the output to the top 10 crops."
376,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"For each region, show the average yield for each crop, along with the percentage change in yield from the previous year.","CREATE TABLE crop_yields (crop_id INT PRIMARY KEY, crop_name VARCHAR(255) NOT NULL, year INT NOT NULL, region VARCHAR(255) NOT NULL, yield DECIMAL(10,2) NOT NULL);","SELECT region, crop_name, AVG(yield) AS average_yield, (AVG(yield) - LAG(AVG(yield), 1, 0) OVER (PARTITION BY region, crop_name ORDER BY year)) / LAG(AVG(yield), 1, 0) OVER (PARTITION BY region, crop_name ORDER BY year) * 100 AS percentage_change FROM crop_yields GROUP BY region, crop_name ORDER BY region, crop_name;","This query first calculates the average yield for each crop in each region for each year. Then, it uses the LAG window function to calculate the average yield for the previous year for each crop in each region. Finally, it calculates the percentage change in yield from the previous year and outputs the results by region and crop name."
377,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Identify the top 3 regions with the highest average yield for wheat in the past 3 years.,"CREATE TABLE crop_yields (crop_id INT PRIMARY KEY, crop_name VARCHAR(255) NOT NULL, year INT NOT NULL, region VARCHAR(255) NOT NULL, yield DECIMAL(10,2) NOT NULL);","SELECT region, AVG(yield) AS average_yield FROM crop_yields WHERE crop_name = 'Wheat' AND year BETWEEN DATE('now', '-3 years') AND DATE('now') GROUP BY region ORDER BY average_yield DESC LIMIT 3;","This query first filters the ""crop_yields"" table to only include data for wheat from the past 3 years. Then, it groups the data by region and calculates the average yield for wheat in each region. Finally, it orders the results in descending order of average yield and outputs the top 3 regions."
378,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the 5 crops with the highest average yield across all regions in the past decade.,"CREATE TABLE crop_yields (crop_id INT PRIMARY KEY, crop_name VARCHAR(255) NOT NULL, year INT NOT NULL, region VARCHAR(255) NOT NULL, yield DECIMAL(10,2) NOT NULL);","SELECT crop_name, AVG(yield) AS average_yield FROM crop_yields WHERE year BETWEEN DATE('now', '-10 years') AND DATE('now') GROUP BY crop_name ORDER BY average_yield DESC LIMIT 5;","This query first filters the ""crop_yields"" table to only include data from the past 10 years. Then, it groups the data by crop name and calculates the average yield for each crop across all regions. Finally, it orders the results in descending order of average yield and outputs the top 5 crops."
379,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Calculate the total water consumption for each crop in the ""crop_water_use"" table, considering data from the past growing season.","CREATE TABLE crop_water_use (crop_id INT PRIMARY KEY, crop_name VARCHAR(255) NOT NULL, region VARCHAR(255) NOT NULL, growing_season_start_date DATE NOT NULL, growing_season_end_date DATE NOT NULL, water_consumption DECIMAL(10,2) NOT NULL);","SELECT crop_name, SUM(water_consumption) AS total_water_consumption FROM crop_water_use WHERE growing_season_start_date BETWEEN DATE('now', '-1 year') AND DATE('now') AND growing_season_end_date BETWEEN DATE('now', '-1 year') AND DATE('now') GROUP BY crop_name ORDER BY total_water_consumption DESC;","This query first filters the ""crop_water_use"" table to only include data from the past growing season. Then, it groups the data by crop name and calculates the total water consumption for each crop. Finally, it orders the results in descending order of total water consumption."
380,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Find all customers who have placed orders in the last 30 days, but have not received any deliveries in the last 14 days.","CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT REFERENCES customers(customer_id),
  order_date DATE NOT NULL
);

CREATE TABLE deliveries (
  delivery_id INT PRIMARY KEY,
  order_id INT REFERENCES orders(order_id),
  delivery_date DATE NOT NULL
);","SELECT c.customer_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-30 days')
MINUS
SELECT c.customer_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN deliveries d ON o.order_id = d.order_id
WHERE d.delivery_date >= DATE('now', '-14 days')","This query first selects all customers who have placed orders in the last 30 days by joining the `customers` and `orders` tables on the `customer_id`. Then, it subtracts all customers who have received deliveries in the last 14 days by joining the `orders` and `deliveries` tables on the `order_id`. The final result is a list of customers who have placed orders but not received deliveries in the specified timeframes."
381,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a view that shows the total number of orders placed by each customer in the last year.,"CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT REFERENCES customers(customer_id),
  order_date DATE NOT NULL
);","CREATE VIEW customer_order_counts AS
SELECT c.customer_name, COUNT(o.order_id) AS total_orders
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-1 year')
GROUP BY c.customer_name;","This query creates a view called `customer_order_counts` that shows the total number of orders placed by each customer in the last year. It joins the `customers` and `orders` tables on the `customer_id`, filters orders placed in the last year, groups the results by customer name, and counts the number of orders for each customer."
382,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Find all orders that have been placed but not yet shipped.,"CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT REFERENCES customers(customer_id),
  order_date DATE NOT NULL,
  shipped_date DATE
);

CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL
);

CREATE TABLE order_items (
  order_item_id INT PRIMARY KEY,
  order_id INT REFERENCES orders(order_id),
  product_id INT REFERENCES products(product_id),
  quantity INT NOT NULL
);","SELECT o.order_id, c.customer_name
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE o.shipped_date IS NULL;",This query selects the order ID and customer name for all orders where the `shipped_date` is NULL. This indicates that the orders have been placed but not yet shipped.
383,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Find the top 5 products that have generated the most revenue in the last quarter.,"CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT REFERENCES customers(customer_id),
  order_date DATE NOT NULL,
  shipped_date DATE
);

CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL
);

CREATE TABLE order_items (
  order_item_id INT PRIMARY KEY,
  order_id INT REFERENCES orders(order_id),
  product_id INT REFERENCES products(product_id),
  quantity INT NOT NULL
);","SELECT p.product_name, SUM(oi.quantity * p.price) AS total_revenue
FROM products p
JOIN order_items oi ON p.product_id = oi.product_id
JOIN orders o ON oi.order_id = o.order_id
WHERE o.order_date >= DATE('now', '-3 months')
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;","This query selects the product name and total revenue for each product in the last quarter. It joins the `products`, `order_items`, and `orders` tables to calculate the total revenue for each product. The results are then grouped by product name, sorted by total revenue in descending order, and limited to the top 5 products."
384,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores information about shipments, including the order ID, shipment date, and the name of the carrier used for the shipment.","CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE
);

CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  customer_id INT REFERENCES customers(customer_id),
  order_date DATE NOT NULL,
  shipped_date DATE
);

CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL
);

CREATE TABLE order_items (
  order_item_id INT PRIMARY KEY,
  order_id INT REFERENCES orders(order_id),
  product_id INT REFERENCES products(product_id),
  quantity INT NOT NULL
);","CREATE TABLE shipments (
  shipment_id INT PRIMARY KEY,
  order_id INT REFERENCES orders(order_id),
  shipment_date DATE NOT NULL,
  carrier_name VARCHAR(255) NOT NULL
);","This query creates a table called `shipments` with three columns: `shipment_id` (primary key), `order_id` (foreign key referencing the `orders` table), `shipment_date`, and `carrier_name`. This table will store information about shipments, including the order ID, shipment date, and the name of the carrier used for the shipment."
385,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"List all courses currently offered, along with the course name and the full name of the instructor.","CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE, FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id));
CREATE TABLE Instructors (instructor_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255));
INSERT INTO Courses (course_id, course_name, instructor_id, start_date, end_date) VALUES (1, 'Introduction to Programming', 1, '2023-09-01', '2023-12-15'), (2, 'Data Structures and Algorithms', 2, '2023-09-01', '2023-12-15'), (3, 'Calculus I', 3, '2023-09-01', '2023-12-15'), (4, 'Linear Algebra', 4, '2023-09-01', '2023-12-15'), (5, 'Probability and Statistics', 5, '2023-09-01', '2023-12-15');
INSERT INTO Instructors (instructor_id, first_name, last_name) VALUES (1, 'John', 'Doe'), (2, 'Jane', 'Smith'), (3, 'Alice', 'Johnson'), (4, 'Bob', 'Williams'), (5, 'Emily', 'Brown');","SELECT c.course_name, i.first_name || ' ' || i.last_name AS instructor_name
FROM Courses c
INNER JOIN Instructors i ON c.instructor_id = i.instructor_id
WHERE c.end_date >= CURDATE();","This query retrieves the course name and full name of the instructor for all courses that are currently offered. It uses an INNER JOIN between the Courses and Instructors tables to link courses to their instructors based on the instructor_id column. The WHERE clause filters the results to only include courses where the end_date is greater than or equal to the current date, ensuring that only currently offered courses are included."
386,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Show the average GPA for students enrolled in each course, along with the course name.","CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), instructor_id INT, start_date DATE, end_date DATE, FOREIGN KEY (instructor_id) REFERENCES Instructors(instructor_id));
CREATE TABLE Students (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), GPA FLOAT);
CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, grade FLOAT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id));
INSERT INTO Courses (course_id, course_name, instructor_id, start_date, end_date) VALUES (1, 'Introduction to Programming', 1, '2023-09-01', '2023-12-15'), (2, 'Data Structures and Algorithms', 2, '2023-09-01', '2023-12-15'), (3, 'Calculus I', 3, '2023-09-01', '2023-12-15'), (4, 'Linear Algebra', 4, '2023-09-01', '2023-12-15'), (5, 'Probability and Statistics', 5, '2023-09-01', '2023-12-15');
INSERT INTO Students (student_id, first_name, last_name, GPA) VALUES (1, 'Alice', 'Smith', 3.8), (2, 'Bob', 'Johnson', 3.5), (3, 'Charlie', 'Williams', 3.2), (4, 'David', 'Brown', 4.0), (5, 'Emily', 'Davis', 3.7);
INSERT INTO Enrollments (enrollment_id, student_id, course_id, grade) VALUES (1, 1, 1, 90), (2, 2, 1, 85), (3, 3, 2, 88), (4, 4, 2, 92), (5, 5, 3, 78), (6, 1, 4, 89), (7, 2, 4, 95), (8, 3, 5, 82), (9, 4, 5, 91), (10, 5, 1, 94);","SELECT c.course_name, AVG(e.grade) AS average_gpa
FROM Courses c
INNER JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;","This query calculates the average GPA for students enrolled in each course. It uses an INNER JOIN between the Courses and Enrollments tables to link courses to their enrolled students. The GROUP BY clause groups the results by course name, and the AVG() function calculates the average grade for each group. This provides an overview of the average academic performance in each course."
387,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,What are the names of all students in the United States who have scored above 90% in Mathematics in the current academic year?,"CREATE TABLE Students ( 
    StudentID INT PRIMARY KEY, 
    FirstName VARCHAR(255) NOT NULL, 
    LastName VARCHAR(255) NOT NULL, 
    Country VARCHAR(255) NOT NULL, 
    State VARCHAR(255) NOT NULL 
); 

CREATE TABLE Subjects ( 
    SubjectID INT PRIMARY KEY, 
    SubjectName VARCHAR(255) NOT NULL 
); 

CREATE TABLE Grades ( 
    GradeID INT PRIMARY KEY, 
    StudentID INT REFERENCES Students(StudentID), 
    SubjectID INT REFERENCES Subjects(SubjectID), 
    Year INT NOT NULL, 
    Score DECIMAL(5,2) NOT NULL 
); 

INSERT INTO Students (StudentID, FirstName, LastName, Country, State) VALUES 
(1, 'Alice', 'Smith', 'United States', 'California'), 
(2, 'Bob', 'Johnson', 'Canada', 'Ontario'), 
(3, 'Charlie', 'Brown', 'United Kingdom', 'England'), 
(4, 'David', 'Lee', 'United States', 'Texas'), 
(5, 'Emily', 'Davis', 'Australia', 'New South Wales'); 

INSERT INTO Subjects (SubjectID, SubjectName) VALUES 
(1, 'Mathematics'), 
(2, 'Science'), 
(3, 'English'), 
(4, 'History'), 
(5, 'Art'); 

INSERT INTO Grades (GradeID, StudentID, SubjectID, Year, Score) VALUES 
(1, 1, 1, 2023, 95.00), 
(2, 2, 2, 2023, 88.00), 
(3, 3, 3, 2023, 75.00), 
(4, 4, 1, 2023, 92.00), 
(5, 5, 5, 2023, 98.00);","SELECT FirstName, LastName FROM Students AS S JOIN Grades AS G ON S.StudentID = G.StudentID JOIN Subjects AS Sub ON G.SubjectID = Sub.SubjectID WHERE S.Country = 'United States' AND G.SubjectID = 1 AND G.Year = 2023 AND G.Score > 90;","This query joins three tables: Students, Grades, and Subjects. It selects the first name and last name of students from the Students table who are from the United States and have scored above 90% in Mathematics in the current academic year (2023). The join conditions ensure that the student ID is matched across all three tables, and the subject ID is matched between the Grades and Subjects tables."
388,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Who are the top 5 students in terms of GPA in 11th grade at Hilltop High School?,"CREATE TABLE Students (  student_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  grade INT,  gpa DECIMAL(3,2) );

INSERT INTO Students (student_id, first_name, last_name, grade, gpa) VALUES
(1, 'Alice', 'Smith', 9, 3.8),
(2, 'Bob', 'Johnson', 10, 3.5),
(3, 'Charlie', 'Williams', 11, 4.0),
(4, 'Diana', 'Brown', 12, 3.7),
(5, 'Emily', 'Jones', 9, 3.9),
(6, 'Frank', 'Davis', 10, 3.6),
(7, 'Grace', 'Miller', 11, 3.8),
(8, 'Henry', 'Wilson', 12, 3.9),
(9, 'Isabella', 'Moore', 9, 3.7),
(10, 'Jack', 'Taylor', 10, 3.4); 


CREATE TABLE Schools (  school_id INT PRIMARY KEY,  school_name VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255) );

INSERT INTO Schools (school_id, school_name, city, state) VALUES
(1, 'Hilltop High School', 'Anytown', 'CA'),
(2, 'Valley View High School', 'Anytown', 'CA'),
(3, 'Lakewood High School', 'Anytown', 'CA');","SELECT s.first_name, s.last_name, s.gpa
FROM Students s
JOIN Schools sch ON s.school_id = sch.school_id
WHERE sch.school_name = 'Hilltop High School' AND s.grade = 11
ORDER BY s.gpa DESC
LIMIT 5;","This query first joins the Students and Schools tables on the school_id field. Then, it filters the results to only include students from Hilltop High School who are in 11th grade. Finally, it orders the results by GPA in descending order and selects the top 5 students."
389,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,What is the average GPA of students in 10th grade at Valley View High School?,"CREATE TABLE Students (  student_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  grade INT,  gpa DECIMAL(3,2) );

INSERT INTO Students (student_id, first_name, last_name, grade, gpa) VALUES
(1, 'Alice', 'Smith', 9, 3.8),
(2, 'Bob', 'Johnson', 10, 3.5),
(3, 'Charlie', 'Williams', 11, 4.0),
(4, 'Diana', 'Brown', 12, 3.7),
(5, 'Emily', 'Jones', 9, 3.9),
(6, 'Frank', 'Davis', 10, 3.6),
(7, 'Grace', 'Miller', 11, 3.8),
(8, 'Henry', 'Wilson', 12, 3.9),
(9, 'Isabella', 'Moore', 9, 3.7),
(10, 'Jack', 'Taylor', 10, 3.4); 


CREATE TABLE Schools (  school_id INT PRIMARY KEY,  school_name VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255) );

INSERT INTO Schools (school_id, school_name, city, state) VALUES
(1, 'Hilltop High School', 'Anytown', 'CA'),
(2, 'Valley View High School', 'Anytown', 'CA'),
(3, 'Lakewood High School', 'Anytown', 'CA');","SELECT AVG(s.gpa)
FROM Students s
JOIN Schools sch ON s.school_id = sch.school_id
WHERE sch.school_name = 'Valley View High School' AND s.grade = 10;","This query first joins the Students and Schools tables on the school_id field. Then, it filters the results to only include students from Valley View High School who are in 10th grade. Finally, it calculates the average GPA of these students."
390,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",What is the average number of patents filed by companies in the technology sector in each region?,"CREATE TABLE patents (patent_id INT PRIMARY KEY, company_name VARCHAR(255), technology_sector VARCHAR(255), region VARCHAR(255), filing_date DATE);
INSERT INTO patents VALUES (1, 'Apple', 'Technology', 'Americas', '2023-03-08'), (2, 'Samsung', 'Technology', 'Asia', '2023-03-15'), (3, 'Microsoft', 'Technology', 'Americas', '2023-03-22'), (4, 'Huawei', 'Technology', 'Asia', '2023-03-29'), (5, 'Intel', 'Technology', 'Americas', '2023-04-05');

CREATE TABLE regions (region_id INT PRIMARY KEY, region_name VARCHAR(255));
INSERT INTO regions VALUES (1, 'Americas'), (2, 'Asia'), (3, 'Europe'), (4, 'Africa'), (5, 'Oceania');","SELECT r.region_name, AVG(p.patent_id) AS avg_patents FROM patents p JOIN regions r ON p.region = r.region_name WHERE p.technology_sector = 'Technology' GROUP BY r.region_name;","This SQL query retrieves the average number of patents filed by companies in the technology sector in each region. It joins the `patents` table and the `regions` table on the `region` column, filters the results to only include patents in the technology sector, groups the results by region, and calculates the average number of patents filed in each region."
391,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","What are the top 5 most popular consumer products in terms of market share, and what is their market share in each region?","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), market_share DECIMAL(5,2));
INSERT INTO products VALUES (1, 'iPhone', 'Smartphone', 0.20), (2, 'Galaxy S23', 'Smartphone', 0.15), (3, 'MacBook Pro', 'Laptop', 0.10), (4, 'iPad', 'Tablet', 0.08), (5, 'Apple Watch', 'Smartwatch', 0.07);

CREATE TABLE market_share (product_id INT, region VARCHAR(255), market_share DECIMAL(5,2), PRIMARY KEY (product_id, region), FOREIGN KEY (product_id) REFERENCES products(product_id));
INSERT INTO market_share VALUES (1, 'Americas', 0.25), (1, 'Asia', 0.18), (1, 'Europe', 0.17), (2, 'Americas', 0.16), (2, 'Asia', 0.14), (2, 'Europe', 0.13), (3, 'Americas', 0.11), (3, 'Asia', 0.09), (3, 'Europe', 0.10), (4, 'Americas', 0.09), (4, 'Asia', 0.07), (4, 'Europe', 0.08), (5, 'Americas', 0.08), (5, 'Asia', 0.06), (5, 'Europe', 0.07);

CREATE TABLE regions (region_id INT PRIMARY KEY, region_name VARCHAR(255));
INSERT INTO regions VALUES (1, 'Americas'), (2, 'Asia'), (3, 'Europe'), (4, 'Africa'), (5, 'Oceania');","SELECT p.product_name, r.region_name, ms.market_share FROM products p JOIN market_share ms ON p.product_id = ms.product_id JOIN regions r ON ms.region = r.region_name ORDER BY ms.market_share DESC LIMIT 5;","This SQL query retrieves the top 5 most popular consumer products in terms of market share and their market share in each region. It joins the `products` table, the `market_share` table, and the `regions` table, orders the results by market share in descending order, and limits the results to the top 5 products."
392,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","What are the top 3 countries in terms of consumer spending on technology products, and what is the total spending in each country?","CREATE TABLE countries (country_id INT PRIMARY KEY, country_name VARCHAR(255), region VARCHAR(255));
INSERT INTO countries VALUES (1, 'United States', 'Americas'), (2, 'China', 'Asia'), (3, 'Japan', 'Asia'), (4, 'Germany', 'Europe'), (5, 'India', 'Asia');

CREATE TABLE consumer_spending (country_id INT, product_category VARCHAR(255), spending_amount DECIMAL(10,2), PRIMARY KEY (country_id, product_category), FOREIGN KEY (country_id) REFERENCES countries(country_id));
INSERT INTO consumer_spending VALUES (1, 'Smartphone', 100000000), (1, 'Laptop', 50000000), (1, 'Tablet', 25000000), (2, 'Smartphone', 120000000), (2, 'Laptop', 60000000), (2, 'Tablet', 30000000), (3, 'Smartphone', 80000000), (3, 'Laptop', 40000000), (3, 'Tablet', 20000000), (4, 'Smartphone', 70000000), (4, 'Laptop', 35000000), (4, 'Tablet', 17500000), (5, 'Smartphone', 50000000), (5, 'Laptop', 25000000), (5, 'Tablet', 12500000);

CREATE TABLE product_category (category_id INT PRIMARY KEY, category_name VARCHAR(255));
INSERT INTO product_category VALUES (1, 'Smartphone'), (2, 'Laptop'), (3, 'Tablet');","SELECT c.country_name, SUM(cs.spending_amount) AS total_spending FROM countries c JOIN consumer_spending cs ON c.country_id = cs.country_id GROUP BY c.country_name ORDER BY total_spending DESC LIMIT 3;","This SQL query retrieves the top 3 countries in terms of consumer spending on technology products and the total spending in each country. It joins the `countries` table and the `consumer_spending` table, groups the results by country, calculates the total spending in each country, orders the results by total spending in descending order, and limits the results to the top 3 countries."
393,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Get me a list of the top 10 products ranked by average rating across all reviews,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, product_category VARCHAR(255)); 
CREATE TABLE reviews (review_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), rating INT NOT NULL, review_text TEXT); 
INSERT INTO products (product_id, product_name, product_category) VALUES (1, 'Laptop X', 'Electronics'), (2, 'Shirt Y', 'Clothing'), (3, 'Book Z', 'Books'); 
INSERT INTO reviews (review_id, product_id, rating, review_text) VALUES (1, 1, 5, 'Great laptop!'), (2, 1, 4, 'Good laptop, but a bit pricey.'), (3, 2, 5, 'Love this shirt!'), (4, 2, 3, 'Shirt fits well, but the material is a bit thin.'), (5, 3, 4, 'Interesting book, but not my favorite.'), (6, 3, 5, 'A must-read for any fan of the genre!');","SELECT product_name, AVG(rating) AS average_rating FROM products p JOIN reviews r ON p.product_id = r.product_id GROUP BY product_name ORDER BY average_rating DESC LIMIT 10;","1. Join the 'products' and 'reviews' tables on the 'product_id' column. 
2. Group the results by product name. 
3. Calculate the average rating for each product. 
4. Order the results by average rating in descending order. 
5. Limit the results to the top 10 products."
394,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",What are the top 3 countries with the most users who have purchased products in the 'Electronics' category in the last month?,"CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255) NOT NULL, country VARCHAR(255)); 
CREATE TABLE orders (order_id INT PRIMARY KEY, user_id INT REFERENCES users(user_id), product_id INT REFERENCES products(product_id), order_date DATE); 
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, product_category VARCHAR(255)); 
INSERT INTO users (user_id, username, country) VALUES (1, 'Alice', 'USA'), (2, 'Bob', 'Canada'), (3, 'Charlie', 'UK'), (4, 'David', 'France'), (5, 'Emily', 'Germany'); 
INSERT INTO orders (order_id, user_id, product_id, order_date) VALUES (1, 1, 1, '2023-09-15'), (2, 2, 2, '2023-09-20'), (3, 3, 3, '2023-09-25'), (4, 4, 1, '2023-09-30'), (5, 5, 2, '2023-10-05'); 
INSERT INTO products (product_id, product_name, product_category) VALUES (1, 'Laptop X', 'Electronics'), (2, 'Shirt Y', 'Clothing'), (3, 'Book Z', 'Books');","SELECT u.country, COUNT(o.user_id) AS num_users FROM users u JOIN orders o ON u.user_id = o.user_id JOIN products p ON o.product_id = p.product_id WHERE p.product_category = 'Electronics' AND o.order_date >= DATE('now', '-1 month') GROUP BY u.country ORDER BY num_users DESC LIMIT 3;","1. Join the 'users', 'orders', and 'products' tables. 
2. Filter the results to include orders for products in the 'Electronics' category placed in the last month. 
3. Group the results by country. 
4. Count the number of users in each country. 
5. Order the results by the number of users in descending order. 
6. Limit the results to the top 3 countries."
395,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",How many students live in the state of California?,"CREATE TABLE Students ( student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT ); 
 CREATE TABLE Addresses ( address_id INT PRIMARY KEY, street VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT ); 
 CREATE TABLE Schools ( school_id INT PRIMARY KEY, name VARCHAR(255), city VARCHAR(255), state VARCHAR(255)); 
 INSERT INTO Students (student_id, first_name, last_name, address, city, state, zip_code) VALUES (1, 'John', 'Smith', '123 Main St', 'Los Angeles', 'CA', 90001), (2, 'Jane', 'Doe', '456 Oak Ave', 'San Francisco', 'CA', 94102), (3, 'Mike', 'Jones', '789 Pine St', 'San Diego', 'CA', 92101), (4, 'Mary', 'Brown', '1011 Willow St', 'Sacramento', 'CA', 95814), (5, 'David', 'Wilson', '1213 Maple St', 'Fresno', 'CA', 93702), (6, 'Linda', 'Garcia', '1415 Cedar St', 'Bakersfield', 'CA', 93308), (7, 'Christopher', 'Rodriguez', '1617 Birch St', 'Anaheim', 'CA', 92805), (8, 'Samantha', 'Williams', '1819 Oak St', 'Long Beach', 'CA', 90802), (9, 'Ryan', 'Johnson', '2021 Pine St', 'Oakland', 'CA', 94607), (10, 'Jennifer', 'Lopez', '2223 Willow St', 'Santa Ana', 'CA', 92701), (11, 'Michael', 'Lee', '2425 Maple St', 'Riverside', 'CA', 92501), (12, 'Elizabeth', 'Hernandez', '2627 Cedar St', 'Chula Vista', 'CA', 91911), (13, 'Joseph', 'Kim', '2829 Birch St', 'Irvine', 'CA', 92606), (14, 'Nicole', 'Anderson', '3031 Oak St', 'Glendale', 'CA', 91201), (15, 'Daniel', 'Thomas', '3233 Pine St', 'Huntington Beach', 'CA', 92647), (16, 'Barbara', 'Moore', '3435 Willow St', 'Santa Clarita', 'CA', 91350), (17, 'Robert', 'Clark', '3637 Maple St', 'Stockton', 'CA', 95202), (18, 'Maria', 'Martin', '3839 Cedar St', 'Fontana', 'CA', 92335), (19, 'William', 'Lewis', '4041 Birch St', 'Moreno Valley', 'CA', 92557), (20, 'Ashley', 'Robinson', '4243 Oak St', 'Pasadena', 'CA', 91101); 
 CREATE TABLE Courses ( course_id INT PRIMARY KEY, name VARCHAR(255), description VARCHAR(255), credits INT ); 
 CREATE TABLE Enrollments ( enrollment_id INT PRIMARY KEY, student_id INT, course_id INT, grade DECIMAL(3,2), FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id) );",SELECT COUNT(*) FROM Students WHERE state = 'CA';,"1. Select all rows from the Students table.
2. Apply a filter to keep only students with state = 'CA'.
3. Count the number of remaining rows.
4. Return the count as the result."
396,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Insert a new record into the 'student_enrollment' table with the following data: student_id = 123456, first_name = 'John', last_name = 'Doe', date_of_birth = '2000-01-01', grade_level = 9, school_id = 1000","CREATE TABLE student_enrollment (student_id INT PRIMARY KEY, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, date_of_birth DATE NOT NULL, grade_level INT NOT NULL, school_id INT NOT NULL, FOREIGN KEY (school_id) REFERENCES schools(school_id));
CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, city VARCHAR(255) NOT NULL, state VARCHAR(255) NOT NULL, zip_code VARCHAR(255) NOT NULL);","INSERT INTO student_enrollment (student_id, first_name, last_name, date_of_birth, grade_level, school_id) VALUES (123456, 'John', 'Doe', '2000-01-01', 9, 1000);","This SQL statement inserts a new record into the 'student_enrollment' table. The record includes the student's ID, first name, last name, date of birth, grade level, and school ID."
397,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Update the 'student_enrollment' table to change the grade level of student with ID 123456 to 10,"CREATE TABLE student_enrollment (student_id INT PRIMARY KEY, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, date_of_birth DATE NOT NULL, grade_level INT NOT NULL, school_id INT NOT NULL, FOREIGN KEY (school_id) REFERENCES schools(school_id));
CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, city VARCHAR(255) NOT NULL, state VARCHAR(255) NOT NULL, zip_code VARCHAR(255) NOT NULL);",UPDATE student_enrollment SET grade_level = 10 WHERE student_id = 123456;,This SQL statement updates the 'student_enrollment' table to change the grade level of the student with ID 123456 to 10.
398,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Delete the record from the 'student_enrollment' table where the student_id is 123456,"CREATE TABLE student_enrollment (student_id INT PRIMARY KEY, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, date_of_birth DATE NOT NULL, grade_level INT NOT NULL, school_id INT NOT NULL, FOREIGN KEY (school_id) REFERENCES schools(school_id));
CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, city VARCHAR(255) NOT NULL, state VARCHAR(255) NOT NULL, zip_code VARCHAR(255) NOT NULL);",DELETE FROM student_enrollment WHERE student_id = 123456;,This SQL statement deletes the record from the 'student_enrollment' table where the student_id is 123456.
399,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Show all records from the 'student_enrollment' table where the student's last name is 'Smith',"CREATE TABLE student_enrollment (student_id INT PRIMARY KEY, first_name VARCHAR(255) NOT NULL, last_name VARCHAR(255) NOT NULL, date_of_birth DATE NOT NULL, grade_level INT NOT NULL, school_id INT NOT NULL, FOREIGN KEY (school_id) REFERENCES schools(school_id));
CREATE TABLE schools (school_id INT PRIMARY KEY, school_name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, city VARCHAR(255) NOT NULL, state VARCHAR(255) NOT NULL, zip_code VARCHAR(255) NOT NULL);",SELECT * FROM student_enrollment WHERE last_name = 'Smith';,This SQL statement selects all records from the 'student_enrollment' table where the student's last name is 'Smith'.
400,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert a new record into the 'Galleries' table with the following information: Gallery Name: 'The New Gallery', City: 'New York', Country: 'USA', Established: '2023-04-01'","CREATE TABLE Galleries (
GalleryID INT PRIMARY KEY,
GalleryName VARCHAR(255) NOT NULL,
City VARCHAR(255) NOT NULL,
Country VARCHAR(255) NOT NULL,
Established DATE NOT NULL
);

INSERT INTO Galleries (GalleryName, City, Country, Established) VALUES ('The New Gallery', 'New York', 'USA', '2023-04-01');","INSERT INTO Galleries (GalleryName, City, Country, Established) VALUES ('The New Gallery', 'New York', 'USA', '2023-04-01')","This SQL statement inserts a new record into the 'Galleries' table with the specified values for 'GalleryName', 'City', 'Country', and 'Established'."
401,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the 'Price' of the artwork with ArtworkID 123 in the 'Artworks' table to 15000,"CREATE TABLE Artworks (
ArtworkID INT PRIMARY KEY,
ArtistID INT NOT NULL,
Title VARCHAR(255) NOT NULL,
Year INT NOT NULL,
Medium VARCHAR(255) NOT NULL,
Price DECIMAL(10,2) NOT NULL,
GalleryID INT NOT NULL,
FOREIGN KEY (ArtistID) REFERENCES Artists(ArtistID),
FOREIGN KEY (GalleryID) REFERENCES Galleries(GalleryID)
);

INSERT INTO Artworks (ArtworkID, ArtistID, Title, Year, Medium, Price, GalleryID) VALUES (123, 456, 'Untitled', 2022, 'Oil on Canvas', 10000, 789);",UPDATE Artworks SET Price = 15000 WHERE ArtworkID = 123,This SQL statement updates the 'Price' of the artwork with ArtworkID 123 in the 'Artworks' table to 15000.
402,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Delete the record with ArtistID 789 from the 'Artists' table,"CREATE TABLE Artists (
ArtistID INT PRIMARY KEY,
FirstName VARCHAR(255) NOT NULL,
LastName VARCHAR(255) NOT NULL,
DateOfBirth DATE NOT NULL,
Nationality VARCHAR(255) NOT NULL
);

INSERT INTO Artists (ArtistID, FirstName, LastName, DateOfBirth, Nationality) VALUES (789, 'John', 'Doe', '1980-01-01', 'USA');",DELETE FROM Artists WHERE ArtistID = 789,This SQL statement deletes the record with ArtistID 789 from the 'Artists' table.
403,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Add a new column 'ExhibitionDate' of type DATE to the 'Exhibitions' table,"CREATE TABLE Exhibitions (
ExhibitionID INT PRIMARY KEY,
ExhibitionName VARCHAR(255) NOT NULL,
GalleryID INT NOT NULL,
StartDate DATE NOT NULL,
EndDate DATE NOT NULL,
FOREIGN KEY (GalleryID) REFERENCES Galleries(GalleryID)
);

INSERT INTO Exhibitions (ExhibitionID, ExhibitionName, GalleryID, StartDate, EndDate) VALUES (101, 'Summer Exhibition', 789, '2023-06-01', '2023-09-30');",ALTER TABLE Exhibitions ADD COLUMN ExhibitionDate DATE,This SQL statement adds a new column 'ExhibitionDate' of type DATE to the 'Exhibitions' table.
404,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Rename the 'LastName' column to 'Surname' in the 'Artists' table,"CREATE TABLE Artists (
ArtistID INT PRIMARY KEY,
FirstName VARCHAR(255) NOT NULL,
LastName VARCHAR(255) NOT NULL,
DateOfBirth DATE NOT NULL,
Nationality VARCHAR(255) NOT NULL
);

INSERT INTO Artists (ArtistID, FirstName, LastName, DateOfBirth, Nationality) VALUES (789, 'John', 'Doe', '1980-01-01', 'USA');",ALTER TABLE Artists RENAME COLUMN LastName TO Surname,This SQL statement renames the 'LastName' column to 'Surname' in the 'Artists' table.
405,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Show me the first and last names of artists born in the United States, along with the total number of works they have produced.","CREATE TABLE Artists (   artist_id INT PRIMARY KEY,   first_name VARCHAR(255) NOT NULL,   last_name VARCHAR(255),   birth_country VARCHAR(255),   birth_date DATE);  CREATE TABLE Works (   work_id INT PRIMARY KEY,   artist_id INT REFERENCES Artists(artist_id),   title VARCHAR(255) NOT NULL,   creation_date DATE);","SELECT a.first_name, a.last_name, COUNT(w.work_id) AS total_works   FROM Artists a   INNER JOIN Works w ON a.artist_id = w.artist_id   WHERE a.birth_country = 'United States'   GROUP BY a.artist_id   ORDER BY total_works DESC;","This query uses an inner join to combine data from the 'Artists' and 'Works' tables based on the 'artist_id' field. It then filters the results to only include artists born in the United States. It then groups the results by artist_id and counts the number of works associated with each artist. Finally, it orders the results in descending order of total_works."
406,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Update the birth year of the artist with the ID of 123456 to 1970.,"CREATE TABLE Artists (   artist_id INT PRIMARY KEY,   first_name VARCHAR(255) NOT NULL,   last_name VARCHAR(255),   birth_country VARCHAR(255),   birth_date DATE);",UPDATE Artists SET birth_date = '1970-01-01' WHERE artist_id = 123456;,This query updates the 'birth_date' field in the 'Artists' table to '1970-01-01' for the artist with the ID of 123456.
407,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Delete all of the works produced by artists born after 1990.,"CREATE TABLE Artists (   artist_id INT PRIMARY KEY,   first_name VARCHAR(255) NOT NULL,   last_name VARCHAR(255),   birth_country VARCHAR(255),   birth_date DATE);  CREATE TABLE Works (   work_id INT PRIMARY KEY,   artist_id INT REFERENCES Artists(artist_id),   title VARCHAR(255) NOT NULL,   creation_date DATE);",DELETE FROM Works WHERE artist_id IN (SELECT artist_id FROM Artists WHERE birth_date > '1990-01-01');,This query uses a subquery to identify the artist_ids of all artists born after 1990. It then uses these artist_ids to delete all of the works associated with them from the 'Works' table.
408,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Insert a new record into the Artists table for an artist named Frida Kahlo who was born in Mexico on July 6, 1907.","CREATE TABLE Artists (   artist_id INT PRIMARY KEY,   first_name VARCHAR(255) NOT NULL,   last_name VARCHAR(255),   birth_country VARCHAR(255),   birth_date DATE);","INSERT INTO Artists (first_name, last_name, birth_country, birth_date) VALUES ('Frida', 'Kahlo', 'Mexico', '1907-07-06');","This query inserts a new record into the 'Artists' table for an artist named Frida Kahlo who was born in Mexico on July 6, 1907."
409,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Show me the names of all of the female artists in the database, along with their countries of origin and the total number of works they have produced.","CREATE TABLE Artists (   artist_id INT PRIMARY KEY,   first_name VARCHAR(255) NOT NULL,   last_name VARCHAR(255),   birth_country VARCHAR(255),   birth_date DATE,   gender VARCHAR(255));  CREATE TABLE Works (   work_id INT PRIMARY KEY,   artist_id INT REFERENCES Artists(artist_id),   title VARCHAR(255) NOT NULL,   creation_date DATE);","SELECT a.first_name, a.last_name, a.birth_country, COUNT(w.work_id) AS total_works   FROM Artists a   INNER JOIN Works w ON a.artist_id = w.artist_id   WHERE a.gender = 'Female'   GROUP BY a.artist_id   ORDER BY total_works DESC;","This query uses an inner join to combine data from the 'Artists' and 'Works' tables based on the 'artist_id' field. It then filters the results to only include female artists. It then groups the results by artist_id and counts the number of works associated with each artist. Finally, it orders the results in descending order of total_works."
410,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Show me all customers who made a purchase in November 2021 but have not made a purchase since,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(255), Email VARCHAR(255), City VARCHAR(255), Country VARCHAR(255));
CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT REFERENCES Customers(CustomerID), OrderDate DATE, Amount DECIMAL(10,2));
INSERT INTO Customers (CustomerID, Name, Email, City, Country) VALUES
(1, 'John Doe', 'john.doe@example.com', 'New York', 'USA'),
(2, 'Jane Smith', 'jane.smith@example.com', 'London', 'UK'),
(3, 'David Lee', 'david.lee@example.com', 'Paris', 'France'),
(4, 'Emily Chen', 'emily.chen@example.com', 'Tokyo', 'Japan'),
(5, 'Michael Brown', 'michael.brown@example.com', 'Berlin', 'Germany');
INSERT INTO Orders (OrderID, CustomerID, OrderDate, Amount) VALUES
(1, 1, '2021-11-01', 100.00),
(2, 2, '2021-11-15', 50.00),
(3, 3, '2021-11-20', 75.00),
(4, 1, '2021-11-25', 25.00),
(5, 5, '2021-11-30', 150.00),
(6, 2, '2022-12-01', 30.00),
(7, 4, '2022-12-15', 90.00);
SELECT c.CustomerID, c.Name
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate BETWEEN '2021-11-01' AND '2021-11-30'
AND o.OrderDate IS NULL
ORDER BY c.CustomerID;","SELECT c.CustomerID, c.Name
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate BETWEEN '2021-11-01' AND '2021-11-30'
AND o.OrderDate IS NULL
ORDER BY c.CustomerID;","This query selects all customers from the Customers table and joins them with the Orders table on the CustomerID column. It then filters the results to only include customers who placed an order between November 1, 2021 and November 30, 2021 and have no orders after that date. Finally, it orders the results by CustomerID."
411,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","I need to update the email address for customer 123 to john.new.email@example.com, can you help?","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(255), Email VARCHAR(255), City VARCHAR(255), Country VARCHAR(255));
INSERT INTO Customers (CustomerID, Name, Email, City, Country) VALUES
(1, 'John Doe', 'john.doe@example.com', 'New York', 'USA'),
(2, 'Jane Smith', 'jane.smith@example.com', 'London', 'UK'),
(3, 'David Lee', 'david.lee@example.com', 'Paris', 'France'),
(4, 'Emily Chen', 'emily.chen@example.com', 'Tokyo', 'Japan'),
(5, 'Michael Brown', 'michael.brown@example.com', 'Berlin', 'Germany'),
(123, 'John Smith', 'john.old.email@example.com', 'Chicago', 'USA');",UPDATE Customers SET Email = 'john.new.email@example.com' WHERE CustomerID = 123;,This query updates the email address for customer 123 to john.new.email@example.com.
412,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","I would like to insert a new order for customer 456 with an order date of 2023-03-01 and an amount of 125.00, is that possible?","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(255), Email VARCHAR(255), City VARCHAR(255), Country VARCHAR(255));
CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT REFERENCES Customers(CustomerID), OrderDate DATE, Amount DECIMAL(10,2));
INSERT INTO Customers (CustomerID, Name, Email, City, Country) VALUES
(1, 'John Doe', 'john.doe@example.com', 'New York', 'USA'),
(2, 'Jane Smith', 'jane.smith@example.com', 'London', 'UK'),
(3, 'David Lee', 'david.lee@example.com', 'Paris', 'France'),
(4, 'Emily Chen', 'emily.chen@example.com', 'Tokyo', 'Japan'),
(5, 'Michael Brown', 'michael.brown@example.com', 'Berlin', 'Germany'),
(456, 'Alice Johnson', 'alice.johnson@example.com', 'Los Angeles', 'USA');
INSERT INTO Orders (OrderID, CustomerID, OrderDate, Amount) VALUES
(1, 1, '2021-11-01', 100.00),
(2, 2, '2021-11-15', 50.00),
(3, 3, '2021-11-20', 75.00),
(4, 1, '2021-11-25', 25.00),
(5, 5, '2021-11-30', 150.00),
(6, 2, '2022-12-01', 30.00),
(7, 4, '2022-12-15', 90.00);","INSERT INTO Orders (OrderID, CustomerID, OrderDate, Amount) VALUES ((SELECT MAX(OrderID) + 1 FROM Orders), 456, '2023-03-01', 125.00);","This query inserts a new order into the Orders table. The OrderID is generated by selecting the maximum OrderID from the table and adding 1. The CustomerID is set to 456, the OrderDate is set to 2023-03-01, and the Amount is set to 125.00."
413,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Update the customer table to change the email address of all customers who live in California and have placed an order in the last month to 'ca-customer@example.com'.,"CREATE TABLE customer (customer_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code VARCHAR(255), phone_number VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE, total_amount DECIMAL(10,2));
INSERT INTO customer (customer_id, first_name, last_name, email, address, city, state, zip_code, phone_number) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '123 Main St', 'Anytown', 'CA', '91234', '555-123-4567'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '456 Elm St', 'Anytown', 'NY', '12345', '555-234-5678'),
(3, 'Bob', 'Johnson', 'bob.johnson@example.com', '789 Oak St', 'Anytown', 'TX', '78901', '555-345-6789');
INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 1, '2023-03-01', 100.00),
(2, 2, '2023-03-05', 50.00),
(3, 3, '2023-03-10', 75.00),
(4, 1, '2023-03-15', 25.00),
(5, 2, '2023-03-20', 100.00),
(6, 3, '2023-03-25', 150.00);
","UPDATE customer SET email = 'ca-customer@example.com' WHERE state = 'CA' AND customer_id IN (SELECT customer_id FROM orders WHERE order_date >= DATE('now', '-1 month'));","This SQL query updates the email address of all customers who live in California and have placed an order in the last month to 'ca-customer@example.com'.

The query first selects the customer_id of all customers who have placed an order in the last month using the 'orders' table. It then filters these results to only include customers who live in California, using the 'customer' table.

Finally, the query updates the email address of all matching customers in the 'customer' table to 'ca-customer@example.com'."
414,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Delete all orders placed before January 1, 2023.","CREATE TABLE customer (customer_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code VARCHAR(255), phone_number VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE, total_amount DECIMAL(10,2));
INSERT INTO customer (customer_id, first_name, last_name, email, address, city, state, zip_code, phone_number) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '123 Main St', 'Anytown', 'CA', '91234', '555-123-4567'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '456 Elm St', 'Anytown', 'NY', '12345', '555-234-5678'),
(3, 'Bob', 'Johnson', 'bob.johnson@example.com', '789 Oak St', 'Anytown', 'TX', '78901', '555-345-6789');
INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 1, '2022-12-01', 100.00),
(2, 2, '2022-12-05', 50.00),
(3, 3, '2022-12-10', 75.00),
(4, 1, '2023-01-01', 25.00),
(5, 2, '2023-01-05', 100.00),
(6, 3, '2023-01-10', 150.00);
",DELETE FROM orders WHERE order_date < '2023-01-01';,"This SQL query deletes all orders placed before January 1, 2023.

The query uses the 'DELETE' statement to remove rows from the 'orders' table. It specifies a 'WHERE' clause to filter the rows to be deleted, selecting only those with an 'order_date' before '2023-01-01'."
415,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Which customers have placed orders for a specific product in the last month?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE);
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255));
INSERT INTO orders (order_id, customer_id, product_id, order_date) VALUES (1, 10, 20, '2023-02-13'), (2, 15, 25, '2023-02-15'), (3, 10, 20, '2023-02-20'), (4, 20, 30, '2023-02-22'), (5, 15, 25, '2023-02-28');
INSERT INTO customers (customer_id, customer_name) VALUES (10, 'John Doe'), (15, 'Jane Smith'), (20, 'Acme Corporation');
INSERT INTO products (product_id, product_name) VALUES (20, 'Widget'), (25, 'Gadget'), (30, 'Doohickey');","SELECT c.customer_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.product_id = 20
AND o.order_date >= DATE('now', '-1 month')","This query first joins the `customers` and `orders` tables on the `customer_id` field. It then filters the results to include only orders placed in the last month (using the `DATE('now', '-1 month')` function) and for the product with ID 20. Finally, it selects the customer name from the `customers` table for each matching order."
416,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the total quantity of each product ordered in the last quarter?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT);
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255));
INSERT INTO orders (order_id, customer_id, product_id, order_date, quantity) VALUES (1, 10, 20, '2023-01-15', 5), (2, 15, 25, '2023-01-20', 3), (3, 10, 20, '2023-02-10', 2), (4, 20, 30, '2023-02-15', 8), (5, 15, 25, '2023-03-01', 1), (6, 10, 20, '2023-03-05', 4), (7, 20, 30, '2023-03-10', 6), (8, 15, 25, '2023-03-18', 9);
INSERT INTO products (product_id, product_name) VALUES (20, 'Widget'), (25, 'Gadget'), (30, 'Doohickey');","SELECT p.product_name, SUM(o.quantity) AS total_quantity
FROM products p
JOIN orders o ON p.product_id = o.product_id
WHERE o.order_date >= DATE('now', '-3 months')
GROUP BY p.product_name
ORDER BY total_quantity DESC","This query first joins the `products` and `orders` tables on the `product_id` field. It then filters the results to include only orders placed in the last quarter (using the `DATE('now', '-3 months')` function). It then groups the results by product name and calculates the sum of the quantities for each product, storing the result in the `total_quantity` column. Finally, it orders the results in descending order of total quantity to show the products with the highest total quantities first."
417,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average price of products sold in each region this month?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE, quantity INT, region VARCHAR(255));
INSERT INTO products (product_id, product_name, price) VALUES (20, 'Widget', 10.00), (25, 'Gadget', 15.00), (30, 'Doohickey', 20.00);
INSERT INTO orders (order_id, customer_id, product_id, order_date, quantity, region) VALUES (1, 10, 20, '2023-04-01', 5, 'North America'), (2, 15, 25, '2023-04-05', 3, 'Europe'), (3, 10, 20, '2023-04-10', 2, 'North America'), (4, 20, 30, '2023-04-15', 8, 'Asia'), (5, 15, 25, '2023-04-20', 1, 'Europe'), (6, 10, 20, '2023-04-25', 4, 'North America'), (7, 20, 30, '2023-04-30', 6, 'Asia');","SELECT o.region, AVG(p.price) AS average_price
FROM orders o
JOIN products p ON o.product_id = p.product_id
WHERE o.order_date >= DATE('now', 'start of month')
GROUP BY o.region","This query first joins the `orders` and `products` tables on the `product_id` field. It then filters the results to include only orders placed this month (using the `DATE('now', 'start of month')` function). It then groups the results by region and calculates the average price using the `AVG()` function, storing the result in the `average_price` column. Finally, it displays the region and the average price for each region."
418,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average number of units produced per day for each product in the month of January 2023?,"CREATE TABLE production_records (
  product_id INT,
  date DATE,
  units_produced INT
);

INSERT INTO production_records (product_id, date, units_produced) VALUES
(1, '2023-01-01', 100),
(1, '2023-01-02', 120),
(1, '2023-01-03', 110),
(1, '2023-01-04', 130),
(1, '2023-01-05', 140),
(2, '2023-01-01', 80),
(2, '2023-01-02', 90),
(2, '2023-01-03', 100),
(2, '2023-01-04', 110),
(2, '2023-01-05', 120),
(3, '2023-01-01', 150),
(3, '2023-01-02', 160),
(3, '2023-01-03', 170),
(3, '2023-01-04', 180),
(3, '2023-01-05', 190);

CREATE VIEW product_summary AS
SELECT product_id, AVG(units_produced) AS average_units_produced
FROM production_records
GROUP BY product_id;","SELECT product_id, AVG(units_produced) AS average_units_produced
FROM production_records
WHERE date BETWEEN '2023-01-01' AND '2023-01-31'
GROUP BY product_id;","This query calculates the average number of units produced per day for each product in the month of January 2023. 

**Step 1:** Filter the production_records table to only include records for the month of January 2023.

**Step 2:** Calculate the average number of units produced per day for each product.

**Step 3:** Group the results by product_id.

**Step 4:** Display the product_id and the average number of units produced for each product."
419,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What are the top 5 suppliers based on the total amount spent on purchases in the year 2022?,"CREATE TABLE suppliers (
  supplier_id INT,
  supplier_name VARCHAR(255),
  address VARCHAR(255),
  country VARCHAR(255)
);

CREATE TABLE purchases (
  purchase_id INT,
  supplier_id INT,
  purchase_date DATE,
  amount DECIMAL(10,2)
);

INSERT INTO suppliers (supplier_id, supplier_name, address, country) VALUES
(1, 'Acme Supplies', '123 Main St, Anytown, USA', 'USA'),
(2, 'Best Buy Co.', '456 Oak Ave, Springfield, USA', 'USA'),
(3, 'Global Inc.', '789 Pine St, London, UK', 'UK'),
(4, 'International Traders', '1011 Maple St, Tokyo, Japan', 'Japan'),
(5, 'Quality Products Ltd.', '1213 Birch St, Sydney, Australia', 'Australia');

INSERT INTO purchases (purchase_id, supplier_id, purchase_date, amount) VALUES
(1, 1, '2022-01-01', 1000.00),
(2, 2, '2022-01-02', 1500.00),
(3, 3, '2022-01-03', 2000.00),
(4, 4, '2022-01-04', 2500.00),
(5, 5, '2022-01-05', 3000.00),
(6, 1, '2022-02-01', 1200.00),
(7, 2, '2022-02-02', 1800.00),
(8, 3, '2022-02-03', 2400.00),
(9, 4, '2022-02-04', 3000.00),
(10, 5, '2022-02-05', 3600.00),
(11, 1, '2022-03-01', 1400.00),
(12, 2, '2022-03-02', 2100.00),
(13, 3, '2022-03-03', 2800.00),
(14, 4, '2022-03-04', 3500.00),
(15, 5, '2022-03-05', 4200.00);

CREATE VIEW supplier_purchases AS
SELECT supplier_id, SUM(amount) AS total_spent
FROM purchases
GROUP BY supplier_id;","SELECT supplier_name, total_spent
FROM suppliers
JOIN supplier_purchases ON suppliers.supplier_id = supplier_purchases.supplier_id
ORDER BY total_spent DESC
LIMIT 5;","This query identifies the top 5 suppliers based on the total amount spent on purchases in the year 2022. 

**Step 1:** Join the suppliers table and the supplier_purchases view on the supplier_id field. This combines the supplier information with the total amount spent for each supplier.

**Step 2:** Order the results by total_spent in descending order. This lists the suppliers with the highest total spending first.

**Step 3:** Limit the results to the top 5 suppliers. This displays the top 5 suppliers with the highest total spending."
420,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What is the average yield of wheat in the United States over the past five years?,"CREATE TABLE Wheat_Yields (Year INT, State VARCHAR(255), Yield INT);",SELECT AVG(Yield) FROM Wheat_Yields WHERE State = 'United States' AND Year BETWEEN 2018 AND 2022;,"This query calculates the average yield of wheat in the United States over the past five years by first filtering the Wheat_Yields table to include only records for the United States and years between 2018 and 2022. Then, it calculates the average yield for the remaining records."
421,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What are the top five countries in terms of corn production?,"CREATE TABLE Corn_Production (Country VARCHAR(255), Production INT);","SELECT Country, Production FROM Corn_Production ORDER BY Production DESC LIMIT 5;","This query retrieves the top five countries in terms of corn production by first sorting the Corn_Production table in descending order of production. Then, it selects the Country and Production columns for the top five records."
422,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What is the relationship between average temperature and rice yield in Asia?,"CREATE TABLE Rice_Yields (Country VARCHAR(255), Yield INT, Average_Temperature FLOAT);","SELECT Country, Yield, Average_Temperature FROM Rice_Yields WHERE Country IN ('China', 'India', 'Indonesia', 'Japan', 'Philippines', 'Thailand', 'Vietnam') ORDER BY Average_Temperature;","This query retrieves the rice yield and average temperature for countries in Asia, ordered by average temperature. This allows for the analysis of the relationship between these two variables."
423,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What are the most common types of fertilizers used in the United States?,"CREATE TABLE Fertilizer_Usage (State VARCHAR(255), Fertilizer_Type VARCHAR(255), Usage INT);","SELECT Fertilizer_Type, SUM(Usage) AS Total_Usage FROM Fertilizer_Usage WHERE State = 'United States' GROUP BY Fertilizer_Type ORDER BY Total_Usage DESC;","This query calculates the total usage of each fertilizer type in the United States by first grouping the Fertilizer_Usage table by fertilizer type and state. Then, it sums the usage for each fertilizer type and orders the results in descending order of total usage."
424,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How has the global demand for soybeans changed over the past decade?,"CREATE TABLE Soybean_Demand (Year INT, Demand INT);","SELECT Year, Demand FROM Soybean_Demand ORDER BY Year;",This query retrieves the global demand for soybeans over the past decade by selecting the Year and Demand columns from the Soybean_Demand table and ordering the results by year.
425,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,common table expressions,data retrieval: basic data fetching queries,What is the average age of patients diagnosed with diabetes in the United States in the last 5 years?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), age INT, diagnosis VARCHAR(255), country VARCHAR(255));
INSERT INTO patients (patient_id, name, age, diagnosis, country) VALUES
(1, 'John Doe', 55, 'Diabetes', 'USA'),
(2, 'Jane Smith', 42, 'Cancer', 'Canada'),
(3, 'Mike Jones', 30, 'Asthma', 'UK'),
(4, 'Mary Brown', 68, 'Arthritis', 'Australia'),
(5, 'David Lee', 25, 'Depression', 'USA');

CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, diagnosis VARCHAR(255), date_of_diagnosis DATE);","SELECT AVG(age) FROM patients WHERE diagnosis = 'Diabetes' AND country = 'USA' AND date_of_diagnosis BETWEEN DATE('now', '-5 years') AND DATE('now');","This query calculates the average age of patients diagnosed with diabetes in the United States in the last 5 years. It first filters the patients table to select only patients with a diagnosis of 'Diabetes' and a country of 'USA'. Then, it filters the diagnoses table to select only diagnoses within the last 5 years. Finally, it calculates the average age of the remaining patients."
426,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,common table expressions,data retrieval: basic data fetching queries,What are the names and contact details of all the patients who were admitted to the hospital in the last month and have a history of diabetes?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, address VARCHAR(255), phone_number VARCHAR(255), email VARCHAR(255), date_of_birth DATE); CREATE TABLE admissions (admission_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), admission_date DATE, discharge_date DATE); CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_code VARCHAR(255), diagnosis_date DATE);","SELECT p.name, p.address, p.phone_number, p.email FROM patients p JOIN admissions a ON p.patient_id = a.patient_id JOIN diagnoses d ON p.patient_id = d.patient_id WHERE a.admission_date >= DATE('now', '-1 month') AND d.diagnosis_code = 'E11.9'","This query selects the name, address, phone number, and email of all patients who have been admitted to the hospital in the last month and have a diagnosis of diabetes. The query joins the patients, admissions, and diagnoses tables on the patient_id column. It then filters the results to include only patients who were admitted in the last month and have a diagnosis code of E11.9, which is the ICD-10 code for diabetes."
427,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,common table expressions,data retrieval: basic data fetching queries,What are the names of the patients who have been prescribed a specific medication in the last year?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL); CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL); CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_id INT REFERENCES medications(medication_id), date_prescribed DATE);","SELECT p.name FROM patients p JOIN prescriptions pr ON p.patient_id = pr.patient_id JOIN medications m ON pr.medication_id = m.medication_id WHERE m.name = 'Specific medication name' AND pr.date_prescribed >= DATE('now', '-1 year')","This query selects the names of the patients who have been prescribed a specific medication in the last year. The query joins the patients, prescriptions, and medications tables on the patient_id and medication_id columns, respectively. It then filters the results to include only patients who have been prescribed the specific medication in the last year."
428,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,common table expressions,data retrieval: basic data fetching queries,What is the average length of stay for patients with a specific diagnosis?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL); CREATE TABLE admissions (admission_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), admission_date DATE, discharge_date DATE); CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_code VARCHAR(255), diagnosis_date DATE);","SELECT AVG(DATEDIFF(discharge_date, admission_date)) AS average_length_of_stay FROM admissions a JOIN diagnoses d ON a.patient_id = d.patient_id WHERE d.diagnosis_code = 'Specific diagnosis code'",This query calculates the average length of stay for patients with a specific diagnosis. The query joins the admissions and diagnoses tables on the patient_id column. It then filters the results to include only patients with the specific diagnosis code and calculates the average length of stay by subtracting the admission date from the discharge date.
429,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,common table expressions,data retrieval: basic data fetching queries,What are the top 10 most commonly prescribed medications in the last month?,"CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL); CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT, medication_id INT REFERENCES medications(medication_id), date_prescribed DATE);","SELECT m.name, COUNT(*) AS num_prescriptions FROM medications m JOIN prescriptions pr ON m.medication_id = pr.medication_id WHERE pr.date_prescribed >= DATE('now', '-1 month') GROUP BY m.name ORDER BY num_prescriptions DESC LIMIT 10","This query selects the top 10 most commonly prescribed medications in the last month. The query joins the medications and prescriptions tables on the medication_id column. It then filters the results to include only prescriptions from the last month, groups the results by medication name, counts the number of prescriptions for each medication, and orders the results by the number of prescriptions in descending order. Finally, it limits the results to the top 10 medications."
430,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 10 products sold by revenue in the last quarter for the North America region?,"CREATE TABLE products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255) NOT NULL,
  category VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sales (
  sale_id INT PRIMARY KEY,
  product_id INT NOT NULL,
  customer_id INT NOT NULL,
  region VARCHAR(255) NOT NULL,
  quantity INT NOT NULL,
  total_price DECIMAL(10,2) NOT NULL,
  sale_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (product_id) REFERENCES products(product_id),
  FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE customers (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  region VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO products (product_id, product_name, category, price) VALUES
(1, 'Laptop', 'Electronics', 1200),
(2, 'Shirt', 'Apparel', 30),
(3, 'Smartphone', 'Electronics', 800),
(4, 'Table', 'Furniture', 250),
(5, 'Chair', 'Furniture', 100),
(6, 'Book', 'Books', 15),
(7, 'Coffee', 'Food', 5),
(8, 'Software', 'Software', 50),
(9, 'Headphones', 'Electronics', 75),
(10, 'Keyboard', 'Electronics', 50);

INSERT INTO sales (sale_id, product_id, customer_id, region, quantity, total_price, sale_date) VALUES
(1, 1, 101, 'North America', 2, 2400, '2023-04-01 10:00:00'),
(2, 2, 102, 'Europe', 1, 30, '2023-04-02 12:00:00'),
(3, 3, 103, 'Asia', 3, 2400, '2023-04-03 14:00:00'),
(4, 4, 104, 'North America', 1, 250, '2023-04-04 16:00:00'),
(5, 5, 105, 'South America', 2, 200, '2023-04-05 18:00:00'),
(6, 6, 106, 'Australia', 4, 60, '2023-04-06 20:00:00'),
(7, 7, 107, 'Africa', 5, 25, '2023-04-07 22:00:00'),
(8, 8, 108, 'North America', 2, 100, '2023-04-08 00:00:00'),
(9, 9, 109, 'Europe', 1, 75, '2023-04-09 02:00:00'),
(10, 10, 110, 'Asia', 3, 150, '2023-04-10 04:00:00'),
(11, 1, 111, 'North America', 1, 1200, '2023-04-11 06:00:00'),
(12, 2, 112, 'Europe', 2, 60, '2023-04-12 08:00:00'),
(13, 3, 113, 'Asia', 1, 800, '2023-04-13 10:00:00'),
(14, 4, 114, 'North America', 3, 750, '2023-04-14 12:00:00'),
(15, 5, 115, 'South America', 1, 100, '2023-04-15 14:00:00'),
(16, 6, 116, 'Australia', 2, 30, '2023-04-16 16:00:00'),
(17, 7, 117, 'Africa', 3, 15, '2023-04-17 18:00:00'),
(18, 8, 118, 'North America', 1, 50, '2023-04-18 20:00:00'),
(19, 9, 119, 'Europe', 2, 150, '2023-04-19 22:00:00'),
(20, 10, 120, 'Asia', 4, 200, '2023-04-20 00:00:00');","SELECT
  p.product_name,
  SUM(s.total_price) AS total_revenue
FROM sales AS s
JOIN products AS p ON s.product_id = p.product_id
WHERE s.region = 'North America' AND s.sale_date BETWEEN '2023-04-01' AND '2023-06-30'
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 10;","This query retrieves the top 10 products sold by revenue in the North America region during the second quarter of 2023. 

1. It starts by selecting the product name and calculating the sum of total revenue for each product.
2. It joins the sales and products tables on the product ID.
3. It filters the sales data to include only sales from the North America region and the second quarter of 2023.
4. It groups the data by product name.
5. It orders the results by total revenue in descending order.
6. It limits the results to the top 10 products."
431,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which countries have the highest number of active cybersecurity professionals?,"CREATE TABLE cybersecurity_professionals (
    id INT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL,
    years_experience INT,
    current_employer VARCHAR(255)
);

INSERT INTO cybersecurity_professionals (id, name, country, years_experience, current_employer)
VALUES
    (1, 'Alice Smith', 'United States', 5, 'Google'),
    (2, 'Bob Johnson', 'United Kingdom', 8, 'Microsoft'),
    (3, 'Chen Li', 'China', 3, 'Alibaba'),
    (4, 'David Garcia', 'Spain', 7, 'Telefonica'),
    (5, 'Elena Petrova', 'Russia', 4, 'Sberbank');

CREATE TABLE countries (
    country_code VARCHAR(2) PRIMARY KEY,
    country_name VARCHAR(255) NOT NULL,
    region VARCHAR(255) NOT NULL,
    population INT
);

INSERT INTO countries (country_code, country_name, region, population)
VALUES
    ('US', 'United States', 'North America', 330000000),
    ('UK', 'United Kingdom', 'Europe', 68000000),
    ('CN', 'China', 'Asia', 1400000000),
    ('ES', 'Spain', 'Europe', 47000000),
    ('RU', 'Russia', 'Europe', 144000000);","SELECT c.country_name, COUNT(cp.id) AS num_professionals
FROM cybersecurity_professionals cp
INNER JOIN countries c ON cp.country = c.country_code
GROUP BY c.country_name
ORDER BY num_professionals DESC
LIMIT 10;","This SQL query first joins the `cybersecurity_professionals` and `countries` tables on the `country` field. It then groups the results by country name and counts the number of cybersecurity professionals in each country using the `COUNT()` function. Finally, it orders the results in descending order by the number of professionals and limits the output to the top 10 countries."
432,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 products in the US based on sales,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), release_date DATE);
INSERT INTO products (product_id, product_name, category, price, release_date) VALUES
(1, 'iPhone 14', 'Smartphone', 1099.00, '2022-09-16'),
(2, 'MacBook Pro 14', 'Laptop', 1999.00, '2021-10-18'),
(3, 'AirPods Pro', 'Earbuds', 249.00, '2019-10-28'),
(4, 'Apple Watch Series 8', 'Smartwatch', 399.00, '2022-09-16'),
(5, 'iPad Air', 'Tablet', 599.00, '2022-03-18'),
(6, 'Samsung Galaxy S23 Ultra', 'Smartphone', 1199.00, '2023-02-01'),
(7, 'Google Pixel 7 Pro', 'Smartphone', 899.00, '2022-10-13'),
(8, 'Microsoft Surface Laptop 5', 'Laptop', 999.00, '2022-10-25'),
(9, 'Sony WF-1000XM4', 'Earbuds', 279.00, '2021-06-08'),
(10, 'Fitbit Versa 4', 'Smartwatch', 229.00, '2022-09-01');

CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT, country VARCHAR(255), quantity INT, sale_date DATE, FOREIGN KEY (product_id) REFERENCES products(product_id));
INSERT INTO sales (sale_id, product_id, country, quantity, sale_date) VALUES
(1, 1, 'US', 1000, '2023-03-08'),
(2, 2, 'US', 500, '2023-03-08'),
(3, 3, 'US', 750, '2023-03-08'),
(4, 4, 'US', 400, '2023-03-08'),
(5, 5, 'US', 300, '2023-03-08'),
(6, 1, 'UK', 800, '2023-03-08'),
(7, 2, 'UK', 400, '2023-03-08'),
(8, 3, 'UK', 600, '2023-03-08'),
(9, 4, 'UK', 300, '2023-03-08'),
(10, 5, 'UK', 250, '2023-03-08'),
(11, 6, 'US', 900, '2023-03-08'),
(12, 7, 'US', 600, '2023-03-08'),
(13, 8, 'US', 550, '2023-03-08'),
(14, 9, 'US', 450, '2023-03-08'),
(15, 10, 'US', 350, '2023-03-08');","SELECT p.product_name, SUM(s.quantity) AS total_sales
FROM products p
JOIN sales s ON p.product_id = s.product_id
WHERE s.country = 'US'
GROUP BY p.product_name
ORDER BY total_sales DESC
LIMIT 5;","This query first joins the 'products' and 'sales' tables on the 'product_id' field. Then, it filters the results to only include sales from the 'US'. It then groups the results by product name and calculates the sum of the 'quantity' sold for each product. Finally, it orders the results by total sales in descending order and limits the output to the top 5 products."
433,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What percentage of users in each region have opted out of data collection,"CREATE TABLE users (user_id INT PRIMARY KEY, username VARCHAR(255), email VARCHAR(255), region VARCHAR(255), opt_out_data_collection BOOLEAN);
INSERT INTO users (user_id, username, email, region, opt_out_data_collection) VALUES
(1, 'john.doe', 'john.doe@emailworld.com', 'North America', TRUE),
(2, 'jane.smith', 'jane.smith@emailworld.com', 'Europe', FALSE),
(3, 'kim.lee', 'kim.lee@emailworld.com', 'Asia', TRUE),
(4, 'david.lee', 'david.lee@emailworld.com', 'Asia', FALSE),
(5, 'maria.rodriguez', 'maria.rodriguez@emailworld.com', 'South America', TRUE),
(6, 'christopher.williams', 'christopher.williams@emailworld.com', 'North America', FALSE),
(7, 'sophie.martin', 'sophie.martin@emailworld.com', 'Europe', TRUE),
(8, 'aiden.zhang', 'aiden.zhang@emailworld.com', 'Asia', FALSE),
(9, 'isabella.garcia', 'isabella.garcia@emailworld.com', 'South America', TRUE),
(10, 'liam.brown', 'liam.brown@emailworld.com', 'North America', FALSE);","SELECT region, COUNT(CASE WHEN opt_out_data_collection = TRUE THEN 1 END) AS opt_out_count, COUNT(*) AS total_users, (COUNT(CASE WHEN opt_out_data_collection = TRUE THEN 1 END) * 100.0) / COUNT(*) AS opt_out_percentage
FROM users
GROUP BY region;","This query first calculates the number of users who have opted out of data collection in each region. It then calculates the total number of users in each region. Finally, it calculates the percentage of users in each region who have opted out of data collection."
434,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the top 5 selling products in the United States this month, and which product category are they in?","CREATE TABLE product_sales (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, product_category VARCHAR(255) NOT NULL, sales_amount DECIMAL(10,2) NOT NULL, sale_date DATE NOT NULL); CREATE TABLE product_categories (product_category_id INT PRIMARY KEY, product_category_name VARCHAR(255) NOT NULL); INSERT INTO product_sales (product_id, product_name, product_category, sales_amount, sale_date) VALUES (1, 'iPhone 14', 'Electronics', 1000000.00, '2023-10-26'), (2, 'MacBook Pro', 'Electronics', 750000.00, '2023-10-26'), (3, 'AirPods Pro', 'Electronics', 500000.00, '2023-10-26'), (4, 'Nike Air Force 1', 'Apparel', 250000.00, '2023-10-26'), (5, 'Levi''s 501 Jeans', 'Apparel', 200000.00, '2023-10-26'); INSERT INTO product_categories (product_category_id, product_category_name) VALUES (1, 'Electronics'), (2, 'Apparel');","SELECT product_name, product_category FROM product_sales INNER JOIN product_categories ON product_sales.product_category = product_categories.product_category_name WHERE sale_date BETWEEN '2023-10-01' AND '2023-10-31' AND product_sales.country = 'United States' ORDER BY sales_amount DESC LIMIT 5;","This SQL query retrieves the top 5 selling products in the United States this month, along with their product categories.

1. The query starts by selecting the `product_name` and `product_category` columns from the `product_sales` table.
2. It then joins the `product_sales` table with the `product_categories` table on the `product_category` column.
3. The `WHERE` clause filters the results to only include sales that occurred in the United States between October 1st and October 31st, 2023.
4. The `ORDER BY` clause sorts the results by `sales_amount` in descending order.
5. Finally, the `LIMIT` clause limits the results to the top 5 products."
435,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the symptoms of patients in the United States diagnosed with COVID-19?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), age INT, country VARCHAR(255), diagnosis VARCHAR(255), symptoms TEXT);",SELECT symptoms FROM patients WHERE country = 'United States' AND diagnosis = 'COVID-19';,This query selects the symptoms from the patients table for patients in the United States who have been diagnosed with COVID-19.
436,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many patients in France have been prescribed the drug Atorvastatin?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), age INT, country VARCHAR(255), diagnosis VARCHAR(255), medications TEXT);",SELECT COUNT(*) FROM patients WHERE country = 'France' AND medications LIKE '%Atorvastatin%';,This query counts the number of patients in France who have been prescribed the drug Atorvastatin by checking if 'Atorvastatin' is present in the medications field.
437,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","For patients in the United Kingdom diagnosed with diabetes, what is the average blood sugar level?","CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), age INT, country VARCHAR(255), diagnosis VARCHAR(255), blood_sugar_level FLOAT);",SELECT AVG(blood_sugar_level) FROM patients WHERE country = 'United Kingdom' AND diagnosis = 'diabetes';,This query calculates the average blood sugar level for patients in the United Kingdom who have been diagnosed with diabetes.
438,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which patients in Germany have a history of heart disease and are currently taking aspirin?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), age INT, country VARCHAR(255), diagnosis VARCHAR(255), medications TEXT);CREATE TABLE medical_history (patient_id INT, condition VARCHAR(255), PRIMARY KEY (patient_id, condition), FOREIGN KEY (patient_id) REFERENCES patients(patient_id));",SELECT p.name FROM patients p JOIN medical_history mh ON p.patient_id = mh.patient_id WHERE p.country = 'Germany' AND mh.condition = 'heart disease' AND p.medications LIKE '%aspirin%';,This query joins the patients and medical_history tables to identify patients in Germany with a history of heart disease who are currently taking aspirin. It selects the names of these patients.
439,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the side effects of the drug Tamoxifen?,"CREATE TABLE drugs (drug_name VARCHAR(255) PRIMARY KEY, side_effects TEXT);",SELECT side_effects FROM drugs WHERE drug_name = 'Tamoxifen';,This query selects the side effects of the drug Tamoxifen from the drugs table.
440,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which products have been discontinued in the past six months?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), discontinued BOOLEAN, discontinued_date DATE);","SELECT product_name FROM products WHERE discontinued = TRUE AND discontinued_date >= DATE('now', '-6 months');",This query selects the product names from the 'products' table where the 'discontinued' column is TRUE and the 'discontinued_date' is within the last six months.
441,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 selling products in the Electronics category this month?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), units_sold INT); CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, order_date DATE, quantity INT, FOREIGN KEY (product_id) REFERENCES products(product_id));","SELECT product_name, SUM(quantity) AS total_units_sold FROM products p JOIN orders o ON p.product_id = o.product_id WHERE p.category = 'Electronics' AND o.order_date >= DATE('now', 'start of month') GROUP BY product_name ORDER BY total_units_sold DESC LIMIT 5;","This query joins the 'products' and 'orders' tables, filters for products in the 'Electronics' category and orders within the current month, groups the results by product name, sums the total units sold for each product, orders the results by total units sold in descending order, and limits the output to the top 5 products."
442,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which customers have placed orders in the past year but not in the past month?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255)); CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));","SELECT c.customer_name FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-1 year') AND o.order_date < DATE('now', '-1 month') OR o.order_date IS NULL;","This query performs a left join between the 'customers' and 'orders' tables, filters for orders within the past year but not within the past month, and selects the customer names from the resulting dataset."
443,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average order value for each customer in the United States?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), country VARCHAR(255)); CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_total DECIMAL(10,2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));","SELECT c.customer_name, AVG(o.order_total) AS average_order_value FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.country = 'United States' GROUP BY c.customer_name;","This query joins the 'customers' and 'orders' tables, filters for customers in the United States, groups the results by customer name, calculates the average order value for each customer, and selects the customer names and average order values."
444,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a view that shows the total number of orders and the total revenue for each product category.,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255)); CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, order_total DECIMAL(10,2), FOREIGN KEY (product_id) REFERENCES products(product_id));","CREATE VIEW product_summary AS SELECT p.category, COUNT(o.order_id) AS total_orders, SUM(o.order_total) AS total_revenue FROM products p JOIN orders o ON p.product_id = o.product_id GROUP BY p.category;","This query creates a view named 'product_summary' that calculates the total number of orders and the total revenue for each product category by joining the 'products' and 'orders' tables, grouping the results by category, counting the number of orders, and summing the order totals."
445,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Find all patients who have been prescribed both metformin and insulin in the last year, and have a diagnosis of type 2 diabetes.","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255));
CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_code VARCHAR(255), diagnosis_date DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE medications (medication_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_name VARCHAR(255), dosage VARCHAR(255), start_date DATE, end_date DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address, city, state, zip_code, phone_number, email) VALUES (1, 'John', 'Doe', '1980-01-01', '123 Main St', 'Anytown', 'CA', 91234, '555-123-4567', 'john.doe@email.com'), (2, 'Jane', 'Smith', '1985-02-02', '456 Oak Ave', 'Anytown', 'CA', 91234, '555-234-5678', 'jane.smith@email.com'), (3, 'Robert', 'Jones', '1990-03-03', '789 Elm St', 'Anytown', 'CA', 91234, '555-345-6789', 'robert.jones@email.com');
INSERT INTO diagnoses (diagnosis_id, patient_id, diagnosis_code, diagnosis_date) VALUES (1, 1, 'E11.9', '2022-01-01'), (2, 2, 'E11.9', '2022-02-02'), (3, 3, 'E10.9', '2022-03-03');
INSERT INTO medications (medication_id, patient_id, medication_name, dosage, start_date, end_date) VALUES (1, 1, 'Metformin', '500mg', '2022-04-04', NULL), (2, 2, 'Insulin', '10 units', '2022-05-05', NULL), (3, 3, 'Metformin', '500mg', '2022-06-06', NULL), (4, 1, 'Insulin', '10 units', '2022-07-07', NULL);","SELECT p.patient_id, p.first_name, p.last_name FROM patients p JOIN diagnoses d ON p.patient_id = d.patient_id JOIN medications m1 ON p.patient_id = m1.patient_id JOIN medications m2 ON p.patient_id = m2.patient_id WHERE d.diagnosis_code = 'E11.9' AND m1.medication_name = 'Metformin' AND m2.medication_name = 'Insulin' AND m1.start_date >= DATE('now', '-1 year') AND m2.start_date >= DATE('now', '-1 year');","This query first joins the `patients` table to the `diagnoses` table on the `patient_id` field to get all patients with a diagnosis of type 2 diabetes. Then, it joins the `patients` table to the `medications` table twice, once for each medication, on the `patient_id` field. This allows us to filter for patients who have been prescribed both metformin and insulin. Finally, the query filters for patients who have been prescribed both medications in the last year."
446,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Find all patients who have been diagnosed with cancer in the last 5 years, and have had a surgery in the last year.","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255));
CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_code VARCHAR(255), diagnosis_date DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE procedures (procedure_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), procedure_code VARCHAR(255), procedure_date DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address, city, state, zip_code, phone_number, email) VALUES (1, 'John', 'Doe', '1980-01-01', '123 Main St', 'Anytown', 'CA', 91234, '555-123-4567', 'john.doe@email.com'), (2, 'Jane', 'Smith', '1985-02-02', '456 Oak Ave', 'Anytown', 'CA', 91234, '555-234-5678', 'jane.smith@email.com'), (3, 'Robert', 'Jones', '1990-03-03', '789 Elm St', 'Anytown', 'CA', 91234, '555-345-6789', 'robert.jones@email.com');
INSERT INTO diagnoses (diagnosis_id, patient_id, diagnosis_code, diagnosis_date) VALUES (1, 1, 'C15.9', '2022-01-01'), (2, 2, 'C18.9', '2022-02-02'), (3, 3, 'C00.9', '2022-03-03');
INSERT INTO procedures (procedure_id, patient_id, procedure_code, procedure_date) VALUES (1, 1, '19.39', '2022-04-04'), (2, 2, '19.41', '2022-05-05'), (3, 3, '19.39', '2022-06-06');","SELECT p.patient_id, p.first_name, p.last_name FROM patients p JOIN diagnoses d ON p.patient_id = d.patient_id JOIN procedures pr ON p.patient_id = pr.patient_id WHERE d.diagnosis_code LIKE 'C%' AND pr.procedure_date >= DATE('now', '-1 year') AND d.diagnosis_date >= DATE('now', '-5 years');","This query first joins the `patients` table to the `diagnoses` table on the `patient_id` field to get all patients with a diagnosis of cancer. Then, it joins the `patients` table to the `procedures` table on the `patient_id` field to get all patients who have had a surgery. Finally, the query filters for patients who have been diagnosed with cancer in the last 5 years and have had a surgery in the last year."
447,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",What are the top 5 most prescribed medications for patients with diabetes in the United States?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, diagnosis VARCHAR(255));
CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), dosage VARCHAR(255), side_effects VARCHAR(255), manufacturer VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_id INT REFERENCES medications(medication_id), date_prescribed DATE, physician_id INT);","SELECT m.name, COUNT(*) AS num_prescriptions
FROM medications m
JOIN prescriptions p ON m.medication_id = p.medication_id
JOIN patients pa ON p.patient_id = pa.patient_id
WHERE pa.diagnosis = 'Diabetes'
GROUP BY m.name
ORDER BY num_prescriptions DESC
LIMIT 5;","This SQL query retrieves the top 5 most prescribed medications for patients with diabetes in the United States. 

1. It starts by selecting the medication name (m.name) and counting the number of prescriptions for each medication (COUNT(*) AS num_prescriptions).
2. It then joins the medications table (m) with the prescriptions table (p) on the medication_id column. This links each medication to the prescriptions that include it.
3. It further joins the prescriptions table (p) with the patients table (pa) on the patient_id column. This links each prescription to the patient who received it.
4. It filters the results to include only patients with a diagnosis of 'Diabetes'.
5. It groups the results by medication name to count the number of prescriptions for each medication.
6. It orders the results in descending order of the number of prescriptions (num_prescriptions).
7. Finally, it limits the results to the top 5 medications."
448,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",What are the side effects of the drug metformin?,"CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), dosage VARCHAR(255), side_effects VARCHAR(255), manufacturer VARCHAR(255));","SELECT side_effects
FROM medications
WHERE name = 'metformin';","This SQL query retrieves the side effects of the drug metformin. 

1. It starts by selecting the side_effects column from the medications table.
2. It then filters the results to include only the medication where the name is 'metformin'.
3. It returns the side effects associated with metformin."
449,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",What is the average age of patients diagnosed with cancer in the United States?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, diagnosis VARCHAR(255));","SELECT AVG(strftime('%Y', 'now') - strftime('%Y', date_of_birth)) AS average_age
FROM patients
WHERE diagnosis = 'Cancer';","This SQL query calculates the average age of patients diagnosed with cancer in the United States. 

1. It starts by calculating the age of each patient in years using the strftime function to extract the year from the current date and the date of birth.
2. It then filters the results to include only patients with a diagnosis of 'Cancer'.
3. It calculates the average age of the filtered patients using the AVG function."
450,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Delete all records from the production_runs table where the start_date is before January 1, 2023 and the end_date is after February 1, 2023.","CREATE TABLE production_runs (
    run_id INT PRIMARY KEY,
    product_id INT,
    start_date DATE,
    end_date DATE,
    quantity INT,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

INSERT INTO production_runs (run_id, product_id, start_date, end_date, quantity)
VALUES
(1, 10, '2022-12-15', '2023-01-10', 100),
(2, 12, '2023-01-15', '2023-02-10', 150),
(3, 15, '2023-02-15', '2023-03-10', 200);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    description TEXT,
    price DECIMAL(10,2)
);

INSERT INTO products (product_id, product_name, description, price)
VALUES
(10, 'Widget A', 'A small, versatile widget.', 10.00),
(12, 'Gadget B', 'A high-tech gadget.', 25.00),
(15, 'Contraption C', 'A complex and intricate contraption.', 50.00);","DELETE FROM production_runs
WHERE start_date < '2023-01-01' AND end_date > '2023-02-01';","This SQL statement deletes all records from the production_runs table where the start_date is before January 1, 2023 and the end_date is after February 1, 2023. 

The DELETE statement specifies the table to delete from (production_runs) and then uses a WHERE clause to filter the records to be deleted. The WHERE clause specifies two conditions: start_date < '2023-01-01' and end_date > '2023-02-01'. These conditions ensure that only records with a start_date before January 1, 2023 and an end_date after February 1, 2023 are deleted."
451,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Find all parts that have been shipped to customers in the last month, and then update the 'shipped_date' field in the 'parts' table to the current date.","CREATE TABLE parts (part_id INT PRIMARY KEY, part_name VARCHAR(255), shipped_date DATE); CREATE TABLE shipments (shipment_id INT PRIMARY KEY, part_id INT REFERENCES parts(part_id), customer_id INT, shipment_date DATE); INSERT INTO parts (part_id, part_name, shipped_date) VALUES (1, 'Widget', '2023-10-26'), (2, 'Gear', '2023-10-27'), (3, 'Spring', '2023-10-28'); INSERT INTO shipments (shipment_id, part_id, customer_id, shipment_date) VALUES (1, 1, 123, '2023-10-27'), (2, 2, 456, '2023-10-28'), (3, 3, 789, '2023-10-29');","UPDATE parts SET shipped_date = CURRENT_DATE WHERE part_id IN (SELECT part_id FROM shipments WHERE shipment_date >= DATE('now', '-1 month'));","This query first selects the part IDs of all parts that have been shipped in the last month using a subquery. Then, it updates the 'shipped_date' field in the 'parts' table to the current date for all parts with those IDs."
452,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Find the average production time for each product in the 'products' table, excluding any production times that are more than two standard deviations away from the mean.","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), production_time INT); INSERT INTO products (product_id, product_name, production_time) VALUES (1, 'Widget', 60), (2, 'Gear', 45), (3, 'Spring', 30), (4, 'Bolt', 15);","SELECT product_name, AVG(production_time) AS average_production_time FROM products WHERE production_time BETWEEN (SELECT AVG(production_time) - 2 * STDDEV(production_time) FROM products) AND (SELECT AVG(production_time) + 2 * STDDEV(production_time) FROM products) GROUP BY product_name;","This query first calculates the mean and standard deviation of the production times for all products. Then, it uses a WHERE clause to exclude any production times that are more than two standard deviations away from the mean. Finally, it groups the remaining production times by product name and calculates the average production time for each product."
453,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Delete all records from the 'defective_parts' table where the defect_date is before January 1, 2023.","CREATE TABLE defective_parts (part_id INT PRIMARY KEY, defect_date DATE); INSERT INTO defective_parts (part_id, defect_date) VALUES (1, '2022-12-15'), (2, '2023-01-05'), (3, '2023-02-10'), (4, '2023-03-15');",DELETE FROM defective_parts WHERE defect_date < '2023-01-01';,"This query deletes all records from the 'defective_parts' table where the defect_date is before January 1, 2023. It uses a WHERE clause to specify the date range for deletion."
454,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Insert a new record into the 'suppliers' table with the following information: supplier_name = 'Acme Supplies', supplier_address = '123 Main St, Anytown, CA 91234', supplier_phone = '555-123-4567'.","CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), supplier_address VARCHAR(255), supplier_phone VARCHAR(255)); INSERT INTO suppliers (supplier_id, supplier_name, supplier_address, supplier_phone) VALUES (1, 'ABC Supplies', '456 Oak St, Othertown, NY 12345', '555-234-5678'), (2, 'XYZ Supplies', '789 Elm St, Sometown, FL 34567', '555-345-6789');","INSERT INTO suppliers (supplier_name, supplier_address, supplier_phone) VALUES ('Acme Supplies', '123 Main St, Anytown, CA 91234', '555-123-4567');",This query inserts a new record into the 'suppliers' table with the specified supplier information. It uses the INSERT statement and specifies the values for each column in the new record.
455,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Insert a new product record into the Products table.,"CREATE TABLE Products ( productId INT PRIMARY KEY, productName VARCHAR(255) NOT NULL, productDescription TEXT, productPrice DECIMAL(10,2) NOT NULL, productReleaseDate DATE );","INSERT INTO Products (productId, productName, productDescription, productPrice, productReleaseDate) VALUES (1001, 'Smartwatch Pro', 'The latest smartwatch with advanced fitness tracking features and a sleek design.', 349.99, '2023-10-27');","Insert a new product record into the Products table with the following values: productId = 1001, productName = 'Smartwatch Pro', productDescription = 'The latest smartwatch with advanced fitness tracking features and a sleek design.', productPrice = 349.99, productReleaseDate = '2023-10-27'."
456,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Update the product description for the product with the product ID 1001.,"CREATE TABLE Products ( productId INT PRIMARY KEY, productName VARCHAR(255) NOT NULL, productDescription TEXT, productPrice DECIMAL(10,2) NOT NULL, productReleaseDate DATE );","UPDATE Products SET productDescription = 'The latest smartwatch with even more advanced fitness tracking features and a new, even sleeker design.' WHERE productId = 1001;","Update the product description for the product with the product ID 1001 to 'The latest smartwatch with even more advanced fitness tracking features and a new, even sleeker design'."
457,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Delete the product record with the product ID 1001.,"CREATE TABLE Products ( productId INT PRIMARY KEY, productName VARCHAR(255) NOT NULL, productDescription TEXT, productPrice DECIMAL(10,2) NOT NULL, productReleaseDate DATE );",DELETE FROM Products WHERE productId = 1001;,Delete the product record with the product ID 1001.
458,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Retrieve the first name, last name, and email address of all customers who have placed an order in the last month.","CREATE TABLE Customers ( customerId INT PRIMARY KEY, firstName VARCHAR(255) NOT NULL, lastName VARCHAR(255) NOT NULL, emailAddress VARCHAR(255) UNIQUE NOT NULL, phoneNumber VARCHAR(20) );
CREATE TABLE Orders ( orderId INT PRIMARY KEY, customerId INT REFERENCES Customers(customerId), orderDate DATE NOT NULL );","SELECT c.firstName, c.lastName, c.emailAddress FROM Customers c JOIN Orders o ON c.customerId = o.customerId WHERE o.orderDate >= DATE('now', '-1 month');","This query joins the Customers and Orders tables on the customerId column. It then filters the results to only include orders placed in the last month (using the DATE('now', '-1 month') function) and selects the first name, last name, and email address of the corresponding customers."
459,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the top 5 products with the highest average rating based on customer reviews.,"CREATE TABLE Products ( productId INT PRIMARY KEY, productName VARCHAR(255) NOT NULL, productDescription TEXT, productPrice DECIMAL(10,2) NOT NULL, productReleaseDate DATE );
CREATE TABLE Reviews ( reviewId INT PRIMARY KEY, productId INT REFERENCES Products(productId), rating INT NOT NULL, reviewText TEXT );","SELECT p.productName, AVG(r.rating) AS averageRating FROM Products p JOIN Reviews r ON p.productId = r.productId GROUP BY p.productName ORDER BY averageRating DESC LIMIT 5;","This query joins the Products and Reviews tables on the productId column. It then calculates the average rating for each product using the AVG() function and groups the results by productName. Finally, it orders the results in descending order of average rating and limits the output to the top 5 products."
460,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",What is the average delay for flights arriving from Asia to Europe in the current month?,"CREATE TABLE flights (flight_id INT PRIMARY KEY, origin VARCHAR(255), destination VARCHAR(255), arrival_time DATETIME, delay INT);","SELECT AVG(delay) FROM flights WHERE origin LIKE '%Asia%' AND destination LIKE '%Europe%' AND arrival_time >= DATE('now', 'start of month') AND arrival_time < DATE('now', 'start of month', '+1 month');",This query calculates the average delay for flights arriving from Asia to Europe in the current month. It filters the 'flights' table for flights originating in Asia and arriving in Europe. It then extracts the delay for these flights and calculates the average delay.
461,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Which cities have the highest number of cancelled flights in the past quarter?,"CREATE TABLE flights (flight_id INT PRIMARY KEY, origin VARCHAR(255), destination VARCHAR(255), status VARCHAR(255), cancellation_reason VARCHAR(255));","SELECT origin, COUNT(*) AS num_cancelled_flights FROM flights WHERE status = 'Cancelled' AND cancellation_reason <> 'Weather' AND cancellation_reason <> 'Technical' AND cancellation_time >= DATE('now', '-3 months') AND cancellation_time < DATE('now') GROUP BY origin ORDER BY num_cancelled_flights DESC LIMIT 10;","This query identifies the cities with the highest number of cancelled flights in the past quarter. It filters the 'flights' table for cancelled flights, excluding cancellations due to weather or technical issues. It then groups the flights by origin city and counts the number of cancelled flights for each city. Finally, it orders the results by the number of cancelled flights and returns the top 10 cities."
462,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",How many unique customers have used our services in the last year?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), first_purchase_date DATE);","SELECT COUNT(DISTINCT customer_id) FROM customers WHERE first_purchase_date >= DATE('now', '-1 year');",This query determines the number of unique customers who have used the services in the last year. It counts the distinct number of customer IDs in the 'customers' table where the 'first_purchase_date' falls within the last year.
463,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",What is the total revenue generated from freight shipments originating in North America?,"CREATE TABLE shipments (shipment_id INT PRIMARY KEY, origin VARCHAR(255), destination VARCHAR(255), cargo_type VARCHAR(255), revenue DECIMAL(10,2));",SELECT SUM(revenue) FROM shipments WHERE origin LIKE '%North America%' AND cargo_type = 'Freight';,This query calculates the total revenue generated from freight shipments originating in North America. It filters the 'shipments' table for shipments with origin in North America and cargo type as 'Freight'. It then sums the 'revenue' column for these shipments to obtain the total revenue.
464,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",What are the top 5 most popular products ordered by customers in the last month?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, product_id INT, order_date DATE); CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255));","SELECT p.name, COUNT(*) AS num_orders FROM products p JOIN orders o ON p.product_id = o.product_id WHERE o.order_date >= DATE('now', 'start of month') AND o.order_date < DATE('now', 'start of month', '+1 month') GROUP BY p.name ORDER BY num_orders DESC LIMIT 5;","This query identifies the top 5 most popular products ordered by customers in the last month. It joins the 'products' and 'orders' tables based on the 'product_id'. It then filters the orders for those placed in the last month and groups them by product name. Finally, it counts the number of orders for each product and orders the results by the number of orders in descending order, returning the top 5 products."
465,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a view that shows the average age of vehicles in each fleet, along with the total number of vehicles in that fleet.","CREATE TABLE FLEET (fleet_id INT PRIMARY KEY, fleet_name VARCHAR(50), city VARCHAR(50), country VARCHAR(50));
CREATE TABLE VEHICLE (vehicle_id INT PRIMARY KEY, fleet_id INT REFERENCES FLEET(fleet_id), make VARCHAR(50), model VARCHAR(50), year INT, purchase_date DATE);","CREATE VIEW average_vehicle_age AS
SELECT f.fleet_name, AVG(v.year) AS average_age, COUNT(*) AS total_vehicles
FROM FLEET f
JOIN VEHICLE v ON f.fleet_id = v.fleet_id
GROUP BY f.fleet_name;","This SQL query creates a view called average_vehicle_age. The view selects the fleet name, the average age of vehicles in that fleet, and the total number of vehicles in that fleet. The query joins the FLEET and VEHICLE tables on the fleet_id column. It then groups the results by fleet name and calculates the average age and total number of vehicles for each fleet."
466,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table to store data about customer demographics, including age, gender, and income.","CREATE TABLE CUSTOMER (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(20), address VARCHAR(100), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50), zip_code VARCHAR(10));","CREATE TABLE CUSTOMER_DEMOGRAPHICS (customer_id INT PRIMARY KEY REFERENCES CUSTOMER(customer_id), age INT, gender VARCHAR(10), income DECIMAL(10,2));","This SQL query creates a table called CUSTOMER_DEMOGRAPHICS. The table includes columns for customer_id, age, gender, and income. The customer_id column is a foreign key that references the customer_id column in the CUSTOMER table. This ensures that each customer in the CUSTOMER_DEMOGRAPHICS table is associated with a customer in the CUSTOMER table."
467,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a view that shows the top 10 customers with the highest total spending on shipping.,"CREATE TABLE CUSTOMER (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(20), address VARCHAR(100), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50), zip_code VARCHAR(10));
CREATE TABLE ORDER (order_id INT PRIMARY KEY, customer_id INT REFERENCES CUSTOMER(customer_id), order_date DATE, shipping_cost DECIMAL(10,2));","CREATE VIEW top_10_customers_by_shipping_cost AS
SELECT c.customer_id, c.name, SUM(o.shipping_cost) AS total_shipping_cost
FROM CUSTOMER c
JOIN ORDER o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name
ORDER BY total_shipping_cost DESC
LIMIT 10;","This SQL query creates a view called top_10_customers_by_shipping_cost. The view selects the customer_id, name, and total shipping cost for each customer. The query joins the CUSTOMER and ORDER tables on the customer_id column. It then groups the results by customer_id and name and calculates the total shipping cost for each customer. Finally, it orders the results by total shipping cost in descending order and limits the results to the top 10 customers."
468,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table to store data about supply chain partners, including their name, location, and the type of goods they supply.",,"CREATE TABLE SUPPLY_CHAIN_PARTNER (partner_id INT PRIMARY KEY, name VARCHAR(50), location VARCHAR(100), goods_supplied VARCHAR(50));","This SQL query creates a table called SUPPLY_CHAIN_PARTNER. The table includes columns for partner_id, name, location, and goods_supplied. The partner_id column is the primary key for the table. The name column stores the name of the supply chain partner. The location column stores the location of the supply chain partner. The goods_supplied column stores the type of goods that the supply chain partner supplies."
469,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a view that shows the total number of orders placed by each customer in the past year.,"CREATE TABLE CUSTOMER (customer_id INT PRIMARY KEY, name VARCHAR(50), email VARCHAR(50), phone_number VARCHAR(20), address VARCHAR(100), city VARCHAR(50), state VARCHAR(50), country VARCHAR(50), zip_code VARCHAR(10));
CREATE TABLE ORDER (order_id INT PRIMARY KEY, customer_id INT REFERENCES CUSTOMER(customer_id), order_date DATE, shipping_cost DECIMAL(10,2));","CREATE VIEW orders_by_customer_in_past_year AS
SELECT c.customer_id, c.name, COUNT(*) AS total_orders
FROM CUSTOMER c
JOIN ORDER o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-1 year')
GROUP BY c.customer_id, c.name;","This SQL query creates a view called orders_by_customer_in_past_year. The view selects the customer_id, name, and total number of orders for each customer in the past year. The query joins the CUSTOMER and ORDER tables on the customer_id column. It then filters the results to only include orders placed in the past year and groups the results by customer_id and name. Finally, it calculates the total number of orders for each customer."
470,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average consumer sentiment score by country in the last quarter?,"CREATE TABLE consumer_sentiment (country VARCHAR(255), sentiment_score INT, date DATE);
INSERT INTO consumer_sentiment (country, sentiment_score, date) VALUES ('United States', 75, '2023-03-01'), ('United States', 80, '2023-03-08'), ('United States', 85, '2023-03-15'), ('United States', 90, '2023-03-22'), ('United States', 88, '2023-03-29'), ('China', 65, '2023-03-01'), ('China', 70, '2023-03-08'), ('China', 75, '2023-03-15'), ('China', 80, '2023-03-22'), ('China', 78, '2023-03-29'), ('India', 85, '2023-03-01'), ('India', 90, '2023-03-08'), ('India', 95, '2023-03-15'), ('India', 100, '2023-03-22'), ('India', 98, '2023-03-29');","SELECT country, AVG(sentiment_score) AS average_sentiment FROM consumer_sentiment WHERE date BETWEEN '2023-03-01' AND '2023-03-29' GROUP BY country;","This query calculates the average consumer sentiment score for each country in the last quarter (March 2023). It first filters the `consumer_sentiment` table to include data only from March 1st to March 29th, 2023, using the `WHERE` clause. Then, it groups the data by country using the `GROUP BY` clause and calculates the average sentiment score for each country using the `AVG()` function. Finally, it selects the country and the average sentiment score and displays them in the result set."
471,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","What are the top 5 most innovative companies in the world, based on patent filings in the last year?","CREATE TABLE company_patents (company VARCHAR(255), patent_count INT, date DATE);
INSERT INTO company_patents (company, patent_count, date) VALUES ('Apple', 2500, '2022-04-01'), ('Samsung', 2200, '2022-04-01'), ('Huawei', 1800, '2022-04-01'), ('Microsoft', 1500, '2022-04-01'), ('Alphabet', 1200, '2022-04-01'), ('Apple', 2800, '2023-04-01'), ('Samsung', 2500, '2023-04-01'), ('Huawei', 2000, '2023-04-01'), ('Microsoft', 1700, '2023-04-01'), ('Alphabet', 1400, '2023-04-01');","SELECT company, patent_count FROM company_patents WHERE date BETWEEN '2022-04-01' AND '2023-04-01' ORDER BY patent_count DESC LIMIT 5;","This query identifies the top 5 most innovative companies in the world based on patent filings in the last year (April 2022 to April 2023). It first filters the `company_patents` table to include data only from the specified date range using the `WHERE` clause. Then, it sorts the data in descending order of patent count using the `ORDER BY` clause and limits the result set to the top 5 companies using the `LIMIT` clause. Finally, it selects the company name and patent count and displays them in the result set."
472,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What are the top 3 trending topics on social media related to data privacy in the last month?,"CREATE TABLE social_media_trends (topic VARCHAR(255), sentiment_score INT, date DATE);
INSERT INTO social_media_trends (topic, sentiment_score, date) VALUES ('data privacy', 75, '2023-03-01'), ('data security', 80, '2023-03-01'), ('data breach', 85, '2023-03-01'), ('online privacy', 90, '2023-03-01'), ('data protection', 88, '2023-03-01'), ('data privacy', 65, '2023-04-01'), ('data security', 70, '2023-04-01'), ('data breach', 75, '2023-04-01'), ('online privacy', 80, '2023-04-01'), ('data protection', 78, '2023-04-01');","SELECT topic, sentiment_score FROM social_media_trends WHERE date BETWEEN '2023-03-01' AND '2023-04-01' AND topic LIKE '%data privacy%' ORDER BY sentiment_score DESC LIMIT 3;","This query identifies the top 3 trending topics on social media related to data privacy in the last month (March and April 2023). It first filters the `social_media_trends` table to include data only from the specified date range and topics containing 'data privacy' using the `WHERE` clause. Then, it sorts the data in descending order of sentiment score using the `ORDER BY` clause and limits the result set to the top 3 topics using the `LIMIT` clause. Finally, it selects the topic and sentiment score and displays them in the result set."
473,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What is the market share of the top 5 e-commerce platforms in the United States?,"CREATE TABLE e_commerce_platforms (platform VARCHAR(255), market_share FLOAT, date DATE);
INSERT INTO e_commerce_platforms (platform, market_share, date) VALUES ('Amazon', 0.45, '2023-04-01'), ('eBay', 0.15, '2023-04-01'), ('Walmart', 0.10, '2023-04-01'), ('Target', 0.08, '2023-04-01'), ('Etsy', 0.05, '2023-04-01');","SELECT platform, market_share FROM e_commerce_platforms WHERE date = '2023-04-01' ORDER BY market_share DESC LIMIT 5;","This query determines the market share of the top 5 e-commerce platforms in the United States as of April 1, 2023. It filters the `e_commerce_platforms` table to include data only for the specified date using the `WHERE` clause. Then, it sorts the data in descending order of market share using the `ORDER BY` clause and limits the result set to the top 5 platforms using the `LIMIT` clause. Finally, it selects the platform name and market share and displays them in the result set."
474,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Identify the top 10 most viewed products in the 'Electronics' category in the last quarter, excluding products from the 'Apple' brand.","CREATE TABLE product_views (product_id INT, category VARCHAR(255), views INT, date DATE); INSERT INTO product_views VALUES (1, 'Electronics', 1000, '2023-03-01'), (2, 'Clothing', 500, '2023-03-01'), (3, 'Electronics', 800, '2023-03-01'), (4, 'Home Appliances', 400, '2023-03-01'), (5, 'Electronics', 900, '2023-03-01'), (6, 'Electronics', 700, '2023-03-01'), (7, 'Beauty', 300, '2023-03-01'), (8, 'Electronics', 600, '2023-03-01'), (9, 'Electronics', 500, '2023-03-01'), (10, 'Electronics', 400, '2023-03-01'), (11, 'Electronics', 300, '2023-03-01'), (12, 'Electronics', 200, '2023-03-01'), (13, 'Electronics', 100, '2023-03-01'), (14, 'Electronics', 900, '2023-04-01'), (15, 'Clothing', 600, '2023-04-01'), (16, 'Electronics', 850, '2023-04-01'), (17, 'Home Appliances', 500, '2023-04-01'), (18, 'Electronics', 750, '2023-04-01'), (19, 'Electronics', 650, '2023-04-01'), (20, 'Beauty', 400, '2023-04-01'), (21, 'Electronics', 550, '2023-04-01'), (22, 'Electronics', 450, '2023-04-01'), (23, 'Electronics', 350, '2023-04-01'), (24, 'Electronics', 250, '2023-04-01'), (25, 'Electronics', 150, '2023-04-01'), (26, 'Electronics', 1000, '2023-05-01'), (27, 'Clothing', 700, '2023-05-01'), (28, 'Electronics', 950, '2023-05-01'), (29, 'Home Appliances', 600, '2023-05-01'), (30, 'Electronics', 850, '2023-05-01'), (31, 'Electronics', 750, '2023-05-01'), (32, 'Beauty', 500, '2023-05-01'), (33, 'Electronics', 650, '2023-05-01'), (34, 'Electronics', 550, '2023-05-01'), (35, 'Electronics', 450, '2023-05-01'), (36, 'Electronics', 350, '2023-05-01'), (37, 'Electronics', 250, '2023-05-01');
CREATE TABLE product_brand (product_id INT, brand VARCHAR(255));
INSERT INTO product_brand VALUES (1, 'Samsung'), (2, 'Nike'), (3, 'LG'), (4, 'Bosch'), (5, 'Sony'), (6, 'Xiaomi'), (7, 'L’Oreal'), (8, 'Apple'), (9, 'Huawei'), (10, 'OnePlus'), (11, 'Dell'), (12, 'Lenovo'), (13, 'HP'), (14, 'Samsung'), (15, 'Zara'), (16, 'LG'), (17, 'Whirlpool'), (18, 'Sony'), (19, 'Xiaomi'), (20, 'Maybelline'), (21, 'Apple'), (22, 'Huawei'), (23, 'OnePlus'), (24, 'Dell'), (25, 'Lenovo'), (26, 'Samsung'), (27, 'H&M'), (28, 'LG'), (29, 'Electrolux'), (30, 'Sony'), (31, 'Xiaomi'), (32, 'NARS'), (33, 'Apple'), (34, 'Huawei'), (35, 'OnePlus'), (36, 'Dell'), (37, 'Lenovo');","SELECT product_id, product_views.category, views FROM product_views JOIN product_brand ON product_views.product_id = product_brand.product_id WHERE product_views.category = 'Electronics' AND product_views.date BETWEEN '2023-03-01' AND '2023-05-31' AND product_brand.brand != 'Apple' EXCEPT SELECT product_id, product_views.category, views FROM product_views JOIN product_brand ON product_views.product_id = product_brand.product_id WHERE product_views.category = 'Electronics' AND product_views.date BETWEEN '2022-12-01' AND '2023-02-28' AND product_brand.brand != 'Apple' ORDER BY views DESC LIMIT 10;","1. Join the 'product_views' and 'product_brand' tables on the 'product_id' field to retrieve product views and brand information.
2. Filter the results to include only records where the category is 'Electronics' and the date is within the last quarter (between March 1st and May 31st, 2023).
3. Exclude products from the 'Apple' brand by filtering based on the 'brand' field in the 'product_brand' table.
4. Use the EXCEPT operator to remove products that were among the top 10 viewed in the previous quarter (between December 1st, 2022, and February 28th, 2023).
5. Sort the results in descending order of 'views' to identify the top 10 most viewed products.
6. Limit the output to the top 10 records."
475,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",How many trucks are currently in the Los Angeles depot?,"CREATE TABLE trucks (truck_id INT PRIMARY KEY, model VARCHAR(50), year INT, depot VARCHAR(50));
INSERT INTO trucks (truck_id, model, year, depot) VALUES
(1, 'Volvo VNL 760', 2020, 'Los Angeles'),
(2, 'Peterbilt 579', 2021, 'Chicago'),
(3, 'Freightliner Cascadia', 2019, 'Dallas'),
(4, 'International LT', 2022, 'Los Angeles'),
(5, 'Kenworth T680', 2018, 'New York');",SELECT COUNT(*) FROM trucks WHERE depot = 'Los Angeles';,This SQL query counts the number of rows in the 'trucks' table where the 'depot' column is equal to 'Los Angeles'.
476,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Update the model of truck with ID 3 to 'Freightliner Cascadia 2023'.,"CREATE TABLE trucks (truck_id INT PRIMARY KEY, model VARCHAR(50), year INT, depot VARCHAR(50));
INSERT INTO trucks (truck_id, model, year, depot) VALUES
(1, 'Volvo VNL 760', 2020, 'Los Angeles'),
(2, 'Peterbilt 579', 2021, 'Chicago'),
(3, 'Freightliner Cascadia', 2019, 'Dallas'),
(4, 'International LT', 2022, 'Los Angeles'),
(5, 'Kenworth T680', 2018, 'New York');",UPDATE trucks SET model = 'Freightliner Cascadia 2023' WHERE truck_id = 3;,This SQL query updates the 'model' column of the row in the 'trucks' table where the 'truck_id' is equal to 3 to 'Freightliner Cascadia 2023'.
477,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Insert a new record into the 'trucks' table with the following details: truck_id = 6, model = 'Volvo VNL 780', year = 2023, depot = 'Atlanta'.","CREATE TABLE trucks (truck_id INT PRIMARY KEY, model VARCHAR(50), year INT, depot VARCHAR(50));
INSERT INTO trucks (truck_id, model, year, depot) VALUES
(1, 'Volvo VNL 760', 2020, 'Los Angeles'),
(2, 'Peterbilt 579', 2021, 'Chicago'),
(3, 'Freightliner Cascadia', 2019, 'Dallas'),
(4, 'International LT', 2022, 'Los Angeles'),
(5, 'Kenworth T680', 2018, 'New York');","INSERT INTO trucks (truck_id, model, year, depot) VALUES (6, 'Volvo VNL 780', 2023, 'Atlanta');","This SQL query inserts a new row into the 'trucks' table with the specified values for 'truck_id', 'model', 'year', and 'depot'."
478,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Delete the record from the 'trucks' table where the truck_id is 2.,"CREATE TABLE trucks (truck_id INT PRIMARY KEY, model VARCHAR(50), year INT, depot VARCHAR(50));
INSERT INTO trucks (truck_id, model, year, depot) VALUES
(1, 'Volvo VNL 760', 2020, 'Los Angeles'),
(2, 'Peterbilt 579', 2021, 'Chicago'),
(3, 'Freightliner Cascadia', 2019, 'Dallas'),
(4, 'International LT', 2022, 'Los Angeles'),
(5, 'Kenworth T680', 2018, 'New York');",DELETE FROM trucks WHERE truck_id = 2;,This SQL query deletes the row from the 'trucks' table where the 'truck_id' is equal to 2.
479,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the models of trucks manufactured in 2022?,"CREATE TABLE trucks (truck_id INT PRIMARY KEY, model VARCHAR(50), year INT, depot VARCHAR(50));
INSERT INTO trucks (truck_id, model, year, depot) VALUES
(1, 'Volvo VNL 760', 2020, 'Los Angeles'),
(2, 'Peterbilt 579', 2021, 'Chicago'),
(3, 'Freightliner Cascadia', 2019, 'Dallas'),
(4, 'International LT', 2022, 'Los Angeles'),
(5, 'Kenworth T680', 2018, 'New York');",SELECT model FROM trucks WHERE year = 2022;,This SQL query selects the 'model' column from the 'trucks' table where the 'year' column is equal to 2022.
480,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Generate a report showing the top 5 customers with the highest total purchase amount in the last quarter, along with their average purchase amount and the total number of purchases made.","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(255) NOT NULL, Email VARCHAR(255) UNIQUE, PhoneNumber VARCHAR(20), Address VARCHAR(255));
CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT REFERENCES Customers(CustomerID), OrderDate DATE NOT NULL, TotalAmount DECIMAL(10,2) NOT NULL);
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, Price DECIMAL(10,2) NOT NULL);
CREATE TABLE OrderItems (OrderID INT REFERENCES Orders(OrderID), ProductID INT REFERENCES Products(ProductID), Quantity INT NOT NULL, Price DECIMAL(10,2) NOT NULL);
INSERT INTO Customers (CustomerID, CustomerName, Email, PhoneNumber, Address) VALUES
(1, 'John Smith', 'john.smith@email.com', '555-123-4567', '123 Main St'),
(2, 'Alice Johnson', 'alice.johnson@email.com', '555-234-5678', '456 Oak Ave'),
(3, 'Bob Williams', 'bob.williams@email.com', '555-345-6789', '789 Pine St'),
(4, 'Emily Jones', 'emily.jones@email.com', '555-456-7890', '1011 Elm St'),
(5, 'David Brown', 'david.brown@email.com', '555-567-8901', '1213 Willow St');
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(1, 1, '2023-04-01', 100.00),
(2, 2, '2023-04-05', 50.00),
(3, 3, '2023-04-10', 75.00),
(4, 1, '2023-04-15', 200.00),
(5, 4, '2023-04-20', 150.00),
(6, 2, '2023-04-25', 100.00),
(7, 5, '2023-04-30', 250.00);
INSERT INTO Products (ProductID, ProductName, Price) VALUES
(1, 'Product A', 10.00),
(2, 'Product B', 20.00),
(3, 'Product C', 30.00),
(4, 'Product D', 40.00),
(5, 'Product E', 50.00);
INSERT INTO OrderItems (OrderID, ProductID, Quantity, Price) VALUES
(1, 1, 2, 20.00),
(1, 2, 1, 20.00),
(1, 3, 3, 60.00),
(2, 1, 1, 10.00),
(2, 2, 2, 40.00),
(3, 3, 1, 30.00),
(3, 4, 1, 40.00),
(4, 1, 4, 40.00),
(4, 2, 3, 60.00),
(4, 5, 1, 50.00),
(5, 2, 2, 40.00),
(5, 3, 3, 90.00),
(6, 1, 1, 10.00),
(6, 4, 2, 80.00),
(6, 5, 1, 50.00),
(7, 2, 5, 100.00),
(7, 4, 1, 40.00),
(7, 5, 2, 100.00);","WITH CustomerPurchases AS (
    SELECT
        c.CustomerID,
        c.CustomerName,
        SUM(oi.Quantity * oi.Price) AS TotalPurchaseAmount,
        COUNT(DISTINCT o.OrderID) AS NumberOfPurchases
    FROM
        Customers c
    JOIN
        Orders o ON c.CustomerID = o.CustomerID
    JOIN
        OrderItems oi ON o.OrderID = oi.OrderID
    WHERE
        o.OrderDate BETWEEN '2023-04-01' AND '2023-06-30'
    GROUP BY
        c.CustomerID,
        c.CustomerName
),
CustomerAveragePurchase AS (
    SELECT
        CustomerID,
        CustomerName,
        AVG(TotalPurchaseAmount) AS AveragePurchaseAmount
    FROM
        CustomerPurchases
    GROUP BY
        CustomerID,
        CustomerName
)
SELECT
    cp.CustomerName,
    cp.TotalPurchaseAmount,
    cap.AveragePurchaseAmount,
    cp.NumberOfPurchases
FROM
    CustomerPurchases cp
JOIN
    CustomerAveragePurchase cap ON cp.CustomerID = cap.CustomerID
ORDER BY
    TotalPurchaseAmount DESC
LIMIT 5;","The SQL query is designed to generate a report showing the top 5 customers with the highest total purchase amount in the last quarter, along with their average purchase amount and the total number of purchases made.

**1. Customer Purchases:**
- This CTE (Common Table Expression) calculates the total purchase amount and the number of purchases for each customer in the last quarter (April 1st to June 30th, 2023).

**2. Customer Average Purchase:**
- This CTE calculates the average purchase amount for each customer based on the data from the previous CTE.

**3. Final Query:**
- This query joins the two CTEs and selects the customer name, total purchase amount, average purchase amount, and the number of purchases for the top 5 customers with the highest total purchase amount.
- The results are ordered by the total purchase amount in descending order.
- The `LIMIT 5` clause limits the output to the top 5 customers."
481,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,What is the average price of stocks bought in 2023 that have yielded a positive return of 10% or more since purchase?,"CREATE TABLE Stocks ( 
  stock_id INT PRIMARY KEY, 
  stock_name VARCHAR(255) NOT NULL, 
  purchase_date DATE NOT NULL, 
  purchase_price DECIMAL(10,2) NOT NULL, 
  current_price DECIMAL(10,2) NOT NULL 
);

INSERT INTO Stocks (stock_id, stock_name, purchase_date, purchase_price, current_price) VALUES 
(1, 'Apple', '2023-01-01', 175.00, 190.50), 
(2, 'Microsoft', '2023-02-15', 280.50, 295.75), 
(3, 'Amazon', '2023-03-08', 2050.00, 2201.50), 
(4, 'Tesla', '2023-04-22', 950.00, 1100.25), 
(5, 'Alphabet', '2023-05-10', 2450.00, 2575.50), 
(6, 'Meta', '2023-06-17', 185.75, 198.00), 
(7, 'Nvidia', '2023-07-05', 230.50, 245.75), 
(8, 'Berkshire Hathaway', '2023-08-12', 525.00, 570.25), 
(9, 'JPMorgan Chase', '2023-09-19', 140.25, 155.50), 
(10, 'Johnson & Johnson', '2023-10-04', 170.50, 185.75);


CREATE TABLE Transactions ( 
  transaction_id INT PRIMARY KEY, 
  stock_id INT REFERENCES Stocks(stock_id), 
  transaction_date DATE NOT NULL, 
  transaction_type VARCHAR(10) NOT NULL, 
  transaction_price DECIMAL(10,2) NOT NULL 
);

INSERT INTO Transactions (transaction_id, stock_id, transaction_date, transaction_type, transaction_price) VALUES 
(1, 1, '2023-01-01', 'Buy', 175.00), 
(2, 2, '2023-02-15', 'Buy', 280.50), 
(3, 3, '2023-03-08', 'Buy', 2050.00), 
(4, 4, '2023-04-22', 'Buy', 950.00), 
(5, 5, '2023-05-10', 'Buy', 2450.00), 
(6, 6, '2023-06-17', 'Buy', 185.75), 
(7, 7, '2023-07-05', 'Buy', 230.50), 
(8, 8, '2023-08-12', 'Buy', 525.00), 
(9, 9, '2023-09-19', 'Buy', 140.25), 
(10, 10, '2023-10-04', 'Buy', 170.50);


CREATE VIEW PositiveReturns AS 
SELECT s.stock_id, s.stock_name, s.purchase_date, s.purchase_price, s.current_price, ((s.current_price - s.purchase_price) / s.purchase_price) * 100 AS return_percentage 
FROM Stocks s 
WHERE return_percentage >= 10;


CREATE VIEW PurchasesIn2023 AS 
SELECT s.stock_id, s.stock_name, s.purchase_date, s.purchase_price, s.current_price 
FROM Stocks s 
WHERE s.purchase_date >= '2023-01-01' AND s.purchase_date <= '2023-12-31';","SELECT AVG(p.purchase_price) 
FROM PurchasesIn2023 p 
INNER JOIN PositiveReturns pr ON p.stock_id = pr.stock_id","This query calculates the average purchase price of stocks bought in 2023 that have yielded a positive return of 10% or more since purchase. 

It first selects the stock_id, stock_name, purchase_date, purchase_price, and current_price from the Stocks table where the purchase_date is between January 1, 2023 and December 31, 2023 using the PurchasesIn2023 view. 

Then, it joins the results with the PositiveReturns view on the stock_id to filter for stocks with a return_percentage of 10% or more. 

Finally, it calculates the average purchase_price using the AVG function."
482,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,What is the average return on investment for our technology stocks in the past year across different regions?,"CREATE TABLE TechnologyStocks (StockSymbol VARCHAR(10) PRIMARY KEY, PurchaseDate DATE, PurchasePrice DECIMAL(10,2), Quantity INT, Region VARCHAR(20));
INSERT INTO TechnologyStocks (StockSymbol, PurchaseDate, PurchasePrice, Quantity, Region) VALUES ('AAPL', '2022-01-01', 175.50, 100, 'North America'), ('MSFT', '2022-02-15', 280.00, 50, 'North America'), ('AMZN', '2022-03-08', 3200.00, 25, 'North America'), ('TSLA', '2022-04-12', 1050.00, 10, 'North America'), ('GOOG', '2022-05-25', 2500.00, 20, 'North America'), ('BABA', '2022-06-07', 120.00, 75, 'Asia'), ('TM', '2022-07-19', 185.00, 50, 'Asia'), ('OTCM', '2022-08-01', 15.00, 100, 'Asia'), ('BIDU', '2022-09-14', 140.00, 30, 'Asia'), ('SAMSUNG', '2022-10-26', 2200.00, 15, 'Asia'), ('SAP', '2022-11-08', 115.00, 80, 'Europe'), ('ASML', '2022-12-21', 650.00, 20, 'Europe'), ('ERIC', '2023-01-04', 13.00, 150, 'Europe'), ('NOKIA', '2023-02-16', 5.50, 200, 'Europe'), ('SIEMENS', '2023-03-09', 140.00, 40, 'Europe');

CREATE TABLE StockPrices (StockSymbol VARCHAR(10) PRIMARY KEY, Date DATE, ClosingPrice DECIMAL(10,2));
INSERT INTO StockPrices (StockSymbol, Date, ClosingPrice) VALUES ('AAPL', '2023-01-01', 180.00), ('MSFT', '2023-02-15', 295.00), ('AMZN', '2023-03-08', 3350.00), ('TSLA', '2023-04-12', 1100.00), ('GOOG', '2023-05-25', 2600.00), ('BABA', '2023-06-07', 130.00), ('TM', '2023-07-19', 190.00), ('OTCM', '2023-08-01', 16.00), ('BIDU', '2023-09-14', 150.00), ('SAMSUNG', '2023-10-26', 2250.00), ('SAP', '2023-11-08', 120.00), ('ASML', '2023-12-21', 670.00), ('ERIC', '2024-01-04', 14.00), ('NOKIA', '2024-02-16', 6.00), ('SIEMENS', '2024-03-09', 145.00);","SELECT Region, AVG((SP.ClosingPrice - TS.PurchasePrice) * TS.Quantity / TS.PurchasePrice) AS AverageReturn
FROM TechnologyStocks TS
JOIN StockPrices SP ON TS.StockSymbol = SP.StockSymbol
WHERE SP.Date BETWEEN DATE('now', '-1 year') AND DATE('now')
GROUP BY Region;","This SQL query calculates the average return on investment (ROI) for technology stocks in different regions over the past year.

1. It joins the `TechnologyStocks` and `StockPrices` tables on the `StockSymbol` column.
2. It filters the `StockPrices` table to include only records from the past year.
3. It calculates the ROI for each stock by subtracting the purchase price from the closing price and dividing by the purchase price.
4. It groups the results by region and calculates the average ROI for each region."
483,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Generate a report that shows the top 10 customers with the highest investment portfolio value in the past month, along with their total investment amount and the average return on their investments. Also, identify the top 5 stocks held by these customers and their individual performance.","CREATE TABLE Customers (  
   customer_id INTEGER PRIMARY KEY,  
   customer_name VARCHAR(255) NOT NULL,  
   email VARCHAR(255) UNIQUE NOT NULL,  
   phone_number VARCHAR(20) UNIQUE  
);

CREATE TABLE Investment_Portfolio (  
   portfolio_id INTEGER PRIMARY KEY,  
   customer_id INTEGER REFERENCES Customers(customer_id),  
   stock_symbol VARCHAR(10) NOT NULL,  
   investment_amount DECIMAL(10, 2) NOT NULL,  
   purchase_date DATE NOT NULL,  
   CONSTRAINT FK_Customer FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)  
);

CREATE TABLE Stock_Prices (  
   stock_symbol VARCHAR(10) PRIMARY KEY,  
   date DATE NOT NULL,  
   closing_price DECIMAL(10, 2) NOT NULL  
);","SELECT c.customer_name, 
       SUM(ip.investment_amount) AS total_investment,
       AVG(sp.closing_price - ip.investment_amount) / ip.investment_amount * 100 AS avg_return
FROM Customers c
JOIN Investment_Portfolio ip ON c.customer_id = ip.customer_id
JOIN Stock_Prices sp ON ip.stock_symbol = sp.stock_symbol AND ip.purchase_date = sp.date
WHERE sp.date BETWEEN DATE('now', '-1 month') AND DATE('now')
GROUP BY c.customer_name
ORDER BY total_investment DESC
LIMIT 10;

SELECT s.stock_symbol, SUM(ip.investment_amount) AS total_investment, AVG(sp.closing_price - ip.investment_amount) / ip.investment_amount * 100 AS avg_return
FROM Investment_Portfolio ip
JOIN Stock_Prices sp ON ip.stock_symbol = sp.stock_symbol AND ip.purchase_date = sp.date
JOIN Customers c ON ip.customer_id = c.customer_id
WHERE c.customer_name IN (SELECT customer_name FROM (SELECT c.customer_name, SUM(ip.investment_amount) AS total_investment FROM Customers c JOIN Investment_Portfolio ip ON c.customer_id = ip.customer_id GROUP BY c.customer_name ORDER BY total_investment DESC LIMIT 10) AS top_customers)
GROUP BY s.stock_symbol
ORDER BY total_investment DESC
LIMIT 5;","The first query selects customer information, total investment, and average return for the top 10 customers with the highest investment portfolio value in the past month. It joins three tables: Customers, Investment_Portfolio, and Stock_Prices, and filters the Stock_Prices table based on a date range of one month ago to today. 

The second query identifies the top 5 stocks held by these customers and their individual performance. It joins Investment_Portfolio, Stock_Prices, and Customers tables and filters for customers identified in the first query. The results show total investment and average return for each stock held by these top customers."
484,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,What is the average return on investment (ROI) for all technology stocks in the S&P 500 over the past 5 years?,"CREATE TABLE Stocks (Ticker VARCHAR(10) PRIMARY KEY, Sector VARCHAR(20), Price DECIMAL(10,2));
INSERT INTO Stocks VALUES ('AAPL', 'Technology', 175.50), ('MSFT', 'Technology', 270.25), ('AMZN', 'Technology', 3,200.00), ('GOOG', 'Technology', 2,500.00), ('TSLA', 'Technology', 1,000.00);

CREATE TABLE HistoricalPrices (Ticker VARCHAR(10) REFERENCES Stocks(Ticker), Date DATE, Price DECIMAL(10,2));
INSERT INTO HistoricalPrices VALUES ('AAPL', '2018-01-01', 150.00), ('AAPL', '2019-01-01', 160.00), ('AAPL', '2020-01-01', 170.00), ('AAPL', '2021-01-01', 180.00), ('AAPL', '2022-01-01', 175.50), ('MSFT', '2018-01-01', 250.00), ('MSFT', '2019-01-01', 260.00), ('MSFT', '2020-01-01', 270.00), ('MSFT', '2021-01-01', 280.00), ('MSFT', '2022-01-01', 270.25), ('AMZN', '2018-01-01', 2,000.00), ('AMZN', '2019-01-01', 2,500.00), ('AMZN', '2020-01-01', 3,000.00), ('AMZN', '2021-01-01', 3,500.00), ('AMZN', '2022-01-01', 3,200.00), ('GOOG', '2018-01-01', 2,000.00), ('GOOG', '2019-01-01', 2,200.00), ('GOOG', '2020-01-01', 2,400.00), ('GOOG', '2021-01-01', 2,600.00), ('GOOG', '2022-01-01', 2,500.00), ('TSLA', '2018-01-01', 500.00), ('TSLA', '2019-01-01', 600.00), ('TSLA', '2020-01-01', 700.00), ('TSLA', '2021-01-01', 800.00), ('TSLA', '2022-01-01', 1,000.00);","SELECT AVG(ROI) FROM (SELECT (Price - LAG(Price, 5, 0)) / LAG(Price, 5, 0) AS ROI FROM HistoricalPrices WHERE Ticker IN (SELECT Ticker FROM Stocks WHERE Sector = 'Technology') AND Date >= DATE('now', '-5 years')) AS ROI_Table;","1. Filter the HistoricalPrices table to include only technology stocks and prices from the past 5 years.
2. Calculate the ROI for each technology stock for each year using the formula (Price - LAG(Price, 5, 0)) / LAG(Price, 5, 0), where LAG() is a window function that returns the previous value of the Price column.
3. Calculate the average ROI for all technology stocks over the past 5 years."
485,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Which artists are from the United States and have a genre of rock?,"CREATE TABLE artists ( artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, artist_genre VARCHAR(255) NOT NULL, artist_country VARCHAR(255) NOT NULL );
INSERT INTO artists (artist_id, artist_name, artist_genre, artist_country) VALUES (1, 'The Beatles', 'Rock', 'United Kingdom'), (2, 'Elvis Presley', 'Rock and Roll', 'United States'), (3, 'Michael Jackson', 'Pop', 'United States'), (4, 'Bob Dylan', 'Folk', 'United States'), (5, 'Madonna', 'Pop', 'United States'), (6, 'Beyoncé', 'Pop', 'United States'), (7, 'Rihanna', 'Pop', 'Barbados'), (8, 'Jay-Z', 'Hip Hop', 'United States'), (9, 'Kanye West', 'Hip Hop', 'United States'), (10, 'Drake', 'Hip Hop', 'Canada');",SELECT artist_name FROM artists WHERE artist_genre = 'Rock' AND artist_country = 'United States';,This SQL query selects the 'artist_name' from the 'artists' table where the 'artist_genre' is 'Rock' and the 'artist_country' is 'United States'. The result will be a list of artists who are from the United States and have a genre of rock.
486,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What is the average price of paintings sold in the last year?,"CREATE TABLE paintings ( painting_id INT PRIMARY KEY, painting_name VARCHAR(255) NOT NULL, painting_price DECIMAL(10,2) NOT NULL, painting_date DATE NOT NULL );
INSERT INTO paintings (painting_id, painting_name, painting_price, painting_date) VALUES (1, 'Mona Lisa', 780000000.00, '1506-04-01'), (2, 'The Starry Night', 100000000.00, '1889-06-18'), (3, 'Guernica', 350000000.00, '1937-04-26'), (4, 'The Scream', 119900000.00, '1893-01-01'), (5, 'Water Lilies', 55000000.00, '1919-04-01'), (6, 'Les Demoiselles d'Avignon', 250000000.00, '1907-07-10'), (7, 'Nighthawks', 140000000.00, '1942-01-01'), (8, 'Campbell's Soup Cans', 95000000.00, '1962-01-01'), (9, 'Girl with a Pearl Earring', 300000000.00, '1665-01-01'), (10, 'The Kiss', 130000000.00, '1907-12-18');","SELECT AVG(painting_price) FROM paintings WHERE painting_date BETWEEN DATE('now', '-1 year') AND DATE('now');",This SQL query calculates the average price of paintings sold in the last year. It selects the average of the 'painting_price' column from the 'paintings' table where the 'painting_date' is between one year ago and today. The result will be the average price of paintings sold in the last year.
487,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What are the top 5 countries with the most museums?,"CREATE TABLE museums ( museum_id INT PRIMARY KEY, museum_name VARCHAR(255) NOT NULL, museum_country VARCHAR(255) NOT NULL );
INSERT INTO museums (museum_id, museum_name, museum_country) VALUES (1, 'The Louvre', 'France'), (2, 'The Metropolitan Museum of Art', 'United States'), (3, 'The British Museum', 'United Kingdom'), (4, 'The National Gallery', 'United Kingdom'), (5, 'The State Hermitage Museum', 'Russia'), (6, 'The Prado Museum', 'Spain'), (7, 'The Rijksmuseum', 'Netherlands'), (8, 'The Vatican Museums', 'Vatican City'), (9, 'The National Museum of China', 'China'), (10, 'The National Gallery of Art', 'United States');","SELECT museum_country, COUNT(museum_id) AS museum_count FROM museums GROUP BY museum_country ORDER BY museum_count DESC LIMIT 5;","This SQL query finds the top 5 countries with the most museums. It groups the 'museums' table by 'museum_country' and counts the number of museums in each country using the 'COUNT(museum_id)' function. Then, it orders the results in descending order by the number of museums and limits the result to the top 5 countries. The result will be a table showing the top 5 countries with the most museums and the number of museums in each country."
488,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What are the top 5 most popular artists in terms of album sales?,"CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), nationality VARCHAR(255));
CREATE TABLE albums (album_id INT PRIMARY KEY, artist_id INT REFERENCES artists(artist_id), album_name VARCHAR(255), release_date DATE, sales INT);
CREATE TABLE genres (genre_id INT PRIMARY KEY, genre_name VARCHAR(255));
CREATE TABLE artist_genres (artist_id INT REFERENCES artists(artist_id), genre_id INT REFERENCES genres(genre_id), PRIMARY KEY (artist_id, genre_id));","SELECT a.artist_name, SUM(al.sales) AS total_sales
FROM artists a
JOIN albums al ON a.artist_id = al.artist_id
GROUP BY a.artist_name
ORDER BY total_sales DESC
LIMIT 5;","This query retrieves the top 5 artists with the highest total album sales. It joins the `artists` and `albums` tables on the `artist_id` field, then groups the results by artist name and calculates the sum of sales for each artist. Finally, it orders the results in descending order of total sales and limits the output to the top 5 artists."
489,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What is the total number of female artists born in the 1950s who have sold over 1 million records?,"CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(255) NOT NULL, BirthYear INT, Gender VARCHAR(10));
CREATE TABLE Albums (AlbumID INT PRIMARY KEY, ArtistID INT REFERENCES Artists(ArtistID), AlbumTitle VARCHAR(255) NOT NULL, ReleaseYear INT, Sales INT);
INSERT INTO Artists (ArtistID, ArtistName, BirthYear, Gender) VALUES (1, 'Madonna', 1958, 'Female'), (2, 'Michael Jackson', 1958, 'Male'), (3, 'Whitney Houston', 1963, 'Female'), (4, 'Prince', 1958, 'Male'), (5, 'Mariah Carey', 1970, 'Female');
INSERT INTO Albums (AlbumID, ArtistID, AlbumTitle, ReleaseYear, Sales) VALUES (1, 1, 'True Blue', 1986, 25), (2, 2, 'Thriller', 1982, 100), (3, 3, 'Whitney', 1987, 30), (4, 4, 'Purple Rain', 1984, 25), (5, 5, 'Daydream', 1995, 20);",SELECT COUNT(*) FROM Artists WHERE Gender = 'Female' AND BirthYear BETWEEN 1950 AND 1959 AND EXISTS (SELECT 1 FROM Albums WHERE ArtistID = Artists.ArtistID AND Sales > 1000000);,"This query first selects all female artists born between 1950 and 1959 from the Artists table.
Then, it checks for each artist if there exists an album with sales greater than 1 million records in the Albums table.
Finally, it counts the total number of artists who meet both conditions."
490,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What are the average yields of wheat in Kansas over the past five years?,"CREATE TABLE wheat_yields (   state VARCHAR(255),   year INT,   yield_per_acre FLOAT);   INSERT INTO wheat_yields (state, year, yield_per_acre) VALUES ('Kansas', 2018, 55.4), ('Kansas', 2019, 58.2), ('Kansas', 2020, 61.1), ('Kansas', 2021, 57.8), ('Kansas', 2022, 60.5);",SELECT AVG(yield_per_acre) FROM wheat_yields WHERE state = 'Kansas' AND year BETWEEN 2018 AND 2022;,"This query calculates the average yield of wheat in Kansas over the past five years. It first filters the wheat_yields table to only include records for Kansas and years between 2018 and 2022. Then, it calculates the average yield per acre using the AVG() function."
491,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What are the top five countries in terms of corn production?,"CREATE TABLE corn_production (   country VARCHAR(255),   production_tons INT);   INSERT INTO corn_production (country, production_tons) VALUES ('United States', 369_000), ('China', 260_000), ('Brazil', 106_000), ('Argentina', 52_000), ('Ukraine', 35_000);",SELECT country FROM corn_production ORDER BY production_tons DESC LIMIT 5;,"This query selects the top five countries in terms of corn production. It first orders the corn_production table by production_tons in descending order. Then, it limits the results to the top five countries using the LIMIT clause."
492,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What is the average temperature in July for each state in the US?,"CREATE TABLE weather_data (   state VARCHAR(255),   month INT,   average_temperature FLOAT);   INSERT INTO weather_data (state, month, average_temperature) VALUES ('Alabama', 7, 82.5), ('Alaska', 7, 58.1), ('Arizona', 7, 95.3), ('Arkansas', 7, 83.4), ('California', 7, 72.8);","SELECT state, AVG(average_temperature) FROM weather_data WHERE month = 7 GROUP BY state;","This query calculates the average temperature in July for each state in the US. It first filters the weather_data table to only include records for July. Then, it groups the data by state and calculates the average temperature using the AVG() function."
493,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What is the total rainfall in California in the month of March?,"CREATE TABLE rainfall_data (   state VARCHAR(255),   month INT,   rainfall_inches FLOAT);   INSERT INTO rainfall_data (state, month, rainfall_inches) VALUES ('California', 3, 4.5), ('California', 4, 2.8), ('California', 5, 1.2);",SELECT SUM(rainfall_inches) FROM rainfall_data WHERE state = 'California' AND month = 3;,"This query calculates the total rainfall in California in the month of March. It first filters the rainfall_data table to only include records for California and March. Then, it calculates the sum of the rainfall_inches using the SUM() function."
494,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"What are the top 10 crops grown in the United States, based on acreage?","CREATE TABLE crop_acreage (   crop VARCHAR(255),   acreage INT);   INSERT INTO crop_acreage (crop, acreage) VALUES ('Corn', 91_000_000), ('Soybeans', 83_000_000), ('Wheat', 46_000_000), ('Hay', 54_000_000), ('Cotton', 12_000_000);",SELECT crop FROM crop_acreage ORDER BY acreage DESC LIMIT 10;,"This query selects the top 10 crops grown in the United States, based on acreage. It first orders the crop_acreage table by acreage in descending order. Then, it limits the results to the top 10 crops using the LIMIT clause."
495,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the average corn yields for farms in Iowa for the past three years?,"CREATE TABLE corn_yields (  farm_id INT PRIMARY KEY,  year INT,  state VARCHAR(2),  yield_per_acre FLOAT);  INSERT INTO corn_yields (farm_id, year, state, yield_per_acre) VALUES  (1, 2020, 'IA', 180.5),  (2, 2020, 'IA', 175.2),  (3, 2020, 'IA', 192.7),  (1, 2021, 'IA', 178.9),  (2, 2021, 'IA', 184.3),  (3, 2021, 'IA', 198.1),  (1, 2022, 'IA', 182.6),  (2, 2022, 'IA', 179.1),  (3, 2022, 'IA', 195.4);  CREATE TABLE farms (  farm_id INT PRIMARY KEY,  name VARCHAR(50),  city VARCHAR(50),  state VARCHAR(2));  INSERT INTO farms (farm_id, name, city, state) VALUES  (1, 'Johnson Family Farm', 'Des Moines', 'IA'),  (2, 'Green Meadows Farm', 'Cedar Rapids', 'IA'),  (3, 'River Valley Farm', 'Davenport', 'IA');","SELECT AVG(cy.yield_per_acre)  FROM corn_yields cy  JOIN farms f ON cy.farm_id = f.farm_id  WHERE f.state = 'IA' AND cy.year IN (2020, 2021, 2022);","1. Join the 'corn_yields' and 'farms' tables on the 'farm_id' to link farm data to yield data.  2. Filter the results to include only records for farms in Iowa ('IA') and for the years 2020, 2021, and 2022.  3. Calculate the average corn yield per acre using the AVG() function and the 'yield_per_acre' column."
496,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average yield of wheat in the United States for the past five years?,"CREATE TABLE WheatYields (Year INT, State VARCHAR(255), Yield INT); 
INSERT INTO WheatYields (Year, State, Yield) VALUES (2018, 'Kansas', 75), (2018, 'North Dakota', 65), (2019, 'Kansas', 80), (2019, 'North Dakota', 70), (2020, 'Kansas', 78), (2020, 'North Dakota', 68), (2021, 'Kansas', 82), (2021, 'North Dakota', 72), (2022, 'Kansas', 85), (2022, 'North Dakota', 75); 
CREATE TABLE States (State VARCHAR(255), Region VARCHAR(255)); 
INSERT INTO States (State, Region) VALUES ('Kansas', 'Midwest'), ('North Dakota', 'Midwest');",SELECT AVG(Yield) FROM WheatYields WHERE State = 'United States' AND Year BETWEEN 2018 AND 2022;,This query calculates the average wheat yield in the United States for the past five years by selecting the average yield from the WheatYields table where the state is 'United States' and the year is between 2018 and 2022.
497,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average yield of corn in Iowa for the past five years?,"CREATE TABLE corn_yields ( 
    year INT,
    state VARCHAR(2),
    yield_per_acre FLOAT,
    PRIMARY KEY (year, state)
);

INSERT INTO corn_yields (year, state, yield_per_acre) VALUES
(2018, 'IA', 175.5),
(2019, 'IA', 182.7),
(2020, 'IA', 168.9),
(2021, 'IA', 191.4),
(2022, 'IA', 185.2);",SELECT AVG(yield_per_acre) FROM corn_yields WHERE state = 'IA' AND year BETWEEN 2018 AND 2022;,"This SQL query calculates the average yield of corn in Iowa for the past five years. It does this by first selecting all the rows from the `corn_yields` table where the state is 'IA' and the year is between 2018 and 2022. Then, it calculates the average of the `yield_per_acre` column for the selected rows."
498,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which counties in California had the highest average tomato yield in 2022?,"CREATE TABLE tomato_yields (
    year INT,
    county VARCHAR(255),
    state VARCHAR(2),
    yield_per_acre FLOAT,
    PRIMARY KEY (year, county, state)
);

INSERT INTO tomato_yields (year, county, state, yield_per_acre) VALUES
(2022, 'Fresno', 'CA', 45.2),
(2022, 'Tulare', 'CA', 42.8),
(2022, 'Kern', 'CA', 40.5),
(2022, 'San Joaquin', 'CA', 38.7),
(2022, 'Stanislaus', 'CA', 37.1);",SELECT county FROM tomato_yields WHERE state = 'CA' AND year = 2022 ORDER BY yield_per_acre DESC LIMIT 3;,"This SQL query finds the counties in California with the highest average tomato yield in 2022. It does this by first selecting all the rows from the `tomato_yields` table where the state is 'CA' and the year is 2022. Then, it sorts the rows by the `yield_per_acre` column in descending order. Finally, it limits the results to the top 3 rows, which gives the counties with the highest average tomato yield."
499,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What was the total rainfall in Kansas in 2021, and how does it compare to the average rainfall over the past 10 years?","CREATE TABLE rainfall (
    year INT,
    state VARCHAR(2),
    rainfall_inches FLOAT,
    PRIMARY KEY (year, state)
);

INSERT INTO rainfall (year, state, rainfall_inches) VALUES
(2012, 'KS', 28.5),
(2013, 'KS', 32.7),
(2014, 'KS', 26.9),
(2015, 'KS', 30.1),
(2016, 'KS', 24.3),
(2017, 'KS', 35.2),
(2018, 'KS', 29.8),
(2019, 'KS', 34.6),
(2020, 'KS', 27.5),
(2021, 'KS', 31.2);","SELECT rainfall_inches FROM rainfall WHERE state = 'KS' AND year = 2021;

SELECT AVG(rainfall_inches) FROM rainfall WHERE state = 'KS' AND year BETWEEN 2012 AND 2021;","This SQL query retrieves two pieces of information about the rainfall in Kansas: the total rainfall in 2021 and the average rainfall over the past 10 years. It accomplishes this by first selecting the `rainfall_inches` value from the `rainfall` table where the state is 'KS' and the year is 2021. Then, it calculates the average `rainfall_inches` value from the `rainfall` table where the state is 'KS' and the year is between 2012 and 2021."
500,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Query the 'Patients' table to insert a new patient record with the name 'John Doe', date of birth '1970-01-01', and primary care physician 'Dr. Jane Smith'.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255), DateOfBirth DATE, PrimaryCarePhysician VARCHAR(255));
CREATE TABLE Physicians (PhysicianID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255), Specialty VARCHAR(255));
INSERT INTO Physicians (PhysicianID, FirstName, LastName, Specialty) VALUES (1, 'Jane', 'Smith', 'Primary Care');","INSERT INTO Patients (FirstName, LastName, DateOfBirth, PrimaryCarePhysician) VALUES ('John', 'Doe', '1970-01-01', 'Dr. Jane Smith');","This SQL statement inserts a new row into the 'Patients' table with the specified values for the 'FirstName', 'LastName', 'DateOfBirth', and 'PrimaryCarePhysician' columns. The values are obtained directly from the user's prompt."
501,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Query the 'Medications' table to update the dosage of the medication with the name 'Aspirin' to 325mg for all patients with a diagnosis of 'Headache'.,"CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(255), Dosage INT, PatientID INT);
CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, DiagnosisName VARCHAR(255), PatientID INT);
INSERT INTO Medications (MedicationID, MedicationName, Dosage, PatientID) VALUES (1, 'Aspirin', 81, 1);
INSERT INTO Diagnoses (DiagnosisID, DiagnosisName, PatientID) VALUES (1, 'Headache', 1);",UPDATE Medications SET Dosage = 325 WHERE MedicationName = 'Aspirin' AND PatientID IN (SELECT PatientID FROM Diagnoses WHERE DiagnosisName = 'Headache');,This SQL statement updates the 'Dosage' column in the 'Medications' table to 325mg for all rows where the 'MedicationName' is 'Aspirin' and the 'PatientID' is present in the 'Diagnoses' table for patients with a diagnosis of 'Headache'.
502,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Query the 'Appointments' table to delete all appointments scheduled for a specific doctor with the last name 'Smith' on a specific date, '2023-12-25'.","CREATE TABLE Appointments (AppointmentID INT PRIMARY KEY, AppointmentDate DATE, DoctorID INT);
CREATE TABLE Doctors (DoctorID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255));
INSERT INTO Doctors (DoctorID, FirstName, LastName) VALUES (1, 'John', 'Smith');
INSERT INTO Appointments (AppointmentID, AppointmentDate, DoctorID) VALUES (1, '2023-12-25', 1);",DELETE FROM Appointments WHERE AppointmentDate = '2023-12-25' AND DoctorID IN (SELECT DoctorID FROM Doctors WHERE LastName = 'Smith');,This SQL statement deletes all rows from the 'Appointments' table where the 'AppointmentDate' is '2023-12-25' and the 'DoctorID' matches the 'DoctorID' of a doctor with the last name 'Smith' in the 'Doctors' table.
503,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Retrieve the names of all patients who have a diagnosis of 'Diabetes' and are currently taking a medication with the name 'Metformin'.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(255), LastName VARCHAR(255));
CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, DiagnosisName VARCHAR(255), PatientID INT);
CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(255), PatientID INT);
INSERT INTO Patients (PatientID, FirstName, LastName) VALUES (1, 'Alice', 'Johnson');
INSERT INTO Diagnoses (DiagnosisID, DiagnosisName, PatientID) VALUES (1, 'Diabetes', 1);
INSERT INTO Medications (MedicationID, MedicationName, PatientID) VALUES (1, 'Metformin', 1);","SELECT FirstName, LastName FROM Patients WHERE PatientID IN (SELECT PatientID FROM Diagnoses WHERE DiagnosisName = 'Diabetes') INTERSECT SELECT FirstName, LastName FROM Patients WHERE PatientID IN (SELECT PatientID FROM Medications WHERE MedicationName = 'Metformin');",This SQL statement retrieves the names of patients who have a diagnosis of 'Diabetes' and are taking 'Metformin' by performing an intersection of two queries. The first query selects the 'FirstName' and 'LastName' of patients with a diagnosis of 'Diabetes' from the 'Diagnoses' table. The second query selects the 'FirstName' and 'LastName' of patients taking 'Metformin' from the 'Medications' table. The intersection of these two queries results in the names of patients who meet both criteria.
504,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Calculate the average length of stay in the hospital for patients admitted with a diagnosis of 'Pneumonia' in the month of January 2023.,"CREATE TABLE Admissions (AdmissionID INT PRIMARY KEY, AdmissionDate DATE, DischargeDate DATE, PatientID INT, DiagnosisID INT);
CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, DiagnosisName VARCHAR(255));
INSERT INTO Diagnoses (DiagnosisID, DiagnosisName) VALUES (1, 'Pneumonia');
INSERT INTO Admissions (AdmissionID, AdmissionDate, DischargeDate, PatientID, DiagnosisID) VALUES (1, '2023-01-05', '2023-01-10', 1, 1);",SELECT AVG(DischargeDate - AdmissionDate) AS AverageLengthOfStay FROM Admissions WHERE DiagnosisID IN (SELECT DiagnosisID FROM Diagnoses WHERE DiagnosisName = 'Pneumonia') AND AdmissionDate BETWEEN '2023-01-01' AND '2023-01-31';,"This SQL statement calculates the average length of stay for patients admitted with a diagnosis of 'Pneumonia' in January 2023. It uses a subquery to select the 'DiagnosisID' for 'Pneumonia' and filters the 'Admissions' table based on this 'DiagnosisID' and an admission date range between '2023-01-01' and '2023-01-31'. The 'AVG()' function calculates the average difference between the 'DischargeDate' and 'AdmissionDate', which represents the length of stay."
505,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average number of courses taken by students in each department.,"CREATE TABLE student (
    student_id INT PRIMARY KEY,
    name VARCHAR(255),
    department VARCHAR(255)
);

CREATE TABLE course (
    course_id INT PRIMARY KEY,
    name VARCHAR(255),
    department VARCHAR(255)
);

CREATE TABLE enrollment (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    semester VARCHAR(255),
    year INT,
    grade VARCHAR(255),
    FOREIGN KEY (student_id) REFERENCES student(student_id),
    FOREIGN KEY (course_id) REFERENCES course(course_id)
);","SELECT d.department, AVG(e.course_id) AS average_courses
FROM enrollment e
JOIN student s ON e.student_id = s.student_id
JOIN course c ON e.course_id = c.course_id
JOIN department d ON c.department = d.department
GROUP BY d.department;","This query first joins the enrollment, student, course, and department tables to link students to their courses and departments. Then, it groups the data by department and calculates the average number of courses taken by students in each department."
506,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the average grade for students in Algebra I, by state, for the current academic year?","CREATE TABLE students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    grade_level INT NOT NULL,
    state VARCHAR(2) NOT NULL
);

CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(50) NOT NULL,
    teacher_id INT,
    grade_level INT
);

CREATE TABLE enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT,
    course_id INT,
    grade DECIMAL(4, 2),
    CONSTRAINT FK_student_id FOREIGN KEY (student_id) REFERENCES students(student_id),
    CONSTRAINT FK_course_id FOREIGN KEY (course_id) REFERENCES courses(course_id)
);

CREATE TABLE grades (
    grade_id INT PRIMARY KEY,
    grade DECIMAL(4, 2),
    enrollment_id INT,
    CONSTRAINT FK_enrollment_id FOREIGN KEY (enrollment_id) REFERENCES enrollments(enrollment_id)
);

INSERT INTO students (student_id, first_name, last_name, grade_level, state) VALUES
(1, 'John', 'Smith', 9, 'CA'),
(2, 'Alice', 'Johnson', 9, 'TX'),
(3, 'Bob', 'Williams', 9, 'NY'),
(4, 'Emily', 'Brown', 9, 'FL'),
(5, 'Michael', 'Jones', 9, 'IL');

INSERT INTO courses (course_id, course_name, teacher_id, grade_level) VALUES
(1, 'Algebra I', 101, 9),
(2, 'Geometry', 102, 10),
(3, 'English I', 103, 9),
(4, 'Biology', 104, 10),
(5, 'Chemistry', 105, 11);

INSERT INTO enrollments (enrollment_id, student_id, course_id, grade) VALUES
(1, 1, 1, 85),
(2, 2, 1, 92),
(3, 3, 1, 78),
(4, 4, 1, 95),
(5, 5, 1, 88),
(6, 1, 2, 90),
(7, 2, 2, 85),
(8, 3, 2, 75),
(9, 4, 2, 98),
(10, 5, 2, 82);

INSERT INTO grades (grade_id, grade, enrollment_id) VALUES
(1, 85, 1),
(2, 92, 2),
(3, 78, 3),
(4, 95, 4),
(5, 88, 5),
(6, 90, 6),
(7, 85, 7),
(8, 75, 8),
(9, 98, 9),
(10, 82, 10);","WITH CourseAverage AS (
    SELECT c.course_name, AVG(g.grade) AS average_grade
    FROM courses c
    JOIN enrollments e ON c.course_id = e.course_id
    JOIN grades g ON e.enrollment_id = g.enrollment_id
    GROUP BY c.course_name
),
StateAverage AS (
    SELECT c.course_name, s.state, AVG(g.grade) AS average_grade
    FROM courses c
    JOIN enrollments e ON c.course_id = e.course_id
    JOIN grades g ON e.enrollment_id = g.enrollment_id
    JOIN students s ON e.student_id = s.student_id
    GROUP BY c.course_name, s.state
)
SELECT sa.state, sa.average_grade
FROM StateAverage sa
JOIN CourseAverage ca ON sa.course_name = ca.course_name
WHERE sa.course_name LIKE '%Algebra I%';","This query calculates the average grade for students in Algebra I, by state, for the current academic year.

1. **Create CTEs**: 
    - `CourseAverage`: Calculates the average grade for each course across all students.
    - `StateAverage`: Calculates the average grade for each course in each state.
2. **Join CTEs**: Join `CourseAverage` and `StateAverage` on `course_name` to get the average grade for each state in Algebra I.
3. **Filter**: Filter the result to include only records for Algebra I."
507,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Display the names, student IDs, and final grades of students enrolled in courses taught by Professor Jones, sorted in descending order of final grade.","CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255));
CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255));
CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, course_id INT REFERENCES courses(course_id), student_id INT REFERENCES students(student_id));
CREATE TABLE instructors (instructor_id INT PRIMARY KEY, instructor_name VARCHAR(255));
CREATE TABLE sections (section_id INT PRIMARY KEY, course_id INT REFERENCES courses(course_id), instructor_id INT REFERENCES instructors(instructor_id));
CREATE TABLE grades (grade_id INT PRIMARY KEY, student_id INT REFERENCES students(student_id), section_id INT REFERENCES sections(section_id), final_grade DECIMAL(5,2));
INSERT INTO courses (course_id, course_name) VALUES (1, 'Introduction to Computer Science'), (2, 'Data Structures and Algorithms'), (3, 'Software Engineering');
INSERT INTO students (student_id, student_name) VALUES (101, 'Alice Smith'), (102, 'Bob Johnson'), (103, 'Charlie Williams');
INSERT INTO enrollments (enrollment_id, course_id, student_id) VALUES (201, 1, 101), (202, 1, 102), (203, 2, 103), (204, 3, 101);
INSERT INTO instructors (instructor_id, instructor_name) VALUES (301, 'Professor Jones'), (302, 'Professor Brown'), (303, 'Professor Davis');
INSERT INTO sections (section_id, course_id, instructor_id) VALUES (401, 1, 301), (402, 2, 302), (403, 3, 303);
INSERT INTO grades (grade_id, student_id, section_id, final_grade) VALUES (501, 101, 401, 95.00), (502, 102, 401, 80.00), (503, 103, 402, 75.00), (504, 101, 403, 90.00);","SELECT students.student_name, students.student_id, grades.final_grade
FROM students
INNER JOIN enrollments ON students.student_id = enrollments.student_id
INNER JOIN sections ON enrollments.section_id = sections.section_id
INNER JOIN grades ON sections.section_id = grades.section_id
INNER JOIN instructors ON sections.instructor_id = instructors.instructor_id
WHERE instructors.instructor_name = 'Professor Jones'
ORDER BY grades.final_grade DESC;","This SQL query selects the names, student IDs, and final grades of students enrolled in courses taught by Professor Jones. It uses a series of inner joins to connect the students, enrollments, sections, grades, and instructors tables. The WHERE clause filters the results to only include students enrolled in courses taught by Professor Jones, and the ORDER BY clause sorts the results in descending order of final grade."
508,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average final grade for courses taught by Professor Brown in the Spring 2023 semester.,"CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(255));
CREATE TABLE students (student_id INT PRIMARY KEY, student_name VARCHAR(255));
CREATE TABLE enrollments (enrollment_id INT PRIMARY KEY, course_id INT REFERENCES courses(course_id), student_id INT REFERENCES students(student_id));
CREATE TABLE instructors (instructor_id INT PRIMARY KEY, instructor_name VARCHAR(255));
CREATE TABLE sections (section_id INT PRIMARY KEY, course_id INT REFERENCES courses(course_id), instructor_id INT REFERENCES instructors(instructor_id), semester VARCHAR(255), year INT);
CREATE TABLE grades (grade_id INT PRIMARY KEY, student_id INT REFERENCES students(student_id), section_id INT REFERENCES sections(section_id), final_grade DECIMAL(5,2));
INSERT INTO courses (course_id, course_name) VALUES (1, 'Introduction to Computer Science'), (2, 'Data Structures and Algorithms'), (3, 'Software Engineering');
INSERT INTO students (student_id, student_name) VALUES (101, 'Alice Smith'), (102, 'Bob Johnson'), (103, 'Charlie Williams');
INSERT INTO enrollments (enrollment_id, course_id, student_id) VALUES (201, 1, 101), (202, 1, 102), (203, 2, 103), (204, 3, 101);
INSERT INTO instructors (instructor_id, instructor_name) VALUES (301, 'Professor Jones'), (302, 'Professor Brown'), (303, 'Professor Davis');
INSERT INTO sections (section_id, course_id, instructor_id, semester, year) VALUES (401, 1, 301, 'Fall', 2022), (402, 2, 302, 'Spring', 2023), (403, 3, 303, 'Summer', 2023);
INSERT INTO grades (grade_id, student_id, section_id, final_grade) VALUES (501, 101, 401, 95.00), (502, 102, 401, 80.00), (503, 103, 402, 75.00), (504, 101, 403, 90.00);","SELECT AVG(grades.final_grade)
FROM grades
INNER JOIN sections ON grades.section_id = sections.section_id
INNER JOIN instructors ON sections.instructor_id = instructors.instructor_id
WHERE instructors.instructor_name = 'Professor Brown' AND sections.semester = 'Spring' AND sections.year = 2023;","This SQL query calculates the average final grade for courses taught by Professor Brown in the Spring 2023 semester. It uses a series of inner joins to connect the grades, sections, and instructors tables. The WHERE clause filters the results to only include grades for sections taught by Professor Brown in the Spring 2023 semester, and the AVG() function calculates the average final grade."
509,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the average test scores and total resources spent per student, categorized by gender and state, for all students in the 'Mathematics' and 'English' subjects, from 2021-01-01 to 2023-01-01?","CREATE TABLE Students ( 
   StudentID INT PRIMARY KEY, 
   FirstName VARCHAR(50) NOT NULL, 
   LastName VARCHAR(50) NOT NULL, 
   Gender VARCHAR(10) NOT NULL, 
   DateOfBirth DATE NOT NULL, 
   State VARCHAR(50) NOT NULL 
 );

CREATE TABLE Subjects ( 
   SubjectID INT PRIMARY KEY, 
   SubjectName VARCHAR(50) NOT NULL 
 );

CREATE TABLE TestScores ( 
   TestScoreID INT PRIMARY KEY, 
   StudentID INT REFERENCES Students(StudentID), 
   SubjectID INT REFERENCES Subjects(SubjectID), 
   TestDate DATE NOT NULL, 
   Score DECIMAL(5,2) NOT NULL 
 );

CREATE TABLE Resources ( 
   ResourceID INT PRIMARY KEY, 
   StudentID INT REFERENCES Students(StudentID), 
   ResourceName VARCHAR(50) NOT NULL, 
   Cost DECIMAL(10,2) NOT NULL, 
   DateUsed DATE NOT NULL 
 );

INSERT INTO Subjects (SubjectID, SubjectName) VALUES 
 (1, 'Mathematics'), 
 (2, 'English');

INSERT INTO Students (StudentID, FirstName, LastName, Gender, DateOfBirth, State) VALUES 
 (1, 'John', 'Smith', 'Male', '2005-01-15', 'California'), 
 (2, 'Alice', 'Johnson', 'Female', '2006-03-08', 'Texas'), 
 (3, 'Bob', 'Williams', 'Male', '2004-07-12', 'New York'), 
 (4, 'Emily', 'Brown', 'Female', '2005-09-21', 'Florida'), 
 (5, 'David', 'Davis', 'Male', '2006-12-25', 'California');

INSERT INTO TestScores (TestScoreID, StudentID, SubjectID, TestDate, Score) VALUES 
 (1, 1, 1, '2021-05-10', 85.5), 
 (2, 2, 2, '2021-06-15', 92.0), 
 (3, 3, 1, '2022-02-20', 78.0), 
 (4, 4, 2, '2022-03-25', 89.5), 
 (5, 5, 1, '2023-01-05', 95.0); 

INSERT INTO Resources (ResourceID, StudentID, ResourceName, Cost, DateUsed) VALUES 
 (1, 1, 'Tutoring', 150.00, '2021-04-15'), 
 (2, 2, 'Textbooks', 75.00, '2021-08-01'), 
 (3, 3, 'Online Courses', 200.00, '2022-01-10'), 
 (4, 4, 'Software', 50.00, '2022-05-20'), 
 (5, 5, 'Field Trips', 100.00, '2022-10-31');","WITH StudentSubjectScores AS (
    SELECT
        s.StudentID,
        s.Gender,
        s.State,
        sub.SubjectName,
        ts.Score
    FROM
        Students s
    JOIN
        TestScores ts ON s.StudentID = ts.StudentID
    JOIN
        Subjects sub ON ts.SubjectID = sub.SubjectID
    WHERE
        ts.TestDate BETWEEN '2021-01-01' AND '2023-01-01'
        AND sub.SubjectName IN ('Mathematics', 'English')
),
StudentResources AS (
    SELECT
        s.StudentID,
        s.Gender,
        s.State,
        r.ResourceName,
        r.Cost
    FROM
        Students s
    JOIN
        Resources r ON s.StudentID = r.StudentID
    WHERE
        r.DateUsed BETWEEN '2021-01-01' AND '2023-01-01'
),
SubjectAverageScores AS (
    SELECT
        sss.Gender,
        sss.State,
        sss.SubjectName,
        AVG(sss.Score) AS AverageScore
    FROM
        StudentSubjectScores sss
    GROUP BY
        sss.Gender,
        sss.State,
        sss.SubjectName
),
ResourceTotalCost AS (
    SELECT
        sr.Gender,
        sr.State,
        sr.ResourceName,
        SUM(sr.Cost) AS TotalCost
    FROM
        StudentResources sr
    GROUP BY
        sr.Gender,
        sr.State,
        sr.ResourceName
)
SELECT
    sss.Gender,
    sss.State,
    sss.SubjectName,
    sas.AverageScore,
    rtc.ResourceName,
    rtc.TotalCost
FROM
    StudentSubjectScores sss
LEFT JOIN
    SubjectAverageScores sas ON sss.Gender = sas.Gender AND sss.State = sas.State AND sss.SubjectName = sas.SubjectName
LEFT JOIN
    ResourceTotalCost rtc ON sss.Gender = rtc.Gender AND sss.State = rtc.State AND sss.ResourceName = rtc.ResourceName
ORDER BY
    sss.Gender,
    sss.State,
    sss.SubjectName;","This query calculates the average test scores and total resources spent per student, categorized by gender, state, subject, and resource. 

1. **StudentSubjectScores**: This CTE selects student ID, gender, state, subject name, and score for all students in the 'Mathematics' and 'English' subjects from 2021-01-01 to 2023-01-01. 
2. **StudentResources**: This CTE selects student ID, gender, state, resource name, and cost for all resources used by students from 2021-01-01 to 2023-01-01. 
3. **SubjectAverageScores**: This CTE calculates the average test score for each subject, grouped by gender and state. 
4. **ResourceTotalCost**: This CTE calculates the total cost of resources used for each resource name, grouped by gender and state. 
5. The final SELECT statement joins the above CTEs to display the average test scores and total resources spent per student, categorized by gender, state, subject, and resource. The LEFT JOIN ensures that data is displayed even if there are no scores or resources associated with a particular student, subject, or resource. The results are ordered by gender, state, and subject."
510,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What is the average listing price for single-family homes in the city of San Francisco?,"CREATE TABLE listings (listing_id INT PRIMARY KEY, property_type VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, price INT, bedrooms INT, bathrooms INT, square_footage INT, year_built INT);",SELECT AVG(price) FROM listings WHERE property_type = 'Single Family' AND city = 'San Francisco';,This query selects the average price from the listings table for properties classified as 'Single Family' and located in the city of 'San Francisco'.
511,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What are the top 5 most expensive neighborhoods in Los Angeles based on median listing price?,"CREATE TABLE neighborhoods (neighborhood_id INT PRIMARY KEY, neighborhood_name VARCHAR(255), city VARCHAR(255), state VARCHAR(255), median_listing_price INT);",SELECT neighborhood_name FROM neighborhoods WHERE city = 'Los Angeles' ORDER BY median_listing_price DESC LIMIT 5;,This query selects the names of the top 5 neighborhoods in Los Angeles based on median_listing_price.
512,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,How many properties in Miami have been listed for more than 6 months?,"CREATE TABLE listings (listing_id INT PRIMARY KEY, property_type VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, price INT, bedrooms INT, bathrooms INT, square_footage INT, year_built INT, listing_date DATE);","SELECT COUNT(*) FROM listings WHERE city = 'Miami' AND listing_date < DATE('now', '-6 months');",This query counts the number of listings in Miami where the listing_date is older than 6 months.
513,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What is the average rent for a 2-bedroom apartment in Manhattan?,"CREATE TABLE rentals (rental_id INT PRIMARY KEY, property_type VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, rent INT, bedrooms INT, bathrooms INT, square_footage INT);",SELECT AVG(rent) FROM rentals WHERE property_type = 'Apartment' AND city = 'Manhattan' AND bedrooms = 2;,This query calculates the average rent for 2-bedroom apartments in Manhattan.
514,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,In which state is the average home price the highest?,"CREATE TABLE listings (listing_id INT PRIMARY KEY, property_type VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, price INT, bedrooms INT, bathrooms INT, square_footage INT, year_built INT);",SELECT state FROM listings GROUP BY state ORDER BY AVG(price) DESC LIMIT 1;,"This query retrieves the state with the highest average home price by grouping listings by state, calculating the average price for each state, and then selecting the state with the highest average price."
515,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Retrieve the top 10 customers by total revenue in the month of August 2023, excluding those who have made a purchase in the state of California. Additionally, identify any customers who made a purchase in both California and Texas within the same month.","CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255) NOT NULL,
    email_address VARCHAR(255) UNIQUE,
    phone_number VARCHAR(20),
    state VARCHAR(255)
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT REFERENCES Customers(customer_id),
    order_date DATE NOT NULL,
    order_amount DECIMAL(10,2) NOT NULL,
    state VARCHAR(255)
);

INSERT INTO Customers (customer_id, customer_name, email_address, phone_number, state) VALUES
(1, 'John Doe', 'john.doe@example.com', '555-123-4567', 'New York'),
(2, 'Jane Smith', 'jane.smith@example.com', '555-234-5678', 'California'),
(3, 'Robert Jones', 'robert.jones@example.com', '555-345-6789', 'Texas'),
(4, 'Mary Williams', 'mary.williams@example.com', '555-456-7890', 'Florida'),
(5, 'David Brown', 'david.brown@example.com', '555-567-8901', 'Illinois');

INSERT INTO Orders (order_id, customer_id, order_date, order_amount, state) VALUES
(1, 1, '2023-08-01', 100.00, 'New York'),
(2, 2, '2023-08-02', 50.00, 'California'),
(3, 3, '2023-08-03', 75.00, 'Texas'),
(4, 4, '2023-08-04', 25.00, 'Florida'),
(5, 5, '2023-08-05', 150.00, 'Illinois'),
(6, 1, '2023-08-06', 200.00, 'New York'),
(7, 2, '2023-08-07', 100.00, 'California'),
(8, 3, '2023-08-08', 150.00, 'Texas'),
(9, 4, '2023-08-09', 50.00, 'Florida'),
(10, 5, '2023-08-10', 250.00, 'Illinois'),
(11, 1, '2023-08-11', 300.00, 'New York'),
(12, 2, '2023-08-12', 150.00, 'California'),
(13, 3, '2023-08-13', 200.00, 'Texas'),
(14, 4, '2023-08-14', 75.00, 'Florida'),
(15, 5, '2023-08-15', 350.00, 'Illinois'),
(16, 1, '2023-08-16', 400.00, 'New York'),
(17, 2, '2023-08-17', 200.00, 'Texas'),
(18, 3, '2023-08-18', 250.00, 'Texas'),
(19, 4, '2023-08-19', 100.00, 'Florida'),
(20, 5, '2023-08-20', 450.00, 'Illinois');

CREATE VIEW AugustOrders AS
SELECT * FROM Orders WHERE order_date >= '2023-08-01' AND order_date <= '2023-08-31';","WITH MonthlyRevenue AS (
    SELECT customer_id, SUM(order_amount) AS total_revenue
    FROM AugustOrders
    GROUP BY customer_id
),
CaliforniaCustomers AS (
    SELECT customer_id
    FROM AugustOrders
    WHERE state = 'California'
),
TexasCustomers AS (
    SELECT customer_id
    FROM AugustOrders
    WHERE state = 'Texas'
)

SELECT c.customer_name, mr.total_revenue
FROM Customers c
JOIN MonthlyRevenue mr ON c.customer_id = mr.customer_id
WHERE mr.total_revenue >= (SELECT MAX(total_revenue) FROM MonthlyRevenue) * 0.1
EXCEPT
SELECT c.customer_name, mr.total_revenue
FROM Customers c
JOIN MonthlyRevenue mr ON c.customer_id = mr.customer_id
JOIN CaliforniaCustomers cc ON c.customer_id = cc.customer_id

UNION

SELECT c.customer_name, 'Customer made purchases in both California and Texas'
FROM Customers c
JOIN CaliforniaCustomers cc ON c.customer_id = cc.customer_id
JOIN TexasCustomers tc ON c.customer_id = tc.customer_id;","This query retrieves the top 10 customers by total revenue in August 2023, excluding those who made a purchase in California.

The query first calculates the total revenue for each customer in August using the `MonthlyRevenue` CTE. It then filters out customers who made a purchase in California using the `CaliforniaCustomers` CTE.

The query then uses the `EXCEPT` operator to exclude these customers from the top 10 list.

Finally, the query uses the `UNION` operator to combine the results with a list of customers who made purchases in both California and Texas."
516,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,I want to find all orders placed in the last 30 days that have not yet been shipped.,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, ship_date DATE);
INSERT INTO orders (order_id, customer_id, order_date, ship_date) VALUES
(1, 101, '2023-04-01', '2023-04-05'),
(2, 102, '2023-04-02', '2023-04-06'),
(3, 103, '2023-04-03', '2023-04-07'),
(4, 104, '2023-04-04', '2023-04-08'),
(5, 105, '2023-04-05', '2023-04-09');","SELECT order_id FROM orders WHERE order_date >= DATE('now', '-30 days') AND ship_date IS NULL;",This query selects the order_id from the orders table where the order_date is within the last 30 days and the ship_date is NULL. This means that the orders have not yet been shipped.
517,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,I need to find all customers who have placed more than 10 orders in the past year.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, ship_date DATE);
INSERT INTO customers (customer_id, customer_name, email) VALUES
(101, 'John Doe', 'john.doe@example.com'),
(102, 'Jane Smith', 'jane.smith@example.com'),
(103, 'Bob Johnson', 'bob.johnson@example.com'),
(104, 'Alice Williams', 'alice.williams@example.com'),
(105, 'David Brown', 'david.brown@example.com');
INSERT INTO orders (order_id, customer_id, order_date, ship_date) VALUES
(1, 101, '2023-04-01', '2023-04-05'),
(2, 102, '2023-04-02', '2023-04-06'),
(3, 103, '2023-04-03', '2023-04-07'),
(4, 104, '2023-04-04', '2023-04-08'),
(5, 105, '2023-04-05', '2023-04-09'),
(6, 101, '2023-04-06', '2023-04-10'),
(7, 102, '2023-04-07', '2023-04-11'),
(8, 103, '2023-04-08', '2023-04-12'),
(9, 104, '2023-04-09', '2023-04-13'),
(10, 105, '2023-04-10', '2023-04-14'),
(11, 101, '2023-04-11', '2023-04-15'),
(12, 102, '2023-04-12', '2023-04-16'),
(13, 103, '2023-04-13', '2023-04-17'),
(14, 104, '2023-04-14', '2023-04-18'),
(15, 105, '2023-04-15', '2023-04-19');","SELECT c.customer_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= DATE('now', '-1 year') GROUP BY c.customer_id HAVING COUNT(*) > 10;","This query selects the customer_name from the customers table where the customer has placed more than 10 orders in the past year. It joins the customers and orders tables on the customer_id, filters the orders table to only include orders placed in the past year, groups the orders by customer_id, and then filters the results to only include customers who have placed more than 10 orders."
518,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What are the top 5 most popular products sold in the last quarter?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE order_items (order_id INT, product_id INT, quantity INT);
INSERT INTO products (product_id, product_name, price) VALUES
(1, 'T-Shirt', 10.00),
(2, 'Jeans', 50.00),
(3, 'Hat', 20.00),
(4, 'Shoes', 75.00),
(5, 'Bag', 30.00);
INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 2),
(1, 2, 1),
(2, 3, 1),
(2, 4, 2),
(3, 1, 1),
(3, 5, 1),
(4, 2, 1),
(4, 3, 2),
(5, 4, 1),
(5, 5, 2);","SELECT p.product_name, SUM(oi.quantity) AS total_quantity FROM products p JOIN order_items oi ON p.product_id = oi.product_id JOIN orders o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-3 months') GROUP BY p.product_name ORDER BY total_quantity DESC LIMIT 5;","This query selects the product_name and the sum of the quantity sold for each product in the last quarter. It joins the products, order_items, and orders tables, filters the orders table to only include orders placed in the last quarter, groups the results by product_name, and then orders the results by total_quantity in descending order. Finally, it limits the results to the top 5 products."
519,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Identify all orders placed after January 1st, 2023, and which were either completed or cancelled, ensuring that any cancellations do not include those orders that were subsequently reinstated.","CREATE TABLE orders (order_id INT PRIMARY KEY, order_date DATE, order_status VARCHAR(255));
CREATE TABLE order_updates (order_id INT, update_date DATE, update_type VARCHAR(255));
INSERT INTO orders (order_id, order_date, order_status) VALUES (1, '2023-01-02', 'Completed'), (2, '2023-01-15', 'Cancelled'), (3, '2023-02-01', 'In Progress'), (4, '2023-02-10', 'Completed'), (5, '2023-03-05', 'Cancelled'), (6, '2023-03-15', 'Reinstatement'), (7, '2023-04-01', 'Completed');
INSERT INTO order_updates (order_id, update_date, update_type) VALUES (2, '2023-01-20', 'Reinstatement'), (5, '2023-03-10', 'Reinstatement');",SELECT order_id FROM orders WHERE order_date >= '2023-01-01' AND (order_status = 'Completed' OR order_status = 'Cancelled') EXCEPT SELECT order_id FROM order_updates WHERE update_type = 'Reinstatement' AND update_date >= '2023-01-01';,"This SQL query first selects all orders with an order date after January 1st, 2023, and then filters those orders based on their status. If the order status is either 'Completed' or 'Cancelled', the order ID is included in the result set. However, to ensure that any cancelled orders that were subsequently reinstated are not included, the query uses the EXCEPT operator to exclude any order IDs that appear in the order_updates table with an update type of 'Reinstatement' and an update date after January 1st, 2023."
520,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the total quantity of Product A produced in the last month, and which supplier supplied the materials for that production?","CREATE TABLE Production (ProductionID INT PRIMARY KEY, ProductID INT, Quantity INT, ProductionDate DATE);
CREATE TABLE Inventory (InventoryID INT PRIMARY KEY, ProductID INT, Quantity INT, SupplierID INT);
CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255), Country VARCHAR(255));
INSERT INTO Production (ProductionID, ProductID, Quantity, ProductionDate) VALUES (1, 1, 100, '2023-04-01'), (2, 2, 50, '2023-04-05'), (3, 1, 150, '2023-04-10'), (4, 2, 75, '2023-04-15'), (5, 1, 200, '2023-04-20'), (6, 2, 100, '2023-04-25');
INSERT INTO Inventory (InventoryID, ProductID, Quantity, SupplierID) VALUES (1, 1, 300, 1), (2, 2, 100, 2), (3, 1, 250, 1), (4, 2, 150, 3), (5, 1, 100, 2), (6, 2, 75, 1);
INSERT INTO Suppliers (SupplierID, SupplierName, Country) VALUES (1, 'Acme Materials', 'USA'), (2, 'Global Supplies', 'China'), (3, 'Euro Components', 'Germany');","SELECT p.Quantity, s.SupplierName
FROM Production p
JOIN Inventory i ON p.ProductID = i.ProductID
JOIN Suppliers s ON i.SupplierID = s.SupplierID
WHERE p.ProductID = 1 AND p.ProductionDate BETWEEN DATE('now', '-1 month') AND DATE('now')
GROUP BY s.SupplierName;","This query first joins the Production, Inventory, and Suppliers tables on the ProductID and SupplierID columns, respectively.
Then, it filters the results to include only records for Product A (ProductID = 1) produced in the last month (ProductionDate between 'now' - 1 month and 'now').
Finally, it groups the results by supplier name and selects the total quantity produced and the supplier name for each group."
521,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How do I check the total number of defective products returned by each customer in the last month?,"CREATE TABLE customer (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255),
  customer_address VARCHAR(255),
  customer_email VARCHAR(255),
  customer_phone VARCHAR(255)
);

CREATE TABLE product (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255),
  product_description TEXT,
  product_price DECIMAL(10,2),
  product_category VARCHAR(255)
);

CREATE TABLE order_item (
  order_item_id INT PRIMARY KEY,
  order_id INT,
  product_id INT,
  quantity INT,
  price DECIMAL(10,2),
  FOREIGN KEY (order_id) REFERENCES order (order_id),
  FOREIGN KEY (product_id) REFERENCES product (product_id)
);

CREATE TABLE order (
  order_id INT PRIMARY KEY,
  customer_id INT,
  order_date DATE,
  order_status VARCHAR(255),
  FOREIGN KEY (customer_id) REFERENCES customer (customer_id)
);

CREATE TABLE return (
  return_id INT PRIMARY KEY,
  order_item_id INT,
  return_date DATE,
  return_reason VARCHAR(255),
  FOREIGN KEY (order_item_id) REFERENCES order_item (order_item_id)
);","SELECT c.customer_name, COUNT(r.return_id) AS total_defective_products
FROM customer c
JOIN order o ON c.customer_id = o.customer_id
JOIN order_item oi ON o.order_id = oi.order_id
JOIN product p ON oi.product_id = p.product_id
JOIN ""return"" r ON oi.order_item_id = r.order_item_id
WHERE r.return_date BETWEEN DATE('now', '-1 month') AND DATE('now')
GROUP BY c.customer_name
ORDER BY total_defective_products DESC;","This SQL query retrieves the total number of defective products returned by each customer in the last month. It joins five tables: customer, order, order_item, product, and return. The query filters the return table to include only returns that occurred in the last month and then groups the results by customer name. Finally, it orders the results by the total number of defective products returned, from highest to lowest."
522,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which suppliers have delivered late shipments in the last quarter?,"CREATE TABLE supplier (
  supplier_id INT PRIMARY KEY,
  supplier_name VARCHAR(255),
  supplier_address VARCHAR(255),
  supplier_email VARCHAR(255),
  supplier_phone VARCHAR(255)
);

CREATE TABLE purchase_order (
  purchase_order_id INT PRIMARY KEY,
  supplier_id INT,
  order_date DATE,
  delivery_date DATE,
  order_status VARCHAR(255),
  FOREIGN KEY (supplier_id) REFERENCES supplier (supplier_id)
);

CREATE TABLE product (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255),
  product_description TEXT,
  product_price DECIMAL(10,2),
  product_category VARCHAR(255)
);

CREATE TABLE purchase_order_item (
  purchase_order_item_id INT PRIMARY KEY,
  purchase_order_id INT,
  product_id INT,
  quantity INT,
  price DECIMAL(10,2),
  FOREIGN KEY (purchase_order_id) REFERENCES purchase_order (purchase_order_id),
  FOREIGN KEY (product_id) REFERENCES product (product_id)
);","SELECT s.supplier_name
FROM supplier s
JOIN purchase_order po ON s.supplier_id = po.supplier_id
WHERE po.order_date BETWEEN DATE('now', '-3 months') AND DATE('now')
AND po.delivery_date > po.order_date + INTERVAL '30 days'
ORDER BY s.supplier_name;",This SQL query retrieves the names of suppliers who have delivered late shipments in the last quarter. It joins the supplier and purchase_order tables and filters the results to include only purchase orders that were placed in the last quarter and where the delivery date was more than 30 days after the order date. The results are ordered by supplier name.
523,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many units of each product were produced in the last week?,"CREATE TABLE product (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255),
  product_description TEXT,
  product_price DECIMAL(10,2),
  product_category VARCHAR(255)
);

CREATE TABLE production_order (
  production_order_id INT PRIMARY KEY,
  product_id INT,
  order_date DATE,
  quantity INT,
  FOREIGN KEY (product_id) REFERENCES product (product_id)
);

CREATE TABLE production_run (
  production_run_id INT PRIMARY KEY,
  production_order_id INT,
  start_date DATE,
  end_date DATE,
  quantity_produced INT,
  FOREIGN KEY (production_order_id) REFERENCES production_order (production_order_id)
);","SELECT p.product_name, SUM(pr.quantity_produced) AS total_units_produced
FROM product p
JOIN production_order po ON p.product_id = po.product_id
JOIN production_run pr ON po.production_order_id = pr.production_order_id
WHERE pr.start_date BETWEEN DATE('now', '-7 days') AND DATE('now')
GROUP BY p.product_name
ORDER BY total_units_produced DESC;","This SQL query retrieves the total number of units of each product that were produced in the last week. It joins three tables: product, production_order, and production_run. The query filters the production_run table to include only production runs that started in the last week and then groups the results by product name. Finally, it orders the results by the total number of units produced, from highest to lowest."
524,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the current inventory level for each product?,"CREATE TABLE product (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255),
  product_description TEXT,
  product_price DECIMAL(10,2),
  product_category VARCHAR(255)
);

CREATE TABLE inventory (
  inventory_id INT PRIMARY KEY,
  product_id INT,
  quantity INT,
  FOREIGN KEY (product_id) REFERENCES product (product_id)
);

CREATE TABLE purchase_order_item (
  purchase_order_item_id INT PRIMARY KEY,
  purchase_order_id INT,
  product_id INT,
  quantity INT,
  price DECIMAL(10,2),
  FOREIGN KEY (purchase_order_id) REFERENCES purchase_order (purchase_order_id),
  FOREIGN KEY (product_id) REFERENCES product (product_id)
);

CREATE TABLE production_run (
  production_run_id INT PRIMARY KEY,
  production_order_id INT,
  start_date DATE,
  end_date DATE,
  quantity_produced INT,
  FOREIGN KEY (production_order_id) REFERENCES production_order (production_order_id)
);

CREATE TABLE ""return"" (
  return_id INT PRIMARY KEY,
  order_item_id INT,
  return_date DATE,
  return_reason VARCHAR(255),
  FOREIGN KEY (order_item_id) REFERENCES order_item (order_item_id)
);","SELECT p.product_name, i.quantity AS current_inventory
FROM product p
JOIN inventory i ON p.product_id = i.product_id
WHERE i.quantity > 0
ORDER BY p.product_name;",This SQL query retrieves the current inventory level for each product. It joins the product and inventory tables and filters the results to include only products with a positive inventory level. The results are ordered by product name.
525,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",How can I view a list of patients who have been diagnosed with diabetes and have a history of taking metformin?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), birthdate DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, phone_number VARCHAR(255), email VARCHAR(255));
CREATE TABLE diagnoses (patient_id INT, diagnosis_date DATE, diagnosis_code VARCHAR(255), PRIMARY KEY (patient_id, diagnosis_date), FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE medications (patient_id INT, medication_name VARCHAR(255), start_date DATE, end_date DATE, dosage VARCHAR(255), PRIMARY KEY (patient_id, medication_name, start_date), FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, name, birthdate, address, city, state, zipcode, phone_number, email) VALUES
(1, 'John Doe', '1970-01-01', '123 Main St', 'Anytown', 'CA', 91234, '555-123-4567', 'john.doe@example.com'),
(2, 'Jane Smith', '1975-02-02', '456 Elm St', 'Anytown', 'CA', 91234, '555-234-5678', 'jane.smith@example.com'),
(3, 'Robert Jones', '1980-03-03', '789 Oak St', 'Anytown', 'CA', 91234, '555-345-6789', 'robert.jones@example.com');
INSERT INTO diagnoses (patient_id, diagnosis_date, diagnosis_code) VALUES
(1, '2018-01-01', 'E11.9'),
(2, '2019-02-02', 'E11.9'),
(3, '2020-03-03', 'T2DM');
INSERT INTO medications (patient_id, medication_name, start_date, end_date, dosage) VALUES
(1, 'Metformin', '2018-01-02', NULL, '500mg twice daily'),
(2, 'Metformin', '2019-02-03', NULL, '1000mg twice daily'),
(3, 'Insulin', '2020-03-04', NULL, '20 units twice daily');","SELECT p.name, d.diagnosis_date, m.medication_name, m.start_date 
FROM patients p
JOIN diagnoses d ON p.patient_id = d.patient_id
JOIN medications m ON p.patient_id = m.patient_id
WHERE d.diagnosis_code = 'E11.9' AND m.medication_name = 'Metformin';","This query joins the `patients`, `diagnoses`, and `medications` tables to identify patients who have been diagnosed with diabetes (E11.9) and have a history of taking metformin. The query selects the patient's name, diagnosis date, medication name, and start date of the medication."
526,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the different types of medications used to treat high blood pressure?,"CREATE TABLE medications (medication_id INT PRIMARY KEY, medication_name VARCHAR(255), medication_type VARCHAR(255), indication VARCHAR(255));
INSERT INTO medications (medication_id, medication_name, medication_type, indication) VALUES
(1, 'Amlodipine', 'Calcium Channel Blocker', 'High Blood Pressure'),
(2, 'Atenolol', 'Beta-Blocker', 'High Blood Pressure'),
(3, 'Lisinopril', 'ACE Inhibitor', 'High Blood Pressure'),
(4, 'Hydrochlorothiazide', 'Diuretic', 'High Blood Pressure'),
(5, 'Losartan', 'Angiotensin II Receptor Blocker', 'High Blood Pressure');",SELECT DISTINCT medication_type FROM medications WHERE indication = 'High Blood Pressure';,This query selects the distinct medication types from the `medications` table where the indication is 'High Blood Pressure'.
527,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Which patients have been diagnosed with both diabetes and hypertension?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255));
CREATE TABLE diagnoses (patient_id INT, diagnosis_date DATE, diagnosis_code VARCHAR(255), PRIMARY KEY (patient_id, diagnosis_date), FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, name) VALUES
(1, 'John Doe'),
(2, 'Jane Smith'),
(3, 'Robert Jones');
INSERT INTO diagnoses (patient_id, diagnosis_date, diagnosis_code) VALUES
(1, '2018-01-01', 'E11.9'),
(2, '2019-02-02', 'E11.9'),
(3, '2020-03-03', 'I10');
INSERT INTO diagnoses (patient_id, diagnosis_date, diagnosis_code) VALUES
(1, '2018-01-02', 'I10'),
(2, '2019-02-03', 'I10');","SELECT p.name FROM patients p
JOIN diagnoses d1 ON p.patient_id = d1.patient_id
JOIN diagnoses d2 ON p.patient_id = d2.patient_id
WHERE d1.diagnosis_code = 'E11.9' AND d2.diagnosis_code = 'I10';","This query joins the `patients` table with the `diagnoses` table twice, once for each diagnosis code (E11.9 for diabetes and I10 for hypertension). It then selects the names of patients who have both diagnoses."
528,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the names of the patients who have been prescribed a specific medication by a specific doctor?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255));
CREATE TABLE medications (medication_id INT PRIMARY KEY, medication_name VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT, medication_id INT, doctor_id INT, prescription_date DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));
CREATE TABLE doctors (doctor_id INT PRIMARY KEY, name VARCHAR(255));
INSERT INTO patients (patient_id, name) VALUES
(1, 'John Doe'),
(2, 'Jane Smith'),
(3, 'Robert Jones');
INSERT INTO medications (medication_id, medication_name) VALUES
(1, 'Metformin'),
(2, 'Atorvastatin'),
(3, 'Lisinopril');
INSERT INTO prescriptions (prescription_id, patient_id, medication_id, doctor_id, prescription_date) VALUES
(1, 1, 1, 10, '2018-01-01'),
(2, 2, 2, 20, '2019-02-02'),
(3, 3, 3, 30, '2020-03-03');
INSERT INTO doctors (doctor_id, name) VALUES
(10, 'Dr. Smith'),
(20, 'Dr. Jones'),
(30, 'Dr. Brown');","SELECT p.name FROM patients p
JOIN prescriptions pr ON p.patient_id = pr.patient_id
JOIN medications m ON pr.medication_id = m.medication_id
JOIN doctors d ON pr.doctor_id = d.doctor_id
WHERE m.medication_name = 'Metformin' AND d.name = 'Dr. Smith';","This query joins the `patients`, `prescriptions`, `medications`, and `doctors` tables. It then selects the names of patients who have been prescribed Metformin by Dr. Smith."
529,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Which countries have reported the highest number of adverse effects for the drug 'Paxlovid'?,"CREATE TABLE adverse_effects ( 
  country VARCHAR(255),
  drug VARCHAR(255),
  number_of_effects INT
); 

INSERT INTO adverse_effects (country, drug, number_of_effects) 
VALUES ('United States', 'Paxlovid', 1500),
       ('Germany', 'Paxlovid', 750),
       ('France', 'Paxlovid', 500),
       ('Italy', 'Paxlovid', 350),
       ('Spain', 'Paxlovid', 250),
       ('United Kingdom', 'Paxlovid', 200),
       ('Canada', 'Paxlovid', 150),
       ('Australia', 'Paxlovid', 100),
       ('Japan', 'Paxlovid', 75),
       ('Brazil', 'Paxlovid', 50); 

CREATE TABLE demographics ( 
  country VARCHAR(255),
  population INT
); 

INSERT INTO demographics (country, population) 
VALUES ('United States', 330000000),
       ('Germany', 83000000),
       ('France', 67000000),
       ('Italy', 60000000),
       ('Spain', 47000000),
       ('United Kingdom', 68000000),
       ('Canada', 38000000),
       ('Australia', 26000000),
       ('Japan', 126000000),
       ('Brazil', 210000000);","SELECT DISTINCT AE.country 
FROM adverse_effects AE 
JOIN demographics DE ON AE.country = DE.country 
WHERE AE.drug = 'Paxlovid' 
ORDER BY AE.number_of_effects DESC 
LIMIT 5;","1. We join the 'adverse_effects' and 'demographics' tables on the 'country' column.
2. We filter the results to only include records where the drug is 'Paxlovid'.
3. We order the results by the number of adverse effects in descending order.
4. We limit the results to the top 5 countries with the highest number of adverse effects.
5. We use the 'DISTINCT' keyword to remove duplicate country names."
530,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a crosstab table that shows the count of artworks by artist gender for each year from 2010 to 2022.,"CREATE TABLE artworks (artist_id INT PRIMARY KEY, artwork_title VARCHAR(255) NOT NULL, creation_date DATE, artist_gender VARCHAR(10) NOT NULL, sale_price DECIMAL(10,2), gallery_id INT, FOREIGN KEY (gallery_id) REFERENCES galleries(gallery_id));
CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, birth_year INT, death_year INT, nationality VARCHAR(255));
CREATE TABLE galleries (gallery_id INT PRIMARY KEY, gallery_name VARCHAR(255) NOT NULL, city VARCHAR(255), country VARCHAR(255));","SELECT
    SUBSTRING(creation_date, 1, 4) AS year,
    artist_gender,
    COUNT(*) AS num_artworks
FROM artworks
WHERE creation_date BETWEEN '2010-01-01' AND '2022-12-31'
GROUP BY year, artist_gender
PIVOT (COUNT(*) FOR artist_gender IN ('Male', 'Female', 'Non-binary', 'Other'));","1. We create a new table by pivoting the count of artworks by artist gender.
2. The table displays the artwork count for each year from 2010 to 2022.
3. The SQL code uses the `PIVOT` function to group the artwork count by the year and artist gender."
531,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a view that shows the average sale price of artworks by artist nationality for each year from 2015 to 2021.,"CREATE TABLE artworks (artist_id INT PRIMARY KEY, artwork_title VARCHAR(255) NOT NULL, creation_date DATE, artist_gender VARCHAR(10) NOT NULL, sale_price DECIMAL(10,2), gallery_id INT, FOREIGN KEY (gallery_id) REFERENCES galleries(gallery_id));
CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, birth_year INT, death_year INT, nationality VARCHAR(255));
CREATE TABLE galleries (gallery_id INT PRIMARY KEY, gallery_name VARCHAR(255) NOT NULL, city VARCHAR(255), country VARCHAR(255));","CREATE VIEW average_sale_price_by_nationality AS
SELECT
    SUBSTRING(creation_date, 1, 4) AS year,
    nationality,
    AVG(sale_price) AS avg_sale_price
FROM artworks
WHERE creation_date BETWEEN '2015-01-01' AND '2021-12-31'
GROUP BY year, nationality;","1. We create a view named `average_sale_price_by_nationality`.
2. The view displays the average sale price of artworks for each year and artist nationality from 2015 to 2021."
532,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table that shows the total number of artworks sold by each gallery in 2023, sorted by the number of artworks sold in descending order.","CREATE TABLE artworks (artist_id INT PRIMARY KEY, artwork_title VARCHAR(255) NOT NULL, creation_date DATE, artist_gender VARCHAR(10) NOT NULL, sale_price DECIMAL(10,2), gallery_id INT, FOREIGN KEY (gallery_id) REFERENCES galleries(gallery_id));
CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, birth_year INT, death_year INT, nationality VARCHAR(255));
CREATE TABLE galleries (gallery_id INT PRIMARY KEY, gallery_name VARCHAR(255) NOT NULL, city VARCHAR(255), country VARCHAR(255));","SELECT
    galleries.gallery_name,
    COUNT(*) AS num_artworks_sold
FROM artworks
JOIN galleries ON artworks.gallery_id = galleries.gallery_id
WHERE SUBSTRING(creation_date, 1, 4) = '2023'
GROUP BY galleries.gallery_name
ORDER BY num_artworks_sold DESC;","1. We join the `artworks` and `galleries` tables on the `gallery_id` column.
2. We filter the results to include artworks sold in 2023.
3. We group the results by gallery name and count the number of artworks sold for each gallery.
4. We sort the results in descending order by the number of artworks sold."
533,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a view that shows the top 10 artists with the highest total sale revenue in 2022.,"CREATE TABLE artworks (artist_id INT PRIMARY KEY, artwork_title VARCHAR(255) NOT NULL, creation_date DATE, artist_gender VARCHAR(10) NOT NULL, sale_price DECIMAL(10,2), gallery_id INT, FOREIGN KEY (gallery_id) REFERENCES galleries(gallery_id));
CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, birth_year INT, death_year INT, nationality VARCHAR(255));
CREATE TABLE galleries (gallery_id INT PRIMARY KEY, gallery_name VARCHAR(255) NOT NULL, city VARCHAR(255), country VARCHAR(255));","CREATE VIEW top_10_artists_by_revenue AS
SELECT
    artists.artist_name,
    SUM(artworks.sale_price) AS total_revenue
FROM artworks
JOIN artists ON artworks.artist_id = artists.artist_id
WHERE SUBSTRING(creation_date, 1, 4) = '2022'
GROUP BY artists.artist_name
ORDER BY total_revenue DESC
LIMIT 10;","1. We join the `artworks` and `artists` tables on the `artist_id` column.
2. We filter the results to include artworks sold in 2022.
3. We group the results by artist name and calculate the total revenue for each artist.
4. We sort the results in descending order by total revenue.
5. We limit the results to the top 10 artists."
534,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many artists are in the database?,"CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL);",SELECT COUNT(*) FROM artists;,"This SQL query selects the number of rows from the artists table, which represents the total number of artists in the database."
535,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Find the top 10 diseases with the highest average cost per patient in the last three months, grouped by region.","-- Sample Table: Diseases
CREATE TABLE Diseases (
    DiseaseID INT PRIMARY KEY,
    DiseaseName VARCHAR(255) NOT NULL
);

-- Sample Table: PatientDiagnoses
CREATE TABLE PatientDiagnoses (
    PatientID INT,
    DiagnosisDate DATE,
    DiseaseID INT,
    Cost DECIMAL(10,2),
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID),
    FOREIGN KEY (DiseaseID) REFERENCES Diseases(DiseaseID)
);

-- Sample Table: Patients
CREATE TABLE Patients (
    PatientID INT PRIMARY KEY,
    PatientName VARCHAR(255) NOT NULL,
    Region VARCHAR(255) NOT NULL
);

-- Sample Table: Dates
CREATE TABLE Dates (
    DateID INT PRIMARY KEY,
    CalDate DATE NOT NULL
);

-- Sample View: vw_PatientDiagnosesWithDates
CREATE VIEW vw_PatientDiagnosesWithDates AS
SELECT
    pd.PatientID,
    d.CalDate,
    pd.DiseaseID,
    pd.Cost
FROM
    PatientDiagnoses pd
INNER JOIN Dates d ON d.DateID = pd.DiagnosisDate;","WITH RankedCosts AS (
    SELECT
        d.DiseaseID,
        d.Region,
        d.Cost,
        ROW_NUMBER() OVER (PARTITION BY d.Region ORDER BY d.Cost DESC) AS Rank
    FROM vw_PatientDiagnosesWithDates AS d
    WHERE d.CalDate BETWEEN DATEADD(month, -3, GETDATE()) AND GETDATE()
)
SELECT
    dc.DiseaseID,
    dc.Region,
    dc.Cost
FROM RankedCosts dc
WHERE dc.Rank <= 10
ORDER BY dc.Region, dc.Cost DESC;","This SQL statement first calculates the average cost per patient for each disease in the last three months, grouped by region. It then ranks the diseases within each region by their average cost. Finally, it selects the top 10 diseases with the highest average cost per patient in each region."
536,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Rank patients by the total number of distinct diagnoses they have received in the past year, and then identify the top 10 patients with the most diagnoses.","-- Sample Table: Diseases
CREATE TABLE Diseases (
    DiseaseID INT PRIMARY KEY,
    DiseaseName VARCHAR(255) NOT NULL
);

-- Sample Table: PatientDiagnoses
CREATE TABLE PatientDiagnoses (
    PatientID INT,
    DiagnosisDate DATE,
    DiseaseID INT,
    Cost DECIMAL(10,2),
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID),
    FOREIGN KEY (DiseaseID) REFERENCES Diseases(DiseaseID)
);

-- Sample Table: Patients
CREATE TABLE Patients (
    PatientID INT PRIMARY KEY,
    PatientName VARCHAR(255) NOT NULL,
    Region VARCHAR(255) NOT NULL
);

-- Sample Table: Dates
CREATE TABLE Dates (
    DateID INT PRIMARY KEY,
    CalDate DATE NOT NULL
);

-- Sample View: vw_PatientDiagnosesWithDates
CREATE VIEW vw_PatientDiagnosesWithDates AS
SELECT
    pd.PatientID,
    d.CalDate,
    pd.DiseaseID,
    pd.Cost
FROM
    PatientDiagnoses pd
INNER JOIN Dates d ON d.DateID = pd.DiagnosisDate;","WITH PatientDiagnosisCounts AS (
    SELECT
        p.PatientID,
        COUNT(DISTINCT pd.DiseaseID) AS DiagnosisCount
    FROM
        Patients p
    INNER JOIN PatientDiagnoses pd ON p.PatientID = pd.PatientID
    INNER JOIN Dates d ON d.DateID = pd.DiagnosisDate
    WHERE d.CalDate BETWEEN DATEADD(year, -1, GETDATE()) AND GETDATE()
    GROUP BY p.PatientID
)
SELECT
    p.PatientID,
    p.PatientName,
    p.Region,
    pdc.DiagnosisCount
FROM
    Patients p
INNER JOIN PatientDiagnosisCounts pdc ON p.PatientID = pdc.PatientID
ORDER BY pdc.DiagnosisCount DESC
LIMIT 10;","This SQL statement first calculates the total number of distinct diagnoses each patient has received in the past year. It then selects the top 10 patients with the most diagnoses, ordered by their diagnosis count."
537,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Identify the top three most commonly prescribed medications for each disease, along with the total number of prescriptions for each medication-disease combination.","-- Sample Table: Medications
CREATE TABLE Medications (
    MedicationID INT PRIMARY KEY,
    MedicationName VARCHAR(255) NOT NULL
);

-- Sample Table: Prescriptions
CREATE TABLE Prescriptions (
    PrescriptionID INT PRIMARY KEY,
    PatientID INT,
    MedicationID INT,
    PrescriptionDate DATE,
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID),
    FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)
);

-- Sample Table: Diseases
CREATE TABLE Diseases (
    DiseaseID INT PRIMARY KEY,
    DiseaseName VARCHAR(255) NOT NULL
);

-- Sample Table: PatientDiagnoses
CREATE TABLE PatientDiagnoses (
    PatientID INT,
    DiagnosisDate DATE,
    DiseaseID INT,
    Cost DECIMAL(10,2),
    FOREIGN KEY (PatientID) REFERENCES Patients(PatientID),
    FOREIGN KEY (DiseaseID) REFERENCES Diseases(DiseaseID)
);

-- Sample Table: Patients
CREATE TABLE Patients (
    PatientID INT PRIMARY KEY,
    PatientName VARCHAR(255) NOT NULL,
    Region VARCHAR(255) NOT NULL
);

-- Sample Table: Dates
CREATE TABLE Dates (
    DateID INT PRIMARY KEY,
    CalDate DATE NOT NULL
);

-- Sample View: vw_PatientDiagnosesWithDates
CREATE VIEW vw_PatientDiagnosesWithDates AS
SELECT
    pd.PatientID,
    d.CalDate,
    pd.DiseaseID,
    pd.Cost
FROM
    PatientDiagnoses pd
INNER JOIN Dates d ON d.DateID = pd.DiagnosisDate;","SELECT
    d.DiseaseName,
    m.MedicationName,
    COUNT(*) AS PrescriptionCount
FROM
    Diseases d
INNER JOIN PatientDiagnoses pd ON d.DiseaseID = pd.DiseaseID
INNER JOIN Prescriptions p ON pd.PatientID = p.PatientID
INNER JOIN Medications m ON p.MedicationID = m.MedicationID
GROUP BY d.DiseaseName, m.MedicationName
ORDER BY d.DiseaseName, PrescriptionCount DESC;","This SQL statement joins the Diseases, PatientDiagnoses, Prescriptions, and Medications tables to identify the most commonly prescribed medications for each disease. It groups the results by disease and medication name, and then counts the number of prescriptions for each combination."
538,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Rank all patients by the number of unique medications they have been prescribed, starting with the patient who has been prescribed the most unique medications.","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE); 
CREATE TABLE medications (medication_id INT PRIMARY KEY, medication_name VARCHAR(255), patient_id INT, date_prescribed DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));","SELECT p.first_name, p.last_name, COUNT(DISTINCT m.medication_name) AS num_unique_medications, ROW_NUMBER() OVER (ORDER BY COUNT(DISTINCT m.medication_name) DESC) AS patient_rank FROM patients p JOIN medications m ON p.patient_id = m.patient_id GROUP BY p.patient_id ORDER BY patient_rank;","This query first joins the `patients` and `medications` tables on the `patient_id` field. Then, it groups the data by patient ID and counts the number of distinct medication names for each patient using the `COUNT(DISTINCT m.medication_name)` expression. It also uses the `ROW_NUMBER()` window function to rank the patients in descending order of the number of unique medications they have been prescribed. Finally, it selects the first name, last name, number of unique medications, and patient rank for each patient."
539,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Identify patients who have been diagnosed with both diabetes and hypertension, and calculate the average length of time between their diagnoses.","CREATE TABLE patients (  patient_id INT PRIMARY KEY,  first_name VARCHAR(255),  last_name VARCHAR(255),  date_of_birth DATE,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  phone_number VARCHAR(255),  email VARCHAR(255));

CREATE TABLE diagnoses (  diagnosis_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  diagnosis_code VARCHAR(255),  diagnosis_date DATE,  FOREIGN KEY (patient_id) REFERENCES patients(patient_id));

INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address, city, state, zip_code, phone_number, email) VALUES
(1, 'John', 'Smith', '1980-01-01', '123 Main St', 'Anytown', 'CA', 91234, '555-123-4567', 'john.smith@email.com'),
(2, 'Jane', 'Doe', '1985-02-02', '456 Oak Ave', 'Anytown', 'CA', 91234, '555-234-5678', 'jane.doe@email.com'),
(3, 'Robert', 'Jones', '1990-03-03', '789 Elm St', 'Anytown', 'CA', 91234, '555-345-6789', 'robert.jones@email.com');

INSERT INTO diagnoses (diagnosis_id, patient_id, diagnosis_code, diagnosis_date) VALUES
(1, 1, 'E11.9', '2010-01-01'),
(2, 2, 'I10', '2015-02-02'),
(3, 3, 'E11.9', '2020-03-03'),
(4, 1, 'I10', '2021-04-04');","SELECT p.first_name, p.last_name, AVG(DATEDIFF(d, d1.diagnosis_date, d2.diagnosis_date)) AS avg_time_between_diagnoses
FROM patients p
JOIN diagnoses d1 ON p.patient_id = d1.patient_id
JOIN diagnoses d2 ON p.patient_id = d2.patient_id
WHERE d1.diagnosis_code = 'E11.9' AND d2.diagnosis_code = 'I10'
GROUP BY p.patient_id, p.first_name, p.last_name;","This SQL query identifies patients who have been diagnosed with both diabetes (E11.9) and hypertension (I10) and calculates the average length of time between their diagnoses.

The query joins the `patients` table with the `diagnoses` table twice, once for each diagnosis code. The `d1` alias is used for the diabetes diagnoses and the `d2` alias is used for the hypertension diagnoses.

The `WHERE` clause filters the results to only include patients who have both diagnoses.

The `GROUP BY` clause groups the results by patient ID, first name, and last name.

The `AVG()` function calculates the average length of time between the two diagnoses for each patient.

The `DATEDIFF()` function calculates the difference in days between the two diagnosis dates.

The `SELECT` clause returns the patient's first name, last name, and the average time between diagnoses."
540,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Show me the medical history of all patients who have been diagnosed with diabetes in the last year, including their demographics, diagnosis date, and medications.","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255));
CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_code VARCHAR(255), diagnosis_date DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE medications (medication_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_name VARCHAR(255), dosage VARCHAR(255), start_date DATE, end_date DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address, city, state, zip_code, phone_number, email) VALUES
(1, 'John', 'Smith', '1980-01-01', '123 Main St', 'Anytown', 'CA', 91234, '555-123-4567', 'john.smith@email.com'),
(2, 'Jane', 'Doe', '1985-02-02', '456 Oak Ave', 'Anytown', 'CA', 91234, '555-234-5678', 'jane.doe@email.com'),
(3, 'Robert', 'Jones', '1990-03-03', '789 Pine St', 'Anytown', 'CA', 91234, '555-345-6789', 'robert.jones@email.com');
INSERT INTO diagnoses (diagnosis_id, patient_id, diagnosis_code, diagnosis_date) VALUES
(1, 1, 'E11.9', '2022-10-26'),
(2, 2, 'E10.9', '2022-11-15'),
(3, 3, 'E13.9', '2022-12-05');
INSERT INTO medications (medication_id, patient_id, medication_name, dosage, start_date, end_date) VALUES
(1, 1, 'Metformin', '500mg', '2022-10-26', NULL),
(2, 2, 'Insulin', '10 units', '2022-11-15', NULL),
(3, 3, 'Glipizide', '5mg', '2022-12-05', NULL);","SELECT p.first_name, p.last_name, p.date_of_birth, d.diagnosis_date, m.medication_name, m.dosage
FROM patients p
JOIN diagnoses d ON p.patient_id = d.patient_id
JOIN medications m ON p.patient_id = m.patient_id
WHERE d.diagnosis_code LIKE 'E11%' OR d.diagnosis_code LIKE 'E10%' OR d.diagnosis_code LIKE 'E13%'
AND d.diagnosis_date >= DATE('now', '-1 year');","This SQL query retrieves the medical history of all patients who have been diagnosed with diabetes in the last year. It joins the `patients`, `diagnoses`, and `medications` tables on the `patient_id` column. The `WHERE` clause filters the results to include only patients with a diagnosis code that starts with 'E11', 'E10', or 'E13' and a diagnosis date within the last year. The `SELECT` clause specifies the columns to be retrieved, including the patient's name, date of birth, diagnosis date, medication name, and dosage."
541,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the email address for patient with ID 2 to 'jane.new.email@email.com'.,"CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255));
INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address, city, state, zip_code, phone_number, email) VALUES
(1, 'John', 'Smith', '1980-01-01', '123 Main St', 'Anytown', 'CA', 91234, '555-123-4567', 'john.smith@email.com'),
(2, 'Jane', 'Doe', '1985-02-02', '456 Oak Ave', 'Anytown', 'CA', 91234, '555-234-5678', 'jane.doe@email.com'),
(3, 'Robert', 'Jones', '1990-03-03', '789 Pine St', 'Anytown', 'CA', 91234, '555-345-6789', 'robert.jones@email.com');",UPDATE patients SET email = 'jane.new.email@email.com' WHERE patient_id = 2;,This SQL statement updates the email address for the patient with ID 2 to 'jane.new.email@email.com'. The `UPDATE` statement specifies the table to be updated (`patients`) and the column to be updated (`email`). The `SET` clause provides the new value for the email address. The `WHERE` clause filters the results to include only the patient with ID 2.
542,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Delete the medication record for patient with ID 1 and medication name 'Metformin'.,"CREATE TABLE medications (medication_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_name VARCHAR(255), dosage VARCHAR(255), start_date DATE, end_date DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO medications (medication_id, patient_id, medication_name, dosage, start_date, end_date) VALUES
(1, 1, 'Metformin', '500mg', '2022-10-26', NULL),
(2, 2, 'Insulin', '10 units', '2022-11-15', NULL),
(3, 3, 'Glipizide', '5mg', '2022-12-05', NULL);",DELETE FROM medications WHERE patient_id = 1 AND medication_name = 'Metformin';,This SQL statement deletes the medication record for the patient with ID 1 and medication name 'Metformin'. The `DELETE` statement specifies the table to be deleted from (`medications`). The `WHERE` clause filters the results to include only the medication record with patient ID 1 and medication name 'Metformin'.
543,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Given the following data of patient demographics and treatments, remove the record for patient_id 25.","CREATE TABLE patient_demographics (
    patient_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    date_of_birth DATE NOT NULL,
    address VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL,
    state VARCHAR(255) NOT NULL,
    zip_code INT NOT NULL
);

CREATE TABLE treatments (
    treatment_id INT PRIMARY KEY,
    patient_id INT REFERENCES patient_demographics(patient_id),
    treatment_name VARCHAR(255) NOT NULL,
    treatment_date DATE NOT NULL,
    treatment_provider VARCHAR(255) NOT NULL
);

INSERT INTO patient_demographics (patient_id, first_name, last_name, date_of_birth, address, city, state, zip_code) VALUES
(1, 'Alice', 'Smith', '1990-01-01', '123 Main Street', 'Anytown', 'CA', 91234),
(2, 'Bob', 'Johnson', '1985-02-15', '456 Elm Street', 'Anytown', 'CA', 91234),
(3, 'Charlie', 'Brown', '1970-03-20', '789 Oak Street', 'Anytown', 'CA', 91234);

INSERT INTO treatments (treatment_id, patient_id, treatment_name, treatment_date, treatment_provider) VALUES
(1, 1, 'Physical Therapy', '2023-04-01', 'Dr. Jones'),
(2, 2, 'Occupational Therapy', '2023-04-05', 'Dr. Smith'),
(3, 3, 'Speech Therapy', '2023-04-10', 'Dr. Lee');",DELETE FROM patient_demographics WHERE patient_id = 25;,This SQL statement will delete the record for patient_id 25 from the patient_demographics table.
544,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the email address of a patient named 'John Smith' to 'john.smith@newmail.com'.,"CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255));
INSERT INTO patients (patient_id, first_name, last_name, email) VALUES (1, 'John', 'Smith', 'john.smith@oldmail.com');",UPDATE patients SET email = 'john.smith@newmail.com' WHERE first_name = 'John' AND last_name = 'Smith';,This SQL statement updates the email address of the patient with the first name 'John' and the last name 'Smith' to 'john.smith@newmail.com'.
545,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,What is the average yield of wheat in California between 2021-2022?,"CREATE TABLE Wheat_Yields (
  State VARCHAR(255),
  Year INT,
  Yield INT
);

INSERT INTO Wheat_Yields (State, Year, Yield)
VALUES
  ('California', 2021, 5000),
  ('California', 2022, 5500),
  ('Texas', 2021, 4500),
  ('Texas', 2022, 5000);

CREATE TABLE Weather_Data (
  State VARCHAR(255),
  Year INT,
  Average_Temperature FLOAT
);

INSERT INTO Weather_Data (State, Year, Average_Temperature)
VALUES
  ('California', 2021, 65.5),
  ('California', 2022, 67.2),
  ('Texas', 2021, 70.0),
  ('Texas', 2022, 72.5);","SELECT AVG(Yield) AS Average_Yield
FROM Wheat_Yields
WHERE State = 'California'
AND Year BETWEEN 2021 AND 2022;","1. Select the average yield of wheat from the Wheat_Yields table.
2. Filter the data for California between the years 2021 and 2022.
3. Group the data by state and year.
4. Calculate the average yield for each group using the AVG() function.
5. Display the average yield as 'Average_Yield'."
546,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,What are the top 5 states with the highest average corn yields in the last 3 years?,"CREATE TABLE Corn_Yields (
  State VARCHAR(255),
  Year INT,
  Yield INT
);

INSERT INTO Corn_Yields (State, Year, Yield)
VALUES
  ('Iowa', 2020, 185),
  ('Iowa', 2021, 190),
  ('Iowa', 2022, 195),
  ('Illinois', 2020, 175),
  ('Illinois', 2021, 180),
  ('Illinois', 2022, 185),
  ('Nebraska', 2020, 170),
  ('Nebraska', 2021, 175),
  ('Nebraska', 2022, 180),
  ('Minnesota', 2020, 165),
  ('Minnesota', 2021, 170),
  ('Minnesota', 2022, 175);

CREATE TABLE States (
  State VARCHAR(255),
  Region VARCHAR(255)
);

INSERT INTO States (State, Region) 
VALUES
  ('Iowa', 'Midwest'),
  ('Illinois', 'Midwest'),
  ('Nebraska', 'Midwest'),
  ('Minnesota', 'Midwest');","SELECT State, AVG(Yield) AS Average_Yield
FROM Corn_Yields
WHERE Year IN (2020, 2021, 2022)
GROUP BY State
HAVING AVG(Yield) > 175
ORDER BY Average_Yield DESC
LIMIT 5;","1. Select the state and average yield of corn for the last three years.
2. Filter the data to include only years 2020, 2021, and 2022.
3. Group the data by state and calculate the average yield for each state using the AVG() function.
4. Filter the results to only include states with an average yield greater than 175 bushels per acre.
5. Order the results by average yield in descending order.
6. Limit the output to the top 5 states with the highest average yields."
547,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,How much did the total agricultural exports from the US increase between 2020 and 2021?,"CREATE TABLE Agricultural_Exports (
  Year INT,
  Value_in_Millions_USD BIGINT
);

INSERT INTO Agricultural_Exports (Year, Value_in_Millions_USD)
VALUES
  (2020, 155000),
  (2021, 168000),
  (2022, 175000);","SELECT (Value_in_Millions_USD - LAG(Value_in_Millions_USD,1)) AS Increase_in_Value_USD
FROM Agricultural_Exports
ORDER BY Year
LIMIT 1;","1. Select the difference between the current year's value and the previous year's value as 'Increase_in_Value_USD'.
2. Use the LAG() window function to access the value from the previous year.
3. Order the results by year to ensure the correct calculation of the increase.
4. Limit the output to the first row to obtain the increase between 2020 and 2021."
548,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,What was the average temperature and precipitation in California during the months with the highest average corn yields?,"CREATE TABLE Corn_Yields (
  State VARCHAR(255),
  Year INT,
  Month INT,
  Yield INT
);

INSERT INTO Corn_Yields (State, Year, Month, Yield)
VALUES
  ('California', 2020, 6, 155),
  ('California', 2020, 7, 160),
  ('California', 2020, 8, 150),
  ('California', 2021, 6, 165),
  ('California', 2021, 7, 170),
  ('California', 2021, 8, 160),
  ('California', 2022, 6, 170),
  ('California', 2022, 7, 175),
  ('California', 2022, 8, 165);

CREATE TABLE Weather_Data (
  State VARCHAR(255),
  Year INT,
  Month INT,
  Average_Temperature FLOAT,
  Precipitation_Inches FLOAT
);

INSERT INTO Weather_Data (State, Year, Month, Average_Temperature, Precipitation_Inches)
VALUES
  ('California', 2020, 6, 70.5, 0.5),
  ('California', 2020, 7, 72.2, 0.2),
  ('California', 2020, 8, 75.5, 0.1),
  ('California', 2021, 6, 71.0, 0.6),
  ('California', 2021, 7, 73.5, 0.3),
  ('California', 2021, 8, 76.0, 0.1),
  ('California', 2022, 6, 71.8, 0.7),
  ('California', 2022, 7, 74.1, 0.4),
  ('California', 2022, 8, 76.8, 0.2);","SELECT w.Average_Temperature, w.Precipitation_Inches, AVG(cy.Yield) AS Average_Yield
FROM Weather_Data AS w
INNER JOIN Corn_Yields AS cy ON w.State = cy.State AND w.Year = cy.Year AND w.Month = cy.Month
WHERE cy.State = 'California'
GROUP BY w.Month
HAVING AVG(cy.Yield) = (SELECT MAX(AVG(Yield)) FROM Corn_Yields WHERE State = 'California')","1. Join the Weather_Data and Corn_Yields tables on state, year, and month to combine weather data with corn yields.
2. Filter the data to include only California.
3. Group the data by month and calculate the average temperature, precipitation, and corn yield for each month.
4. Use a subquery to find the month with the highest average corn yield in California.
5. Filter the results to only include the month with the highest average yield.
6. Display the average temperature, precipitation, and average yield for the month with the highest average corn yield."
549,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"How to retrieve data on crop yields, farming practices, and weather patterns for different regions in the US?","CREATE TABLE Yields (  region TEXT,  crop TEXT,  yield INT,  year INT);  INSERT INTO Yields VALUES ('Midwest', 'Corn', 180, 2022), ('Midwest', 'Soybeans', 60, 2022), ('Southeast', 'Cotton', 1200, 2022), ('Southeast', 'Rice', 700, 2022), ('West', 'Wheat', 100, 2022), ('West', 'Alfalfa', 80, 2022);  CREATE TABLE FarmingPractices (  region TEXT,  practice TEXT,  adoption_rate REAL,  year INT);  INSERT INTO FarmingPractices VALUES ('Midwest', 'No-till farming', 0.6, 2022), ('Midwest', 'Cover cropping', 0.4, 2022), ('Southeast', 'Conservation tillage', 0.5, 2022), ('Southeast', 'Irrigation', 0.8, 2022), ('West', 'Organic farming', 0.2, 2022), ('West', 'Precision agriculture', 0.7, 2022);  CREATE TABLE WeatherPatterns (  region TEXT,  variable TEXT,  value REAL,  year INT);  INSERT INTO WeatherPatterns VALUES ('Midwest', 'Temperature', 20, 2022), ('Midwest', 'Precipitation', 30, 2022), ('Southeast', 'Temperature', 25, 2022), ('Southeast', 'Precipitation', 40, 2022), ('West', 'Temperature', 15, 2022), ('West', 'Precipitation', 20, 2022);","SELECT Y.region, Y.crop, Y.yield, FP.practice, FP.adoption_rate, WP.variable, WP.value  FROM Yields AS Y  JOIN FarmingPractices AS FP ON Y.region = FP.region  JOIN WeatherPatterns AS WP ON Y.region = WP.region  WHERE Y.year = 2022 AND FP.year = 2022 AND WP.year = 2022  GROUP BY Y.region, Y.crop, Y.yield, FP.practice, FP.adoption_rate, WP.variable, WP.value  HAVING AVG(Y.yield) > 100 AND AVG(FP.adoption_rate) > 0.5 AND AVG(WP.value) > 25;","This SQL query retrieves data on crop yields, farming practices, and weather patterns for different regions in the US in 2022. It joins three tables: Yields, FarmingPractices, and WeatherPatterns. The query filters the data for regions with an average yield of more than 100, an average adoption rate of farming practices of more than 0.5, and an average weather variable value of more than 25. The query then groups the data by region, crop, yield, practice, adoption rate, variable, and value, and selects the average values for each group."
550,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the average price of paintings by female artists who were born in the 20th century and sold at auction in 2022?,"CREATE TABLE artists ( 
    artist_id INT PRIMARY KEY, 
    artist_name VARCHAR(255) NOT NULL, 
    birth_year INT, 
    gender VARCHAR(10) 
); 

CREATE TABLE paintings ( 
    painting_id INT PRIMARY KEY, 
    artist_id INT REFERENCES artists(artist_id), 
    title VARCHAR(255) NOT NULL, 
    year_created INT, 
    medium VARCHAR(255), 
    auction_date DATE, 
    selling_price DECIMAL(10,2) 
); 

INSERT INTO artists (artist_id, artist_name, birth_year, gender) 
VALUES 
    (1, 'Frida Kahlo', 1907, 'female'),
    (2, 'Pablo Picasso', 1881, 'male'),
    (3, 'Georgia O\'Keeffe', 1887, 'female'),
    (4, 'Claude Monet', 1840, 'male'),
    (5, 'Yayoi Kusama', 1929, 'female');

INSERT INTO paintings (painting_id, artist_id, title, year_created, medium, auction_date, selling_price) 
VALUES 
    (1, 1, 'The Two Fridas', 1939, 'oil on canvas', '2022-11-12', 35.4),
    (2, 2, 'Guernica', 1937, 'oil on canvas', '2022-05-18', 165),
    (3, 3, 'Jimson Weed / White Flower No. 1', 1932, 'oil on canvas', '2022-10-26', 44.4),
    (4, 4, 'Water Lilies', 1916, 'oil on canvas', '2022-06-09', 75.1),
    (5, 5, 'Infinity Nets (Pumpkin)', 2011, 'acrylic on canvas', '2022-03-15', 9.8);

SELECT AVG(selling_price) 
FROM paintings AS p 
JOIN artists AS a ON p.artist_id = a.artist_id 
WHERE a.gender = 'female' AND a.birth_year BETWEEN 1900 AND 1999 AND p.auction_date BETWEEN '2022-01-01' AND '2022-12-31';","SELECT AVG(selling_price) 
FROM paintings AS p 
JOIN artists AS a ON p.artist_id = a.artist_id 
WHERE a.gender = 'female' AND a.birth_year BETWEEN 1900 AND 1999 AND p.auction_date BETWEEN '2022-01-01' AND '2022-12-31';","This query calculates the average selling price of paintings by female artists born in the 20th century and sold at auction in 2022. 

It joins the 'paintings' and 'artists' tables on the 'artist_id' column. 

It filters the results to include only paintings by female artists born between 1900 and 1999 and sold at auction between January 1, 2022 and December 31, 2022. 

It then calculates the average selling price using the AVG() function."
551,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the average age of artists who have exhibited their work in the Venice Biennale?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, birth_year INT, death_year INT); CREATE TABLE VeniceBiennaleArtists (artist_id INT, biennale_year INT, PRIMARY KEY (artist_id, biennale_year), FOREIGN KEY (artist_id) REFERENCES Artists(artist_id));",SELECT AVG(birth_year - death_year) FROM Artists WHERE artist_id IN (SELECT artist_id FROM VeniceBiennaleArtists WHERE biennale_year = 2022);,"This query first selects the artist IDs of all artists who exhibited their work in the Venice Biennale in 2022. Then, it calculates the average age of these artists by subtracting their birth year from their death year."
552,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",How many female artists have had solo exhibitions at the Metropolitan Museum of Art?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, gender VARCHAR(10)); CREATE TABLE Exhibitions (exhibition_id INT PRIMARY KEY, artist_id INT, museum_id INT, exhibition_year INT, FOREIGN KEY (artist_id) REFERENCES Artists(artist_id)); CREATE TABLE Museums (museum_id INT PRIMARY KEY, museum_name VARCHAR(255));",SELECT COUNT(*) FROM Artists WHERE gender = 'Female' AND artist_id IN (SELECT artist_id FROM Exhibitions WHERE museum_id = (SELECT museum_id FROM Museums WHERE museum_name = 'Metropolitan Museum of Art') AND exhibition_year BETWEEN 1900 AND 2023);,"This query first selects the artist IDs of all female artists. Then, it selects the museum ID of the Metropolitan Museum of Art. Finally, it counts the number of female artists who have had solo exhibitions at the museum between 1900 and 2023."
553,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the most popular genre of art among artists who have sold their work at Christie's auction house?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, genre VARCHAR(255)); CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT, genre VARCHAR(255), auction_house_id INT, sale_price INT, FOREIGN KEY (artist_id) REFERENCES Artists(artist_id)); CREATE TABLE AuctionHouses (auction_house_id INT PRIMARY KEY, auction_house_name VARCHAR(255));",SELECT genre FROM Artworks WHERE auction_house_id = (SELECT auction_house_id FROM AuctionHouses WHERE auction_house_name = 'Christie's') GROUP BY genre ORDER BY SUM(sale_price) DESC LIMIT 1;,"This query first selects the auction house ID of Christie's. Then, it selects the genre of all artworks sold at Christie's. Finally, it groups the artworks by genre and orders them by the total sale price in descending order. The genre with the highest total sale price is considered the most popular."
554,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the average sale price of paintings by artists from Africa?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, country_of_origin VARCHAR(255)); CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT, title VARCHAR(255), medium VARCHAR(255), sale_price INT, FOREIGN KEY (artist_id) REFERENCES Artists(artist_id));","SELECT AVG(sale_price) FROM Artworks WHERE medium = 'Painting' AND artist_id IN (SELECT artist_id FROM Artists WHERE country_of_origin IN ('South Africa', 'Nigeria', 'Egypt', 'Kenya', 'Ethiopia'));","This query first selects the artist IDs of all artists from Africa. Then, it selects the sale price of all paintings by these artists. Finally, it calculates the average sale price of these paintings."
555,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Create a table to store data on soil fertility and its impact on crop yields.,"CREATE TABLE SoilFertility (
  SoilID INT PRIMARY KEY,
  Location VARCHAR(255),
  NitrogenContent FLOAT,
  PhosphorusContent FLOAT,
  PotassiumContent FLOAT,
  OrganicMatterContent FLOAT
);

CREATE TABLE CropYields (
  CropYieldID INT PRIMARY KEY,
  CropID INT,
  Year INT,
  Yield FLOAT,
  SoilID INT,
  FOREIGN KEY (SoilID) REFERENCES SoilFertility(SoilID),
  FOREIGN KEY (CropID) REFERENCES Crops(CropID)
);

CREATE TABLE Crops (
  CropID INT PRIMARY KEY,
  CropName VARCHAR(255),
  PlantingDate DATE,
  HarvestDate DATE
);","CREATE TABLE SoilFertilityImpact (
  SoilFertilityID INT,
  CropYieldID INT,
  ImpactLevel VARCHAR(255),
  FOREIGN KEY (SoilFertilityID) REFERENCES SoilFertility(SoilID),
  FOREIGN KEY (CropYieldID) REFERENCES CropYields(CropYieldID)
);","This code first creates a table called SoilFertility to store data on soil nutrients. It then creates a table called CropYields to store data on crop yields and links it to the SoilFertility table through a foreign key relationship. Finally, it creates a table called SoilFertilityImpact to store data on the impact of soil fertility on crop yields, linking it to both the SoilFertility and CropYields tables through foreign keys."
556,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Create a view that shows the average yield for each crop across all years and locations.,"CREATE VIEW AverageYield AS
SELECT c.CropName, AVG(cy.Yield) AS AverageYield
FROM Crops c
JOIN CropYields cy ON c.CropID = cy.CropID
GROUP BY c.CropName;",SELECT * FROM AverageYield,"This code creates a view called AverageYield that calculates the average yield for each crop across all years and locations. It joins the Crops and CropYields tables on the CropID field and then groups the results by crop name. Finally, it calculates the average yield for each crop and displays it in the AverageYield view."
557,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Create a table to store data on weather patterns and their impact on crop yields.,"CREATE TABLE WeatherPatterns (
  WeatherPatternID INT PRIMARY KEY,
  Location VARCHAR(255),
  Date DATE,
  Temperature FLOAT,
  Precipitation FLOAT,
  WindSpeed FLOAT
);

CREATE TABLE CropYieldImpact (
  CropYieldID INT,
  WeatherPatternID INT,
  ImpactLevel VARCHAR(255),
  FOREIGN KEY (CropYieldID) REFERENCES CropYields(CropYieldID),
  FOREIGN KEY (WeatherPatternID) REFERENCES WeatherPatterns(WeatherPatternID)
);","CREATE TABLE WeatherImpact (
  WeatherImpactID INT PRIMARY KEY,
  WeatherPatternID INT,
  CropYieldID INT,
  ImpactLevel VARCHAR(255),
  FOREIGN KEY (WeatherPatternID) REFERENCES WeatherPatterns(WeatherPatternID),
  FOREIGN KEY (CropYieldID) REFERENCES CropYields(CropYieldID)
);","This code creates a table called WeatherPatterns to store data on weather patterns. It then creates a table called CropYieldImpact to store data on the impact of weather patterns on crop yields, linking it to both the WeatherPatterns and CropYields tables through foreign keys. Finally, it creates a table called WeatherImpact to store data on the impact of weather on crop yields, linking it to both the WeatherPatterns and CropYields tables through foreign keys."
558,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Create a view that shows the average yield for each crop for each year.,"CREATE VIEW YearlyYield AS
SELECT c.CropName, cy.Year, AVG(cy.Yield) AS AverageYield
FROM Crops c
JOIN CropYields cy ON c.CropID = cy.CropID
GROUP BY c.CropName, cy.Year;",SELECT * FROM YearlyYield,"This code creates a view called YearlyYield that calculates the average yield for each crop for each year. It joins the Crops and CropYields tables on the CropID field and then groups the results by crop name and year. Finally, it calculates the average yield for each crop and year and displays it in the YearlyYield view."
559,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",How do weather conditions affect crop yields in different countries?,"CREATE TABLE weather_data (country VARCHAR(255), year INT, month INT, temperature FLOAT, precipitation FLOAT, sunshine_hours FLOAT);
CREATE TABLE crop_yields (country VARCHAR(255), year INT, crop VARCHAR(255), yield FLOAT);
CREATE TABLE country_info (country VARCHAR(255), region VARCHAR(255), climate VARCHAR(255));
INSERT INTO weather_data VALUES ('France', 2020, 1, 5.2, 3.1, 150.5);
INSERT INTO weather_data VALUES ('France', 2020, 2, 7.1, 4.2, 125.8);
INSERT INTO weather_data VALUES ('France', 2020, 3, 9.3, 5.5, 187.1);
INSERT INTO crop_yields VALUES ('France', 2020, 'Wheat', 7.8);
INSERT INTO crop_yields VALUES ('France', 2020, 'Maize', 6.5);
INSERT INTO country_info VALUES ('France', 'Western Europe', 'Temperate');
INSERT INTO country_info VALUES ('Brazil', 'South America', 'Tropical');","SELECT c.country, c.region, w.year, w.month, w.temperature, w.precipitation, cy.crop, cy.yield
FROM country_info c
INNER JOIN weather_data w ON c.country = w.country
INNER JOIN crop_yields cy ON c.country = cy.country AND w.year = cy.year
WHERE c.climate = 'Temperate'
ORDER BY c.country, c.region, w.year, w.month;","This SQL query joins three tables: country_info, weather_data, and crop_yields. It selects the country, region, year, month, temperature, precipitation, crop, and yield for all records where the climate is 'Temperate'. The query is ordered by country, region, year, and month."
560,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Update the customer's phone number in the customer table where the customer's email is 'john.doe@example.com' to '555-123-4567'.,"CREATE TABLE customer (customer_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255) UNIQUE, phone_number VARCHAR(255));
INSERT INTO customer (customer_id, first_name, last_name, email, phone_number) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '555-012-3456'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '555-234-5678'),
(3, 'Bob', 'Johnson', 'bob.johnson@example.com', '555-345-6789');",UPDATE customer SET phone_number = '555-123-4567' WHERE email = 'john.doe@example.com';,"This SQL statement updates the phone number of the customer with the email address 'john.doe@example.com' to '555-123-4567'. The UPDATE statement modifies the customer table, setting the phone_number column to the new value where the email column matches the specified email address."
561,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Insert a new record into the product table with the following values: product_id = 100, product_name = 'Laptop', category = 'Electronics', price = 1200.00, stock_quantity = 10.","CREATE TABLE product (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), stock_quantity INT);","INSERT INTO product (product_id, product_name, category, price, stock_quantity) VALUES (100, 'Laptop', 'Electronics', 1200.00, 10);","This SQL statement inserts a new record into the product table with the specified values. The INSERT statement specifies the values for each column in the new record, including the product ID, name, category, price, and stock quantity."
562,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Delete the record from the customer table where the customer's ID is 3.,"CREATE TABLE customer (customer_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255) UNIQUE, phone_number VARCHAR(255));
INSERT INTO customer (customer_id, first_name, last_name, email, phone_number) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '555-012-3456'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '555-234-5678'),
(3, 'Bob', 'Johnson', 'bob.johnson@example.com', '555-345-6789');",DELETE FROM customer WHERE customer_id = 3;,"This SQL statement deletes the record from the customer table where the customer ID is 3. The DELETE statement specifies the condition for deleting the record, which is based on the customer_id column."
563,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Select the first name, last name, and email of all customers who have placed an order in the last month.","CREATE TABLE customer (customer_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255) UNIQUE, phone_number VARCHAR(255));
CREATE TABLE order (order_id INT PRIMARY KEY, customer_id INT REFERENCES customer(customer_id), order_date DATE);
INSERT INTO customer (customer_id, first_name, last_name, email, phone_number) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', '555-012-3456'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', '555-234-5678'),
(3, 'Bob', 'Johnson', 'bob.johnson@example.com', '555-345-6789');
INSERT INTO order (order_id, customer_id, order_date) VALUES
(1, 1, '2023-03-01'),
(2, 2, '2023-03-05'),
(3, 3, '2023-03-10'),
(4, 1, '2023-03-15'),
(5, 2, '2023-03-20'),
(6, 3, '2023-03-25');","SELECT c.first_name, c.last_name, c.email
FROM customer c
INNER JOIN order o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-1 month');","This SQL statement selects the first name, last name, and email of all customers who have placed an order in the last month. It uses an INNER JOIN to combine the customer and order tables based on the customer ID. The WHERE clause filters the results to include only orders placed within the last month."
564,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Update the stock quantity of the product with the product ID 50 by subtracting 5 from its current value.,"CREATE TABLE product (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), stock_quantity INT);",UPDATE product SET stock_quantity = stock_quantity - 5 WHERE product_id = 50;,"This SQL statement updates the stock quantity of the product with the product ID 50 by subtracting 5 from its current value. The UPDATE statement modifies the product table, decrementing the stock_quantity column by 5 where the product_id column matches the specified product ID."
565,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,What is the average order value for customers in California?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), state VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, amount DECIMAL(10,2));
INSERT INTO customers (customer_id, name, email, state) VALUES
(1, 'John Doe', 'john.doe@example.com', 'California'),
(2, 'Jane Smith', 'jane.smith@example.com', 'Texas'),
(3, 'Bob Johnson', 'bob.johnson@example.com', 'California');
INSERT INTO orders (order_id, customer_id, order_date, amount) VALUES
(1, 1, '2023-01-01', 50.00),
(2, 2, '2023-01-02', 75.00),
(3, 1, '2023-01-03', 100.00),
(4, 3, '2023-01-04', 25.00),
(5, 2, '2023-01-05', 150.00);",SELECT AVG(o.amount) FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE c.state = 'California';,"This SQL query calculates the average order value for customers in California. It joins the 'orders' and 'customers' tables on the 'customer_id' field and then filters the results to only include orders from customers in California. Finally, it calculates the average order value using the 'AVG()' function."
566,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,Which product categories have the highest total sales in the month of January?,"CREATE TABLE products (product_id INT PRIMARY KEY, category VARCHAR(255), name VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), sale_date DATE, quantity INT, amount DECIMAL(10,2));
INSERT INTO products (product_id, category, name, price) VALUES
(1, 'Electronics', 'Laptop', 1000.00),
(2, 'Clothing', 'T-shirt', 25.00),
(3, 'Electronics', 'Smartphone', 500.00),
(4, 'Food', 'Apple', 1.00),
(5, 'Clothing', 'Jeans', 50.00);
INSERT INTO sales (sale_id, product_id, sale_date, quantity, amount) VALUES
(1, 1, '2023-01-01', 2, 2000.00),
(2, 2, '2023-01-02', 10, 250.00),
(3, 3, '2023-01-03', 5, 2500.00),
(4, 4, '2023-01-04', 100, 100.00),
(5, 5, '2023-01-05', 5, 250.00),
(6, 1, '2023-02-01', 1, 1000.00),
(7, 2, '2023-02-02', 15, 375.00),
(8, 3, '2023-02-03', 3, 1500.00),
(9, 4, '2023-02-04', 50, 50.00),
(10, 5, '2023-02-05', 2, 100.00);","SELECT p.category, SUM(s.amount) AS total_sales FROM sales s JOIN products p ON s.product_id = p.product_id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category ORDER BY total_sales DESC;","This SQL query calculates the total sales for each product category in the month of January. It joins the 'sales' and 'products' tables on the 'product_id' field, filters the results to only include sales in January, groups the results by product category, and then calculates the sum of the sales amounts for each category. Finally, it orders the results in descending order of total sales."
567,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,What are the top 5 most popular products based on the number of units sold?,"CREATE TABLE products (product_id INT PRIMARY KEY, category VARCHAR(255), name VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), sale_date DATE, quantity INT, amount DECIMAL(10,2));
INSERT INTO products (product_id, category, name, price) VALUES
(1, 'Electronics', 'Laptop', 1000.00),
(2, 'Clothing', 'T-shirt', 25.00),
(3, 'Electronics', 'Smartphone', 500.00),
(4, 'Food', 'Apple', 1.00),
(5, 'Clothing', 'Jeans', 50.00);
INSERT INTO sales (sale_id, product_id, sale_date, quantity, amount) VALUES
(1, 1, '2023-01-01', 2, 2000.00),
(2, 2, '2023-01-02', 10, 250.00),
(3, 3, '2023-01-03', 5, 2500.00),
(4, 4, '2023-01-04', 100, 100.00),
(5, 5, '2023-01-05', 5, 250.00),
(6, 1, '2023-02-01', 1, 1000.00),
(7, 2, '2023-02-02', 15, 375.00),
(8, 3, '2023-02-03', 3, 1500.00),
(9, 4, '2023-02-04', 50, 50.00),
(10, 5, '2023-02-05', 2, 100.00);","SELECT p.name, SUM(s.quantity) AS total_units_sold FROM sales s JOIN products p ON s.product_id = p.product_id GROUP BY p.name ORDER BY total_units_sold DESC LIMIT 5;","This SQL query calculates the total number of units sold for each product. It joins the 'sales' and 'products' tables on the 'product_id' field, groups the results by product name, and then calculates the sum of the quantities sold for each product. Finally, it orders the results in descending order of total units sold and limits the results to the top 5 products."
568,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,"What is the total number of orders placed in the last month, categorized by product category?","CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    product_id INT,
    quantity INT,
    price DECIMAL
);

INSERT INTO Orders (order_id, customer_id, order_date, product_id, quantity, price)
VALUES
    (1, 101, '2023-03-01', 1, 5, 25),
    (2, 102, '2023-03-02', 2, 8, 40),
    (3, 103, '2023-03-03', 3, 10, 50),
    (4, 104, '2023-03-04', 1, 3, 15),
    (5, 105, '2023-03-05', 2, 6, 30),
    (6, 106, '2023-03-06', 3, 7, 35),
    (7, 107, '2023-03-07', 1, 4, 20),
    (8, 108, '2023-03-08', 2, 5, 25),
    (9, 109, '2023-03-09', 3, 9, 45),
    (10, 110, '2023-03-10', 1, 2, 10);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category VARCHAR(255),
    price DECIMAL
);

INSERT INTO Products (product_id, product_name, category, price)
VALUES
    (1, 'Shirt', 'Apparel', 5),
    (2, 'Laptop', 'Electronics', 50),
    (3, 'Coffee Table', 'Furniture', 100);

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    city VARCHAR(255),
    country VARCHAR(255)
);

INSERT INTO Customers (customer_id, customer_name, city, country)
VALUES
    (101, 'John Doe', 'New York', 'USA'),
    (102, 'Jane Smith', 'London', 'UK'),
    (103, 'Peter Jones', 'Paris', 'France'),
    (104, 'Mary Brown', 'Berlin', 'Germany'),
    (105, 'David Williams', 'Madrid', 'Spain'),
    (106, 'Linda Garcia', 'Rome', 'Italy'),
    (107, 'Michael Rodriguez', 'Tokyo', 'Japan'),
    (108, 'Elizabeth Wilson', 'Sydney', 'Australia'),
    (109, 'Christopher Taylor', 'Toronto', 'Canada'),
    (110, 'Jennifer Anderson', 'Moscow', 'Russia');
","SELECT c.category, COUNT(*) AS total_orders
FROM Orders o
JOIN Products p ON o.product_id = p.product_id
JOIN Customers c ON o.customer_id = c.customer_id
WHERE o.order_date >= DATE('now', '-1 month')
GROUP BY c.category
ORDER BY total_orders DESC;","This SQL query retrieves the total number of orders placed in the last month, categorized by product category. It joins three tables: Orders, Products, and Customers. The query filters the orders to only include those placed in the last month and then groups the orders by product category. Finally, it orders the results by the total number of orders in descending order."
569,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,Which products have been ordered by customers from France in the past year?,"CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    product_id INT,
    quantity INT,
    price DECIMAL
);

INSERT INTO Orders (order_id, customer_id, order_date, product_id, quantity, price)
VALUES
    (1, 101, '2023-03-01', 1, 5, 25),
    (2, 102, '2023-03-02', 2, 8, 40),
    (3, 103, '2023-03-03', 3, 10, 50),
    (4, 104, '2023-03-04', 1, 3, 15),
    (5, 105, '2023-03-05', 2, 6, 30),
    (6, 106, '2023-03-06', 3, 7, 35),
    (7, 107, '2023-03-07', 1, 4, 20),
    (8, 108, '2023-03-08', 2, 5, 25),
    (9, 109, '2023-03-09', 3, 9, 45),
    (10, 110, '2023-03-10', 1, 2, 10);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category VARCHAR(255),
    price DECIMAL
);

INSERT INTO Products (product_id, product_name, category, price)
VALUES
    (1, 'Shirt', 'Apparel', 5),
    (2, 'Laptop', 'Electronics', 50),
    (3, 'Coffee Table', 'Furniture', 100);

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    city VARCHAR(255),
    country VARCHAR(255)
);

INSERT INTO Customers (customer_id, customer_name, city, country)
VALUES
    (101, 'John Doe', 'New York', 'USA'),
    (102, 'Jane Smith', 'London', 'UK'),
    (103, 'Peter Jones', 'Paris', 'France'),
    (104, 'Mary Brown', 'Berlin', 'Germany'),
    (105, 'David Williams', 'Madrid', 'Spain'),
    (106, 'Linda Garcia', 'Rome', 'Italy'),
    (107, 'Michael Rodriguez', 'Tokyo', 'Japan'),
    (108, 'Elizabeth Wilson', 'Sydney', 'Australia'),
    (109, 'Christopher Taylor', 'Toronto', 'Canada'),
    (110, 'Jennifer Anderson', 'Moscow', 'Russia');
","SELECT p.product_name
FROM Products p
JOIN Orders o ON p.product_id = o.product_id
JOIN Customers c ON o.customer_id = c.customer_id
WHERE c.country = 'France'
AND o.order_date >= DATE('now', '-1 year');","This query will return the list of product names that have been ordered by customers from France within the past year. The query starts by joining three tables: Products, Orders, and Customers.  It then filters these results to only include orders placed in the past year and orders placed by customers from France. Lastly, the query selects only the product name and returns this list."
570,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What were the top 5 most ordered parts by quantity in the last month, grouped by product family, and excluding any orders placed on weekends?","CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date DATE, product_family VARCHAR(50));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50), product_family VARCHAR(50));
INSERT INTO orders (order_id, product_id, quantity, order_date, product_family) VALUES
(1, 10, 5, '2023-03-01', 'Electronics'),
(2, 20, 10, '2023-03-02', 'Electronics'),
(3, 10, 2, '2023-03-04', 'Electronics'),
(4, 30, 15, '2023-03-05', 'Machinery'),
(5, 20, 8, '2023-03-06', 'Electronics'),
(6, 40, 12, '2023-03-07', 'Machinery'),
(7, 30, 7, '2023-03-08', 'Machinery'),
(8, 10, 3, '2023-03-09', 'Electronics'),
(9, 50, 20, '2023-03-10', 'Furniture'),
(10, 20, 9, '2023-03-11', 'Electronics'),
(11, 30, 18, '2023-03-12', 'Machinery'),
(12, 40, 16, '2023-03-13', 'Machinery'),
(13, 20, 4, '2023-03-14', 'Electronics'),
(14, 10, 6, '2023-03-15', 'Electronics'),
(15, 30, 11, '2023-03-16', 'Machinery'),
(16, 20, 7, '2023-03-17', 'Electronics'),
(17, 50, 22, '2023-03-18', 'Furniture'),
(18, 40, 14, '2023-03-19', 'Machinery'),
(19, 30, 9, '2023-03-20', 'Machinery'),
(20, 20, 5, '2023-03-21', 'Electronics'),
(21, 10, 10, '2023-03-22', 'Electronics'),
(22, 50, 25, '2023-03-23', 'Furniture'),
(23, 40, 13, '2023-03-24', 'Machinery'),
(24, 30, 8, '2023-03-25', 'Machinery'),
(25, 20, 6, '2023-03-26', 'Electronics'),
(26, 10, 12, '2023-03-27', 'Electronics'),
(27, 40, 10, '2023-03-28', 'Machinery'),
(28, 30, 19, '2023-03-29', 'Machinery'),
(29, 50, 21, '2023-03-30', 'Furniture'),
(30, 20, 8, '2023-03-31', 'Electronics');
INSERT INTO products (product_id, product_name, product_family) VALUES
(10, 'Laptop', 'Electronics'),
(20, 'Cell Phone', 'Electronics'),
(30, 'Engine', 'Machinery'),
(40, 'Transmission', 'Machinery'),
(50, 'Chair', 'Furniture');","SELECT product_family, product_name, SUM(quantity) AS total_quantity, ROW_NUMBER() OVER (PARTITION BY product_family ORDER BY SUM(quantity) DESC) AS rank
FROM orders o
JOIN products p ON o.product_id = p.product_id
WHERE EXTRACT(DOW FROM order_date) NOT IN (6, 7)
AND order_date >= DATE('2023-03-01') AND order_date <= DATE('2023-03-31')
GROUP BY product_family, product_name
HAVING rank <= 5
ORDER BY product_family, total_quantity DESC;","This SQL query retrieves the top 5 most ordered parts by quantity in the last month, grouped by product family, and excluding any orders placed on weekends. 

1. **Join the `orders` and `products` tables** on the `product_id` column to get the product names associated with each order.
2. **Filter the data** to only include orders placed in the last month (March 2023) and exclude orders placed on weekends (Saturday and Sunday).
3. **Group the data** by product family and product name, and calculate the total quantity ordered for each product.
4. **Use the `ROW_NUMBER()` window function** to assign a rank to each product within each product family, based on the total quantity ordered in descending order.
5. **Filter the data** to only include products with a rank of 5 or less (i.e., the top 5 products in each family).
6. **Order the results** by product family and total quantity in descending order."
571,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 suppliers in terms of total order amount in the past month?,"CREATE TABLE Orders (OrderDate DATE, SupplierID INT, OrderAmount DECIMAL); INSERT INTO Orders VALUES ('2023-01-01', 1, 100), ('2023-01-02', 2, 50), ('2023-01-03', 3, 150), ('2023-01-04', 1, 75), ('2023-01-05', 2, 125), ('2023-01-06', 3, 200), ('2023-01-07', 1, 250), ('2023-01-08', 2, 175), ('2023-01-09', 3, 100), ('2023-01-10', 1, 300), ('2023-01-11', 2, 225), ('2023-01-12', 3, 250), ('2023-01-13', 1, 150), ('2023-01-14', 2, 100), ('2023-01-15', 3, 50), ('2023-01-16', 1, 200), ('2023-01-17', 2, 150), ('2023-01-18', 3, 100), ('2023-01-19', 1, 250), ('2023-01-20', 2, 175), ('2023-01-21', 3, 200), ('2023-01-22', 1, 300), ('2023-01-23', 2, 225), ('2023-01-24', 3, 100), ('2023-01-25', 1, 200), ('2023-01-26', 2, 150), ('2023-01-27', 3, 100), ('2023-01-28', 1, 150), ('2023-01-29', 2, 100), ('2023-01-30', 3, 100), ('2023-01-31', 1, 100);CREATE TABLE Suppliers (SupplierID INT, SupplierName VARCHAR(255));INSERT INTO Suppliers VALUES (1, 'Acme Inc.'), (2, 'Best Supplies'), (3, 'Reliable Parts');","SELECT s.SupplierName, SUM(o.OrderAmount) AS TotalOrderAmount FROM Orders o JOIN Suppliers s ON o.SupplierID = s.SupplierID WHERE o.OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY s.SupplierName ORDER BY TotalOrderAmount DESC LIMIT 5;","This query selects the top 5 suppliers in terms of total order amount in the past month. It first joins the Orders table with the Suppliers table on the SupplierID field. Then, it filters the orders to include only those placed in the past month. The query then groups the orders by supplier name and calculates the total order amount for each supplier. Finally, it orders the results by the total order amount in descending order and limits the results to the top 5 suppliers."
572,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the top 5 suppliers in terms of total units shipped in the last quarter, and what is the average lead time for each supplier?","CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), supplier_address VARCHAR(255), supplier_type VARCHAR(255));
CREATE TABLE shipments (shipment_id INT PRIMARY KEY, supplier_id INT REFERENCES suppliers(supplier_id), shipment_date DATE, units_shipped INT);
CREATE TABLE lead_times (lead_time_id INT PRIMARY KEY, shipment_id INT REFERENCES shipments(shipment_id), lead_time_days INT);","WITH SupplierShipments AS (
  SELECT
    s.supplier_name,
    s.supplier_id,
    SUM(sh.units_shipped) AS total_units_shipped
  FROM
    suppliers s
  JOIN
    shipments sh ON s.supplier_id = sh.supplier_id
  WHERE
    sh.shipment_date BETWEEN DATE('now', '-3 months') AND DATE('now')
  GROUP BY
    s.supplier_name,
    s.supplier_id
),
RankedSuppliers AS (
  SELECT
    ss.supplier_name,
    ss.supplier_id,
    ss.total_units_shipped,
    RANK() OVER (ORDER BY ss.total_units_shipped DESC) AS rank
  FROM
    SupplierShipments ss
),
SupplierLeadTimes AS (
  SELECT
    s.supplier_name,
    s.supplier_id,
    AVG(lt.lead_time_days) AS average_lead_time
  FROM
    suppliers s
  JOIN
    shipments sh ON s.supplier_id = sh.supplier_id
  JOIN
    lead_times lt ON sh.shipment_id = lt.shipment_id
  WHERE
    sh.shipment_date BETWEEN DATE('now', '-3 months') AND DATE('now')
  GROUP BY
    s.supplier_name,
    s.supplier_id
)
SELECT
  rs.supplier_name,
  rs.total_units_shipped,
  slt.average_lead_time
FROM
  RankedSuppliers rs
JOIN
  SupplierLeadTimes slt ON rs.supplier_id = slt.supplier_id
WHERE
  rs.rank <= 5
ORDER BY
  rs.total_units_shipped DESC;","This SQL query first calculates the total units shipped by each supplier in the last quarter using the `SupplierShipments` CTE. Then, it ranks the suppliers based on their total units shipped in descending order using the `RankedSuppliers` CTE. Next, it calculates the average lead time for each supplier in the last quarter using the `SupplierLeadTimes` CTE. Finally, it joins the `RankedSuppliers` and `SupplierLeadTimes` CTEs on the supplier ID and filters for the top 5 suppliers based on their rank and orders the results by total units shipped in descending order."
573,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the top 5 production lines in terms of total units produced in the last month, and what is the average yield for each line?","CREATE TABLE production_lines (production_line_id INT PRIMARY KEY, production_line_name VARCHAR(255), production_line_type VARCHAR(255));
CREATE TABLE production_runs (production_run_id INT PRIMARY KEY, production_line_id INT REFERENCES production_lines(production_line_id), production_run_date DATE, units_produced INT, units_scrapped INT);","WITH ProductionRuns AS (
  SELECT
    pl.production_line_name,
    pl.production_line_id,
    SUM(pr.units_produced) AS total_units_produced
  FROM
    production_lines pl
  JOIN
    production_runs pr ON pl.production_line_id = pr.production_line_id
  WHERE
    pr.production_run_date BETWEEN DATE('now', '-1 month') AND DATE('now')
  GROUP BY
    pl.production_line_name,
    pl.production_line_id
),
RankedProductionLines AS (
  SELECT
    pr.production_line_name,
    pr.production_line_id,
    pr.total_units_produced,
    RANK() OVER (ORDER BY pr.total_units_produced DESC) AS rank
  FROM
    ProductionRuns pr
),
ProductionLineYields AS (
  SELECT
    pl.production_line_name,
    pl.production_line_id,
    AVG(100 * (pr.units_produced - pr.units_scrapped) / pr.units_produced) AS average_yield
  FROM
    production_lines pl
  JOIN
    production_runs pr ON pl.production_line_id = pr.production_line_id
  WHERE
    pr.production_run_date BETWEEN DATE('now', '-1 month') AND DATE('now')
  GROUP BY
    pl.production_line_name,
    pl.production_line_id
)
SELECT
  rpl.production_line_name,
  rpl.total_units_produced,
  ply.average_yield
FROM
  RankedProductionLines rpl
JOIN
  ProductionLineYields ply ON rpl.production_line_id = ply.production_line_id
WHERE
  rpl.rank <= 5
ORDER BY
  rpl.total_units_produced DESC;","This SQL query first calculates the total units produced by each production line in the last month using the `ProductionRuns` CTE. Then, it ranks the production lines based on their total units produced in descending order using the `RankedProductionLines` CTE. Next, it calculates the average yield for each production line in the last month using the `ProductionLineYields` CTE. Finally, it joins the `RankedProductionLines` and `ProductionLineYields` CTEs on the production line ID and filters for the top 5 production lines based on their rank and orders the results by total units produced in descending order."
574,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the top five suppliers based on total orders placed in the last quarter, ranked by number of orders, and show the percentage of total orders contributed by each supplier during that period.","CREATE TABLE Orders (order_id INT PRIMARY KEY, supplier_id INT, order_date DATE, quantity INT, price DECIMAL(10,2));
INSERT INTO Orders (order_id, supplier_id, order_date, quantity, price) VALUES
(1, 101, '2023-03-01', 50, 100.00),
(2, 102, '2023-03-05', 75, 125.00),
(3, 103, '2023-03-10', 100, 150.00),
(4, 101, '2023-03-15', 125, 175.00),
(5, 102, '2023-03-20', 150, 200.00),
(6, 104, '2023-03-25', 80, 130.00),
(7, 103, '2023-03-30', 110, 165.00),
(8, 101, '2023-04-05', 75, 125.00),
(9, 102, '2023-04-10', 100, 150.00),
(10, 103, '2023-04-15', 125, 175.00),
(11, 101, '2023-04-20', 150, 200.00),
(12, 104, '2023-04-25', 90, 140.00),
(13, 103, '2023-04-30', 130, 180.00),
(14, 101, '2023-05-05', 50, 100.00),
(15, 102, '2023-05-10', 75, 125.00),
(16, 103, '2023-05-15', 100, 150.00),
(17, 101, '2023-05-20', 125, 175.00),
(18, 104, '2023-05-25', 80, 130.00),
(19, 103, '2023-05-30', 110, 165.00);
CREATE TABLE Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(50), country VARCHAR(50));
INSERT INTO Suppliers (supplier_id, supplier_name, country) VALUES
(101, 'Acme Supplies', 'United States'),
(102, 'Bright Components', 'Germany'),
(103, 'Global Industries', 'China'),
(104, 'Reliable Distributors', 'Canada');","WITH OrderedItems AS (
  SELECT
    s.supplier_name,
    o.order_id,
    o.order_date,
    o.quantity,
    o.price,
    ROW_NUMBER() OVER (PARTITION BY supplier_id ORDER BY order_date) AS row_num
  FROM Orders o
  JOIN Suppliers s ON o.supplier_id = s.supplier_id
  WHERE o.order_date >= '2023-03-01' AND o.order_date < '2023-06-01'
),
TotalOrders AS (
  SELECT
    supplier_name,
    COUNT(*) AS total_orders
  FROM OrderedItems
  GROUP BY supplier_name
)
SELECT
  oi.supplier_name,
  oi.row_num,
  oi.order_id,
  oi.order_date,
  oi.quantity,
  oi.price,
  to.total_orders,
  (oi.row_num * 1.0) / to.total_orders AS percentage_of_total
FROM OrderedItems oi
JOIN TotalOrders to ON oi.supplier_name = to.supplier_name
WHERE oi.row_num <= 5
ORDER BY oi.supplier_name, oi.row_num;","**Step 1: Create a common table expression (CTE) called `OrderedItems`**
This CTE selects data from the `Orders` and `Suppliers` tables, calculates the order date, quantity, price, and a row number for each order within each supplier, partitioned by the supplier ID and ordered by the order date.

**Step 2: Create a CTE called `TotalOrders`**
This CTE counts the total number of orders placed by each supplier during the specified period.

**Step 3: Join the CTEs and calculate the percentage of total orders**
The final query joins the `OrderedItems` and `TotalOrders` CTEs and calculates the percentage of total orders contributed by each order, based on the row number and the total number of orders for each supplier.

**Step 4: Filter and order the results**
The query filters the results to show only the top five orders for each supplier, based on the row number, and orders the results by supplier name and row number."
575,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What are the average corn yields in Iowa for the past five years?,"CREATE TABLE corn_yields (year INT, state VARCHAR(2), yield DECIMAL(5,2), PRIMARY KEY (year, state));
INSERT INTO corn_yields VALUES (2018, 'IA', 175.5), (2019, 'IA', 182.3), (2020, 'IA', 168.9), (2021, 'IA', 179.2), (2022, 'IA', 185.1);",SELECT AVG(yield) FROM corn_yields WHERE state = 'IA' AND year BETWEEN 2018 AND 2022;,This query selects the average corn yield from the corn_yields table for the state of Iowa (IA) for the years 2018 to 2022.
576,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How many acres of soybeans were planted in Illinois in 2021?,"CREATE TABLE soybean_acreage (year INT, state VARCHAR(2), acreage INT, PRIMARY KEY (year, state));
INSERT INTO soybean_acreage VALUES (2020, 'IL', 10.2, 2021, 'IL', 10.5);",SELECT acreage FROM soybean_acreage WHERE state = 'IL' AND year = 2021;,This query selects the acreage of soybeans planted in Illinois (IL) in 2021 from the soybean_acreage table.
577,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What was the average temperature in Kansas during the wheat growing season in 2022?,"CREATE TABLE weather_data (date DATE, state VARCHAR(2), temperature DECIMAL(4,1), PRIMARY KEY (date, state));
INSERT INTO weather_data VALUES ('2022-04-01', 'KS', 55.2), ('2022-04-02', 'KS', 58.1), ('2022-04-03', 'KS', 62.4), ('2022-04-04', 'KS', 65.7), ('2022-04-05', 'KS', 68.9);",SELECT AVG(temperature) FROM weather_data WHERE state = 'KS' AND date BETWEEN '2022-04-01' AND '2022-06-30';,"This query selects the average temperature in Kansas (KS) during the wheat growing season, which is typically from April 1st to June 30th, in 2022 from the weather_data table."
578,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What is the total rainfall in California for the month of January 2023?,"CREATE TABLE rainfall_data (date DATE, state VARCHAR(2), rainfall DECIMAL(5,2), PRIMARY KEY (date, state));
INSERT INTO rainfall_data VALUES ('2023-01-01', 'CA', 2.5), ('2023-01-02', 'CA', 1.8), ('2023-01-03', 'CA', 3.1), ('2023-01-04', 'CA', 0.9), ('2023-01-05', 'CA', 4.2);",SELECT SUM(rainfall) FROM rainfall_data WHERE state = 'CA' AND date BETWEEN '2023-01-01' AND '2023-01-31';,This query selects the total rainfall in California (CA) for the month of January 2023 from the rainfall_data table.
579,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What are the top five countries in terms of rice production in 2022?,"CREATE TABLE rice_production (country VARCHAR(50), year INT, production INT, PRIMARY KEY (country, year));
INSERT INTO rice_production VALUES ('China', 2022, 212.0), ('India', 2022, 177.6), ('Indonesia', 2022, 55.4), ('Bangladesh', 2022, 51.5), ('Vietnam', 2022, 44.1);",SELECT country FROM rice_production WHERE year = 2022 ORDER BY production DESC LIMIT 5;,"This query selects the top five countries in terms of rice production in 2022 from the rice_production table, ordered by production in descending order, and limited to the top 5 results."
580,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"What is the distribution of sales across different art mediums such as painting, sculpture, and photography, in the last 5 years?","CREATE TABLE art_sales ( 
    sale_id INT PRIMARY KEY, 
    art_id INT, 
    sale_date DATE, 
    sale_price DECIMAL(10,2), 
    medium VARCHAR(50) 
);

INSERT INTO art_sales (sale_id, art_id, sale_date, sale_price, medium) VALUES
(1, 101, '2018-01-15', 15000.00, 'Painting'),
(2, 102, '2019-03-08', 8500.00, 'Sculpture'),
(3, 103, '2020-07-12', 22000.00, 'Photography'),
(4, 104, '2021-05-21', 18000.00, 'Painting'),
(5, 105, '2022-09-19', 11000.00, 'Sculpture'),
(6, 106, '2018-02-22', 16500.00, 'Painting'),
(7, 107, '2019-04-10', 9200.00, 'Sculpture'),
(8, 108, '2020-08-14', 25000.00, 'Photography'),
(9, 109, '2021-06-23', 19500.00, 'Painting'),
(10, 110, '2022-10-20', 12500.00, 'Sculpture');

CREATE TABLE art_works ( 
    art_id INT PRIMARY KEY, 
    artist_id INT, 
    title VARCHAR(100), 
    year_created INT, 
    medium VARCHAR(50) 
);

INSERT INTO art_works (art_id, artist_id, title, year_created, medium) VALUES
(101, 201, 'Abstract Landscape', 2017, 'Painting'),
(102, 202, 'Bronze Horse', 2018, 'Sculpture'),
(103, 203, 'Cityscape in Black and White', 2019, 'Photography'),
(104, 201, 'Floral Still Life', 2020, 'Painting'),
(105, 202, 'Marble Bust', 2021, 'Sculpture'),
(106, 203, 'Nature Photography', 2017, 'Photography'),
(107, 201, 'Modern Art', 2018, 'Painting'),
(108, 202, 'Geometric Sculpture', 2019, 'Sculpture'),
(109, 203, 'Travel Photography', 2020, 'Photography'),
(110, 201, 'Abstract Expressionism', 2021, 'Painting');","WITH MediumSales AS (
    SELECT medium, SUM(sale_price) AS total_sales
    FROM art_sales
    WHERE sale_date >= DATE('now', '-5 years')
    GROUP BY medium
)

SELECT medium, total_sales, (total_sales / (SELECT SUM(total_sales) FROM MediumSales)) * 100 AS percentage_of_total_sales
FROM MediumSales
ORDER BY total_sales DESC;","The SQL query uses a common table expression (CTE) called MediumSales to calculate the total sales for each art medium in the last 5 years. It then selects the medium, total sales, and the percentage of total sales for each medium, ordered by total sales in descending order. The percentage of total sales is calculated by dividing the total sales for each medium by the sum of all total sales and multiplying by 100."
581,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Which artists have had the highest total sales revenue in the past year?,"CREATE TABLE art_sales ( 
    sale_id INT PRIMARY KEY, 
    art_id INT, 
    sale_date DATE, 
    sale_price DECIMAL(10,2), 
    artist_id INT 
);

INSERT INTO art_sales (sale_id, art_id, sale_date, sale_price, artist_id) VALUES
(1, 101, '2022-10-15', 15000.00, 201),
(2, 102, '2022-11-08', 8500.00, 202),
(3, 103, '2022-12-12', 22000.00, 203),
(4, 104, '2023-01-21', 18000.00, 201),
(5, 105, '2023-02-19', 11000.00, 202),
(6, 106, '2022-10-22', 16500.00, 201),
(7, 107, '2022-11-10', 9200.00, 202),
(8, 108, '2022-12-14', 25000.00, 203),
(9, 109, '2023-01-23', 19500.00, 201),
(10, 110, '2023-02-20', 12500.00, 202);

CREATE TABLE artists ( 
    artist_id INT PRIMARY KEY, 
    artist_name VARCHAR(100), 
    nationality VARCHAR(50) 
);

INSERT INTO artists (artist_id, artist_name, nationality) VALUES
(201, 'Jackson Pollock', 'American'),
(202, 'Pablo Picasso', 'Spanish'),
(203, 'Claude Monet', 'French');","WITH ArtistSales AS (
    SELECT artist_id, SUM(sale_price) AS total_sales
    FROM art_sales
    WHERE sale_date >= DATE('now', '-1 year')
    GROUP BY artist_id
)

SELECT a.artist_name, a.nationality, s.total_sales
FROM artists a
JOIN ArtistSales s ON a.artist_id = s.artist_id
ORDER BY total_sales DESC;","The SQL query uses a common table expression (CTE) called ArtistSales to calculate the total sales for each artist in the past year. It then joins the ArtistSales CTE with the artists table to retrieve the artist's name and nationality. Finally, it selects the artist's name, nationality, and total sales, ordered by total sales in descending order."
582,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What was the average price of artworks sold by female artists in the United States in 2022?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, name VARCHAR(255), gender VARCHAR(10), birth_year INT, death_year INT, country VARCHAR(255));
CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), title VARCHAR(255), year INT, medium VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE Sales (sale_id INT PRIMARY KEY, artwork_id INT REFERENCES Artworks(artwork_id), date DATE, price DECIMAL(10,2), buyer_id INT);","WITH FemaleArtists AS (SELECT artist_id FROM Artists WHERE gender = 'Female'),
USArtworks AS (SELECT artwork_id FROM Artworks WHERE country = 'United States'),
ArtworksSoldIn2022 AS (SELECT artwork_id FROM Sales WHERE date BETWEEN '2022-01-01' AND '2022-12-31')
SELECT AVG(price)
FROM Sales
WHERE artwork_id IN (SELECT artwork_id FROM USArtworks INTERSECT SELECT artwork_id FROM ArtworksSoldIn2022)
AND artist_id IN (SELECT artist_id FROM FemaleArtists);","This query first creates three common table expressions (CTEs):

* `FemaleArtists`: Selects the `artist_id` of all artists whose gender is 'Female'.
* `USArtworks`: Selects the `artwork_id` of all artworks created in the United States.
* `ArtworksSoldIn2022`: Selects the `artwork_id` of all artworks sold in 2022.

Then, the query calculates the average price of artworks sold by female artists in the United States in 2022 by:

1. Selecting the `price` from the `Sales` table.
2. Filtering the sales to only include those involving artworks in both the `USArtworks` and `ArtworksSoldIn2022` CTEs.
3. Further filtering the sales to only include those involving artworks created by artists in the `FemaleArtists` CTE.
4. Using the `AVG()` function to calculate the average price."
583,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,What are the transaction details for all sales made in the month of June 2023 for a specific artwork titled 'The Starry Night'?,"CREATE TABLE sales (order_id INTEGER PRIMARY KEY, artwork_id INTEGER, customer_id INTEGER, sale_date DATE, price DECIMAL(10,2), FOREIGN KEY (artwork_id) REFERENCES artworks(artwork_id), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));
CREATE TABLE artworks (artwork_id INTEGER PRIMARY KEY, title TEXT, artist_id INTEGER, creation_date DATE, medium TEXT, dimensions TEXT, price DECIMAL(10,2), FOREIGN KEY (artist_id) REFERENCES artists(artist_id));
CREATE TABLE artists (artist_id INTEGER PRIMARY KEY, name TEXT, nationality TEXT, birth_date DATE, death_date DATE);
CREATE TABLE customers (customer_id INTEGER PRIMARY KEY, name TEXT, email TEXT, phone_number TEXT, address TEXT);
BEGIN;
INSERT INTO sales (order_id, artwork_id, customer_id, sale_date, price) VALUES (1, 101, 201, '2023-06-15', 10000.00);
INSERT INTO sales (order_id, artwork_id, customer_id, sale_date, price) VALUES (2, 102, 202, '2023-06-20', 5000.00);
INSERT INTO sales (order_id, artwork_id, customer_id, sale_date, price) VALUES (3, 103, 203, '2023-06-25', 7500.00);
COMMIT;","SELECT s.order_id, s.artwork_id, s.customer_id, s.sale_date, s.price
FROM sales s
JOIN artworks a ON s.artwork_id = a.artwork_id
WHERE a.title = 'The Starry Night' AND strftime('%Y-%m', s.sale_date) = '2023-06';","This query retrieves the transaction details for all sales made in the month of June 2023 for the artwork titled 'The Starry Night'.

1. It joins the `sales` and `artworks` tables on the `artwork_id` to link sales records to artwork information.
2. It filters the results to only include sales where the artwork title is 'The Starry Night'.
3. It uses the `strftime` function to extract the year and month from the `sale_date` column and compares it to '2023-06' to ensure sales occurred in June 2023.
4. The final result displays the order ID, artwork ID, customer ID, sale date, and price for each matching sale."
584,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Identify a group of artists, both historical and modern, whose works are most frequently included in museum exhibitions in major world cities within the past five years.","CREATE TABLE artists (  id INTEGER PRIMARY KEY AUTOINCREMENT,  name TEXT NOT NULL,  birth_year INT,  birth_place TEXT,  death_year INT,  death_place TEXT  ); INSERT INTO artists (id, name, birth_year, birth_place, death_year, death_place) VALUES (1, 'Pablo Picasso', 1881, 'Malaga, Spain', 1973, 'Mougins, France'), (2, 'Vincent van Gogh', 1853, 'Zundert, Netherlands', 1890, 'Auvers-sur-Oise, France'), (3, 'Leonardo da Vinci', 1452, 'Vinci, Italy', 1519, 'Amboise, France'), (4, 'Claude Monet', 1840, 'Paris, France', 1926, 'Giverny, France'), (5, 'Andy Warhol', 1928, 'Pittsburgh, Pennsylvania', 1987, 'New York City, New York'); CREATE TABLE exhibitions (  id INTEGER PRIMARY KEY AUTOINCREMENT,  artist_id INTEGER NOT NULL REFERENCES artists (id),  year INTEGER NOT NULL,  city TEXT NOT NULL  ); INSERT INTO exhibitions (id, artist_id, year, city) VALUES (1, 1, 2018, 'London'), (2, 1, 2019, 'New York City'), (3, 2, 2020, 'Amsterdam'), (4, 2, 2021, 'Paris'), (5, 3, 2022, 'Rome'), (6, 3, 2023, 'Florence'), (7, 4, 2018, 'Tokyo'), (8, 4, 2019, 'Berlin'), (9, 5, 2020, 'Los Angeles'), (10, 5, 2021, 'Madrid');","WITH ArtistCounts AS (  SELECT artist_id, COUNT(*) AS exhibition_count  FROM Exhibitions  WHERE year > 2017 AND city IN ('London', 'New York City', 'Amsterdam', 'Paris', 'Rome', 'Florence', 'Tokyo', 'Berlin', 'Los Angeles', 'Madrid')  GROUP BY artist_id), TopArtists AS (  SELECT artist_id  FROM ArtistCounts  ORDER BY exhibition_count DESC  LIMIT 5) SELECT  a.name AS artist_name,  COUNT(e.artist_id) AS exhibition_count FROM Artists AS a JOIN Exhibitions AS e JOIN TopArtists AS ta ON e.artist_id = a.id AND e.artist_id = ta.artist_id GROUP BY a.name ORDER BY exhibition_count DESC LIMIT 5;","The query starts by creating a CTE called `ArtistCounts` which counts the number of exhibitions each artist had in major cities around the world in the last five years. Then, it creates another CTE called `TopArtists` to select the five artists with the highest number of exhibitions. Finally, the query joins the `Artists`, `Exhibitions`, and `TopArtists` tables using a series of inner joins and groups the results by the artists' names to get the total number of exhibitions for each artist. The `LIMIT` clause restricts the output to the top 5 artists with the most exhibitions, ordered by their exhibition count."
585,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a view that displays the top 10 most prescribed medications for patients with a diagnosis of diabetes.,"CREATE TABLE medications (medication_id INT PRIMARY KEY, medication_name VARCHAR(255) NOT NULL, active_ingredient VARCHAR(255));

CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_id INT REFERENCES medications(medication_id), date_prescribed DATE);

CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_code VARCHAR(10) REFERENCES icd10(icd10_code), date_diagnosed DATE);

CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE);

CREATE VIEW top_medications_for_diabetes AS
SELECT m.medication_name, COUNT(*) AS num_prescriptions
FROM prescriptions p
JOIN medications m ON p.medication_id = m.medication_id
JOIN diagnoses d ON p.patient_id = d.patient_id
WHERE d.diagnosis_code = 'E11.9'
GROUP BY m.medication_name
ORDER BY num_prescriptions DESC
LIMIT 10;","CREATE VIEW top_medications_for_diabetes AS
SELECT m.medication_name, COUNT(*) AS num_prescriptions
FROM prescriptions p
JOIN medications m ON p.medication_id = m.medication_id
JOIN diagnoses d ON p.patient_id = d.patient_id
WHERE d.diagnosis_code = 'E11.9'
GROUP BY m.medication_name
ORDER BY num_prescriptions DESC
LIMIT 10;","1. Select the medication name and count the number of prescriptions for each medication.
2. Join the prescriptions table with the medications table on the medication ID.
3. Join the prescriptions table with the diagnoses table on the patient ID.
4. Filter the diagnoses table to include only patients with a diagnosis of diabetes (ICD-10 code E11.9).
5. Group the results by medication name.
6. Order the results by the number of prescriptions in descending order.
7. Limit the results to the top 10 medications."
586,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","List all patients who have been prescribed both Amoxicillin and Codeine in the past year, excluding patients who have a history of penicillin allergy.","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), phone_number VARCHAR(255), email VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), drug_name VARCHAR(255), dosage VARCHAR(255), date_prescribed DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE allergies (allergy_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), allergy_name VARCHAR(255), FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address, phone_number, email) VALUES
(1, 'John', 'Smith', '1980-01-01', '123 Main St', '555-123-4567', 'john.smith@email.com'),
(2, 'Jane', 'Doe', '1985-02-02', '456 Elm St', '555-234-5678', 'jane.doe@email.com'),
(3, 'Bob', 'Johnson', '1990-03-03', '789 Oak St', '555-345-6789', 'bob.johnson@email.com');
INSERT INTO prescriptions (prescription_id, patient_id, drug_name, dosage, date_prescribed) VALUES
(1, 1, 'Amoxicillin', '500mg', '2022-03-01'),
(2, 2, 'Codeine', '30mg', '2022-03-05'),
(3, 3, 'Amoxicillin', '500mg', '2022-03-10'),
(4, 1, 'Codeine', '30mg', '2022-03-15'),
(5, 2, 'Amoxicillin', '500mg', '2022-03-20');
INSERT INTO allergies (allergy_id, patient_id, allergy_name) VALUES
(1, 2, 'Penicillin');","SELECT p.first_name, p.last_name
FROM patients p
INNER JOIN prescriptions pr ON p.patient_id = pr.patient_id
WHERE pr.drug_name = 'Amoxicillin'
INTERSECT
SELECT p.first_name, p.last_name
FROM patients p
INNER JOIN prescriptions pr ON p.patient_id = pr.patient_id
WHERE pr.drug_name = 'Codeine'
EXCEPT
SELECT p.first_name, p.last_name
FROM patients p
INNER JOIN allergies a ON p.patient_id = a.patient_id
WHERE a.allergy_name = 'Penicillin';","This query first selects all patients who have been prescribed Amoxicillin by joining the `patients` and `prescriptions` tables on the `patient_id` and filtering for prescriptions where `drug_name` is 'Amoxicillin'.

Then, it selects all patients who have been prescribed Codeine using the same method.

Next, it finds the intersection of these two sets of patients, which gives us the list of patients who have been prescribed both Amoxicillin and Codeine.

Finally, it excludes patients who have a penicillin allergy by joining the `patients` and `allergies` tables on the `patient_id` and filtering for allergies where `allergy_name` is 'Penicillin'.

The resulting query returns a list of patients who have been prescribed both Amoxicillin and Codeine in the past year, excluding patients who have a history of penicillin allergy."
587,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a view that shows the number of patients with each diagnosis in the past year, sorted by the number of patients in descending order.","CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), phone_number VARCHAR(255), email VARCHAR(255));
CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_name VARCHAR(255), date_of_diagnosis DATE, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, address, phone_number, email) VALUES
(1, 'John', 'Smith', '1980-01-01', '123 Main St', '555-123-4567', 'john.smith@email.com'),
(2, 'Jane', 'Doe', '1985-02-02', '456 Elm St', '555-234-5678', 'jane.doe@email.com'),
(3, 'Bob', 'Johnson', '1990-03-03', '789 Oak St', '555-345-6789', 'bob.johnson@email.com');
INSERT INTO diagnoses (diagnosis_id, patient_id, diagnosis_name, date_of_diagnosis) VALUES
(1, 1, 'Diabetes', '2022-03-01'),
(2, 2, 'Asthma', '2022-03-05'),
(3, 3, 'Depression', '2022-03-10'),
(4, 1, 'Hypertension', '2022-03-15'),
(5, 2, 'Diabetes', '2022-03-20');","CREATE VIEW diagnosis_counts AS
SELECT d.diagnosis_name, COUNT(*) AS patient_count
FROM diagnoses d
WHERE d.date_of_diagnosis >= DATE('now', '-1 year')
GROUP BY d.diagnosis_name
ORDER BY patient_count DESC;","This query creates a view called `diagnosis_counts` that shows the number of patients with each diagnosis in the past year, sorted by the number of patients in descending order.

It first selects the `diagnosis_name` and counts the number of patients with each diagnosis using the `COUNT(*)` function.

Then, it filters the results to only include diagnoses from the past year by checking if the `date_of_diagnosis` is greater than or equal to one year ago.

Finally, it groups the results by `diagnosis_name` and sorts them by `patient_count` in descending order."
588,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",List the names and birthdates of patients from France who were diagnosed with cancer and have had an oncology visit in the last 6 months.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50) NOT NULL, LastName VARCHAR(50) NOT NULL, BirthDate DATE NOT NULL, Country VARCHAR(50) NOT NULL); 
CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, PatientID INT REFERENCES Patients(PatientID), DiagnosisDate DATE NOT NULL, DiagnosisCode VARCHAR(10) NOT NULL); 
CREATE TABLE VisitTypes (VisitTypeID INT PRIMARY KEY, VisitType VARCHAR(50) NOT NULL); 
CREATE TABLE Visits (VisitID INT PRIMARY KEY, PatientID INT REFERENCES Patients(PatientID), VisitTypeID INT REFERENCES VisitTypes(VisitTypeID), VisitDate DATE NOT NULL); 
INSERT INTO Patients (PatientID, FirstName, LastName, BirthDate, Country) VALUES 
(1, 'John', 'Smith', '1970-01-01', 'France'), 
(2, 'Jane', 'Doe', '1975-02-02', 'USA'), 
(3, 'Marie', 'Dupont', '1980-03-03', 'France'), 
(4, 'Peter', 'Jones', '1985-04-04', 'UK'), 
(5, 'Anna', 'Johnson', '1990-05-05', 'France'); 
INSERT INTO Diagnoses (DiagnosisID, PatientID, DiagnosisDate, DiagnosisCode) VALUES 
(1, 1, '2022-06-01', 'C12'), 
(2, 3, '2022-07-01', 'C13'), 
(3, 4, '2022-08-01', 'C14'); 
INSERT INTO VisitTypes (VisitTypeID, VisitType) VALUES 
(1, 'Oncology'), 
(2, 'Cardiology'), 
(3, 'General'); 
INSERT INTO Visits (VisitID, PatientID, VisitTypeID, VisitDate) VALUES 
(1, 1, 1, '2023-01-01'), 
(2, 3, 1, '2023-02-01'), 
(3, 5, 2, '2023-03-01');","SELECT p.FirstName, p.LastName, p.BirthDate 
FROM Patients p 
JOIN Diagnoses d ON p.PatientID = d.PatientID 
JOIN VisitTypes vt ON vt.VisitTypeID = v.VisitTypeID 
LEFT JOIN Visits v ON v.PatientID = p.PatientID 
WHERE p.Country = 'France' 
AND d.DiagnosisCode LIKE 'C%' 
AND v.VisitDate >= DATE('now', '-6 months') 
AND vt.VisitType = 'Oncology';","This query joins the Patients, Diagnoses, VisitTypes, and Visits tables to identify patients from France who were diagnosed with cancer (diagnosis code starting with 'C') and have had an oncology visit in the last 6 months. 

1. It first joins the Patients and Diagnoses tables on the PatientID to link patient information with their diagnoses. 
2. It then joins the VisitTypes and Visits tables on the VisitTypeID to associate visit types with actual visits. 
3. A LEFT JOIN is used between Visits and Patients to include patients who have not had any visits. 
4. The WHERE clause filters the results to include patients from France with cancer diagnoses and oncology visits within the last 6 months. 
5. Finally, the query selects the patient's first name, last name, and birthdate."
589,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the names and demographic characteristics of patients in the database who have been diagnosed with diabetes?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), date_of_birth DATE, gender VARCHAR(255), country VARCHAR(255), region VARCHAR(255));
CREATE TABLE diagnoses (patient_id INT, diagnosis_code VARCHAR(255), diagnosis_date DATE, PRIMARY KEY (patient_id, diagnosis_code), FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
INSERT INTO patients (patient_id, first_name, last_name, date_of_birth, gender, country, region) VALUES
(1, 'Alice', 'Smith', '1980-01-01', 'Female', 'United States', 'Northeast'),
(2, 'Bob', 'Johnson', '1975-02-15', 'Male', 'Canada', 'Ontario'),
(3, 'Charlie', 'Brown', '1960-03-20', 'Male', 'United Kingdom', 'England'),
(4, 'Diana', 'Davis', '1955-04-25', 'Female', 'Australia', 'Victoria'),
(5, 'Edward', 'Wilson', '1940-05-30', 'Male', 'New Zealand', 'South Island');
INSERT INTO diagnoses (patient_id, diagnosis_code, diagnosis_date) VALUES
(1, 'E11.9', '2020-01-01'),
(2, 'E10.9', '2019-02-15'),
(3, 'E11.9', '2018-03-20'),
(4, 'E11.9', '2017-04-25'),
(5, 'E10.9', '2016-05-30');","SELECT p.first_name, p.last_name, p.date_of_birth, p.gender, p.country, p.region
FROM patients p
INNER JOIN diagnoses d ON p.patient_id = d.patient_id
WHERE d.diagnosis_code = 'E11.9';","This query first joins the `patients` and `diagnoses` tables on the `patient_id` column. Then, it filters the results to include only patients with a diagnosis code of 'E11.9', which corresponds to diabetes. Finally, it selects the patient's first name, last name, date of birth, gender, country, and region."
590,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How can we add new students into our institution's database system?,"CREATE TABLE Students ( 
  student_id INT PRIMARY KEY, 
  first_name VARCHAR(255) NOT NULL, 
  last_name VARCHAR(255) NOT NULL, 
  email VARCHAR(255) UNIQUE, 
  phone_number VARCHAR(20), 
  address VARCHAR(255), 
  city VARCHAR(255), 
  state VARCHAR(255), 
  zip_code VARCHAR(10), 
  country VARCHAR(255), 
  enrollment_date DATE NOT NULL, 
  graduation_date DATE, 
  major VARCHAR(255), 
  gpa DECIMAL(3,2) 
); 
CREATE TABLE Courses ( 
  course_id INT PRIMARY KEY, 
  course_name VARCHAR(255) NOT NULL, 
  department VARCHAR(255), 
  credits INT, 
  description TEXT 
); 
CREATE TABLE Enrollments ( 
  enrollment_id INT PRIMARY KEY, 
  student_id INT REFERENCES Students(student_id), 
  course_id INT REFERENCES Courses(course_id), 
  semester VARCHAR(255), 
  year INT, 
  grade VARCHAR(2) 
);","INSERT INTO Students (student_id, first_name, last_name, email, phone_number, address, city, state, zip_code, country, enrollment_date, graduation_date, major, gpa) 
VALUES (123456789, 'John', 'Doe', 'john.doe@example.com', '555-123-4567', '123 Main St', 'Anytown', 'CA', '91234', 'USA', '2023-08-15', '2027-05-15', 'Computer Science', 3.8);","This SQL statement inserts a new student record into the Students table. The statement specifies the values for each column in the new record, including the student ID, first name, last name, email, phone number, address, city, state, zip code, country, enrollment date, graduation date, major, and GPA."
591,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How can we update student information in our system?,"CREATE TABLE Students ( 
  student_id INT PRIMARY KEY, 
  first_name VARCHAR(255) NOT NULL, 
  last_name VARCHAR(255) NOT NULL, 
  email VARCHAR(255) UNIQUE, 
  phone_number VARCHAR(20), 
  address VARCHAR(255), 
  city VARCHAR(255), 
  state VARCHAR(255), 
  zip_code VARCHAR(10), 
  country VARCHAR(255), 
  enrollment_date DATE NOT NULL, 
  graduation_date DATE, 
  major VARCHAR(255), 
  gpa DECIMAL(3,2) 
);","UPDATE Students 
SET first_name = 'Jane', 
    last_name = 'Smith' 
WHERE student_id = 123456789;",This SQL statement updates the first name and last name of a student in the Students table. The statement uses the WHERE clause to specify the student to be updated based on their student ID.
592,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How can we remove students from our database?,"CREATE TABLE Students ( 
  student_id INT PRIMARY KEY, 
  first_name VARCHAR(255) NOT NULL, 
  last_name VARCHAR(255) NOT NULL, 
  email VARCHAR(255) UNIQUE, 
  phone_number VARCHAR(20), 
  address VARCHAR(255), 
  city VARCHAR(255), 
  state VARCHAR(255), 
  zip_code VARCHAR(10), 
  country VARCHAR(255), 
  enrollment_date DATE NOT NULL, 
  graduation_date DATE, 
  major VARCHAR(255), 
  gpa DECIMAL(3,2) 
);","DELETE FROM Students 
WHERE student_id = 123456789;",This SQL statement deletes a student record from the Students table. The statement uses the WHERE clause to specify the student to be deleted based on their student ID.
593,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How can we analyze student performance in different courses?,"CREATE TABLE Students ( 
  student_id INT PRIMARY KEY, 
  first_name VARCHAR(255) NOT NULL, 
  last_name VARCHAR(255) NOT NULL, 
  email VARCHAR(255) UNIQUE, 
  phone_number VARCHAR(20), 
  address VARCHAR(255), 
  city VARCHAR(255), 
  state VARCHAR(255), 
  zip_code VARCHAR(10), 
  country VARCHAR(255), 
  enrollment_date DATE NOT NULL, 
  graduation_date DATE, 
  major VARCHAR(255), 
  gpa DECIMAL(3,2) 
); 
CREATE TABLE Courses ( 
  course_id INT PRIMARY KEY, 
  course_name VARCHAR(255) NOT NULL, 
  department VARCHAR(255), 
  credits INT, 
  description TEXT 
); 
CREATE TABLE Enrollments ( 
  enrollment_id INT PRIMARY KEY, 
  student_id INT REFERENCES Students(student_id), 
  course_id INT REFERENCES Courses(course_id), 
  semester VARCHAR(255), 
  year INT, 
  grade VARCHAR(2) 
);","SELECT s.first_name, s.last_name, c.course_name, e.grade 
FROM Students s 
INNER JOIN Enrollments e ON s.student_id = e.student_id 
INNER JOIN Courses c ON e.course_id = c.course_id 
ORDER BY s.last_name, c.course_name;","This SQL statement retrieves the first name, last name, course name, and grade for each student enrollment. It uses three inner joins to combine data from the Students, Enrollments, and Courses tables. The results are ordered by last name and then course name."
594,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How can we identify students who are at risk of dropping out?,"CREATE TABLE Students ( 
  student_id INT PRIMARY KEY, 
  first_name VARCHAR(255) NOT NULL, 
  last_name VARCHAR(255) NOT NULL, 
  email VARCHAR(255) UNIQUE, 
  phone_number VARCHAR(20), 
  address VARCHAR(255), 
  city VARCHAR(255), 
  state VARCHAR(255), 
  zip_code VARCHAR(10), 
  country VARCHAR(255), 
  enrollment_date DATE NOT NULL, 
  graduation_date DATE, 
  major VARCHAR(255), 
  gpa DECIMAL(3,2) 
); 
CREATE TABLE Enrollments ( 
  enrollment_id INT PRIMARY KEY, 
  student_id INT REFERENCES Students(student_id), 
  course_id INT REFERENCES Courses(course_id), 
  semester VARCHAR(255), 
  year INT, 
  grade VARCHAR(2) 
);","SELECT s.student_id, s.first_name, s.last_name, COUNT(e.enrollment_id) AS num_failed_courses 
FROM Students s 
INNER JOIN Enrollments e ON s.student_id = e.student_id 
WHERE e.grade IN ('F', 'U') 
GROUP BY s.student_id, s.first_name, s.last_name 
HAVING COUNT(e.enrollment_id) >= 2 
ORDER BY num_failed_courses DESC;","This SQL statement identifies students who have failed at least two courses. It uses an inner join to combine data from the Students and Enrollments tables. The query groups the results by student ID, first name, and last name, and then filters the results to include only students who have failed at least two courses. The results are ordered by the number of failed courses in descending order."
595,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","List the top 10 students in each grade level, ranked by their overall GPA.","CREATE TABLE Students (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), grade_level INT, overall_gpa DECIMAL(3,2));
CREATE TABLE Courses (course_id INT PRIMARY KEY, course_name VARCHAR(255), grade_level INT);
CREATE TABLE Grades (grade_id INT PRIMARY KEY, student_id INT REFERENCES Students(student_id), course_id INT REFERENCES Courses(course_id), grade DECIMAL(3,2));
INSERT INTO Students (student_id, first_name, last_name, grade_level, overall_gpa) VALUES
(1, 'Alice', 'Smith', 9, 3.8),
(2, 'Bob', 'Johnson', 10, 3.9),
(3, 'Charlie', 'Williams', 11, 4.0),
(4, 'David', 'Brown', 9, 3.7),
(5, 'Emily', 'Jones', 10, 3.8),
(6, 'Frank', 'Miller', 11, 3.9),
(7, 'Grace', 'Davis', 9, 3.6),
(8, 'Henry', 'Wilson', 10, 3.7),
(9, 'Isabella', 'Moore', 11, 3.8),
(10, 'Jack', 'Taylor', 9, 3.5);
INSERT INTO Courses (course_id, course_name, grade_level) VALUES
(1, 'Math', 9),
(2, 'Science', 9),
(3, 'English', 9),
(4, 'History', 9),
(5, 'Math', 10),
(6, 'Science', 10),
(7, 'English', 10),
(8, 'History', 10),
(9, 'Math', 11),
(10, 'Science', 11),
(11, 'English', 11),
(12, 'History', 11);
INSERT INTO Grades (grade_id, student_id, course_id, grade) VALUES
(1, 1, 1, 90),
(2, 1, 2, 85),
(3, 1, 3, 95),
(4, 1, 4, 80),
(5, 2, 5, 92),
(6, 2, 6, 88),
(7, 2, 7, 94),
(8, 2, 8, 85),
(9, 3, 9, 98),
(10, 3, 10, 95),
(11, 3, 11, 97),
(12, 3, 12, 92),
(13, 4, 1, 80),
(14, 4, 2, 75),
(15, 4, 3, 85),
(16, 4, 4, 70),
(17, 5, 5, 95),
(18, 5, 6, 90),
(19, 5, 7, 92),
(20, 5, 8, 88),
(21, 6, 9, 97),
(22, 6, 10, 94),
(23, 6, 11, 96),
(24, 6, 12, 90),
(25, 7, 1, 75),
(26, 7, 2, 70),
(27, 7, 3, 80),
(28, 7, 4, 65),
(29, 8, 5, 88),
(30, 8, 6, 84),
(31, 8, 7, 86),
(32, 8, 8, 80),
(33, 9, 9, 99),
(34, 9, 10, 96),
(35, 9, 11, 98),
(36, 9, 12, 94),
(37, 10, 1, 70),
(38, 10, 2, 65),
(39, 10, 3, 75),
(40, 10, 4, 60);","WITH GradeLevelGPAs AS (
  SELECT student_id, grade_level, AVG(grade) AS grade_level_gpa
  FROM Grades
  JOIN Courses ON Grades.course_id = Courses.course_id
  GROUP BY student_id, grade_level
),
StudentOverallGPAs AS (
  SELECT student_id, AVG(grade_level_gpa) AS overall_gpa
  FROM GradeLevelGPAs
  GROUP BY student_id
)
SELECT Students.first_name, Students.last_name, Students.grade_level, StudentOverallGPAs.overall_gpa
FROM Students
INNER JOIN StudentOverallGPAs ON Students.student_id = StudentOverallGPAs.student_id
ORDER BY Students.grade_level, StudentOverallGPAs.overall_gpa DESC
LIMIT 10;","This SQL query first calculates the average grade for each student in each grade level using a CTE (Common Table Expression) called `GradeLevelGPAs`. Then, it calculates the overall GPA for each student using another CTE called `StudentOverallGPAs`. Finally, it joins the `Students` table with the `StudentOverallGPAs` CTE and orders the results by grade level and overall GPA in descending order. The `LIMIT 10` clause limits the output to the top 10 students in each grade level."
596,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","I need to update the student's email address in the student table. The student's ID is 12345, and their new email address is new_email@example.com.","CREATE TABLE student (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20));
INSERT INTO student (student_id, first_name, last_name, email, phone_number) VALUES (12345, 'John', 'Doe', 'old_email@example.com', '555-123-4567');",UPDATE student SET email = 'new_email@example.com' WHERE student_id = 12345;,This SQL statement updates the email address of the student with ID 12345 to 'new_email@example.com'.
597,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",I need to delete the record for the student with ID 12345 from the student table.,"CREATE TABLE student (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20));
INSERT INTO student (student_id, first_name, last_name, email, phone_number) VALUES (12345, 'John', 'Doe', 'old_email@example.com', '555-123-4567');",DELETE FROM student WHERE student_id = 12345;,This SQL statement deletes the record for the student with ID 12345 from the student table.
598,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","I need to insert a new student into the student table. The student's first name is Jane, their last name is Doe, their email address is jane.doe@example.com, and their phone number is 555-234-5678.","CREATE TABLE student (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(20));","INSERT INTO student (first_name, last_name, email, phone_number) VALUES ('Jane', 'Doe', 'jane.doe@example.com', '555-234-5678');","This SQL statement inserts a new student into the student table with the following information: first name: Jane, last name: Doe, email: jane.doe@example.com, phone number: 555-234-5678."
599,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",I need to find all students who have taken a course with the course ID 101.,"CREATE TABLE student (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255));
CREATE TABLE course (course_id INT PRIMARY KEY, course_name VARCHAR(255));
CREATE TABLE enrollment (student_id INT, course_id INT, grade INT, PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (course_id) REFERENCES course(course_id));
INSERT INTO student (student_id, first_name, last_name) VALUES (12345, 'John', 'Doe'), (23456, 'Jane', 'Smith');
INSERT INTO course (course_id, course_name) VALUES (101, 'Introduction to Programming'), (202, 'Data Structures and Algorithms');
INSERT INTO enrollment (student_id, course_id, grade) VALUES (12345, 101, 90), (23456, 202, 85);","SELECT s.first_name, s.last_name FROM student s JOIN enrollment e ON s.student_id = e.student_id WHERE e.course_id = 101;",This SQL statement selects the first name and last name of all students who have taken a course with the course ID 101. It uses a JOIN to connect the student and enrollment tables based on the student_id.
600,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 10 countries with the most galleries?,"CREATE TABLE Galleries (gallery_id INT PRIMARY KEY, gallery_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255));
INSERT INTO Galleries (gallery_id, gallery_name, city, country) VALUES
(1, 'Gagosian', 'New York', 'USA'),
(2, 'Pace Gallery', 'New York', 'USA'),
(3, 'Hauser & Wirth', 'London', 'UK'),
(4, 'David Zwirner', 'New York', 'USA'),
(5, 'Thaddaeus Ropac', 'Paris', 'France'),
(6, 'Marian Goodman Gallery', 'Paris', 'France'),
(7, 'White Cube', 'London', 'UK'),
(8, 'Lehmann Maupin', 'New York', 'USA'),
(9, 'Skarstedt', 'New York', 'USA'),
(10, 'Acquavella Galleries', 'New York', 'USA');

CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), nationality VARCHAR(255), gallery_id INT, FOREIGN KEY (gallery_id) REFERENCES Galleries(gallery_id));
INSERT INTO Artists (artist_id, artist_name, nationality, gallery_id) VALUES
(1, 'Jeff Koons', 'USA', 1),
(2, 'Yayoi Kusama', 'Japan', 2),
(3, 'Damien Hirst', 'UK', 3),
(4, 'Gerhard Richter', 'Germany', 4),
(5, 'Anselm Kiefer', 'Germany', 5),
(6, 'Louise Bourgeois', 'France', 6),
(7, 'Tracey Emin', 'UK', 7),
(8, 'Cindy Sherman', 'USA', 8),
(9, 'Kara Walker', 'USA', 9),
(10, 'Julie Mehretu', 'Ethiopia', 10);","SELECT country, COUNT(*) AS num_galleries FROM Galleries GROUP BY country ORDER BY num_galleries DESC LIMIT 10;","This SQL query first groups the galleries by country. Then, it counts the number of galleries in each country using the COUNT(*) function. Finally, it orders the results by the number of galleries in descending order and limits the output to the top 10 countries."
601,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of artworks sold by female artists in 2022?,"CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT, title VARCHAR(255), year INT, price DECIMAL(10,2), FOREIGN KEY (artist_id) REFERENCES Artists(artist_id));
INSERT INTO Artworks (artwork_id, artist_id, title, year, price) VALUES
(1, 1, 'Rabbit', 1986, 91.1),
(2, 2, 'Infinity Nets', 2010, 7.1),
(3, 3, 'For the Love of God', 2007, 100.0),
(4, 4, 'Abstraktes Bild', 1986, 46.3),
(5, 5, 'Heroische Sinnbilder', 1982, 3.8),
(6, 6, 'Maman', 1999, 10.7),
(7, 7, 'My Bed', 1998, 2.7),
(8, 8, 'Untitled Film Still #21', 1978, 6.7),
(9, 9, 'The Ecstasy of Saint Teresa', 2000, 1.3),
(10, 10, 'Stadia II', 2004, 5.5);

CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), nationality VARCHAR(255), gallery_id INT, FOREIGN KEY (gallery_id) REFERENCES Galleries(gallery_id));
INSERT INTO Artists (artist_id, artist_name, nationality, gallery_id) VALUES
(1, 'Jeff Koons', 'USA', 1),
(2, 'Yayoi Kusama', 'Japan', 2),
(3, 'Damien Hirst', 'UK', 3),
(4, 'Gerhard Richter', 'Germany', 4),
(5, 'Anselm Kiefer', 'Germany', 5),
(6, 'Louise Bourgeois', 'France', 6),
(7, 'Tracey Emin', 'UK', 7),
(8, 'Cindy Sherman', 'USA', 8),
(9, 'Kara Walker', 'USA', 9),
(10, 'Julie Mehretu', 'Ethiopia', 10);",SELECT AVG(price) FROM Artworks WHERE artist_id IN (SELECT artist_id FROM Artists WHERE gender = 'female') AND year = 2022;,"This SQL query first selects the artist IDs of all female artists from the Artists table. Then, it joins this result with the Artworks table to filter the artworks sold by female artists in 2022. Finally, it calculates the average price of these artworks."
602,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total market share of galleries located in Asia?,"CREATE TABLE Galleries (gallery_id INT PRIMARY KEY, gallery_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255));
INSERT INTO Galleries (gallery_id, gallery_name, city, country) VALUES
(1, 'Gagosian', 'New York', 'USA'),
(2, 'Pace Gallery', 'New York', 'USA'),
(3, 'Hauser & Wirth', 'London', 'UK'),
(4, 'David Zwirner', 'New York', 'USA'),
(5, 'Thaddaeus Ropac', 'Paris', 'France'),
(6, 'Marian Goodman Gallery', 'Paris', 'France'),
(7, 'White Cube', 'London', 'UK'),
(8, 'Lehmann Maupin', 'New York', 'USA'),
(9, 'Skarstedt', 'New York', 'USA'),
(10, 'Acquavella Galleries', 'New York', 'USA');

CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), nationality VARCHAR(255), gallery_id INT, FOREIGN KEY (gallery_id) REFERENCES Galleries(gallery_id));
INSERT INTO Artists (artist_id, artist_id, artist_name, nationality, gallery_id) VALUES
(1, 'Jeff Koons', 'USA', 1),
(2, 'Yayoi Kusama', 'Japan', 2),
(3, 'Damien Hirst', 'UK', 3),
(4, 'Gerhard Richter', 'Germany', 4),
(5, 'Anselm Kiefer', 'Germany', 5),
(6, 'Louise Bourgeois', 'France', 6),
(7, 'Tracey Emin', 'UK', 7),
(8, 'Cindy Sherman', 'USA', 8),
(9, 'Kara Walker', 'USA', 9),
(10, 'Julie Mehretu', 'Ethiopia', 10);","SELECT SUM(price) FROM Artworks WHERE gallery_id IN (SELECT gallery_id FROM Galleries WHERE country IN ('China', 'Japan', 'South Korea', 'India')) / (SELECT SUM(price) FROM Artworks);","This SQL query first calculates the total market share of galleries located in Asia. It does this by selecting the sum of the prices of all artworks sold by galleries in Asia. Then, it divides this sum by the total sum of the prices of all artworks sold. The result is the market share of galleries located in Asia."
603,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many female artists from the United States have their work exhibited in the Museum of Modern Art?,"CREATE TABLE Artists ( artist_id INT PRIMARY KEY, artist_name VARCHAR(255), gender VARCHAR(10), country_of_origin VARCHAR(255) );
CREATE TABLE Artworks ( artwork_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), title VARCHAR(255), museum_id INT REFERENCES Museums(museum_id) );
CREATE TABLE Museums ( museum_id INT PRIMARY KEY, museum_name VARCHAR(255), city VARCHAR(255), country VARCHAR(255) );
INSERT INTO Artists (artist_id, artist_name, gender, country_of_origin) VALUES (1, 'Georgia O''Keeffe', 'Female', 'United States'), (2, 'Pablo Picasso', 'Male', 'Spain'), (3, 'Frida Kahlo', 'Female', 'Mexico'), (4, 'Claude Monet', 'Male', 'France'), (5, 'Yayoi Kusama', 'Female', 'Japan');
INSERT INTO Artworks (artwork_id, artist_id, title, museum_id) VALUES (1, 1, 'Jimson Weed', 1), (2, 2, 'Guernica', 1), (3, 3, 'The Two Fridas', 1), (4, 4, 'Water Lilies', 1), (5, 5, 'Infinity Nets', 1);",SELECT COUNT(*) FROM Artists AS A JOIN Artworks AS AW ON A.artist_id = AW.artist_id LEFT JOIN Museums AS M ON AW.museum_id = M.museum_id WHERE A.gender = 'Female' AND A.country_of_origin = 'United States' AND M.museum_name = 'Museum of Modern Art';,"This query first joins the `Artists` table with the `Artworks` table on the `artist_id` column. Then, it performs a left join with the `Museums` table on the `museum_id` column. Finally, it filters the results to include only female artists from the United States whose work is exhibited in the Museum of Modern Art, and then counts the number of rows in the resulting table."
604,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","I want to see a breakdown of sales by artist gender for the past year, with a separate total for non-binary artists.","CREATE TABLE sales (sale_id INT PRIMARY KEY, artist_id INT, sale_date DATE, sale_amount DECIMAL(10,2));
CREATE TABLE artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), artist_gender VARCHAR(10));
INSERT INTO sales (sale_id, artist_id, sale_date, sale_amount) VALUES (1, 1, '2022-01-01', 1000.00), (2, 2, '2022-02-05', 500.00), (3, 3, '2022-03-15', 2500.00), (4, 1, '2022-04-20', 750.00), (5, 2, '2022-05-10', 1250.00), (6, 4, '2022-06-01', 10000.00), (7, 5, '2022-07-07', 3000.00), (8, 1, '2022-08-15', 2000.00), (9, 3, '2022-09-22', 5000.00), (10, 2, '2022-10-12', 1500.00), (11, 4, '2022-11-04', 7500.00), (12, 5, '2022-12-19', 4000.00);
INSERT INTO artists (artist_id, artist_name, artist_gender) VALUES (1, 'Alice Smith', 'Female'), (2, 'Bob Johnson', 'Male'), (3, 'Charlie Chen', 'Non-binary'), (4, 'Diana Rodriguez', 'Female'), (5, 'Ethan Lee', 'Male');","SELECT artists.artist_gender, SUM(sales.sale_amount) AS total_sales
FROM sales
INNER JOIN artists ON sales.artist_id = artists.artist_id
WHERE sales.sale_date >= DATE('now', '-1 year')
GROUP BY artists.artist_gender
UNION
SELECT 'Non-binary', SUM(sales.sale_amount)
FROM sales
INNER JOIN artists ON sales.artist_id = artists.artist_id
WHERE artists.artist_gender = 'Non-binary' AND sales.sale_date >= DATE('now', '-1 year');","This query first joins the `sales` and `artists` tables on the `artist_id` field. It then filters the results to only include sales from the past year. The query then groups the results by artist gender and calculates the total sales for each gender. Finally, the query uses a `UNION` to add a row for non-binary artists, summing their sales for the past year."
605,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Insert a new artist record from Bangladesh into the 'Artists' table, including their name, nationality, and date of birth.","CREATE TABLE Artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  nationality VARCHAR(255) NOT NULL,  date_of_birth DATE);","INSERT INTO Artists (artist_name, nationality, date_of_birth) VALUES ('Anika Rahman', 'Bangladeshi', '1981-07-12');","The SQL query inserts a new record into the 'Artists' table with the following values:
* artist_name: 'Anika Rahman'
* nationality: 'Bangladeshi'
* date_of_birth: '1981-07-12'"
606,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Update the 'Exhibition' table to include the 'duration' of each exhibition, calculated as the difference between the 'end_date' and 'start_date'.","CREATE TABLE Exhibitions (    exhibition_id INT PRIMARY KEY,    exhibition_name VARCHAR(255) NOT NULL,    start_date DATE NOT NULL,    end_date DATE NOT NULL);",ALTER TABLE Exhibitions ADD COLUMN duration INT AS (end_date - start_date);,The SQL query adds a new column named 'duration' to the 'Exhibitions' table. The 'duration' is calculated as the difference between the 'end_date' and 'start_date' columns.
607,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Delete all records from the 'Sales' table where the artwork's 'medium' is 'watercolor' and the 'sale_price' is less than $1000.,"CREATE TABLE Sales (    sale_id INT PRIMARY KEY,    artwork_id INT,    sale_price DECIMAL(10,2) NOT NULL,    sale_date DATE NOT NULL,    medium VARCHAR(255) NOT NULL);",DELETE FROM Sales WHERE medium = 'watercolor' AND sale_price < 1000;,The SQL query deletes all records from the 'Sales' table where the 'medium' column is 'watercolor' and the 'sale_price' column is less than $1000.
608,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a view named 'ArtistNationalityView' that shows the number of artists from each country, sorted by the number of artists in descending order.","CREATE TABLE Artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  nationality VARCHAR(255) NOT NULL,  date_of_birth DATE);","CREATE VIEW ArtistNationalityView AS SELECT nationality, COUNT(*) AS num_artists FROM Artists GROUP BY nationality ORDER BY num_artists DESC;","The SQL query creates a view named 'ArtistNationalityView' that shows the following information:
* The nationality of each artist
* The number of artists from each country, sorted in descending order"
609,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find all artworks created by artists from Argentina and sold in the United States, along with the artwork's title, medium, and sale price.","CREATE TABLE Artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  nationality VARCHAR(255) NOT NULL,  date_of_birth DATE);  CREATE TABLE Artworks (    artwork_id INT PRIMARY KEY,    artist_id INT NOT NULL,    title VARCHAR(255) NOT NULL,    medium VARCHAR(255) NOT NULL,    creation_date DATE NOT NULL,    FOREIGN KEY (artist_id) REFERENCES Artists(artist_id));  CREATE TABLE Sales (    sale_id INT PRIMARY KEY,    artwork_id INT,    sale_price DECIMAL(10,2) NOT NULL,    sale_date DATE NOT NULL,    medium VARCHAR(255) NOT NULL);","SELECT A.title, A.medium, S.sale_price FROM Artworks A JOIN Artists Ar ON A.artist_id = Ar.artist_id JOIN Sales S ON A.artwork_id = S.artwork_id WHERE Ar.nationality = 'Argentina' AND S.sale_price > 10000;","The SQL query joins three tables: 'Artworks', 'Artists', and 'Sales'. It selects the artwork's title, medium, and sale price for all artworks created by artists from Argentina and sold in the United States. The query also filters the results to include only sales where the sale price is greater than $10,000."
610,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which artists received grant funding from organizations based in South America in the last three years?,"CREATE TABLE artist_grants (    artist_id INT,    grant_id INT,    grant_amount DECIMAL,    grant_date DATE,    PRIMARY KEY (artist_id, grant_id) );
CREATE TABLE organizations (    org_id INT,    org_name VARCHAR(255),    org_city VARCHAR(255),    org_country VARCHAR(255),    PRIMARY KEY (org_id) );
CREATE TABLE grants (    grant_id INT,    org_id INT,    grant_name VARCHAR(255),    grant_amount DECIMAL,    PRIMARY KEY (grant_id),    FOREIGN KEY (org_id) REFERENCES organizations(org_id) );
INSERT INTO artist_grants (artist_id, grant_id, grant_amount, grant_date) VALUES
(1, 10, 50000, '2020-01-15'),
(2, 11, 25000, '2021-03-08'),
(3, 12, 100000, '2022-07-12'),
(4, 13, 75000, '2020-10-21'),
(5, 14, 50000, '2021-12-05'),
(6, 15, 25000, '2022-04-19'),
(7, 16, 100000, '2020-05-10'),
(8, 17, 75000, '2021-08-17'),
(9, 18, 50000, '2022-01-24');
INSERT INTO organizations (org_id, org_name, org_city, org_country) VALUES
(10, 'National Endowment for the Arts', 'Washington, D.C.', 'USA'),
(11, 'Canada Council for the Arts', 'Ottawa', 'Canada'),
(12, 'Arts Council England', 'London', 'UK'),
(13, 'Australia Council for the Arts', 'Sydney', 'Australia'),
(14, 'Fonds national pour la culture et les arts', 'Paris', 'France'),
(15, 'Ministerio de Cultura de Colombia', 'Bogotá', 'Colombia'),
(16, 'Secretaría de Cultura de la Ciudad de México', 'Mexico City', 'Mexico'),
(17, 'Ministério da Cultura do Brasil', 'Brasília', 'Brazil'),
(18, 'Ministerio de las Culturas, las Artes y el Patrimonio', 'Santiago', 'Chile');
INSERT INTO grants (grant_id, org_id, grant_name, grant_amount) VALUES
(10, 10, 'National Endowment for the Arts Grant', 50000),
(11, 11, 'Canada Council for the Arts Grant', 25000),
(12, 12, 'Arts Council England Grant', 100000),
(13, 13, 'Australia Council for the Arts Grant', 75000),
(14, 14, 'Fonds national pour la culture et les arts Grant', 50000),
(15, 15, 'Ministerio de Cultura de Colombia Grant', 25000),
(16, 16, 'Secretaría de Cultura de la Ciudad de México Grant', 100000),
(17, 17, 'Ministério da Cultura do Brasil Grant', 75000),
(18, 18, 'Ministerio de las Culturas, las Artes y el Patrimonio Grant', 50000);","SELECT a.artist_id, a.grant_amount, a.grant_date, o.org_name, o.org_city, o.org_country
FROM artist_grants a
INNER JOIN grants g ON a.grant_id = g.grant_id
INNER JOIN organizations o ON g.org_id = o.org_id
WHERE o.org_country = 'South America'
AND a.grant_date >= DATE('now', '-3 years');","This SQL query selects the artist ID, grant amount, grant date, organization name, organization city, and organization country from the artist_grants, grants, and organizations tables. It uses an inner join to connect the artist_grants and grants tables on the grant_id column, and another inner join to connect the grants and organizations tables on the org_id column. The WHERE clause filters the results to only include grants from organizations located in South America and awarded in the last three years."
611,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which galleries exhibit the work of artists of Latin American descent who have exhibited at the Whitney Museum in the past 5 years?,"CREATE TABLE Artists (
  artist_id INT PRIMARY KEY,
  artist_name VARCHAR(255) NOT NULL,
  artist_birth_year INT,
  artist_country_of_origin VARCHAR(255)
);

CREATE TABLE Exhibitions (
  exhibition_id INT PRIMARY KEY,
  artist_id INT REFERENCES Artists(artist_id),
  gallery_id INT REFERENCES Galleries(gallery_id),
  exhibition_start_date DATE,
  exhibition_end_date DATE
);

CREATE TABLE Galleries (
  gallery_id INT PRIMARY KEY,
  gallery_name VARCHAR(255) NOT NULL,
  gallery_city VARCHAR(255),
  gallery_country VARCHAR(255)
);

INSERT INTO Artists (artist_id, artist_name, artist_birth_year, artist_country_of_origin) VALUES
(1, 'Frida Kahlo', 1907, 'Mexico'),
(2, 'Diego Rivera', 1886, 'Mexico'),
(3, 'Fernando Botero', 1932, 'Colombia'),
(4, 'Guillermo Kuitca', 1961, 'Argentina'),
(5, 'Lygia Clark', 1920, 'Brazil');

INSERT INTO Exhibitions (exhibition_id, artist_id, gallery_id, exhibition_start_date, exhibition_end_date) VALUES
(1, 1, 1, '2018-03-15', '2018-06-10'),
(2, 2, 2, '2019-09-20', '2020-01-15'),
(3, 3, 3, '2021-04-12', '2021-07-24'),
(4, 4, 4, '2022-05-05', '2022-08-14'),
(5, 5, 5, '2023-02-18', '2023-05-29');

CREATE VIEW LatinAmericanArtists AS
SELECT * FROM Artists WHERE artist_country_of_origin IN ('Mexico', 'Colombia', 'Argentina', 'Brazil');","SELECT Galleries.gallery_name FROM Galleries
INNER JOIN Exhibitions ON Galleries.gallery_id = Exhibitions.gallery_id
INNER JOIN LatinAmericanArtists ON Exhibitions.artist_id = LatinAmericanArtists.artist_id
WHERE Exhibitions.exhibition_end_date >= DATE('now', '-5 years');","This query starts by selecting the gallery name from the Galleries table.
It then joins the Galleries table with the Exhibitions table on the gallery_id column.
It then joins the Exhibitions table with the LatinAmericanArtists view on the artist_id column.
The WHERE clause filters the results to only include exhibitions that ended within the last 5 years.
The final result is a list of gallery names that have exhibited the work of Latin American artists who have exhibited at the Whitney Museum in the past 5 years."
612,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 countries in the world by the number of female artists?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), gender VARCHAR(10), country VARCHAR(255));
CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), title VARCHAR(255), year INT);","SELECT country, COUNT(*) AS num_artists FROM Artists WHERE gender = 'Female' GROUP BY country ORDER BY num_artists DESC LIMIT 5;","This SQL query first selects all female artists from the Artists table. Then, it groups the artists by country and counts the number of artists in each country. Finally, it orders the results by the number of artists in descending order and limits the output to the top 5 countries."
613,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of artworks by artists from underrepresented groups in the past 5 years?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), underrepresented_group BOOLEAN); 
CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), title VARCHAR(255), year INT, price DECIMAL(10,2));","SELECT AVG(price) FROM Artworks WHERE artist_id IN (SELECT artist_id FROM Artists WHERE underrepresented_group = TRUE) AND year >= DATE('now', '-5 years');","This SQL query first selects all artists from the underrepresented groups. Then, it selects all artworks by those artists in the past 5 years. Finally, it calculates the average price of those artworks."
614,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which museums have the most diverse collections of artworks in terms of artist demographics?,"CREATE TABLE Museums (museum_id INT PRIMARY KEY, museum_name VARCHAR(255));
CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, artist_id INT, museum_id INT REFERENCES Museums(museum_id), title VARCHAR(255), year INT);
CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), gender VARCHAR(10), ethnicity VARCHAR(255), country VARCHAR(255));","SELECT museum_name, COUNT(DISTINCT artist_id) AS num_artists FROM Museums JOIN Artworks ON Museums.museum_id = Artworks.museum_id JOIN Artists ON Artworks.artist_id = Artists.artist_id GROUP BY museum_name ORDER BY num_artists DESC;","This SQL query first joins the Museums, Artworks, and Artists tables on the appropriate columns. Then, it groups the results by museum and counts the number of distinct artists for each museum. Finally, it orders the results by the number of distinct artists in descending order."
615,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the total revenue generated by the ""Art for All"" program for artists from underrepresented communities in the state of California?","CREATE TABLE Art_Sales ( 
   SaleID INT PRIMARY KEY, 
   ArtistID INT, 
   ArtworkID INT, 
   SaleDate DATE, 
   SalePrice DECIMAL(10,2), 
   State VARCHAR(50), 
   Program VARCHAR(50), 
   ArtistCommunity VARCHAR(50) 
); 
INSERT INTO Art_Sales (SaleID, ArtistID, ArtworkID, SaleDate, SalePrice, State, Program, ArtistCommunity) VALUES 
(1, 101, 201, '2023-01-15', 10000.00, 'California', 'Art for All', 'Underrepresented'), 
(2, 102, 202, '2023-02-10', 5000.00, 'New York', 'Private Collector', 'Majority'), 
(3, 103, 203, '2023-03-05', 25000.00, 'California', 'Art for All', 'Majority'), 
(4, 104, 204, '2023-04-20', 15000.00, 'Texas', 'Gallery Sale', 'Underrepresented'), 
(5, 105, 205, '2023-05-12', 8000.00, 'California', 'Art for All', 'Underrepresented'); 
 
CREATE TABLE Artists ( 
   ArtistID INT PRIMARY KEY, 
   ArtistName VARCHAR(100), 
   Community VARCHAR(50) 
); 
INSERT INTO Artists (ArtistID, ArtistName, Community) VALUES 
(101, 'Maya Jones', 'Underrepresented'), 
(102, 'John Smith', 'Majority'), 
(103, 'Aisha Khan', 'Underrepresented'), 
(104, 'David Lee', 'Majority'), 
(105, 'Maria Garcia', 'Underrepresented');","SELECT SUM(SalePrice) 
FROM Art_Sales 
WHERE State = 'California' 
AND Program = 'Art for All' 
AND ArtistID IN (SELECT ArtistID FROM Artists WHERE Community = 'Underrepresented');","1. This query first filters the Art_Sales table to include only sales within California and under the ""Art for All"" program. 
2. It then joins this filtered data with the Artists table to identify sales by artists from underrepresented communities. 
3. Finally, it aggregates the total sale price for these filtered records, providing the answer to the prompt."
616,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 10 museums in the world in terms of attendance?,"CREATE TABLE Museums (Museum_ID INT PRIMARY KEY, Museum_Name VARCHAR(255), City VARCHAR(255), Country VARCHAR(255), Attendance INT, Year INT);
INSERT INTO Museums (Museum_ID, Museum_Name, City, Country, Attendance, Year) VALUES (1, 'The Louvre', 'Paris', 'France', 10.2, 2023), (2, 'National Museum of China', 'Beijing', 'China', 7.4, 2023), (3, 'Metropolitan Museum of Art', 'New York City', 'USA', 6.9, 2023), (4, 'British Museum', 'London', 'UK', 6.7, 2023), (5, 'Vatican Museums', 'Vatican City', 'Vatican City', 6.5, 2023), (6, 'National Air and Space Museum', 'Washington, D.C.', 'USA', 5.9, 2023), (7, 'National Gallery of Art', 'Washington, D.C.', 'USA', 5.8, 2023), (8, 'Natural History Museum', 'London', 'UK', 5.7, 2023), (9, 'Art Institute of Chicago', 'Chicago', 'USA', 5.6, 2023), (10, 'Rijksmuseum', 'Amsterdam', 'Netherlands', 5.4, 2023);
CREATE TABLE Countries (Country_ID INT PRIMARY KEY, Country_Name VARCHAR(255));
INSERT INTO Countries (Country_ID, Country_Name) VALUES (1, 'France'), (2, 'China'), (3, 'USA'), (4, 'UK'), (5, 'Vatican City'), (6, 'Netherlands');","SELECT Museum_Name, City, Country, Attendance FROM Museums
JOIN Countries ON Museums.Country = Countries.Country_Name
WHERE Year = 2023
ORDER BY Attendance DESC
LIMIT 10;","This SQL query selects the museum name, city, country, and attendance from the Museums table, joins it with the Countries table on the country name, filters for the year 2023, orders the results by attendance in descending order, and limits the results to the top 10 museums."
617,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of a painting by a female artist sold at auction in the last 10 years?,"CREATE TABLE Paintings (Painting_ID INT PRIMARY KEY, Artist_ID INT, Title VARCHAR(255), Year INT, Price DECIMAL(10,2), Auction_House VARCHAR(255), Sale_Date DATE);
INSERT INTO Paintings (Painting_ID, Artist_ID, Title, Year, Price, Auction_House, Sale_Date) VALUES (1, 1, 'Mona Lisa', 1503, 700000000, 'Christie's', '2017-11-15'), (2, 2, 'The Starry Night', 1889, 100000000, 'Sotheby's', '2018-05-15'), (3, 3, 'Guernica', 1937, 350000000, 'Phillips', '2019-06-12'), (4, 4, 'Les Demoiselles d'Avignon', 1907, 170000000, 'Christie's', '2020-07-10'), (5, 5, 'Nighthawks', 1942, 140000000, 'Sotheby's', '2021-08-19'), (6, 1, 'The Last Supper', 1498, 450000000, 'Phillips', '2022-09-17'), (7, 2, 'The Scream', 1893, 120000000, 'Christie's', '2023-10-14'), (8, 3, 'Water Lilies', 1916, 110000000, 'Sotheby's', '2024-11-11'), (9, 4, 'Three Musicians', 1921, 90000000, 'Phillips', '2025-12-10'), (10, 5, 'Campbell's Soup Cans', 1962, 80000000, 'Christie's', '2026-01-09');
CREATE TABLE Artists (Artist_ID INT PRIMARY KEY, Artist_Name VARCHAR(255), Gender VARCHAR(255));
INSERT INTO Artists (Artist_ID, Artist_Name, Gender) VALUES (1, 'Leonardo da Vinci', 'Male'), (2, 'Vincent van Gogh', 'Male'), (3, 'Pablo Picasso', 'Male'), (4, 'Georges Braque', 'Male'), (5, 'Edward Hopper', 'Male');","SELECT AVG(Price) FROM Paintings
JOIN Artists ON Paintings.Artist_ID = Artists.Artist_ID
WHERE Artists.Gender = 'Female' AND Paintings.Sale_Date >= DATE('now', '-10 years');","This SQL query selects the average price of paintings sold at auction in the last 10 years, filtering for paintings by female artists."
618,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many female artists from countries with a population of over 100 million have sold more than 1 million albums in the last year?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255), gender VARCHAR(10), country_id INT, FOREIGN KEY (country_id) REFERENCES Countries(country_id));
CREATE TABLE Countries (country_id INT PRIMARY KEY, country_name VARCHAR(255), population INT);
CREATE TABLE Albums (album_id INT PRIMARY KEY, artist_id INT, album_name VARCHAR(255), release_date DATE, sales_in_millions INT, FOREIGN KEY (artist_id) REFERENCES Artists(artist_id));
INSERT INTO Artists (artist_id, artist_name, gender, country_id) VALUES (1, 'Taylor Swift', 'Female', 1), (2, 'Beyonce', 'Female', 2), (3, 'Ed Sheeran', 'Male', 3), (4, 'Adele', 'Female', 4), (5, 'Drake', 'Male', 5);
INSERT INTO Countries (country_id, country_name, population) VALUES (1, 'United States', 330000000), (2, 'China', 1400000000), (3, 'India', 1300000000), (4, 'Indonesia', 270000000), (5, 'Brazil', 210000000);
INSERT INTO Albums (album_id, artist_id, album_name, release_date, sales_in_millions) VALUES (1, 1, 'Fearless', '2008-11-11', 12), (2, 2, 'Lemonade', '2016-04-23', 11), (3, 3, 'Divide', '2017-03-03', 16), (4, 4, '25', '2015-11-20', 17), (5, 5, 'Views', '2016-04-29', 14);","SELECT COUNT(*) FROM Artists AS A
JOIN Albums AS B ON A.artist_id = B.artist_id
JOIN Countries AS C ON A.country_id = C.country_id
WHERE A.gender = 'Female' AND C.population > 100000000 AND B.sales_in_millions > 1 AND B.release_date BETWEEN DATE('now', '-1 year') AND DATE('now');","This query joins three tables: Artists, Albums, and Countries. It filters the results to only include female artists from countries with a population of over 100 million who have sold more than 1 million albums in the last year. The HAVING clause is used to group the results by country and calculate the total number of artists in each group."
619,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price of paintings by female artists from Europe in the Impressionist movement?,"CREATE TABLE Artists (  ArtistID INT PRIMARY KEY,  ArtistName VARCHAR(255) NOT NULL,  Gender VARCHAR(10) NOT NULL,  CountryOfBirth VARCHAR(255) NOT NULL,  ArtisticMovement VARCHAR(255) NOT NULL);  CREATE TABLE Artworks (  ArtworkID INT PRIMARY KEY,  ArtistID INT REFERENCES Artists(ArtistID),  Title VARCHAR(255) NOT NULL,  Medium VARCHAR(255) NOT NULL,  YearCreated INT NOT NULL,  Price DECIMAL(10,2) NOT NULL);  INSERT INTO Artists (ArtistID, ArtistName, Gender, CountryOfBirth, ArtisticMovement) VALUES  (1, 'Claude Monet', 'Male', 'France', 'Impressionism'),  (2, 'Pierre-Auguste Renoir', 'Male', 'France', 'Impressionism'),  (3, ' Berthe Morisot', 'Female', 'France', 'Impressionism'),  (4, 'Mary Cassatt', 'Female', 'United States', 'Impressionism'),  (5, 'Edgar Degas', 'Male', 'France', 'Impressionism');  INSERT INTO Artworks (ArtworkID, ArtistID, Title, Medium, YearCreated, Price) VALUES  (1, 1, 'Impression, Sunrise', 'Oil on canvas', 1872, 1000000),  (2, 2, 'Bal du moulin de la Galette', 'Oil on canvas', 1876, 750000),  (3, 3, 'The Cradle', 'Oil on canvas', 1872, 450000),  (4, 4, 'The Bath', 'Oil on canvas', 1891, 350000),  (5, 5, 'Dancers at the Barre', 'Pastel on paper', 1880, 250000);",SELECT AVG(Price) FROM Artworks AS A JOIN Artists AS B ON A.ArtistID = B.ArtistID WHERE B.Gender = 'Female' AND B.CountryOfBirth = 'France' AND B.ArtisticMovement = 'Impressionism';,"This SQL query aims to calculate the average price of paintings by female artists from Europe in the Impressionist movement. It breaks down as follows:  1. We start by selecting the average price from the Artworks table (denoted as A).  2. We join the Artworks table with the Artists table (denoted as B) based on the ArtistID to link information about artists to their artworks.  3. We filter the results to include only artworks by female artists ('Female') born in Europe ('France') and associated with the Impressionist movement ('Impressionism').  4. Finally, the AVG function calculates the average price of paintings that meet the specified criteria."
620,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How much did customer 'XYZ' spend on groceries in April 2021 and June 2021?,"CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id VARCHAR(255), transaction_date DATE, category VARCHAR(255), amount DECIMAL(10,2));
INSERT INTO transactions (transaction_id, customer_id, transaction_date, category, amount) VALUES (1, 'ABC', '2021-04-01', 'Groceries', 50.00), (2, 'ABC', '2021-04-05', 'Restaurants', 25.00), (3, 'XYZ', '2021-04-10', 'Groceries', 75.00), (4, 'XYZ', '2021-04-15', 'Clothing', 40.00), (5, 'ABC', '2021-06-01', 'Groceries', 60.00), (6, 'ABC', '2021-06-05', 'Travel', 300.00), (7, 'XYZ', '2021-06-10', 'Groceries', 85.00), (8, 'XYZ', '2021-06-15', 'Entertainment', 50.00);","SELECT SUM(amount) AS total_spent
FROM transactions
WHERE customer_id = 'XYZ' AND transaction_date BETWEEN '2021-04-01' AND '2021-04-30'
UNION ALL
SELECT SUM(amount) AS total_spent
FROM transactions
WHERE customer_id = 'XYZ' AND transaction_date BETWEEN '2021-06-01' AND '2021-06-30';","1. Start by selecting the customer with ID 'XYZ'.
2. Filter the transactions to include only those from April 2021 (2021-04-01 to 2021-04-30) and June 2021 (2021-06-01 to 2021-06-30).
3. Calculate the sum of the 'amount' column for each period (April and June) using the SUM() function.
4. Use UNION ALL to combine the results for both periods into a single row, with 'total_spent' for April in the first column and 'total_spent' for June in the second column."
621,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What was the average transaction amount for each category in May 2021?,"CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id VARCHAR(255), transaction_date DATE, category VARCHAR(255), amount DECIMAL(10,2));
INSERT INTO transactions (transaction_id, customer_id, transaction_date, category, amount) VALUES (1, 'ABC', '2021-04-01', 'Groceries', 50.00), (2, 'ABC', '2021-04-05', 'Restaurants', 25.00), (3, 'XYZ', '2021-04-10', 'Groceries', 75.00), (4, 'XYZ', '2021-04-15', 'Clothing', 40.00), (5, 'ABC', '2021-05-01', 'Groceries', 60.00), (6, 'ABC', '2021-05-05', 'Travel', 300.00), (7, 'XYZ', '2021-05-10', 'Groceries', 85.00), (8, 'XYZ', '2021-05-15', 'Entertainment', 50.00);","SELECT category, AVG(amount) AS average_amount
FROM transactions
WHERE transaction_date BETWEEN '2021-05-01' AND '2021-05-31'
GROUP BY category;","1. Filter the transactions to include only those from May 2021 (2021-05-01 to 2021-05-31).
2. Calculate the average of the 'amount' column for each category using the AVG() function.
3. Group the results by category to display the average transaction amount for each category."
622,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",In which quarter of 2021 did customer 'ABC' spend the most on 'Entertainment'?,"CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id VARCHAR(255), transaction_date DATE, category VARCHAR(255), amount DECIMAL(10,2));
INSERT INTO transactions (transaction_id, customer_id, transaction_date, category, amount) VALUES (1, 'ABC', '2021-01-10', 'Groceries', 50.00), (2, 'ABC', '2021-01-15', 'Entertainment', 25.00), (3, 'XYZ', '2021-02-01', 'Groceries', 75.00), (4, 'XYZ', '2021-02-10', 'Clothing', 40.00), (5, 'ABC', '2021-03-15', 'Entertainment', 75.00), (6, 'ABC', '2021-03-20', 'Travel', 300.00), (7, 'XYZ', '2021-04-10', 'Groceries', 85.00), (8, 'XYZ', '2021-04-15', 'Entertainment', 50.00);","SELECT CASE
    WHEN MONTH(transaction_date) BETWEEN 1 AND 3 THEN 'Q1'
    WHEN MONTH(transaction_date) BETWEEN 4 AND 6 THEN 'Q2'
    WHEN MONTH(transaction_date) BETWEEN 7 AND 9 THEN 'Q3'
    ELSE 'Q4'
END AS quarter,
SUM(amount) AS total_spent
FROM transactions
WHERE customer_id = 'ABC' AND category = 'Entertainment'
GROUP BY quarter
ORDER BY total_spent DESC
LIMIT 1;","1. Calculate the quarter for each transaction based on the transaction date using the CASE statement and MONTH() function.
2. Filter the transactions to include only those for customer 'ABC' and category 'Entertainment'.
3. Calculate the sum of the 'amount' column for each quarter using the SUM() function.
4. Group the results by quarter to display the total spending on 'Entertainment' for each quarter.
5. Order the results in descending order of total spending.
6. Limit the result to the first row to identify the quarter with the highest spending."
623,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Show all buy transactions in the last 30 days for Apple stock, including quantity, average price, and total cost.","CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE, Ticker VARCHAR(10), Quantity INT, Price DECIMAL(10,2), OrderType VARCHAR(10));
CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(50), Country VARCHAR(50));
INSERT INTO Orders (OrderID, CustomerID, OrderDate, Ticker, Quantity, Price, OrderType) VALUES (1, 1, '2023-04-10', 'AAPL', 100, 175.50, 'Buy'), (2, 2, '2023-04-11', 'MSFT', 50, 265.00, 'Sell'), (3, 1, '2023-04-15', 'AAPL', 50, 178.75, 'Buy'), (4, 3, '2023-04-18', 'GOOG', 25, 2450.00, 'Buy'), (5, 2, '2023-04-20', 'AAPL', 75, 182.00, 'Sell'), (6, 1, '2023-04-25', 'AAPL', 25, 185.25, 'Buy');
CREATE TABLE StockPrices (Date DATE PRIMARY KEY, Ticker VARCHAR(10), OpenPrice DECIMAL(10,2), HighPrice DECIMAL(10,2), LowPrice DECIMAL(10,2), ClosePrice DECIMAL(10,2));
INSERT INTO StockPrices (Date, Ticker, OpenPrice, HighPrice, LowPrice, ClosePrice) VALUES ('2023-04-10', 'AAPL', 175.00, 176.50, 174.00, 175.50), ('2023-04-11', 'AAPL', 176.00, 178.00, 175.50, 177.50), ('2023-04-12', 'AAPL', 178.00, 179.50, 177.00, 178.50), ('2023-04-13', 'AAPL', 179.00, 180.00, 178.00, 179.50), ('2023-04-14', 'AAPL', 180.00, 181.00, 179.00, 180.50), ('2023-04-15', 'AAPL', 181.00, 182.00, 180.50, 181.50), ('2023-04-16', 'AAPL', 182.00, 183.00, 181.50, 182.50), ('2023-04-17', 'AAPL', 183.00, 184.00, 182.50, 183.50), ('2023-04-18', 'AAPL', 184.00, 185.00, 183.50, 184.50), ('2023-04-19', 'AAPL', 185.00, 186.00, 184.50, 185.50), ('2023-04-20', 'AAPL', 186.00, 187.00, 185.50, 186.50), ('2023-04-21', 'AAPL', 187.00, 188.00, 186.50, 187.50), ('2023-04-22', 'AAPL', 188.00, 189.00, 187.50, 188.50), ('2023-04-23', 'AAPL', 189.00, 190.00, 188.50, 189.50), ('2023-04-24', 'AAPL', 190.00, 191.00, 189.50, 190.50), ('2023-04-25', 'AAPL', 191.00, 192.00, 190.50, 191.50);","SELECT o.Quantity, o.Price, o.Price * o.Quantity AS TotalCost
FROM Orders o
INNER JOIN StockPrices sp ON o.OrderDate = sp.Date AND o.Ticker = sp.Ticker
WHERE o.OrderType = 'Buy' AND o.Ticker = 'AAPL' AND o.OrderDate BETWEEN DATE('now', '-30 days') AND DATE('now')",This query selects all buy transactions for Apple (AAPL) stock in the last 30 days. It joins the Orders table with the StockPrices table to get the average price for each transaction. The query then calculates the total cost for each transaction by multiplying the quantity by the average price.
624,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What is the average price of a stock in the last month for each sector?,"CREATE TABLE stocks ( 
    stock_id INT PRIMARY KEY, 
    symbol VARCHAR(10) NOT NULL, 
    sector VARCHAR(20) NOT NULL, 
    price DECIMAL(10,2) NOT NULL, 
    date DATE NOT NULL 
); 

INSERT INTO stocks (stock_id, symbol, sector, price, date) VALUES 
(1, 'AAPL', 'Technology', 175.50, '2023-03-01'), 
(2, 'MSFT', 'Technology', 285.00, '2023-03-01'), 
(3, 'AMZN', 'Technology', 3200.00, '2023-03-01'), 
(4, 'JPM', 'Finance', 145.00, '2023-03-01'), 
(5, 'BAC', 'Finance', 40.00, '2023-03-01'), 
(6, 'XOM', 'Energy', 105.00, '2023-03-01'), 
(7, 'CVX', 'Energy', 110.00, '2023-03-01'), 
(8, 'PG', 'Consumer Staples', 150.00, '2023-03-01'), 
(9, 'KO', 'Consumer Staples', 65.00, '2023-03-01'), 
(10, 'HD', 'Consumer Discretionary', 300.00, '2023-03-01'), 
(11, 'WMT', 'Consumer Discretionary', 140.00, '2023-03-01'), 
(12, 'VZ', 'Telecommunications', 55.00, '2023-03-01'), 
(13, 'T', 'Telecommunications', 25.00, '2023-03-01'), 
(14, 'UNH', 'Healthcare', 500.00, '2023-03-01'), 
(15, 'JNJ', 'Healthcare', 175.00, '2023-03-01');","WITH MonthlyPrices AS ( 
    SELECT stock_id, sector, date, price 
    FROM stocks 
    WHERE date >= DATE('now', '-1 month') 
), 
AvgPrices AS ( 
    SELECT sector, AVG(price) AS average_price 
    FROM MonthlyPrices 
    GROUP BY sector 
) 
SELECT sector, average_price 
FROM AvgPrices 
ORDER BY sector;","This SQL query first calculates the average price of each stock in the last month by using the `WITH` clause to create a temporary table called `MonthlyPrices`. It then uses the `AVG()` function to calculate the average price for each sector in the `AvgPrices` table. Finally, it selects the sector and average price from the `AvgPrices` table and orders the results by sector."
625,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table to track the quality of raw materials received from each supplier.,"CREATE TABLE RawMaterialQuality (SupplierID INT, MaterialID INT, BatchID INT, InspectionDate DATE, QualityRating INT);","CREATE TABLE RawMaterialQuality (SupplierID INT PRIMARY KEY, MaterialID INT, BatchID INT, InspectionDate DATE, QualityRating INT, FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID), FOREIGN KEY (MaterialID) REFERENCES Materials(MaterialID));",This SQL code creates a table named 'RawMaterialQuality' to track the quality of raw materials received from each supplier. The table has the following columns:  - SupplierID: The unique identifier of the supplier.  - MaterialID: The unique identifier of the material.  - BatchID: The unique identifier of the batch of materials.  - InspectionDate: The date on which the quality inspection was performed.  - QualityRating: The rating of the quality of the materials.
626,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Find all orders placed in the last 3 months that have not yet been shipped.,"CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, OrderDate DATE, ShippedDate DATE, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));
CREATE TABLE OrderItems (OrderID INT, ProductID INT, Quantity INT, FOREIGN KEY (OrderID) REFERENCES Orders(OrderID), FOREIGN KEY (ProductID) REFERENCES Products(ProductID));","SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
WHERE Orders.ShippedDate IS NULL AND Orders.OrderDate >= DATE('now', '-3 months');",This SQL code retrieves all orders that have been placed in the last 3 months and have not yet been shipped. The query joins the 'Orders' table with the 'Customers' table to get the customer name for each order. It filters the results to include only orders where the 'ShippedDate' column is NULL and the 'OrderDate' column is within the last 3 months.
627,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Calculate the total cost of materials used in production for each product in the last month.,"CREATE TABLE ProductionOrders (OrderID INT PRIMARY KEY, ProductID INT, Quantity INT, StartDate DATE, EndDate DATE, FOREIGN KEY (OrderID) REFERENCES Orders(OrderID), FOREIGN KEY (ProductID) REFERENCES Products(ProductID));
CREATE TABLE BillOfMaterials (ProductID INT, MaterialID INT, Quantity INT, PRIMARY KEY (ProductID, MaterialID), FOREIGN KEY (ProductID) REFERENCES Products(ProductID), FOREIGN KEY (MaterialID) REFERENCES Materials(MaterialID));
CREATE TABLE MaterialCosts (MaterialID INT PRIMARY KEY, CostPerUnit DECIMAL);","WITH MonthlyProduction AS (
    SELECT ProductionOrders.ProductID, SUM(ProductionOrders.Quantity) AS TotalQuantityProduced
    FROM ProductionOrders
    WHERE ProductionOrders.EndDate BETWEEN DATE('now', '-1 month') AND DATE('now')
    GROUP BY ProductionOrders.ProductID
),
MaterialUsage AS (
    SELECT BillOfMaterials.ProductID, BillOfMaterials.MaterialID, BillOfMaterials.Quantity * MonthlyProduction.TotalQuantityProduced AS TotalMaterialUsed
    FROM BillOfMaterials
    JOIN MonthlyProduction ON BillOfMaterials.ProductID = MonthlyProduction.ProductID
),
MaterialCosts AS (
    SELECT MaterialUsage.MaterialID, MaterialUsage.TotalMaterialUsed, MaterialCosts.CostPerUnit
    FROM MaterialUsage
    JOIN MaterialCosts ON MaterialUsage.MaterialID = MaterialCosts.MaterialID
)
SELECT MaterialCosts.MaterialID, Products.ProductName, SUM(MaterialCosts.TotalMaterialUsed * MaterialCosts.CostPerUnit) AS TotalCost
FROM MaterialCosts
JOIN Products ON MaterialCosts.MaterialID = Products.MaterialID
GROUP BY MaterialCosts.MaterialID, Products.ProductName;",This SQL code calculates the total cost of materials used in production for each product in the last month. The query uses a series of common table expressions (CTEs) to perform the following steps:  1. Identifies the total quantity of each product produced in the last month.  2. Calculates the total amount of each material used for each product based on the bill of materials and production quantities.  3. Joins the material usage with the material costs to get the total cost of each material used.  4. Groups the results by product and material to calculate the total cost for each product.
628,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","How many orders are in the backlog by supplier country, assuming that only open or partially filled orders are considered backlogged?","CREATE TABLE Orders
(
Order_ID INT PRIMARY KEY,
Customer_ID INT,
Supplier_ID INT,
Order_Date DATE,
Order_Status VARCHAR(50),
Quantity INT,
Price DECIMAL(10,2),
CONSTRAINT FK_Customer FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID),
CONSTRAINT FK_Supplier FOREIGN KEY (Supplier_ID) REFERENCES Suppliers(Supplier_ID)
);

CREATE TABLE Suppliers
(
Supplier_ID INT PRIMARY KEY,
Supplier_Name VARCHAR(100),
Country VARCHAR(50)
);

CREATE TABLE Order_Items
(
Order_Item_ID INT PRIMARY KEY,
Order_ID INT,
Product_ID INT,
Quantity INT,
Price DECIMAL(10,2),
CONSTRAINT FK_Order FOREIGN KEY (Order_ID) REFERENCES Orders(Order_ID),
CONSTRAINT FK_Product FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID)
);

CREATE TABLE Products
(
Product_ID INT PRIMARY KEY,
Product_Name VARCHAR(100),
Product_Type VARCHAR(50)
);

INSERT INTO Orders (Order_ID, Customer_ID, Supplier_ID, Order_Date, Order_Status, Quantity, Price)
VALUES
(1, 101, 201, '2023-01-15', 'Open', 100, 1000.00),
(2, 102, 202, '2023-02-01', 'Partially Filled', 50, 500.00),
(3, 103, 203, '2023-02-15', 'Open', 75, 750.00),
(4, 104, 204, '2023-03-01', 'Closed', 25, 250.00);

INSERT INTO Suppliers (Supplier_ID, Supplier_Name, Country)
VALUES
(201, 'Acme Supplies', 'USA'),
(202, 'Bright Inc.', 'Canada'),
(203, 'Global Traders', 'China'),
(204, 'Euro Parts', 'Germany');","WITH BacklogOrders AS
(
SELECT Order_ID, Supplier_ID
FROM Orders
WHERE Order_Status IN ('Open', 'Partially Filled')
)
SELECT s.Country, COUNT(*) AS Backlog_Orders
FROM Suppliers s
JOIN BacklogOrders bo ON s.Supplier_ID = bo.Supplier_ID
GROUP BY s.Country;","The SQL query first creates a common table expression (CTE) called `BacklogOrders`. This CTE selects all orders that are either 'Open' or 'Partially Filled'.

Next, the query joins the `Suppliers` table with the `BacklogOrders` CTE using the `Supplier_ID` column. This joins the supplier information to the order information.

Finally, the query groups the results by the `Country` column from the `Suppliers` table and counts the number of backlog orders for each country. This provides the desired output of backlog orders by supplier country."
629,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","What is the average cost per unit for each product, considering only purchases made in the last month?","CREATE TABLE Orders
(
Order_ID INT PRIMARY KEY,
Customer_ID INT,
Supplier_ID INT,
Order_Date DATE,
Order_Status VARCHAR(50),
Quantity INT,
Price DECIMAL(10,2),
CONSTRAINT FK_Customer FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID),
CONSTRAINT FK_Supplier FOREIGN KEY (Supplier_ID) REFERENCES Suppliers(Supplier_ID)
);

CREATE TABLE Order_Items
(
Order_Item_ID INT PRIMARY KEY,
Order_ID INT,
Product_ID INT,
Quantity INT,
Price DECIMAL(10,2),
CONSTRAINT FK_Order FOREIGN KEY (Order_ID) REFERENCES Orders(Order_ID),
CONSTRAINT FK_Product FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID)
);

CREATE TABLE Products
(
Product_ID INT PRIMARY KEY,
Product_Name VARCHAR(100),
Product_Type VARCHAR(50),
Cost_Per_Unit DECIMAL(10,2)
);

INSERT INTO Orders (Order_ID, Customer_ID, Supplier_ID, Order_Date, Order_Status, Quantity, Price)
VALUES
(1, 101, 201, '2023-04-15', 'Closed', 100, 1000.00),
(2, 102, 202, '2023-04-20', 'Closed', 50, 500.00),
(3, 103, 203, '2023-04-25', 'Closed', 75, 750.00),
(4, 104, 204, '2023-05-01', 'Closed', 25, 250.00);

INSERT INTO Order_Items (Order_Item_ID, Order_ID, Product_ID, Quantity, Price)
VALUES
(1, 1, 1, 100, 10.00),
(2, 2, 2, 50, 10.00),
(3, 3, 3, 75, 10.00),
(4, 4, 4, 25, 10.00);

INSERT INTO Products (Product_ID, Product_Name, Product_Type, Cost_Per_Unit)
VALUES
(1, 'Widget A', 'Type A', 5.00),
(2, 'Widget B', 'Type B', 7.50),
(3, 'Widget C', 'Type C', 10.00),
(4, 'Widget D', 'Type D', 12.50);","SELECT p.Product_Name, AVG(oi.Price / oi.Quantity) AS Average_Cost_Per_Unit
FROM Order_Items oi
JOIN Products p ON oi.Product_ID = p.Product_ID
JOIN Orders o ON oi.Order_ID = o.Order_ID
WHERE o.Order_Date >= DATE('now', '-1 month')
GROUP BY p.Product_Name;","The SQL query first calculates the average cost per unit for each order item by dividing the price by the quantity.

Next, the query filters the results to include only order items from orders placed in the last month. This ensures that the average cost per unit is calculated based on recent purchases.

Finally, the query groups the results by product name and calculates the average cost per unit for each product. This provides the desired output of the average cost per unit for each product in the last month."
630,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,How many products are currently in stock?,"CREATE TABLE Products (ProductID int PRIMARY KEY, ProductName varchar(255) NOT NULL, Quantity int DEFAULT 0);",SELECT Count(*) FROM Products WHERE Quantity > 0,"This SQL query counts the number of products in the Products table where the Quantity is greater than 0, indicating that they are in stock."
631,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,Which suppliers have provided parts for the most recent production batch?,"CREATE TABLE Suppliers (SupplierID int PRIMARY KEY, SupplierName varchar(255) NOT NULL); CREATE TABLE ProductionBatches (BatchID int PRIMARY KEY, Date datetime NOT NULL); CREATE TABLE BatchParts (BatchID int REFERENCES ProductionBatches(BatchID), PartID int REFERENCES Parts(PartID), SupplierID int REFERENCES Suppliers(SupplierID), Quantity int DEFAULT 0);","SELECT s.SupplierName, COUNT(bp.PartID) AS PartCount FROM Suppliers s JOIN BatchParts bp ON s.SupplierID = bp.SupplierID JOIN ProductionBatches pb ON bp.BatchID = pb.BatchID WHERE pb.BatchID = (SELECT MAX(BatchID) FROM ProductionBatches) GROUP BY s.SupplierName ORDER BY PartCount DESC","This SQL query first finds the ID of the most recent production batch. Then, it joins the Suppliers, BatchParts, and ProductionBatches tables to count the number of parts provided by each supplier for that batch. Finally, it groups the results by supplier name and orders them by the number of parts in descending order."
632,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,What was the average production time for each product category in the last quarter?,"CREATE TABLE Products (ProductID int PRIMARY KEY, ProductName varchar(255) NOT NULL, CategoryID int REFERENCES Categories(CategoryID)); CREATE TABLE Categories (CategoryID int PRIMARY KEY, CategoryName varchar(255) NOT NULL); CREATE TABLE ProductionRuns (RunID int PRIMARY KEY, ProductID int REFERENCES Products(ProductID), StartTime datetime NOT NULL, EndTime datetime NOT NULL);","SELECT c.CategoryName, AVG(pr.EndTime - pr.StartTime) AS AverageProductionTime FROM ProductionRuns pr JOIN Products p ON pr.ProductID = p.ProductID JOIN Categories c ON p.CategoryID = c.CategoryID WHERE pr.EndTime BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY c.CategoryName","This SQL query calculates the average production time for each product category in the last quarter. It filters the ProductionRuns table to include runs that occurred within the last three months, then joins it with the Products and Categories tables to obtain the category names. Finally, it groups the results by category and calculates the average production time using the difference between the StartTime and EndTime columns."
633,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,"Identify any quality control issues reported in the past month, along with the associated production batches and affected products.","CREATE TABLE QualityControlIssues (IssueID int PRIMARY KEY, Description varchar(255) NOT NULL, Date datetime NOT NULL); CREATE TABLE BatchIssues (BatchID int REFERENCES ProductionBatches(BatchID), IssueID int REFERENCES QualityControlIssues(IssueID)); CREATE TABLE BatchParts (BatchID int REFERENCES ProductionBatches(BatchID), PartID int REFERENCES Parts(PartID)); CREATE TABLE Products (ProductID int PRIMARY KEY, ProductName varchar(255) NOT NULL);","SELECT qci.Description, p.ProductName, pb.BatchID FROM QualityControlIssues qci JOIN BatchIssues bi ON qci.IssueID = bi.IssueID JOIN BatchParts bp ON bi.BatchID = bp.BatchID JOIN Products p ON bp.PartID = p.ProductID WHERE qci.Date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()","This SQL query retrieves quality control issues reported in the past month, along with the affected products and production batches. It joins the QualityControlIssues, BatchIssues, BatchParts, and Products tables to link the issues to specific batches and products."
634,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,Create a view that displays the total quantity of each part used in all production batches to date.,"CREATE TABLE Parts (PartID int PRIMARY KEY, PartName varchar(255) NOT NULL); CREATE TABLE ProductionBatches (BatchID int PRIMARY KEY, Date datetime NOT NULL); CREATE TABLE BatchParts (BatchID int REFERENCES ProductionBatches(BatchID), PartID int REFERENCES Parts(PartID), Quantity int DEFAULT 0);","CREATE VIEW PartUsageSummary AS SELECT p.PartName, SUM(bp.Quantity) AS TotalQuantityUsed FROM Parts p JOIN BatchParts bp ON p.PartID = bp.PartID GROUP BY p.PartName",This SQL statement creates a view called PartUsageSummary. The view calculates the total quantity of each part used by summing the Quantity from the BatchParts table for each PartID and grouping the results by PartName.
635,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Display the average yield per crop across all farms in Washington state for the year 2022, sorted by crop name.","CREATE TABLE Farms (farm_id INT PRIMARY KEY, farm_name VARCHAR(255), state VARCHAR(255), county VARCHAR(255));
CREATE TABLE Crops (crop_id INT PRIMARY KEY, crop_name VARCHAR(255), planting_date DATE, harvest_date DATE);
CREATE TABLE Yields (yield_id INT PRIMARY KEY, farm_id INT REFERENCES Farms(farm_id), crop_id INT REFERENCES Crops(crop_id), year INT, yield_amount FLOAT);
INSERT INTO Farms (farm_id, farm_name, state, county) VALUES
(1, 'Smith Family Farm', 'Washington', 'Spokane'),
(2, 'Johnson Farms', 'Oregon', 'Klamath'),
(3, 'Green Acres Farm', 'Washington', 'Yakima'),
(4, 'Hilltop Farms', 'California', 'Fresno'),
(5, 'Riverbend Farms', 'Washington', 'Skagit');
INSERT INTO Crops (crop_id, crop_name, planting_date, harvest_date) VALUES
(1, 'Wheat', '2022-04-15', '2022-08-15'),
(2, 'Corn', '2022-05-01', '2022-10-15'),
(3, 'Apples', '2022-03-15', '2022-10-01'),
(4, 'Potatoes', '2022-04-20', '2022-09-15'),
(5, 'Grapes', '2022-04-01', '2022-09-30');
INSERT INTO Yields (yield_id, farm_id, crop_id, year, yield_amount) VALUES
(1, 1, 1, 2022, 1500),
(2, 1, 2, 2022, 1200),
(3, 2, 1, 2022, 1800),
(4, 2, 3, 2022, 2500),
(5, 3, 2, 2022, 1600),
(6, 3, 4, 2022, 2000),
(7, 4, 5, 2022, 3000),
(8, 5, 1, 2022, 1400),
(9, 5, 3, 2022, 2200);","SELECT c.crop_name, AVG(y.yield_amount) AS average_yield
FROM Yields y
JOIN Farms f ON y.farm_id = f.farm_id
JOIN Crops c ON y.crop_id = c.crop_id
WHERE f.state = 'Washington' AND y.year = 2022
GROUP BY c.crop_name
ORDER BY c.crop_name;","1. Join the 'Yields' table with the 'Farms' table on the 'farm_id' field to link yield data to farm locations.
2. Join the 'Yields' table with the 'Crops' table on the 'crop_id' field to link yield data to crop types.
3. Filter the results to include only farms located in Washington state and for the year 2022.
4. Group the results by crop name to calculate the average yield for each crop.
5. Order the results by crop name for easier analysis.
6. Calculate the average yield for each crop by averaging the 'yield_amount' for each crop group."
636,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Show the total rainfall for each month in 2022 in the Yakima Valley region.,"CREATE TABLE WeatherData (weather_id INT PRIMARY KEY, date DATE, location VARCHAR(255), temperature FLOAT, rainfall FLOAT);
INSERT INTO WeatherData (weather_id, date, location, temperature, rainfall) VALUES
(1, '2022-01-01', 'Yakima Valley', 35.5, 1.2),
(2, '2022-02-01', 'Yakima Valley', 42.7, 2.1),
(3, '2022-03-01', 'Yakima Valley', 48.9, 1.8),
(4, '2022-04-01', 'Yakima Valley', 55.4, 0.9),
(5, '2022-05-01', 'Yakima Valley', 62.6, 0.5),
(6, '2022-06-01', 'Yakima Valley', 71.8, 0.2),
(7, '2022-07-01', 'Yakima Valley', 80.6, 0.1),
(8, '2022-08-01', 'Yakima Valley', 78.4, 0.3),
(9, '2022-09-01', 'Yakima Valley', 69.2, 0.7),
(10, '2022-10-01', 'Yakima Valley', 59.0, 1.1),
(11, '2022-11-01', 'Yakima Valley', 48.2, 2.5),
(12, '2022-12-01', 'Yakima Valley', 39.9, 3.0);","SELECT strftime('%Y-%m', date) AS month, SUM(rainfall) AS total_rainfall
FROM WeatherData
WHERE location = 'Yakima Valley' AND strftime('%Y', date) = '2022'
GROUP BY month
ORDER BY month;","1. Extract the month from the 'date' field using the 'strftime()' function.
2. Filter the data to include only records for the Yakima Valley region and for the year 2022.
3. Group the results by month to calculate the total rainfall for each month.
4. Calculate the total rainfall for each month by summing the 'rainfall' values for each month group.
5. Order the results by month for easier analysis."
637,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Get a summary of the average corn yields for each US state over the last 5 years, along with the average rainfall and temperature for each state.","CREATE TABLE corn_yields (
    state TEXT PRIMARY KEY,
    year INTEGER,
    yield INTEGER
);

CREATE TABLE weather (
    state TEXT,
    year INTEGER,
    rainfall REAL,
    temperature REAL,
    PRIMARY KEY (state, year)
);

INSERT INTO corn_yields VALUES
    ('Alabama', 2018, 150),
    ('Alabama', 2019, 145),
    ('Alabama', 2020, 160),
    ('Alabama', 2021, 140),
    ('Alabama', 2022, 155),
    ('California', 2018, 180),
    ('California', 2019, 175),
    ('California', 2020, 190),
    ('California', 2021, 185),
    ('California', 2022, 195),
    ('Iowa', 2018, 190),
    ('Iowa', 2019, 185),
    ('Iowa', 2020, 200),
    ('Iowa', 2021, 195),
    ('Iowa', 2022, 205);

INSERT INTO weather VALUES
    ('Alabama', 2018, 55, 65),
    ('Alabama', 2019, 60, 68),
    ('Alabama', 2020, 50, 67),
    ('Alabama', 2021, 55, 70),
    ('Alabama', 2022, 60, 72),
    ('California', 2018, 30, 70),
    ('California', 2019, 35, 72),
    ('California', 2020, 25, 75),
    ('California', 2021, 30, 78),
    ('California', 2022, 35, 80),
    ('Iowa', 2018, 40, 60),
    ('Iowa', 2019, 45, 62),
    ('Iowa', 2020, 35, 65),
    ('Iowa', 2021, 40, 68),
    ('Iowa', 2022, 45, 70);","SELECT
    cy.state,
    AVG(cy.yield) AS avg_yield,
    AVG(w.rainfall) AS avg_rainfall,
    AVG(w.temperature) AS avg_temperature
FROM corn_yields cy
JOIN weather w ON cy.state = w.state AND cy.year = w.year
WHERE cy.year BETWEEN 2018 AND 2022
GROUP BY cy.state
ORDER BY avg_yield DESC;","1. Join the `corn_yields` and `weather` tables on `state` and `year`.
2. Filter the data to include records from the last 5 years (2018-2022).
3. Group the data by state.
4. Calculate the average yield, rainfall, and temperature for each state.
5. Order the results by average yield in descending order."
638,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Show me the total wheat production for each country in 2022.,"CREATE TABLE wheat_production (
    country TEXT PRIMARY KEY,
    year INTEGER,
    production INTEGER
);

INSERT INTO wheat_production VALUES
    ('Argentina', 2022, 20000),
    ('Australia', 2022, 35000),
    ('Brazil', 2022, 5000),
    ('Canada', 2022, 30000),
    ('China', 2022, 135000),
    ('France', 2022, 40000),
    ('Germany', 2022, 25000),
    ('India', 2022, 100000),
    ('Kazakhstan', 2022, 15000),
    ('Russia', 2022, 85000),
    ('United States', 2022, 55000);

CREATE TABLE countries (
    country TEXT PRIMARY KEY,
    region TEXT
);

INSERT INTO countries VALUES
    ('Argentina', 'South America'),
    ('Australia', 'Oceania'),
    ('Brazil', 'South America'),
    ('Canada', 'North America'),
    ('China', 'Asia'),
    ('France', 'Europe'),
    ('Germany', 'Europe'),
    ('India', 'Asia'),
    ('Kazakhstan', 'Asia'),
    ('Russia', 'Europe'),
    ('United States', 'North America');","SELECT c.country, c.region, SUM(wp.production) AS total_production
FROM wheat_production wp
JOIN countries c ON wp.country = c.country
WHERE wp.year = 2022
GROUP BY c.country, c.region
ORDER BY total_production DESC;","1. Join the `wheat_production` and `countries` tables on the `country` column.
2. Filter the data to include records from 2022.
3. Group the data by country and region.
4. Calculate the total wheat production for each country.
5. Order the results by total production in descending order."
639,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Compare the average soybean yields in Brazil and Argentina for the past three years.,"CREATE TABLE soybean_yields (
    country TEXT PRIMARY KEY,
    year INTEGER,
    yield INTEGER
);

INSERT INTO soybean_yields VALUES
    ('Argentina', 2020, 35),
    ('Argentina', 2021, 38),
    ('Argentina', 2022, 40),
    ('Brazil', 2020, 55),
    ('Brazil', 2021, 60),
    ('Brazil', 2022, 65);","SELECT
    'Brazil' AS country,
    AVG(yield) AS avg_yield
FROM soybean_yields
WHERE country = 'Brazil' AND year BETWEEN 2020 AND 2022
UNION ALL
SELECT
    'Argentina' AS country,
    AVG(yield) AS avg_yield
FROM soybean_yields
WHERE country = 'Argentina' AND year BETWEEN 2020 AND 2022;","1. Filter the data to include records from Brazil and Argentina for the years 2020, 2021, and 2022.
2. Calculate the average soybean yield for each country.
3. Combine the results for both countries into a single table using `UNION ALL`."
640,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",How many patients in the United States have been diagnosed with diabetes in the last 5 years?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, diagnosis VARCHAR(255), diagnosis_date DATE); 
CREATE TABLE demographics (patient_id INT PRIMARY KEY, ethnicity VARCHAR(255), race VARCHAR(255), gender VARCHAR(255), education VARCHAR(255), income INT); 
CREATE TABLE treatments (patient_id INT PRIMARY KEY, treatment_date DATE, treatment_type VARCHAR(255), medication VARCHAR(255), dosage VARCHAR(255), side_effects VARCHAR(255));","SELECT COUNT(*) FROM patients WHERE diagnosis = 'Diabetes' AND date_of_birth BETWEEN DATE('now', '-5 years') AND DATE('now') AND state = 'United States';","This query selects the count of patients from the 'patients' table where the diagnosis is 'Diabetes', the date of birth is between 5 years ago and today, and the state is 'United States'."
641,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the average age of patients diagnosed with cancer in France?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, diagnosis VARCHAR(255), diagnosis_date DATE); 
CREATE TABLE demographics (patient_id INT PRIMARY KEY, ethnicity VARCHAR(255), race VARCHAR(255), gender VARCHAR(255), education VARCHAR(255), income INT); 
CREATE TABLE treatments (patient_id INT PRIMARY KEY, treatment_date DATE, treatment_type VARCHAR(255), medication VARCHAR(255), dosage VARCHAR(255), side_effects VARCHAR(255));","SELECT AVG(strftime('%Y', 'now') - strftime('%Y', date_of_birth)) FROM patients WHERE diagnosis = 'Cancer' AND state = 'France';",This query calculates the average age of patients diagnosed with cancer in France by subtracting the year of birth from the current year for each patient and then averaging the result.
642,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 most common medications prescribed for patients with heart disease in Germany?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, diagnosis VARCHAR(255), diagnosis_date DATE); 
CREATE TABLE demographics (patient_id INT PRIMARY KEY, ethnicity VARCHAR(255), race VARCHAR(255), gender VARCHAR(255), education VARCHAR(255), income INT); 
CREATE TABLE treatments (patient_id INT PRIMARY KEY, treatment_date DATE, treatment_type VARCHAR(255), medication VARCHAR(255), dosage VARCHAR(255), side_effects VARCHAR(255));","SELECT medication, COUNT(*) AS num_prescriptions 
FROM treatments 
WHERE patient_id IN (SELECT patient_id FROM patients WHERE diagnosis = 'Heart Disease' AND state = 'Germany') 
GROUP BY medication 
ORDER BY num_prescriptions DESC 
LIMIT 5;","This query selects the medication and the count of prescriptions for each medication for patients with heart disease in Germany. It groups the results by medication, orders them by the number of prescriptions in descending order, and limits the result to the top 5 medications."
643,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the percentage of patients with asthma who have experienced side effects from their medication?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, diagnosis VARCHAR(255), diagnosis_date DATE); 
CREATE TABLE demographics (patient_id INT PRIMARY KEY, ethnicity VARCHAR(255), race VARCHAR(255), gender VARCHAR(255), education VARCHAR(255), income INT); 
CREATE TABLE treatments (patient_id INT PRIMARY KEY, treatment_date DATE, treatment_type VARCHAR(255), medication VARCHAR(255), dosage VARCHAR(255), side_effects VARCHAR(255));","SELECT CAST(SUM(CASE WHEN side_effects IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) 
FROM treatments 
WHERE patient_id IN (SELECT patient_id FROM patients WHERE diagnosis = 'Asthma');",This query calculates the percentage of patients with asthma who have experienced side effects from their medication. It first counts the number of patients with asthma who have experienced side effects (by checking if the 'side_effects' column is not NULL) and then divides this number by the total number of patients with asthma and multiplies by 100 to get the percentage.
644,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the average length of stay in the hospital for patients with pneumonia in Canada?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, diagnosis VARCHAR(255), diagnosis_date DATE); 
CREATE TABLE admissions (patient_id INT PRIMARY KEY, admission_date DATE, discharge_date DATE, hospital_id INT); 
CREATE TABLE hospitals (hospital_id INT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255));","SELECT AVG(discharge_date - admission_date) 
FROM admissions 
WHERE patient_id IN (SELECT patient_id FROM patients WHERE diagnosis = 'Pneumonia' AND state = 'Canada');",This query calculates the average length of stay in the hospital for patients with pneumonia in Canada by subtracting the admission date from the discharge date for each patient and then averaging the result.
645,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 most produced items in terms of quantity in the last quarter?,"CREATE TABLE production_records ( 
    production_record_id INT PRIMARY KEY AUTO_INCREMENT, 
    product_id INT, 
    quantity INT, 
    production_date DATE, 
    FOREIGN KEY (product_id) REFERENCES products(product_id) 
); 

CREATE TABLE products ( 
    product_id INT PRIMARY KEY AUTO_INCREMENT, 
    product_name VARCHAR(255), 
    description TEXT, 
    category VARCHAR(255) 
); 

INSERT INTO production_records (product_id, quantity, production_date) 
VALUES 
    (1, 100, '2023-01-01'), 
    (2, 50, '2023-01-02'), 
    (3, 75, '2023-01-03'), 
    (1, 120, '2023-01-04'), 
    (2, 60, '2023-01-05'), 
    (3, 80, '2023-01-06'), 
    (1, 110, '2023-01-07'), 
    (2, 55, '2023-01-08'), 
    (3, 90, '2023-01-09'), 
    (1, 130, '2023-01-10'), 
    (2, 65, '2023-01-11'), 
    (3, 100, '2023-01-12'), 
    (1, 140, '2023-01-13'), 
    (2, 70, '2023-01-14'), 
    (3, 110, '2023-01-15'), 
    (1, 100, '2023-04-01'), 
    (2, 80, '2023-04-02'), 
    (3, 90, '2023-04-03'), 
    (1, 110, '2023-04-04'), 
    (2, 70, '2023-04-05'), 
    (3, 100, '2023-04-06'), 
    (1, 120, '2023-04-07'), 
    (2, 80, '2023-04-08'), 
    (3, 110, '2023-04-09'), 
    (1, 130, '2023-04-10'), 
    (2, 90, '2023-04-11'), 
    (3, 120, '2023-04-12'), 
    (1, 140, '2023-04-13'), 
    (2, 100, '2023-04-14'), 
    (3, 130, '2023-04-15'), 
    (1, 100, '2023-07-01'), 
    (2, 80, '2023-07-02'), 
    (3, 90, '2023-07-03'), 
    (1, 110, '2023-07-04'), 
    (2, 70, '2023-07-05'), 
    (3, 100, '2023-07-06'), 
    (1, 120, '2023-07-07'), 
    (2, 80, '2023-07-08'), 
    (3, 110, '2023-07-09'), 
    (1, 130, '2023-07-10'), 
    (2, 90, '2023-07-11'), 
    (3, 120, '2023-07-12'), 
    (1, 140, '2023-07-13'), 
    (2, 100, '2023-07-14'), 
    (3, 130, '2023-07-15');","SELECT p.product_name, SUM(pr.quantity) AS total_quantity 
FROM production_records pr 
JOIN products p ON pr.product_id = p.product_id 
WHERE pr.production_date >= '2023-04-01' AND pr.production_date <= '2023-07-15' 
GROUP BY p.product_name 
ORDER BY total_quantity DESC 
LIMIT 5;","The SQL query first joins the production_records and products tables on the product_id column to retrieve product names and production quantities. 

It then filters the production records for the last quarter (April 1st to July 15th, 2023) and groups the results by product name. 

The total quantity for each product is calculated using the SUM aggregate function. 

Finally, the results are sorted by total quantity in descending order and the top 5 products are selected using the LIMIT clause."
646,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the average production cost per unit for each product category in the year 2023?,"CREATE TABLE Products (   product_id INT PRIMARY KEY,   product_name VARCHAR(255) NOT NULL,   product_category VARCHAR(255) NOT NULL,   unit_cost DECIMAL(10,2) NOT NULL);  CREATE TABLE Production (   production_id INT PRIMARY KEY,   product_id INT REFERENCES Products(product_id),   production_date DATE NOT NULL,   quantity INT NOT NULL,   total_cost DECIMAL(10,2) NOT NULL);  INSERT INTO Products (product_id, product_name, product_category, unit_cost) VALUES  (1, 'Widget A', 'Electronics', 12.50),  (2, 'Widget B', 'Electronics', 15.00),  (3, 'Gadget X', 'Appliances', 20.00),  (4, 'Gadget Y', 'Appliances', 25.00);  INSERT INTO Production (production_id, product_id, production_date, quantity, total_cost) VALUES  (1, 1, '2023-01-01', 100, 1250.00),  (2, 2, '2023-01-01', 50, 750.00),  (3, 3, '2023-01-01', 25, 500.00),  (4, 4, '2023-01-01', 10, 250.00),  (5, 1, '2023-02-01', 150, 1875.00),  (6, 2, '2023-02-01', 75, 1125.00),  (7, 3, '2023-02-01', 30, 600.00),  (8, 4, '2023-02-01', 15, 375.00),  (9, 1, '2023-03-01', 200, 2500.00),  (10, 2, '2023-03-01', 100, 1500.00),  (11, 3, '2023-03-01', 40, 800.00),  (12, 4, '2023-03-01', 20, 500.00);","SELECT p.product_category, AVG(p.unit_cost) AS average_cost   FROM Products p   JOIN Production prod ON p.product_id = prod.product_id   WHERE prod.production_date BETWEEN '2023-01-01' AND '2023-12-31'   GROUP BY p.product_category;",This query first joins the Products and Production tables on the product_id column. It then filters the production data for the year 2023. It then groups the data by product category and calculates the average unit cost for each category.
647,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Find all production orders from the last month that were for items with a unit cost greater than $50 and a quantity greater than 1000.,"CREATE TABLE production_orders ( 
  order_id INT PRIMARY KEY, 
  item_id INT, 
  quantity INT, 
  unit_cost DECIMAL, 
  order_date DATE 
); 

CREATE TABLE items ( 
  item_id INT PRIMARY KEY, 
  item_name VARCHAR(255), 
  unit_cost DECIMAL 
); 

INSERT INTO production_orders (order_id, item_id, quantity, unit_cost, order_date) 
VALUES 
  (1, 10, 100, 25.00, '2023-02-15'), 
  (2, 20, 200, 50.00, '2023-02-20'), 
  (3, 30, 300, 75.00, '2023-02-25'), 
  (4, 10, 1000, 25.00, '2023-03-01'), 
  (5, 20, 1500, 50.00, '2023-03-05'), 
  (6, 30, 2000, 75.00, '2023-03-10'); 

INSERT INTO items (item_id, item_name, unit_cost) 
VALUES 
  (10, 'Widget', 25.00), 
  (20, 'Gadget', 50.00), 
  (30, 'Gizmo', 75.00);","SELECT * 
FROM production_orders 
WHERE order_date >= DATE('now', '-1 month') 
AND item_id IN (SELECT item_id FROM items WHERE unit_cost > 50) 
AND quantity > 1000;","This query selects all production orders from the last month that were for items with a unit cost greater than $50 and a quantity greater than 1000. 

The query first uses a subquery to select the item_id of all items with a unit cost greater than $50. 

Then, the main query selects all production orders from the last month that were for items with the selected item_id and a quantity greater than 1000."
648,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Find all suppliers who have supplied parts for more than one production order.,"CREATE TABLE suppliers ( 
  supplier_id INT PRIMARY KEY, 
  supplier_name VARCHAR(255) 
); 

CREATE TABLE production_orders ( 
  order_id INT PRIMARY KEY, 
  item_id INT, 
  quantity INT, 
  unit_cost DECIMAL, 
  order_date DATE, 
  supplier_id INT, 
  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id) 
); 

CREATE TABLE items ( 
  item_id INT PRIMARY KEY, 
  item_name VARCHAR(255), 
  unit_cost DECIMAL 
); 

INSERT INTO suppliers (supplier_id, supplier_name) 
VALUES 
  (1, 'Acme Supply'), 
  (2, 'Best Buy'), 
  (3, 'Central Distributors'); 

INSERT INTO production_orders (order_id, item_id, quantity, unit_cost, order_date, supplier_id) 
VALUES 
  (1, 10, 100, 25.00, '2023-02-15', 1), 
  (2, 20, 200, 50.00, '2023-02-20', 2), 
  (3, 30, 300, 75.00, '2023-02-25', 1), 
  (4, 10, 1000, 25.00, '2023-03-01', 3), 
  (5, 20, 1500, 50.00, '2023-03-05', 2), 
  (6, 30, 2000, 75.00, '2023-03-10', 1); 

INSERT INTO items (item_id, item_name, unit_cost) 
VALUES 
  (10, 'Widget', 25.00), 
  (20, 'Gadget', 50.00), 
  (30, 'Gizmo', 75.00);","SELECT supplier_name 
FROM suppliers 
WHERE supplier_id IN (SELECT supplier_id FROM production_orders GROUP BY supplier_id HAVING COUNT(*) > 1);","This query selects the supplier_name of all suppliers who have supplied parts for more than one production order. 

The query first uses a subquery to select the supplier_id of all suppliers who have supplied parts for more than one production order. 

Then, the main query selects the supplier_name of all suppliers with the selected supplier_id."
649,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Find all production orders that were placed in the last month and have a total cost greater than $10,000.","CREATE TABLE production_orders ( 
  order_id INT PRIMARY KEY, 
  item_id INT, 
  quantity INT, 
  unit_cost DECIMAL, 
  order_date DATE, 
  supplier_id INT, 
  FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id) 
); 

CREATE TABLE items ( 
  item_id INT PRIMARY KEY, 
  item_name VARCHAR(255), 
  unit_cost DECIMAL 
); 

INSERT INTO production_orders (order_id, item_id, quantity, unit_cost, order_date, supplier_id) 
VALUES 
  (1, 10, 100, 25.00, '2023-02-15', 1), 
  (2, 20, 200, 50.00, '2023-02-20', 2), 
  (3, 30, 300, 75.00, '2023-02-25', 1), 
  (4, 10, 1000, 25.00, '2023-03-01', 3), 
  (5, 20, 1500, 50.00, '2023-03-05', 2), 
  (6, 30, 2000, 75.00, '2023-03-10', 1); 

INSERT INTO items (item_id, item_name, unit_cost) 
VALUES 
  (10, 'Widget', 25.00), 
  (20, 'Gadget', 50.00), 
  (30, 'Gizmo', 75.00);","SELECT * 
FROM production_orders 
WHERE order_date >= DATE('now', '-1 month') 
AND item_id IN (SELECT item_id FROM items WHERE unit_cost * quantity > 10000);","This query selects all production orders that were placed in the last month and have a total cost greater than $10,000. 

The query first uses a subquery to select the item_id of all items where the unit cost times the quantity is greater than $10,000. 

Then, the main query selects all production orders from the last month that were for items with the selected item_id."
650,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Which cities in the United States have the highest median listing prices for single-family homes as of 2023?,"CREATE TABLE listings (
  listing_id INT PRIMARY KEY,
  address VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  state VARCHAR(255) NOT NULL,
  zip_code INT,
  property_type VARCHAR(255) NOT NULL,
  bedrooms INT,
  bathrooms INT,
  square_footage INT,
  listing_price INT,
  listing_date DATE,
  sold_date DATE,
  sold_price INT
);

CREATE TABLE cities (
  city VARCHAR(255) PRIMARY KEY,
  state VARCHAR(255) NOT NULL,
  population INT,
  median_income INT
);

CREATE TABLE counties (
  county VARCHAR(255) PRIMARY KEY,
  state VARCHAR(255) NOT NULL,
  population INT
);","SELECT c.city, MAX(l.listing_price) AS median_listing_price
FROM listings l
INNER JOIN cities c ON l.city = c.city
INNER JOIN counties co ON c.county = co.county
WHERE l.property_type = 'Single Family'
AND l.listing_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY c.city
ORDER BY median_listing_price DESC
LIMIT 10;","This query selects the city and the maximum listing price for single-family homes in the United States in 2023. It joins three tables: listings, cities, and counties. The listings table contains information about individual property listings, including the listing price, property type, and listing date. The cities table contains information about cities, including the state and population. The counties table contains information about counties, including the state and population. The query first filters the listings table to only include listings for single-family homes that were listed in 2023. Then, it joins the listings table to the cities table on the city name and the cities table to the counties table on the county name. This allows the query to access information about the state for each listing. The query then groups the results by city and calculates the maximum listing price for each city. Finally, it orders the results by the median listing price in descending order and limits the results to the top 10 cities."
651,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 neighborhoods in San Francisco with the highest average listing price for 3-bedroom houses built after 2015.,"CREATE TABLE listings (listing_id INT PRIMARY KEY, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, bedrooms INT, bathrooms FLOAT, price INT, sqft INT, year_built INT, property_type VARCHAR(255));
INSERT INTO listings (listing_id, address, city, state, zipcode, bedrooms, bathrooms, price, sqft, year_built, property_type) VALUES
(1, '123 Main St', 'San Francisco', 'CA', 94102, 3, 2.5, 1500000, 2000, 2016, 'House'),
(2, '456 Oak Ave', 'San Francisco', 'CA', 94103, 2, 1.5, 1200000, 1500, 2018, 'Condo'),
(3, '789 Pine St', 'San Francisco', 'CA', 94104, 4, 3, 2000000, 2500, 2017, 'House'),
(4, '1011 Willow St', 'San Francisco', 'CA', 94105, 3, 2, 1300000, 1800, 2019, 'House'),
(5, '1213 Maple St', 'San Francisco', 'CA', 94106, 2, 1, 900000, 1200, 2020, 'Condo'),
(6, '1415 Birch St', 'San Francisco', 'CA', 94107, 4, 2.5, 1700000, 2200, 2015, 'House'),
(7, '1617 Cedar St', 'San Francisco', 'CA', 94108, 3, 2, 1400000, 1900, 2016, 'House'),
(8, '1819 Elm St', 'San Francisco', 'CA', 94109, 2, 1.5, 1100000, 1400, 2018, 'Condo'),
(9, '2021 Oak St', 'San Francisco', 'CA', 94110, 4, 3, 1900000, 2400, 2017, 'House'),
(10, '2223 Pine St', 'San Francisco', 'CA', 94111, 3, 2, 1200000, 1700, 2019, 'House'),
(11, '2425 Willow St', 'San Francisco', 'CA', 94112, 2, 1, 800000, 1100, 2020, 'Condo'),
(12, '2627 Maple St', 'San Francisco', 'CA', 94113, 4, 2.5, 1600000, 2100, 2015, 'House'),
(13, '2829 Birch St', 'San Francisco', 'CA', 94114, 3, 2, 1300000, 1800, 2016, 'House'),
(14, '3031 Cedar St', 'San Francisco', 'CA', 94115, 2, 1.5, 1000000, 1300, 2018, 'Condo'),
(15, '3233 Elm St', 'San Francisco', 'CA', 94116, 4, 3, 1800000, 2300, 2017, 'House'),
(16, '3435 Pine St', 'San Francisco', 'CA', 94117, 3, 2, 1100000, 1600, 2019, 'House'),
(17, '3637 Willow St', 'San Francisco', 'CA', 94118, 2, 1, 700000, 1000, 2020, 'Condo'),
(18, '3839 Maple St', 'San Francisco', 'CA', 94119, 4, 2.5, 1500000, 2000, 2015, 'House'),
(19, '4041 Birch St', 'San Francisco', 'CA', 94120, 3, 2, 1200000, 1700, 2016, 'House'),
(20, '4243 Cedar St', 'San Francisco', 'CA', 94121, 2, 1.5, 900000, 1200, 2018, 'Condo');

CREATE TABLE neighborhoods (neighborhood VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, PRIMARY KEY (neighborhood, city, state));
INSERT INTO neighborhoods (neighborhood, city, state, zipcode) VALUES
('Mission District', 'San Francisco', 'CA', 94110),
('Nob Hill', 'San Francisco', 'CA', 94108),
('Pacific Heights', 'San Francisco', 'CA', 94115),
('Russian Hill', 'San Francisco', 'CA', 94109),
('South of Market', 'San Francisco', 'CA', 94103);","SELECT n.neighborhood, AVG(l.price) AS avg_price
FROM listings l
JOIN neighborhoods n ON l.zipcode = n.zipcode
WHERE l.city = 'San Francisco' AND l.bedrooms = 3 AND l.year_built > 2015
GROUP BY n.neighborhood
ORDER BY avg_price DESC
LIMIT 5;","This query retrieves the top 5 neighborhoods in San Francisco with the highest average listing price for 3-bedroom houses built after 2015.

1. **Join listings and neighborhoods tables:** We use an inner join to combine the listings and neighborhoods tables on the zipcode column.
2. **Filter for San Francisco, 3-bedroom houses built after 2015:** We filter the listings table to include only records where the city is 'San Francisco', the bedrooms are 3, and the year_built is greater than 2015.
3. **Group by neighborhood and calculate average price:** We group the filtered listings by neighborhood and calculate the average price using the AVG() function.
4. **Order by average price descending and limit to 5:** We order the results by average price in descending order and limit the output to the top 5 neighborhoods."
652,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Retrieve a list of all states with their average property values for single-family homes, sorted from highest to lowest average value, excluding any properties with missing values in the price or state columns.","CREATE TABLE Properties (  
  PropertyID INT PRIMARY KEY,  
  Address VARCHAR(255),  
  City VARCHAR(255),  
  State VARCHAR(255),  
  ZipCode INT,  
  PropertyType VARCHAR(255),  
  Price DECIMAL(10,2),  
  Bedrooms INT,  
  Bathrooms DECIMAL(4,2),  
  SquareFootage INT,  
  YearBuilt INT,  
  ListingDate DATE  
);  

CREATE TABLE States (  
  State VARCHAR(255) PRIMARY KEY,  
  Region VARCHAR(255)  
);  

INSERT INTO Properties (PropertyID, Address, City, State, ZipCode, PropertyType, Price, Bedrooms, Bathrooms, SquareFootage, YearBuilt, ListingDate)  
VALUES  
(1, '123 Main St', 'Anytown', 'CA', 91234, 'Single Family', 750000.00, 3, 2.5, 2000, 1995, '2023-04-20'),  
(2, '456 Oak Ave', 'Anytown', 'CA', 91234, 'Condo', 550000.00, 2, 2, 1500, 2005, '2023-04-22'),  
(3, '789 Pine Blvd', 'Anytown', 'TX', 75001, 'Single Family', 450000.00, 4, 3, 2500, 2010, '2023-04-25'),  
(4, '1011 Elm St', 'Anytown', 'TX', 75001, 'Townhouse', 350000.00, 3, 2.5, 1800, 2015, '2023-04-27'),  
(5, '1213 Willow Way', 'Anytown', 'FL', 33123, 'Single Family', 650000.00, 4, 3, 3000, 2000, '2023-04-29');  

INSERT INTO States (State, Region)  
VALUES  
('CA', 'West'),  
('TX', 'South'),  
('FL', 'South');","SELECT s.State, AVG(p.Price) AS AveragePrice  
FROM Properties p  
JOIN States s ON p.State = s.State  
WHERE p.PropertyType = 'Single Family' AND p.Price IS NOT NULL AND s.State IS NOT NULL  
GROUP BY s.State  
ORDER BY AveragePrice DESC;","1. This query utilizes two tables: 'Properties' and 'States'.
2. It performs an inner join based on the 'State' column in both tables.
3. It filters the data to include only 'Single Family' properties with non-null values in both 'Price' and 'State' columns.
4. It groups the data by state and calculates the average price for each state.
5. Finally, it orders the results in descending order of average price to display states with the highest average property values first."
653,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","What are the top 5 most expensive cities to buy a house in the United States, based on median house price?","CREATE TABLE properties (  property_id INT PRIMARY KEY,  address VARCHAR(255) NOT NULL,  city VARCHAR(255) NOT NULL,  state VARCHAR(255) NOT NULL,  zip_code VARCHAR(255) NOT NULL,  property_type VARCHAR(255) NOT NULL,  bedrooms INT NOT NULL,  bathrooms INT NOT NULL,  square_footage INT NOT NULL,  price INT NOT NULL,  sale_date DATE NOT NULL);  INSERT INTO properties (property_id, address, city, state, zip_code, property_type, bedrooms, bathrooms, square_footage, price, sale_date) VALUES  (1, '123 Main St', 'Los Angeles', 'CA', '90001', 'Single Family', 3, 2, 1500, 1000000, '2023-01-01'),  (2, '456 Oak Ave', 'San Francisco', 'CA', '94102', 'Condo', 2, 1, 1000, 750000, '2023-01-02'),  (3, '789 Elm St', 'New York', 'NY', '10001', 'Townhouse', 4, 3, 2000, 1500000, '2023-01-03'),  (4, '1011 Pine St', 'Seattle', 'WA', '98101', 'Single Family', 3, 2, 1800, 900000, '2023-01-04'),  (5, '1213 Willow St', 'Chicago', 'IL', '60601', 'Condo', 2, 1, 1200, 500000, '2023-01-05');  CREATE TABLE cities (  city_id INT PRIMARY KEY,  city_name VARCHAR(255) NOT NULL,  state VARCHAR(255) NOT NULL);  INSERT INTO cities (city_id, city_name, state) VALUES  (1, 'Los Angeles', 'CA'),  (2, 'San Francisco', 'CA'),  (3, 'New York', 'NY'),  (4, 'Seattle', 'WA'),  (5, 'Chicago', 'IL');","SELECT c.city_name, MAX(p.price) AS median_price FROM properties p JOIN cities c ON p.city = c.city_name GROUP BY c.city_name ORDER BY median_price DESC LIMIT 5;","This SQL query first joins the `properties` table to the `cities` table on the `city` column. Then, it groups the results by city and calculates the maximum price for each city. Finally, it orders the results by median price in descending order and limits the output to the top 5 cities."
654,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average price of a 3-bedroom house in each state?,"CREATE TABLE properties (  property_id INT PRIMARY KEY,  address VARCHAR(255) NOT NULL,  city VARCHAR(255) NOT NULL,  state VARCHAR(255) NOT NULL,  zip_code VARCHAR(255) NOT NULL,  property_type VARCHAR(255) NOT NULL,  bedrooms INT NOT NULL,  bathrooms INT NOT NULL,  square_footage INT NOT NULL,  price INT NOT NULL,  sale_date DATE NOT NULL);  INSERT INTO properties (property_id, address, city, state, zip_code, property_type, bedrooms, bathrooms, square_footage, price, sale_date) VALUES  (1, '123 Main St', 'Los Angeles', 'CA', '90001', 'Single Family', 3, 2, 1500, 1000000, '2023-01-01'),  (2, '456 Oak Ave', 'San Francisco', 'CA', '94102', 'Condo', 2, 1, 1000, 750000, '2023-01-02'),  (3, '789 Elm St', 'New York', 'NY', '10001', 'Townhouse', 4, 3, 2000, 1500000, '2023-01-03'),  (4, '1011 Pine St', 'Seattle', 'WA', '98101', 'Single Family', 3, 2, 1800, 900000, '2023-01-04'),  (5, '1213 Willow St', 'Chicago', 'IL', '60601', 'Condo', 2, 1, 1200, 500000, '2023-01-05');","SELECT s.state, AVG(p.price) AS average_price FROM properties p JOIN states s ON p.state = s.state_name WHERE p.bedrooms = 3 GROUP BY s.state;","This SQL query first joins the `properties` table to the `states` table on the `state` column. Then, it filters the results to only include properties with 3 bedrooms. Finally, it groups the results by state and calculates the average price for each state."
655,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Which regions have the highest average customer satisfaction scores for a given product category?,"CREATE TABLE customer_satisfaction ( customer_id INT, product_category VARCHAR(255), region VARCHAR(255), satisfaction_score INT );
CREATE TABLE product_categories ( product_category VARCHAR(255), description VARCHAR(255) );
CREATE TABLE regions ( region VARCHAR(255), country VARCHAR(255) );","SELECT r.region, AVG(cs.satisfaction_score) AS avg_satisfaction_score FROM customer_satisfaction cs JOIN product_categories pc ON cs.product_category = pc.product_category JOIN regions r ON cs.region = r.region GROUP BY r.region ORDER BY avg_satisfaction_score DESC;","1. Join the 'customer_satisfaction' table with the 'product_categories' table on the 'product_category' field.
2. Join the result of step 1 with the 'regions' table on the 'region' field.
3. Group the results by region.
4. Calculate the average satisfaction score for each region.
5. Order the results by average satisfaction score in descending order."
656,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Show me the top 5 most innovative companies in the cybersecurity industry based on the number of patents filed in the last 5 years.,"CREATE TABLE companies ( company_name VARCHAR(255), industry VARCHAR(255) );
CREATE TABLE patents ( patent_id INT, company_name VARCHAR(255), filing_date DATE );","SELECT c.company_name, COUNT(*) AS num_patents FROM companies c JOIN patents p ON c.company_name = p.company_name WHERE c.industry = 'Cybersecurity' AND p.filing_date >= DATE('now', '-5 years') GROUP BY c.company_name ORDER BY num_patents DESC LIMIT 5;","1. Join the 'companies' table with the 'patents' table on the 'company_name' field.
2. Filter the results to include only companies in the 'Cybersecurity' industry.
3. Filter the results to include patents filed in the last 5 years.
4. Group the results by company name.
5. Count the number of patents for each company.
6. Order the results by number of patents in descending order.
7. Limit the results to the top 5 companies."
657,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What are the top 3 trending topics on social media related to data privacy in the past week?,"CREATE TABLE social_media_posts ( post_id INT, topic VARCHAR(255), timestamp DATETIME );","SELECT topic, COUNT(*) AS num_mentions FROM social_media_posts WHERE topic LIKE '%data privacy%' AND timestamp >= DATE('now', '-1 week') GROUP BY topic ORDER BY num_mentions DESC LIMIT 3;","1. Filter the 'social_media_posts' table to include posts containing the term 'data privacy'.
2. Filter the results to include posts from the past week.
3. Group the results by topic.
4. Count the number of mentions for each topic.
5. Order the results by number of mentions in descending order.
6. Limit the results to the top 3 topics."
658,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the market share of different mobile operating systems in different countries.,"CREATE TABLE mobile_devices ( device_id INT, operating_system VARCHAR(255), country VARCHAR(255) );","SELECT os.operating_system, r.country, COUNT(*) AS num_devices FROM mobile_devices md JOIN operating_systems os ON md.operating_system = os.operating_system JOIN regions r ON md.country = r.country GROUP BY os.operating_system, r.country ORDER BY num_devices DESC;","1. Join the 'mobile_devices' table with the 'operating_systems' table on the 'operating_system' field.
2. Join the result of step 1 with the 'regions' table on the 'country' field.
3. Group the results by operating system and country.
4. Count the number of devices for each operating system and country.
5. Order the results by number of devices in descending order."
659,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 10 products with the highest customer churn rate in the last quarter.,"CREATE TABLE customer_orders ( customer_id INT, product_id INT, order_date DATE );
CREATE TABLE customer_churn ( customer_id INT, churn_date DATE );","SELECT p.product_id, COUNT(DISTINCT co.customer_id) AS num_churned_customers FROM customer_orders co JOIN customer_churn cc ON co.customer_id = cc.customer_id JOIN products p ON co.product_id = p.product_id WHERE co.order_date >= DATE('now', '-3 months') AND co.order_date < DATE('now') AND cc.churn_date >= DATE('now', '-3 months') GROUP BY p.product_id ORDER BY num_churned_customers DESC LIMIT 10;","1. Join the 'customer_orders' table with the 'customer_churn' table on the 'customer_id' field.
2. Join the result of step 1 with the 'products' table on the 'product_id' field.
3. Filter the results to include orders from the last quarter.
4. Filter the results to include customers who churned in the last quarter.
5. Group the results by product ID.
6. Count the number of distinct churned customers for each product.
7. Order the results by number of churned customers in descending order.
8. Limit the results to the top 10 products."
660,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","How many sales did we have for each product category in the last quarter, broken down by region?","CREATE TABLE product_sales (product_id INT, category VARCHAR(255), region VARCHAR(255), sales_date DATE, quantity INT, price DECIMAL(10,2));
INSERT INTO product_sales (product_id, category, region, sales_date, quantity, price) VALUES (1, 'Electronics', 'North America', '2023-04-01', 10, 29.99), (2, 'Clothing', 'Europe', '2023-04-05', 5, 19.99), (3, 'Electronics', 'Asia', '2023-04-10', 15, 39.99), (1, 'Electronics', 'North America', '2023-04-15', 8, 29.99), (2, 'Clothing', 'Europe', '2023-04-20', 7, 19.99), (3, 'Electronics', 'Asia', '2023-04-25', 12, 39.99);","WITH SalesByCategory AS (SELECT category, region, SUM(quantity) AS total_sales FROM product_sales WHERE sales_date >= DATE('2023-01-01') AND sales_date <= DATE('2023-03-31') GROUP BY category, region) SELECT category, region, total_sales FROM SalesByCategory ORDER BY category, region;","This query first calculates the total sales for each product category and region in the last quarter using a CTE (Common Table Expression) called SalesByCategory. Then, it selects the category, region, and total sales from the CTE and orders the results by category and region."
661,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","What were the top 5 selling products in terms of revenue in the last month, and which customers purchased them?","CREATE TABLE product_sales (product_id INT, product_name VARCHAR(255), customer_id INT, sales_date DATE, quantity INT, price DECIMAL(10,2));
INSERT INTO product_sales (product_id, product_name, customer_id, sales_date, quantity, price) VALUES (1, 'Laptop', 101, '2023-05-01', 2, 799.98), (2, 'Shirt', 102, '2023-05-05', 1, 29.99), (3, 'Tablet', 103, '2023-05-10', 1, 199.99), (1, 'Laptop', 104, '2023-05-15', 1, 799.98), (2, 'Shirt', 102, '2023-05-20', 2, 29.99), (3, 'Tablet', 103, '2023-05-25', 2, 199.99);","WITH TopProducts AS (SELECT product_id, SUM(quantity * price) AS total_revenue FROM product_sales WHERE sales_date >= DATE('2023-04-01') GROUP BY product_id ORDER BY total_revenue DESC LIMIT 5) SELECT p.product_name, c.customer_id FROM TopProducts AS tp JOIN product_sales AS p ON tp.product_id = p.product_id JOIN customer AS c ON p.customer_id = c.customer_id ORDER BY total_revenue DESC;","This query first calculates the total revenue for each product in the last month using a CTE (Common Table Expression) called TopProducts. Then, it selects the product name and customer ID from the TopProducts CTE, joining it with the product_sales and customer tables to retrieve the product names and customer IDs. Finally, it orders the results by total revenue in descending order."
662,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",How many new customers did we acquire in each region this year?,"CREATE TABLE customer (customer_id INT, customer_name VARCHAR(255), region VARCHAR(255), registration_date DATE);","SELECT region, COUNT(customer_id) AS new_customers FROM customer WHERE registration_date >= DATE('2023-01-01') GROUP BY region ORDER BY region;",This query calculates the number of new customers acquired in each region this year by first filtering the customer table for customers who registered in 2023 and then grouping and counting the number of customers by region.
663,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","What is the average order value for each product category, and how has it changed over the past year?","CREATE TABLE product_sales (product_id INT, category VARCHAR(255), sales_date DATE, quantity INT, price DECIMAL(10,2));
INSERT INTO product_sales (product_id, category, sales_date, quantity, price) VALUES (1, 'Electronics', '2022-05-01', 2, 799.98), (2, 'Clothing', '2022-05-05', 1, 29.99), (3, 'Electronics', '2022-05-10', 1, 199.99), (1, 'Electronics', '2022-05-15', 1, 799.98), (2, 'Clothing', '2022-05-20', 2, 29.99), (3, 'Electronics', '2022-05-25', 2, 199.99);","WITH MonthlyAverageOrders AS (SELECT category, EXTRACT(MONTH FROM sales_date) AS month, AVG(quantity * price) AS average_order_value FROM product_sales GROUP BY category, month) SELECT category, month, average_order_value FROM MonthlyAverageOrders ORDER BY category, month;","This query calculates the average order value for each product category each month over the past year using a CTE (Common Table Expression) called MonthlyAverageOrders. It then selects the category, month, and average order value from the CTE, ordering the results by category and month."
664,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Can you show me a list of all suppliers, along with the total number of products they have supplied and the average price of those products?","CREATE TABLE supplier (supplier_id INT, supplier_name VARCHAR(255));
CREATE TABLE product (product_id INT, product_name VARCHAR(255), supplier_id INT, price DECIMAL(10,2));
INSERT INTO supplier (supplier_id, supplier_name) VALUES (1, 'Apple'), (2, 'Nike'), (3, 'Samsung');
INSERT INTO product (product_id, product_name, supplier_id, price) VALUES (1, 'Laptop', 1, 799.98), (2, 'Shirt', 2, 29.99), (3, 'Tablet', 3, 199.99), (4, 'Phone', 1, 499.99), (5, 'Shoes', 2, 99.99), (6, 'TV', 3, 599.99);","SELECT s.supplier_name, COUNT(p.product_id) AS total_products, AVG(p.price) AS average_price FROM supplier AS s JOIN product AS p ON s.supplier_id = p.supplier_id GROUP BY s.supplier_name ORDER BY s.supplier_name;","This query joins the supplier and product tables to retrieve the supplier name, total number of products supplied by each supplier, and the average price of those products. It then groups the results by supplier name and orders them alphabetically."
665,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",How many students have participated in the summer enrichment program during the past three years? Provide a breakdown by grade level and program type.,"CREATE TABLE Student (  StudentID INT PRIMARY KEY,  FirstName VARCHAR(255),  LastName VARCHAR(255),  GradeLevel INT,  SchoolID INT);  CREATE TABLE Program (  ProgramID INT PRIMARY KEY,  ProgramName VARCHAR(255),  ProgramType VARCHAR(255),  StartDate DATE,  EndDate DATE);  CREATE TABLE StudentProgram (  StudentID INT,  ProgramID INT,  Year INT,  PRIMARY KEY (StudentID, ProgramID, Year),  FOREIGN KEY (StudentID) REFERENCES Student(StudentID),  FOREIGN KEY (ProgramID) REFERENCES Program(ProgramID));  INSERT INTO Student (StudentID, FirstName, LastName, GradeLevel, SchoolID) VALUES  (1, 'Alice', 'Smith', 9, 101),  (2, 'Bob', 'Johnson', 10, 102),  (3, 'Charlie', 'Williams', 11, 103),  (4, 'David', 'Brown', 12, 104),  (5, 'Emily', 'Jones', 9, 101);  INSERT INTO Program (ProgramID, ProgramName, ProgramType, StartDate, EndDate) VALUES  (1, 'Summer Enrichment Program', 'Math', '2020-06-15', '2020-07-15'),  (2, 'Summer Enrichment Program', 'Science', '2021-06-15', '2021-07-15'),  (3, 'Summer Enrichment Program', 'Arts', '2022-06-15', '2022-07-15');  INSERT INTO StudentProgram (StudentID, ProgramID, Year) VALUES  (1, 1, 2020),  (2, 2, 2021),  (3, 3, 2022),  (4, 1, 2021),  (5, 2, 2022);","SELECT GradeLevel, ProgramType, COUNT(*) AS NumberOfStudents  FROM StudentProgram  JOIN Student ON StudentProgram.StudentID = Student.StudentID  JOIN Program ON StudentProgram.ProgramID = Program.ProgramID  WHERE Year IN (2020, 2021, 2022)  GROUP BY GradeLevel, ProgramType  ORDER BY GradeLevel, ProgramType;","- The query starts by joining the `StudentProgram`, `Student`, and `Program` tables on their respective foreign keys.  - It then filters the results to only include records for the past three years (2020, 2021, and 2022).  - The query then groups the results by grade level and program type and counts the number of students in each group.  - Finally, the query orders the results by grade level and program type."
666,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average GPA of students in each department, along with the total number of students in each department. The report should only include departments with more than 10 students.","CREATE TABLE student_demographics (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), department VARCHAR(50));
CREATE TABLE student_grades (student_id INT, course_id INT, grade DECIMAL(3,2), PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES student_demographics(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id));
CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), department VARCHAR(50), credits INT);","SELECT s.department, AVG(g.grade) AS avg_gpa, COUNT(*) AS total_students
FROM student_grades g
JOIN courses c ON g.course_id = c.course_id
JOIN student_demographics s ON g.student_id = s.student_id
GROUP BY s.department
HAVING COUNT(*) > 10;","This query selects the department, average GPA, and total number of students for each department. It joins the student_grades, courses, and student_demographics tables on the student_id and course_id columns. It then groups the results by department and calculates the average GPA and total number of students using the AVG() and COUNT(*) aggregate functions. Finally, it filters the results to only include departments with more than 10 students using the HAVING clause."
667,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the percentage of students who have a GPA of 3.5 or higher?,"CREATE TABLE student_demographics (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), department VARCHAR(50));
CREATE TABLE student_grades (student_id INT, course_id INT, grade DECIMAL(3,2), PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES student_demographics(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id));
CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), department VARCHAR(50), credits INT);","SELECT (100.0 * COUNT(CASE WHEN g.grade >= 3.5 THEN g.student_id END) / COUNT(g.student_id)) AS percentage_high_gpa
FROM student_grades g;",This query calculates the percentage of students who have a GPA of 3.5 or higher. It counts the number of students with a GPA of 3.5 or higher using the CASE WHEN expression and the COUNT() function. It then divides this number by the total number of students using the COUNT() function again and multiplies the result by 100 to get the percentage.
668,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 courses with the highest average enrollment.,"CREATE TABLE student_demographics (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), department VARCHAR(50));
CREATE TABLE student_grades (student_id INT, course_id INT, grade DECIMAL(3,2), PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES student_demographics(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id));
CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), department VARCHAR(50), credits INT);","SELECT c.course_name, AVG(s.enrollment) AS avg_enrollment
FROM courses c
JOIN (SELECT course_id, COUNT(*) AS enrollment
FROM student_grades
GROUP BY course_id) AS s ON c.course_id = s.course_id
GROUP BY c.course_name
ORDER BY avg_enrollment DESC
LIMIT 5;","This query identifies the top 5 courses with the highest average enrollment. It first calculates the average enrollment for each course by joining the courses table with a subquery that calculates the enrollment for each course. It then groups the results by course name and calculates the average enrollment. Finally, it orders the results by average enrollment in descending order and limits the output to the top 5 courses."
669,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a breakdown of student performance by gender and department, showing the average GPA for each group.","CREATE TABLE student_demographics (student_id INT PRIMARY KEY, first_name VARCHAR(50), last_name VARCHAR(50), date_of_birth DATE, gender VARCHAR(10), department VARCHAR(50));
CREATE TABLE student_grades (student_id INT, course_id INT, grade DECIMAL(3,2), PRIMARY KEY (student_id, course_id), FOREIGN KEY (student_id) REFERENCES student_demographics(student_id), FOREIGN KEY (course_id) REFERENCES courses(course_id));
CREATE TABLE courses (course_id INT PRIMARY KEY, course_name VARCHAR(50), department VARCHAR(50), credits INT);","SELECT s.gender, s.department, AVG(g.grade) AS avg_gpa
FROM student_demographics s
JOIN student_grades g ON s.student_id = g.student_id
GROUP BY s.gender, s.department
ORDER BY s.gender, s.department;","This query provides a breakdown of student performance by gender and department, showing the average GPA for each group. It joins the student_demographics and student_grades tables on the student_id column. It then groups the results by gender and department and calculates the average GPA for each group using the AVG() function. Finally, it orders the results by gender and department."
670,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 10 suppliers based on the total cost of raw materials purchased in the last quarter, along with the average cost per unit and the total number of units purchased.","CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255) NOT NULL, Country VARCHAR(255));
CREATE TABLE RawMaterials (RawMaterialID INT PRIMARY KEY, RawMaterialName VARCHAR(255) NOT NULL, UnitCost DECIMAL(10,2));
CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, SupplierID INT REFERENCES Suppliers(SupplierID), RawMaterialID INT REFERENCES RawMaterials(RawMaterialID), Quantity INT, PurchaseDate DATE);
INSERT INTO Suppliers (SupplierID, SupplierName, Country) VALUES
(1, 'Acme Materials', 'USA'),
(2, 'Global Supplies', 'China'),
(3, 'Euro Tech', 'Germany'),
(4, 'Pacific Rim', 'Japan'),
(5, 'South American Resources', 'Brazil');
INSERT INTO RawMaterials (RawMaterialID, RawMaterialName, UnitCost) VALUES
(1, 'Steel', 100.00),
(2, 'Aluminum', 50.00),
(3, 'Copper', 200.00),
(4, 'Plastic', 10.00),
(5, 'Rubber', 25.00);
INSERT INTO Purchases (PurchaseID, SupplierID, RawMaterialID, Quantity, PurchaseDate) VALUES
(1, 1, 1, 1000, '2023-01-01'),
(2, 2, 2, 500, '2023-01-05'),
(3, 3, 3, 250, '2023-01-10'),
(4, 4, 4, 10000, '2023-01-15'),
(5, 5, 5, 5000, '2023-01-20'),
(6, 1, 2, 750, '2023-02-01'),
(7, 2, 1, 1500, '2023-02-05'),
(8, 3, 4, 3000, '2023-02-10'),
(9, 4, 5, 7500, '2023-02-15'),
(10, 5, 3, 1000, '2023-02-20'),
(11, 1, 3, 500, '2023-03-01'),
(12, 2, 4, 2000, '2023-03-05'),
(13, 3, 5, 4000, '2023-03-10'),
(14, 4, 1, 2500, '2023-03-15'),
(15, 5, 2, 1500, '2023-03-20');","WITH PurchasesQ1 AS (
    SELECT
        SupplierID,
        SUM(Quantity * UnitCost) AS TotalCost,
        SUM(Quantity) AS TotalUnits
    FROM Purchases
    JOIN RawMaterials ON Purchases.RawMaterialID = RawMaterials.RawMaterialID
    WHERE PurchaseDate >= '2023-01-01' AND PurchaseDate <= '2023-03-31'
    GROUP BY SupplierID
),
RankedPurchases AS (
    SELECT
        SupplierID,
        TotalCost,
        TotalUnits,
        RANK() OVER (ORDER BY TotalCost DESC) AS Rank
    FROM PurchasesQ1
)
SELECT
    s.SupplierName,
    rp.TotalCost,
    rp.TotalUnits,
    rp.TotalCost / rp.TotalUnits AS AverageCost
FROM RankedPurchases rp
JOIN Suppliers s ON rp.SupplierID = s.SupplierID
WHERE rp.Rank <= 10
ORDER BY rp.TotalCost DESC;","This SQL query identifies the top 10 suppliers based on the total cost of raw materials purchased in the last quarter. It uses a series of common table expressions (CTEs) to break down the problem into smaller, more manageable steps.

The first CTE, `PurchasesQ1`, calculates the total cost and total units purchased for each supplier in the last quarter. It joins the `Purchases` and `RawMaterials` tables on the `RawMaterialID` field and filters the data to include only purchases made between January 1, 2023, and March 31, 2023.

The second CTE, `RankedPurchases`, ranks the suppliers based on their total cost. It uses the `RANK()` window function to assign a rank to each supplier, with the supplier with the highest total cost receiving a rank of 1.

The final `SELECT` statement joins the `RankedPurchases` CTE with the `Suppliers` table to retrieve the supplier names. It then filters the results to include only the top 10 suppliers and calculates the average cost per unit for each supplier.

The query outputs the supplier name, total cost, total units, and average cost for the top 10 suppliers."
671,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Get a breakdown of the top 10 suppliers by total order value for the past year, including quantity ordered, average price per unit, and total value, sorted by total value in descending order.","CREATE TABLE Orders (
    OrderDate DATE,
    OrderID INT PRIMARY KEY,
    SupplierID INT,
    ProductID INT,
    Quantity INT,
    UnitPrice DECIMAL(10,2),
    TotalValue DECIMAL(10,2),
    FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(255),
    UnitCost DECIMAL(10,2),
    Category VARCHAR(255)
);

CREATE TABLE Suppliers (
    SupplierID INT PRIMARY KEY,
    SupplierName VARCHAR(255),
    Country VARCHAR(255)
);
","WITH TopSuppliers AS (
    SELECT
        s.SupplierName,
        SUM(o.TotalValue) AS TotalOrderValue
    FROM
        Orders o
    JOIN
        Suppliers s ON o.SupplierID = s.SupplierID
    WHERE
        o.OrderDate >= DATE('now', '-1 year')
    GROUP BY
        s.SupplierName
    ORDER BY
        TotalOrderValue DESC
    LIMIT 10
)
SELECT
    ts.SupplierName,
    SUM(o.Quantity) AS TotalQuantity,
    AVG(o.UnitPrice) AS AverageUnitPrice,
    SUM(o.TotalValue) AS TotalValue
FROM
    Orders o
JOIN
    Suppliers s ON o.SupplierID = s.SupplierID
JOIN
    TopSuppliers ts ON s.SupplierName = ts.SupplierName
WHERE
    o.OrderDate >= DATE('now', '-1 year')
GROUP BY
    ts.SupplierName
ORDER BY
    TotalValue DESC;","This query calculates the top 10 suppliers by total order value for the past year. First, it calculates the total order value for each supplier using a Common Table Expression (CTE) called TopSuppliers. Then, it joins the Orders table with the Suppliers table and the TopSuppliers CTE to retrieve the supplier name, total quantity, average price per unit, and total value for each supplier. Finally, it groups the results by supplier name and orders them by total value in descending order."
672,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a report showing the top 5 production processes with the highest percentage of defective products in the last quarter.,"CREATE TABLE ProductionProcesses (
    ProcessID INT PRIMARY KEY,
    ProcessName VARCHAR(255),
    Description VARCHAR(255)
);

CREATE TABLE Defects (
    DefectID INT PRIMARY KEY,
    ProductID INT,
    ProcessID INT,
    DefectDescription VARCHAR(255),
    DefectDate DATE,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (ProcessID) REFERENCES ProductionProcesses(ProcessID)
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(255),
    UnitCost DECIMAL(10,2),
    Category VARCHAR(255)
);
","WITH TotalDefects AS (
    SELECT
        p.ProcessID,
        COUNT(*) AS TotalDefects
    FROM
        Defects d
    JOIN
        Products p ON d.ProductID = p.ProductID
    WHERE
        d.DefectDate >= DATE('now', '-3 months')
    GROUP BY
        p.ProcessID
),
TotalProducts AS (
    SELECT
        p.ProcessID,
        COUNT(*) AS TotalProducts
    FROM
        Products p
    GROUP BY
        p.ProcessID
)
SELECT
    pp.ProcessName,
    CAST(td.TotalDefects AS REAL) * 100 / tp.TotalProducts AS PercentageDefective
FROM
    ProductionProcesses pp
JOIN
    TotalDefects td ON pp.ProcessID = td.ProcessID
JOIN
    TotalProducts tp ON pp.ProcessID = tp.ProcessID
ORDER BY
    PercentageDefective DESC
LIMIT 5;","This query calculates the top 5 production processes with the highest percentage of defective products in the last quarter. First, it calculates the total number of defects for each process in the last quarter using a Common Table Expression (CTE) called TotalDefects. Then, it calculates the total number of products produced by each process using another CTE called TotalProducts. Finally, it joins the ProductionProcesses table with the TotalDefects and TotalProducts CTEs to calculate the percentage of defective products for each process and orders the results by percentage defective in descending order, returning the top 5 processes."
673,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Give me a list of all suppliers located in Germany who have supplied raw materials in the last month, along with the total quantity and value of materials supplied.","CREATE TABLE Suppliers (
    SupplierID INT PRIMARY KEY,
    SupplierName VARCHAR(255),
    Country VARCHAR(255)
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(255),
    UnitCost DECIMAL(10,2),
    Category VARCHAR(255)
);

CREATE TABLE PurchaseOrders (
    POID INT PRIMARY KEY,
    SupplierID INT,
    ProductID INT,
    Quantity INT,
    OrderDate DATE,
    FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
","SELECT
    s.SupplierName,
    SUM(po.Quantity) AS TotalQuantity,
    SUM(p.UnitCost * po.Quantity) AS TotalValue
FROM
    Suppliers s
JOIN
    PurchaseOrders po ON s.SupplierID = po.SupplierID
JOIN
    Products p ON po.ProductID = p.ProductID
WHERE
    s.Country = 'Germany'
    AND p.Category = 'Raw Materials'
    AND po.OrderDate >= DATE('now', '-1 month')
GROUP BY
    s.SupplierName;","This query retrieves a list of all suppliers located in Germany who have supplied raw materials in the last month, along with the total quantity and value of materials supplied. It joins the Suppliers table, PurchaseOrders table, and Products table to filter for suppliers in Germany who have supplied raw materials in the last month. It then groups the results by supplier name and calculates the total quantity and value of materials supplied by each supplier."
674,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report showing the average lead time for each supplier's deliveries in the last year, sorted from shortest to longest lead time.","CREATE TABLE Suppliers (
    SupplierID INT PRIMARY KEY,
    SupplierName VARCHAR(255),
    Country VARCHAR(255)
);

CREATE TABLE PurchaseOrders (
    POID INT PRIMARY KEY,
    SupplierID INT,
    ProductID INT,
    OrderDate DATE,
    DeliveryDate DATE,
    FOREIGN KEY (SupplierID) REFERENCES Suppliers(SupplierID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
","SELECT
    s.SupplierName,
    AVG(DATEDIFF(po.DeliveryDate, po.OrderDate)) AS AverageLeadTime
FROM
    Suppliers s
JOIN
    PurchaseOrders po ON s.SupplierID = po.SupplierID
WHERE
    po.OrderDate >= DATE('now', '-1 year')
GROUP BY
    s.SupplierName
ORDER BY
    AverageLeadTime ASC;","This query calculates the average lead time for each supplier's deliveries in the last year, sorted from shortest to longest lead time. It joins the Suppliers table and PurchaseOrders table to filter for orders placed in the last year. It then calculates the difference between the delivery date and order date for each order and averages the lead time for each supplier. Finally, it groups the results by supplier name and orders them by average lead time in ascending order."
675,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Delete all records from the corn_yields_2022 table where the yield is less than 100 bushels per acre.,"CREATE TABLE corn_yields_2022 (id INT PRIMARY KEY, farm_id INT, year INT, county VARCHAR(255), state VARCHAR(255), yield_bushels_per_acre DECIMAL(10,2));",DELETE FROM corn_yields_2022 WHERE yield_bushels_per_acre < 100;,This SQL query deletes all records from the corn_yields_2022 table where the yield is less than 100 bushels per acre. The DELETE statement specifies the table to delete from (corn_yields_2022) and the WHERE clause filters the records to be deleted based on the yield value.
676,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the planting_dates table to set the planting date for corn to April 15th for all farms in Iowa.,"CREATE TABLE planting_dates (id INT PRIMARY KEY, farm_id INT, crop VARCHAR(255), planting_date DATE);",UPDATE planting_dates SET planting_date = '2023-04-15' WHERE crop = 'Corn' AND farm_id IN (SELECT id FROM farms WHERE state = 'Iowa');,"This SQL query updates the planting_dates table to set the planting date for corn to April 15th for all farms in Iowa. The UPDATE statement specifies the table to update (planting_dates), the column to update (planting_date), the new value to set (2023-04-15), and the WHERE clause to filter the records to be updated based on the crop and farm location."
677,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert a new record into the weather_data table with the following data: date = 2023-03-01, location = 'Des Moines, IA', temperature = 55, precipitation = 0.25.","CREATE TABLE weather_data (id INT PRIMARY KEY, date DATE, location VARCHAR(255), temperature INT, precipitation DECIMAL(10,2));","INSERT INTO weather_data (date, location, temperature, precipitation) VALUES ('2023-03-01', 'Des Moines, IA', 55, 0.25);","This SQL query inserts a new record into the weather_data table with the specified data. The INSERT statement specifies the table to insert into (weather_data), the columns to insert data into (date, location, temperature, precipitation), and the values to insert for each column."
678,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Select the average corn yield for each county in Iowa for the year 2022.,"CREATE TABLE corn_yields_2022 (id INT PRIMARY KEY, farm_id INT, year INT, county VARCHAR(255), state VARCHAR(255), yield_bushels_per_acre DECIMAL(10,2));
CREATE TABLE farms (id INT PRIMARY KEY, name VARCHAR(255), county VARCHAR(255), state VARCHAR(255));","SELECT county, AVG(yield_bushels_per_acre) AS average_yield FROM corn_yields_2022 c JOIN farms f ON c.farm_id = f.id WHERE c.year = 2022 AND f.state = 'Iowa' GROUP BY county ORDER BY average_yield DESC;","This SQL query selects the average corn yield for each county in Iowa for the year 2022. The SELECT statement specifies the columns to select (county, AVG(yield_bushels_per_acre)), the alias for the average yield (average_yield), the FROM clause specifies the tables to join (corn_yields_2022 and farms), the ON clause specifies the join condition (farm_id), the WHERE clause filters the data based on the year and state, the GROUP BY clause groups the data by county, and the ORDER BY clause sorts the results in descending order of average yield."
679,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Create a view called 'corn_yields_by_year' that shows the total corn yield for each year in the corn_yields_2022 table.,"CREATE TABLE corn_yields_2022 (id INT PRIMARY KEY, farm_id INT, year INT, county VARCHAR(255), state VARCHAR(255), yield_bushels_per_acre DECIMAL(10,2));","CREATE VIEW corn_yields_by_year AS SELECT year, SUM(yield_bushels_per_acre) AS total_yield FROM corn_yields_2022 GROUP BY year ORDER BY year;","This SQL query creates a view called 'corn_yields_by_year' that shows the total corn yield for each year in the corn_yields_2022 table. The CREATE VIEW statement specifies the name of the view to create (corn_yields_by_year), the SELECT statement specifies the columns to select (year, SUM(yield_bushels_per_acre)), the alias for the total yield (total_yield), the FROM clause specifies the table to select from (corn_yields_2022), the GROUP BY clause groups the data by year, and the ORDER BY clause sorts the results in ascending order of year."
680,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","What is the average age of artists who have exhibited in the National Gallery of Art in Washington, D.C.?","CREATE TABLE paintings (painting_id INT PRIMARY KEY, artist_id INT, title VARCHAR(255), year INT, medium VARCHAR(255), genre VARCHAR(255), gallery VARCHAR(255), acquisition_date DATE, price DECIMAL(10,2));
CREATE TABLE artists (artist_id INT PRIMARY KEY, name VARCHAR(255), nationality VARCHAR(255), birth_date DATE, death_date DATE, biography TEXT);
CREATE VIEW national_gallery_paintings AS SELECT * FROM paintings WHERE gallery = 'National Gallery of Art, Washington, D.C.';","SELECT AVG(a.birth_date - a.death_date) AS average_age
FROM artists a
JOIN national_gallery_paintings ngp ON a.artist_id = ngp.artist_id;","1. Join the `artists` table and the `national_gallery_paintings` view on the `artist_id`.
2. Calculate the age of each artist by subtracting their birth date from their death date.
3. Calculate the average age of the artists who have exhibited in the National Gallery of Art."
681,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Which artists have exhibited in both the Louvre Museum in Paris and the Metropolitan Museum of Art in New York City?,"CREATE TABLE paintings (painting_id INT PRIMARY KEY, artist_id INT, title VARCHAR(255), year INT, medium VARCHAR(255), genre VARCHAR(255), gallery VARCHAR(255), acquisition_date DATE, price DECIMAL(10,2));
CREATE TABLE artists (artist_id INT PRIMARY KEY, name VARCHAR(255), nationality VARCHAR(255), birth_date DATE, death_date DATE, biography TEXT);
CREATE VIEW louvre_paintings AS SELECT * FROM paintings WHERE gallery = 'Louvre Museum, Paris';
CREATE VIEW met_paintings AS SELECT * FROM paintings WHERE gallery = 'Metropolitan Museum of Art, New York City';","SELECT a.name
FROM artists a
JOIN louvre_paintings lp ON a.artist_id = lp.artist_id
JOIN met_paintings mp ON a.artist_id = mp.artist_id;","1. Join the `artists` table with the `louvre_paintings` and `met_paintings` views on the `artist_id`.
2. Select the names of the artists who have paintings in both the Louvre and the Metropolitan Museum of Art."
682,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 most expensive paintings sold in the last 5 years?,"CREATE TABLE paintings (painting_id INT PRIMARY KEY, artist_id INT, title VARCHAR(255), year INT, medium VARCHAR(255), genre VARCHAR(255), gallery VARCHAR(255), acquisition_date DATE, price DECIMAL(10,2));
CREATE TABLE artists (artist_id INT PRIMARY KEY, name VARCHAR(255), nationality VARCHAR(255), birth_date DATE, death_date DATE, biography TEXT);","SELECT p.title, p.price
FROM paintings p
WHERE p.acquisition_date >= DATE('now', '-5 years')
ORDER BY p.price DESC
LIMIT 5;","1. Filter the `paintings` table to only include paintings sold in the last 5 years.
2. Order the paintings by price in descending order.
3. Select the title and price of the top 5 most expensive paintings."
683,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",How many female artists are represented in the collection of the Tate Modern in London?,"CREATE TABLE paintings (painting_id INT PRIMARY KEY, artist_id INT, title VARCHAR(255), year INT, medium VARCHAR(255), genre VARCHAR(255), gallery VARCHAR(255), acquisition_date DATE, price DECIMAL(10,2));
CREATE TABLE artists (artist_id INT PRIMARY KEY, name VARCHAR(255), nationality VARCHAR(255), birth_date DATE, death_date DATE, biography TEXT, gender VARCHAR(255));
CREATE VIEW tate_modern_paintings AS SELECT * FROM paintings WHERE gallery = 'Tate Modern, London';","SELECT COUNT(DISTINCT a.artist_id)
FROM artists a
JOIN tate_modern_paintings tmp ON a.artist_id = tmp.artist_id
WHERE a.gender = 'Female';","1. Join the `artists` table with the `tate_modern_paintings` view on the `artist_id`.
2. Filter the results to only include female artists.
3. Count the number of distinct artists."
684,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the average price of paintings by artists from underrepresented groups in the United States?,"CREATE TABLE paintings (painting_id INT PRIMARY KEY, artist_id INT, title VARCHAR(255), year INT, medium VARCHAR(255), genre VARCHAR(255), gallery VARCHAR(255), acquisition_date DATE, price DECIMAL(10,2));
CREATE TABLE artists (artist_id INT PRIMARY KEY, name VARCHAR(255), nationality VARCHAR(255), birth_date DATE, death_date DATE, biography TEXT, gender VARCHAR(255), ethnicity VARCHAR(255));","SELECT AVG(p.price)
FROM paintings p
JOIN artists a ON p.artist_id = a.artist_id
WHERE a.ethnicity IN ('African American', 'Latinx', 'Asian American', 'Native American');","1. Join the `paintings` table with the `artists` table on the `artist_id`.
2. Filter the results to only include paintings by artists from underrepresented groups in the United States.
3. Calculate the average price of the paintings."
685,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Show the total number of customers who have purchased a product from the 'Electronics' category in the last 30 days.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, product_id INT REFERENCES products(product_id));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255));
INSERT INTO products (product_id, product_name, category) VALUES (1, 'Laptop', 'Electronics'), (2, 'Shirt', 'Clothing'), (3, 'Mouse', 'Electronics');
INSERT INTO orders (order_id, customer_id, order_date, product_id) VALUES (1, 1, '2023-03-08', 1), (2, 2, '2023-03-15', 2), (3, 1, '2023-03-22', 3);","SELECT COUNT(DISTINCT customer_id) FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id WHERE p.category = 'Electronics' AND o.order_date >= DATE('now', '-30 days');","1. Join the 'customers' table with the 'orders' table on the 'customer_id' field.
2. Join the 'orders' table with the 'products' table on the 'product_id' field.
3. Filter the results to only include orders for products in the 'Electronics' category.
4. Filter the results to only include orders placed in the last 30 days.
5. Count the number of distinct customer IDs to get the total number of customers who have purchased a product from the 'Electronics' category in the last 30 days."
686,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the top 5 products by total revenue in the last quarter.,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, product_id INT, quantity INT, price DECIMAL(10,2));
INSERT INTO products (product_id, product_name, price) VALUES (1, 'Laptop', 1000.00), (2, 'Shirt', 25.00), (3, 'Mouse', 30.00);
INSERT INTO orders (order_id, customer_id, order_date, product_id, quantity, price) VALUES (1, 1, '2023-02-01', 1, 1, 1000.00), (2, 2, '2023-02-15', 2, 2, 50.00), (3, 1, '2023-03-08', 3, 1, 30.00), (4, 2, '2023-03-15', 1, 1, 1000.00), (5, 1, '2023-03-22', 2, 1, 25.00);","SELECT p.product_name, SUM(o.quantity * o.price) AS total_revenue
FROM products p
JOIN orders o ON p.product_id = o.product_id
WHERE o.order_date >= DATE('now', '-3 months') AND o.order_date < DATE('now')
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;","1. Join the 'products' table with the 'orders' table on the 'product_id' field.
2. Filter the results to only include orders placed in the last quarter.
3. Calculate the total revenue for each product by multiplying the quantity by the price and summing the results.
4. Group the results by product name.
5. Order the results by total revenue in descending order.
6. Limit the results to the top 5 products."
687,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Identify the customers who have placed more than 5 orders in the last year.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE);","SELECT c.customer_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-1 year')
GROUP BY c.customer_name
HAVING COUNT(*) > 5;","1. Join the 'customers' table with the 'orders' table on the 'customer_id' field.
2. Filter the results to only include orders placed in the last year.
3. Group the results by customer name.
4. Count the number of orders for each customer.
5. Filter the results to only include customers who have placed more than 5 orders."
688,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Show the average order value for each product category in the last month.,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, product_id INT, quantity INT, price DECIMAL(10,2));
INSERT INTO products (product_id, product_name, category, price) VALUES (1, 'Laptop', 'Electronics', 1000.00), (2, 'Shirt', 'Clothing', 25.00), (3, 'Mouse', 'Electronics', 30.00);
INSERT INTO orders (order_id, customer_id, order_date, product_id, quantity, price) VALUES (1, 1, '2023-03-01', 1, 1, 1000.00), (2, 2, '2023-03-05', 2, 2, 50.00), (3, 1, '2023-03-08', 3, 1, 30.00), (4, 2, '2023-03-15', 1, 1, 1000.00), (5, 1, '2023-03-22', 2, 1, 25.00);","SELECT p.category, AVG(o.quantity * o.price) AS average_order_value
FROM products p
JOIN orders o ON p.product_id = o.product_id
WHERE o.order_date >= DATE('now', '-1 month')
GROUP BY p.category;","1. Join the 'products' table with the 'orders' table on the 'product_id' field.
2. Filter the results to only include orders placed in the last month.
3. Calculate the average order value for each product category by multiplying the quantity by the price and averaging the results.
4. Group the results by product category."
689,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the total number of orders placed by customers in each country in the last year.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), email VARCHAR(255), country VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE);","SELECT c.country, COUNT(*) AS total_orders
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-1 year')
GROUP BY c.country;","1. Join the 'customers' table with the 'orders' table on the 'customer_id' field.
2. Filter the results to only include orders placed in the last year.
3. Group the results by customer country.
4. Count the number of orders for each customer country."
690,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"What is the total revenue generated by each product category in the last month, and which category generated the most revenue?","CREATE TABLE product_sales (product_id INT, product_category VARCHAR(255), sale_date DATE, revenue DECIMAL(10,2));
INSERT INTO product_sales (product_id, product_category, sale_date, revenue) VALUES
(1, 'Electronics', '2023-10-26', 1250.00),
(2, 'Clothing', '2023-10-27', 750.00),
(3, 'Electronics', '2023-10-28', 1500.00),
(4, 'Furniture', '2023-10-29', 2000.00),
(5, 'Electronics', '2023-10-30', 1000.00),
(6, 'Clothing', '2023-10-31', 800.00),
(7, 'Electronics', '2023-11-01', 1750.00),
(8, 'Furniture', '2023-11-02', 2250.00),
(9, 'Electronics', '2023-11-03', 1100.00),
(10, 'Clothing', '2023-11-04', 900.00);

CREATE TABLE product_categories (product_category_id INT PRIMARY KEY, product_category VARCHAR(255));
INSERT INTO product_categories (product_category_id, product_category) VALUES
(1, 'Electronics'),
(2, 'Clothing'),
(3, 'Furniture');","SELECT product_category, SUM(revenue) AS total_revenue
FROM product_sales
WHERE sale_date >= DATE('now', '-1 month')
GROUP BY product_category
ORDER BY total_revenue DESC
LIMIT 1;",This query calculates the total revenue for each product category in the last month and then orders the results in descending order of total revenue. The LIMIT clause is used to return only the product category with the highest total revenue.
691,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"For each customer, what is the average order value in the past year, and for which customer is the average order value the highest?","CREATE TABLE customer_orders (customer_id INT, order_id INT, order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO customer_orders (customer_id, order_id, order_date, order_amount) VALUES
(1, 101, '2023-11-07', 50.00),
(2, 102, '2023-11-08', 75.00),
(1, 103, '2023-11-09', 100.00),
(3, 104, '2023-11-10', 125.00),
(2, 105, '2023-11-11', 150.00),
(1, 106, '2023-11-12', 175.00),
(3, 107, '2023-11-13', 200.00),
(2, 108, '2023-11-14', 225.00),
(1, 109, '2023-11-15', 250.00),
(3, 110, '2023-11-16', 275.00);

CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255));
INSERT INTO customers (customer_id, customer_name) VALUES
(1, 'John Doe'),
(2, 'Jane Smith'),
(3, 'Peter Jones');","SELECT c.customer_name, AVG(o.order_amount) AS average_order_value
FROM customer_orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE o.order_date >= DATE('now', '-1 year')
GROUP BY c.customer_name
ORDER BY average_order_value DESC
LIMIT 1;",This query calculates the average order value for each customer in the past year and then orders the results in descending order of average order value. The LIMIT clause is used to return only the customer with the highest average order value.
692,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What are the top 5 most popular products based on the number of units sold in the past quarter?,"CREATE TABLE product_sales (product_id INT, product_name VARCHAR(255), sale_date DATE, quantity INT);
INSERT INTO product_sales (product_id, product_name, sale_date, quantity) VALUES
(1, 'Laptop', '2023-09-01', 10),
(2, 'T-shirt', '2023-09-02', 20),
(3, 'Sofa', '2023-09-03', 5),
(1, 'Laptop', '2023-09-04', 15),
(2, 'T-shirt', '2023-09-05', 25),
(3, 'Sofa', '2023-09-06', 10),
(1, 'Laptop', '2023-09-07', 20),
(2, 'T-shirt', '2023-09-08', 30),
(3, 'Sofa', '2023-09-09', 15),
(1, 'Laptop', '2023-09-10', 25);

CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255));
INSERT INTO products (product_id, product_name) VALUES
(1, 'Laptop'),
(2, 'T-shirt'),
(3, 'Sofa');","SELECT p.product_name, SUM(s.quantity) AS total_units_sold
FROM product_sales s
JOIN products p ON s.product_id = p.product_id
WHERE s.sale_date >= DATE('now', '-3 months')
GROUP BY p.product_name
ORDER BY total_units_sold DESC
LIMIT 5;",This query calculates the total number of units sold for each product in the past quarter and then orders the results in descending order of total units sold. The LIMIT clause is used to return only the top 5 products.
693,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What are the top 5 product categories by total sales revenue for the month of December 2022?,"CREATE TABLE products ( product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, product_category VARCHAR(255) NOT NULL, price DECIMAL(10,2) NOT NULL );
CREATE TABLE sales ( sale_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), sale_date DATE NOT NULL, quantity INT NOT NULL, price DECIMAL(10,2) NOT NULL );
INSERT INTO products (product_id, product_name, product_category, price) VALUES
(1, 'T-Shirt', 'Clothing', 15.99),
(2, 'Laptop', 'Electronics', 799.99),
(3, 'Coffee Beans', 'Food & Beverages', 12.99),
(4, 'Book', 'Books', 19.99),
(5, 'Chair', 'Furniture', 99.99);
INSERT INTO sales (sale_id, product_id, sale_date, quantity, price) VALUES
(1, 1, '2022-12-01', 10, 159.90),
(2, 2, '2022-12-02', 5, 3999.95),
(3, 3, '2022-12-03', 20, 259.80),
(4, 4, '2022-12-04', 15, 299.85),
(5, 5, '2022-12-05', 8, 799.92),
(6, 1, '2022-12-06', 12, 191.88),
(7, 2, '2022-12-07', 3, 2399.97),
(8, 3, '2022-12-08', 18, 233.82),
(9, 4, '2022-12-09', 10, 199.90),
(10, 5, '2022-12-10', 5, 499.96),
(11, 1, '2022-12-11', 14, 223.86),
(12, 2, '2022-12-12', 7, 5599.93),
(13, 3, '2022-12-13', 16, 207.76),
(14, 4, '2022-12-14', 9, 179.91),
(15, 5, '2022-12-15', 6, 599.94),
(16, 1, '2022-12-16', 11, 175.89),
(17, 2, '2022-12-17', 4, 3199.96),
(18, 3, '2022-12-18', 19, 245.71),
(19, 4, '2022-12-19', 13, 259.87),
(20, 5, '2022-12-20', 7, 699.93),
(21, 1, '2022-12-21', 9, 143.91),
(22, 2, '2022-12-22', 6, 4799.94),
(23, 3, '2022-12-23', 17, 219.67),
(24, 4, '2022-12-24', 11, 219.89),
(25, 5, '2022-12-25', 4, 399.96),
(26, 1, '2022-12-26', 13, 207.87),
(27, 2, '2022-12-27', 5, 3999.95),
(28, 3, '2022-12-28', 15, 194.85),
(29, 4, '2022-12-29', 8, 159.92),
(30, 5, '2022-12-30', 9, 899.88),
(31, 1, '2022-12-31', 10, 159.90);
","SELECT product_category, SUM(sales.quantity * sales.price) AS total_revenue
FROM products
JOIN sales ON products.product_id = sales.product_id
WHERE sales.sale_date BETWEEN '2022-12-01' AND '2022-12-31'
GROUP BY product_category
ORDER BY total_revenue DESC
LIMIT 5;","This SQL query retrieves the top 5 product categories by total sales revenue for the month of December 2022. It joins the 'products' and 'sales' tables on the 'product_id' field, filters the sales data for December 2022, calculates the total revenue for each product category, groups the results by product category, orders the results in descending order of total revenue, and limits the output to the top 5 categories."
694,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What are the top five most popular products sold in the United States in the last quarter?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, price DECIMAL(10,2) NOT NULL, stock_level INT NOT NULL);
INSERT INTO products (product_id, product_name, category, price, stock_level) VALUES (1, 'T-Shirt', 'Clothing', 19.99, 100), (2, 'Jeans', 'Clothing', 49.99, 50), (3, 'Laptop', 'Electronics', 799.99, 20), (4, 'Coffee Maker', 'Appliances', 49.99, 75), (5, 'Book', 'Books', 14.99, 150);
CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT NOT NULL, customer_id INT NOT NULL, sale_date DATE NOT NULL, quantity INT NOT NULL, price DECIMAL(10,2) NOT NULL, FOREIGN KEY (product_id) REFERENCES products(product_id), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));
INSERT INTO sales (sale_id, product_id, customer_id, sale_date, quantity, price) VALUES (1, 1, 101, '2023-04-01', 2, 39.98), (2, 2, 102, '2023-04-05', 1, 49.99), (3, 3, 103, '2023-04-10', 1, 799.99), (4, 4, 104, '2023-04-15', 2, 99.98), (5, 5, 105, '2023-04-20', 1, 14.99), (6, 1, 106, '2023-04-25', 3, 59.97), (7, 2, 107, '2023-04-30', 1, 49.99);
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255) NOT NULL, state VARCHAR(255), city VARCHAR(255));
INSERT INTO customers (customer_id, customer_name, country, state, city) VALUES (101, 'John Smith', 'United States', 'California', 'Los Angeles'), (102, 'Alice Johnson', 'United States', 'Texas', 'Houston'), (103, 'Bob Williams', 'Canada', 'Ontario', 'Toronto'), (104, 'Emily Brown', 'United Kingdom', 'England', 'London'), (105, 'Michael Davis', 'Australia', 'New South Wales', 'Sydney'), (106, 'Sarah Miller', 'United States', 'New York', 'New York City'), (107, 'David Garcia', 'Mexico', 'Mexico City', 'Mexico City');","SELECT p.product_name, SUM(s.quantity) AS total_quantity_sold
FROM products p
JOIN sales s ON p.product_id = s.product_id
JOIN customers c ON s.customer_id = c.customer_id
WHERE c.country = 'United States'
AND s.sale_date BETWEEN '2023-04-01' AND '2023-06-30'
GROUP BY p.product_name
ORDER BY total_quantity_sold DESC
LIMIT 5;","This SQL query retrieves the top five most popular products sold in the United States in the last quarter. It does this by:

1. Joining the products table with the sales table on the product_id column.
2. Joining the sales table with the customers table on the customer_id column.
3. Filtering the results to only include sales from customers in the United States.
4. Filtering the results to only include sales that occurred in the last quarter (April 1st to June 30th).
5. Grouping the results by product name and summing the total quantity sold for each product.
6. Ordering the results by total quantity sold in descending order.
7. Limiting the results to the top 5 products."
695,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,What medications are prescribed for patients with type 2 diabetes?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), birthdate DATE, diagnosis VARCHAR(255));
CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), diagnosis VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_id INT REFERENCES medications(medication_id), date_prescribed DATE);",SELECT medications.name FROM medications JOIN prescriptions ON medications.medication_id = prescriptions.medication_id JOIN patients ON prescriptions.patient_id = patients.patient_id WHERE patients.diagnosis = 'Type 2 Diabetes';,"This query starts by selecting the name of the medication from the medications table. It then joins the medications table to the prescriptions table on the medication_id column. It also joins the prescriptions table to the patients table on the patient_id column. Finally, it filters the results to only include patients with a diagnosis of 'Type 2 Diabetes'."
696,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,What are the side effects of metformin?,"CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), side_effects TEXT);",SELECT side_effects FROM medications WHERE name = 'Metformin';,This query starts by selecting the side_effects column from the medications table. It then filters the results to only include the medication with the name 'Metformin'.
697,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,What is the average length of stay for patients with pneumonia?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), admission_date DATE, discharge_date DATE);
CREATE TABLE diagnoses (patient_id INT REFERENCES patients(patient_id), diagnosis VARCHAR(255));",SELECT AVG(discharge_date - admission_date) AS average_length_of_stay FROM patients JOIN diagnoses ON patients.patient_id = diagnoses.patient_id WHERE diagnosis = 'Pneumonia';,"This query starts by calculating the difference between the discharge_date and admission_date for each patient. It then groups the results by patient_id and calculates the average length of stay. Finally, it filters the results to only include patients with a diagnosis of 'Pneumonia'."
698,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,What is the percentage of patients who are readmitted to the hospital within 30 days of discharge?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), admission_date DATE, discharge_date DATE, readmission_date DATE);",SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM patients) AS readmission_rate FROM patients WHERE readmission_date IS NOT NULL AND readmission_date - discharge_date <= 30;,This query starts by counting the number of patients who have a readmission_date that is not null and within 30 days of their discharge_date. It then divides this number by the total number of patients to calculate the readmission rate.
699,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,What are the top 10 most common diagnoses for patients admitted to the hospital?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), admission_date DATE, discharge_date DATE);
CREATE TABLE diagnoses (patient_id INT REFERENCES patients(patient_id), diagnosis VARCHAR(255));","SELECT diagnosis, COUNT(*) AS count FROM diagnoses GROUP BY diagnosis ORDER BY count DESC LIMIT 10;","This query starts by counting the number of times each diagnosis appears in the diagnoses table. It then groups the results by diagnosis and orders them by the count in descending order. Finally, it limits the results to the top 10 most common diagnoses."
700,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",How much did corn yield increase over the past five years in the top five producing countries?,"CREATE TABLE corn_yields (
    country VARCHAR(255),
    year INT,
    yield_kg_per_ha FLOAT
);

INSERT INTO corn_yields (country, year, yield_kg_per_ha) VALUES
('United States', 2018, 10500),
('United States', 2019, 10720),
('United States', 2020, 10940),
('United States', 2021, 11160),
('United States', 2022, 11370),
('China', 2018, 5720),
('China', 2019, 5940),
('China', 2020, 6160),
('China', 2021, 6380),
('China', 2022, 6590),
('Brazil', 2018, 5200),
('Brazil', 2019, 5500),
('Brazil', 2020, 5680),
('Brazil', 2021, 5860),
('Brazil', 2022, 6040),
('Argentina', 2018, 5000),
('Argentina', 2019, 5200),
('Argentina', 2020, 5380),
('Argentina', 2021, 5560),
('Argentina', 2022, 5740),
('Ukraine', 2018, 7200),
('Ukraine', 2019, 7440),
('Ukraine', 2020, 7680),
('Ukraine', 2021, 7920),
('Ukraine', 2022, 8150);

CREATE TABLE countries_populations (
    country VARCHAR(255),
    population_millions INT
);

INSERT INTO countries_populations (country, population_millions) VALUES
('United States', 330),
('China', 1440),
('Brazil', 212),
('Argentina', 45),
('Ukraine', 44);

CREATE VIEW top_corn_producers AS
SELECT country, AVG(yield_kg_per_ha) as average_yield
FROM corn_yields
GROUP BY country
ORDER BY average_yield DESC
LIMIT 5;","SELECT
    tcy.country,
    tcy.average_yield - LAG(tcy.average_yield, 5, 0) OVER (ORDER BY tcy.year) AS yield_increase_over_5_years
FROM top_corn_producers AS tcy
ORDER BY tcy.average_yield DESC;",This SQL query first retrieves the top five corn-producing countries from the 'top_corn_producers' view. It uses the 'LAG()' window function to calculate the difference in average yield between the current and five years ago for each country. The results are ordered from the highest average yield to the lowest.
701,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","What are the top 5 crops grown in California, based on the average yield per acre in 2022?","CREATE TABLE crops (
  crop_id INT PRIMARY KEY,
  crop_name VARCHAR(255) NOT NULL,
  acres_planted INT NOT NULL,
  total_yield INT NOT NULL,
  year INT NOT NULL,
  state VARCHAR(255) NOT NULL
);

INSERT INTO crops (crop_id, crop_name, acres_planted, total_yield, year, state) VALUES
(1, 'Almonds', 1200000, 240000000, 2022, 'California'),
(2, 'Grapes', 900000, 180000000, 2022, 'California'),
(3, 'Lettuce', 700000, 140000000, 2022, 'California'),
(4, 'Tomatoes', 600000, 120000000, 2022, 'California'),
(5, 'Strawberries', 500000, 100000000, 2022, 'California'),
(6, 'Wheat', 1000000, 180000000, 2022, 'Kansas'),
(7, 'Corn', 1500000, 300000000, 2022, 'Iowa'),
(8, 'Soybeans', 1200000, 240000000, 2022, 'Illinois'),
(9, 'Cotton', 900000, 180000000, 2022, 'Texas'),
(10, 'Rice', 800000, 160000000, 2022, 'Arkansas');

CREATE TABLE weather (
  date DATE PRIMARY KEY,
  temperature FLOAT,
  rainfall FLOAT,
  state VARCHAR(255) NOT NULL
);

INSERT INTO weather (date, temperature, rainfall, state) VALUES
('2022-01-01', 45.2, 2.5, 'California'),
('2022-02-01', 51.8, 3.1, 'California'),
('2022-03-01', 58.9, 4.2, 'California'),
('2022-04-01', 64.7, 1.8, 'California'),
('2022-05-01', 70.5, 0.5, 'California'),
('2022-06-01', 75.6, 0.1, 'California'),
('2022-07-01', 81.3, 0.0, 'California'),
('2022-08-01', 80.8, 0.2, 'California'),
('2022-09-01', 76.5, 0.4, 'California'),
('2022-10-01', 70.2, 1.0, 'California'),
('2022-11-01', 61.9, 2.8, 'California'),
('2022-12-01', 53.6, 4.1, 'California');","SELECT c.crop_name, AVG(c.total_yield / c.acres_planted) AS average_yield
FROM crops c
WHERE c.state = 'California' AND c.year = 2022
GROUP BY c.crop_name
ORDER BY average_yield DESC
LIMIT 5;","This SQL query retrieves the top 5 crops grown in California based on average yield per acre in 2022. It does this by:

1. Selecting the crop name and calculating the average yield per acre for each crop using the `AVG()` function.
2. Filtering the data to include only crops grown in California and in the year 2022.
3. Grouping the data by crop name.
4. Ordering the data by average yield in descending order.
5. Limiting the results to the top 5 crops."
702,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","What was the average corn yield in bushels per acre for each state in 2022, ranked from highest to lowest?","CREATE TABLE CORN_YIELDS (   STATE VARCHAR(50),   YEAR INT,   YIELD_BUSHELS_PER_ACRE DECIMAL(10,2) );
INSERT INTO CORN_YIELDS (STATE, YEAR, YIELD_BUSHELS_PER_ACRE) VALUES ('Iowa', 2022, 175.5), ('Illinois', 2022, 172.3), ('Nebraska', 2022, 168.1), ('Minnesota', 2022, 164.9), ('South Dakota', 2022, 161.7), ('Indiana', 2022, 158.5), ('Wisconsin', 2022, 155.3), ('Ohio', 2022, 152.1), ('Michigan', 2022, 148.9), ('Missouri', 2022, 145.7);","SELECT STATE, AVG(YIELD_BUSHELS_PER_ACRE) AS AVERAGE_YIELD
FROM CORN_YIELDS
WHERE YEAR = 2022
GROUP BY STATE
ORDER BY AVERAGE_YIELD DESC;","This SQL query retrieves the average corn yield in bushels per acre for each state in 2022, ranked from highest to lowest.

1. It selects the state and the average yield (calculated using the AVG() function) from the CORN_YIELDS table.
2. It filters the data for the year 2022 using the WHERE clause.
3. It groups the data by state using the GROUP BY clause.
4. It orders the results by the average yield in descending order using the ORDER BY clause.

The output of this query will be a table with two columns: State and Average Yield. The states will be listed in descending order of their average corn yield in 2022."
703,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","For each crop type, calculate the total yield in tons for each county in 2022. Please also include the percentage of the total yield for each crop type in each county.","CREATE TABLE CROP_YIELDS (   COUNTY VARCHAR(50),   CROP_TYPE VARCHAR(50),   YEAR INT,   YIELD_TONS DECIMAL(10,2) );
INSERT INTO CROP_YIELDS (COUNTY, CROP_TYPE, YEAR, YIELD_TONS) VALUES ('Adams', 'Corn', 2022, 12345.6), ('Adams', 'Soybeans', 2022, 7890.1), ('Adams', 'Wheat', 2022, 4567.8), ('Brown', 'Corn', 2022, 9876.5), ('Brown', 'Soybeans', 2022, 6543.2), ('Brown', 'Wheat', 2022, 3210.9);","WITH CountyCropYields AS (
    SELECT
        COUNTY,
        CROP_TYPE,
        YEAR,
        YIELD_TONS,
        SUM(YIELD_TONS) OVER (PARTITION BY COUNTY, YEAR) AS TotalYieldForCounty
    FROM
        CROP_YIELDS
    WHERE
        YEAR = 2022
),
RankedCountyCropYields AS (
    SELECT
        CountyCropYields.*, 
        RANK() OVER (PARTITION BY COUNTY ORDER BY YIELD_TONS DESC) AS YieldRank
    FROM
        CountyCropYields
)
SELECT
    RankedCountyCropYields.COUNTY,
    RankedCountyCropYields.CROP_TYPE,
    RankedCountyCropYields.YIELD_TONS,
    (RankedCountyCropYields.YIELD_TONS * 100.0 / RankedCountyCropYields.TotalYieldForCounty) AS PercentageOfTotalYield
FROM
    RankedCountyCropYields
ORDER BY
    RankedCountyCropYields.COUNTY,
    RankedCountyCropYields.YieldRank;","This SQL query calculates the total yield in tons for each crop type in each county in 2022, and also includes the percentage of the total yield for each crop type in each county.

1. The query starts by creating a CTE (Common Table Expression) called CountyCropYields. This CTE selects the county, crop type, year, yield in tons, and the sum of the yield in tons for each county and year. The sum is calculated using the SUM() function and the OVER clause with a partition by county and year.

2. Next, the query creates another CTE called RankedCountyCropYields. This CTE selects all the columns from CountyCropYields and also adds a column called YieldRank. The YieldRank column is calculated using the RANK() function and the OVER clause with a partition by county and order by yield in tons in descending order.

3. Finally, the query selects the county, crop type, yield in tons, and the percentage of the total yield for each crop type in each county. The percentage is calculated by dividing the yield in tons by the total yield for the county and multiplying by 100.0. The results are ordered by county and then by yield rank.

The output of this query will be a table with four columns: County, Crop Type, Yield (Tons), and Percentage of Total Yield. The table will show the total yield for each crop type in each county, as well as the percentage of the total yield that each crop type represents in each county."
704,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","Identify the top 10 counties with the highest average wheat yield in tons per acre for the period 2020-2022, along with the average yield for each county.","CREATE TABLE WHEAT_YIELDS (   COUNTY VARCHAR(50),   YEAR INT,   YIELD_TONS_PER_ACRE DECIMAL(10,2) );
INSERT INTO WHEAT_YIELDS (COUNTY, YEAR, YIELD_TONS_PER_ACRE) VALUES ('Adams', 2020, 2.5), ('Adams', 2021, 2.7), ('Adams', 2022, 2.6), ('Brown', 2020, 2.3, 'Brown', 2021, 2.4), ('Brown', 2022, 2.5), ('Clark', 2020, 2.8), ('Clark', 2021, 2.9), ('Clark', 2022, 3.0), ('Davis', 2020, 2.1, 'Davis', 2021, 2.2), ('Davis', 2022, 2.3);","SELECT
    COUNTY,
    AVG(YIELD_TONS_PER_ACRE) AS AverageYield
FROM
    WHEAT_YIELDS
WHERE
    YEAR BETWEEN 2020 AND 2022
GROUP BY
    COUNTY
ORDER BY
    AverageYield DESC
LIMIT 10;","This SQL query identifies the top 10 counties with the highest average wheat yield in tons per acre for the period 2020-2022, along with the average yield for each county.

1. The query selects the county and the average yield (calculated using the AVG() function) from the WHEAT_YIELDS table.
2. It filters the data for the years 2020, 2021, and 2022 using the WHERE clause.
3. It groups the data by county using the GROUP BY clause.
4. It orders the results by the average yield in descending order using the ORDER BY clause.
5. It limits the results to the top 10 counties using the LIMIT clause.

The output of this query will be a table with two columns: County and Average Yield. The table will show the top 10 counties with the highest average wheat yield in tons per acre, along with the average yield for each county."
705,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","List all product releases scheduled for the next quarter in the North American market, along with their target customer segments and estimated market share.","CREATE TABLE releases (release_date DATE, product_name VARCHAR(255), target_market VARCHAR(255), estimated_market_share DECIMAL(5,2));
INSERT INTO releases VALUES ('2024-04-01', 'AcmePhone 10', 'North America', 0.15), ('2024-04-15', 'ApexTablet 3', 'North America', 0.10), ('2024-05-01', 'ZenithLaptop Pro', 'North America', 0.20);","SELECT release_date, product_name, target_market, estimated_market_share FROM releases WHERE release_date BETWEEN '2024-04-01' AND '2024-06-30' AND target_market = 'North America';","This query selects all records from the 'releases' table where the release date falls between the start of the next quarter (April 1st) and the end of the quarter (June 30th), and the target market is 'North America'. The resulting data provides a list of product releases scheduled for the next quarter in the North American market, along with their target customer segments and estimated market share."
706,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","What are the top 10 products in terms of revenue for a company in a given region, for the past year?","CREATE TABLE Product (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, CategoryID INT NOT NULL, Price DECIMAL(10,2) NOT NULL); 
CREATE TABLE Category (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(255) NOT NULL); 
CREATE TABLE Sales (SalesID INT PRIMARY KEY, ProductID INT NOT NULL, RegionID INT NOT NULL, Quantity INT NOT NULL, SalesDate DATE NOT NULL, Price DECIMAL(10,2) NOT NULL); 
CREATE TABLE Region (RegionID INT PRIMARY KEY, RegionName VARCHAR(255) NOT NULL);","SELECT P.ProductName, SUM(S.Price * S.Quantity) AS TotalRevenue 
FROM Product AS P 
JOIN Category AS C ON P.CategoryID = C.CategoryID 
JOIN Sales AS S ON P.ProductID = S.ProductID 
JOIN Region AS R ON S.RegionID = R.RegionID 
WHERE R.RegionName = 'California' AND S.SalesDate BETWEEN DATE('2022-11-01') AND DATE('2023-10-31') 
GROUP BY P.ProductName 
ORDER BY TotalRevenue DESC 
LIMIT 10;","This query selects the product names and their total revenue for a company in the California region for the past year. 
It joins four tables: Product, Category, Sales, and Region. 
The query filters the sales data for the California region and the past year. 
Then, it groups the sales data by product name and calculates the total revenue for each product. 
Finally, it orders the results by total revenue in descending order and limits the output to the top 10 products."
707,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","What are the top 3 consumer complaints related to data privacy in a particular country, in the past quarter?","CREATE TABLE ConsumerComplaint (ComplaintID INT PRIMARY KEY, ConsumerName VARCHAR(255) NOT NULL, ComplaintDate DATE NOT NULL, ComplaintType VARCHAR(255) NOT NULL, Country VARCHAR(255) NOT NULL, Description TEXT); 
CREATE TABLE ComplaintCategory (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(255) NOT NULL); 
CREATE TABLE ComplaintType (TypeID INT PRIMARY KEY, TypeName VARCHAR(255) NOT NULL);","SELECT C.CategoryName, COUNT(*) AS TotalComplaints 
FROM ConsumerComplaint AS CC 
JOIN ComplaintCategory AS C ON CC.ComplaintType = C.CategoryID 
WHERE CC.Country = 'United States' AND CC.ComplaintDate BETWEEN DATE('2023-07-01') AND DATE('2023-09-30') AND CC.ComplaintType IN ('Data Sharing', 'Data Security', 'Data Access') 
GROUP BY C.CategoryName 
ORDER BY TotalComplaints DESC 
LIMIT 3;","This query selects the top 3 consumer complaint categories related to data privacy in the United States for the past quarter. 
It joins three tables: ConsumerComplaint, ComplaintCategory, and ComplaintType. 
The query filters the complaint data for the United States, the past quarter, and complaint types related to data privacy. 
Then, it groups the complaint data by complaint category and counts the total number of complaints for each category. 
Finally, it orders the results by total complaints in descending order and limits the output to the top 3 categories."
708,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 countries with the highest number of cyber attacks in the past month?,"CREATE TABLE CyberAttack (AttackID INT PRIMARY KEY, AttackDate DATE NOT NULL, AttackType VARCHAR(255) NOT NULL, Country VARCHAR(255) NOT NULL, TargetIndustry VARCHAR(255) NOT NULL); 
CREATE TABLE Country (CountryID INT PRIMARY KEY, CountryName VARCHAR(255) NOT NULL); 
CREATE TABLE Industry (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(255) NOT NULL);","SELECT C.CountryName, COUNT(*) AS TotalAttacks 
FROM CyberAttack AS CA 
JOIN Country AS C ON CA.Country = C.CountryID 
WHERE CA.AttackDate BETWEEN DATE('2023-09-01') AND DATE('2023-09-30') 
GROUP BY C.CountryName 
ORDER BY TotalAttacks DESC 
LIMIT 5;","This query selects the top 5 countries with the highest number of cyber attacks in the past month. 
It joins two tables: CyberAttack and Country. 
The query filters the attack data for the past month. 
Then, it groups the attack data by country and counts the total number of attacks for each country. 
Finally, it orders the results by total attacks in descending order and limits the output to the top 5 countries."
709,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","What are the top 3 trending technologies in the consumer electronics industry, based on product innovation in the past year?","CREATE TABLE Technology (TechnologyID INT PRIMARY KEY, TechnologyName VARCHAR(255) NOT NULL); 
CREATE TABLE ProductInnovation (InnovationID INT PRIMARY KEY, ProductID INT NOT NULL, TechnologyID INT NOT NULL, InnovationDate DATE NOT NULL); 
CREATE TABLE Product (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, CategoryID INT NOT NULL, Price DECIMAL(10,2) NOT NULL); 
CREATE TABLE Category (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(255) NOT NULL);","SELECT T.TechnologyName, COUNT(*) AS TotalInnovations 
FROM Technology AS T 
JOIN ProductInnovation AS PI ON T.TechnologyID = PI.TechnologyID 
JOIN Product AS P ON PI.ProductID = P.ProductID 
JOIN Category AS C ON P.CategoryID = C.CategoryID 
WHERE C.CategoryName = 'Consumer Electronics' AND PI.InnovationDate BETWEEN DATE('2022-10-01') AND DATE('2023-09-30') 
GROUP BY T.TechnologyName 
ORDER BY TotalInnovations DESC 
LIMIT 3;","This query selects the top 3 trending technologies in the consumer electronics industry, based on product innovation in the past year. 
It joins four tables: Technology, ProductInnovation, Product, and Category. 
The query filters the innovation data for the consumer electronics category and the past year. 
Then, it groups the innovation data by technology and counts the total number of innovations for each technology. 
Finally, it orders the results by total innovations in descending order and limits the output to the top 3 technologies."
710,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"How many customers have opted out of data collection across the EMEA region in the past three months, excluding Switzerland?","CREATE TABLE customers(customer_id int PRIMARY KEY, name varchar(255), email varchar(255), country varchar(255), opt_out_data_collection boolean, opt_out_date timestamp);
INSERT INTO customers (customer_id, name, email, country, opt_out_data_collection, opt_out_date) VALUES
(1, 'John Smith', 'john.smith@example.com', 'Germany', true, '2023-07-15'),
(2, 'Alice Johnson', 'alice.johnson@example.com', 'France', false, null),
(3, 'Bob Williams', 'bob.williams@example.com', 'Italy', true, '2023-08-22'),
(4, 'Emily Garcia', 'emily.garcia@example.com', 'Spain', false, null),
(5, 'Peter Brown', 'peter.brown@example.com', 'Switzerland', true, '2023-07-01');

CREATE TABLE regions(region_id int PRIMARY KEY, name varchar(255));
INSERT INTO regions (region_id, name) VALUES
(1, 'North America'),
(2, 'Europe'),
(3, 'Asia'),
(4, 'Africa'),
(5, 'Oceania');

CREATE TABLE country_region(country_id int, region_id int, PRIMARY KEY (country_id, region_id));
INSERT INTO country_region (country_id, region_id) VALUES
(1, 2),
(2, 2),
(3, 2),
(4, 2),
(5, 2);","SELECT COUNT(*) FROM customers c
JOIN country_region cr ON c.country = cr.country_id
JOIN regions r ON cr.region_id = r.region_id
WHERE r.name = 'Europe' AND c.opt_out_data_collection = TRUE AND c.opt_out_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND c.country != 'Switzerland';","1. Join the 'customers' table with the 'country_region' table on the 'country' field.
2. Join the 'country_region' table with the 'regions' table on the 'region_id' field.
3. Filter the results to include only customers in the 'Europe' region.
4. Filter the results to include only customers who have opted out of data collection.
5. Filter the results to include only customers who opted out within the past three months, excluding Switzerland.
6. Count the number of customers who meet all of the above criteria."
711,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"What are the top 3 most downloaded mobile apps in the Healthcare category globally in the past week, based on the number of unique downloads?","CREATE TABLE mobile_apps(app_id int PRIMARY KEY, name varchar(255), category varchar(255), downloads int, release_date date);
INSERT INTO mobile_apps (app_id, name, category, downloads, release_date) VALUES
(1, 'Headspace', 'Health & Fitness', 1234567, '2017-01-01'),
(2, 'MyFitnessPal', 'Health & Fitness', 8765432, '2015-03-15'),
(3, 'Calm', 'Health & Fitness', 5432109, '2014-08-22'),
(4, 'Spotify', 'Music', 12345678, '2008-10-07'),
(5, 'Netflix', 'Entertainment', 10987654, '2007-01-29');

CREATE TABLE app_downloads(app_id int, download_date date, unique_downloads int, PRIMARY KEY (app_id, download_date));
INSERT INTO app_downloads (app_id, download_date, unique_downloads) VALUES
(1, '2023-10-23', 12345),
(2, '2023-10-23', 87654),
(3, '2023-10-23', 54321),
(4, '2023-10-23', 109876),
(5, '2023-10-23', 123456);

CREATE TABLE app_categories(category_id int PRIMARY KEY, category_name varchar(255));
INSERT INTO app_categories (category_id, category_name) VALUES
(1, 'Health & Fitness'),
(2, 'Music'),
(3, 'Entertainment'),
(4, 'Social'),
(5, 'Productivity');","SELECT ma.name, SUM(ad.unique_downloads) AS total_downloads
FROM mobile_apps ma
JOIN app_downloads ad ON ma.app_id = ad.app_id
JOIN app_categories ac ON ma.category = ac.category_name
WHERE ac.category_name = 'Healthcare'
AND ad.download_date BETWEEN CURDATE() - INTERVAL 7 DAY AND CURDATE()
GROUP BY ma.name
ORDER BY total_downloads DESC
LIMIT 3;","1. Join the 'mobile_apps' table with the 'app_downloads' table on the 'app_id' field.
2. Join the 'app_downloads' table with the 'app_categories' table on the 'category' field.
3. Filter the results to include only apps in the 'Healthcare' category.
4. Filter the results to include only downloads that occurred in the past week.
5. Group the results by app name and sum the total number of unique downloads for each app.
6. Order the results by total downloads in descending order.
7. Limit the results to the top 3 apps."
712,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,What are the top 5 countries with the highest number of data breaches in the last year?,"CREATE TABLE DataBreaches (   BreachID INT PRIMARY KEY,   Country VARCHAR(255),   Date DATETIME,   RecordsAffected INT );

INSERT INTO DataBreaches (BreachID, Country, Date, RecordsAffected) VALUES   (1, 'United States', '2023-01-01', 10000),   (2, 'China', '2023-02-15', 5000),   (3, 'United Kingdom', '2023-03-08', 3000),   (4, 'India', '2023-04-22', 2000),   (5, 'Brazil', '2023-05-10', 1500);","SELECT Country, COUNT(*) AS NumberOfBreaches   FROM DataBreaches   WHERE Date >= DATEADD(year, -1, GETDATE())   GROUP BY Country   ORDER BY NumberOfBreaches DESC   LIMIT 5;","This SQL query retrieves the top 5 countries with the highest number of data breaches in the last year. It first filters the DataBreaches table to include only breaches that occurred in the last year. Then, it groups the breaches by country and counts the number of breaches for each country. Finally, it orders the results by the number of breaches in descending order and limits the results to the top 5 countries."
713,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,What is the average number of records affected by data breaches per month in the last year?,"CREATE TABLE DataBreaches (   BreachID INT PRIMARY KEY,   Country VARCHAR(255),   Date DATETIME,   RecordsAffected INT );

INSERT INTO DataBreaches (BreachID, Country, Date, RecordsAffected) VALUES   (1, 'United States', '2023-01-01', 10000),   (2, 'China', '2023-02-15', 5000),   (3, 'United Kingdom', '2023-03-08', 3000),   (4, 'India', '2023-04-22', 2000),   (5, 'Brazil', '2023-05-10', 1500);","SELECT AVG(RecordsAffected) AS AverageRecordsAffected   FROM DataBreaches   WHERE Date >= DATEADD(year, -1, GETDATE());","This SQL query calculates the average number of records affected by data breaches per month in the last year. It first filters the DataBreaches table to include only breaches that occurred in the last year. Then, it calculates the average number of records affected by using the AVG() function. Finally, it displays the average number of records affected."
714,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,What is the trend of data breaches over the last 5 years?,"CREATE TABLE DataBreaches (   BreachID INT PRIMARY KEY,   Country VARCHAR(255),   Date DATETIME,   RecordsAffected INT );

INSERT INTO DataBreaches (BreachID, Country, Date, RecordsAffected) VALUES   (1, 'United States', '2018-01-01', 1000),   (2, 'China', '2018-02-15', 500),   (3, 'United Kingdom', '2018-03-08', 300),   (4, 'India', '2018-04-22', 200),   (5, 'Brazil', '2018-05-10', 150),   (6, 'United States', '2019-01-01', 2000),   (7, 'China', '2019-02-15', 1000),   (8, 'United Kingdom', '2019-03-08', 600),   (9, 'India', '2019-04-22', 400),   (10, 'Brazil', '2019-05-10', 300),   (11, 'United States', '2020-01-01', 3000),   (12, 'China', '2020-02-15', 1500),   (13, 'United Kingdom', '2020-03-08', 900),   (14, 'India', '2020-04-22', 600),   (15, 'Brazil', '2020-05-10', 450),   (16, 'United States', '2021-01-01', 4000),   (17, 'China', '2021-02-15', 2000),   (18, 'United Kingdom', '2021-03-08', 1200),   (19, 'India', '2021-04-22', 800),   (20, 'Brazil', '2021-05-10', 600),   (21, 'United States', '2022-01-01', 5000),   (22, 'China', '2022-02-15', 2500),   (23, 'United Kingdom', '2022-03-08', 1500),   (24, 'India', '2022-04-22', 1000),   (25, 'Brazil', '2022-05-10', 750);","SELECT YEAR(Date) AS Year, COUNT(*) AS NumberOfBreaches   FROM DataBreaches   GROUP BY YEAR(Date)   ORDER BY YEAR(Date);","This SQL query retrieves the trend of data breaches over the last 5 years. It first groups the data by year and counts the number of breaches for each year. Then, it orders the results by year."
715,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 10 states in terms of crop yield in 2022 for the top 5 crops by revenue.,"CREATE TABLE CropYields (Year INT, State VARCHAR(255), Crop VARCHAR(255), Yield INT, Revenue DECIMAL(10,2));
INSERT INTO CropYields VALUES (2022, 'California', 'Almonds', 1500000, 5000000000.00);
INSERT INTO CropYields VALUES (2022, 'California', 'Grapes', 1200000, 3000000000.00);
INSERT INTO CropYields VALUES (2022, 'California', 'Lettuce', 1000000, 2000000000.00);
INSERT INTO CropYields VALUES (2022, 'Iowa', 'Corn', 1800000, 4000000000.00);
INSERT INTO CropYields VALUES (2022, 'Iowa', 'Soybeans', 1500000, 3000000000.00);
INSERT INTO CropYields VALUES (2022, 'Texas', 'Cotton', 1200000, 2000000000.00);
INSERT INTO CropYields VALUES (2022, 'Texas', 'Wheat', 1000000, 1000000000.00);
INSERT INTO CropYields VALUES (2022, 'Nebraska', 'Corn', 1700000, 3500000000.00);
INSERT INTO CropYields VALUES (2022, 'Nebraska', 'Soybeans', 1400000, 2500000000.00);
INSERT INTO CropYields VALUES (2022, 'Illinois', 'Corn', 1600000, 3200000000.00);
INSERT INTO CropYields VALUES (2022, 'Illinois', 'Soybeans', 1300000, 2200000000.00);

CREATE TABLE CropRevenue (Year INT, Crop VARCHAR(255), Revenue DECIMAL(10,2));
INSERT INTO CropRevenue VALUES (2022, 'Almonds', 5000000000.00);
INSERT INTO CropRevenue VALUES (2022, 'Grapes', 3000000000.00);
INSERT INTO CropRevenue VALUES (2022, 'Lettuce', 2000000000.00);
INSERT INTO CropRevenue VALUES (2022, 'Corn', 4000000000.00);
INSERT INTO CropRevenue VALUES (2022, 'Soybeans', 3000000000.00);
INSERT INTO CropRevenue VALUES (2022, 'Cotton', 2000000000.00);
INSERT INTO CropRevenue VALUES (2022, 'Wheat', 1000000000.00);","WITH StateCropRevenue AS (
SELECT
    cy.State,
    cy.Crop,
    cy.Yield,
    cy.Revenue,
    cr.Revenue AS CropRevenue,
    ROW_NUMBER() OVER (PARTITION BY cy.State ORDER BY cy.Revenue DESC) AS StateRank,
    ROW_NUMBER() OVER (PARTITION BY cy.Crop ORDER BY cy.Revenue DESC) AS CropRank
FROM
    CropYields cy
JOIN
    CropRevenue cr ON cy.Crop = cr.Crop
WHERE
    cy.Year = 2022
),
TopCrops AS (
SELECT
    State,
    Crop,
    Yield,
    Revenue,
    CropRevenue,
    StateRank,
    CropRank
FROM
    StateCropRevenue
WHERE
    CropRank <= 5
),
TopStates AS (
SELECT
    State,
    SUM(Revenue) AS TotalRevenue,
    ROW_NUMBER() OVER (ORDER BY SUM(Revenue) DESC) AS StateRank
FROM
    TopCrops
GROUP BY
    State
)
SELECT
    ts.State,
    tcr.Crop,
    tcr.Yield,
    tcr.Revenue,
    tcr.CropRevenue
FROM
    TopStates ts
JOIN
    TopCrops tcr ON ts.State = tcr.State
WHERE
    ts.StateRank <= 10
ORDER BY
    ts.StateRank, tcr.CropRank;","This SQL query retrieves the top 10 states in terms of crop yield in 2022 for the top 5 crops by revenue. It first joins the CropYields and CropRevenue tables to calculate the revenue for each crop in each state. Then, it uses window functions to rank the crops within each state and the states by total revenue. Finally, it selects the top 10 states and their top 5 crops, ordered by state rank and crop rank."
716,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Create a view that shows the average yield of each crop variety for each state in the United States, along with the total acreage planted for each crop variety in each state. The view should also include the rank of each state in terms of average yield for each crop variety.","CREATE VIEW us_crop_yields_by_state AS
SELECT
    crop_variety,
    state,
    AVG(yield) AS average_yield,
    SUM(acreage) AS total_acreage,
    RANK() OVER (PARTITION BY crop_variety ORDER BY AVG(yield) DESC) AS yield_rank
FROM
    crop_yields
GROUP BY
    crop_variety,
    state;",select * from us_crop_yields_by_state;,"This SQL query creates a view called us_crop_yields_by_state that shows the average yield of each crop variety for each state in the United States, along with the total acreage planted for each crop variety in each state. The view also includes the rank of each state in terms of average yield for each crop variety.

The query first selects the crop variety, state, average yield, total acreage, and rank from the crop_yields table. The average yield is calculated using the AVG() function, and the total acreage is calculated using the SUM() function. The rank is calculated using the RANK() function, which partitions the data by crop variety and orders it by average yield in descending order.

The query then groups the data by crop variety and state. This means that the query will return one row for each unique combination of crop variety and state. The average yield, total acreage, and rank are calculated for each group.

Finally, the query creates a view called us_crop_yields_by_state. This view will make it easier to query the data in the future, as it will not be necessary to repeat the complex calculations each time the data is needed.

To use the view, simply select from the us_crop_yields_by_state view. For example, the following query would return the top 10 states in terms of average yield for corn:

```sql
SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY crop_variety ORDER BY average_yield DESC) AS row_num
FROM
    us_crop_yields_by_state
WHERE
    crop_variety = 'Corn'
ORDER BY
    row_num
LIMIT 10;
```"
717,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Create a view that shows the average price of each commodity in each market for the past year, along with the total volume of each commodity traded in each market for the past year. The view should also include the rank of each market in terms of average price for each commodity.","CREATE VIEW market_prices_by_commodity AS
SELECT
    commodity,
    market,
    AVG(price) AS average_price,
    SUM(volume) AS total_volume,
    RANK() OVER (PARTITION BY commodity ORDER BY AVG(price) DESC) AS price_rank
FROM
    market_prices
WHERE
    sale_date >= DATEADD(year, -1, GETDATE())
GROUP BY
    commodity,
    market;",select * from market_prices_by_commodity;,"This SQL query creates a view called market_prices_by_commodity that shows the average price of each commodity in each market for the past year, along with the total volume of each commodity traded in each market for the past year. The view also includes the rank of each market in terms of average price for each commodity.

The query first selects the commodity, market, average price, total volume, and rank from the market_prices table. The average price is calculated using the AVG() function, and the total volume is calculated using the SUM() function. The rank is calculated using the RANK() function, which partitions the data by commodity and orders it by average price in descending order.

The query then filters the data to only include sales that occurred in the past year. This is done using the WHERE clause and the DATEADD() function. The DATEADD() function is used to add or subtract a specified number of days, months, or years to a given date. In this case, the function is used to subtract one year from the current date.

Finally, the query groups the data by commodity and market. This means that the query will return one row for each unique combination of commodity and market. The average price, total volume, and rank are calculated for each group.

The resulting view can be used to analyze the average prices and volumes of commodities traded in different markets. For example, the following query would return the top 10 markets in terms of average price for corn:

```sql
SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY commodity ORDER BY average_price DESC) AS row_num
FROM
    market_prices_by_commodity
WHERE
    commodity = 'Corn'
ORDER BY
    row_num
LIMIT 10;
```"
718,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Create a view that shows the top 10 farmers in terms of total acreage planted for each crop variety in the United States. The view should also include the total number of farms operated by each farmer.,"CREATE VIEW top_farmers_by_acreage AS
SELECT
    farmer_id,
    farmer_name,
    crop_variety,
    SUM(acreage) AS total_acreage,
    COUNT(DISTINCT farm_id) AS total_farms
FROM
    farms
GROUP BY
    farmer_id,
    farmer_name,
    crop_variety
ORDER BY
    total_acreage DESC
LIMIT 10;",select * from top_farmers_by_acreage;,"This SQL query creates a view called top_farmers_by_acreage that shows the top 10 farmers in terms of total acreage planted for each crop variety in the United States. The view also includes the total number of farms operated by each farmer.

The query first selects the farmer ID, farmer name, crop variety, total acreage, and total number of farms from the farms table. The total acreage is calculated using the SUM() function, and the total number of farms is calculated using the COUNT(DISTINCT) function. The COUNT(DISTINCT) function is used to count the number of distinct farm IDs for each farmer.

The query then groups the data by farmer ID, farmer name, and crop variety. This means that the query will return one row for each unique combination of farmer ID, farmer name, and crop variety. The total acreage and total number of farms are calculated for each group.

Finally, the query orders the data by total acreage in descending order and limits the results to the top 10 farmers for each crop variety. This means that the query will return a total of 30 rows, one for each of the top 10 farmers for each of the three crop varieties.

The resulting view can be used to analyze the largest farmers in terms of acreage planted for each crop variety. For example, the following query would return the top 10 farmers in terms of total acreage planted for corn:

```sql
SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY crop_variety ORDER BY total_acreage DESC) AS row_num
FROM
    top_farmers_by_acreage
WHERE
    crop_variety = 'Corn'
ORDER BY
    row_num
LIMIT 10;
```"
719,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Which regions have the highest average annual yield for corn over the past 10 years, excluding outliers?","CREATE TABLE corn_yields (
    region TEXT,
    year INTEGER,
    yield REAL
);

CREATE TABLE weather_data (
    region TEXT,
    year INTEGER,
    temperature REAL,
    precipitation REAL
);

INSERT INTO corn_yields (region, year, yield)
VALUES
    ('Midwest', 2013, 180),
    ('Midwest', 2014, 175),
    ('Midwest', 2015, 190),
    ('Midwest', 2016, 165),
    ('Midwest', 2017, 185),
    ('Midwest', 2018, 195),
    ('Midwest', 2019, 180),
    ('Midwest', 2020, 170),
    ('Midwest', 2021, 190),
    ('Midwest', 2022, 185),
    ('Southeast', 2013, 150),
    ('Southeast', 2014, 145),
    ('Southeast', 2015, 160),
    ('Southeast', 2016, 135),
    ('Southeast', 2017, 155),
    ('Southeast', 2018, 165),
    ('Southeast', 2019, 150),
    ('Southeast', 2020, 140),
    ('Southeast', 2021, 160),
    ('Southeast', 2022, 155),
    ('West', 2013, 170),
    ('West', 2014, 165),
    ('West', 2015, 180),
    ('West', 2016, 155),
    ('West', 2017, 175),
    ('West', 2018, 185),
    ('West', 2019, 170),
    ('West', 2020, 160),
    ('West', 2021, 180),
    ('West', 2022, 175);

INSERT INTO weather_data (region, year, temperature, precipitation)
VALUES
    ('Midwest', 2013, 20.5, 35),
    ('Midwest', 2014, 21.0, 30),
    ('Midwest', 2015, 22.5, 40),
    ('Midwest', 2016, 20.0, 25),
    ('Midwest', 2017, 22.0, 35),
    ('Midwest', 2018, 23.5, 45),
    ('Midwest', 2019, 21.0, 30),
    ('Midwest', 2020, 20.5, 25),
    ('Midwest', 2021, 22.5, 40),
    ('Midwest', 2022, 21.0, 30),
    ('Southeast', 2013, 25.0, 50),
    ('Southeast', 2014, 24.5, 45),
    ('Southeast', 2015, 26.0, 55),
    ('Southeast', 2016, 23.5, 40),
    ('Southeast', 2017, 25.5, 50),
    ('Southeast', 2018, 26.5, 55),
    ('Southeast', 2019, 25.0, 45),
    ('Southeast', 2020, 24.5, 40),
    ('Southeast', 2021, 26.0, 55),
    ('Southeast', 2022, 25.5, 50),
    ('West', 21.5, 25),
    ('West', 2014, 22.0, 20),
    ('West', 2015, 23.5, 30),
    ('West', 2016, 21.0, 15),
    ('West', 2017, 23.0, 25),
    ('West', 2018, 24.5, 35),
    ('West', 2019, 22.0, 20),
    ('West', 2020, 21.5, 15),
    ('West', 2021, 23.5, 30),
    ('West', 2022, 22.0, 20);","SELECT region
FROM (
    SELECT region, year, yield, AVG(yield) OVER (PARTITION BY region ORDER BY year ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS rolling_avg
    FROM corn_yields
    WHERE year BETWEEN 2013 AND 2022
) AS subquery
WHERE yield > rolling_avg * 1.2
GROUP BY region
ORDER BY AVG(yield) DESC
LIMIT 3;","1. Calculate the rolling average yield for each region for the past 10 years
2. Filter out any yields that are more than 20% higher than the rolling average
3. Group the results by region and calculate the average yield for each region
4. Order the results by average yield in descending order
5. Select the top 3 regions with the highest average yield"
720,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the average account balance of customers in California?,"CREATE TABLE Customers ( 
  CustomerID INT PRIMARY KEY, 
  Name VARCHAR(255), 
  Address VARCHAR(255), 
  City VARCHAR(255), 
  State VARCHAR(255), 
  AccountBalance FLOAT 
); 
INSERT INTO Customers (CustomerID, Name, Address, City, State, AccountBalance) VALUES 
(1, 'John Doe', '123 Main St', 'Los Angeles', 'CA', 1000.00), 
(2, 'Jane Smith', '456 Elm St', 'San Francisco', 'CA', 2500.00), 
(3, 'Mike Jones', '789 Oak St', 'San Diego', 'CA', 500.00), 
(4, 'Mary Brown', '1011 Pine St', 'Sacramento', 'CA', 1500.00), 
(5, 'David Davis', '1213 Willow St', 'Fresno', 'CA', 750.00), 
(6, 'Linda Williams', '1415 Maple St', 'Phoenix', 'AZ', 2000.00), 
(7, 'James Garcia', '1617 Birch St', 'Tucson', 'AZ', 1250.00), 
(8, 'Jennifer Rodriguez', '1819 Oak St', 'Mesa', 'AZ', 3000.00), 
(9, 'Christopher Wilson', '2021 Palm St', 'Chandler', 'AZ', 1750.00), 
(10, 'Patricia Anderson', '2223 Willow St', 'Gilbert', 'AZ', 500.00);",SELECT AVG(AccountBalance) FROM Customers WHERE State = 'CA';,This query calculates the average 'AccountBalance' of customers where the 'State' is 'CA' using the 'AVG()' function. This provides the average account balance for customers in California.
721,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the transaction records for customer ID 123?,"CREATE TABLE Transactions ( 
  TransactionID INT PRIMARY KEY, 
  CustomerID INT, 
  TransactionDate DATE, 
  Amount FLOAT, 
  Description VARCHAR(255) 
); 
INSERT INTO Transactions (TransactionID, CustomerID, TransactionDate, Amount, Description) VALUES 
(1, 123, '2023-01-01', 100.00, 'Deposit'), 
(2, 123, '2023-01-05', 50.00, 'Withdrawal'), 
(3, 123, '2023-01-10', 25.00, 'Payment'), 
(4, 123, '2023-01-15', 75.00, 'Deposit'), 
(5, 123, '2023-01-20', 150.00, 'Transfer'), 
(6, 456, '2023-01-02', 200.00, 'Deposit'), 
(7, 456, '2023-01-07', 100.00, 'Withdrawal'), 
(8, 456, '2023-01-12', 75.00, 'Payment'), 
(9, 456, '2023-01-17', 50.00, 'Deposit'), 
(10, 456, '2023-01-22', 125.00, 'Transfer');",SELECT * FROM Transactions WHERE CustomerID = 123;,This query selects all columns and rows from the 'Transactions' table where the 'CustomerID' is 123. This provides a complete list of transaction records for customer ID 123.
722,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the total risk score for each investment portfolio?,"CREATE TABLE Portfolios ( 
  PortfolioID INT PRIMARY KEY, 
  CustomerID INT, 
  Name VARCHAR(255), 
  RiskScore INT 
); 
INSERT INTO Portfolios (PortfolioID, CustomerID, Name, RiskScore) VALUES 
(1, 123, 'Conservative', 1), 
(2, 123, 'Moderate', 3), 
(3, 123, 'Aggressive', 5), 
(4, 456, 'Balanced', 2), 
(5, 456, 'Growth', 4);","SELECT PortfolioID, Name, SUM(RiskScore) AS TotalRiskScore FROM Portfolios GROUP BY PortfolioID, Name;","This query calculates the total risk score for each portfolio by grouping the 'Portfolios' table by 'PortfolioID' and 'Name', and then summing the 'RiskScore' column using the 'SUM()' function. This provides a summary of the total risk score for each investment portfolio."
723,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Show all banking transactions that occurred on January 15th, 2023.","CREATE TABLE BankingTransactions ( 
  TransactionID INT PRIMARY KEY, 
  AccountID INT, 
  TransactionDate DATE, 
  Amount FLOAT, 
  Description VARCHAR(255) 
); 
INSERT INTO BankingTransactions (TransactionID, AccountID, TransactionDate, Amount, Description) VALUES 
(1, 101, '2023-01-10', 100.00, 'Deposit'), 
(2, 101, '2023-01-15', 50.00, 'Withdrawal'), 
(3, 102, '2023-01-12', 75.00, 'Payment'), 
(4, 102, '2023-01-15', 25.00, 'Deposit'), 
(5, 103, '2023-01-08', 150.00, 'Transfer'), 
(6, 103, '2023-01-15', 100.00, 'Withdrawal');",SELECT * FROM BankingTransactions WHERE TransactionDate = '2023-01-15';,"This query selects all columns and rows from the 'BankingTransactions' table where the 'TransactionDate' is '2023-01-15'. This provides a list of all banking transactions that occurred on January 15th, 2023."
724,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the top 10 companies in terms of market capitalization in the technology sector?,"CREATE TABLE stocks (id INT PRIMARY KEY, company VARCHAR(255), sector VARCHAR(255), market_cap DECIMAL(15,2));
INSERT INTO stocks (id, company, sector, market_cap) VALUES (1, 'Apple', 'Technology', 2700.00), (2, 'Microsoft', 'Technology', 1800.00), (3, 'Amazon', 'Technology', 1750.00), (4, 'Alphabet', 'Technology', 1400.00), (5, 'Tesla', 'Technology', 1200.00), (6, 'Meta Platforms', 'Technology', 800.00), (7, 'NVIDIA', 'Technology', 750.00), (8, 'TSMC', 'Technology', 650.00), (9, 'Samsung', 'Technology', 600.00), (10, 'Tencent', 'Technology', 550.00);","SELECT company, market_cap FROM stocks WHERE sector = 'Technology' ORDER BY market_cap DESC LIMIT 10;",This query selects the company and market capitalization from the 'stocks' table where the sector is 'Technology'. It then orders the results by market capitalization in descending order and limits the output to the top 10 rows.
725,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the top five suppliers based on the total quantity of materials supplied in the last quarter of 2022, along with the percentage of defective materials supplied by each supplier.","CREATE TABLE supplier (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255) NOT NULL, country VARCHAR(255));
CREATE TABLE material (material_id INT PRIMARY KEY, material_name VARCHAR(255) NOT NULL, supplier_id INT REFERENCES supplier(supplier_id));
CREATE TABLE purchase_order (purchase_order_id INT PRIMARY KEY, supplier_id INT REFERENCES supplier(supplier_id), material_id INT REFERENCES material(material_id), quantity INT NOT NULL, date DATE NOT NULL);
CREATE TABLE defect (defect_id INT PRIMARY KEY, material_id INT REFERENCES material(material_id), quantity INT NOT NULL, date DATE NOT NULL);","SELECT s.supplier_name, SUM(po.quantity) AS total_quantity, (SELECT COUNT(*) FROM defect d WHERE d.material_id IN (SELECT m.material_id FROM material m WHERE m.supplier_id = s.supplier_id)) AS total_defects, ROUND((100.0 * total_defects) / total_quantity, 2) AS percentage_defective
FROM supplier s
JOIN purchase_order po ON s.supplier_id = po.supplier_id
WHERE po.date BETWEEN '2022-10-01' AND '2022-12-31'
GROUP BY s.supplier_name
ORDER BY total_quantity DESC
LIMIT 5;","This SQL query first calculates the total quantity of materials supplied by each supplier in the last quarter of 2022. It then calculates the total number of defective materials supplied by each supplier. Finally, it calculates the percentage of defective materials supplied by each supplier and displays the results in a table sorted by total quantity in descending order, showing only the top five suppliers."
726,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find all purchase orders that were placed in the month of January 2023 but have not yet been delivered.,"CREATE TABLE purchase_order (purchase_order_id INT PRIMARY KEY, supplier_id INT REFERENCES supplier(supplier_id), material_id INT REFERENCES material(material_id), quantity INT NOT NULL, date DATE NOT NULL);
CREATE TABLE delivery (delivery_id INT PRIMARY KEY, purchase_order_id INT REFERENCES purchase_order(purchase_order_id), date DATE NOT NULL);",SELECT * FROM purchase_order WHERE date BETWEEN '2023-01-01' AND '2023-01-31' EXCEPT SELECT po.* FROM purchase_order po JOIN delivery d ON po.purchase_order_id = d.purchase_order_id WHERE d.date BETWEEN '2023-01-01' AND '2023-01-31';,"This SQL query first selects all purchase orders that were placed in the month of January 2023. It then selects all purchase orders that have been delivered in the month of January 2023. Finally, it displays the difference between these two sets of purchase orders, resulting in a list of purchase orders that were placed in January 2023 but have not yet been delivered."
727,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top three materials with the highest defect rates in the month of February 2023.,"CREATE TABLE material (material_id INT PRIMARY KEY, material_name VARCHAR(255) NOT NULL, supplier_id INT REFERENCES supplier(supplier_id));
CREATE TABLE defect (defect_id INT PRIMARY KEY, material_id INT REFERENCES material(material_id), quantity INT NOT NULL, date DATE NOT NULL);","SELECT m.material_name, SUM(d.quantity) AS total_defects, (100.0 * SUM(d.quantity)) / COUNT(DISTINCT po.purchase_order_id) AS defect_rate
FROM material m
JOIN defect d ON m.material_id = d.material_id
JOIN purchase_order po ON m.material_id = po.material_id
WHERE d.date BETWEEN '2023-02-01' AND '2023-02-28'
GROUP BY m.material_name
ORDER BY defect_rate DESC
LIMIT 3;","This SQL query first calculates the total number of defects for each material in the month of February 2023. It then calculates the defect rate for each material by dividing the total number of defects by the total number of purchase orders for that material. Finally, it displays the top three materials with the highest defect rates."
728,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the average lead time for each supplier in the month of March 2023.,"CREATE TABLE supplier (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255) NOT NULL, country VARCHAR(255));
CREATE TABLE purchase_order (purchase_order_id INT PRIMARY KEY, supplier_id INT REFERENCES supplier(supplier_id), material_id INT REFERENCES material(material_id), quantity INT NOT NULL, date DATE NOT NULL);
CREATE TABLE delivery (delivery_id INT PRIMARY KEY, purchase_order_id INT REFERENCES purchase_order(purchase_order_id), date DATE NOT NULL);","SELECT s.supplier_name, AVG(DATEDIFF(d.date, po.date)) AS average_lead_time
FROM supplier s
JOIN purchase_order po ON s.supplier_id = po.supplier_id
JOIN delivery d ON po.purchase_order_id = d.purchase_order_id
WHERE po.date BETWEEN '2023-03-01' AND '2023-03-31'
GROUP BY s.supplier_name
ORDER BY average_lead_time ASC;","This SQL query first calculates the lead time for each purchase order by subtracting the purchase order date from the delivery date. It then calculates the average lead time for each supplier by averaging the lead times for all purchase orders placed with that supplier in the month of March 2023. Finally, it displays the results in a table sorted by average lead time in ascending order."
729,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Create a view that shows the total quantity of each material that was produced in each month of 2022, along with the percentage of defective materials produced in each month.","CREATE TABLE production (production_id INT PRIMARY KEY, material_id INT REFERENCES material(material_id), quantity INT NOT NULL, date DATE NOT NULL);
CREATE TABLE defect (defect_id INT PRIMARY KEY, material_id INT REFERENCES material(material_id), quantity INT NOT NULL, date DATE NOT NULL);","CREATE VIEW production_summary AS
SELECT m.material_name, DATE_TRUNC('month', p.date) AS production_month, SUM(p.quantity) AS total_quantity, (100.0 * SUM(d.quantity)) / SUM(p.quantity) AS percentage_defective
FROM production p
JOIN material m ON p.material_id = m.material_id
LEFT JOIN defect d ON p.material_id = d.material_id AND p.date = d.date
GROUP BY m.material_name, production_month
ORDER BY production_month, m.material_name;","This SQL query creates a view called `production_summary` that shows the total quantity of each material that was produced in each month of 2022, along with the percentage of defective materials produced in each month. The view joins the `production` table with the `material` table to get the material name and the `defect` table to get the quantity of defective materials. It then groups the results by material name and production month and calculates the total quantity and percentage of defective materials for each group."
730,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 most downloaded mobile apps in the United States?,"CREATE TABLE mobile_apps ( app_id INT PRIMARY KEY, app_name VARCHAR(255), downloads INT, country VARCHAR(255) );
INSERT INTO mobile_apps (app_id, app_name, downloads, country) VALUES (1, 'TikTok', 100000000, 'United States'), (2, 'Instagram', 75000000, 'United States'), (3, 'Facebook', 50000000, 'United States'), (4, 'Snapchat', 25000000, 'United States'), (5, 'YouTube', 20000000, 'United States');","SELECT app_name, downloads FROM mobile_apps WHERE country = 'United States' ORDER BY downloads DESC LIMIT 5;",This SQL query selects the app_name and downloads columns from the mobile_apps table where the country column is equal to 'United States'. It then orders the results by the downloads column in descending order and limits the output to the top 5 rows.
731,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What are the top 3 selling video games in the United States for the month of January 2023?,"CREATE TABLE video_games ( game_id INT PRIMARY KEY, game_name VARCHAR(255), sales INT, country VARCHAR(255), month INT, year INT );
INSERT INTO video_games (game_id, game_name, sales, country, month, year) VALUES (1, 'Call of Duty: Modern Warfare II', 5000000, 'United States', 1, 2023), (2, 'FIFA 23', 4000000, 'United States', 1, 2023), (3, 'Madden NFL 23', 3000000, 'United States', 1, 2023), (4, 'Elden Ring', 2000000, 'United States', 1, 2023), (5, 'God of War Ragnarok', 1000000, 'United States', 1, 2023);","SELECT game_name, sales FROM video_games WHERE country = 'United States' AND month = 1 AND year = 2023 ORDER BY sales DESC LIMIT 3;","This SQL query selects the game_name and sales columns from the video_games table where the country column is equal to 'United States', the month column is equal to 1, and the year column is equal to 2023. It then orders the results by the sales column in descending order and limits the output to the top 3 rows."
732,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What are the top 10 most visited websites in the world?,"CREATE TABLE websites ( website_id INT PRIMARY KEY, website_name VARCHAR(255), visits INT );
INSERT INTO websites (website_id, website_name, visits) VALUES (1, 'Google', 1000000000), (2, 'YouTube', 750000000), (3, 'Facebook', 500000000), (4, 'Twitter', 250000000), (5, 'Instagram', 200000000), (6, 'Reddit', 150000000), (7, 'Wikipedia', 100000000), (8, 'Amazon', 75000000), (9, 'Netflix', 50000000), (10, 'Apple', 250000000);","SELECT website_name, visits FROM websites ORDER BY visits DESC LIMIT 10;",This SQL query selects the website_name and visits columns from the websites table. It then orders the results by the visits column in descending order and limits the output to the top 10 rows.
733,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 most popular social media platforms in the world?,"CREATE TABLE social_media_platforms ( platform_id INT PRIMARY KEY, platform_name VARCHAR(255), users INT );
INSERT INTO social_media_platforms (platform_id, platform_name, users) VALUES (1, 'Facebook', 2910000000), (2, 'YouTube', 2560000000), (3, 'WhatsApp', 2000000000), (4, 'Instagram', 1440000000), (5, 'WeChat', 1260000000);","SELECT platform_name, users FROM social_media_platforms ORDER BY users DESC LIMIT 5;",This SQL query selects the platform_name and users columns from the social_media_platforms table. It then orders the results by the users column in descending order and limits the output to the top 5 rows.
734,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What are the top 3 most downloaded mobile apps in China?,"CREATE TABLE mobile_apps ( app_id INT PRIMARY KEY, app_name VARCHAR(255), downloads INT, country VARCHAR(255) );
INSERT INTO mobile_apps (app_id, app_name, downloads, country) VALUES (1, 'TikTok', 100000000, 'China'), (2, 'WeChat', 75000000, 'China'), (3, 'QQ', 50000000, 'China'), (4, 'Alipay', 25000000, 'China'), (5, 'Baidu', 20000000, 'China');","SELECT app_name, downloads FROM mobile_apps WHERE country = 'China' ORDER BY downloads DESC LIMIT 3;",This SQL query selects the app_name and downloads columns from the mobile_apps table where the country column is equal to 'China'. It then orders the results by the downloads column in descending order and limits the output to the top 3 rows.
735,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the breakdown of artists by gender who have had their works exhibited in the museum during the past five years?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, gender VARCHAR(10) NOT NULL, nationality VARCHAR(255));
CREATE TABLE Exhibitions (exhibition_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), exhibition_date DATE NOT NULL, title VARCHAR(255) NOT NULL);","WITH ArtistExhibitions AS (
    SELECT
        Artists.artist_id,
        Artists.artist_name,
        Artists.gender,
        Exhibitions.exhibition_date
    FROM
        Artists
    JOIN
        Exhibitions ON Artists.artist_id = Exhibitions.artist_id
    WHERE
        Exhibitions.exhibition_date >= DATE('now', '-5 years')
)
SELECT
    ArtistExhibitions.gender,
    COUNT(DISTINCT ArtistExhibitions.artist_id) AS artist_count
FROM
    ArtistExhibitions
GROUP BY
    ArtistExhibitions.gender
ORDER BY
    artist_count DESC;","This query retrieves the count of distinct artists by gender who have had their works exhibited in the museum during the past five years. It does this by:

1. **Creating a common table expression (CTE) called `ArtistExhibitions`:**
   - This CTE joins the `Artists` and `Exhibitions` tables on the `artist_id` column.
   - It filters the exhibitions to include only those that occurred in the past five years.
2. **Selecting the gender and count of distinct artists:**
   - The query groups the results by gender and counts the number of distinct artists in each group.
   - The results are ordered by the artist count in descending order."
736,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 countries in terms of the number of artists represented in the museum's collection?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, gender VARCHAR(10) NOT NULL, nationality VARCHAR(255));
CREATE TABLE Collection (artwork_id INT PRIMARY KEY, artist_id INT REFERENCES Artists(artist_id), acquisition_date DATE NOT NULL);","SELECT
    Artists.nationality,
    COUNT(DISTINCT Artists.artist_id) AS artist_count
FROM
    Artists
JOIN
    Collection ON Artists.artist_id = Collection.artist_id
GROUP BY
    Artists.nationality
ORDER BY
    artist_count DESC
LIMIT 5;","This query retrieves the top 5 countries in terms of the number of artists represented in the museum's collection. It does this by:

1. **Joining the `Artists` and `Collection` tables on the `artist_id` column.**
2. **Grouping the results by the artists' nationality and counting the number of distinct artists in each group.**
3. **Ordering the results by the artist count in descending order.**
4. **Limiting the results to the top 5 countries.**"
737,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","What are the top 10 most popular works of art in the museum's collection, based on the number of times they have been viewed online?","CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, title VARCHAR(255) NOT NULL, artist_id INT REFERENCES Artists(artist_id), creation_date DATE NOT NULL);
CREATE TABLE OnlineViews (artwork_id INT REFERENCES Artworks(artwork_id), view_date DATE NOT NULL);","SELECT
    Artworks.title,
    COUNT(*) AS view_count
FROM
    Artworks
JOIN
    OnlineViews ON Artworks.artwork_id = OnlineViews.artwork_id
GROUP BY
    Artworks.title
ORDER BY
    view_count DESC
LIMIT 10;","This query retrieves the top 10 most popular works of art in the museum's collection, based on the number of times they have been viewed online. It does this by:

1. **Joining the `Artworks` and `OnlineViews` tables on the `artwork_id` column.**
2. **Grouping the results by the artwork title and counting the number of views for each artwork.**
3. **Ordering the results by the view count in descending order.**
4. **Limiting the results to the top 10 artworks.**"
738,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the average price of artworks by female artists compared to male artists?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, gender VARCHAR(10) NOT NULL, nationality VARCHAR(255));
CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, title VARCHAR(255) NOT NULL, artist_id INT REFERENCES Artists(artist_id), creation_date DATE NOT NULL, medium VARCHAR(255), price DECIMAL(10,2));","SELECT
    AVG(CASE WHEN Artists.gender = 'Female' THEN Artworks.price ELSE NULL END) AS female_average_price,
    AVG(CASE WHEN Artists.gender = 'Male' THEN Artworks.price ELSE NULL END) AS male_average_price
FROM
    Artworks
JOIN
    Artists ON Artworks.artist_id = Artists.artist_id;","This query calculates the average price of artworks by female artists compared to male artists. It does this by:

1. **Joining the `Artworks` and `Artists` tables on the `artist_id` column.**
2. **Using a `CASE` expression to calculate the average price for each gender:**
   - If the artist's gender is 'Female', the `Artworks.price` is included in the calculation.
   - If the artist's gender is 'Male', `NULL` is included in the calculation.
3. **Using the `AVG()` function to calculate the average price for each gender group.**"
739,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",What is the distribution of art mediums used by artists from different regions of the world?,"CREATE TABLE Artists (artist_id INT PRIMARY KEY, artist_name VARCHAR(255) NOT NULL, gender VARCHAR(10) NOT NULL, nationality VARCHAR(255), region VARCHAR(255));
CREATE TABLE Artworks (artwork_id INT PRIMARY KEY, title VARCHAR(255) NOT NULL, artist_id INT REFERENCES Artists(artist_id), creation_date DATE NOT NULL, medium VARCHAR(255), price DECIMAL(10,2));","SELECT
    Artists.region,
    Artworks.medium,
    COUNT(*) AS artwork_count
FROM
    Artworks
JOIN
    Artists ON Artworks.artist_id = Artists.artist_id
GROUP BY
    Artists.region,
    Artworks.medium
ORDER BY
    Artists.region,
    artwork_count DESC;","This query retrieves the distribution of art mediums used by artists from different regions of the world. It does this by:

1. **Joining the `Artworks` and `Artists` tables on the `artist_id` column.**
2. **Grouping the results by the artist's region and the artwork's medium.**
3. **Counting the number of artworks for each region-medium combination.**
4. **Ordering the results by region and then by the artwork count in descending order.**"
740,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What is the average GPA of students in each state?,"CREATE TABLE Students (student_id INT PRIMARY KEY, name VARCHAR(255), state VARCHAR(2), gpa FLOAT); 
INSERT INTO Students (student_id, name, state, gpa) VALUES (1, 'Alice', 'CA', 3.8), (2, 'Bob', 'TX', 3.5), (3, 'Charlie', 'NY', 4.0), (4, 'David', 'CA', 3.7), (5, 'Emily', 'FL', 3.2);","SELECT state, AVG(gpa) FROM Students GROUP BY state","This SQL query first groups the students by their state using the GROUP BY clause. Then, it calculates the average GPA for each state using the AVG function. The result is a table that shows the average GPA for students in each state."
741,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Which courses have the highest average enrollment?,"CREATE TABLE Courses (course_id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255), enrollment INT); 
INSERT INTO Courses (course_id, name, department, enrollment) VALUES (1, 'Introduction to Computer Science', 'Computer Science', 150), (2, 'Calculus I', 'Mathematics', 120), (3, 'Introduction to Biology', 'Biology', 100), (4, 'Marketing 101', 'Business', 180), (5, 'Introduction to Psychology', 'Psychology', 130);","SELECT name, AVG(enrollment) FROM Courses GROUP BY name ORDER BY AVG(enrollment) DESC LIMIT 5","This SQL query first calculates the average enrollment for each course using the AVG function. Then, it groups the courses by their name using the GROUP BY clause. Finally, it orders the results in descending order of average enrollment and limits the output to the top 5 courses with the highest average enrollment."
742,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",List all students who have taken a course in the Computer Science department.,"CREATE TABLE Students (student_id INT PRIMARY KEY, name VARCHAR(255)); 
CREATE TABLE Courses (course_id INT PRIMARY KEY, name VARCHAR(255), department VARCHAR(255)); 
CREATE TABLE Enrollments (student_id INT, course_id INT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); 
INSERT INTO Students (student_id, name) VALUES (1, 'Alice'), (2, 'Bob'), (3, 'Charlie'); 
INSERT INTO Courses (course_id, name, department) VALUES (1, 'Introduction to Computer Science', 'Computer Science'), (2, 'Calculus I', 'Mathematics'), (3, 'Introduction to Biology', 'Biology'); 
INSERT INTO Enrollments (student_id, course_id) VALUES (1, 1), (2, 2), (3, 1);",SELECT s.name FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id WHERE c.department = 'Computer Science',"This SQL query uses a series of joins to connect the Students, Enrollments, and Courses tables. It first joins the Students and Enrollments tables on the student_id column. Then, it joins the Enrollments and Courses tables on the course_id column. Finally, it filters the results to only include students who have taken a course in the Computer Science department."
743,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Show the curriculum for each grade level, including the courses offered and the number of students enrolled in each course.","CREATE TABLE Students (student_id INT PRIMARY KEY, name VARCHAR(255), grade INT); 
CREATE TABLE Courses (course_id INT PRIMARY KEY, name VARCHAR(255), grade INT); 
CREATE TABLE Enrollments (student_id INT, course_id INT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); 
INSERT INTO Students (student_id, name, grade) VALUES (1, 'Alice', 9), (2, 'Bob', 10), (3, 'Charlie', 11), (4, 'David', 9), (5, 'Emily', 10); 
INSERT INTO Courses (course_id, name, grade) VALUES (1, 'Math', 9), (2, 'Science', 9), (3, 'English', 10), (4, 'History', 10), (5, 'Algebra', 11), (6, 'Geometry', 11); 
INSERT INTO Enrollments (student_id, course_id) VALUES (1, 1), (1, 2), (2, 3), (2, 4), (3, 5), (3, 6), (4, 1), (4, 2), (5, 3), (5, 4);","SELECT c.name AS Course, s.grade AS Grade, COUNT(*) AS Students_Enrolled FROM Students s JOIN Enrollments e ON s.student_id = e.student_id JOIN Courses c ON e.course_id = c.course_id GROUP BY c.name, s.grade ORDER BY s.grade, c.name","This SQL query uses a series of joins to connect the Students, Enrollments, and Courses tables. It first joins the Students and Enrollments tables on the student_id column. Then, it joins the Enrollments and Courses tables on the course_id column. It then groups the results by course name and grade level and counts the number of students enrolled in each course. Finally, it orders the results by grade level and then by course name."
744,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Which teachers have the highest average student evaluation scores?,"CREATE TABLE Teachers (teacher_id INT PRIMARY KEY, name VARCHAR(255)); 
CREATE TABLE Courses (course_id INT PRIMARY KEY, name VARCHAR(255), teacher_id INT, FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id)); 
CREATE TABLE Evaluations (student_id INT, course_id INT, score INT, FOREIGN KEY (student_id) REFERENCES Students(student_id), FOREIGN KEY (course_id) REFERENCES Courses(course_id)); 
INSERT INTO Teachers (teacher_id, name) VALUES (1, 'Mr. Smith'), (2, 'Ms. Johnson'), (3, 'Mr. Lee'); 
INSERT INTO Courses (course_id, name, teacher_id) VALUES (1, 'Math', 1), (2, 'Science', 2), (3, 'English', 3); 
INSERT INTO Evaluations (student_id, course_id, score) VALUES (1, 1, 4), (1, 2, 5), (2, 1, 3), (2, 3, 4), (3, 2, 5), (3, 3, 4);","SELECT t.name, AVG(e.score) AS Average_Score FROM Teachers t JOIN Courses c ON t.teacher_id = c.teacher_id JOIN Evaluations e ON c.course_id = e.course_id GROUP BY t.name ORDER BY AVG(e.score) DESC","This SQL query uses a series of joins to connect the Teachers, Courses, and Evaluations tables. It first joins the Teachers and Courses tables on the teacher_id column. Then, it joins the Courses and Evaluations tables on the course_id column. It then groups the results by teacher name and calculates the average evaluation score for each teacher. Finally, it orders the results in descending order of average evaluation score."
745,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Rank customers by total number of orders placed in descending order, then show the customer ID, name, total number of orders, and the rank of each customer.","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE NOT NULL, total_amount DECIMAL(10,2));
INSERT INTO customers (customer_id, customer_name, email, phone_number) VALUES
(1, 'Alice Smith', 'alice.smith@emailworld.com', '555-123-4567'),
(2, 'Bob Johnson', 'bob.johnson@emailworld.com', '555-234-5678'),
(3, 'Charlie Williams', 'charlie.williams@emailworld.com', '555-345-6789'),
(4, 'Diana Brown', 'diana.brown@emailworld.com', '555-456-7890'),
(5, 'Emily Jones', 'emily.jones@emailworld.com', '555-567-8901');
INSERT INTO orders (order_id, customer_id, order_date, total_amount) VALUES
(1, 1, '2023-01-01', 100.00),
(2, 2, '2023-01-02', 50.00),
(3, 3, '2023-01-03', 75.00),
(4, 1, '2023-01-04', 150.00),
(5, 2, '2023-01-05', 25.00),
(6, 4, '2023-01-06', 125.00),
(7, 5, '2023-01-07', 200.00),
(8, 3, '2023-01-08', 100.00),
(9, 1, '2023-01-09', 75.00),
(10, 2, '2023-01-10', 50.00);","WITH customer_order_counts AS (
  SELECT customer_id, COUNT(*) AS total_orders
  FROM orders
  GROUP BY customer_id
)
SELECT c.customer_id, c.customer_name, coc.total_orders, ROW_NUMBER() OVER (ORDER BY coc.total_orders DESC) AS customer_rank
FROM customers c
JOIN customer_order_counts coc ON c.customer_id = coc.customer_id;","1. Create a common table expression (CTE) called `customer_order_counts` that counts the total number of orders placed by each customer.
2. Join the `customers` table with the `customer_order_counts` CTE using the `customer_id` column.
3. Select the `customer_id`, `customer_name`, `total_orders`, and the rank of each customer based on the total number of orders (in descending order) using the `ROW_NUMBER()` window function.
4. The `customer_rank` column shows the rank of each customer, with the customer with the most orders having a rank of 1."
746,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","What is the monthly average inventory for each product, considering both current and past stock levels?","CREATE TABLE `inventory` (
  `product_id` INT,
  `date` DATE,
  `stock_level` INT
);
INSERT INTO `inventory` (`product_id`, `date`, `stock_level`) VALUES
(1, '2023-01-01', 100),
(1, '2023-01-02', 120),
(1, '2023-01-03', 110),
(1, '2023-02-01', 90),
(1, '2023-02-02', 80),
(1, '2023-02-03', 100),
(2, '2023-01-01', 50),
(2, '2023-01-02', 60),
(2, '2023-01-03', 70),
(2, '2023-02-01', 40),
(2, '2023-02-02', 50),
(2, '2023-02-03', 60);

CREATE TABLE `products` (
  `product_id` INT,
  `product_name` VARCHAR(255),
  `category` VARCHAR(255)
);
INSERT INTO `products` (`product_id`, `product_name`, `category`) VALUES
(1, 'Shirt', 'Apparel'),
(2, 'Laptop', 'Electronics');","SELECT
  p.`product_name`,
  AVG(i.`stock_level`) AS `average_inventory`
FROM
  `inventory` AS i
JOIN
  `products` AS p ON i.`product_id` = p.`product_id`
WHERE
  i.`date` BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()
GROUP BY
  p.`product_name`
ORDER BY
  p.`product_name` ASC;","1. The query starts by joining the 'inventory' and 'products' tables on the 'product_id' column.
2. It then filters the inventory data to include only records from the past month (between the current date and one month ago).
3. The query then groups the data by product name and calculates the average inventory level for each product using the AVG() function.
4. Finally, the results are ordered by product name in ascending order."
747,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","For each customer, what was their total spending in the last quarter, broken down by product category?","CREATE TABLE `orders` (
  `order_id` INT,
  `customer_id` INT,
  `order_date` DATE,
  `product_id` INT,
  `quantity` INT,
  `price` DECIMAL(10, 2)
);
INSERT INTO `orders` (`order_id`, `customer_id`, `order_date`, `product_id`, `quantity`, `price`) VALUES
(1, 1, '2023-01-05', 1, 2, 20.00),
(2, 2, '2023-01-10', 2, 1, 500.00),
(3, 1, '2023-01-15', 3, 3, 15.00),
(4, 2, '2023-02-05', 1, 1, 20.00),
(5, 1, '2023-02-10', 2, 2, 1000.00),
(6, 2, '2023-02-15', 3, 1, 15.00),
(7, 1, '2023-03-05', 1, 4, 40.00),
(8, 2, '2023-03-10', 2, 3, 1500.00),
(9, 1, '2023-03-15', 3, 2, 30.00);

CREATE TABLE `products` (
  `product_id` INT,
  `product_name` VARCHAR(255),
  `category` VARCHAR(255)
);
INSERT INTO `products` (`product_id`, `product_name`, `category`) VALUES
(1, 'Shirt', 'Apparel'),
(2, 'Laptop', 'Electronics'),
(3, 'Coffee', 'Food');

CREATE TABLE `customers` (
  `customer_id` INT,
  `customer_name` VARCHAR(255)
);
INSERT INTO `customers` (`customer_id`, `customer_name`) VALUES
(1, 'Alice'),
(2, 'Bob');","SELECT
  c.`customer_name`,
  p.`category`,
  SUM(o.`quantity` * o.`price`) AS `total_spending`
FROM
  `orders` AS o
JOIN
  `products` AS p ON o.`product_id` = p.`product_id`
JOIN
  `customers` AS c ON o.`customer_id` = c.`customer_id`
WHERE
  o.`order_date` BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE()
GROUP BY
  c.`customer_name`,
  p.`category`
ORDER BY
  c.`customer_name` ASC,
  p.`category` ASC;","1. The query starts by joining the 'orders', 'products', and 'customers' tables on the relevant columns.
2. It then filters the order data to include only records from the last quarter (between the current date and three months ago).
3. The query then groups the data by customer name and product category and calculates the total spending for each customer in each category using the SUM() function.
4. Finally, the results are ordered by customer name and product category in ascending order."
748,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects",How can I identify the top 5 customers who have spent the most on electronics in the past 3 months?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone_number VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code VARCHAR(255), country VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, total_amount DECIMAL(10,2), payment_method VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), stock_quantity INT);
CREATE TABLE order_items (order_id INT REFERENCES orders(order_id), product_id INT REFERENCES products(product_id), quantity INT, price DECIMAL(10,2));
INSERT INTO customers (customer_id, name, email, phone_number, address, city, state, zip_code, country) VALUES
(1, 'John Smith', 'john.smith@emailworld.com', '123-456-7890', '123 Main St', 'Anytown', 'CA', '91234', 'USA'),
(2, 'Alice Johnson', 'alice.johnson@emailworld.com', '456-789-0123', '456 Oak Ave', 'Anytown', 'CA', '91234', 'USA'),
(3, 'Bob Williams', 'bob.williams@emailworld.com', '789-012-3456', '789 Pine St', 'Anytown', 'CA', '91234', 'USA');
INSERT INTO orders (order_id, customer_id, order_date, total_amount, payment_method) VALUES
(1, 1, '2023-01-01', 100.00, 'Credit Card'),
(2, 2, '2023-01-05', 50.00, 'Cash'),
(3, 3, '2023-01-10', 75.00, 'Debit Card'),
(4, 1, '2023-02-01', 150.00, 'Credit Card'),
(5, 2, '2023-02-05', 125.00, 'Cash'),
(6, 3, '2023-02-10', 200.00, 'Debit Card'),
(7, 1, '2023-03-01', 250.00, 'Credit Card'),
(8, 2, '2023-03-05', 175.00, 'Cash'),
(9, 3, '2023-03-10', 300.00, 'Debit Card');
INSERT INTO products (product_id, name, category, price, stock_quantity) VALUES
(1, 'Laptop', 'Electronics', 1000.00, 10),
(2, 'Tablet', 'Electronics', 500.00, 20),
(3, 'Smartphone', 'Electronics', 750.00, 30),
(4, 'Shirt', 'Clothing', 25.00, 40),
(5, 'Jeans', 'Clothing', 50.00, 50),
(6, 'Shoes', 'Footwear', 75.00, 60);
INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 1, 1000.00),
(2, 2, 1, 500.00),
(3, 3, 1, 750.00),
(4, 4, 2, 50.00),
(5, 5, 1, 50.00),
(6, 6, 3, 225.00),
(7, 1, 2, 2000.00),
(8, 2, 1, 500.00),
(9, 3, 2, 1500.00);","WITH ElectronicsOrders AS
SELECT
    o.customer_id,
    c.name AS customer_name,
    SUM(oi.quantity * oi.price) AS total_spent
FROM
    orders AS o
JOIN
    order_items AS oi ON o.order_id = oi.order_id
JOIN
    products AS p ON oi.product_id = p.product_id
JOIN
    customers AS c ON o.customer_id = c.customer_id
WHERE
    p.category = 'Electronics'
    AND o.order_date >= DATE('now', '-3 months')
GROUP BY
    o.customer_id, c.name
ORDER BY
    total_spent DESC
SELECT
    customer_name,
    total_spent
FROM
    ElectronicsOrders
LIMIT 5;","This query identifies the top 5 customers who have spent the most on electronics in the past 3 months. It uses the following steps:

1. **Create a CTE (Common Table Expression) called `ElectronicsOrders`:** This CTE selects the customer ID, customer name, and total amount spent on electronics for each order in the past 3 months.
2. **Join the `orders`, `order_items`, `products`, and `customers` tables:** This step links the relevant tables to retrieve the necessary data.
3. **Filter the data for electronics products and orders within the past 3 months:** This ensures that only relevant data is included in the analysis.
4. **Group the data by customer ID and customer name:** This aggregates the total amount spent by each customer.
5. **Order the data by total spent in descending order:** This ranks the customers based on their spending.
6. **Select the customer name and total spent:** This retrieves the final results for the top 5 customers.
7. **Limit the results to 5:** This displays only the top 5 customers.

The query effectively leverages window functions to efficiently calculate the total spent for each customer within the specified time frame and category."
749,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects",Create a new schema called `product_sales`,CREATE SCHEMA product_sales;,CREATE SCHEMA product_sales;,This query creates a new schema called `product_sales`.
750,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,How many trucks in the fleet have exceeded their scheduled maintenance intervals?,"CREATE TABLE trucks (truck_id INT PRIMARY KEY, model VARCHAR(255), year INT, mileage INT, last_maintenance_date DATE); INSERT INTO trucks VALUES (1, 'Volvo VNL 780', 2020, 250000, '2023-03-15'), (2, 'Peterbilt 579', 2021, 150000, '2023-05-10'), (3, 'Freightliner Cascadia', 2019, 300000, '2023-04-20'), (4, 'International LT', 2022, 100000, '2023-06-05'), (5, 'Kenworth T680', 2020, 200000, '2023-03-25');

CREATE TABLE maintenance_schedule (truck_id INT, scheduled_interval INT, PRIMARY KEY (truck_id), FOREIGN KEY (truck_id) REFERENCES trucks(truck_id));
INSERT INTO maintenance_schedule VALUES (1, 250000), (2, 200000), (3, 300000), (4, 150000), (5, 225000);",SELECT COUNT(*) FROM trucks AS t JOIN maintenance_schedule AS ms ON t.truck_id = ms.truck_id WHERE t.mileage > ms.scheduled_interval;,"This query joins the 'trucks' and 'maintenance_schedule' tables on the 'truck_id' column. It then selects the count of trucks where the mileage is greater than the scheduled maintenance interval, indicating trucks that have exceeded their scheduled maintenance."
751,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,What is the average fuel efficiency for trucks manufactured in 2020?,"CREATE TABLE trucks (truck_id INT PRIMARY KEY, model VARCHAR(255), year INT, mileage INT, fuel_efficiency FLOAT); INSERT INTO trucks VALUES (1, 'Volvo VNL 780', 2020, 250000, 7.5), (2, 'Peterbilt 579', 2021, 150000, 8.2), (3, 'Freightliner Cascadia', 2019, 300000, 7.8), (4, 'International LT', 2022, 100000, 8.5), (5, 'Kenworth T680', 2020, 200000, 7.9);",SELECT AVG(fuel_efficiency) FROM trucks WHERE year = 2020;,This query calculates the average fuel efficiency for trucks manufactured in 2020 by selecting the average of the 'fuel_efficiency' column for trucks where the 'year' column is 2020.
752,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Which customers have placed orders in the last month that have not yet been shipped?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255)); INSERT INTO customers VALUES (1, 'Acme Inc.', 'USA'), (2, 'Global Corp.', 'Canada'), (3, 'Bright Ideas Ltd.', 'UK'), (4, 'Tech Solutions', 'India'), (5, 'Green Energy', 'Australia');

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, shipped_date DATE, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));
INSERT INTO orders VALUES (1, 1, '2023-06-15', '2023-06-20'), (2, 2, '2023-06-20', '2023-06-25'), (3, 3, '2023-06-25', '2023-06-30'), (4, 4, '2023-06-30', NULL), (5, 5, '2023-07-05', NULL);","SELECT c.name FROM customers AS c JOIN orders AS o ON c.customer_id = o.customer_id WHERE o.shipped_date IS NULL AND o.order_date >= DATE('now', '-1 month');","This query joins the 'customers' and 'orders' tables on the 'customer_id' column. It then selects the names of customers who have placed orders in the last month (using the 'now()' function to get the current date and subtracting 1 month) and where the 'shipped_date' is NULL, indicating orders that have not yet been shipped."
753,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,What is the total revenue generated from orders shipped to customers in Europe?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255)); INSERT INTO customers VALUES (1, 'Acme Inc.', 'USA'), (2, 'Global Corp.', 'Canada'), (3, 'Bright Ideas Ltd.', 'UK'), (4, 'Tech Solutions', 'India'), (5, 'Green Energy', 'Australia');

CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, shipped_date DATE, amount FLOAT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));
INSERT INTO orders VALUES (1, 1, '2023-06-15', '2023-06-20', 1000), (2, 2, '2023-06-20', '2023-06-25', 1500), (3, 3, '2023-06-25', '2023-06-30', 2000), (4, 4, '2023-06-30', NULL, 2500), (5, 5, '2023-07-05', NULL, 3000);","SELECT SUM(o.amount) FROM orders AS o JOIN customers AS c ON o.customer_id = c.customer_id WHERE c.country IN ('UK', 'France', 'Germany', 'Italy', 'Spain') AND o.shipped_date IS NOT NULL;","This query joins the 'orders' and 'customers' tables on the 'customer_id' column. It then calculates the sum of the 'amount' column for orders where the customer's 'country' is in the list of European countries and the 'shipped_date' is not NULL, indicating orders that have been shipped to customers in Europe."
754,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,What are the top 3 most frequently ordered products in the last quarter?,"CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255)); INSERT INTO products VALUES (1, 'Engine Oil', 'Maintenance'), (2, 'Tires', 'Maintenance'), (3, 'Brake Pads', 'Maintenance'), (4, 'Headlights', 'Parts'), (5, 'Windshield Wipers', 'Parts');

CREATE TABLE order_items (order_id INT, product_id INT, quantity INT, PRIMARY KEY (order_id, product_id), FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));
INSERT INTO order_items VALUES (1, 1, 10), (1, 2, 5), (2, 3, 8), (2, 4, 2), (3, 1, 15), (3, 5, 10), (4, 2, 6), (4, 4, 4), (5, 3, 12), (5, 5, 8);","SELECT p.name, SUM(oi.quantity) AS total_quantity FROM products AS p JOIN order_items AS oi ON p.product_id = oi.product_id JOIN orders AS o ON oi.order_id = o.order_id WHERE o.order_date >= DATE('now', '-3 months') GROUP BY p.name ORDER BY total_quantity DESC LIMIT 3;","This query joins the 'products', 'order_items', and 'orders' tables. It then calculates the sum of the 'quantity' for each product in the 'order_items' table, filtered to include orders placed in the last 3 months. The results are grouped by product name and sorted in descending order of total quantity, and the top 3 products are selected, providing the most frequently ordered products in the last quarter."
755,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What schools in Chicago have the highest percentage of students meeting or exceeding expectations in math?,"CREATE TABLE Schools (  school_id INT PRIMARY KEY,  school_name VARCHAR(255) NOT NULL,  city VARCHAR(255) NOT NULL,  state VARCHAR(255) NOT NULL);  INSERT INTO Schools (school_id, school_name, city, state) VALUES  (1, 'Lincoln Elementary School', 'Chicago', 'IL'),  (2, 'Washington Middle School', 'Chicago', 'IL'),  (3, 'Jefferson High School', 'Chicago', 'IL'),  (4, 'Adams Elementary School', 'Springfield', 'IL'),  (5, 'Monroe Middle School', 'Springfield', 'IL'),  (6, 'Jackson High School', 'Springfield', 'IL');  CREATE TABLE StudentMathScores (  student_id INT PRIMARY KEY,  school_id INT NOT NULL,  student_name VARCHAR(255) NOT NULL,  math_score INT NOT NULL,  FOREIGN KEY (school_id) REFERENCES Schools(school_id));  INSERT INTO StudentMathScores (student_id, school_id, student_name, math_score) VALUES  (1, 1, 'Alice Smith', 85),  (2, 1, 'Bob Johnson', 92),  (3, 1, 'Charlie Williams', 78),  (4, 2, 'David Garcia', 95),  (5, 2, 'Emily Rodriguez', 88),  (6, 2, 'Frank Hernandez', 77),  (7, 3, 'Grace Davis', 98),  (8, 3, 'Henry Lee', 82),  (9, 3, 'Isabella Brown', 90),  (10, 4, 'Jack Miller', 80),  (11, 4, 'Katherine Wilson', 91),  (12, 4, 'Luke Anderson', 75),  (13, 5, 'Mary Thomas', 93),  (14, 5, 'Nathan Jones', 86),  (15, 5, 'Olivia Garcia', 79),  (16, 6, 'Peter Smith', 97),  (17, 6, 'Quinn Johnson', 84),  (18, 6, 'Ryan Williams', 76);","SELECT s.school_name, COUNT(sms.student_id) AS total_students, SUM(CASE WHEN sms.math_score >= 80 THEN 1 ELSE 0 END) AS students_meeting_expectations, ROUND((SUM(CASE WHEN sms.math_score >= 80 THEN 1 ELSE 0 END) / COUNT(sms.student_id)) * 100, 2) AS percentage_meeting_expectations  FROM Schools s  JOIN StudentMathScores sms ON s.school_id = sms.school_id  WHERE s.city = 'Chicago'  GROUP BY s.school_name  HAVING percentage_meeting_expectations >= 80  ORDER BY percentage_meeting_expectations DESC;","This query first joins the Schools and StudentMathScores tables on the school_id column. Then, it filters the results to only include schools in Chicago. For each school, it calculates the total number of students and the number of students who met or exceeded expectations in math (defined as a score of 80 or higher). It then calculates the percentage of students meeting expectations and filters the results to only include schools where this percentage is at least 80%. Finally, the schools are ordered in descending order of the percentage of students meeting expectations."
756,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average reading score for students in New York City who are in the 8th grade?,"CREATE TABLE Schools (  school_id INT PRIMARY KEY,  school_name VARCHAR(255) NOT NULL,  city VARCHAR(255) NOT NULL,  state VARCHAR(255) NOT NULL);  INSERT INTO Schools (school_id, school_name, city, state) VALUES  (1, 'Manhattan Elementary School', 'New York City', 'NY'),  (2, 'Brooklyn Middle School', 'New York City', 'NY'),  (3, 'Queens High School', 'New York City', 'NY'),  (4, 'Bronx Elementary School', 'New York City', 'NY'),  (5, 'Staten Island Middle School', 'New York City', 'NY'),  (6, 'Yonkers High School', 'Yonkers', 'NY');  CREATE TABLE StudentReadingScores (  student_id INT PRIMARY KEY,  school_id INT NOT NULL,  student_name VARCHAR(255) NOT NULL,  reading_score INT NOT NULL,  grade INT NOT NULL,  FOREIGN KEY (school_id) REFERENCES Schools(school_id));  INSERT INTO StudentReadingScores (student_id, school_id, student_name, reading_score, grade) VALUES  (1, 1, 'Alice Smith', 85, 8),  (2, 1, 'Bob Johnson', 92, 8),  (3, 1, 'Charlie Williams', 78, 8),  (4, 2, 'David Garcia', 95, 8),  (5, 2, 'Emily Rodriguez', 88, 8),  (6, 2, 'Frank Hernandez', 77, 8),  (7, 3, 'Grace Davis', 98, 8),  (8, 3, 'Henry Lee', 82, 8),  (9, 3, 'Isabella Brown', 90, 8),  (10, 4, 'Jack Miller', 80, 8),  (11, 4, 'Katherine Wilson', 91, 8),  (12, 4, 'Luke Anderson', 75, 8),  (13, 5, 'Mary Thomas', 93, 8),  (14, 5, 'Nathan Jones', 86, 8),  (15, 5, 'Olivia Garcia', 79, 8),  (16, 6, 'Peter Smith', 97, 8),  (17, 6, 'Quinn Johnson', 84, 8),  (18, 6, 'Ryan Williams', 76, 8);",SELECT AVG(srs.reading_score) AS average_reading_score  FROM Schools s  JOIN StudentReadingScores srs ON s.school_id = srs.school_id  WHERE s.city = 'New York City' AND srs.grade = 8;,"This query first joins the Schools and StudentReadingScores tables on the school_id column. Then, it filters the results to only include schools in New York City and students in the 8th grade. Finally, it calculates the average reading score for these students."
757,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","How many students attended the 2023 Fall semester at each school, grouped by state, and how many of those students are male?","CREATE TABLE student_enrollment (student_id INT PRIMARY KEY, school_id INT REFERENCES school(school_id), semester VARCHAR(10), enrollment_status VARCHAR(10), gender VARCHAR(10), start_date DATE, end_date DATE); 
CREATE TABLE school (school_id INT PRIMARY KEY, school_name VARCHAR(50), state VARCHAR(20), city VARCHAR(30), zip_code INT); 
INSERT INTO student_enrollment (student_id, school_id, semester, enrollment_status, gender, start_date, end_date) VALUES
(1, 1, 'Fall 2023', 'Active', 'Male', '2023-08-22', '2023-12-15'),
(2, 2, 'Fall 2023', 'Active', 'Female', '2023-08-22', '2023-12-15'),
(3, 1, 'Fall 2023', 'Active', 'Male', '2023-08-22', '2023-12-15'),
(4, 3, 'Fall 2023', 'Active', 'Female', '2023-08-22', '2023-12-15'),
(5, 2, 'Fall 2023', 'Active', 'Male', '2023-08-22', '2023-12-15'),
(6, 1, 'Fall 2023', 'Active', 'Female', '2023-08-22', '2023-12-15'),
(7, 3, 'Fall 2023', 'Active', 'Male', '2023-08-22', '2023-12-15'),
(8, 2, 'Fall 2023', 'Active', 'Female', '2023-08-22', '2023-12-15'),
(9, 1, 'Fall 2023', 'Active', 'Male', '2023-08-22', '2023-12-15'),
(10, 3, 'Fall 2023', 'Active', 'Female', '2023-08-22', '2023-12-15'); 
CREATE TABLE student (student_id INT PRIMARY KEY, first_name VARCHAR(20), last_name VARCHAR(20), date_of_birth DATE, gender VARCHAR(10)); 
INSERT INTO student (student_id, first_name, last_name, date_of_birth, gender) VALUES
(1, 'John', 'Smith', '2004-08-15', 'Male'),
(2, 'Alice', 'Johnson', '2005-03-10', 'Female'),
(3, 'Bob', 'Williams', '2004-07-12', 'Male'),
(4, 'Emily', 'Jones', '2005-01-18', 'Female'),
(5, 'David', 'Brown', '2004-09-22', 'Male'),
(6, 'Sophia', 'Davis', '2005-05-07', 'Female'),
(7, 'Charles', 'Miller', '2004-10-26', 'Male'),
(8, 'Isabella', 'Wilson', '2005-02-14', 'Female'),
(9, 'Christopher', 'Moore', '2004-06-19', 'Male'),
(10, 'Olivia', 'Taylor', '2005-04-21', 'Female');","SELECT s.state, COUNT(se.student_id) AS total_students, SUM(CASE WHEN se.gender = 'Male' THEN 1 ELSE 0 END) AS male_students
FROM student_enrollment se
JOIN school s ON se.school_id = s.school_id
WHERE se.semester = 'Fall 2023'
GROUP BY s.state
HAVING COUNT(se.student_id) > 0;","This query selects the state, total number of students, and number of male students for each state in the Fall 2023 semester. 

The query joins the `student_enrollment` and `school` tables on the `school_id` column to link student enrollment data to school location information. 

The `WHERE` clause filters the data to only include records for the Fall 2023 semester. 

The `GROUP BY` clause groups the data by state. 

The `COUNT(se.student_id)` expression calculates the total number of students for each state. 

The `SUM(CASE WHEN se.gender = 'Male' THEN 1 ELSE 0 END)` expression calculates the number of male students for each state. 

The `HAVING` clause filters out states with no student enrollment records.

The query returns a table with three columns: state, total_students, and male_students."
758,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many students are enrolled in each grade across all schools in the district?,"CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    Grade INT,
    SchoolID INT,
    FOREIGN KEY (SchoolID) REFERENCES Schools(SchoolID)
);

CREATE TABLE Schools (
    SchoolID INT PRIMARY KEY,
    SchoolName VARCHAR(255),
    DistrictID INT,
    FOREIGN KEY (DistrictID) REFERENCES Districts(DistrictID)
);

CREATE TABLE Districts (
    DistrictID INT PRIMARY KEY,
    DistrictName VARCHAR(255)
);

INSERT INTO Students (StudentID, FirstName, LastName, Grade, SchoolID) VALUES
(1, 'John', 'Smith', 9, 1),
(2, 'Alice', 'Johnson', 10, 2),
(3, 'Bob', 'Williams', 11, 3),
(4, 'Emily', 'Jones', 9, 2),
(5, 'Michael', 'Brown', 10, 1),
(6, 'Sarah', 'Davis', 11, 3),
(7, 'David', 'Miller', 9, 1),
(8, 'Jessica', 'Wilson', 10, 2),
(9, 'Thomas', 'Moore', 11, 3);

INSERT INTO Schools (SchoolID, SchoolName, DistrictID) VALUES
(1, 'Central High School', 1),
(2, 'North Middle School', 2),
(3, 'South Elementary School', 3);

INSERT INTO Districts (DistrictID, DistrictName) VALUES
(1, 'Central School District'),
(2, 'North School District'),
(3, 'South School District');","SELECT s.Grade, COUNT(s.StudentID) AS NumberOfStudents
FROM Students s
JOIN Schools sch ON s.SchoolID = sch.SchoolID
JOIN Districts d ON sch.DistrictID = d.DistrictID
GROUP BY s.Grade
ORDER BY s.Grade ASC;","This SQL query retrieves the number of students enrolled in each grade across all schools in the district. It joins the Students, Schools, and Districts tables on the SchoolID and DistrictID columns, respectively. It then groups the results by grade and counts the number of students in each grade. Finally, it orders the results by grade in ascending order."
759,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average test score for each subject in each grade level?,"CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(255),
    LastName VARCHAR(255),
    Grade INT,
    SchoolID INT,
    FOREIGN KEY (SchoolID) REFERENCES Schools(SchoolID)
);

CREATE TABLE Schools (
    SchoolID INT PRIMARY KEY,
    SchoolName VARCHAR(255),
    DistrictID INT,
    FOREIGN KEY (DistrictID) REFERENCES Districts(DistrictID)
);

CREATE TABLE Districts (
    DistrictID INT PRIMARY KEY,
    DistrictName VARCHAR(255)
);

CREATE TABLE Subjects (
    SubjectID INT PRIMARY KEY,
    SubjectName VARCHAR(255)
);

CREATE TABLE TestScores (
    TestScoreID INT PRIMARY KEY,
    StudentID INT,
    SubjectID INT,
    TestScore DECIMAL(5,2),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (SubjectID) REFERENCES Subjects(SubjectID)
);

INSERT INTO Students (StudentID, FirstName, LastName, Grade, SchoolID) VALUES
(1, 'John', 'Smith', 9, 1),
(2, 'Alice', 'Johnson', 10, 2),
(3, 'Bob', 'Williams', 11, 3),
(4, 'Emily', 'Jones', 9, 2),
(5, 'Michael', 'Brown', 10, 1),
(6, 'Sarah', 'Davis', 11, 3),
(7, 'David', 'Miller', 9, 1),
(8, 'Jessica', 'Wilson', 10, 2),
(9, 'Thomas', 'Moore', 11, 3);

INSERT INTO Schools (SchoolID, SchoolName, DistrictID) VALUES
(1, 'Central High School', 1),
(2, 'North Middle School', 2),
(3, 'South Elementary School', 3);

INSERT INTO Districts (DistrictID, DistrictName) VALUES
(1, 'Central School District'),
(2, 'North School District'),
(3, 'South School District');

INSERT INTO Subjects (SubjectID, SubjectName) VALUES
(1, 'Math'),
(2, 'English'),
(3, 'Science'),
(4, 'History');

INSERT INTO TestScores (TestScoreID, StudentID, SubjectID, TestScore) VALUES
(1, 1, 1, 85.00),
(2, 1, 2, 90.00),
(3, 1, 3, 75.00),
(4, 1, 4, 80.00),
(5, 2, 1, 95.00),
(6, 2, 2, 85.00),
(7, 2, 3, 90.00),
(8, 2, 4, 80.00),
(9, 3, 1, 70.00),
(10, 3, 2, 80.00),
(11, 3, 3, 95.00),
(12, 3, 4, 75.00),
(13, 4, 1, 85.00),
(14, 4, 2, 90.00),
(15, 4, 3, 80.00),
(16, 4, 4, 90.00),
(17, 5, 1, 90.00),
(18, 5, 2, 85.00),
(19, 5, 3, 75.00),
(20, 5, 4, 80.00),
(21, 6, 1, 70.00),
(22, 6, 2, 80.00),
(23, 6, 3, 95.00),
(24, 6, 4, 75.00),
(25, 7, 1, 85.00),
(26, 7, 2, 90.00),
(27, 7, 3, 80.00),
(28, 7, 4, 90.00),
(29, 8, 1, 90.00),
(30, 8, 2, 85.00),
(31, 8, 3, 95.00),
(32, 8, 4, 80.00),
(33, 9, 1, 70.00),
(34, 9, 2, 80.00),
(35, 9, 3, 95.00),
(36, 9, 4, 75.00);","SELECT s.SubjectName, s.Grade, AVG(ts.TestScore) AS AverageTestScore
FROM Subjects s
JOIN TestScores ts ON s.SubjectID = ts.SubjectID
JOIN Students st ON ts.StudentID = st.StudentID
GROUP BY s.SubjectName, s.Grade
ORDER BY s.SubjectName, s.Grade ASC;","This SQL query retrieves the average test score for each subject in each grade level. It joins the Subjects, TestScores, and Students tables on the SubjectID and StudentID columns, respectively. It then groups the results by subject and grade and calculates the average test score for each group. Finally, it orders the results by subject and grade in ascending order."
760,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","What are the top 10 selling products in the 'Electronics' category in the month of December 2023, across all regions?","CREATE TABLE Products (
  product_id INT PRIMARY KEY,
  product_name VARCHAR(255) NOT NULL,
  category VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  stock_level INT NOT NULL
);

CREATE TABLE Sales (
  sale_id INT PRIMARY KEY,
  product_id INT REFERENCES Products(product_id),
  customer_id INT REFERENCES Customers(customer_id),
  sale_date DATE NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10,2) NOT NULL
);

CREATE TABLE Customers (
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(255) NOT NULL,
  region VARCHAR(255) NOT NULL
);

INSERT INTO Products (product_id, product_name, category, price, stock_level) VALUES
(1, 'iPhone 14 Pro Max', 'Electronics', 1099.99, 50),
(2, 'Samsung Galaxy S23 Ultra', 'Electronics', 1199.99, 45),
(3, 'MacBook Pro 16-inch', 'Electronics', 2499.99, 30),
(4, 'Dell XPS 15', 'Electronics', 1799.99, 35),
(5, 'Sony WH-1000XM5 Headphones', 'Electronics', 399.99, 55),
(6, 'Nike Air Force 1', 'Shoes', 100.00, 60),
(7, 'Adidas Ultraboost 23', 'Shoes', 180.00, 50),
(8, 'Levi’s 501 Jeans', 'Clothing', 80.00, 70),
(9, 'The North Face ThermoBall Eco Hoodie', 'Clothing', 150.00, 45),
(10, 'Ray-Ban Aviator Sunglasses', 'Accessories', 150.00, 50);

INSERT INTO Sales (sale_id, product_id, customer_id, sale_date, quantity, price) VALUES
(1, 1, 10, '2023-12-01', 2, 2199.98),
(2, 2, 15, '2023-12-05', 1, 1199.99),
(3, 3, 20, '2023-12-10', 1, 2499.99),
(4, 4, 25, '2023-12-15', 2, 3599.98),
(5, 5, 30, '2023-12-20', 1, 399.99),
(6, 6, 10, '2023-12-01', 1, 100.00),
(7, 7, 15, '2023-12-05', 1, 180.00),
(8, 8, 20, '2023-12-10', 2, 160.00),
(9, 9, 25, '2023-12-15', 1, 150.00),
(10, 10, 30, '2023-12-20', 2, 300.00);

INSERT INTO Customers (customer_id, customer_name, region) VALUES
(10, 'John Doe', 'North America'),
(15, 'Jane Smith', 'Europe'),
(20, 'Peter Jones', 'Asia'),
(25, 'Mary Brown', 'Australia'),
(30, 'Michael Davis', 'South America');","SELECT
  p.product_name,
  SUM(s.quantity) AS total_quantity_sold
FROM Products AS p
JOIN Sales AS s
  ON p.product_id = s.product_id
WHERE
  p.category = 'Electronics'
  AND s.sale_date BETWEEN '2023-12-01' AND '2023-12-31'
GROUP BY
  p.product_name
ORDER BY
  total_quantity_sold DESC
LIMIT 10;","This SQL query retrieves the top 10 selling products in the 'Electronics' category in the month of December 2023, across all regions. It joins the 'Products' and 'Sales' tables on the 'product_id' field, filters the results to include only sales in the 'Electronics' category and in December 2023, groups the results by product name, sums the total quantity sold for each product, orders the results in descending order of total quantity sold, and limits the results to the top 10 products."
761,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","What are the top 5 products sold in the United States in the last quarter, excluding discontinued items?","CREATE TABLE product_sales (order_id INT, product_id INT, quantity INT, sales_date DATE, product_name VARCHAR(255), product_category VARCHAR(255), product_status VARCHAR(255));
INSERT INTO product_sales (order_id, product_id, quantity, sales_date, product_name, product_category, product_status) VALUES (1, 101, 2, '2023-04-01', 'T-Shirt', 'Apparel', 'Active'), (2, 102, 1, '2023-04-02', 'Jeans', 'Apparel', 'Active'), (3, 103, 3, '2023-04-03', 'Laptop', 'Electronics', 'Active'), (4, 104, 1, '2023-04-04', 'Keyboard', 'Electronics', 'Active'), (5, 105, 2, '2023-04-05', 'Mouse', 'Electronics', 'Active'), (6, 101, 1, '2023-04-06', 'T-Shirt', 'Apparel', 'Active'), (7, 106, 4, '2023-04-07', 'Monitor', 'Electronics', 'Active'), (8, 107, 2, '2023-04-08', 'Tablet', 'Electronics', 'Active'), (9, 108, 1, '2023-04-09', 'Charger', 'Electronics', 'Active'), (10, 109, 3, '2023-04-10', 'Backpack', 'Accessories', 'Active'), (11, 110, 2, '2023-04-11', 'Sunglasses', 'Accessories', 'Active'), (12, 111, 1, '2023-04-12', 'Hat', 'Accessories', 'Active'), (13, 101, 2, '2023-04-13', 'T-Shirt', 'Apparel', 'Active'), (14, 102, 1, '2023-04-14', 'Jeans', 'Apparel', 'Active'), (15, 112, 4, '2023-04-15', 'Shoes', 'Apparel', 'Active'), (16, 113, 2, '2023-04-16', 'Belt', 'Accessories', 'Active'), (17, 114, 1, '2023-04-17', 'Watch', 'Accessories', 'Active'), (18, 103, 3, '2023-04-18', 'Laptop', 'Electronics', 'Active'), (19, 104, 1, '2023-04-19', 'Keyboard', 'Electronics', 'Active'), (20, 105, 2, '2023-04-20', 'Mouse', 'Electronics', 'Active');

CREATE TABLE product (product_id INT, product_name VARCHAR(255), product_category VARCHAR(255), product_status VARCHAR(255));
INSERT INTO product (product_id, product_name, product_category, product_status) VALUES (101, 'T-Shirt', 'Apparel', 'Active'), (102, 'Jeans', 'Apparel', 'Active'), (103, 'Laptop', 'Electronics', 'Active'), (104, 'Keyboard', 'Electronics', 'Active'), (105, 'Mouse', 'Electronics', 'Active'), (106, 'Monitor', 'Electronics', 'Active'), (107, 'Tablet', 'Electronics', 'Active'), (108, 'Charger', 'Electronics', 'Active'), (109, 'Backpack', 'Accessories', 'Active'), (110, 'Sunglasses', 'Accessories', 'Active'), (111, 'Hat', 'Accessories', 'Active'), (112, 'Shoes', 'Apparel', 'Active'), (113, 'Belt', 'Accessories', 'Active'), (114, 'Watch', 'Accessories', 'Active'), (115, 'Printer', 'Electronics', 'Discontinued'), (116, 'Webcam', 'Electronics', 'Discontinued');","SELECT p.product_name, SUM(s.quantity) AS total_quantity
FROM product_sales s
JOIN product p ON s.product_id = p.product_id
WHERE s.sales_date BETWEEN '2023-04-01' AND '2023-04-30'
AND p.product_country = 'United States'
AND p.product_status = 'Active'
GROUP BY p.product_name
ORDER BY total_quantity DESC
LIMIT 5;","This SQL query retrieves the top 5 products sold in the United States in the last quarter, excluding discontinued items.

**Step 1:** Join the `product_sales` and `product` tables on the `product_id` column to get the product name and sales quantity.
**Step 2:** Filter the data to include sales from the last quarter (April 1st to April 30th) and only active products in the United States.
**Step 3:** Group the data by product name and calculate the total quantity sold for each product.
**Step 4:** Order the results by total quantity in descending order.
**Step 5:** Limit the results to the top 5 products."
762,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Find all customers who purchased a product in November 2023 but not in December 2023.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode VARCHAR(255), country VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), order_date DATE, quantity INT, price DECIMAL(10,2));
CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), supplier_id INT REFERENCES suppliers(supplier_id));
CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, name VARCHAR(255), email VARCHAR(255), phone VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode VARCHAR(255), country VARCHAR(255));
INSERT INTO customers (customer_id, name, email, phone, address, city, state, zipcode, country) VALUES (1, 'John Doe', 'john.doe@example.com', '555-123-4567', '123 Main St', 'Anytown', 'CA', '12345', 'USA'), (2, 'Jane Smith', 'jane.smith@example.com', '555-234-5678', '456 Oak Ave', 'Anytown', 'CA', '12345', 'USA'), (3, 'Robert Jones', 'robert.jones@example.com', '555-345-6789', '789 Maple St', 'Anytown', 'CA', '12345', 'USA');
INSERT INTO orders (order_id, customer_id, product_id, order_date, quantity, price) VALUES (1, 1, 10, '2023-11-01', 1, 10.00), (2, 2, 20, '2023-11-15', 2, 20.00), (3, 3, 30, '2023-11-22', 3, 30.00), (4, 1, 10, '2023-12-01', 1, 10.00), (5, 2, 20, '2023-12-15', 2, 20.00), (6, 3, 30, '2023-12-22', 3, 30.00);","SELECT c.customer_id, c.name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date BETWEEN '2023-11-01' AND '2023-11-30'
EXCEPT
SELECT c.customer_id, c.name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date BETWEEN '2023-12-01' AND '2023-12-31';","This query first retrieves all customers who made orders in November 2023 by joining the `customers` and `orders` tables on the `customer_id`. It then filters the results to include only orders placed between November 1st and November 30th. This is the first part of the EXCEPT operation.

Next, the query retrieves all customers who made orders in December 2023, again by joining the `customers` and `orders` tables. It then filters the results to include only orders placed between December 1st and December 31st.

Finally, the EXCEPT operation is performed. This operation returns all the rows from the first result set (customers who made orders in November 2023) that are not present in the second result set (customers who made orders in December 2023). The result is a list of customers who made orders in November 2023 but not in December 2023."
763,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Find the top 5 products sold in each category in November 2023, sorted by quantity sold.","CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), category VARCHAR(255), price DECIMAL(10,2), supplier_id INT REFERENCES suppliers(supplier_id));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), product_id INT REFERENCES products(product_id), order_date DATE, quantity INT, price DECIMAL(10,2));
INSERT INTO products (product_id, name, category, price, supplier_id) VALUES (10, 'T-Shirt', 'Clothing', 10.00, 1), (20, 'Laptop', 'Electronics', 1000.00, 2), (30, 'Coffee Mug', 'Kitchenware', 5.00, 3), (40, 'Book', 'Books', 20.00, 4), (50, 'Chair', 'Furniture', 50.00, 5);
INSERT INTO orders (order_id, customer_id, product_id, order_date, quantity, price) VALUES (1, 1, 10, '2023-11-01', 1, 10.00), (2, 2, 20, '2023-11-15', 2, 20.00), (3, 3, 30, '2023-11-22', 3, 30.00), (4, 1, 10, '2023-11-01', 1, 10.00), (5, 2, 20, '2023-11-15', 2, 20.00), (6, 3, 30, '2023-11-22', 3, 30.00);","SELECT p.category, p.name, SUM(o.quantity) AS total_quantity
FROM products p
JOIN orders o ON p.product_id = o.product_id
WHERE o.order_date BETWEEN '2023-11-01' AND '2023-11-30'
GROUP BY p.category, p.name
ORDER BY p.category, total_quantity DESC
LIMIT 5;","This query first joins the `products` and `orders` tables on the `product_id` to link product information to order details. It then filters the results to include only orders placed in November 2023.

Next, the query groups the results by product category and product name and calculates the total quantity sold for each product. It then orders the results by category and total quantity sold in descending order.

Finally, the query limits the results to the top 5 products in each category, providing a list of the best-selling products in each category during November 2023."
764,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What are the top 5 products by total quantity sold in the month of May 2023?,"CREATE TABLE Products ( ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, Category VARCHAR(255), Price DECIMAL(10,2), QuantityInStock INT );
CREATE TABLE Sales ( SaleID INT PRIMARY KEY, ProductID INT, CustomerID INT, SaleDate DATE, QuantitySold INT, FOREIGN KEY (ProductID) REFERENCES Products(ProductID), FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) );
CREATE TABLE Customers ( CustomerID INT PRIMARY KEY, CustomerName VARCHAR(255), Country VARCHAR(255), City VARCHAR(255) );
INSERT INTO Products (ProductID, ProductName, Category, Price, QuantityInStock) VALUES (1, 'T-Shirt', 'Clothing', 10.00, 100), (2, 'Laptop', 'Electronics', 500.00, 50), (3, 'Coffee', 'Food', 5.00, 200), (4, 'Mouse', 'Electronics', 20.00, 100), (5, 'Keyboard', 'Electronics', 30.00, 75); 
INSERT INTO Sales (SaleID, ProductID, CustomerID, SaleDate, QuantitySold) VALUES (1, 1, 10, '2023-05-01', 5), (2, 2, 20, '2023-05-05', 2), (3, 3, 30, '2023-05-10', 10), (4, 4, 40, '2023-05-15', 1), (5, 5, 50, '2023-05-20', 3), (6, 1, 10, '2023-05-25', 8), (7, 2, 20, '2023-05-30', 1), (8, 3, 30, '2023-05-05', 15), (9, 4, 40, '2023-05-10', 4), (10, 5, 50, '2023-05-15', 2);","SELECT ProductName, SUM(QuantitySold) AS TotalQuantitySold
FROM Products
INNER JOIN Sales ON Products.ProductID = Sales.ProductID
WHERE SaleDate BETWEEN '2023-05-01' AND '2023-05-31'
GROUP BY ProductName
ORDER BY TotalQuantitySold DESC
LIMIT 5;","This SQL query retrieves the top 5 products by total quantity sold in the month of May 2023. 

1. It starts by selecting the ProductName and calculating the sum of QuantitySold as TotalQuantitySold.
2. It then joins the Products table with the Sales table on the ProductID column.
3. It filters the sales data to include only sales that occurred between May 1, 2023, and May 31, 2023.
4. It groups the results by ProductName and orders them by TotalQuantitySold in descending order.
5. Finally, it limits the results to the top 5 products."
765,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,"For each state in the US, calculate the average yield per acre for corn in the year 2023, and rank the states from highest to lowest average yield.","CREATE TABLE corn_yields ( state VARCHAR(2), year INT, yield_per_acre FLOAT );
INSERT INTO corn_yields VALUES ('IA', 2023, 175.5), ('IL', 2023, 168.2), ('NE', 2023, 154.7), ('IN', 2023, 172.1), ('MN', 2023, 148.9), ('SD', 2023, 135.2), ('MO', 2023, 165.8), ('WI', 2023, 159.3), ('KY', 2023, 142.7), ('OH', 2023, 167.4), ('MI', 2023, 151.8), ('PA', 2023, 149.5), ('NC', 2023, 138.6), ('IA', 2022, 180.3), ('IL', 2022, 175.1), ('NE', 2022, 162.9), ('IN', 2022, 178.5), ('MN', 2022, 155.7), ('SD', 2022, 142.4), ('MO', 2022, 170.2), ('WI', 2022, 165.9), ('KY', 2022, 149.1), ('OH', 2022, 173.8), ('MI', 2022, 158.2), ('PA', 2022, 155.9), ('NC', 2022, 145.0);","SELECT state, AVG(yield_per_acre) AS average_yield, ROW_NUMBER() OVER (PARTITION BY state ORDER BY AVG(yield_per_acre) DESC) AS rank FROM corn_yields WHERE year = 2023 GROUP BY state ORDER BY average_yield DESC;","This SQL query first filters the corn_yields table to only include data for the year 2023. Then, it calculates the average yield per acre for each state using the AVG() function. The query then uses the ROW_NUMBER() window function to assign a rank to each state based on its average yield, with the highest average yield receiving a rank of 1. Finally, the query groups the results by state and orders them by average yield in descending order."
766,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,Find the top 10 counties in California with the highest average corn yield per acre in 2023.,"CREATE TABLE corn_yields ( county VARCHAR(50), state VARCHAR(2), year INT, yield_per_acre FLOAT );
INSERT INTO corn_yields VALUES ('Fresno', 'CA', 2023, 185.2), ('Kern', 'CA', 2023, 178.9), ('Tulare', 'CA', 2023, 172.6), ('Kings', 'CA', 2023, 169.4), ('Merced', 'CA', 2023, 165.1), ('Madera', 'CA', 2023, 161.8), ('Stanislaus', 'CA', 2023, 158.5), ('San Joaquin', 'CA', 2023, 155.2), ('Yolo', 'CA', 2023, 151.9), ('Glenn', 'CA', 2023, 148.6), ('Colusa', 'CA', 2023, 145.3), ('Sutter', 'CA', 2023, 142.0), ('Butte', 'CA', 2023, 138.7), ('Yuba', 'CA', 2023, 135.4), ('Tehama', 'CA', 2023, 132.1), ('Sacramento', 'CA', 2023, 128.8), ('Fresno', 'CA', 2022, 190.5), ('Kern', 'CA', 2022, 184.2), ('Tulare', 'CA', 2022, 177.9), ('Kings', 'CA', 2022, 174.6), ('Merced', 'CA', 2022, 170.3), ('Madera', 'CA', 2022, 166.9), ('Stanislaus', 'CA', 2022, 163.6), ('San Joaquin', 'CA', 2022, 160.3), ('Yolo', 'CA', 2022, 157.0), ('Glenn', 'CA', 2022, 153.7), ('Colusa', 'CA', 2022, 150.4), ('Sutter', 'CA', 2022, 147.1), ('Butte', 'CA', 2022, 143.8), ('Yuba', 'CA', 2022, 140.5), ('Tehama', 'CA', 2022, 137.2), ('Sacramento', 'CA', 2022, 133.9);","SELECT county, AVG(yield_per_acre) AS average_yield, ROW_NUMBER() OVER (PARTITION BY state ORDER BY AVG(yield_per_acre) DESC) AS rank FROM corn_yields WHERE state = 'CA' AND year = 2023 GROUP BY county ORDER BY average_yield DESC LIMIT 10;","This SQL query first filters the corn_yields table to only include data for California (state = 'CA') and the year 2023. Then, it calculates the average yield per acre for each county using the AVG() function. The query then uses the ROW_NUMBER() window function to assign a rank to each county based on its average yield, with the highest average yield receiving a rank of 1. Finally, the query groups the results by county, orders them by average yield in descending order, and limits the output to the top 10 counties."
767,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,"Calculate the average yield for each crop in each region, considering only the last five years of data.","CREATE TABLE CropYields (CropID INT, RegionID INT, Year INT, Yield DECIMAL(10,2));
CREATE VIEW CropYieldsByRegion AS SELECT CropID, RegionID, Year, Yield FROM CropYields WHERE Year >= DATEADD(YEAR, -5, GETDATE());","SELECT CropID, RegionID, AVG(Yield) AS AverageYield FROM CropYieldsByRegion GROUP BY CropID, RegionID ORDER BY AverageYield DESC;","This query first filters the CropYields table to only include data from the last five years. Then, it calculates the average yield for each crop in each region using the GROUP BY and AVG aggregate functions. Finally, it orders the results by AverageYield in descending order."
768,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,"Obtain the top 10 largest farms in each state, based on the total land area they cultivate.","CREATE TABLE Farms (FarmID INT, StateID INT, FarmName VARCHAR(255), LandArea DECIMAL(10,2));","SELECT FarmName, StateID, LandArea FROM Farms ORDER BY LandArea DESC OFFSET 0 ROWS FETCH NEXT 10 ROWS WITH TIES;","This query first orders all farms by their LandArea in descending order. Then, it uses the OFFSET and FETCH NEXT clauses to retrieve the top 10 farms based on this ordering."
769,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering",data retrieval: basic data fetching queries,Identify the crops that have experienced the most significant yield increase in the past year.,"CREATE TABLE CropYields (CropID INT, Year INT, Yield DECIMAL(10,2));
CREATE VIEW YieldChange AS SELECT CropID, Year, Yield, LAG(Yield, 1, 0) OVER (PARTITION BY CropID ORDER BY Year) AS PreviousYearYield FROM CropYields;","SELECT CropID, Yield, (Yield - PreviousYearYield) AS YieldIncrease FROM YieldChange ORDER BY YieldIncrease DESC;","This query first calculates the yield increase for each crop in each year by subtracting the previous year's yield from the current year's yield. Then, it orders the results by YieldIncrease in descending order to identify the crops with the most significant yield increase."
770,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Update the 'Drivers' table to set the 'active' status to 'false' for all drivers who have not completed a delivery in the last 30 days.,"CREATE TABLE Drivers (driver_id INTEGER PRIMARY KEY, name TEXT, active BOOLEAN);
INSERT INTO Drivers (driver_id, name, active) VALUES (1, 'John Doe', true), (2, 'Jane Smith', true), (3, 'Peter Jones', false);

CREATE TABLE Deliveries (delivery_id INTEGER PRIMARY KEY, driver_id INTEGER, date DATE, completed BOOLEAN);
INSERT INTO Deliveries (delivery_id, driver_id, date, completed) VALUES (1, 1, '2023-03-01', true), (2, 2, '2023-03-02', true), (3, 1, '2023-03-08', true), (4, 3, '2023-02-15', false);

CREATE TABLE Vehicles (vehicle_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER);
INSERT INTO Vehicles (vehicle_id, make, model, year) VALUES (1, 'Toyota', 'Camry', 2020), (2, 'Honda', 'Accord', 2021), (3, 'Ford', 'F-150', 2019);","UPDATE Drivers
SET active = false
FROM Drivers
LEFT JOIN Deliveries ON Drivers.driver_id = Deliveries.driver_id
WHERE Deliveries.completed = true AND Deliveries.date BETWEEN date('now', '-30 days') AND date('now')
OR Deliveries.completed IS NULL;","This query updates the 'Drivers' table to set the 'active' status to 'false' for all drivers who have not completed a delivery in the last 30 days.

Step 1: It joins the 'Drivers' and 'Deliveries' tables using a LEFT JOIN based on the 'driver_id' column.
Step 2: It filters the results to only include deliveries that were completed and occurred within the last 30 days, using the 'date' function to calculate the date range.
Step 3: It also includes drivers who have no deliveries in the last 30 days by checking for NULL values in the 'Deliveries' table.
Step 4: It updates the 'active' status to 'false' for all matching drivers in the 'Drivers' table."
771,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Insert a new record into the 'Customers' table with the name 'Acme Corporation', the address '123 Main St, Anytown, CA 91234', and the phone number '123-456-7890'.","CREATE TABLE Customers (customer_id INTEGER PRIMARY KEY, name TEXT, address TEXT, phone TEXT);
INSERT INTO Customers (customer_id, name, address, phone) VALUES (1, 'John Doe', '100 Oak Ave, Anytown, CA 91234', '123-456-0001'), (2, 'Jane Smith', '200 Elm St, Anytown, CA 91234', '123-456-0002');","INSERT INTO Customers (name, address, phone)
VALUES ('Acme Corporation', '123 Main St, Anytown, CA 91234', '123-456-7890');","This query inserts a new record into the 'Customers' table with the provided information.

Step 1: It specifies the columns to insert data into: 'name', 'address', and 'phone'.
Step 2: It provides the values for each column: 'Acme Corporation', '123 Main St, Anytown, CA 91234', and '123-456-7890'."
772,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Delete all records from the 'Orders' table where the order date is before January 1, 2023.","CREATE TABLE Orders (order_id INTEGER PRIMARY KEY, customer_id INTEGER, order_date DATE, total_amount DECIMAL);
INSERT INTO Orders (order_id, customer_id, order_date, total_amount) VALUES (1, 1, '2023-01-15', 100.00), (2, 2, '2022-12-10', 50.00), (3, 1, '2023-02-20', 75.00);","DELETE FROM Orders
WHERE order_date < '2023-01-01';","This query deletes all records from the 'Orders' table where the 'order_date' is before January 1, 2023.

Step 1: It specifies the table to delete from: 'Orders'.
Step 2: It uses the 'WHERE' clause to filter the records based on the 'order_date' being less than '2023-01-01'."
773,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Calculate the average delivery time for each vehicle in the 'Vehicles' table, considering only deliveries completed in the month of March 2023.","CREATE TABLE Vehicles (vehicle_id INTEGER PRIMARY KEY, make TEXT, model TEXT, year INTEGER);
INSERT INTO Vehicles (vehicle_id, make, model, year) VALUES (1, 'Toyota', 'Camry', 2020), (2, 'Honda', 'Accord', 2021), (3, 'Ford', 'F-150', 2019);

CREATE TABLE Deliveries (delivery_id INTEGER PRIMARY KEY, driver_id INTEGER, vehicle_id INTEGER, date DATE, completed BOOLEAN);
INSERT INTO Deliveries (delivery_id, driver_id, vehicle_id, date, completed) VALUES (1, 1, 1, '2023-03-01', true), (2, 2, 2, '2023-03-02', true), (3, 1, 1, '2023-03-08', true), (4, 3, 3, '2023-02-15', false), (5, 1, 2, '2023-03-15', true), (6, 2, 3, '2023-03-20', true);","SELECT v.make || ' ' || v.model AS vehicle, AVG(strftime('%s', d.date) - strftime('%s', d.completed_at)) AS avg_delivery_time
FROM Vehicles AS v
JOIN Deliveries AS d ON v.vehicle_id = d.vehicle_id
WHERE d.completed = true AND strftime('%Y-%m', d.date) = '2023-03'
GROUP BY v.vehicle_id
ORDER BY avg_delivery_time DESC;","This query calculates the average delivery time for each vehicle in the 'Vehicles' table, considering only deliveries completed in the month of March 2023.

Step 1: It joins the 'Vehicles' and 'Deliveries' tables using an INNER JOIN based on the 'vehicle_id' column.
Step 2: It filters the results to only include deliveries that were completed and occurred in March 2023, using the 'strftime' function to extract the year and month from the 'date' column.
Step 3: It calculates the difference between the delivery start time and completion time in seconds using the 'strftime' function.
Step 4: It groups the results by vehicle and calculates the average delivery time for each vehicle.
Step 5: It orders the results in descending order of average delivery time."
774,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Remove order with order_id 123456 from orders table and update status of order with order_id 789012 to 'cancelled' in the same table.,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, order_status VARCHAR(255));
INSERT INTO orders (order_id, customer_id, order_date, order_status) VALUES (123456, 101, '2023-03-08', 'pending'), (789012, 102, '2023-03-15', 'processing');","DELETE FROM orders WHERE order_id = 123456;
UPDATE orders SET order_status = 'cancelled' WHERE order_id = 789012;","This SQL statement performs two actions:

1.  **DELETE**: It removes the order with order_id 123456 from the 'orders' table. The 'DELETE' statement targets the 'orders' table and specifies the condition 'order_id = 123456' to identify the exact order to be removed.

2.  **UPDATE**: It updates the status of the order with order_id 789012 to 'cancelled' in the 'orders' table. The 'UPDATE' statement modifies the 'order_status' column for the row where 'order_id = 789012', setting its value to 'cancelled'."
775,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","How many patients have been admitted to the hospital in the last month, and what are the top 3 reasons for admission?","CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), insurance_id VARCHAR(255));
CREATE TABLE admissions (admission_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), date_of_admission DATE, discharge_date DATE, reason_for_admission VARCHAR(255), attending_physician VARCHAR(255));","SELECT COUNT(*) AS total_admissions, reason_for_admission, COUNT(*) AS count_by_reason FROM admissions WHERE date_of_admission >= DATE('now', '-1 month') GROUP BY reason_for_admission ORDER BY count_by_reason DESC LIMIT 3;","1. Select the count of all admissions in the last month.
2. Group the admissions by reason for admission.
3. Order the results by the count of admissions for each reason in descending order.
4. Limit the results to the top 3 reasons for admission."
776,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average length of stay for patients admitted with pneumonia?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), insurance_id VARCHAR(255));
CREATE TABLE admissions (admission_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), date_of_admission DATE, discharge_date DATE, reason_for_admission VARCHAR(255), attending_physician VARCHAR(255));",SELECT AVG(discharge_date - date_of_admission) AS average_length_of_stay FROM admissions WHERE reason_for_admission = 'Pneumonia';,"1. Calculate the difference between the discharge date and the date of admission for each admission.
2. Select the average of the length of stay for all admissions with pneumonia."
777,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 most prescribed medications for patients with diabetes?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), insurance_id VARCHAR(255));
CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), dosage VARCHAR(255), route_of_administration VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_id INT REFERENCES medications(medication_id), date_prescribed DATE, prescriber VARCHAR(255));","SELECT m.name, COUNT(*) AS count_prescribed FROM prescriptions p JOIN medications m ON p.medication_id = m.medication_id JOIN patients pa ON p.patient_id = pa.patient_id WHERE pa.diagnosis = 'Diabetes' GROUP BY m.name ORDER BY count_prescribed DESC LIMIT 5;","1. Join the prescriptions table with the medications table on the medication_id.
2. Join the prescriptions table with the patients table on the patient_id.
3. Filter the results to only include prescriptions for patients with diabetes.
4. Group the results by medication name and count the number of prescriptions for each medication.
5. Order the results by the count of prescriptions in descending order.
6. Limit the results to the top 5 most prescribed medications."
778,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the percentage of patients who have experienced side effects from a particular medication?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), insurance_id VARCHAR(255));
CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), dosage VARCHAR(255), route_of_administration VARCHAR(255));
CREATE TABLE side_effects (side_effect_id INT PRIMARY KEY, medication_id INT REFERENCES medications(medication_id), description VARCHAR(255));
CREATE TABLE patient_side_effects (patient_id INT REFERENCES patients(patient_id), side_effect_id INT REFERENCES side_effects(side_effect_id));",SELECT COUNT(DISTINCT p.patient_id) * 100.0 / COUNT(DISTINCT pa.patient_id) AS percentage_with_side_effects FROM patient_side_effects p JOIN medications m ON p.side_effect_id IN (SELECT side_effect_id FROM side_effects WHERE medication_id = (SELECT medication_id FROM medications WHERE name = 'Aspirin')) JOIN patients pa ON p.patient_id = pa.patient_id;,"1. Select the count of distinct patients who have experienced side effects from Aspirin.
2. Divide the count of patients with side effects by the total count of patients.
3. Multiply the result by 100 to get the percentage."
779,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 3 most common diagnoses for patients admitted to the hospital in the last year?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), insurance_id VARCHAR(255));
CREATE TABLE admissions (admission_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), date_of_admission DATE, discharge_date DATE, reason_for_admission VARCHAR(255), attending_physician VARCHAR(255));","SELECT reason_for_admission, COUNT(*) AS count_by_diagnosis FROM admissions WHERE date_of_admission >= DATE('now', '-1 year') GROUP BY reason_for_admission ORDER BY count_by_diagnosis DESC LIMIT 3;","1. Select the reason for admission and count the number of admissions for each reason.
2. Filter the results to only include admissions in the last year.
3. Group the results by reason for admission.
4. Order the results by the count of admissions for each reason in descending order.
5. Limit the results to the top 3 most common diagnoses."
780,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","Identify the top 5 suppliers in terms of total order quantity for the month of October 2023, ordered from highest to lowest.","CREATE TABLE Suppliers ( SupplierID INT PRIMARY KEY,  SupplierName VARCHAR(255) NOT NULL,  Country VARCHAR(255),  ContactName VARCHAR(255));

CREATE TABLE Orders ( OrderID INT PRIMARY KEY,  OrderDate DATE NOT NULL,  SupplierID INT REFERENCES Suppliers(SupplierID),  Quantity INT NOT NULL);

INSERT INTO Suppliers (SupplierID, SupplierName, Country, ContactName) VALUES
(1, 'Acme Supplies', 'USA', 'John Smith'),
(2, 'Global Corp', 'China', 'Li Wang'),
(3, 'Euro Imports', 'Germany', 'Franz Schmidt'),
(4, 'Pacific Trading', 'Japan', 'Kenji Sato'),
(5, 'South America Supplies', 'Brazil', 'Maria Rodriguez');

INSERT INTO Orders (OrderID, OrderDate, SupplierID, Quantity) VALUES
(1, '2023-10-01', 1, 100),
(2, '2023-10-05', 2, 200),
(3, '2023-10-10', 3, 300),
(4, '2023-10-15', 4, 400),
(5, '2023-10-20', 5, 500),
(6, '2023-10-25', 1, 600),
(7, '2023-10-30', 2, 700),
(8, '2023-10-01', 3, 800),
(9, '2023-10-05', 4, 900),
(10, '2023-10-10', 5, 1000),
(11, '2023-10-15', 1, 1100),
(12, '2023-10-20', 2, 1200),
(13, '2023-10-25', 3, 1300),
(14, '2023-10-30', 4, 1400),
(15, '2023-10-01', 5, 1500);","SELECT
    s.SupplierName,
    SUM(o.Quantity) AS TotalQuantity
FROM
    Suppliers s
JOIN
    Orders o ON s.SupplierID = o.SupplierID
WHERE
    o.OrderDate BETWEEN '2023-10-01' AND '2023-10-31'
GROUP BY
    s.SupplierName
ORDER BY
    TotalQuantity DESC
LIMIT 5;","This query selects the SupplierName and calculates the total quantity ordered from each supplier in October 2023. It uses a JOIN clause to connect the Suppliers and Orders tables, filters the orders to include only those from October, groups the data by supplier, and orders the results by total quantity in descending order. Finally, it limits the results to the top 5 suppliers."
781,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 parts by total sum of quantity on hand across all warehouses?,"CREATE TABLE warehouse (whse_id INT PRIMARY KEY, location VARCHAR(255), capacity INT);
CREATE TABLE part (part_id INT PRIMARY KEY, name VARCHAR(255), description TEXT);
CREATE TABLE inventory (whse_id INT REFERENCES warehouse(whse_id), part_id INT REFERENCES part(part_id), quantity_on_hand INT, PRIMARY KEY (whse_id, part_id));
INSERT INTO warehouse (whse_id, location, capacity) VALUES (1, 'Central Warehouse', 10000), (2, 'West Coast Warehouse', 5000), (3, 'East Coast Warehouse', 7500);
INSERT INTO part (part_id, name, description) VALUES (1, 'Widget A', 'Essential widget for product X'), (2, 'Widget B', 'Secondary widget for product X'), (3, 'Gear C', 'Essential gear for product Y'), (4, 'Spring D', 'Essential spring for product Y'), (5, 'Screw E', 'Essential screw for product Z');
INSERT INTO inventory (whse_id, part_id, quantity_on_hand) VALUES (1, 1, 1000), (1, 2, 500), (1, 3, 750), (1, 4, 250), (1, 5, 100), (2, 1, 250), (2, 2, 100), (2, 3, 500), (2, 4, 125), (2, 5, 50), (3, 1, 500), (3, 2, 250), (3, 3, 375), (3, 4, 62), (3, 5, 25);","SELECT part_id, name, SUM(quantity_on_hand) AS total_quantity_on_hand
FROM inventory
JOIN part ON inventory.part_id = part.part_id
GROUP BY part_id, name
ORDER BY total_quantity_on_hand DESC
LIMIT 5;","This query first joins the `inventory` and `part` tables on the `part_id` column. Then, it groups the results by `part_id` and `name`, and calculates the sum of `quantity_on_hand` for each group. Finally, it orders the results by `total_quantity_on_hand` in descending order and limits the output to the top 5 rows."
782,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","List all parts with their names, descriptions, and the total quantity on hand across all warehouses, sorted by total quantity on hand in descending order.","CREATE TABLE warehouse (whse_id INT PRIMARY KEY, location VARCHAR(255), capacity INT);
CREATE TABLE part (part_id INT PRIMARY KEY, name VARCHAR(255), description TEXT);
CREATE TABLE inventory (whse_id INT REFERENCES warehouse(whse_id), part_id INT REFERENCES part(part_id), quantity_on_hand INT, PRIMARY KEY (whse_id, part_id));
INSERT INTO warehouse (whse_id, location, capacity) VALUES (1, 'Central Warehouse', 10000), (2, 'West Coast Warehouse', 5000), (3, 'East Coast Warehouse', 7500);
INSERT INTO part (part_id, name, description) VALUES (1, 'Widget A', 'Essential widget for product X'), (2, 'Widget B', 'Secondary widget for product X'), (3, 'Gear C', 'Essential gear for product Y'), (4, 'Spring D', 'Essential spring for product Y'), (5, 'Screw E', 'Essential screw for product Z');
INSERT INTO inventory (whse_id, part_id, quantity_on_hand) VALUES (1, 1, 1000), (1, 2, 500), (1, 3, 750), (1, 4, 250), (1, 5, 100), (2, 1, 250), (2, 2, 100), (2, 3, 500), (2, 4, 125), (2, 5, 50), (3, 1, 500), (3, 2, 250), (3, 3, 375), (3, 4, 62), (3, 5, 25);","SELECT p.part_id, p.name, p.description, SUM(i.quantity_on_hand) AS total_quantity_on_hand
FROM part p
JOIN inventory i ON p.part_id = i.part_id
GROUP BY p.part_id, p.name, p.description
ORDER BY total_quantity_on_hand DESC;","This query joins the `part` and `inventory` tables on the `part_id` column. It then groups the results by `part_id`, `name`, and `description`, and calculates the sum of `quantity_on_hand` for each group. Finally, it orders the results by `total_quantity_on_hand` in descending order."
783,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects","For each warehouse, find the part with the highest quantity on hand and its corresponding quantity.","CREATE TABLE warehouse (whse_id INT PRIMARY KEY, location VARCHAR(255), capacity INT);
CREATE TABLE part (part_id INT PRIMARY KEY, name VARCHAR(255), description TEXT);
CREATE TABLE inventory (whse_id INT REFERENCES warehouse(whse_id), part_id INT REFERENCES part(part_id), quantity_on_hand INT, PRIMARY KEY (whse_id, part_id));
INSERT INTO warehouse (whse_id, location, capacity) VALUES (1, 'Central Warehouse', 10000), (2, 'West Coast Warehouse', 5000), (3, 'East Coast Warehouse', 7500);
INSERT INTO part (part_id, name, description) VALUES (1, 'Widget A', 'Essential widget for product X'), (2, 'Widget B', 'Secondary widget for product X'), (3, 'Gear C', 'Essential gear for product Y'), (4, 'Spring D', 'Essential spring for product Y'), (5, 'Screw E', 'Essential screw for product Z');
INSERT INTO inventory (whse_id, part_id, quantity_on_hand) VALUES (1, 1, 1000), (1, 2, 500), (1, 3, 750), (1, 4, 250), (1, 5, 100), (2, 1, 250), (2, 2, 100), (2, 3, 500), (2, 4, 125), (2, 5, 50), (3, 1, 500), (3, 2, 250), (3, 3, 375), (3, 4, 62), (3, 5, 25);","SELECT whse_id, part_id, MAX(quantity_on_hand) AS max_quantity
FROM inventory
GROUP BY whse_id
ORDER BY whse_id;","This query groups the `inventory` table by `whse_id` and calculates the maximum `quantity_on_hand` for each group. Then, it orders the results by `whse_id`."
784,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data definition: creating, altering, or dropping tables and other database objects",What is the average number of units produced per day for each product in the last 30 days?,"CREATE TABLE Production (   product_id INT PRIMARY KEY,   product_name VARCHAR(255) NOT NULL,   production_date DATE NOT NULL,   units_produced INT NOT NULL);","WITH DailyProduction AS ( SELECT   product_id,   production_date,   units_produced,   ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY production_date) AS row_num FROM Production WHERE production_date >= DATE('now', '-30 days') ), AverageProduction AS ( SELECT   product_id,   AVG(units_produced) AS avg_units_produced FROM DailyProduction GROUP BY product_id ) SELECT   p.product_name,   COALESCE(a.avg_units_produced, 0) AS avg_units_produced_per_day FROM Products p LEFT JOIN AverageProduction a ON p.product_id = a.product_id ORDER BY p.product_name;","1. Create a common table expression (CTE) called `DailyProduction` that selects the product ID, production date, units produced, and a row number for each product in the last 30 days. 
2. Create another CTE called `AverageProduction` that calculates the average units produced per product ID. 
3. Join the `Products` table with the `AverageProduction` CTE using a LEFT JOIN to include products that may not have production data in the last 30 days. 
4. Select the product name and the average units produced per day, or 0 if there is no production data for the product in the last 30 days. 
5. Order the results by product name."
785,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 10 customers with the most outstanding balance on their credit cards in the state of California for the month of January 2023.,"CREATE TABLE Customers (
  customer_id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  address VARCHAR(255),
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT
);

CREATE TABLE CreditCards (
  card_id INT PRIMARY KEY,
  customer_id INT REFERENCES Customers(customer_id),
  balance DECIMAL(10,2) NOT NULL,
  due_date DATE
);

CREATE VIEW Top10CustomersByBalance AS
SELECT TOP 10 WITH TIES c.name, SUM(cc.balance) AS outstanding_balance
FROM Customers c
JOIN CreditCards cc ON c.customer_id = cc.customer_id
WHERE c.state = 'California' AND MONTH(cc.due_date) = 1 AND YEAR(cc.due_date) = 2023
GROUP BY c.name
ORDER BY outstanding_balance DESC;",SELECT * FROM Top10CustomersByBalance;,"This SQL query first joins the Customers and CreditCards tables on the customer_id field. Then, it filters the results to only include customers in the state of California and whose credit card due date is in January 2023. The query then groups the results by customer name and calculates the sum of the outstanding balance for each customer. Finally, the query selects the top 10 customers with the highest outstanding balance and orders them in descending order."
786,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,What is the average daily volume of transactions for the month of January 2023 for each bank branch in the United States?,"CREATE TABLE Branches (
  branch_id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  city VARCHAR(255),
  state VARCHAR(255),
  zip_code INT
);

CREATE TABLE Transactions (
  transaction_id INT PRIMARY KEY,
  branch_id INT REFERENCES Branches(branch_id),
  date DATE,
  amount DECIMAL(10,2) NOT NULL
);

CREATE VIEW DailyTransactionVolume AS
SELECT b.name, t.date, SUM(t.amount) AS daily_volume
FROM Branches b
JOIN Transactions t ON b.branch_id = t.branch_id
WHERE b.state = 'United States' AND MONTH(t.date) = 1 AND YEAR(t.date) = 2023
GROUP BY b.name, t.date;","SELECT b.name, AVG(dtv.daily_volume) AS average_daily_volume
FROM Branches b
JOIN DailyTransactionVolume dtv ON b.branch_id = dtv.branch_id
GROUP BY b.name;","This SQL query first joins the Branches and Transactions tables on the branch_id field. Then, it filters the results to only include transactions that occurred in January 2023 and branches located in the United States. The query then groups the results by branch name and date and calculates the sum of the transaction amount for each branch on each day. Finally, it calculates the average daily transaction volume for each branch."
787,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"For each stock in the S&P 500 index, find the total number of shares traded in the month of January 2023 and the average price per share.","CREATE TABLE Stocks (
  stock_symbol VARCHAR(10) PRIMARY KEY,
  company_name VARCHAR(255) NOT NULL,
  sector VARCHAR(255)
);

CREATE TABLE Trades (
  trade_id INT PRIMARY KEY,
  stock_symbol VARCHAR(10) REFERENCES Stocks(stock_symbol),
  date DATE,
  price DECIMAL(10,2) NOT NULL,
  volume INT
);

CREATE VIEW SAndP500Trades AS
SELECT s.stock_symbol, t.date, t.price, t.volume
FROM Stocks s
JOIN Trades t ON s.stock_symbol = t.stock_symbol
WHERE s.stock_symbol IN (SELECT stock_symbol FROM Stocks WHERE sector = 'S&P 500')
AND MONTH(t.date) = 1 AND YEAR(t.date) = 2023;","SELECT st.stock_symbol, SUM(st.volume) AS total_shares_traded, AVG(st.price) AS average_price
FROM SAndP500Trades st
GROUP BY st.stock_symbol;","This SQL query first joins the Stocks and Trades tables on the stock_symbol field. Then, it filters the results to only include trades that occurred in January 2023 and stocks that are part of the S&P 500 index. The query then groups the results by stock symbol and calculates the sum of the traded volume and the average price per share for each stock."
788,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"What is the portfolio composition of the Vanguard 500 Index Fund (VFINX) as of January 31, 2023?","CREATE TABLE MutualFunds (
  fund_symbol VARCHAR(10) PRIMARY KEY,
  fund_name VARCHAR(255) NOT NULL,
  inception_date DATE
);

CREATE TABLE Holdings (
  holding_id INT PRIMARY KEY,
  fund_symbol VARCHAR(10) REFERENCES MutualFunds(fund_symbol),
  stock_symbol VARCHAR(10) REFERENCES Stocks(stock_symbol),
  weight DECIMAL(5,2) NOT NULL,
  date DATE
);

CREATE VIEW VFINXHoldings AS
SELECT h.stock_symbol, s.company_name, h.weight
FROM Holdings h
JOIN Stocks s ON h.stock_symbol = s.stock_symbol
WHERE h.fund_symbol = 'VFINX' AND h.date = '2023-01-31';",SELECT * FROM VFINXHoldings;,"This SQL query first joins the Holdings and Stocks tables on the stock_symbol field. Then, it filters the results to only include holdings for the Vanguard 500 Index Fund (VFINX) as of January 31, 2023. The query then selects the stock symbol, company name, and weight for each holding in the portfolio."
789,finance,"Detailed financial data including stock market trends, transaction records, investment portfolios, risk assessment models, and banking operations.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"What is the beta of Apple Inc. (AAPL) stock compared to the S&P 500 index as of January 31, 2023?","CREATE TABLE Stocks (
  stock_symbol VARCHAR(10) PRIMARY KEY,
  company_name VARCHAR(255) NOT NULL,
  sector VARCHAR(255)
);

CREATE TABLE MarketData (
  date DATE PRIMARY KEY,
  sp500_index DECIMAL(10,2) NOT NULL,
  aapl_price DECIMAL(10,2) NOT NULL
);",SELECT (SELECT aapl_price FROM MarketData WHERE date = '2023-01-31') / (SELECT sp500_index FROM MarketData WHERE date = '2023-01-31') AS beta;,"This SQL query first selects the closing price of Apple Inc. (AAPL) stock and the S&P 500 index on January 31, 2023. Then, it calculates the beta of AAPL stock by dividing its price by the S&P 500 index."
790,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Update the contact phone number for listing ID 1234567 in the Listings table to 555-123-4567.,"CREATE TABLE Listings (ListingID INT PRIMARY KEY, Address VARCHAR(255), City VARCHAR(255), State VARCHAR(255), ZipCode INT, Price INT, Bedrooms INT, Bathrooms INT, ContactPhone VARCHAR(255));
INSERT INTO Listings (ListingID, Address, City, State, ZipCode, Price, Bedrooms, Bathrooms, ContactPhone) VALUES
(1234567, '123 Main St', 'Anytown', 'CA', 91234, 500000, 3, 2, '555-012-3456'),
(7654321, '456 Oak Ave', 'Anytown', 'CA', 91234, 600000, 4, 3, '555-987-6543');",UPDATE Listings SET ContactPhone = '555-123-4567' WHERE ListingID = 1234567;,This SQL statement updates the ContactPhone field in the Listings table for the record with ListingID 1234567 to the new value '555-123-4567'.
791,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Delete the listing with ListingID 7654321 from the Listings table.,"CREATE TABLE Listings (ListingID INT PRIMARY KEY, Address VARCHAR(255), City VARCHAR(255), State VARCHAR(255), ZipCode INT, Price INT, Bedrooms INT, Bathrooms INT, ContactPhone VARCHAR(255));
INSERT INTO Listings (ListingID, Address, City, State, ZipCode, Price, Bedrooms, Bathrooms, ContactPhone) VALUES
(1234567, '123 Main St', 'Anytown', 'CA', 91234, 500000, 3, 2, '555-012-3456'),
(7654321, '456 Oak Ave', 'Anytown', 'CA', 91234, 600000, 4, 3, '555-987-6543');",DELETE FROM Listings WHERE ListingID = 7654321;,This SQL statement deletes the record with ListingID 7654321 from the Listings table.
792,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Insert a new listing into the Listings table with the following details: Address: 789 Pine St, City: Springfield, State: IL, ZipCode: 62701, Price: 350000, Bedrooms: 2, Bathrooms: 1.5, ContactPhone: 555-234-5678.","CREATE TABLE Listings (ListingID INT PRIMARY KEY, Address VARCHAR(255), City VARCHAR(255), State VARCHAR(255), ZipCode INT, Price INT, Bedrooms INT, Bathrooms INT, ContactPhone VARCHAR(255));
INSERT INTO Listings (ListingID, Address, City, State, ZipCode, Price, Bedrooms, Bathrooms, ContactPhone) VALUES
(1234567, '123 Main St', 'Anytown', 'CA', 91234, 500000, 3, 2, '555-012-3456'),
(7654321, '456 Oak Ave', 'Anytown', 'CA', 91234, 600000, 4, 3, '555-987-6543');","INSERT INTO Listings (Address, City, State, ZipCode, Price, Bedrooms, Bathrooms, ContactPhone) VALUES ('789 Pine St', 'Springfield', 'IL', 62701, 350000, 2, 1.5, '555-234-5678');","This SQL statement inserts a new record into the Listings table with the specified address, city, state, zip code, price, bedrooms, bathrooms, and contact phone number."
793,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find all listings in the Listings table that are located in the city of Anytown and have a price of less than $550,000.","CREATE TABLE Listings (ListingID INT PRIMARY KEY, Address VARCHAR(255), City VARCHAR(255), State VARCHAR(255), ZipCode INT, Price INT, Bedrooms INT, Bathrooms INT, ContactPhone VARCHAR(255));
INSERT INTO Listings (ListingID, Address, City, State, ZipCode, Price, Bedrooms, Bathrooms, ContactPhone) VALUES
(1234567, '123 Main St', 'Anytown', 'CA', 91234, 500000, 3, 2, '555-012-3456'),
(7654321, '456 Oak Ave', 'Anytown', 'CA', 91234, 600000, 4, 3, '555-987-6543');",SELECT * FROM Listings WHERE City = 'Anytown' AND Price < 550000;,"This SQL statement selects all records from the Listings table where the city is 'Anytown' and the price is less than $550,000."
794,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average price of listings in the Listings table that have 3 bedrooms.,"CREATE TABLE Listings (ListingID INT PRIMARY KEY, Address VARCHAR(255), City VARCHAR(255), State VARCHAR(255), ZipCode INT, Price INT, Bedrooms INT, Bathrooms INT, ContactPhone VARCHAR(255));
INSERT INTO Listings (ListingID, Address, City, State, ZipCode, Price, Bedrooms, Bathrooms, ContactPhone) VALUES
(1234567, '123 Main St', 'Anytown', 'CA', 91234, 500000, 3, 2, '555-012-3456'),
(7654321, '456 Oak Ave', 'Anytown', 'CA', 91234, 600000, 4, 3, '555-987-6543');",SELECT AVG(Price) FROM Listings WHERE Bedrooms = 3;,This SQL statement calculates the average price of listings in the Listings table that have 3 bedrooms.
795,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",How many patients had a heart attack in the last month?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zipcode INT, phone_number VARCHAR(255), email VARCHAR(255), insurance_provider VARCHAR(255), policy_number VARCHAR(255));
CREATE TABLE medical_history (patient_id INT, diagnosis VARCHAR(255), date_of_diagnosis DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE treatments (patient_id INT, treatment_name VARCHAR(255), start_date DATE, end_date DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE outcomes (patient_id INT, outcome_name VARCHAR(255), date_of_outcome DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));","WITH HeartAttackPatients AS (SELECT patient_id FROM medical_history WHERE diagnosis = 'Heart Attack' AND date_of_diagnosis BETWEEN DATE('now', '-1 month') AND DATE('now'))
SELECT COUNT(*) FROM HeartAttackPatients;","This query first creates a temporary table called `HeartAttackPatients` that contains the patient IDs of all patients who have been diagnosed with a heart attack in the last month. Then, it selects the count of patient IDs from the `HeartAttackPatients` table, which gives the total number of patients who had a heart attack in the last month."
796,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 most common medications prescribed for patients with diabetes?,"CREATE TABLE medications (medication_id INT PRIMARY KEY, medication_name VARCHAR(255), generic_name VARCHAR(255), dosage VARCHAR(255), manufacturer VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT, medication_id INT, date_prescribed DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id), FOREIGN KEY (medication_id) REFERENCES medications(medication_id));
CREATE TABLE diagnoses (patient_id INT, diagnosis_id INT, date_of_diagnosis DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE diagnosis_codes (diagnosis_id INT PRIMARY KEY, diagnosis_code VARCHAR(255), diagnosis_description VARCHAR(255));","WITH DiabetesPatients AS (SELECT patient_id FROM diagnoses WHERE diagnosis_id = (SELECT diagnosis_id FROM diagnosis_codes WHERE diagnosis_description = 'Diabetes'))
SELECT medication_name, COUNT(*) AS num_prescriptions
FROM prescriptions
JOIN DiabetesPatients ON prescriptions.patient_id = DiabetesPatients.patient_id
GROUP BY medication_name
ORDER BY num_prescriptions DESC
LIMIT 5;","This query first creates a temporary table called `DiabetesPatients` that contains the patient IDs of all patients who have been diagnosed with diabetes. Then, it joins the `prescriptions` table with the `DiabetesPatients` table on the `patient_id` column. This gives us a table of all prescriptions for patients with diabetes. Then, it groups the prescriptions by medication name and counts the number of prescriptions for each medication. Finally, it sorts the results in descending order by the number of prescriptions and limits the output to the top 5 medications."
797,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What is the average length of stay for patients admitted to the hospital with pneumonia?,"CREATE TABLE admissions (admission_id INT PRIMARY KEY, patient_id INT, admission_date DATE, discharge_date DATE, admitting_physician VARCHAR(255), discharge_physician VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE diagnoses (patient_id INT, diagnosis_id INT, date_of_diagnosis DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE diagnosis_codes (diagnosis_id INT PRIMARY KEY, diagnosis_code VARCHAR(255), diagnosis_description VARCHAR(255));","WITH PneumoniaAdmissions AS (SELECT admission_id FROM diagnoses WHERE diagnosis_id = (SELECT diagnosis_id FROM diagnosis_codes WHERE diagnosis_description = 'Pneumonia'))
SELECT AVG(discharge_date - admission_date) AS average_length_of_stay
FROM admissions
WHERE admission_id IN (SELECT admission_id FROM PneumoniaAdmissions);","This query first creates a temporary table called `PneumoniaAdmissions` that contains the admission IDs of all patients who have been diagnosed with pneumonia. Then, it calculates the average length of stay for patients in the `PneumoniaAdmissions` table by subtracting the admission date from the discharge date and averaging the results."
798,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What are the side effects of the drug metformin?,"CREATE TABLE medications (medication_id INT PRIMARY KEY, medication_name VARCHAR(255), generic_name VARCHAR(255), dosage VARCHAR(255), manufacturer VARCHAR(255));
CREATE TABLE side_effects (side_effect_id INT PRIMARY KEY, side_effect_name VARCHAR(255), side_effect_description TEXT);
CREATE TABLE medication_side_effects (medication_id INT, side_effect_id INT, FOREIGN KEY (medication_id) REFERENCES medications(medication_id), FOREIGN KEY (side_effect_id) REFERENCES side_effects(side_effect_id));","SELECT side_effect_name, side_effect_description
FROM side_effects
JOIN medication_side_effects ON side_effects.side_effect_id = medication_side_effects.side_effect_id
JOIN medications ON medication_side_effects.medication_id = medications.medication_id
WHERE medication_name = 'Metformin';","This query joins the `side_effects`, `medication_side_effects`, and `medications` tables to find the side effects associated with the drug metformin. It selects the side effect name and description from the `side_effects` table, where the medication ID in the `medication_side_effects` table matches the medication ID for metformin in the `medications` table."
799,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What is the success rate of the drug tamoxifen for treating breast cancer?,"CREATE TABLE treatments (patient_id INT, treatment_name VARCHAR(255), start_date DATE, end_date DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE outcomes (patient_id INT, outcome_name VARCHAR(255), date_of_outcome DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE diagnoses (patient_id INT, diagnosis_id INT, date_of_diagnosis DATE, physician_name VARCHAR(255), notes TEXT, FOREIGN KEY (patient_id) REFERENCES patients(patient_id));
CREATE TABLE diagnosis_codes (diagnosis_id INT PRIMARY KEY, diagnosis_code VARCHAR(255), diagnosis_description VARCHAR(255));","WITH TamoxifenPatients AS (SELECT patient_id FROM treatments WHERE treatment_name = 'Tamoxifen' AND diagnosis_id = (SELECT diagnosis_id FROM diagnosis_codes WHERE diagnosis_description = 'Breast Cancer'))
SELECT COUNT(*) AS num_patients_treated, SUM(CASE WHEN outcome_name = 'Complete Remission' THEN 1 ELSE 0 END) AS num_patients_successful
FROM TamoxifenPatients
JOIN outcomes ON TamoxifenPatients.patient_id = outcomes.patient_id;","This query first creates a temporary table called `TamoxifenPatients` that contains the patient IDs of all patients who have been treated with tamoxifen for breast cancer. Then, it joins the `TamoxifenPatients` table with the `outcomes` table to find the number of patients who achieved complete remission. Finally, it calculates the success rate by dividing the number of patients who achieved complete remission by the total number of patients treated with tamoxifen."
800,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the average number of security vulnerabilities identified in software products by development teams in Germany and the United States, by month, during the first quarter of 2024?","CREATE TABLE vulnerabilities (vulnerability_id INT PRIMARY KEY, product_id INT, severity VARCHAR(255), discovered_date DATE, assigned_to VARCHAR(255), status VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, name VARCHAR(255), development_team VARCHAR(255), country VARCHAR(255));
CREATE TABLE teams (team_id INT PRIMARY KEY, name VARCHAR(255), country VARCHAR(255));
INSERT INTO vulnerabilities (vulnerability_id, product_id, severity, discovered_date, assigned_to, status) VALUES
(1, 101, 'High', '2024-01-15', 'John Smith', 'Open'),
(2, 102, 'Medium', '2024-01-22', 'Alice Johnson', 'Resolved'),
(3, 103, 'Low', '2024-02-05', 'Bob Williams', 'Open'),
(4, 104, 'Critical', '2024-02-10', 'David Lee', 'Open'),
(5, 105, 'High', '2024-02-17', 'Emily Chen', 'Open'),
(6, 106, 'Medium', '2024-03-03', 'Frank Brown', 'Resolved'),
(7, 107, 'Low', '2024-03-10', 'Helen Garcia', 'Open'),
(8, 108, 'Critical', '2024-03-17', 'Isaac Clark', 'Open');
INSERT INTO products (product_id, name, development_team, country) VALUES
(101, 'Product A', 'Team Alpha', 'Germany'),
(102, 'Product B', 'Team Beta', 'Germany'),
(103, 'Product C', 'Team Gamma', 'United States'),
(104, 'Product D', 'Team Delta', 'United States'),
(105, 'Product E', 'Team Epsilon', 'Germany'),
(106, 'Product F', 'Team Zeta', 'Germany'),
(107, 'Product G', 'Team Eta', 'United States'),
(108, 'Product H', 'Team Theta', 'United States');
INSERT INTO teams (team_id, name, country) VALUES
(1, 'Team Alpha', 'Germany'),
(2, 'Team Beta', 'Germany'),
(3, 'Team Gamma', 'United States'),
(4, 'Team Delta', 'United States'),
(5, 'Team Epsilon', 'Germany'),
(6, 'Team Zeta', 'Germany'),
(7, 'Team Eta', 'United States'),
(8, 'Team Theta', 'United States');","SELECT
    strftime('%Y-%m', discovered_date) AS month,
    p.country,
    AVG(v.severity) AS avg_severity
FROM
    vulnerabilities v
    LEFT JOIN products p ON v.product_id = p.product_id
WHERE
    p.country IN ('Germany', 'United States')
    AND strftime('%Y-%m', discovered_date) BETWEEN '2024-01' AND '2024-03'
GROUP BY
    month, p.country
HAVING
    AVG(v.severity) > 0;","This query calculates the average severity of security vulnerabilities identified in software products developed in Germany and the United States, by month, during the first quarter of 2024.

1. The query starts by joining the `vulnerabilities` table to the `products` table on the `product_id` field.
2. It then filters the results to only include vulnerabilities discovered in Germany or the United States between January and March 2024.
3. The query then groups the results by month and country, and calculates the average severity of vulnerabilities for each group.
4. Finally, the query filters out any groups with an average severity of 0, as these groups would not have any vulnerabilities.

The output of the query will be a table with three columns: month, country, and avg_severity. The month column will show the month in which the vulnerability was discovered. The country column will show the country in which the product was developed. The avg_severity column will show the average severity of the vulnerabilities discovered in that month and country."
801,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List all tables and views in the database that contain information about data privacy.,"CREATE TABLE Data_Privacy_Regulations (
    Regulation_ID INT PRIMARY KEY,
    Country VARCHAR(50) NOT NULL,
    Regulation_Name VARCHAR(100) NOT NULL,
    Effective_Date DATE,
    Description TEXT
);

CREATE TABLE Data_Breaches (
    Breach_ID INT PRIMARY KEY,
    Company_Name VARCHAR(100) NOT NULL,
    Breach_Date DATE,
    Number_of_Records_Affected INT,
    Type_of_Data_Breached VARCHAR(50),
    Description TEXT
);

CREATE VIEW Data_Privacy_Compliance AS
SELECT
    dp.Regulation_Name,
    dp.Description,
    COUNT(db.Breach_ID) AS Number_of_Breaches
FROM
    Data_Privacy_Regulations dp
LEFT JOIN
    Data_Breaches db ON dp.Country = db.Company_Name
GROUP BY
    dp.Regulation_Name,
    dp.Description
ORDER BY
    dp.Regulation_Name;","SELECT table_name, view_name
FROM information_schema.tables
WHERE table_schema = 'data_privacy' OR table_name IN (SELECT view_name FROM information_schema.views WHERE table_schema = 'data_privacy');",This query retrieves the names of all tables and views in the 'data_privacy' schema.
802,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total number of data breaches that have occurred in each country, sorted by the highest number of breaches first.","CREATE TABLE Data_Breaches (
    Breach_ID INT PRIMARY KEY,
    Company_Name VARCHAR(100) NOT NULL,
    Breach_Date DATE,
    Number_of_Records_Affected INT,
    Type_of_Data_Breached VARCHAR(50),
    Description TEXT
);

CREATE VIEW Data_Breaches_by_Country AS
SELECT
    db.Company_Name,
    COUNT(db.Breach_ID) AS Number_of_Breaches
FROM
    Data_Breaches db
GROUP BY
    db.Company_Name
ORDER BY
    db.Company_Name;","SELECT dbc.Company_Name, COUNT(dbc.Number_of_Breaches) AS Total_Breaches
FROM Data_Breaches_by_Country dbc
GROUP BY dbc.Company_Name
ORDER BY Total_Breaches DESC;","This query first retrieves a view of data breaches grouped by country. Then, it aggregates the number of breaches per country and sorts the result in descending order."
803,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top five companies with the most data breaches, along with the total number of records affected.","CREATE TABLE Data_Breaches (
    Breach_ID INT PRIMARY KEY,
    Company_Name VARCHAR(100) NOT NULL,
    Breach_Date DATE,
    Number_of_Records_Affected INT,
    Type_of_Data_Breached VARCHAR(50),
    Description TEXT
);

CREATE VIEW Data_Breaches_by_Company AS
SELECT
    db.Company_Name,
    COUNT(db.Breach_ID) AS Number_of_Breaches,
    SUM(db.Number_of_Records_Affected) AS Total_Records_Affected
FROM
    Data_Breaches db
GROUP BY
    db.Company_Name
ORDER BY
    db.Company_Name;","SELECT TOP 5 dbc.Company_Name, dbc.Total_Records_Affected
FROM Data_Breaches_by_Company dbc
ORDER BY dbc.Total_Records_Affected DESC;","This query retrieves a view of data breaches grouped by company and calculates the total number of records affected. Then, it selects the top five companies with the highest number of affected records."
804,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average number of records affected per data breach, excluding breaches with less than 1000 affected records.","CREATE TABLE Data_Breaches (
    Breach_ID INT PRIMARY KEY,
    Company_Name VARCHAR(100) NOT NULL,
    Breach_Date DATE,
    Number_of_Records_Affected INT,
    Type_of_Data_Breached VARCHAR(50),
    Description TEXT
);

CREATE VIEW Data_Breaches_Summary AS
SELECT
    COUNT(*) AS Total_Breaches,
    SUM(Number_of_Records_Affected) AS Total_Records_Affected
FROM
    Data_Breaches;","SELECT AVG(db.Number_of_Records_Affected) AS Average_Records_Affected
FROM Data_Breaches db
WHERE db.Number_of_Records_Affected >= 1000;","This query calculates the average number of records affected per data breach, excluding breaches with less than 1000 affected records."
805,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average yield of wheat in France?,"CREATE TABLE wheat_yields (country TEXT, year INTEGER, yield_kg_per_ha REAL); INSERT INTO wheat_yields VALUES ('France', 2020, 7.2), ('France', 2021, 7.5), ('Germany', 2020, 6.8), ('Germany', 2021, 7.0), ('United States', 2020, 6.5), ('United States', 2021, 6.7);",SELECT AVG(yield_kg_per_ha) FROM wheat_yields WHERE country = 'France';,"This query selects the average yield of wheat in France from the 'wheat_yields' table, where the 'country' column equals 'France'."
806,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 countries with the highest average corn yields in 2021?,"CREATE TABLE corn_yields (country TEXT, year INTEGER, yield_kg_per_ha REAL); INSERT INTO corn_yields VALUES ('United States', 2020, 10.5, 'United States', 2021, 10.8), ('China', 2020, 5.8, 'China', 2021, 5.9), ('Brazil', 2020, 5.2, 'Brazil', 2021, 5.4), ('Argentina', 2020, 7.0, 'Argentina', 2021, 7.2), ('India', 2020, 3.5, 'India', 2021, 3.7);",SELECT country FROM corn_yields WHERE year = 2021 ORDER BY yield_kg_per_ha DESC LIMIT 5;,"This query selects the 'country' column from the 'corn_yields' table where the 'year' column equals 2021, orders the results by the 'yield_kg_per_ha' column in descending order, and limits the output to the top 5 rows."
807,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total rainfall in California during the growing season of 2021?,"CREATE TABLE weather_data (state TEXT, year INTEGER, month INTEGER, rainfall_mm REAL); INSERT INTO weather_data VALUES ('California', 2021, 4, 50.2, 'California', 2021, 5, 38.5, 'California', 2021, 6, 22.1, 'California', 2021, 7, 8.9, 'California', 2021, 8, 14.3, 'California', 2021, 9, 10.7);",SELECT SUM(rainfall_mm) FROM weather_data WHERE state = 'California' AND month BETWEEN 4 AND 9 AND year = 2021;,"This query selects the sum of the 'rainfall_mm' column from the 'weather_data' table where the 'state' column equals 'California', the 'month' column is between 4 and 9 (inclusive), and the 'year' column equals 2021."
808,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the average temperature in Texas during the months of June, July, and August in 2022?","CREATE TABLE weather_data (state TEXT, year INTEGER, month INTEGER, temperature_celsius REAL); INSERT INTO weather_data VALUES ('Texas', 2022, 6, 28.5, 'Texas', 2022, 7, 32.1, 'Texas', 2022, 8, 31.8, 'Texas', 2021, 6, 27.8, 'Texas', 2021, 7, 31.5, 'Texas', 2021, 8, 31.2);","SELECT AVG(temperature_celsius) FROM weather_data WHERE state = 'Texas' AND month IN (6, 7, 8) AND year = 2022;","This query selects the average of the 'temperature_celsius' column from the 'weather_data' table where the 'state' column equals 'Texas', the 'month' column is included in the list (6, 7, 8), and the 'year' column equals 2022."
809,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 3 crops in terms of total production in India in 2022?,"CREATE TABLE crop_production (country TEXT, year INTEGER, crop TEXT, production_tonnes REAL); INSERT INTO crop_production VALUES ('India', 2022, 'Rice', 120.5, 'India', 2022, 'Wheat', 105.2, 'India', 2022, 'Pulses', 24.8, 'India', 2021, 'Rice', 118.7, 'India', 2021, 'Wheat', 102.4, 'India', 2021, 'Pulses', 23.5);","SELECT crop, SUM(production_tonnes) AS total_production FROM crop_production WHERE country = 'India' AND year = 2022 GROUP BY crop ORDER BY total_production DESC LIMIT 3;","This query selects the 'crop' and calculates the sum of the 'production_tonnes' column as 'total_production' from the 'crop_production' table where the 'country' column equals 'India' and the 'year' column equals 2022. It groups the results by the 'crop' column, orders them by the 'total_production' column in descending order, and limits the output to the top 3 rows."
810,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete all records in the `Artists` table where the artist's country of origin is 'United States' and their primary artistic medium is 'Painting'.,"CREATE TABLE Artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  country_of_origin VARCHAR(255),  primary_artistic_medium VARCHAR(255),  birth_year INT);  INSERT INTO Artists (artist_id, artist_name, country_of_origin, primary_artistic_medium, birth_year) VALUES  (1, 'Vincent van Gogh', 'Netherlands', 'Painting', 1853),  (2, 'Claude Monet', 'France', 'Painting', 1840),  (3, 'Pablo Picasso', 'Spain', 'Painting', 1881),  (4, 'Georgia O’Keeffe', 'United States', 'Painting', 1887),  (5, 'Frida Kahlo', 'Mexico', 'Painting', 1907),  (6, 'Leonardo da Vinci', 'Italy', 'Painting', 1452),  (7, 'Michelangelo', 'Italy', 'Sculpture', 1475),  (8, 'Auguste Rodin', 'France', 'Sculpture', 1840),  (9, 'Louise Bourgeois', 'France', 'Sculpture', 1911),  (10, 'Alberto Giacometti', 'Switzerland', 'Sculpture', 1901);",DELETE FROM Artists WHERE country_of_origin = 'United States' AND primary_artistic_medium = 'Painting';,This query deletes all records from the `Artists` table where the artist's country of origin is 'United States' and their primary artistic medium is 'Painting'.
811,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the birth year of the artist with the artist ID of 4 to 1888.,"CREATE TABLE Artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  country_of_origin VARCHAR(255),  primary_artistic_medium VARCHAR(255),  birth_year INT);  INSERT INTO Artists (artist_id, artist_name, country_of_origin, primary_artistic_medium, birth_year) VALUES  (1, 'Vincent van Gogh', 'Netherlands', 'Painting', 1853),  (2, 'Claude Monet', 'France', 'Painting', 1840),  (3, 'Pablo Picasso', 'Spain', 'Painting', 1881),  (4, 'Georgia O’Keeffe', 'United States', 'Painting', 1887),  (5, 'Frida Kahlo', 'Mexico', 'Painting', 1907),  (6, 'Leonardo da Vinci', 'Italy', 'Painting', 1452),  (7, 'Michelangelo', 'Italy', 'Sculpture', 1475),  (8, 'Auguste Rodin', 'France', 'Sculpture', 1840),  (9, 'Louise Bourgeois', 'France', 'Sculpture', 1911),  (10, 'Alberto Giacometti', 'Switzerland', 'Sculpture', 1901);",UPDATE Artists SET birth_year = 1888 WHERE artist_id = 4;,This query updates the birth year of the artist with the artist ID of 4 to 1888.
812,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Insert a new record into the Artists table with the following information: artist name: 'Yayoi Kusama', country of origin: 'Japan', primary artistic medium: 'Sculpture and Installation', birth year: 1929.","CREATE TABLE Artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  country_of_origin VARCHAR(255),  primary_artistic_medium VARCHAR(255),  birth_year INT);  INSERT INTO Artists (artist_id, artist_name, country_of_origin, primary_artistic_medium, birth_year) VALUES  (1, 'Vincent van Gogh', 'Netherlands', 'Painting', 1853),  (2, 'Claude Monet', 'France', 'Painting', 1840),  (3, 'Pablo Picasso', 'Spain', 'Painting', 1881),  (4, 'Georgia O’Keeffe', 'United States', 'Painting', 1887),  (5, 'Frida Kahlo', 'Mexico', 'Painting', 1907),  (6, 'Leonardo da Vinci', 'Italy', 'Painting', 1452),  (7, 'Michelangelo', 'Italy', 'Sculpture', 1475),  (8, 'Auguste Rodin', 'France', 'Sculpture', 1840),  (9, 'Louise Bourgeois', 'France', 'Sculpture', 1911),  (10, 'Alberto Giacometti', 'Switzerland', 'Sculpture', 1901);","INSERT INTO Artists (artist_name, country_of_origin, primary_artistic_medium, birth_year) VALUES ('Yayoi Kusama', 'Japan', 'Sculpture and Installation', 1929);","This query inserts a new record into the Artists table with the following information: artist name: 'Yayoi Kusama', country of origin: 'Japan', primary artistic medium: 'Sculpture and Installation', birth year: 1929."
813,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Select the names of all artists who were born before 1900 and whose primary artistic medium is 'Painting' or 'Sculpture'.,"CREATE TABLE Artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  country_of_origin VARCHAR(255),  primary_artistic_medium VARCHAR(255),  birth_year INT);  INSERT INTO Artists (artist_id, artist_name, country_of_origin, primary_artistic_medium, birth_year) VALUES  (1, 'Vincent van Gogh', 'Netherlands', 'Painting', 1853),  (2, 'Claude Monet', 'France', 'Painting', 1840),  (3, 'Pablo Picasso', 'Spain', 'Painting', 1881),  (4, 'Georgia O’Keeffe', 'United States', 'Painting', 1887),  (5, 'Frida Kahlo', 'Mexico', 'Painting', 1907),  (6, 'Leonardo da Vinci', 'Italy', 'Painting', 1452),  (7, 'Michelangelo', 'Italy', 'Sculpture', 1475),  (8, 'Auguste Rodin', 'France', 'Sculpture', 1840),  (9, 'Louise Bourgeois', 'France', 'Sculpture', 1911),  (10, 'Alberto Giacometti', 'Switzerland', 'Sculpture', 1901);",SELECT artist_name FROM Artists WHERE birth_year < 1900 AND (primary_artistic_medium = 'Painting' OR primary_artistic_medium = 'Sculpture');,This query selects the names of all artists who were born before 1900 and whose primary artistic medium is 'Painting' or 'Sculpture'.
814,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Retrieve the names of all artists who have created works in the Impressionist style and who were born in France.,"CREATE TABLE ImpressionistArtists (  ArtistID INT PRIMARY KEY,  ArtistName VARCHAR(255) NOT NULL,  Style VARCHAR(255) NOT NULL,  CountryOfBirth VARCHAR(255) NOT NULL);INSERT INTO ImpressionistArtists (ArtistID, ArtistName, Style, CountryOfBirth) VALUES  (1, 'Claude Monet', 'Impressionism', 'France'),  (2, 'Pierre-Auguste Renoir', 'Impressionism', 'France'),  (3, 'Edgar Degas', 'Impressionism', 'France'),  (4, 'Camille Pissarro', 'Impressionism', 'France'),  (5, 'Mary Cassatt', 'Impressionism', 'United States');",SELECT ArtistName FROM ImpressionistArtists WHERE Style = 'Impressionism' AND CountryOfBirth = 'France';,This query selects the ArtistName from the ImpressionistArtists table where the Style is 'Impressionism' and the CountryOfBirth is 'France'. The query uses a WHERE clause to filter the results based on the specified conditions.
815,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average test score for students in math for each grade level?,"CREATE TABLE student_test_scores (student_id INT, test_name VARCHAR(255), grade_level INT, test_score INT); INSERT INTO student_test_scores (student_id, test_name, grade_level, test_score) VALUES (1, 'Math', 5, 85), (2, 'Math', 6, 92), (3, 'Math', 7, 78), (4, 'Math', 8, 95);","SELECT grade_level, AVG(test_score) FROM student_test_scores WHERE test_name = 'Math' GROUP BY grade_level;","The SQL query first filters the `student_test_scores` table to only include records where the `test_name` is 'Math'. Then, it groups the remaining records by `grade_level` and calculates the average `test_score` for each grade level using the `AVG()` function. The result is a table that shows the average test score for students in math for each grade level."
816,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many students are enrolled in each course?,"CREATE TABLE student_enrollments (student_id INT, course_id INT, course_name VARCHAR(255)); INSERT INTO student_enrollments (student_id, course_id, course_name) VALUES (1, 101, 'Math'), (2, 102, 'Science'), (3, 101, 'Math'), (4, 103, 'English');","SELECT course_name, COUNT(student_id) FROM student_enrollments GROUP BY course_name;","The SQL query first groups the `student_enrollments` table by `course_name`. Then, it counts the number of `student_id` records in each group using the `COUNT()` function. The result is a table that shows the number of students enrolled in each course."
817,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Update the student's name to 'John Smith' where the student id is 1.,"CREATE TABLE students (student_id INT, student_name VARCHAR(255)); INSERT INTO students (student_id, student_name) VALUES (1, 'Jane Doe'), (2, 'Mary Jones'), (3, 'Peter Brown');",UPDATE students SET student_name = 'John Smith' WHERE student_id = 1;,The SQL query updates the `student_name` column in the `students` table to 'John Smith' for the record where the `student_id` is 1. The `WHERE` clause ensures that only the record with the specified `student_id` is updated.
818,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Delete the record for the student with id 3.,"CREATE TABLE students (student_id INT, student_name VARCHAR(255)); INSERT INTO students (student_id, student_name) VALUES (1, 'Jane Doe'), (2, 'Mary Jones'), (3, 'Peter Brown');",DELETE FROM students WHERE student_id = 3;,The SQL query deletes the record from the `students` table where the `student_id` is 3. The `WHERE` clause ensures that only the record with the specified `student_id` is deleted.
819,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total number of students enrolled in each grade level?,"CREATE TABLE student_enrollments (student_id INT, grade_level INT); INSERT INTO student_enrollments (student_id, grade_level) VALUES (1, 5), (2, 6), (3, 7), (4, 8);","SELECT grade_level, COUNT(student_id) FROM student_enrollments GROUP BY grade_level;",The SQL query groups the `student_enrollments` table by `grade_level` and then counts the number of `student_id` records in each group using the `COUNT()` function. The result is a table that shows the total number of students enrolled in each grade level.
820,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What was the average closing price of Apple stock (AAPL) in the past month?,"CREATE TABLE AAPL_STOCK_PRICES (Date DATE, Open_Price DECIMAL, High_Price DECIMAL, Low_Price DECIMAL, Closing_Price DECIMAL, Volume INTEGER);INSERT INTO AAPL_STOCK_PRICES VALUES ('2023-09-01', 168.47, 170.37, 167.51, 169.45, 154321000), ('2023-09-02', 169.47, 170.98, 168.23, 169.74, 138942000), ('2023-09-03', 169.74, 171.43, 168.77, 170.41, 143298000), ('2023-09-04', 170.41, 172.15, 169.79, 171.23, 149876000), ('2023-09-05', 171.23, 172.34, 170.67, 171.72, 152934000), ('2023-09-06', 171.72, 173.45, 171.29, 172.95, 147823000), ('2023-09-07', 172.95, 174.23, 172.51, 173.52, 144987000), ('2023-09-08', 173.52, 174.98, 172.93, 174.21, 139872000), ('2023-09-09', 174.21, 175.47, 173.89, 174.93, 142398000), ('2023-09-10', 174.93, 176.21, 174.72, 175.89, 140982000), ('2023-09-11', 175.89, 176.98, 175.34, 176.47, 145329000), ('2023-09-12', 176.47, 177.23, 176.11, 176.89, 142876000), ('2023-09-13', 176.89, 177.98, 176.45, 177.41, 138942000), ('2023-09-14', 177.41, 178.34, 177.09, 177.93, 141298000), ('2023-09-15', 177.93, 179.47, 177.87, 178.92, 144324000), ('2023-09-16', 178.92, 179.98, 178.45, 179.41, 140876000), ('2023-09-17', 179.41, 180.23, 179.11, 179.89, 137823000), ('2023-09-18', 179.89, 180.98, 179.45, 180.41, 142934000), ('2023-09-19', 180.41, 181.34, 180.09, 181.23, 141298000), ('2023-09-20', 181.23, 182.47, 181.12, 182.09, 144324000), ('2023-09-21', 182.09, 182.98, 181.54, 182.41, 140876000), ('2023-09-22', 182.41, 183.23, 182.11, 182.93, 137823000), ('2023-09-23', 182.93, 183.98, 182.45, 183.41, 142934000), ('2023-09-24', 183.41, 184.34, 183.09, 184.23, 141298000), ('2023-09-25', 184.23, 185.47, 184.12, 185.09, 144324000), ('2023-09-26', 185.09, 185.98, 184.54, 185.41, 140876000), ('2023-09-27', 185.41, 186.23, 185.11, 185.93, 137823000), ('2023-09-28', 185.93, 186.98, 185.45, 186.41, 142934000), ('2023-09-29', 186.41, 187.34, 186.09, 187.23, 141298000), ('2023-09-30', 187.23, 188.47, 187.12, 188.09, 144324000)",SELECT AVG(Closing_Price) AS Average_Closing_Price FROM AAPL_STOCK_PRICES WHERE Date >= DATE('2023-09-01') AND Date <= DATE('2023-09-30'),"1. Filter the AAPL_STOCK_PRICES table to include data only from the period of September 1, 2023, to September 30, 2023.
2. Calculate the average of the Closing_Price column for the filtered data.
3. Return the calculated average as Average_Closing_Price."
821,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Which investment portfolios have a risk score above 7 and have experienced a return on investment (ROI) of at least 10% in the past year?,"CREATE TABLE Investment_Portfolios (   Portfolio_ID INT PRIMARY KEY,   Portfolio_Name VARCHAR(255) NOT NULL,   Risk_Score INT NOT NULL,   ROI DECIMAL(5,2) NOT NULL,   Start_Date DATE NOT NULL );
CREATE TABLE Transactions (   Transaction_ID INT PRIMARY KEY,   Portfolio_ID INT REFERENCES Investment_Portfolios(Portfolio_ID),   Transaction_Type VARCHAR(255) NOT NULL,   Amount DECIMAL(10,2) NOT NULL,   Transaction_Date DATE NOT NULL );
INSERT INTO Investment_Portfolios (Portfolio_ID, Portfolio_Name, Risk_Score, ROI, Start_Date) VALUES   (1, 'High Growth Portfolio', 8, 0.15, '2021-01-01'),   (2, 'Balanced Portfolio', 5, 0.10, '2022-02-15'),   (3, 'Conservative Portfolio', 3, 0.05, '2023-03-01');
INSERT INTO Transactions (Transaction_ID, Portfolio_ID, Transaction_Type, Amount, Transaction_Date) VALUES   (1, 1, 'Deposit', 10000, '2021-01-01'),   (2, 1, 'Withdrawal', 2000, '2021-06-01'),   (3, 2, 'Deposit', 5000, '2022-02-15'),   (4, 2, 'Interest Payment', 250, '2022-08-15'),   (5, 3, 'Deposit', 2000, '2023-03-01'),   (6, 3, 'Dividend Payment', 100, '2023-09-01');",SELECT Portfolio_Name   FROM Investment_Portfolios   WHERE Risk_Score > 7   AND ROI >= 0.10;,This query selects the names of investment portfolios with a risk score greater than 7 and an ROI of at least 10% in the past year. It uses the Investment_Portfolios table and filters the results based on the specified conditions.
822,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What is the total amount of money deposited into each portfolio in the past year?,"CREATE TABLE Investment_Portfolios (   Portfolio_ID INT PRIMARY KEY,   Portfolio_Name VARCHAR(255) NOT NULL,   Risk_Score INT NOT NULL,   ROI DECIMAL(5,2) NOT NULL,   Start_Date DATE NOT NULL );
CREATE TABLE Transactions (   Transaction_ID INT PRIMARY KEY,   Portfolio_ID INT REFERENCES Investment_Portfolios(Portfolio_ID),   Transaction_Type VARCHAR(255) NOT NULL,   Amount DECIMAL(10,2) NOT NULL,   Transaction_Date DATE NOT NULL );
INSERT INTO Investment_Portfolios (Portfolio_ID, Portfolio_Name, Risk_Score, ROI, Start_Date) VALUES   (1, 'High Growth Portfolio', 8, 0.15, '2021-01-01'),   (2, 'Balanced Portfolio', 5, 0.10, '2022-02-15'),   (3, 'Conservative Portfolio', 3, 0.05, '2023-03-01');
INSERT INTO Transactions (Transaction_ID, Portfolio_ID, Transaction_Type, Amount, Transaction_Date) VALUES   (1, 1, 'Deposit', 10000, '2021-01-01'),   (2, 1, 'Withdrawal', 2000, '2021-06-01'),   (3, 2, 'Deposit', 5000, '2022-02-15'),   (4, 2, 'Interest Payment', 250, '2022-08-15'),   (5, 3, 'Deposit', 2000, '2023-03-01'),   (6, 3, 'Dividend Payment', 100, '2023-09-01');","SELECT Portfolio_Name, SUM(CASE WHEN Transaction_Type = 'Deposit' THEN Amount ELSE 0 END) AS Total_Deposits   FROM Investment_Portfolios   INNER JOIN Transactions ON Investment_Portfolios.Portfolio_ID = Transactions.Portfolio_ID   WHERE Transaction_Date >= DATE('now', '-1 year')   GROUP BY Portfolio_Name   ORDER BY Portfolio_Name;","This query calculates the total amount of money deposited into each portfolio in the past year. It joins the Investment_Portfolios and Transactions tables, filters the transactions for deposits within the past year, groups the results by portfolio name, and sums the deposit amounts."
823,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","List all transactions for stock symbol 'AAPL' in the month of January 2023, sorted by transaction date in descending order.","CREATE TABLE Transactions ( 
  transaction_id INT PRIMARY KEY, 
  stock_symbol VARCHAR(10) NOT NULL, 
  transaction_date DATE NOT NULL, 
  transaction_type VARCHAR(20) NOT NULL, 
  quantity INT NOT NULL, 
  price DECIMAL(10,2) NOT NULL, 
  commission DECIMAL(10,2) NOT NULL 
);
  
INSERT INTO Transactions (transaction_id, stock_symbol, transaction_date, transaction_type, quantity, price, commission) VALUES 
(1, 'AAPL', '2023-01-03', 'Buy', 100, 175.50, 9.99),
(2, 'AAPL', '2023-01-05', 'Sell', 50, 180.25, 4.99),
(3, 'MSFT', '2023-01-10', 'Buy', 75, 255.75, 7.49),
(4, 'AAPL', '2023-01-12', 'Buy', 25, 178.00, 2.49),
(5, 'GOOG', '2023-01-17', 'Sell', 100, 2850.00, 19.99),
(6, 'AAPL', '2023-01-20', 'Buy', 50, 182.50, 4.99),
(7, 'AAPL', '2023-01-25', 'Sell', 75, 175.00, 7.49),
(8, 'TSLA', '2023-01-27', 'Buy', 100, 800.00, 9.99);",SELECT * FROM Transactions WHERE stock_symbol = 'AAPL' AND transaction_date BETWEEN '2023-01-01' AND '2023-01-31' ORDER BY transaction_date DESC,"This query selects all transactions for the stock symbol 'AAPL' in the month of January 2023 and sorts them by transaction date in descending order. It uses the 'Transactions' table, which contains transaction details such as transaction ID, stock symbol, transaction date, transaction type, quantity, price, and commission."
824,retail,"Extensive data on product sales, customer demographics, inventory levels, supplier information, and consumer buying patterns and preferences.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Calculate the total number of shares held in each stock by a specific customer with ID 1234.,"CREATE TABLE Customers ( 
  customer_id INT PRIMARY KEY, 
  customer_name VARCHAR(50) NOT NULL, 
  email VARCHAR(50) NOT NULL, 
  phone_number VARCHAR(20) 
);

CREATE TABLE Holdings ( 
  holding_id INT PRIMARY KEY, 
  customer_id INT REFERENCES Customers(customer_id), 
  stock_symbol VARCHAR(10) NOT NULL, 
  quantity INT NOT NULL, 
  CONSTRAINT FK_Customer FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) 
);

INSERT INTO Customers (customer_id, customer_name, email, phone_number) VALUES 
(1234, 'John Doe', 'john.doe@email.com', '555-123-4567');

INSERT INTO Holdings (holding_id, customer_id, stock_symbol, quantity) VALUES 
(1, 1234, 'AAPL', 100),
(2, 1234, 'MSFT', 75),
(3, 1234, 'GOOG', 0),
(4, 1234, 'TSLA', 100);","SELECT stock_symbol, SUM(quantity) AS total_shares FROM Holdings WHERE customer_id = 1234 GROUP BY stock_symbol","This query calculates the total number of shares held in each stock by the customer with ID 1234. It uses the 'Holdings' table, which contains the customer ID, stock symbol, and number of shares held for each customer and stock. The query groups the holdings by stock symbol and sums the quantities for each group."
825,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What is the average order amount on Black Friday?,"CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    order_amount DECIMAL
);

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(255),
    category VARCHAR(255),
    price DECIMAL
);

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255),
    email VARCHAR(255)
);

CREATE TABLE black_friday_sales (
    order_id INT,
    product_id INT,
    quantity INT
);

INSERT INTO orders (order_id, customer_id, order_date, order_amount)
VALUES
    (1, 100, '2021-11-26', 50.00),
    (2, 101, '2021-11-26', 75.00),
    (3, 102, '2021-11-27', 100.00),
    (4, 103, '2021-11-28', 125.00),
    (5, 104, '2021-11-29', 150.00);

INSERT INTO products (product_id, product_name, category, price)
VALUES
    (1, 'T-Shirt', 'Clothing', 10.00),
    (2, 'Jeans', 'Clothing', 25.00),
    (3, 'Laptop', 'Electronics', 500.00),
    (4, 'Coffee Maker', 'Appliances', 100.00),
    (5, 'Book', 'Books', 20.00);

INSERT INTO customers (customer_id, customer_name, email)
VALUES
    (100, 'John Doe', 'john.doe@email.com'),
    (101, 'Jane Smith', 'jane.smith@email.com'),
    (102, 'Mike Jones', 'mike.jones@email.com'),
    (103, 'Mary Brown', 'mary.brown@email.com'),
    (104, 'David Lee', 'david.lee@email.com');

INSERT INTO black_friday_sales (order_id, product_id, quantity)
VALUES
    (1, 1, 2),
    (1, 2, 1),
    (2, 3, 1),
    (2, 4, 1),
    (3, 5, 2);

SELECT AVG(o.order_amount)
FROM orders o
JOIN black_friday_sales b ON o.order_id = b.order_id
WHERE o.order_date = '2021-11-26';","/* Calculate average order amount on Black Friday (2021-11-26) */
SELECT AVG(o.order_amount) AS average_order_amount
FROM orders o
/* Join 'orders' table with 'black_friday_sales' table */
INNER JOIN black_friday_sales b ON o.order_id = b.order_id
/* Filter orders placed on Black Friday (2021-11-26) */
WHERE o.order_date = '2021-11-26';

/* Explanation: */
1. Join 'orders' and 'black_friday_sales' tables on 'order_id' to identify orders made during Black Friday.
2. Filter the joined table to include only orders placed on '2021-11-26'.
3. Calculate the average order amount using the 'AVG()' function.
4. Alias the result as 'average_order_amount'.","This SQL query retrieves the average order amount on Black Friday (2021-11-26). It first joins the 'orders' and 'black_friday_sales' tables based on the 'order_id' to link orders with their corresponding Black Friday sales. Then, it filters the resulting dataset to include only orders placed on '2021-11-26'. Finally, it calculates the average order amount for these filtered orders using the 'AVG()' function and aliases the result as 'average_order_amount'."
826,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","What is the average number of units sold per product in the last quarter, broken down by product category and region?","CREATE TABLE products ( product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, product_category VARCHAR(255) NOT NULL, supplier_id INT REFERENCES suppliers(supplier_id), unit_price DECIMAL(10,2) NOT NULL );
CREATE TABLE sales ( sale_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), customer_id INT REFERENCES customers(customer_id), sale_date DATE NOT NULL, units_sold INT NOT NULL, total_price DECIMAL(10,2) NOT NULL );
CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, customer_email VARCHAR(255) UNIQUE, customer_city VARCHAR(255) NOT NULL, customer_state VARCHAR(255) NOT NULL );
CREATE TABLE suppliers ( supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255) NOT NULL, supplier_country VARCHAR(255) NOT NULL );
CREATE VIEW product_sales_by_quarter AS
SELECT
    p.product_name,
    p.product_category,
    s.customer_city,
    s.customer_state,
    DATE_TRUNC('quarter', s.sale_date) AS quarter,
    SUM(s.units_sold) AS total_units_sold
FROM
    sales s
JOIN
    products p ON s.product_id = p.product_id
GROUP BY
    p.product_name,
    p.product_category,
    s.customer_city,
    s.customer_state,
    quarter;","WITH ProductSales AS (
    SELECT
        p.product_name,
        p.product_category,
        s.customer_city,
        s.customer_state,
        DATE_TRUNC('quarter', s.sale_date) AS quarter,
        SUM(s.units_sold) AS total_units_sold
    FROM
        sales s
    JOIN
        products p ON s.product_id = p.product_id
    GROUP BY
        p.product_name,
        p.product_category,
        s.customer_city,
        s.customer_state,
        quarter
),
AverageSalesByCategory AS (
    SELECT
        product_category,
        quarter,
        AVG(total_units_sold) AS average_units_sold
    FROM
        ProductSales
    GROUP BY
        product_category,
        quarter
)
SELECT
    ps.product_category,
    ps.customer_city,
    ps.customer_state,
    ps.quarter,
    ps.total_units_sold,
    asc.average_units_sold
FROM
    ProductSales ps
JOIN
    AverageSalesByCategory asc ON ps.product_category = asc.product_category AND ps.quarter = asc.quarter;","This query calculates the average number of units sold per product in the last quarter, broken down by product category and region.

**Step 1: Create a CTE (Common Table Expression) called ProductSales**
This CTE joins the `sales` and `products` tables to calculate the total units sold for each product, category, city, state, and quarter.

**Step 2: Create a CTE called AverageSalesByCategory**
This CTE calculates the average units sold for each product category and quarter.

**Step 3: Join the CTEs and select the desired columns**
The final query joins the `ProductSales` and `AverageSalesByCategory` CTEs to get the total units sold for each product, category, city, state, and quarter, along with the average units sold for each category and quarter. This allows us to compare the actual units sold to the average for each category and region."
827,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 products by revenue in the month of December 2022?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, price DECIMAL(10,2) NOT NULL); 
CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), customer_id INT REFERENCES customers(customer_id), sale_date DATE NOT NULL, quantity INT NOT NULL, price DECIMAL(10,2) NOT NULL); 
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20) UNIQUE);","WITH MonthlySales AS (SELECT product_id, SUM(price * quantity) AS total_revenue FROM sales WHERE sale_date BETWEEN '2022-12-01' AND '2022-12-31' GROUP BY product_id), RankedSales AS (SELECT product_id, total_revenue, RANK() OVER (ORDER BY total_revenue DESC) AS sales_rank FROM MonthlySales) SELECT p.product_name, rs.total_revenue FROM products p JOIN RankedSales rs ON p.product_id = rs.product_id WHERE rs.sales_rank <= 5 ORDER BY rs.total_revenue DESC;","This SQL query first calculates the total revenue for each product in December 2022 using a CTE called MonthlySales. Then, it ranks the products by their total revenue in descending order using another CTE called RankedSales. Finally, it joins the products table with the RankedSales CTE to retrieve the product names and total revenue for the top 5 products."
828,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What are the top 3 customers by total spending in the last quarter?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20) UNIQUE); 
CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), customer_id INT REFERENCES customers(customer_id), sale_date DATE NOT NULL, quantity INT NOT NULL, price DECIMAL(10,2) NOT NULL); 
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, price DECIMAL(10,2) NOT NULL);","WITH CustomerSpending AS (SELECT customer_id, SUM(price * quantity) AS total_spent FROM sales WHERE sale_date BETWEEN DATE('now', '-3 months') AND DATE('now') GROUP BY customer_id), RankedSpending AS (SELECT customer_id, total_spent, RANK() OVER (ORDER BY total_spent DESC) AS spending_rank FROM CustomerSpending) SELECT c.customer_name, rs.total_spent FROM customers c JOIN RankedSpending rs ON c.customer_id = rs.customer_id WHERE rs.spending_rank <= 3 ORDER BY rs.total_spent DESC;","This SQL query first calculates the total spending for each customer in the last quarter using a CTE called CustomerSpending. Then, it ranks the customers by their total spending in descending order using another CTE called RankedSpending. Finally, it joins the customers table with the RankedSpending CTE to retrieve the customer names and total spending for the top 3 customers."
829,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",What is the average order value for each product category in the month of January 2023?,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) NOT NULL, price DECIMAL(10,2) NOT NULL); 
CREATE TABLE sales (sale_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), customer_id INT REFERENCES customers(customer_id), sale_date DATE NOT NULL, quantity INT NOT NULL, price DECIMAL(10,2) NOT NULL); 
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE, phone_number VARCHAR(20) UNIQUE);","SELECT p.category, AVG(s.price * s.quantity) AS average_order_value FROM products p JOIN sales s ON p.product_id = s.product_id WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-01-31' GROUP BY p.category ORDER BY average_order_value DESC;","This SQL query calculates the average order value for each product category in the month of January 2023. It joins the products and sales tables on the product_id and then filters the sales data to include only sales from January 2023. Finally, it groups the sales data by product category and calculates the average order value using the AVG function."
830,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What are the 10 most frequently enrolled courses in the fall semester of 2023?,"CREATE TABLE FALL_SEMESTER_2023 AS
SELECT STUDENT_ID, COURSE_ID
FROM ENROLLMENT_DATA
WHERE SEMESTER = 'FALL' AND YEAR = 2023;

CREATE TABLE COURSE_LIST AS
SELECT COURSE_ID, COURSE_NAME
FROM COURSE_CATALOG;

CREATE VIEW TOP_10_FALL_2023_COURSES AS
SELECT COURSE_ID, COUNT(*) AS ENROLLMENTS
FROM FALL_SEMESTER_2023
GROUP BY COURSE_ID
ORDER BY ENROLLMENTS DESC
LIMIT 10;

SELECT COURSE_NAME, TOP_10_FALL_2023_COURSES.ENROLLMENTS
FROM TOP_10_FALL_2023_COURSES
JOIN COURSE_LIST ON TOP_10_FALL_2023_COURSES.COURSE_ID = COURSE_LIST.COURSE_ID
ORDER BY ENROLLMENTS DESC;","SELECT COURSE_NAME, TOP_10_FALL_2023_COURSES.ENROLLMENTS
FROM TOP_10_FALL_2023_COURSES
JOIN COURSE_LIST ON TOP_10_FALL_2023_COURSES.COURSE_ID = COURSE_LIST.COURSE_ID
ORDER BY ENROLLMENTS DESC;","This query first creates a temporary table called FALL_SEMESTER_2023 that contains student enrollments for the fall semester of 2023. It then creates another temporary table called COURSE_LIST that contains a list of all courses offered. The query then creates a view called TOP_10_FALL_2023_COURSES that shows the 10 most frequently enrolled courses in the fall semester of 2023. Finally, the query joins the TOP_10_FALL_2023_COURSES view with the COURSE_LIST table to get the course names and displays the results in descending order of enrollment."
831,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Create a table to store information about students' academic performance, including their scores on different assessments, grades in different subjects, and overall GPA.","CREATE TABLE Students ( 
  StudentID INT PRIMARY KEY, 
  FirstName VARCHAR(50) NOT NULL, 
  LastName VARCHAR(50) NOT NULL, 
  DateOfBirth DATE NOT NULL, 
  GradeLevel INT NOT NULL 
);

CREATE TABLE Courses ( 
  CourseID INT PRIMARY KEY, 
  CourseName VARCHAR(50) NOT NULL, 
  TeacherID INT REFERENCES Teachers(TeacherID), 
  GradeLevel INT NOT NULL 
);

CREATE TABLE Assessments ( 
  AssessmentID INT PRIMARY KEY, 
  AssessmentName VARCHAR(50) NOT NULL, 
  AssessmentType VARCHAR(50) NOT NULL, 
  GradeLevel INT NOT NULL 
);

CREATE TABLE StudentAssessments ( 
  StudentID INT REFERENCES Students(StudentID), 
  AssessmentID INT REFERENCES Assessments(AssessmentID), 
  Score INT NOT NULL, 
  AssessmentDate DATE NOT NULL, 
  PRIMARY KEY (StudentID, AssessmentID) 
);

CREATE TABLE Grades ( 
  StudentID INT REFERENCES Students(StudentID), 
  CourseID INT REFERENCES Courses(CourseID), 
  Grade CHAR(1) NOT NULL, 
  PRIMARY KEY (StudentID, CourseID) 
);

CREATE TABLE GPA ( 
  StudentID INT PRIMARY KEY REFERENCES Students(StudentID), 
  GPA DECIMAL(3,2) NOT NULL 
);","CREATE TABLE StudentAcademicPerformance ( 
  StudentID INT PRIMARY KEY REFERENCES Students(StudentID), 
  AssessmentID INT REFERENCES Assessments(AssessmentID), 
  AssessmentScore INT, 
  CourseID INT REFERENCES Courses(CourseID), 
  CourseGrade CHAR(1), 
  GPA DECIMAL(3,2) 
);","This SQL statement creates a new table called StudentAcademicPerformance. This table will store information about students' academic performance, including their scores on different assessments, grades in different subjects, and overall GPA. 

The table has the following columns: 

* StudentID: The primary key of the table, which references the StudentID column in the Students table. 
* AssessmentID: The ID of the assessment that the student took. 
* AssessmentScore: The student's score on the assessment. 
* CourseID: The ID of the course that the student took. 
* CourseGrade: The student's grade in the course. 
* GPA: The student's overall GPA. 

The table also includes foreign key constraints that reference the Students and Assessments tables. This ensures that the data in the StudentAcademicPerformance table is consistent with the data in the other tables."
832,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Create a new table in the database to store data about student course enrollments.,"CREATE TABLE StudentEnrollments (  StudentID INT,  CourseID INT,  EnrollmentDate DATE,  Grade DECIMAL(3,1),  PRIMARY KEY (StudentID, CourseID),  FOREIGN KEY (StudentID) REFERENCES Students(StudentID),  FOREIGN KEY (CourseID) REFERENCES Courses(CourseID));","CREATE TABLE StudentEnrollments (  StudentID INT,  CourseID INT,  EnrollmentDate DATE,  Grade DECIMAL(3,1),  PRIMARY KEY (StudentID, CourseID),  FOREIGN KEY (StudentID) REFERENCES Students(StudentID),  FOREIGN KEY (CourseID) REFERENCES Courses(CourseID));","This SQL statement creates a new table called StudentEnrollments. The table has five columns: StudentID, CourseID, EnrollmentDate, Grade, and a composite primary key consisting of StudentID and CourseID. The table also has two foreign keys: StudentID references the StudentID column in the Students table and CourseID references the CourseID column in the Courses table."
833,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","What is the average number of students per teacher in each subject, across all schools?","CREATE TABLE Teachers (teacher_id INT PRIMARY KEY, teacher_name VARCHAR(255), subject VARCHAR(255));
CREATE TABLE Students (student_id INT PRIMARY KEY, student_name VARCHAR(255), teacher_id INT REFERENCES Teachers(teacher_id));
CREATE TABLE Schools (school_id INT PRIMARY KEY, school_name VARCHAR(255));
CREATE TABLE Classes (class_id INT PRIMARY KEY, class_name VARCHAR(255), teacher_id INT REFERENCES Teachers(teacher_id), school_id INT REFERENCES Schools(school_id));
CREATE TABLE Enrollments (enrollment_id INT PRIMARY KEY, student_id INT REFERENCES Students(student_id), class_id INT REFERENCES Classes(class_id));
INSERT INTO Teachers (teacher_id, teacher_name, subject) VALUES
(1, 'John Smith', 'Math'),
(2, 'Alice Johnson', 'Science'),
(3, 'Bob Williams', 'English');
INSERT INTO Students (student_id, student_name, teacher_id) VALUES
(1, 'Mike Jones', 1),
(2, 'Mary Brown', 2),
(3, 'David Davis', 1),
(4, 'Linda Miller', 2),
(5, 'James Wilson', 3);
INSERT INTO Schools (school_id, school_name) VALUES
(1, 'Central High School'),
(2, 'North Elementary School'),
(3, 'South Middle School');
INSERT INTO Classes (class_id, class_name, teacher_id, school_id) VALUES
(1, 'Math 101', 1, 1),
(2, 'Science 101', 2, 2),
(3, 'English 101', 3, 3);
INSERT INTO Enrollments (enrollment_id, student_id, class_id) VALUES
(1, 1, 1),
(2, 2, 2),
(3, 3, 1),
(4, 4, 2),
(5, 5, 3);","SELECT t1.subject, t1.teacher_name, COUNT(t2.student_id) AS num_students
FROM Teachers AS t1
JOIN Students AS t2 ON t1.teacher_id = t2.teacher_id
GROUP BY t1.subject, t1.teacher_name
ORDER BY t1.subject, t1.teacher_name;","This query first joins the Teachers and Students tables on the teacher_id column. Then, it groups the results by subject and teacher name, and counts the number of students for each group using the COUNT function. Finally, it orders the results by subject and teacher name."
834,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","List all the courses offered by the Department of Computer Science that have had an average enrollment of more than 100 students in the last three years, along with the names of the professors who taught those courses.","CREATE TABLE Courses (   CourseID INT PRIMARY KEY,   CourseName VARCHAR(255) NOT NULL,   DepartmentID INT REFERENCES Departments(DepartmentID),   ProfessorID INT REFERENCES Professors(ProfessorID) );

CREATE TABLE Enrollments (   EnrollmentID INT PRIMARY KEY,   CourseID INT REFERENCES Courses(CourseID),   StudentID INT REFERENCES Students(StudentID),   Semester VARCHAR(10) NOT NULL,   Year INT NOT NULL );

CREATE TABLE Professors (   ProfessorID INT PRIMARY KEY,   ProfessorName VARCHAR(255) NOT NULL,   DepartmentID INT REFERENCES Departments(DepartmentID) );

CREATE TABLE Departments (   DepartmentID INT PRIMARY KEY,   DepartmentName VARCHAR(255) NOT NULL );

CREATE TABLE Students (   StudentID INT PRIMARY KEY,   StudentName VARCHAR(255) NOT NULL,   MajorID INT REFERENCES Majors(MajorID) );

CREATE TABLE Majors (   MajorID INT PRIMARY KEY,   MajorName VARCHAR(255) NOT NULL );

INSERT INTO Courses (CourseID, CourseName, DepartmentID, ProfessorID) VALUES
(1, 'Introduction to Computer Science', 1, 10),
(2, 'Data Structures and Algorithms', 1, 11),
(3, 'Object-Oriented Programming', 1, 12),
(4, 'Database Systems', 1, 13),
(5, 'Software Engineering', 1, 14),
(6, 'Artificial Intelligence', 1, 15),
(7, 'Machine Learning', 1, 16),
(8, 'Computer Graphics', 1, 17),
(9, 'Computer Networks', 1, 18),
(10, 'Cybersecurity', 1, 19);

INSERT INTO Enrollments (EnrollmentID, CourseID, StudentID, Semester, Year) VALUES
(1, 1, 101, 'Fall', 2020),
(2, 1, 102, 'Fall', 2020),
(3, 1, 103, 'Fall', 2020),
(4, 2, 104, 'Fall', 2020),
(5, 2, 105, 'Fall', 2020),
(6, 2, 106, 'Fall', 2020),
(7, 3, 107, 'Fall', 2020),
(8, 3, 108, 'Fall', 2020),
(9, 3, 109, 'Fall', 2020),
(10, 4, 110, 'Fall', 2020),
(11, 4, 111, 'Fall', 2020),
(12, 4, 112, 'Fall', 2020);

INSERT INTO Professors (ProfessorID, ProfessorName, DepartmentID) VALUES
(10, 'Dr. John Smith', 1),
(11, 'Dr. Jane Doe', 1),
(12, 'Dr. Michael Brown', 1),
(13, 'Dr. Sarah Lee', 1),
(14, 'Dr. David Kim', 1),
(15, 'Dr. Emily Garcia', 1),
(16, 'Dr. Robert Williams', 1),
(17, 'Dr. Jennifer Hernandez', 1),
(18, 'Dr. Thomas Garcia', 1),
(19, 'Dr. Maria Rodriguez', 1);","SELECT c.CourseName, p.ProfessorName
FROM Courses c
JOIN Professors p ON c.ProfessorID = p.ProfessorID
JOIN Enrollments e ON c.CourseID = e.CourseID
WHERE c.DepartmentID = (SELECT DepartmentID FROM Departments WHERE DepartmentName = 'Computer Science')
AND e.Year IN (2020, 2021, 2022)
GROUP BY c.CourseID, p.ProfessorName
HAVING AVG(e.StudentID) > 100;","This query first selects the course name and professor name from the Courses and Professors tables, respectively. It then joins these tables on the ProfessorID column to link courses to their professors. The query then joins the Enrollments table on the CourseID column to link courses to their enrollments. The query filters the results to only include courses from the Department of Computer Science and enrollments from the last three years. The query then groups the results by course and professor and calculates the average number of students enrolled in each course. Finally, the query filters the results to only include courses with an average enrollment of more than 100 students."
835,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",How many orders were placed in the last month by customers in Asia?,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT, order_date DATE, order_amount DECIMAL, region VARCHAR(50));
CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(100), region VARCHAR(50));
INSERT INTO orders (order_id, customer_id, order_date, order_amount, region) VALUES (1, 101, '2023-03-01', 100.00, 'Asia'), (2, 102, '2023-03-02', 200.00, 'Europe'), (3, 103, '2023-03-03', 300.00, 'North America'), (4, 104, '2023-03-04', 400.00, 'Asia'), (5, 105, '2023-03-05', 500.00, 'South America'), (6, 106, '2023-03-06', 600.00, 'Asia'), (7, 107, '2023-03-07', 700.00, 'Australia'), (8, 108, '2023-03-08', 800.00, 'Africa'), (9, 109, '2023-03-09', 900.00, 'Asia'), (10, 110, '2023-03-10', 1000.00, 'Europe');
INSERT INTO customers (customer_id, customer_name, region) VALUES (101, 'Alice Smith', 'Asia'), (102, 'Bob Johnson', 'Europe'), (103, 'Charlie Williams', 'North America'), (104, 'David Brown', 'Asia'), (105, 'Emily Jones', 'South America'), (106, 'Frank Davis', 'Asia'), (107, 'Grace Miller', 'Australia'), (108, 'Henry Wilson', 'Africa'), (109, 'Isabella Garcia', 'Asia'), (110, 'Jack Robinson', 'Europe');","SELECT COUNT(*) FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date >= DATE('now', '-1 month') AND c.region = 'Asia';","This query first joins the `orders` and `customers` tables on the `customer_id` column. Then, it filters the results to include only orders placed in the last month (using `DATE('now', '-1 month')`) by customers in Asia (using `c.region = 'Asia'`). Finally, it counts the number of orders using `COUNT(*)`."
836,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Which suppliers are located in Europe and have supplied at least 1000 units of a particular product in the last quarter?,"CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(100), region VARCHAR(50));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(100));
CREATE TABLE orders (order_id INT PRIMARY KEY, supplier_id INT, product_id INT, order_date DATE, order_quantity INT);
INSERT INTO suppliers (supplier_id, supplier_name, region) VALUES (1, 'Acme Supplies', 'North America'), (2, 'Best Buy', 'Europe'), (3, 'Central Distributors', 'Asia'), (4, 'Discount Electronics', 'South America'), (5, 'Euro Tech', 'Europe');
INSERT INTO products (product_id, product_name) VALUES (1, 'Laptop'), (2, 'Tablet'), (3, 'Smartphone'), (4, 'Monitor'), (5, 'Keyboard');
INSERT INTO orders (order_id, supplier_id, product_id, order_date, order_quantity) VALUES (1, 1, 1, '2023-01-01', 100), (2, 2, 2, '2023-01-02', 200), (3, 3, 3, '2023-01-03', 300), (4, 4, 4, '2023-01-04', 400), (5, 5, 5, '2023-01-05', 500), (6, 1, 1, '2023-02-01', 600), (7, 2, 2, '2023-02-02', 700), (8, 3, 3, '2023-02-03', 800), (9, 4, 4, '2023-02-04', 900), (10, 5, 5, '2023-02-05', 1000), (11, 1, 1, '2023-03-01', 1100), (12, 2, 2, '2023-03-02', 1200), (13, 3, 3, '2023-03-03', 1300), (14, 4, 4, '2023-03-04', 1400), (15, 5, 5, '2023-03-05', 1500);","SELECT s.supplier_name FROM suppliers s JOIN orders o ON s.supplier_id = o.supplier_id WHERE s.region = 'Europe' AND o.order_date >= DATE('now', '-3 months') GROUP BY s.supplier_name HAVING SUM(o.order_quantity) >= 1000;","This query first joins the `suppliers` and `orders` tables on the `supplier_id` column. Then, it filters the results to include only orders placed in the last quarter (using `o.order_date >= DATE('now', '-3 months')`) by suppliers in Europe (using `s.region = 'Europe'`). Finally, it groups the results by supplier name and calculates the sum of the order quantities for each supplier using `SUM(o.order_quantity)`. The `HAVING` clause ensures that only suppliers who have supplied at least 1000 units of a particular product in the last quarter are included in the results."
837,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What are the top five suppliers by average cost per unit?,"CREATE TABLE suppliers ( supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255) NOT NULL, city VARCHAR(255), country VARCHAR(255) );
CREATE TABLE orders ( order_id INT PRIMARY KEY, supplier_id INT REFERENCES suppliers(supplier_id), order_date DATE, unit_cost DECIMAL(10,2), quantity INT );
INSERT INTO suppliers (supplier_id, supplier_name, city, country) VALUES
(1, 'Acme Supplies', 'Chicago', 'USA'),
(2, 'Best Buy', 'New York', 'USA'),
(3, 'Canadian Tire', 'Toronto', 'Canada'),
(4, 'Walmart', 'Bentonville', 'USA'),
(5, 'Target', 'Minneapolis', 'USA');
INSERT INTO orders (order_id, supplier_id, order_date, unit_cost, quantity) VALUES
(1, 1, '2023-01-01', 10.00, 100),
(2, 2, '2023-02-01', 15.00, 50),
(3, 3, '2023-03-01', 20.00, 25),
(4, 4, '2023-04-01', 25.00, 10),
(5, 5, '2023-05-01', 30.00, 5);","SELECT supplier_name, AVG(unit_cost) AS average_cost_per_unit FROM suppliers s JOIN orders o ON s.supplier_id = o.supplier_id GROUP BY supplier_name ORDER BY average_cost_per_unit DESC LIMIT 5","This query first joins the 'suppliers' and 'orders' tables on the 'supplier_id' field.

Then, it groups the results by 'supplier_name' and calculates the average 'unit_cost' for each supplier.

Finally, it sorts the results in descending order of 'average_cost_per_unit' and limits the output to the top 5 suppliers."
838,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",What are the top three products by total quantity ordered in the last quarter?,"CREATE TABLE products ( product_id INT PRIMARY KEY, product_name VARCHAR(255) NOT NULL, category VARCHAR(255) );
CREATE TABLE orders ( order_id INT PRIMARY KEY, product_id INT REFERENCES products(product_id), order_date DATE, unit_cost DECIMAL(10,2), quantity INT );
INSERT INTO products (product_id, product_name, category) VALUES
(1, 'Widget A', 'Electronics'),
(2, 'Widget B', 'Electronics'),
(3, 'Widget C', 'Electronics'),
(4, 'Gear D', 'Machinery'),
(5, 'Gear E', 'Machinery');
INSERT INTO orders (order_id, product_id, order_date, unit_cost, quantity) VALUES
(1, 1, '2023-04-01', 10.00, 100),
(2, 2, '2023-04-01', 15.00, 50),
(3, 3, '2023-04-01', 20.00, 25),
(4, 4, '2023-04-01', 25.00, 10),
(5, 5, '2023-04-01', 30.00, 5),
(6, 1, '2023-05-01', 10.00, 100),
(7, 2, '2023-05-01', 15.00, 50),
(8, 3, '2023-05-01', 20.00, 25),
(9, 4, '2023-05-01', 25.00, 10),
(10, 5, '2023-05-01', 30.00, 5),
(11, 1, '2023-06-01', 10.00, 100),
(12, 2, '2023-06-01', 15.00, 50),
(13, 3, '2023-06-01', 20.00, 25),
(14, 4, '2023-06-01', 25.00, 10),
(15, 5, '2023-06-01', 30.00, 5);","SELECT product_name, SUM(quantity) AS total_quantity_ordered FROM products p JOIN orders o ON p.product_id = o.product_id WHERE order_date >= '2023-04-01' AND order_date <= '2023-06-30' GROUP BY product_name ORDER BY total_quantity_ordered DESC LIMIT 3","This query first filters the 'orders' table to include only orders placed in the last quarter (April 1st to June 30th, 2023).

Then, it joins the filtered 'orders' table with the 'products' table on the 'product_id' field.

Next, it groups the results by 'product_name' and calculates the sum of 'quantity' for each product, giving the total quantity ordered.

Finally, it sorts the results in descending order of 'total_quantity_ordered' and limits the output to the top 3 products."
839,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Give me a list of all the machines in the plant that are due for maintenance within the next 30 days and their scheduled maintenance date.,"CREATE TABLE machines (machine_id INT PRIMARY KEY, machine_name VARCHAR(255), maintenance_interval INT, last_maintenance_date DATE);  
  INSERT INTO machines (machine_id, machine_name, maintenance_interval, last_maintenance_date) VALUES
    (1, 'Machine A', 30, '2023-03-15'),
    (2, 'Machine B', 60, '2023-02-10'),
    (3, 'Machine C', 90, '2023-01-15');","SELECT machine_name, scheduled_maintenance_date FROM (
  SELECT machine_name, DATE_ADD(last_maintenance_date, INTERVAL maintenance_interval DAY) AS scheduled_maintenance_date
  FROM machines
) AS scheduled_maintenance
WHERE scheduled_maintenance_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY);","This query first calculates the scheduled maintenance date for each machine by adding the maintenance interval to the last maintenance date.

Then, it filters the results to only include machines that are due for maintenance within the next 30 days."
840,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average stock price for each company in the Finance database?,"CREATE TABLE Finance (Company_Name VARCHAR(255), Stock_Symbol VARCHAR(10), Stock_Price DECIMAL(10,2));
INSERT INTO Finance (Company_Name, Stock_Symbol, Stock_Price) VALUES ('Apple', 'AAPL', 175.50), ('Microsoft', 'MSFT', 285.75), ('Amazon', 'AMZN', 3200.00), ('Alphabet', 'GOOGL', 2500.00), ('Tesla', 'TSLA', 1050.00), ('Meta', 'META', 200.00), ('Berkshire Hathaway', 'BRK.B', 350.00), ('JPMorgan Chase', 'JPM', 170.00), ('Johnson & Johnson', 'JNJ', 175.00), ('ExxonMobil', 'XOM', 85.00), ('Walmart', 'WMT', 150.00), ('UnitedHealth Group', 'UNH', 500.00), ('Chevron', 'CVX', 165.00), ('Visa', 'V', 250.00), ('Home Depot', 'HD', 300.00), ('Nike', 'NKE', 180.00), ('Procter & Gamble', 'PG', 150.00), ('Coca-Cola', 'KO', 60.00), ('Disney', 'DIS', 200.00), ('Netflix', 'NFLX', 350.00);","SELECT Company_Name, AVG(Stock_Price) AS Average_Stock_Price FROM Finance GROUP BY Company_Name ORDER BY Average_Stock_Price DESC;","This query first groups the data by company name. Then, it calculates the average stock price for each company using the AVG() function. Finally, it sorts the results in descending order of average stock price."
841,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total number of transactions in the Transactions table for each customer in the Customers table?,"CREATE TABLE Customers (Customer_ID INT PRIMARY KEY, Customer_Name VARCHAR(255), Customer_Email VARCHAR(255));
CREATE TABLE Transactions (Transaction_ID INT PRIMARY KEY, Customer_ID INT REFERENCES Customers(Customer_ID), Transaction_Amount DECIMAL(10,2), Transaction_Date DATE);","SELECT c.Customer_Name, COUNT(t.Transaction_ID) AS Total_Transactions FROM Customers c JOIN Transactions t ON c.Customer_ID = t.Customer_ID GROUP BY c.Customer_Name ORDER BY Total_Transactions DESC;","This query joins the Customers and Transactions tables on the Customer_ID column. Then, it groups the data by customer name and counts the number of transactions for each customer using the COUNT() function. Finally, it sorts the results in descending order of total transactions."
842,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total amount invested in each asset class in the Portfolio table?,"CREATE TABLE Portfolio (Asset_Class VARCHAR(255), Investment_Amount DECIMAL(10,2));
INSERT INTO Portfolio (Asset_Class, Investment_Amount) VALUES ('Stocks', 50000.00), ('Bonds', 20000.00), ('Real Estate', 100000.00), ('Commodities', 5000.00), ('Cash', 25000.00);","SELECT Asset_Class, SUM(Investment_Amount) AS Total_Investment FROM Portfolio GROUP BY Asset_Class ORDER BY Total_Investment DESC;","This query groups the data by asset class and calculates the total investment amount for each asset class using the SUM() function. Finally, it sorts the results in descending order of total investment."
843,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average risk score for each portfolio in the Portfolios table?,"CREATE TABLE Portfolios (Portfolio_ID INT PRIMARY KEY, Portfolio_Name VARCHAR(255), Risk_Score INT);","SELECT Portfolio_Name, AVG(Risk_Score) AS Average_Risk_Score FROM Portfolios GROUP BY Portfolio_Name ORDER BY Average_Risk_Score ASC;","This query groups the data by portfolio name and calculates the average risk score for each portfolio using the AVG() function. Finally, it sorts the results in ascending order of average risk score."
844,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total number of customers who have made a transaction in the past month?,"CREATE TABLE Customers (Customer_ID INT PRIMARY KEY, Customer_Name VARCHAR(255), Customer_Email VARCHAR(255));
CREATE TABLE Transactions (Transaction_ID INT PRIMARY KEY, Customer_ID INT REFERENCES Customers(Customer_ID), Transaction_Amount DECIMAL(10,2), Transaction_Date DATE);","SELECT COUNT(DISTINCT c.Customer_ID) AS Total_Customers FROM Customers c JOIN Transactions t ON c.Customer_ID = t.Customer_ID WHERE t.Transaction_Date >= DATE('now', '-1 month');","This query joins the Customers and Transactions tables on the Customer_ID column. Then, it filters the data to include only transactions that occurred in the past month. Finally, it counts the number of distinct customers who made a transaction using the COUNT(DISTINCT) function."
845,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",What are the top 5 stocks held in portfolios with a total value greater than $1 million as of 2023-10-27?,"CREATE TABLE Portfolio (
  portfolio_id INT PRIMARY KEY,
  client_id INT,
  total_value DECIMAL
);

CREATE TABLE Portfolio_Stock (
  portfolio_id INT,
  stock_symbol VARCHAR(10),
  quantity INT,
  PRIMARY KEY (portfolio_id, stock_symbol),
  FOREIGN KEY (portfolio_id) REFERENCES Portfolio(portfolio_id),
  FOREIGN KEY (stock_symbol) REFERENCES Stock(stock_symbol)
);

CREATE TABLE Stock (
  stock_symbol VARCHAR(10) PRIMARY KEY,
  company_name VARCHAR(100)
);

INSERT INTO Portfolio (portfolio_id, client_id, total_value) VALUES
(1, 101, 1200000),
(2, 102, 2500000),
(3, 103, 500000),
(4, 104, 750000),
(5, 105, 1100000);

INSERT INTO Portfolio_Stock (portfolio_id, stock_symbol, quantity) VALUES
(1, 'AAPL', 100),
(1, 'MSFT', 50),
(1, 'AMZN', 75),
(2, 'GOOG', 150),
(2, 'TSLA', 100),
(2, 'META', 50),
(3, 'JPM', 25),
(3, 'WFC', 50),
(3, 'BAC', 75),
(4, 'BRK.B', 100),
(4, 'V', 50),
(4, 'MA', 75),
(5, 'UNH', 125),
(5, 'PG', 75),
(5, 'KO', 50);

INSERT INTO Stock (stock_symbol, company_name) VALUES
('AAPL', 'Apple Inc.'),
('MSFT', 'Microsoft Corporation'),
('AMZN', 'Amazon.com Inc.'),
('GOOG', 'Alphabet Inc.'),
('TSLA', 'Tesla Inc.'),
('META', 'Meta Platforms Inc.'),
('JPM', 'JPMorgan Chase & Co.'),
('WFC', 'Wells Fargo & Company'),
('BAC', 'Bank of America Corporation'),
('BRK.B', 'Berkshire Hathaway Inc.'),
('V', 'Visa Inc.'),
('MA', 'Mastercard Incorporated'),
('UNH', 'UnitedHealth Group Incorporated'),
('PG', 'Procter & Gamble Company'),
('KO', 'Coca-Cola Company');","SELECT s.company_name, SUM(ps.quantity) AS TotalQuantity
FROM Portfolio_Stock ps
JOIN Portfolio p ON ps.portfolio_id = p.portfolio_id
JOIN Stock s ON ps.stock_symbol = s.stock_symbol
WHERE p.total_value > 1000000
GROUP BY s.company_name
ORDER BY TotalQuantity DESC
LIMIT 5;","1. Join Portfolio_Stock table with Portfolio table on portfolio_id to retrieve stock holdings for portfolios with total_value greater than $1 million.
2. Join Portfolio_Stock with Stock table on stock_symbol to retrieve company names.
3. Group the result by company_name and sum the quantity of each stock held.
4. Order the result by TotalQuantity in descending order.
5. Limit the result to the top 5 companies."
846,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Identify all clients who have invested in stocks from the technology sector and the healthcare sector as of 2023-10-27.,"CREATE TABLE Portfolio (
  portfolio_id INT PRIMARY KEY,
  client_id INT,
  total_value DECIMAL
);

CREATE TABLE Portfolio_Stock (
  portfolio_id INT,
  stock_symbol VARCHAR(10),
  quantity INT,
  PRIMARY KEY (portfolio_id, stock_symbol),
  FOREIGN KEY (portfolio_id) REFERENCES Portfolio(portfolio_id),
  FOREIGN KEY (stock_symbol) REFERENCES Stock(stock_symbol)
);

CREATE TABLE Stock (
  stock_symbol VARCHAR(10) PRIMARY KEY,
  company_name VARCHAR(100),
  sector VARCHAR(50)
);

INSERT INTO Portfolio (portfolio_id, client_id, total_value) VALUES
(1, 101, 1200000),
(2, 102, 2500000),
(3, 103, 500000),
(4, 104, 750000),
(5, 105, 1100000);

INSERT INTO Portfolio_Stock (portfolio_id, stock_symbol, quantity) VALUES
(1, 'AAPL', 100),
(1, 'MSFT', 50),
(1, 'AMZN', 75),
(2, 'GOOG', 150),
(2, 'TSLA', 100),
(2, 'META', 50),
(3, 'JPM', 25),
(3, 'WFC', 50),
(3, 'BAC', 75),
(4, 'BRK.B', 100),
(4, 'V', 50),
(4, 'MA', 75),
(5, 'UNH', 125),
(5, 'PG', 75),
(5, 'KO', 50);

INSERT INTO Stock (stock_symbol, company_name, sector) VALUES
('AAPL', 'Apple Inc.', 'Technology'),
('MSFT', 'Microsoft Corporation', 'Technology'),
('AMZN', 'Amazon.com Inc.', 'Technology'),
('GOOG', 'Alphabet Inc.', 'Technology'),
('TSLA', 'Tesla Inc.', 'Technology'),
('META', 'Meta Platforms Inc.', 'Technology'),
('JPM', 'JPMorgan Chase & Co.', 'Finance'),
('WFC', 'Wells Fargo & Company', 'Finance'),
('BAC', 'Bank of America Corporation', 'Finance'),
('BRK.B', 'Berkshire Hathaway Inc.', 'Finance'),
('V', 'Visa Inc.', 'Finance'),
('MA', 'Mastercard Incorporated', 'Finance'),
('UNH', 'UnitedHealth Group Incorporated', 'Healthcare'),
('PG', 'Procter & Gamble Company', 'Consumer Staples'),
('KO', 'Coca-Cola Company', 'Consumer Staples');","SELECT DISTINCT p.client_id
FROM Portfolio p
INNER JOIN Portfolio_Stock ps ON p.portfolio_id = ps.portfolio_id
INNER JOIN Stock s ON ps.stock_symbol = s.stock_symbol
WHERE s.sector IN ('Technology', 'Healthcare');","1. Join Portfolio, Portfolio_Stock, and Stock tables using inner joins.
2. Filter the results to include only clients who have invested in stocks from either the Technology or Healthcare sector."
847,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Create a table to store customer investment transactions, including purchase date, purchase price, quantity, and ticker symbol.","CREATE TABLE customer_transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    purchase_date DATE,
    purchase_price DECIMAL(10,2),
    quantity INT,
    ticker_symbol VARCHAR(10),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);","CREATE TABLE customer_transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    purchase_date DATE,
    purchase_price DECIMAL(10,2),
    quantity INT,
    ticker_symbol VARCHAR(10),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);","This SQL statement creates a table named `customer_transactions` with the following columns:

* `transaction_id`: An integer that serves as the primary key and automatically increments for each new transaction.
* `customer_id`: An integer representing the ID of the customer who made the transaction.
* `purchase_date`: The date on which the transaction was made.
* `purchase_price`: The price at which the investment was purchased.
* `quantity`: The number of units of the investment that were purchased.
* `ticker_symbol`: The ticker symbol of the investment that was purchased.

The statement also defines a foreign key constraint on the `customer_id` column, referencing the `customer_id` column in the `customers` table. This ensures that each transaction is associated with a valid customer."
848,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Create a view that shows the current holdings of each customer, including the total number of shares owned and the total value of their holdings.","CREATE TABLE customer_transactions (
    transaction_id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT,
    purchase_date DATE,
    purchase_price DECIMAL(10,2),
    quantity INT,
    ticker_symbol VARCHAR(10),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

CREATE TABLE stock_prices (
    date DATE PRIMARY KEY,
    ticker_symbol VARCHAR(10),
    closing_price DECIMAL(10,2),
    FOREIGN KEY (ticker_symbol) REFERENCES customer_transactions(ticker_symbol)
);","CREATE VIEW customer_holdings AS
SELECT c.customer_id, c.customer_name, s.ticker_symbol, SUM(t.quantity) AS total_shares, SUM(t.quantity * s.closing_price) AS total_value
FROM customer_transactions t
INNER JOIN customers c ON t.customer_id = c.customer_id
INNER JOIN stock_prices s ON t.ticker_symbol = s.ticker_symbol
GROUP BY c.customer_id, c.customer_name, s.ticker_symbol;","This SQL statement creates a view named `customer_holdings` that provides a summary of each customer's current holdings. The view joins three tables:

* `customer_transactions`: Stores information about customer transactions, including the quantity of each investment purchased.
* `customers`: Stores information about customers, including their customer ID and name.
* `stock_prices`: Stores the closing price of each stock on a given date.

The view calculates the following for each customer and stock:

* `total_shares`: The total number of shares of a particular stock owned by the customer.
* `total_value`: The total value of the customer's holdings in a particular stock, calculated as the total number of shares multiplied by the current closing price."
849,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Create a table to store information about mutual funds, including the fund name, ticker symbol, expense ratio, and investment objective.","CREATE TABLE mutual_funds (
    fund_id INT PRIMARY KEY AUTO_INCREMENT,
    fund_name VARCHAR(255),
    ticker_symbol VARCHAR(10),
    expense_ratio DECIMAL(5,2),
    investment_objective VARCHAR(255)
);","CREATE TABLE mutual_funds (
    fund_id INT PRIMARY KEY AUTO_INCREMENT,
    fund_name VARCHAR(255),
    ticker_symbol VARCHAR(10),
    expense_ratio DECIMAL(5,2),
    investment_objective VARCHAR(255)
);","This SQL statement creates a table named `mutual_funds` with the following columns:

* `fund_id`: An integer that serves as the primary key and automatically increments for each new fund.
* `fund_name`: The name of the mutual fund.
* `ticker_symbol`: The ticker symbol of the mutual fund.
* `expense_ratio`: The annual expense ratio of the mutual fund, expressed as a decimal.
* `investment_objective`: The investment objective of the mutual fund."
850,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","How many orders were placed in the last month, grouped by region and product category, excluding orders with a status of 'Cancelled'?","CREATE TABLE Orders ( 
    order_id INT PRIMARY KEY, 
    customer_id INT, 
    product_id INT, 
    region VARCHAR(255), 
    order_date DATE, 
    order_status VARCHAR(255) 
);

CREATE TABLE Products ( 
    product_id INT PRIMARY KEY, 
    product_name VARCHAR(255), 
    product_category VARCHAR(255) 
);

INSERT INTO Orders (order_id, customer_id, product_id, region, order_date, order_status) VALUES 
(1, 101, 21, 'North America', '2023-04-01', 'Completed'), 
(2, 102, 22, 'Europe', '2023-04-05', 'Cancelled'), 
(3, 103, 23, 'Asia', '2023-04-10', 'Shipped'), 
(4, 104, 21, 'North America', '2023-04-15', 'Completed'), 
(5, 105, 24, 'Europe', '2023-04-20', 'Pending'), 
(6, 106, 22, 'Asia', '2023-04-25', 'Completed'), 
(7, 107, 23, 'North America', '2023-04-30', 'Cancelled'), 
(8, 108, 21, 'Europe', '2023-05-01', 'Completed'), 
(9, 109, 24, 'Asia', '2023-05-05', 'Shipped');

INSERT INTO Products (product_id, product_name, product_category) VALUES 
(21, 'Laptop', 'Electronics'), 
(22, 'Shirt', 'Apparel'), 
(23, 'Coffee Beans', 'Food'), 
(24, 'Desk Lamp', 'Furniture');","SELECT Region, Product_Category, COUNT(*) AS Order_Count 
FROM Orders o 
JOIN Products p ON o.product_id = p.product_id 
WHERE o.order_date >= DATE('now', '-1 month') AND o.order_status <> 'Cancelled' 
GROUP BY Region, Product_Category 
ORDER BY Region, Product_Category;","This SQL query selects the region, product category, and count of orders for orders placed in the last month, excluding orders with a status of 'Cancelled'.

- The query joins the 'Orders' and 'Products' tables on the 'product_id' field.
- It filters the results to include orders placed in the last month using the 'DATE' function and the 'now' keyword.
- It excludes orders with a status of 'Cancelled' using the '<>' operator.
- It groups the results by region and product category using the 'GROUP BY' clause.
- It counts the number of orders for each group using the 'COUNT(*) AS Order_Count' expression.
- It orders the results by region and product category using the 'ORDER BY' clause."
851,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average cost of raw materials used in production for each product category in the last quarter?,"CREATE TABLE Production_Costs ( 
    production_cost_id INT PRIMARY KEY, 
    product_id INT, 
    raw_material_cost DECIMAL(10,2), 
    production_date DATE 
);

CREATE TABLE Products ( 
    product_id INT PRIMARY KEY, 
    product_name VARCHAR(255), 
    product_category VARCHAR(255) 
);

INSERT INTO Production_Costs (production_cost_id, product_id, raw_material_cost, production_date) VALUES 
(1, 21, 100.50, '2023-03-01'), 
(2, 22, 55.75, '2023-03-05'), 
(3, 23, 30.25, '2023-03-10'), 
(4, 21, 110.00, '2023-03-15'), 
(5, 22, 60.50, '2023-03-20'), 
(6, 23, 35.00, '2023-03-25'), 
(7, 21, 120.25, '2023-03-30'), 
(8, 22, 58.00, '2023-04-01'), 
(9, 23, 32.50, '2023-04-05'), 
(10, 21, 105.75, '2023-04-10'), 
(11, 22, 65.25, '2023-04-15'), 
(12, 23, 37.75, '2023-04-20'), 
(13, 21, 115.50, '2023-04-25'), 
(14, 22, 59.00, '2023-04-30'), 
(15, 23, 34.00, '2023-05-01'), 
(16, 21, 125.00, '2023-05-05'), 
(17, 22, 62.75, '2023-05-10'), 
(18, 23, 36.50, '2023-05-15');

INSERT INTO Products (product_id, product_name, product_category) VALUES 
(21, 'Laptop', 'Electronics'), 
(22, 'Shirt', 'Apparel'), 
(23, 'Coffee Beans', 'Food');","SELECT p.product_category, AVG(pc.raw_material_cost) AS Average_Raw_Material_Cost 
FROM Production_Costs pc 
JOIN Products p ON pc.product_id = p.product_id 
WHERE pc.production_date >= DATE('now', '-3 months') AND pc.production_date < DATE('now') 
GROUP BY p.product_category 
ORDER BY p.product_category;","This SQL query calculates the average cost of raw materials used in production for each product category in the last quarter.

- It joins the 'Production_Costs' and 'Products' tables on the 'product_id' field.
- It filters the results to include production costs from the last quarter using the 'DATE' function and the 'now' keyword.
- It groups the results by product category using the 'GROUP BY' clause.
- It calculates the average raw material cost for each group using the 'AVG(pc.raw_material_cost)' expression.
- It orders the results by product category using the 'ORDER BY' clause."
852,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","I need to insert a new record into the `Production_Processes` table. The new record should have the following values: `process_id` = 1001, `product_id` = 2001, `start_date` = '2023-04-15', `end_date` = '2023-04-18', `status` = 'In Progress'.","CREATE TABLE Production_Processes (process_id INT PRIMARY KEY, product_id INT, start_date DATE, end_date DATE, status VARCHAR(255));
INSERT INTO Production_Processes (process_id, product_id, start_date, end_date, status) VALUES (1000, 2000, '2023-04-10', '2023-04-13', 'Completed');","INSERT INTO Production_Processes (process_id, product_id, start_date, end_date, status) VALUES (1001, 2001, '2023-04-15', '2023-04-18', 'In Progress');","The SQL statement inserts a new record into the `Production_Processes` table. The new record has the following values:
* `process_id`: 1001
* `product_id`: 2001
* `start_date`: '2023-04-15'
* `end_date`: '2023-04-18'
* `status`: 'In Progress'"
853,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",How many items have been returned with a reason of 'damaged'?,"CREATE TABLE RETURNS (RETURN_ID INT PRIMARY KEY, ITEM_ID INT, RETURN_REASON VARCHAR(255), RETURN_DATE DATE, CUSTOMER_ID INT); CREATE TABLE ITEMS (ITEM_ID INT PRIMARY KEY, ITEM_NAME VARCHAR(255), ITEM_DESCRIPTION TEXT, ITEM_PRICE DECIMAL(10,2), ITEM_CATEGORY VARCHAR(255), ITEM_SUPPLIER_ID INT);",SELECT COUNT(*) FROM RETURNS WHERE RETURN_REASON = 'damaged';,This query selects the count of rows from the RETURNS table where the RETURN_REASON column is equal to 'damaged'.
854,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average price of items in the 'Electronics' category?,"CREATE TABLE ITEMS (ITEM_ID INT PRIMARY KEY, ITEM_NAME VARCHAR(255), ITEM_DESCRIPTION TEXT, ITEM_PRICE DECIMAL(10,2), ITEM_CATEGORY VARCHAR(255), ITEM_SUPPLIER_ID INT);",SELECT AVG(ITEM_PRICE) FROM ITEMS WHERE ITEM_CATEGORY = 'Electronics';,This query selects the average of the ITEM_PRICE column from the ITEMS table where the ITEM_CATEGORY column is equal to 'Electronics'.
855,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the average stock price of Tesla in the past week?,"CREATE TABLE StockPrices (date DATE, symbol VARCHAR(10), price DECIMAL(10,2));
INSERT INTO StockPrices VALUES ('2023-10-26', 'TSLA', 200.50), ('2023-10-27', 'TSLA', 205.75), ('2023-10-28', 'TSLA', 210.00), ('2023-10-29', 'TSLA', 207.50), ('2023-10-30', 'TSLA', 212.25), ('2023-10-31', 'TSLA', 215.00), ('2023-11-01', 'TSLA', 217.75);","SELECT AVG(price) FROM StockPrices WHERE symbol = 'TSLA' AND date BETWEEN DATE('now', '-7 days') AND DATE('now');","This query selects the average price of Tesla stock (`symbol = 'TSLA'`) from the `StockPrices` table for the past week (`date BETWEEN DATE('now', '-7 days') AND DATE('now')`)."
856,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 performing stocks in the technology sector this month?,"CREATE TABLE Stocks (symbol VARCHAR(10), sector VARCHAR(20), price DECIMAL(10,2));
INSERT INTO Stocks VALUES ('AAPL', 'Technology', 175.00), ('MSFT', 'Technology', 280.00), ('AMZN', 'Technology', 105.50), ('GOOG', 'Technology', 2500.00), ('FB', 'Technology', 200.00), ('TSLA', 'Energy', 210.00), ('XOM', 'Energy', 100.00), ('CVX', 'Energy', 55.00);","SELECT symbol, price FROM Stocks WHERE sector = 'Technology' ORDER BY price DESC LIMIT 5;","This query selects the symbol and price of the top 5 stocks (`LIMIT 5`) in the technology sector (`sector = 'Technology'`) from the `Stocks` table, ordered by price in descending order (`ORDER BY price DESC`)."
857,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Show me the transaction history for customer ID 12345 in the past month.,"CREATE TABLE Transactions (transaction_id INT, customer_id INT, date DATE, amount DECIMAL(10,2));
INSERT INTO Transactions VALUES (1, 12345, '2023-10-26', 100.00), (2, 12345, '2023-10-27', 50.00), (3, 12346, '2023-10-28', 75.00), (4, 12345, '2023-10-29', 25.00), (5, 12347, '2023-10-30', 150.00), (6, 12345, '2023-10-31', 200.00), (7, 12345, '2023-11-01', 175.00);","SELECT * FROM Transactions WHERE customer_id = 12345 AND date BETWEEN DATE('now', '-1 month') AND DATE('now');","This query selects all transactions (`SELECT *`) for customer ID 12345 (`customer_id = 12345`) from the `Transactions` table in the past month (`date BETWEEN DATE('now', '-1 month') AND DATE('now')`)."
858,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the total investment value of my portfolio?,"CREATE TABLE Portfolio (symbol VARCHAR(10), quantity INT, price DECIMAL(10,2));
INSERT INTO Portfolio VALUES ('AAPL', 100, 175.00), ('MSFT', 50, 280.00), ('AMZN', 200, 105.50), ('GOOG', 10, 2500.00), ('FB', 75, 200.00);",SELECT SUM(quantity * price) FROM Portfolio;,This query calculates the total investment value of the portfolio by multiplying the quantity of each stock (`quantity`) by its current price (`price`) and summing the results (`SUM(...)`).
859,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Calculate the risk score of my investment portfolio based on historical volatility.,"CREATE TABLE HistoricalVolatility (symbol VARCHAR(10), volatility DECIMAL(5,2));
INSERT INTO HistoricalVolatility VALUES ('AAPL', 0.25), ('MSFT', 0.15), ('AMZN', 0.30), ('GOOG', 0.20), ('FB', 0.28);",SELECT SUM(quantity * volatility) FROM Portfolio JOIN HistoricalVolatility ON Portfolio.symbol = HistoricalVolatility.symbol;,This query calculates the risk score of the portfolio by multiplying the quantity of each stock (`quantity`) by its historical volatility (`volatility`) from the `HistoricalVolatility` table and summing the results (`SUM(...)`). The result is a weighted average of volatility based on the portfolio composition.
860,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","I want to create a view that shows me the total number of units produced for each product in 2023, along with the total production time and the average production time per unit. I also want to see the country where each product was produced. Use the Production table and the Products table.","CREATE TABLE Production ( 
    ProductionID INT PRIMARY KEY, 
    ProductID INT, 
    ProductionDate DATE, 
    Quantity INT, 
    ProductionTime DECIMAL(10,2) 
);

CREATE TABLE Products ( 
    ProductID INT PRIMARY KEY, 
    ProductName VARCHAR(255), 
    CountryOfOrigin VARCHAR(255) 
);

INSERT INTO Production (ProductionID, ProductID, ProductionDate, Quantity, ProductionTime) 
VALUES 
(1, 1, '2023-01-01', 100, 10.00), 
(2, 1, '2023-01-02', 150, 12.50), 
(3, 2, '2023-01-03', 200, 15.00), 
(4, 2, '2023-01-04', 250, 17.50), 
(5, 3, '2023-01-05', 300, 20.00), 
(6, 3, '2023-01-06', 350, 22.50), 
(7, 4, '2023-01-07', 400, 25.00), 
(8, 4, '2023-01-08', 450, 27.50), 
(9, 5, '2023-01-09', 500, 30.00), 
(10, 5, '2023-01-10', 550, 32.50);

INSERT INTO Products (ProductID, ProductName, CountryOfOrigin) 
VALUES 
(1, 'Product A', 'USA'), 
(2, 'Product B', 'China'), 
(3, 'Product C', 'Germany'), 
(4, 'Product D', 'Japan'), 
(5, 'Product E', 'France');","CREATE VIEW ProductionSummary AS 
SELECT 
    p.ProductName,
    p.CountryOfOrigin,
    SUM(p.Quantity) AS TotalUnitsProduced,
    SUM(p.ProductionTime) AS TotalProductionTime,
    AVG(p.ProductionTime) AS AverageProductionTimePerUnit
FROM Production p
JOIN Products p2 ON p.ProductID = p2.ProductID
WHERE p.ProductionDate BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY p.ProductName, p.CountryOfOrigin;","The SQL query creates a view called ProductionSummary that shows the total number of units produced for each product in 2023, along with the total production time and the average production time per unit. It also shows the country where each product was produced.

The query joins the Production table and the Products table on the ProductID column. It then filters the data to only include records where the ProductionDate is between '2023-01-01' and '2023-12-31'.

The query then groups the data by ProductName and CountryOfOrigin and calculates the following:

* TotalUnitsProduced: The sum of the Quantity column for each group.
* TotalProductionTime: The sum of the ProductionTime column for each group.
* AverageProductionTimePerUnit: The average of the ProductionTime column for each group."
861,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Display the names of all suppliers who have supplied any parts used in products manufactured in the month of January 2023.,"CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255) NOT NULL, Country VARCHAR(255));
CREATE TABLE Parts (PartID INT PRIMARY KEY, PartName VARCHAR(255) NOT NULL, SupplierID INT REFERENCES Suppliers(SupplierID));
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, PartID INT REFERENCES Parts(PartID));
CREATE TABLE Production (ProductionID INT PRIMARY KEY, ProductID INT REFERENCES Products(ProductID), ProductionDate DATE NOT NULL);
INSERT INTO Suppliers (SupplierID, SupplierName, Country) VALUES (1, 'Acme Inc.', 'USA'), (2, 'Global Supplies', 'China'), (3, 'Euro Parts Ltd.', 'Germany');
INSERT INTO Parts (PartID, PartName, SupplierID) VALUES (1, 'Widget A', 1), (2, 'Widget B', 2), (3, 'Widget C', 3);
INSERT INTO Products (ProductID, ProductName, PartID) VALUES (1, 'Product X', 1), (2, 'Product Y', 2), (3, 'Product Z', 3);
INSERT INTO Production (ProductionID, ProductID, ProductionDate) VALUES (1, 1, '2023-01-15'), (2, 2, '2023-01-20'), (3, 3, '2023-01-25');","SELECT DISTINCT s.SupplierName
FROM Suppliers s
JOIN Parts p ON s.SupplierID = p.SupplierID
JOIN Products pr ON p.PartID = pr.PartID
WHERE pr.ProductID IN (SELECT ProductID FROM Production WHERE ProductionDate >= '2023-01-01' AND ProductionDate <= '2023-01-31');","This query first joins the Suppliers, Parts, and Products tables based on their respective foreign key relationships. It then filters the Production table to only include records where the ProductionDate falls within the month of January 2023. Finally, it selects the distinct names of suppliers who have supplied any parts used in products manufactured during that time period."
862,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Identify all products that have not been manufactured since December 1st, 2022.","CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255) NOT NULL, Country VARCHAR(255));
CREATE TABLE Parts (PartID INT PRIMARY KEY, PartName VARCHAR(255) NOT NULL, SupplierID INT REFERENCES Suppliers(SupplierID));
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, PartID INT REFERENCES Parts(PartID));
CREATE TABLE Production (ProductionID INT PRIMARY KEY, ProductID INT REFERENCES Products(ProductID), ProductionDate DATE NOT NULL);
INSERT INTO Suppliers (SupplierID, SupplierName, Country) VALUES (1, 'Acme Inc.', 'USA'), (2, 'Global Supplies', 'China'), (3, 'Euro Parts Ltd.', 'Germany');
INSERT INTO Parts (PartID, PartName, SupplierID) VALUES (1, 'Widget A', 1), (2, 'Widget B', 2), (3, 'Widget C', 3);
INSERT INTO Products (ProductID, ProductName, PartID) VALUES (1, 'Product X', 1), (2, 'Product Y', 2), (3, 'Product Z', 3);
INSERT INTO Production (ProductionID, ProductID, ProductionDate) VALUES (1, 1, '2023-01-15'), (2, 2, '2023-01-20'), (3, 3, '2023-01-25'), (4, 1, '2022-11-15'), (5, 2, '2022-11-20'), (6, 3, '2022-11-25');","SELECT p.ProductName
FROM Products p
LEFT JOIN Production pr ON p.ProductID = pr.ProductID
WHERE pr.ProductionDate IS NULL OR pr.ProductionDate < '2022-12-01';","This query uses a left join between the Products and Production tables. For each product, it checks if there are any corresponding production records with a production date on or after December 1st, 2022. Products that do not have any matching production records or have production records before December 1st are considered to have not been manufactured since that date."
863,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Create a view that displays the average production time for each product, calculated as the difference between the maximum and minimum production dates for each product.","CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255) NOT NULL, Country VARCHAR(255));
CREATE TABLE Parts (PartID INT PRIMARY KEY, PartName VARCHAR(255) NOT NULL, SupplierID INT REFERENCES Suppliers(SupplierID));
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, PartID INT REFERENCES Parts(PartID));
CREATE TABLE Production (ProductionID INT PRIMARY KEY, ProductID INT REFERENCES Products(ProductID), ProductionDate DATE NOT NULL);
INSERT INTO Suppliers (SupplierID, SupplierName, Country) VALUES (1, 'Acme Inc.', 'USA'), (2, 'Global Supplies', 'China'), (3, 'Euro Parts Ltd.', 'Germany');
INSERT INTO Parts (PartID, PartName, SupplierID) VALUES (1, 'Widget A', 1), (2, 'Widget B', 2), (3, 'Widget C', 3);
INSERT INTO Products (ProductID, ProductName, PartID) VALUES (1, 'Product X', 1), (2, 'Product Y', 2), (3, 'Product Z', 3);
INSERT INTO Production (ProductionID, ProductID, ProductionDate) VALUES (1, 1, '2023-01-15'), (2, 2, '2023-01-20'), (3, 3, '2023-01-25'), (4, 1, '2022-11-15'), (5, 2, '2022-11-20'), (6, 3, '2022-11-25');","CREATE VIEW ProductAvgProductionTime AS
SELECT p.ProductName, MAX(pr.ProductionDate) - MIN(pr.ProductionDate) AS AverageProductionTime
FROM Products p
JOIN Production pr ON p.ProductID = pr.ProductID
GROUP BY p.ProductName;","This query first joins the Products and Production tables. It then calculates the difference between the maximum and minimum production dates for each product, which represents the average production time. Finally, it groups the results by product name and creates a view called ProductAvgProductionTime."
864,arts,"Comprehensive data on artist demographics, creative works, market trends, and sales; diversity and inclusion metrics.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a list of all suppliers who have supplied parts for orders placed in the last month, excluding suppliers who have not supplied any parts in the last six months.","CREATE TABLE orders ( order_id INT PRIMARY KEY, customer_id INT, order_date DATE, status VARCHAR(255) );
CREATE TABLE order_items ( order_id INT, part_id INT, quantity INT, PRIMARY KEY (order_id, part_id), FOREIGN KEY (order_id) REFERENCES orders(order_id) );
CREATE TABLE parts ( part_id INT PRIMARY KEY, part_name VARCHAR(255), supplier_id INT, FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id) );
CREATE TABLE suppliers ( supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), supplier_address VARCHAR(255) );
INSERT INTO orders (order_id, customer_id, order_date, status) VALUES (1, 101, '2023-04-01', 'shipped'), (2, 102, '2023-04-05', 'shipped'), (3, 103, '2023-04-10', 'shipped'), (4, 104, '2023-04-15', 'shipped'), (5, 105, '2023-04-20', 'shipped'), (6, 106, '2023-04-25', 'shipped'), (7, 107, '2023-04-30', 'shipped'), (8, 108, '2023-05-01', 'shipped'), (9, 109, '2023-05-05', 'shipped'), (10, 110, '2023-05-10', 'shipped'), (11, 111, '2023-05-15', 'shipped'), (12, 112, '2023-05-20', 'shipped'), (13, 113, '2023-05-25', 'shipped'), (14, 114, '2023-05-30', 'shipped'), (15, 115, '2023-06-01', 'shipped'), (16, 116, '2023-06-05', 'shipped'), (17, 117, '2023-06-10', 'shipped'), (18, 118, '2023-06-15', 'shipped'), (19, 119, '2023-06-20', 'shipped'), (20, 120, '2023-06-25', 'shipped');
INSERT INTO order_items (order_id, part_id, quantity) VALUES (1, 1, 10), (1, 2, 5), (2, 3, 15), (2, 4, 8), (3, 5, 20), (3, 6, 12), (4, 7, 30), (4, 8, 16), (5, 9, 40), (5, 10, 24), (6, 11, 50), (6, 12, 30), (7, 13, 60), (7, 14, 36), (8, 15, 70), (8, 16, 42), (9, 17, 80), (9, 18, 48), (10, 19, 90), (10, 20, 54), (11, 21, 100), (11, 22, 60), (12, 23, 110), (12, 24, 66), (13, 25, 120), (13, 26, 72), (14, 27, 130), (14, 28, 78), (15, 29, 140), (15, 30, 84), (16, 31, 150), (16, 32, 90), (17, 33, 160), (17, 34, 96), (18, 35, 170), (18, 36, 102), (19, 37, 180), (19, 38, 108), (20, 39, 190), (20, 40, 114);","SELECT s.supplier_name, s.supplier_address
FROM suppliers s
JOIN parts p ON s.supplier_id = p.supplier_id
JOIN order_items oi ON p.part_id = oi.part_id
JOIN orders o ON oi.order_id = o.order_id
WHERE o.order_date >= date('now', '-1 month')
EXCEPT
SELECT s.supplier_name, s.supplier_address
FROM suppliers s
LEFT JOIN parts p ON s.supplier_id = p.supplier_id
LEFT JOIN order_items oi ON p.part_id = oi.part_id
LEFT JOIN orders o ON oi.order_id = o.order_id
WHERE o.order_date >= date('now', '-6 months')","This SQL query retrieves a list of all suppliers who have supplied parts for orders placed in the last month, excluding suppliers who have not supplied any parts in the last six months.

The query first joins the `suppliers` table with the `parts` table on the `supplier_id` column. It then joins the `parts` table with the `order_items` table on the `part_id` column, and finally joins the `order_items` table with the `orders` table on the `order_id` column.

The `WHERE` clause filters the results to only include orders that were placed in the last month. The `date('now', '-1 month')` function returns the date one month ago.

The `EXCEPT` clause is used to exclude any suppliers who have not supplied any parts in the last six months. The subquery in the `EXCEPT` clause is similar to the main query, but it filters the results to only include orders that were placed in the last six months.

The final result of the query is a list of all suppliers who have supplied parts for orders placed in the last month, excluding suppliers who have not supplied any parts in the last six months."
865,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Which countries have the highest average number of students per teacher at the primary school level?,"CREATE TABLE countries (  country_id INT PRIMARY KEY,  country_name VARCHAR(255) NOT NULL,  region VARCHAR(255) NOT NULL);CREATE TABLE schools (  school_id INT PRIMARY KEY,  school_name VARCHAR(255) NOT NULL,  country_id INT REFERENCES countries(country_id),  level VARCHAR(255) NOT NULL);CREATE TABLE teachers (  teacher_id INT PRIMARY KEY,  teacher_name VARCHAR(255) NOT NULL,  school_id INT REFERENCES schools(school_id));CREATE TABLE students (  student_id INT PRIMARY KEY,  student_name VARCHAR(255) NOT NULL,  school_id INT REFERENCES schools(school_id));","SELECT c.country_name, COUNT(DISTINCT s.student_id) / COUNT(DISTINCT t.teacher_id) AS avg_students_per_teacher FROM countries c JOIN schools s ON c.country_id = s.country_id JOIN teachers t ON s.school_id = t.school_id WHERE s.level = 'Primary' GROUP BY c.country_name ORDER BY avg_students_per_teacher DESC LIMIT 10;","This query first joins the 'countries' table with the 'schools' table on the 'country_id' field, and then joins the 'schools' table with the 'teachers' table on the 'school_id' field. It filters the results to only include schools at the 'Primary' level. Then, it groups the results by country name and calculates the average number of students per teacher for each country. Finally, it orders the results by average students per teacher in descending order and limits the results to the top 10 countries."
866,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average test score for each subject in each region?,"CREATE TABLE subjects (  subject_id INT PRIMARY KEY,  subject_name VARCHAR(255) NOT NULL);CREATE TABLE tests (  test_id INT PRIMARY KEY,  student_id INT REFERENCES students(student_id),  subject_id INT REFERENCES subjects(subject_id),  score INT NOT NULL);CREATE TABLE regions (  region_id INT PRIMARY KEY,  region_name VARCHAR(255) NOT NULL);CREATE TABLE schools (  school_id INT PRIMARY KEY,  school_name VARCHAR(255) NOT NULL,  country_id INT REFERENCES countries(country_id),  level VARCHAR(255) NOT NULL,  region_id INT REFERENCES regions(region_id));","SELECT r.region_name, s.subject_name, AVG(t.score) AS average_score FROM regions r JOIN countries c ON r.region_id = c.region_id JOIN schools s ON c.country_id = s.country_id JOIN subjects s ON s.subject_id = t.subject_id GROUP BY r.region_name, s.subject_name ORDER BY r.region_name, s.subject_name;","This query first joins the 'regions' table with the 'countries' table on the 'region_id' field, and then joins the 'countries' table with the 'schools' table on the 'country_id' field. It then joins the 'schools' table with the 'subjects' table on the 'subject_id' field, and finally joins the 'subjects' table with the 'tests' table on the 'subject_id' field. It groups the results by region name and subject name, and then calculates the average test score for each subject in each region. Finally, it orders the results by region name and subject name."
867,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What percentage of students in each country are enrolled in private schools?,"CREATE TABLE schools (  school_id INT PRIMARY KEY,  school_name VARCHAR(255) NOT NULL,  country_id INT REFERENCES countries(country_id),  level VARCHAR(255) NOT NULL,  type VARCHAR(255) NOT NULL);CREATE TABLE students (  student_id INT PRIMARY KEY,  student_name VARCHAR(255) NOT NULL,  school_id INT REFERENCES schools(school_id));","SELECT c.country_name, COUNT(DISTINCT CASE WHEN s.type = 'Private' THEN s.school_id ELSE NULL END) * 100.0 / COUNT(DISTINCT s.school_id) AS percentage_private_schools FROM countries c JOIN schools s ON c.country_id = s.country_id GROUP BY c.country_name ORDER BY percentage_private_schools DESC;","This query first joins the 'countries' table with the 'schools' table on the 'country_id' field. It then filters the results to only include schools that are of the 'Private' type. It then groups the results by country name and calculates the percentage of students in each country that are enrolled in private schools. Finally, it orders the results by percentage of private schools in descending order."
868,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the average teacher salary in each region?,"CREATE TABLE teachers (  teacher_id INT PRIMARY KEY,  teacher_name VARCHAR(255) NOT NULL,  school_id INT REFERENCES schools(school_id),  salary INT NOT NULL);CREATE TABLE regions (  region_id INT PRIMARY KEY,  region_name VARCHAR(255) NOT NULL);CREATE TABLE schools (  school_id INT PRIMARY KEY,  school_name VARCHAR(255) NOT NULL,  country_id INT REFERENCES countries(country_id),  level VARCHAR(255) NOT NULL,  region_id INT REFERENCES regions(region_id));","SELECT r.region_name, AVG(t.salary) AS average_teacher_salary FROM regions r JOIN schools s ON r.region_id = s.region_id JOIN teachers t ON s.school_id = t.school_id GROUP BY r.region_name ORDER BY average_teacher_salary DESC;","This query first joins the 'regions' table with the 'schools' table on the 'region_id' field, and then joins the 'schools' table with the 'teachers' table on the 'school_id' field. It groups the results by region name and calculates the average teacher salary for each region. Finally, it orders the results by average teacher salary in descending order."
869,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the distribution of student test scores in each subject?,"CREATE TABLE subjects (  subject_id INT PRIMARY KEY,  subject_name VARCHAR(255) NOT NULL);CREATE TABLE tests (  test_id INT PRIMARY KEY,  student_id INT REFERENCES students(student_id),  subject_id INT REFERENCES subjects(subject_id),  score INT NOT NULL);","SELECT s.subject_name, score, COUNT(*) AS frequency FROM subjects s JOIN tests t ON s.subject_id = t.subject_id GROUP BY s.subject_name, score ORDER BY s.subject_name, score;","This query first joins the 'subjects' table with the 'tests' table on the 'subject_id' field. It then groups the results by subject name and test score, and calculates the frequency of each score for each subject. Finally, it orders the results by subject name and test score."
870,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","How has the art market performed for women artists over the past 5 years? Generate a report that shows the average sale price, total sales volume, and number of works sold by year, segmented by region.","CREATE TABLE artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  gender VARCHAR(10) NOT NULL,  birth_year INT,  death_year INT );

CREATE TABLE artworks (  artwork_id INT PRIMARY KEY,  artist_id INT REFERENCES artists(artist_id),  artwork_title VARCHAR(255) NOT NULL,  creation_year INT,  medium VARCHAR(50),  sale_price DECIMAL(10,2) );

CREATE TABLE sales (  sale_id INT PRIMARY KEY,  artwork_id INT REFERENCES artworks(artwork_id),  sale_date DATE NOT NULL,  sale_price DECIMAL(10,2) );","WITH WomenArtists AS (
    SELECT artist_id
    FROM artists
    WHERE gender = 'Female'
),
YearlySales AS (
    SELECT
        SUBSTR(sale_date, 1, 4) AS sale_year,
        artwork_id,
        sale_price
    FROM sales
),
ArtistSales AS (
    SELECT
        sa.sale_year,
        a.artist_id,
        sa.sale_price
    FROM YearlySales sa
    JOIN artworks a ON sa.artwork_id = a.artwork_id
    JOIN WomenArtists wa ON a.artist_id = wa.artist_id
),
RegionalSales AS (
    SELECT
        a.sale_year,
        a.artist_id,
        a.sale_price,
        CASE
            WHEN a.sale_price BETWEEN 0 AND 10000 THEN 'Low'
            WHEN a.sale_price BETWEEN 10001 AND 100000 THEN 'Medium'
            ELSE 'High'
        END AS price_range
    FROM ArtistSales a
)
SELECT
    rs.sale_year,
    COUNT(DISTINCT rs.artist_id) AS num_artists,
    AVG(rs.sale_price) AS avg_sale_price,
    SUM(rs.sale_price) AS total_sales_volume,
    rs.price_range
FROM RegionalSales rs
GROUP BY rs.sale_year, rs.price_range
ORDER BY rs.sale_year, rs.price_range;","This query first identifies female artists from the 'artists' table. Then, it extracts yearly sales data from the 'sales' table and joins it with the 'artworks' table to associate sales with artists. The resulting data is filtered to include only sales by female artists. Next, the query calculates the average sale price, total sales volume, and number of artists for each year, grouped by price range. Finally, the results are sorted by year and price range to provide a clear overview of the art market performance for women artists over the past 5 years."
871,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Analyze the representation of different ethnicities among artists in the contemporary art scene, focusing on the top 10 selling artists in the past year. Generate a report that shows the ethnicity, number of works sold, and total sales value for each artist.","CREATE TABLE artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  ethnicity VARCHAR(50),  birth_year INT );

CREATE TABLE artworks (  artwork_id INT PRIMARY KEY,  artist_id INT REFERENCES artists(artist_id),  artwork_title VARCHAR(255) NOT NULL,  creation_year INT,  medium VARCHAR(50),  sale_price DECIMAL(10,2) );

CREATE TABLE sales (  sale_id INT PRIMARY KEY,  artwork_id INT REFERENCES artworks(artwork_id),  sale_date DATE NOT NULL,  sale_price DECIMAL(10,2) );","WITH TopSellingArtists AS (
    SELECT
        a.artist_id,
        a.artist_name,
        a.ethnicity,
        COUNT(s.artwork_id) AS num_works_sold,
        SUM(s.sale_price) AS total_sales_value
    FROM artists a
    JOIN artworks aw ON a.artist_id = aw.artist_id
    JOIN sales s ON aw.artwork_id = s.artwork_id
    WHERE s.sale_date BETWEEN DATE('now', '-1 year') AND DATE('now')
    GROUP BY a.artist_id, a.artist_name, a.ethnicity
    ORDER BY total_sales_value DESC
    LIMIT 10
)
SELECT
    tsa.artist_name,
    tsa.ethnicity,
    tsa.num_works_sold,
    tsa.total_sales_value
FROM TopSellingArtists tsa
ORDER BY tsa.total_sales_value DESC;","This query first identifies the top 10 selling artists in the past year by joining the 'artists', 'artworks', and 'sales' tables. It then filters the sales data to include only sales from the past year and groups the results by artist ID, name, and ethnicity. The query calculates the number of works sold and total sales value for each artist. Finally, it selects the top 10 artists based on total sales value and sorts the results in descending order."
872,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a dashboard that visualizes the diversity of museum collections in terms of artist representation. The dashboard should show the percentage of works by artists from different genders, ethnicities, and countries of origin for each museum. Additionally, it should allow users to filter by museum and time period.","CREATE TABLE artists (  artist_id INT PRIMARY KEY,  artist_name VARCHAR(255) NOT NULL,  gender VARCHAR(10) NOT NULL,  ethnicity VARCHAR(50),  birth_year INT,  death_year INT,  country_of_origin VARCHAR(50) );

CREATE TABLE artworks (  artwork_id INT PRIMARY KEY,  artist_id INT REFERENCES artists(artist_id),  artwork_title VARCHAR(255) NOT NULL,  creation_year INT,  medium VARCHAR(50) );

CREATE TABLE museum_collections (  museum_id INT PRIMARY KEY,  museum_name VARCHAR(255) NOT NULL,  artwork_id INT REFERENCES artworks(artwork_id) );","WITH ArtistDiversity AS (
    SELECT
        mc.museum_id,
        mc.museum_name,
        a.artist_id,
        a.gender,
        a.ethnicity,
        a.country_of_origin
    FROM museum_collections mc
    JOIN artworks aw ON mc.artwork_id = aw.artwork_id
    JOIN artists a ON aw.artist_id = a.artist_id
),
ArtistCounts AS (
    SELECT
        museum_id,
        museum_name,
        gender,
        ethnicity,
        country_of_origin,
        COUNT(*) AS artist_count
    FROM ArtistDiversity
    GROUP BY museum_id, museum_name, gender, ethnicity, country_of_origin
),
TotalArtists AS (
    SELECT
        museum_id,
        museum_name,
        COUNT(DISTINCT artist_id) AS total_artists
    FROM ArtistDiversity
    GROUP BY museum_id, museum_name
)
SELECT
    ad.museum_name,
    ad.gender,
    ad.ethnicity,
    ad.country_of_origin,
    100 * ad.artist_count / ta.total_artists AS percentage
FROM ArtistDiversity ad
JOIN ArtistCounts ac ON ad.museum_id = ac.museum_id AND ad.gender = ac.gender AND ad.ethnicity = ac.ethnicity AND ad.country_of_origin = ac.country_of_origin
JOIN TotalArtists ta ON ad.museum_id = ta.museum_id
ORDER BY ad.museum_name, ad.gender, ad.ethnicity, ad.country_of_origin;","This query first joins the 'museum_collections', 'artworks', and 'artists' tables to retrieve information about artists represented in museum collections. It then calculates the number of artists from different genders, ethnicities, and countries of origin for each museum. The query also calculates the total number of artists in each museum's collection. Finally, it joins these results to calculate the percentage of works by artists from different demographics for each museum."
873,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report on the top 10 most valuable artists of all time, based on the total value of their artwork sold at auctions. The report should include the artist's name, nationality, lifetime sales, and the average price of their artwork. Also, include a breakdown of sales by region and a comparison of sales between male and female artists.","CREATE TABLE artists (
    artist_id INT PRIMARY KEY,
    artist_name VARCHAR(255) NOT NULL,
    nationality VARCHAR(255),
    birth_year INT,
    death_year INT
);

CREATE TABLE artworks (
    artwork_id INT PRIMARY KEY,
    artist_id INT REFERENCES artists(artist_id),
    title VARCHAR(255) NOT NULL,
    creation_year INT,
    medium VARCHAR(255),
    estimated_value DECIMAL(10,2)
);

CREATE TABLE auction_sales (
    sale_id INT PRIMARY KEY,
    artwork_id INT REFERENCES artworks(artwork_id),
    auction_house VARCHAR(255),
    sale_date DATE,
    sale_price DECIMAL(10,2)
);

INSERT INTO artists (artist_id, artist_name, nationality, birth_year, death_year) VALUES
(1, 'Leonardo da Vinci', 'Italian', 1452, 1519),
(2, 'Pablo Picasso', 'Spanish', 1881, 1973),
(3, 'Vincent van Gogh', 'Dutch', 1853, 1890),
(4, 'Claude Monet', 'French', 1840, 1926),
(5, 'Michelangelo', 'Italian', 1475, 1564);

INSERT INTO artworks (artwork_id, artist_id, title, creation_year, medium, estimated_value) VALUES
(1, 1, 'Mona Lisa', 1503, 'Oil on wood', 712000000),
(2, 2, 'Guernica', 1937, 'Oil on canvas', 300000000),
(3, 3, 'Starry Night', 1889, 'Oil on canvas', 100000000),
(4, 4, 'Water Lilies', 1919, 'Oil on canvas', 50000000),
(5, 5, 'David', 1504, 'Marble', 250000000);

INSERT INTO auction_sales (sale_id, artwork_id, auction_house, sale_date, sale_price) VALUES
(1, 1, 'Christie's', '2017-11-15', 450000000),
(2, 2, 'Sotheby's', '2015-05-11', 179365000),
(3, 3, 'Phillips', '2022-05-11', 100000000),
(4, 4, 'Christie's', '2021-05-12', 36000000),
(5, 5, 'Sotheby's', '2004-05-19', 171360000);

CREATE VIEW artist_sales AS
SELECT a.artist_id, a.artist_name, a.nationality, SUM(s.sale_price) AS total_sales
FROM artists a
JOIN artworks aw ON a.artist_id = aw.artist_id
JOIN auction_sales s ON aw.artwork_id = s.artwork_id
GROUP BY a.artist_id, a.artist_name, a.nationality
ORDER BY total_sales DESC;","SELECT TOP 10 A.artist_name, A.nationality, SUM(S.sale_price) AS lifetime_sales, AVG(S.sale_price) AS avg_sale_price,SUM(CASE WHEN A.nationality = 'American' THEN S.sale_price ELSE 0 END) AS america_sales, SUM(CASE WHEN A.nationality = 'European' THEN S.sale_price ELSE 0 END) AS europe_sales,SUM(CASE WHEN A.nationality = 'Asian' THEN S.sale_price ELSE 0 END) AS asia_sales FROM artists A LEFT JOIN ARTWORKS AW ON A.artist_id = AW.artist_id LEFT JOIN auction_sales S ON AW.artwork_id = S.artwork_id GROUP BY A.artist_name, A.nationality ORDER BY lifetime_sales DESC","This query starts by selecting the top 10 artists based on their lifetime sales. It then calculates the average sale price for each artist and breaks down their sales by region. Finally, it compares the sales of male and female artists."
874,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report that shows the total revenue generated by each gallery in 2023, broken down by the number of visitors to the gallery in that year. Also, show the average price of artwork sold by each gallery in 2023. Include information about artists represented by these galleries and their contributions in terms of revenue generated and number of artworks sold in 2023.","CREATE TABLE galleries (
  gallery_id SERIAL PRIMARY KEY,
  gallery_name VARCHAR(255) NOT NULL,
  city VARCHAR(255),
  country VARCHAR(255)
);

CREATE TABLE artists (
  artist_id SERIAL PRIMARY KEY,
  artist_name VARCHAR(255) NOT NULL,
  nationality VARCHAR(255),
  birthdate DATE
);

CREATE TABLE artworks (
  artwork_id SERIAL PRIMARY KEY,
  artwork_name VARCHAR(255) NOT NULL,
  artist_id INT REFERENCES artists(artist_id),
  gallery_id INT REFERENCES galleries(gallery_id),
  year_created INT,
  price DECIMAL(10,2),
  sold BOOLEAN DEFAULT false
);

CREATE TABLE gallery_visits(
  gallery_id INT REFERENCES galleries(gallery_id),
  year INT,
  visitor_count INT
);

INSERT INTO galleries (gallery_name, city, country) VALUES
('Guggenheim Museum', 'New York City', 'USA'),
('MoMA', 'New York City', 'USA'),
('Tate Modern', 'London', 'UK'),
('Centre Pompidou', 'Paris', 'France'),
('Reina Sofía Museum', 'Madrid', 'Spain');

INSERT INTO artists (artist_name, nationality, birthdate) VALUES
('Pablo Picasso', 'Spanish', '1881-10-25'),
('Vincent van Gogh', 'Dutch', '1853-03-30'),
('Claude Monet', 'French', '1840-11-14'),
('Salvador Dalí', 'Spanish', '1904-05-11'),
('Frida Kahlo', 'Mexican', '1907-07-06');

INSERT INTO artworks (artwork_name, artist_id, gallery_id, year_created, price, sold) VALUES
('Guernica', 1, 1, 1937, 300000000.00, true),
('Starry Night', 2, 2, 1889, 100000000.00, true),
('Water Lilies', 3, 3, 1914, 55000000.00, false),
('The Persistence of Memory', 4, 4, 1931, 25000000.00, true),
('Self-Portrait with Thorn Necklace and Hummingbird', 5, 5, 1940, 30000000.00, false);

INSERT INTO gallery_visits (gallery_id, year, visitor_count) VALUES
(1, 2020, 1200000),
(1, 2021, 1000000),
(1, 2022, 1150000),
(1, 2023, 1300000),
(2, 2020, 850000),
(2, 2021, 750000),
(2, 2022, 900000),
(2, 2023, 1000000),
(3, 2020, 5000000),
(3, 2021, 4500000),
(3, 2022, 5200000),
(3, 2023, 5800000),
(4, 2020, 3200000),
(4, 2021, 3000000),
(4, 2022, 3500000),
(4, 2023, 3800000),
(5, 2020, 1800000),
(5, 2021, 1600000),
(5, 2022, 1900000),
(5, 2023, 2100000);","WITH GalleryRevenue AS (
  SELECT
    g.gallery_name,
    SUM(a.price) AS total_revenue,
    AVG(a.price) AS average_price,
    COUNT(DISTINCT a.artwork_id) AS total_artworks_sold
  FROM artworks AS a
  INNER JOIN galleries AS g
    ON a.gallery_id = g.gallery_id
  WHERE a.sold
  AND EXTRACT(YEAR FROM a.year_created) = 2023
  GROUP BY g.gallery_name
),
GalleryVisitors AS (
  SELECT
    gv.gallery_id,
    gv.year,
    SUM(gv.visitor_count) AS total_visitors_year
  FROM gallery_visits AS gv
  WHERE EXTRACT(YEAR FROM gv.year) = 2023
  GROUP BY gv.gallery_id,
      gv.year  
),
ArtistRevenue AS (
  SELECT
    ar.artist_name AS artist_name,a.
    gallery_id AS gallery_id,
    SUM(a.price * (a.sold::INT))  AS revenue
  FROM artworks a 
  LEFT JOIN artists AS ar ON  a.artist_id = ar.artist_id  
  GROUP BY artist_name,a.gallery_id
)
SELECT
 gr.gallery_name,
 gv.total_visitors_year,
 gr.average_price,
 gr.total_revenue,ar.revenue,ar.artist_name
FROM GalleryRevenue gr 
INNER JOIN GalleryVisitors gv
ON gv.gallery_id = gr.gallery_name  
LEFT JOIN ArtistRevenue ar 
ON ar.gallery_id = gr.gallery_name 
GROUP BY 1,2, 3,4 
ORDER BY gr.total_revenue DESC;","This SQL statement addresses your request for a detailed breakdown of gallery revenue, visitor numbers, average artwork prices in 2023, and artist contributions in terms of revenue and artworks sold in the same timeframe.

Here's a detailed breakdown of the steps:

1. **Subquery GalleryRevenue**: Calculates total sales and average prices at galleries in 2023
   * Joins artworks and galleries tables on matching gallery IDs and filters for artworks marked as 'sold' in 2023.
   * Groups results by gallery name and calculates total revenue, total artworks sold, and average artwork price for each gallery.

2. **Subquery GalleryVisitors**: Calculates total visitors for each gallery in 2023
   * Filters gallery_visits for the year 2023, groups the results by gallery ID and year, then sums visitor counts to obtain annual total visitors for each gallery.

3. **Main Query**: Combines data and presents results
   * Leverages SQL's LEFT JOIn capabilities for efficient and accurate output. 
   * Combines GalleryRevenue with GalleryVisitors on matching gallery names and LEFT JOIns with Artist revenue on gallery_id. 
   * Selects the desired columns and groups them by gallery_name, total_visitors_year, average_price, total_revenue.   
   * Sorts the final output by total_revenue in descending order.

This approach allows for concise yet informative reporting, presenting a clear picture of each gallery's performance, visitor engagement, average artwork pricing, and insights into artists' revenue contribution to their respective representing gallery in 2023."
875,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","What is the average return on investment (ROI) for each investment type in the portfolio, excluding any investments made in the last 3 months?","CREATE TABLE Investments ( 
 InvestmentID INT PRIMARY KEY, 
 InvestorID INT, 
 InvestmentTypeID INT, 
 InvestmentDate DATE, 
 InvestmentAmount DECIMAL, 
 FOREIGN KEY (InvestorID) REFERENCES Investors(InvestorID), 
 FOREIGN KEY (InvestmentTypeID) REFERENCES InvestmentTypes(InvestmentTypeID) 
 );

CREATE TABLE InvestmentTypes ( 
 InvestmentTypeID INT PRIMARY KEY, 
 InvestmentType VARCHAR(50) 
 );

CREATE TABLE Investors ( 
 InvestorID INT PRIMARY KEY, 
 InvestorName VARCHAR(50) 
 );

INSERT INTO Investments (InvestmentID, InvestorID, InvestmentTypeID, InvestmentDate, InvestmentAmount) 
VALUES 
(1, 1, 1, '2021-01-01', 10000), 
(2, 2, 2, '2021-02-01', 5000), 
(3, 3, 3, '2021-03-01', 25000), 
(4, 1, 1, '2021-04-01', 15000), 
(5, 2, 2, '2021-05-01', 7500), 
(6, 3, 3, '2021-06-01', 30000), 
(7, 1, 1, '2021-07-01', 20000), 
(8, 2, 2, '2021-08-01', 10000), 
(9, 3, 3, '2021-09-01', 35000), 
(10, 1, 1, '2021-10-01', 25000), 
(11, 2, 2, '2021-11-01', 12500), 
(12, 3, 3, '2021-12-01', 40000), 
(13, 1, 4, '2022-01-01', 30000), 
(14, 2, 5, '2022-02-01', 15000), 
(15, 3, 6, '2022-03-01', 45000), 
(16, 1, 4, '2022-04-01', 35000), 
(17, 2, 5, '2022-05-01', 17500), 
(18, 3, 6, '2022-06-01', 50000);

CREATE TABLE InvestmentReturns ( 
 InvestmentID INT, 
 ReturnDate DATE, 
 ReturnAmount DECIMAL, 
 PRIMARY KEY (InvestmentID, ReturnDate), 
 FOREIGN KEY (InvestmentID) REFERENCES Investments(InvestmentID) 
 );

INSERT INTO InvestmentReturns (InvestmentID, ReturnDate, ReturnAmount) 
VALUES 
(1, '2021-01-31', 1000), 
(2, '2021-02-28', 500), 
(3, '2021-03-31', 2500), 
(4, '2021-04-30', 1500), 
(5, '2021-05-31', 750), 
(6, '2021-06-30', 3000), 
(7, '2021-07-31', 2000), 
(8, '2021-08-31', 1000), 
(9, '2021-09-30', 3500), 
(10, '2021-10-31', 2500), 
(11, '2021-11-30', 1250), 
(12, '2021-12-31', 4000), 
(13, '2022-01-31', 3000), 
(14, '2022-02-28', 1500), 
(15, '2022-03-31', 4500), 
(16, '2022-04-30', 3500), 
(17, '2022-05-31', 1750), 
(18, '2022-06-30', 5000);

CREATE TABLE InvestmentTypes ( 
 InvestmentTypeID INT PRIMARY KEY, 
 InvestmentType VARCHAR(50) 
 );

INSERT INTO InvestmentTypes (InvestmentTypeID, InvestmentType) 
VALUES 
(1, 'Stocks'), 
(2, 'Bonds'), 
(3, 'Mutual Funds'), 
(4, 'Real Estate'), 
(5, 'Commodities'), 
(6, 'Private Equity');","SELECT it.InvestmentType, 
       AVG(ir.ReturnAmount) AS AverageReturn 
FROM InvestmentReturns ir 
JOIN Investments i ON ir.InvestmentID = i.InvestmentID 
JOIN InvestmentTypes it ON i.InvestmentTypeID = it.InvestmentTypeID 
WHERE i.InvestmentDate < DATE('now', '-3 months') 
GROUP BY it.InvestmentType;","1. Join the 'InvestmentReturns' table with the 'Investments' table on the 'InvestmentID' field to link returns to investments.
2. Join the 'Investments' table with the 'InvestmentTypes' table on the 'InvestmentTypeID' field to associate investments with their types.
3. Filter the 'Investments' table to exclude investments made in the last 3 months.
4. Group the results by 'InvestmentType'.
5. Calculate the average return for each investment type using the 'AVG()' function on the 'ReturnAmount' field.
6. Select the 'InvestmentType' and the calculated 'AverageReturn' for each investment type."
876,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",What is the total value of transactions processed by New York branches in February 2023?,"CREATE TABLE branches (branch_id INT PRIMARY KEY, branch_name VARCHAR(255), city VARCHAR(255));
CREATE TABLE transactions (transaction_id INT PRIMARY KEY, branch_id INT REFERENCES branches(branch_id), transaction_date DATE, amount DECIMAL(10,2));
INSERT INTO branches (branch_id, branch_name, city) VALUES (1, 'Manhattan', 'New York'), (2, 'Brooklyn', 'New York'), (3, 'Chicago', 'Chicago'), (4, 'Los Angeles', 'Los Angeles');
INSERT INTO transactions (transaction_id, branch_id, transaction_date, amount) VALUES (1, 1, '2023-02-01', 100.00), (2, 2, '2023-02-05', 50.00), (3, 1, '2023-02-10', 200.00), (4, 3, '2023-02-15', 75.00), (5, 2, '2023-02-20', 150.00), (6, 1, '2023-02-25', 300.00);",SELECT SUM(amount) FROM transactions WHERE branch_id IN (SELECT branch_id FROM branches WHERE city = 'New York') AND transaction_date BETWEEN '2023-02-01' AND '2023-02-28';,"This query first selects the branch IDs for all branches located in New York City. Then, it filters the transactions table to only include transactions processed by those branches in February 2023. Finally, it calculates the sum of all transaction amounts for those filtered transactions."
877,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Find all customers who have made more than 10 transactions in the past year.,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255));
CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), transaction_date DATE);","SELECT customer_id FROM transactions GROUP BY customer_id HAVING COUNT(*) > 10 AND MAX(transaction_date) > DATE('now', '-1 year');","This query first groups the transactions table by customer ID. Then, it filters the results to only include customers who have made more than 10 transactions. Finally, it further filters the results to only include customers who have made at least one transaction in the past year."
878,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Update the 'status' field of all orders placed in January 2023 to 'shipped'.,"CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, status VARCHAR(255));",UPDATE orders SET status = 'shipped' WHERE order_date BETWEEN '2023-01-01' AND '2023-01-31';,This query updates the 'status' field of all orders placed in January 2023 to 'shipped'.
879,education,"Detailed records on student demographics, academic performance, curriculum efficacy, school management, and educational resource allocation.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Delete all records from the 'transactions' table that are older than 5 years.,"CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), transaction_date DATE, amount DECIMAL(10,2));","DELETE FROM transactions WHERE transaction_date < DATE('now', '-5 years');",This query deletes all records from the 'transactions' table that are older than 5 years.
880,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Show me all patients who have been diagnosed with cancer and are currently undergoing chemotherapy.,"CREATE TABLE patients ( patient_id INT PRIMARY KEY,  first_name VARCHAR(255) NOT NULL,  last_name VARCHAR(255) NOT NULL,  date_of_birth DATE NOT NULL,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  phone_number VARCHAR(255),  email VARCHAR(255),  insurance_provider VARCHAR(255),  insurance_id VARCHAR(255) );

CREATE TABLE diagnoses ( diagnosis_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  diagnosis_date DATE NOT NULL,  diagnosis_code VARCHAR(255),  diagnosis_description VARCHAR(255) );

CREATE TABLE treatments ( treatment_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  treatment_start_date DATE NOT NULL,  treatment_end_date DATE,  treatment_type VARCHAR(255),  treatment_description VARCHAR(255) );","SELECT p.first_name, p.last_name FROM patients p JOIN diagnoses d ON p.patient_id = d.patient_id JOIN treatments t ON p.patient_id = t.patient_id WHERE d.diagnosis_description = 'Cancer' AND t.treatment_type = 'Chemotherapy' AND t.treatment_end_date IS NULL;","This query joins the patients, diagnoses, and treatments tables to find patients who have a diagnosis of cancer and are currently undergoing chemotherapy. The query first selects the first and last names of patients from the patients table. It then joins the patients table to the diagnoses table on the patient_id column. It also joins the patients table to the treatments table on the patient_id column. The query then filters the results to include only patients who have a diagnosis of cancer and are currently undergoing chemotherapy. The query filters for patients with a diagnosis of cancer by checking the diagnosis_description column in the diagnoses table. It filters for patients who are currently undergoing chemotherapy by checking the treatment_type column in the treatments table and the treatment_end_date column. The treatment_end_date column is NULL for patients who are currently undergoing treatment."
881,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find all patients who have been prescribed a specific medication, such as Lipitor.","CREATE TABLE patients ( patient_id INT PRIMARY KEY,  first_name VARCHAR(255) NOT NULL,  last_name VARCHAR(255) NOT NULL,  date_of_birth DATE NOT NULL,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  phone_number VARCHAR(255),  email VARCHAR(255),  insurance_provider VARCHAR(255),  insurance_id VARCHAR(255) );

CREATE TABLE medications ( medication_id INT PRIMARY KEY,  medication_name VARCHAR(255) NOT NULL,  medication_description VARCHAR(255) );

CREATE TABLE prescriptions ( prescription_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  medication_id INT REFERENCES medications(medication_id),  prescription_date DATE NOT NULL,  dosage VARCHAR(255),  frequency VARCHAR(255) );","SELECT p.first_name, p.last_name FROM patients p JOIN prescriptions pr ON p.patient_id = pr.patient_id JOIN medications m ON pr.medication_id = m.medication_id WHERE m.medication_name = 'Lipitor';","This query joins the patients, prescriptions, and medications tables to find patients who have been prescribed a specific medication. The query first selects the first and last names of patients from the patients table. It then joins the patients table to the prescriptions table on the patient_id column. It also joins the prescriptions table to the medications table on the medication_id column. The query then filters the results to include only patients who have been prescribed the specified medication. The query filters for patients who have been prescribed the specified medication by checking the medication_name column in the medications table."
882,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify patients who have a history of a particular condition, such as diabetes.","CREATE TABLE patients ( patient_id INT PRIMARY KEY,  first_name VARCHAR(255) NOT NULL,  last_name VARCHAR(255) NOT NULL,  date_of_birth DATE NOT NULL,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  phone_number VARCHAR(255),  email VARCHAR(255),  insurance_provider VARCHAR(255),  insurance_id VARCHAR(255) );

CREATE TABLE diagnoses ( diagnosis_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  diagnosis_date DATE NOT NULL,  diagnosis_code VARCHAR(255),  diagnosis_description VARCHAR(255) );","SELECT p.first_name, p.last_name FROM patients p JOIN diagnoses d ON p.patient_id = d.patient_id WHERE d.diagnosis_description = 'Diabetes';",This query joins the patients and diagnoses tables to identify patients who have a history of a particular condition. The query first selects the first and last names of patients from the patients table. It then joins the patients table to the diagnoses table on the patient_id column. The query then filters the results to include only patients who have a diagnosis of the specified condition. The query filters for patients who have a diagnosis of the specified condition by checking the diagnosis_description column in the diagnoses table.
883,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find all patients who are scheduled for an upcoming appointment.,"CREATE TABLE patients ( patient_id INT PRIMARY KEY,  first_name VARCHAR(255) NOT NULL,  last_name VARCHAR(255) NOT NULL,  date_of_birth DATE NOT NULL,  address VARCHAR(255),  city VARCHAR(255),  state VARCHAR(255),  zip_code INT,  phone_number VARCHAR(255),  email VARCHAR(255),  insurance_provider VARCHAR(255),  insurance_id VARCHAR(255) );

CREATE TABLE appointments ( appointment_id INT PRIMARY KEY,  patient_id INT REFERENCES patients(patient_id),  appointment_date DATE NOT NULL,  appointment_time TIME NOT NULL,  appointment_type VARCHAR(255),  appointment_description VARCHAR(255) );","SELECT p.first_name, p.last_name FROM patients p JOIN appointments a ON p.patient_id = a.patient_id WHERE a.appointment_date >= CURDATE();",This query joins the patients and appointments tables to find all patients who are scheduled for an upcoming appointment. The query first selects the first and last names of patients from the patients table. It then joins the patients table to the appointments table on the patient_id column. The query then filters the results to include only patients who have an appointment scheduled for a date that is on or after the current date. The query filters for patients with upcoming appointments by checking the appointment_date column in the appointments table.
884,real estate,"Real estate market data covering property listings, pricing trends, property features, regional market analysis, and real estate investment returns.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Show a list of all medications that are currently available in the pharmacy.,"CREATE TABLE medications ( medication_id INT PRIMARY KEY,  medication_name VARCHAR(255) NOT NULL,  medication_description VARCHAR(255),  inventory_level INT );

CREATE TABLE pharmacy_inventory ( inventory_id INT PRIMARY KEY,  medication_id INT REFERENCES medications(medication_id),  quantity INT NOT NULL,  expiration_date DATE );",SELECT m.medication_name FROM medications m JOIN pharmacy_inventory pi ON m.medication_id = pi.medication_id WHERE pi.quantity > 0 AND pi.expiration_date >= CURDATE();,This query joins the medications and pharmacy_inventory tables to show a list of all medications that are currently available in the pharmacy. The query first selects the medication_name from the medications table. It then joins the medications table to the pharmacy_inventory table on the medication_id column. The query then filters the results to include only medications that have a quantity greater than 0 and an expiration date that is on or after the current date. The query filters for medications that are available by checking the quantity and expiration_date columns in the pharmacy_inventory table.
885,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the total area of land used for agriculture in India in 2022?,"CREATE TABLE India_Agriculture (state VARCHAR(255), district VARCHAR(255), crop VARCHAR(255), area_hectares INT, year INT);",SELECT SUM(area_hectares) FROM India_Agriculture WHERE country = 'India' AND year = 2022;,This query calculates the total area of land used for agriculture in India in 2022 by summing the area_hectares column for all rows where the country is 'India' and the year is 2022.
886,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Which state in India has the highest average yield of wheat in 2022?,"CREATE TABLE India_Wheat_Yield (state VARCHAR(255), district VARCHAR(255), yield_kg_per_hectare INT, year INT);",SELECT state FROM India_Wheat_Yield WHERE yield_kg_per_hectare = (SELECT MAX(yield_kg_per_hectare) FROM India_Wheat_Yield WHERE year = 2022);,This query finds the state with the highest average yield of wheat in India in 2022 by selecting the state from the India_Wheat_Yield table where the yield_kg_per_hectare is equal to the maximum yield_kg_per_hectare for the year 2022.
887,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","What is the average rainfall in the state of Maharashtra in the months of June, July, and August of 2022?","CREATE TABLE India_Rainfall (state VARCHAR(255), district VARCHAR(255), month INT, rainfall_mm INT, year INT);","SELECT AVG(rainfall_mm) FROM India_Rainfall WHERE state = 'Maharashtra' AND month IN (6, 7, 8) AND year = 2022;","This query calculates the average rainfall in the state of Maharashtra in the months of June, July, and August of 2022 by averaging the rainfall_mm column for all rows where the state is 'Maharashtra', the month is in (6, 7, 8), and the year is 2022."
888,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 crops grown in India in terms of area cultivated in 2022?,"CREATE TABLE India_Crop_Area (crop VARCHAR(255), area_hectares INT, year INT);","SELECT crop, area_hectares FROM India_Crop_Area WHERE year = 2022 ORDER BY area_hectares DESC LIMIT 5;",This query finds the top 5 crops grown in India in terms of area cultivated in 2022 by selecting the crop and area_hectares columns from the India_Crop_Area table where the year is 2022 and then ordering the results by area_hectares in descending order and limiting the output to the top 5 rows.
889,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",What is the average yield of wheat in California in 2023?,"CREATE TABLE Wheat_Yields (    
    State VARCHAR(255),    
    Year INT,    
    Crop VARCHAR(255),    
    Yield DECIMAL(10,2)    
);

INSERT INTO Wheat_Yields (State, Year, Crop, Yield)    
VALUES ('California', 2022, 'Wheat', 75.2),    
('California', 2021, 'Wheat', 72.5),    
('California', 2020, 'Wheat', 78.1),    
('Oregon', 2022, 'Wheat', 68.9),    
('Oregon', 2021, 'Wheat', 65.7),    
('Oregon', 2020, 'Wheat', 71.3);",SELECT AVG(Yield) FROM Wheat_Yields WHERE State = 'California' AND Year = 2023 AND Crop = 'Wheat';,"This SQL query selects the average yield of wheat in California in 2023 from the Wheat_Yields table. The WHERE clause filters the data to include only records for California, the year 2023, and the crop 'Wheat'. The AVG function calculates the average yield from the filtered data."
890,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,What is the average age of patients in the city of Los Angeles who have been diagnosed with diabetes in the last year?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, city VARCHAR(255), diagnosis VARCHAR(255), diagnosis_date DATE);
INSERT INTO patients (patient_id, name, date_of_birth, city, diagnosis, diagnosis_date) VALUES
(1, 'John Smith', '1980-01-01', 'Los Angeles', 'Diabetes', '2023-03-08'),
(2, 'Alice Johnson', '1975-05-15', 'New York', 'Asthma', '2022-08-12'),
(3, 'Bob Williams', '1990-12-24', 'Chicago', 'Cancer', '2023-01-19'),
(4, 'Emily Garcia', '1985-07-07', 'Los Angeles', 'Diabetes', '2023-02-22'),
(5, 'David Rodriguez', '1970-09-10', 'Miami', 'Heart Disease', '2022-11-05');

CREATE TABLE demographics (patient_id INT PRIMARY KEY, gender VARCHAR(10), ethnicity VARCHAR(255), country VARCHAR(255), region VARCHAR(255));
INSERT INTO demographics (patient_id, gender, ethnicity, country, region) VALUES
(1, 'Male', 'Caucasian', 'United States', 'West'),
(2, 'Female', 'African American', 'United States', 'East'),
(3, 'Male', 'Asian', 'China', 'East Asia'),
(4, 'Female', 'Latina', 'Mexico', 'Central America'),
(5, 'Male', 'Hispanic', 'United States', 'South');","SELECT AVG(patients.date_of_birth) FROM patients
JOIN demographics ON patients.patient_id = demographics.patient_id
WHERE patients.city = 'Los Angeles' AND patients.diagnosis = 'Diabetes' AND patients.diagnosis_date BETWEEN DATE('now', '-1 year') AND DATE('now');","This query joins the 'patients' and 'demographics' tables on the 'patient_id' field.
It then filters the results to include only patients in Los Angeles who have been diagnosed with diabetes in the last year.
Finally, it calculates the average age of these patients."
891,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,What are the top 5 most prescribed medications for patients diagnosed with diabetes in the United States?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, diagnosis VARCHAR(255));
CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), dosage VARCHAR(255), frequency VARCHAR(255));
CREATE TABLE prescriptions (prescription_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), medication_id INT REFERENCES medications(medication_id), date_prescribed DATE, prescriber VARCHAR(255));
INSERT INTO patients (patient_id, name, date_of_birth, address, city, state, zip_code, diagnosis) VALUES
(1, 'John Doe', '1980-01-01', '123 Main St', 'Anytown', 'CA', 91234, 'Diabetes'),
(2, 'Jane Smith', '1975-02-15', '456 Oak Ave', 'Anytown', 'CA', 91234, 'Diabetes'),
(3, 'Robert Jones', '1960-03-20', '789 Pine St', 'Anytown', 'CA', 91234, 'Diabetes'),
(4, 'Mary Brown', '1955-04-25', '1011 Elm St', 'Anytown', 'CA', 91234, 'Diabetes'),
(5, 'Michael Davis', '1940-05-30', '1213 Willow St', 'Anytown', 'CA', 91234, 'Diabetes');
INSERT INTO medications (medication_id, name, dosage, frequency) VALUES
(1, 'Metformin', '500mg', 'Twice daily'),
(2, 'Glipizide', '5mg', 'Once daily'),
(3, 'Insulin', '10 units', 'Twice daily'),
(4, 'Lantus', '20 units', 'Once daily'),
(5, 'Victoza', '0.6mg', 'Once weekly');
INSERT INTO prescriptions (prescription_id, patient_id, medication_id, date_prescribed, prescriber) VALUES
(1, 1, 1, '2023-01-01', 'Dr. Smith'),
(2, 1, 2, '2023-02-01', 'Dr. Smith'),
(3, 2, 1, '2023-03-01', 'Dr. Jones'),
(4, 2, 3, '2023-04-01', 'Dr. Jones'),
(5, 3, 2, '2023-05-01', 'Dr. Brown'),
(6, 3, 4, '2023-06-01', 'Dr. Brown'),
(7, 4, 1, '2023-07-01', 'Dr. Davis'),
(8, 4, 5, '2023-08-01', 'Dr. Davis'),
(9, 5, 3, '2023-09-01', 'Dr. Williams'),
(10, 5, 4, '2023-10-01', 'Dr. Williams');","SELECT m.name, COUNT(*) AS num_prescriptions
FROM medications m
JOIN prescriptions p ON m.medication_id = p.medication_id
JOIN patients pa ON p.patient_id = pa.patient_id
WHERE pa.diagnosis = 'Diabetes'
GROUP BY m.name
ORDER BY num_prescriptions DESC
LIMIT 5;","This SQL query first joins the medications, prescriptions, and patients tables on the medication_id and patient_id columns, respectively. It then filters the results to only include patients with a diagnosis of 'Diabetes'. The query then groups the results by medication name and counts the number of prescriptions for each medication. Finally, the query orders the results by the number of prescriptions in descending order and limits the results to the top 5 medications."
892,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,How many patients in California have been diagnosed with cancer in the past year?,"CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT, diagnosis VARCHAR(255));
CREATE TABLE diagnoses (diagnosis_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), diagnosis_date DATE, diagnosis VARCHAR(255));","SELECT COUNT(*) AS num_patients
FROM patients
JOIN diagnoses d ON patients.patient_id = d.patient_id
WHERE patients.state = 'CA' AND d.diagnosis = 'Cancer' AND d.diagnosis_date >= DATE('now', '-1 year');","This SQL query first joins the patients and diagnoses tables on the patient_id column. It then filters the results to only include patients in California ('CA') who have been diagnosed with 'Cancer' in the past year (>= DATE('now', '-1 year')). Finally, the query counts the number of patients that meet these criteria."
893,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,What are the average wait times for patients with appointments scheduled for the next week?,"CREATE TABLE appointments (appointment_id INT PRIMARY KEY, patient_id INT REFERENCES patients(patient_id), appointment_date DATE, appointment_time TIME, appointment_type VARCHAR(255), doctor_id INT REFERENCES doctors(doctor_id));
CREATE TABLE patients (patient_id INT PRIMARY KEY, name VARCHAR(255), date_of_birth DATE, address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code INT);","SELECT a.appointment_type, AVG(strftime('%s', a.appointment_time) - strftime('%s', a.appointment_date)) AS avg_wait_time
FROM appointments a
WHERE a.appointment_date BETWEEN DATE('now', '+1 day') AND DATE('now', '+7 days')
GROUP BY a.appointment_type;","This SQL query first filters the appointments table to only include appointments scheduled for the next week (between DATE('now', '+1 day') and DATE('now', '+7 days')). It then calculates the difference in seconds between the appointment_time and appointment_date for each appointment. Finally, the query groups the results by appointment_type and calculates the average wait time for each type of appointment."
894,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,What are the top 10 most common side effects reported for patients taking Metformin?,"CREATE TABLE medications (medication_id INT PRIMARY KEY, name VARCHAR(255), dosage VARCHAR(255), frequency VARCHAR(255));
CREATE TABLE side_effects (side_effect_id INT PRIMARY KEY, medication_id INT REFERENCES medications(medication_id), side_effect VARCHAR(255), frequency INT);","SELECT se.side_effect, COUNT(*) AS num_reports
FROM side_effects se
JOIN medications m ON se.medication_id = m.medication_id
WHERE m.name = 'Metformin'
GROUP BY se.side_effect
ORDER BY num_reports DESC
LIMIT 10;","This SQL query first joins the side_effects and medications tables on the medication_id column. It then filters the results to only include side effects reported for patients taking 'Metformin'. The query then groups the results by side_effect and counts the number of reports for each side effect. Finally, the query orders the results by the number of reports in descending order and limits the results to the top 10 most common side effects."
895,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Update the 'status' field in the 'Production_Orders' table to 'Completed' for all orders with a 'start_date' before '2023-01-01' and a 'quantity_produced' greater than or equal to the 'quantity_ordered'.,"CREATE TABLE Production_Orders (order_id INT PRIMARY KEY, product_id INT, quantity_ordered INT, quantity_produced INT, start_date DATE, end_date DATE, status VARCHAR(255));
CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), description TEXT, unit_cost DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE Inventory (inventory_id INT PRIMARY KEY, product_id INT, quantity INT, location VARCHAR(255), FOREIGN KEY (product_id) REFERENCES Products(product_id));
CREATE TABLE Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), contact_info VARCHAR(255), product_id INT, FOREIGN KEY (product_id) REFERENCES Products(product_id));",UPDATE Production_Orders SET status = 'Completed' WHERE start_date < '2023-01-01' AND quantity_produced >= quantity_ordered;,This query updates the 'status' field to 'Completed' for all records in the 'Production_Orders' table where the 'start_date' is before '2023-01-01' and the 'quantity_produced' is greater than or equal to the 'quantity_ordered'. The WHERE clause ensures that only orders that meet both conditions are updated.
896,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Insert a new record into the 'Inventory' table with the following values: product_id = 123, quantity = 50, location = 'Warehouse A'.","CREATE TABLE Production_Orders (order_id INT PRIMARY KEY, product_id INT, quantity_ordered INT, quantity_produced INT, start_date DATE, end_date DATE, status VARCHAR(255));
CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), description TEXT, unit_cost DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE Inventory (inventory_id INT PRIMARY KEY, product_id INT, quantity INT, location VARCHAR(255), FOREIGN KEY (product_id) REFERENCES Products(product_id));
CREATE TABLE Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), contact_info VARCHAR(255), product_id INT, FOREIGN KEY (product_id) REFERENCES Products(product_id));","INSERT INTO Inventory (product_id, quantity, location) VALUES (123, 50, 'Warehouse A');","This query inserts a new record into the 'Inventory' table with the specified values for 'product_id', 'quantity', and 'location'. The INSERT statement specifies the column names and the values to be inserted."
897,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Delete all records from the 'Production_Orders' table where the 'status' field is 'Cancelled'.,"CREATE TABLE Production_Orders (order_id INT PRIMARY KEY, product_id INT, quantity_ordered INT, quantity_produced INT, start_date DATE, end_date DATE, status VARCHAR(255));
CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), description TEXT, unit_cost DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE Inventory (inventory_id INT PRIMARY KEY, product_id INT, quantity INT, location VARCHAR(255), FOREIGN KEY (product_id) REFERENCES Products(product_id));
CREATE TABLE Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), contact_info VARCHAR(255), product_id INT, FOREIGN KEY (product_id) REFERENCES Products(product_id));",DELETE FROM Production_Orders WHERE status = 'Cancelled';,This query deletes all records from the 'Production_Orders' table where the 'status' field is 'Cancelled'. The WHERE clause ensures that only orders with a 'Cancelled' status are deleted.
898,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Select the product name, unit cost, and total quantity in inventory for all products in the 'Inventory' table.","CREATE TABLE Production_Orders (order_id INT PRIMARY KEY, product_id INT, quantity_ordered INT, quantity_produced INT, start_date DATE, end_date DATE, status VARCHAR(255));
CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), description TEXT, unit_cost DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE Inventory (inventory_id INT PRIMARY KEY, product_id INT, quantity INT, location VARCHAR(255), FOREIGN KEY (product_id) REFERENCES Products(product_id));
CREATE TABLE Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), contact_info VARCHAR(255), product_id INT, FOREIGN KEY (product_id) REFERENCES Products(product_id));","SELECT p.product_name, p.unit_cost, SUM(i.quantity) AS total_quantity FROM Products p JOIN Inventory i ON p.product_id = i.product_id GROUP BY p.product_name, p.unit_cost;","This query selects the product name, unit cost, and total quantity in inventory for all products in the 'Inventory' table. The JOIN clause combines the 'Products' and 'Inventory' tables based on the 'product_id' field. The SUM() function calculates the total quantity for each product. The GROUP BY clause groups the results by product name and unit cost."
899,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Update the 'contact_info' field in the 'Suppliers' table to 'email@example.com' for all suppliers who supply products in the 'Electronics' category.,"CREATE TABLE Production_Orders (order_id INT PRIMARY KEY, product_id INT, quantity_ordered INT, quantity_produced INT, start_date DATE, end_date DATE, status VARCHAR(255));
CREATE TABLE Products (product_id INT PRIMARY KEY, product_name VARCHAR(255), description TEXT, unit_cost DECIMAL(10,2), category VARCHAR(255));
CREATE TABLE Inventory (inventory_id INT PRIMARY KEY, product_id INT, quantity INT, location VARCHAR(255), FOREIGN KEY (product_id) REFERENCES Products(product_id));
CREATE TABLE Suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), contact_info VARCHAR(255), product_id INT, FOREIGN KEY (product_id) REFERENCES Products(product_id));",UPDATE Suppliers SET contact_info = 'email@example.com' WHERE product_id IN (SELECT product_id FROM Products WHERE category = 'Electronics');,This query updates the 'contact_info' field to 'email@example.com' for all suppliers who supply products in the 'Electronics' category. The IN clause selects the product IDs from the 'Products' table where the 'category' is 'Electronics'. The UPDATE statement uses this list of product IDs to identify the suppliers to update.
900,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What is the average grade for students in Algebra 1 in the Spring 2023 semester, broken down by gender and ethnicity?","CREATE TABLE Students ( 
  StudentID INT PRIMARY KEY, 
  FirstName VARCHAR(50) NOT NULL, 
  LastName VARCHAR(50) NOT NULL, 
  Gender VARCHAR(10) NOT NULL, 
  Ethnicity VARCHAR(25) NOT NULL, 
  DateOfBirth DATE NOT NULL 
); 

CREATE TABLE Courses ( 
  CourseID INT PRIMARY KEY, 
  CourseName VARCHAR(50) NOT NULL, 
  Department VARCHAR(25) NOT NULL, 
  Semester VARCHAR(10) NOT NULL, 
  Year INT NOT NULL 
); 

CREATE TABLE Enrollments ( 
  EnrollmentID INT PRIMARY KEY, 
  StudentID INT NOT NULL, 
  CourseID INT NOT NULL, 
  Grade DECIMAL(3,2), 
  FOREIGN KEY (StudentID) REFERENCES Students(StudentID), 
  FOREIGN KEY (CourseID) REFERENCES Courses(CourseID) 
); 

INSERT INTO Students (StudentID, FirstName, LastName, Gender, Ethnicity, DateOfBirth) VALUES 
(1, 'John', 'Smith', 'Male', 'White', '2005-01-15'), 
(2, 'Alice', 'Johnson', 'Female', 'Black', '2004-08-22'), 
(3, 'David', 'Lee', 'Male', 'Asian', '2006-03-10'), 
(4, 'Emily', 'Williams', 'Female', 'Hispanic', '2005-06-12'), 
(5, 'Michael', 'Brown', 'Male', 'White', '2004-12-05'); 

INSERT INTO Courses (CourseID, CourseName, Department, Semester, Year) VALUES 
(1, 'Algebra 1', 'Mathematics', 'Spring', 2023), 
(2, 'Biology', 'Science', 'Fall', 2022), 
(3, 'English', 'Language Arts', 'Spring', 2023), 
(4, 'History', 'Social Studies', 'Fall', 2022), 
(5, 'Chemistry', 'Science', 'Spring', 2023); 

INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, Grade) VALUES 
(1, 1, 1, 85.5), 
(2, 2, 1, 92.0), 
(3, 3, 1, 78.5), 
(4, 4, 1, 89.0), 
(5, 5, 1, 95.0), 
(6, 1, 2, 77.0), 
(7, 2, 2, 88.0), 
(8, 3, 2, 91.0), 
(9, 4, 2, 82.5), 
(10, 5, 2, 94.0);","SELECT e.Gender, e.Ethnicity, AVG(e.Grade) AS AverageGrade 
FROM Enrollments e 
JOIN Courses c ON e.CourseID = c.CourseID 
WHERE c.CourseName = 'Algebra 1' AND c.Semester = 'Spring' AND c.Year = 2023 
GROUP BY e.Gender, e.Ethnicity 
ORDER BY e.Gender, e.Ethnicity;","This SQL query first joins the Enrollments and Courses tables on the CourseID to link student enrollment data with course information. 

It then filters the results to include only records for students enrolled in 'Algebra 1' during the 'Spring' semester of 2023. 

The query then groups the results by student Gender and Ethnicity and calculates the average grade for each group using the AVG() function. 

Finally, it orders the results by Gender and Ethnicity for easy analysis."
901,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many students are enrolled in each grade level across all schools in the district?,"CREATE TABLE Student (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), grade_level INT, school_id INT, FOREIGN KEY (school_id) REFERENCES School(school_id));
CREATE TABLE School (school_id INT PRIMARY KEY, school_name VARCHAR(255), district_id INT, FOREIGN KEY (district_id) REFERENCES District(district_id));
CREATE TABLE District (district_id INT PRIMARY KEY, district_name VARCHAR(255));
INSERT INTO Student (student_id, first_name, last_name, grade_level, school_id) VALUES
(1, 'John', 'Smith', 9, 1),
(2, 'Alice', 'Johnson', 10, 2),
(3, 'Bob', 'Williams', 11, 3),
(4, 'Emily', 'Jones', 12, 4),
(5, 'Michael', 'Brown', 9, 1),
(6, 'Sarah', 'Davis', 10, 2),
(7, 'David', 'Miller', 11, 3),
(8, 'Jessica', 'Wilson', 12, 4),
(9, 'William', 'Moore', 9, 1),
(10, 'Jennifer', 'Taylor', 10, 2),
(11, 'Richard', 'Anderson', 11, 3),
(12, 'Linda', 'Thomas', 12, 4);
INSERT INTO School (school_id, school_name, district_id) VALUES
(1, 'North High School', 1),
(2, 'South High School', 1),
(3, 'Central High School', 2),
(4, 'West High School', 2);
INSERT INTO District (district_id, district_name) VALUES
(1, 'Central District'),
(2, 'West District');","SELECT COUNT(*) AS student_count, s.grade_level
FROM Student s
INNER JOIN School sc ON s.school_id = sc.school_id
GROUP BY s.grade_level;","1. Join the Student and School tables on the school_id field to link student records to their respective schools.
2. Group the results by grade level to count the number of students in each grade.
3. Select the count of students in each grade level and the grade level itself."
902,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","What are the average test scores for each subject across all schools in the district, broken down by grade level?","CREATE TABLE Student (student_id INT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255), grade_level INT, school_id INT, FOREIGN KEY (school_id) REFERENCES School(school_id));
CREATE TABLE School (school_id INT PRIMARY KEY, school_name VARCHAR(255), district_id INT, FOREIGN KEY (district_id) REFERENCES District(district_id));
CREATE TABLE District (district_id INT PRIMARY KEY, district_name VARCHAR(255));
CREATE TABLE TestScore (test_score_id INT PRIMARY KEY, student_id INT, subject VARCHAR(255), score INT, test_date DATE, FOREIGN KEY (student_id) REFERENCES Student(student_id));
INSERT INTO Student (student_id, first_name, last_name, grade_level, school_id) VALUES
(1, 'John', 'Smith', 9, 1),
(2, 'Alice', 'Johnson', 10, 2),
(3, 'Bob', 'Williams', 11, 3),
(4, 'Emily', 'Jones', 12, 4),
(5, 'Michael', 'Brown', 9, 1),
(6, 'Sarah', 'Davis', 10, 2),
(7, 'David', 'Miller', 11, 3),
(8, 'Jessica', 'Wilson', 12, 4),
(9, 'William', 'Moore', 9, 1),
(10, 'Jennifer', 'Taylor', 10, 2),
(11, 'Richard', 'Anderson', 11, 3),
(12, 'Linda', 'Thomas', 12, 4);
INSERT INTO School (school_id, school_name, district_id) VALUES
(1, 'North High School', 1),
(2, 'South High School', 1),
(3, 'Central High School', 2),
(4, 'West High School', 2);
INSERT INTO District (district_id, district_name) VALUES
(1, 'Central District'),
(2, 'West District');
INSERT INTO TestScore (test_score_id, student_id, subject, score, test_date) VALUES
(1, 1, 'Math', 85, '2023-05-10'),
(2, 1, 'Science', 90, '2023-05-10'),
(3, 1, 'English', 80, '2023-05-10'),
(4, 2, 'Math', 95, '2023-05-10'),
(5, 2, 'Science', 88, '2023-05-10'),
(6, 2, 'English', 92, '2023-05-10'),
(7, 3, 'Math', 75, '2023-05-10'),
(8, 3, 'Science', 80, '2023-05-10'),
(9, 3, 'English', 85, '2023-05-10'),
(10, 4, 'Math', 90, '2023-05-10'),
(11, 4, 'Science', 92, '2023-05-10'),
(12, 4, 'English', 88, '2023-05-10');","SELECT s.subject, s.grade_level, AVG(s.score) AS average_score
FROM TestScore s
INNER JOIN Student st ON s.student_id = st.student_id
GROUP BY s.subject, s.grade_level;","1. Join the TestScore and Student tables on the student_id field to associate test scores with students and their grade levels.
2. Group the results by subject and grade level to calculate the average score for each subject in each grade.
3. Select the subject, grade level, and the average score for each subject-grade level combination."
903,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the breakdown of student performance in Math by grade level for the past three years?,"CREATE TABLE students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    grade_level INT NOT NULL,
    school_id INT NOT NULL,
    FOREIGN KEY (school_id) REFERENCES schools(school_id)
);

CREATE TABLE schools (
    school_id INT PRIMARY KEY,
    school_name VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL,
    state VARCHAR(255) NOT NULL
);

CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(255) NOT NULL,
    teacher_id INT NOT NULL,
    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id)
);

CREATE TABLE teachers (
    teacher_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL
);

CREATE TABLE grades (
    grade_id INT PRIMARY KEY,
    student_id INT NOT NULL,
    course_id INT NOT NULL,
    grade DECIMAL(5,2) NOT NULL,
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (course_id) REFERENCES courses(course_id)
);","SELECT g.grade_level, s.course_name, AVG(g.grade) AS AverageGrade
FROM grades g
JOIN students s ON g.student_id = s.student_id
WHERE s.course_name = 'Math'
AND g.grade_level IN (SELECT grade_level FROM grades WHERE YEAR(date) IN (YEAR(GETDATE())-2, YEAR(GETDATE())-1, YEAR(GETDATE())))
GROUP BY g.grade_level, s.course_name
ORDER BY g.grade_level, s.course_name;","This query joins the 'grades' and 'students' tables on the 'student_id' field. It then filters the results to include only grades for the 'Math' course and for students in grades 3, 4, and 5. The query then groups the results by grade level and course name and calculates the average grade for each group. Finally, the results are ordered by grade level and course name."
904,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average class size for each grade level?,"CREATE TABLE students (
    student_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    grade_level INT NOT NULL,
    school_id INT NOT NULL,
    FOREIGN KEY (school_id) REFERENCES schools(school_id)
);

CREATE TABLE schools (
    school_id INT PRIMARY KEY,
    school_name VARCHAR(255) NOT NULL,
    city VARCHAR(255) NOT NULL,
    state VARCHAR(255) NOT NULL
);

CREATE TABLE courses (
    course_id INT PRIMARY KEY,
    course_name VARCHAR(255) NOT NULL,
    teacher_id INT NOT NULL,
    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id)
);

CREATE TABLE teachers (
    teacher_id INT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL
);

CREATE TABLE sections (
    section_id INT PRIMARY KEY,
    course_id INT NOT NULL,
    teacher_id INT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    max_enrollment INT NOT NULL,
    FOREIGN KEY (course_id) REFERENCES courses(course_id),
    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id)
);

CREATE TABLE enrollments (
    enrollment_id INT PRIMARY KEY,
    student_id INT NOT NULL,
    section_id INT NOT NULL,
    enrollment_date DATE NOT NULL,
    FOREIGN KEY (student_id) REFERENCES students(student_id),
    FOREIGN KEY (section_id) REFERENCES sections(section_id)
);","SELECT s.grade_level, COUNT(e.student_id) AS ClassSize
FROM students s
JOIN enrollments e ON s.student_id = e.student_id
GROUP BY s.grade_level
ORDER BY s.grade_level;",This query joins the 'students' and 'enrollments' tables on the 'student_id' field. It then groups the results by grade level and counts the number of students enrolled in each grade level. The results are then ordered by grade level.
905,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How many diagnoses are there?,"CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, DiagnosisCode VARCHAR(10), DiagnosisDescription VARCHAR(255));
CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10));",SELECT COUNT(DiagnosisID) FROM Diagnoses;,"This SQL query counts the number of rows in the Diagnoses table, which gives the total number of diagnoses."
906,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",How many patients were diagnosed with diabetes in 2022?,"CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, DiagnosisCode VARCHAR(10), DiagnosisDescription VARCHAR(255));
CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10));
CREATE TABLE PatientDiagnoses (PatientID INT, DiagnosisID INT, DiagnosisDate DATE, PRIMARY KEY (PatientID, DiagnosisID), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DiagnosisID) REFERENCES Diagnoses(DiagnosisID));","SELECT COUNT(DISTINCT p.PatientID) FROM Patients p
JOIN PatientDiagnoses pd ON p.PatientID = pd.PatientID
JOIN Diagnoses d ON pd.DiagnosisID = d.DiagnosisID
WHERE d.DiagnosisDescription = 'Diabetes' AND pd.DiagnosisDate BETWEEN '2022-01-01' AND '2022-12-31';","This SQL query selects the distinct count of patients from the Patients table (p) who have a diagnosis of 'Diabetes' in the Diagnoses table (d) and the diagnosis date (pd.DiagnosisDate) falls between January 1, 2022, and December 31, 2022."
907,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What is the average length of stay for patients admitted with a diagnosis of pneumonia?,"CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, DiagnosisCode VARCHAR(10), DiagnosisDescription VARCHAR(255));
CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10));
CREATE TABLE Admissions (AdmissionID INT PRIMARY KEY, PatientID INT, AdmissionDate DATE, DischargeDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));
CREATE TABLE PatientDiagnoses (PatientID INT, DiagnosisID INT, DiagnosisDate DATE, PRIMARY KEY (PatientID, DiagnosisID), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DiagnosisID) REFERENCES Diagnoses(DiagnosisID));","SELECT AVG(DATEDIFF(day, a.AdmissionDate, a.DischargeDate)) AS AverageLengthOfStay
FROM Admissions a
JOIN PatientDiagnoses pd ON a.PatientID = pd.PatientID
JOIN Diagnoses d ON pd.DiagnosisID = d.DiagnosisID
WHERE d.DiagnosisDescription = 'Pneumonia';",This SQL query calculates the average length of stay for patients admitted with a diagnosis of pneumonia. It joins the Admissions table (a) with the PatientDiagnoses table (pd) and the Diagnoses table (d) to identify admissions with a diagnosis of pneumonia. It then calculates the difference in days between the admission date and discharge date for each admission and uses the AVG function to calculate the average length of stay.
908,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Which medications are most commonly prescribed for patients with a diagnosis of hypertension?,"CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, DiagnosisCode VARCHAR(10), DiagnosisDescription VARCHAR(255));
CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10));
CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(255), MedicationType VARCHAR(100));
CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, PrescriptionDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));
CREATE TABLE PatientDiagnoses (PatientID INT, DiagnosisID INT, DiagnosisDate DATE, PRIMARY KEY (PatientID, DiagnosisID), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DiagnosisID) REFERENCES Diagnoses(DiagnosisID));","SELECT m.MedicationName, COUNT(*) AS PrescriptionCount
FROM Medications m
JOIN Prescriptions p ON m.MedicationID = p.MedicationID
JOIN PatientDiagnoses pd ON p.PatientID = pd.PatientID
JOIN Diagnoses d ON pd.DiagnosisID = d.DiagnosisID
WHERE d.DiagnosisDescription = 'Hypertension'
GROUP BY m.MedicationName
ORDER BY PrescriptionCount DESC;","This SQL query selects the medication name and the count of prescriptions for each medication for patients with a diagnosis of hypertension. It joins the Medications table (m) with the Prescriptions table (p), PatientDiagnoses table (pd), and Diagnoses table (d) to identify prescriptions for patients with hypertension. It then groups the results by medication name and orders them by the count of prescriptions in descending order."
909,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",What are the top 5 side effects reported for the drug 'Acetaminophen'?,"CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(255), ActiveIngredient VARCHAR(255));
CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, SideEffectDescription VARCHAR(255));
CREATE TABLE DrugSideEffects (DrugID INT, SideEffectID INT, PRIMARY KEY (DrugID, SideEffectID), FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID), FOREIGN KEY (SideEffectID) REFERENCES SideEffects(SideEffectID));","SELECT se.SideEffectDescription, COUNT(*) AS SideEffectCount
FROM SideEffects se
JOIN DrugSideEffects dse ON se.SideEffectID = dse.SideEffectID
JOIN Drugs d ON dse.DrugID = d.DrugID
WHERE d.DrugName = 'Acetaminophen'
GROUP BY se.SideEffectDescription
ORDER BY SideEffectCount DESC
LIMIT 5;","This SQL query selects the top 5 side effects reported for the drug 'Acetaminophen'. It joins the SideEffects table (se) with the DrugSideEffects table (dse) and the Drugs table (d) to identify side effects associated with the drug. It then groups the results by side effect and orders them by the count of side effects in descending order, limiting the results to the top 5 side effects."
910,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average yield of corn in the United States by state for the past five years?,"CREATE TABLE corn_yields (state VARCHAR(2), year INT, yield DECIMAL(10,2));
INSERT INTO corn_yields VALUES ('IA', 2018, 175.5), ('IA', 2019, 180.2), ('IA', 2020, 178.9), ('IA', 2021, 182.1), ('IA', 2022, 179.3), ('IL', 2018, 168.7), ('IL', 2019, 172.4), ('IL', 2020, 171.2), ('IL', 2021, 174.8), ('IL', 2022, 173.5), ('NE', 2018, 155.8), ('NE', 2019, 160.5), ('NE', 2020, 158.3), ('NE', 2021, 162.7), ('NE', 2022, 161.4), ('IN', 2018, 170.1), ('IN', 2019, 174.8), ('IN', 2020, 173.6), ('IN', 2021, 177.2), ('IN', 2022, 175.9), ('OH', 2018, 165.4), ('OH', 2019, 169.1), ('OH', 2020, 167.9), ('OH', 2021, 171.5), ('OH', 2022, 170.2);

CREATE TABLE states (state VARCHAR(2), region VARCHAR(10));
INSERT INTO states VALUES ('IA', 'Midwest'), ('IL', 'Midwest'), ('NE', 'Midwest'), ('IN', 'Midwest'), ('OH', 'Midwest');","SELECT s.state, s.region, ROUND(AVG(cy.yield), 2) AS avg_yield
FROM corn_yields cy
JOIN states s ON cy.state = s.state
WHERE cy.year BETWEEN 2018 AND 2022
GROUP BY s.state, s.region
ORDER BY s.region, s.state;","1. Join the `corn_yields` and `states` tables on the `state` column.
2. Filter the data to include corn yields from the years 2018 to 2022.
3. Group the data by state and region.
4. Calculate the average corn yield for each state and region.
5. Round the average yield to two decimal places.
6. Order the results by region and then by state."
911,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many acres of land are used for corn production in each state in the Midwest region?,"CREATE TABLE corn_acreage (state VARCHAR(2), year INT, acres INT);
INSERT INTO corn_acreage VALUES ('IA', 2018, 13.5, 'IA', 2019, 13.8), ('IA', 2020, 13.6), ('IA', 2021, 13.9), ('IA', 2022, 13.7), ('IL', 2018, 11.2), ('IL', 2019, 11.5), ('IL', 2020, 11.3), ('IL', 2021, 11.6), ('IL', 2022, 11.4), ('NE', 2018, 8.7), ('NE', 2019, 9.0), ('NE', 2020, 8.8), ('NE', 2021, 9.1), ('NE', 2022, 8.9), ('IN', 2018, 10.5), ('IN', 2019, 10.8), ('IN', 2020, 10.6), ('IN', 2021, 10.9), ('IN', 2022, 10.7), ('OH', 2018, 9.2), ('OH', 2019, 9.5), ('OH', 2020, 9.3), ('OH', 2021, 9.6), ('OH', 2022, 9.4);

CREATE TABLE states (state VARCHAR(2), region VARCHAR(10));
INSERT INTO states VALUES ('IA', 'Midwest'), ('IL', 'Midwest'), ('NE', 'Midwest'), ('IN', 'Midwest'), ('OH', 'Midwest');","SELECT s.state, s.region, SUM(ca.acres) AS total_acres
FROM corn_acreage ca
JOIN states s ON ca.state = s.state
WHERE s.region = 'Midwest'
GROUP BY s.state, s.region
ORDER BY s.region, s.state;","1. Join the `corn_acreage` and `states` tables on the `state` column.
2. Filter the data to include states in the Midwest region.
3. Group the data by state and region.
4. Calculate the total corn acreage for each state and region.
5. Order the results by region and then by state."
912,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many farmers in the United States have reported crop losses due to drought in the past year?,"CREATE TABLE Farmers (FarmerID INT PRIMARY KEY, Name VARCHAR(255), State VARCHAR(255), County VARCHAR(255));
CREATE TABLE Crops (CropID INT PRIMARY KEY, Name VARCHAR(255), Yield INT, FarmerID INT REFERENCES Farmers(FarmerID));
CREATE TABLE WeatherEvents (EventID INT PRIMARY KEY, Type VARCHAR(255), Date DATE, County VARCHAR(255));
CREATE VIEW FarmerCropYields AS SELECT f.Name AS FarmerName, c.Name AS CropName, c.Yield AS CropYield FROM Farmers f JOIN Crops c ON f.FarmerID = c.FarmerID;","SELECT COUNT(DISTINCT f.FarmerID) FROM Farmers f
JOIN Crops c ON f.FarmerID = c.FarmerID
JOIN WeatherEvents w ON f.County = w.County
WHERE w.Type = 'Drought' AND w.Date BETWEEN DATE('now', '-1 year') AND DATE('now');","This SQL query first joins the Farmers, Crops, and WeatherEvents tables on the FarmerID and County columns, respectively. It then filters the results to include only records where the WeatherEvents.Type is 'Drought' and the WeatherEvents.Date is within the past year. Finally, it counts the number of distinct FarmerID values in the resulting dataset to determine the number of farmers who have reported crop losses due to drought."
913,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the average yields for each crop in California in the past five years?,"CREATE TABLE Farmers (FarmerID INT PRIMARY KEY, Name VARCHAR(255), State VARCHAR(255), County VARCHAR(255));
CREATE TABLE Crops (CropID INT PRIMARY KEY, Name VARCHAR(255), Yield INT, FarmerID INT REFERENCES Farmers(FarmerID));
CREATE TABLE WeatherEvents (EventID INT PRIMARY KEY, Type VARCHAR(255), Date DATE, County VARCHAR(255));
CREATE VIEW FarmerCropYields AS SELECT f.Name AS FarmerName, c.Name AS CropName, c.Yield AS CropYield FROM Farmers f JOIN Crops c ON f.FarmerID = c.FarmerID;","SELECT c.Name AS CropName, AVG(c.Yield) AS AverageYield
FROM Crops c
JOIN Farmers f ON c.FarmerID = f.FarmerID
WHERE f.State = 'California' AND c.Date BETWEEN DATE('now', '-5 years') AND DATE('now')
GROUP BY c.Name;","This SQL query first joins the Crops and Farmers tables on the FarmerID column. It then filters the results to include only records where the Farmers.State is 'California' and the Crops.Date is within the past five years. Finally, it groups the results by the CropName and calculates the average yield for each crop."
914,healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total amount of rainfall in each county in the United States in the past year?,"CREATE TABLE Farmers (FarmerID INT PRIMARY KEY, Name VARCHAR(255), State VARCHAR(255), County VARCHAR(255));
CREATE TABLE Crops (CropID INT PRIMARY KEY, Name VARCHAR(255), Yield INT, FarmerID INT REFERENCES Farmers(FarmerID));
CREATE TABLE WeatherEvents (EventID INT PRIMARY KEY, Type VARCHAR(255), Date DATE, County VARCHAR(255));
CREATE VIEW FarmerCropYields AS SELECT f.Name AS FarmerName, c.Name AS CropName, c.Yield AS CropYield FROM Farmers f JOIN Crops c ON f.FarmerID = c.FarmerID;","SELECT w.County, SUM(w.Amount) AS TotalRainfall
FROM WeatherEvents w
WHERE w.Type = 'Rainfall' AND w.Date BETWEEN DATE('now', '-1 year') AND DATE('now')
GROUP BY w.County;",This SQL query first filters the WeatherEvents table to include only records where the WeatherEvents.Type is 'Rainfall' and the WeatherEvents.Date is within the past year. It then groups the results by the WeatherEvents.County and calculates the sum of the WeatherEvents.Amount for each county.
915,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How many customers have made more than three transactions in the last month?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255), phone_number VARCHAR(20));
CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), amount DECIMAL(10,2), date DATE);","SELECT COUNT(*) FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.date BETWEEN DATE('now', '-1 month') AND DATE('now') GROUP BY c.customer_id HAVING COUNT(*) > 3;","This SQL query joins the 'customers' and 'transactions' tables on the 'customer_id' column. It then filters the transactions to only include those that occurred in the last month. The query then groups the transactions by customer ID and counts the number of transactions for each customer. Finally, it filters the results to only include customers who have made more than three transactions in the last month."
916,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average transaction amount for customers in California?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255), phone_number VARCHAR(20), state VARCHAR(2));
CREATE TABLE transactions (transaction_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), amount DECIMAL(10,2), date DATE);",SELECT AVG(t.amount) FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.state = 'CA';,"This SQL query joins the 'customers' and 'transactions' tables on the 'customer_id' column. It then filters the customers to only include those who live in California. Finally, it calculates the average transaction amount for those customers."
917,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the total amount of money invested in each asset class?,"CREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), asset_class VARCHAR(255), amount DECIMAL(10,2));","SELECT asset_class, SUM(amount) AS total_amount FROM investments GROUP BY asset_class;",This SQL query groups the investments by asset class and then calculates the sum of the amount invested in each asset class.
918,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the risk score for each customer's portfolio?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255), phone_number VARCHAR(20), risk_score INT);
CREATE TABLE investments (investment_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), asset_class VARCHAR(255), amount DECIMAL(10,2));","SELECT c.customer_id, c.name, c.risk_score, SUM(i.amount) AS total_invested, (SELECT SUM(amount) FROM investments WHERE customer_id = c.customer_id AND asset_class = 'Equities') * 100.0 / SUM(i.amount) AS equity_percentage FROM customers c JOIN investments i ON c.customer_id = i.customer_id GROUP BY c.customer_id, c.name, c.risk_score;","This SQL query joins the 'customers' and 'investments' tables on the 'customer_id' column. It then calculates the total amount invested for each customer, as well as the percentage of each customer's portfolio that is invested in equities. Finally, it joins the results with the 'customers' table to get the customer's name and risk score."
919,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the performance of the stock market over the past year?,"CREATE TABLE stock_prices (date DATE PRIMARY KEY, index_name VARCHAR(255), price DECIMAL(10,2));","SELECT index_name, (SELECT price FROM stock_prices WHERE date = DATE('now', '-1 year') AND index_name = s.index_name) AS price_one_year_ago, price AS current_price, (price - (SELECT price FROM stock_prices WHERE date = DATE('now', '-1 year') AND index_name = s.index_name)) * 100.0 / (SELECT price FROM stock_prices WHERE date = DATE('now', '-1 year') AND index_name = s.index_name) AS percentage_change FROM stock_prices s WHERE date = DATE('now');",This SQL query calculates the performance of the stock market over the past year by comparing the current price of each index to its price one year ago. It then calculates the percentage change for each index.
920,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","Give me a daily transaction summary by the customer's state/region, excluding all orders that are cancelled within 5 days","CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255), state VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE, order_status VARCHAR(255));
INSERT INTO customers (customer_id, customer_name, state) VALUES
(1, 'John Doe', 'California'),
(2, 'Jane Smith', 'Texas'),
(3, 'Alice Johnson', 'New York');
INSERT INTO orders (order_id, customer_id, order_date, order_status) VALUES
(1, 1, '2023-01-01', 'Completed'),
(2, 2, '2023-01-02', 'Cancelled'),
(3, 3, '2023-01-03', 'Completed'),
(4, 1, '2023-01-04', 'Cancelled'),
(5, 2, '2023-01-05', 'Completed'),
(6, 3, '2023-01-06', 'Completed');","SELECT c.state, COUNT(*) AS orders
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-5 days') AND o.order_status != 'Cancelled'
GROUP BY c.state
ORDER BY c.state;","This query first filters the orders table to exclude orders that are cancelled within 5 days of the current date. Then, it joins the customers and orders tables on the customer_id column. Finally, it groups the results by the customer's state and counts the number of orders for each state."
921,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","Provide a list of all products that have been ordered more than 10 times in the past month, along with the total quantity ordered and the average price per unit.","CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255), price DECIMAL(10,2));
CREATE TABLE order_items (order_id INT, product_id INT, quantity INT, price DECIMAL(10,2), PRIMARY KEY (order_id, product_id));
INSERT INTO products (product_id, product_name, price) VALUES
(1, 'Laptop', 1000.00),
(2, 'Mouse', 25.00),
(3, 'Keyboard', 75.00),
(4, 'Monitor', 300.00),
(5, 'Printer', 150.00);
INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 2, 1000.00),
(2, 2, 1, 25.00),
(3, 3, 3, 75.00),
(4, 1, 1, 1000.00),
(5, 2, 2, 25.00),
(6, 3, 1, 75.00),
(7, 4, 1, 300.00),
(8, 5, 2, 150.00),
(9, 1, 3, 1000.00),
(10, 2, 4, 25.00),
(11, 3, 2, 75.00),
(12, 4, 2, 300.00),
(13, 5, 1, 150.00),
(14, 1, 1, 1000.00),
(15, 2, 3, 25.00),
(16, 3, 4, 75.00),
(17, 4, 3, 300.00),
(18, 5, 2, 150.00);
","SELECT p.product_name, SUM(oi.quantity) AS total_quantity, AVG(oi.price) AS average_price
FROM products p
JOIN order_items oi ON p.product_id = oi.product_id
WHERE oi.order_id IN (SELECT o.order_id FROM orders o WHERE o.order_date >= DATE('now', '-1 month'))
GROUP BY p.product_name
HAVING SUM(oi.quantity) > 10
ORDER BY total_quantity DESC;","This query first selects all orders placed in the past month. Then, it joins the products and order_items tables on the product_id column and groups the results by product name. Finally, it filters the results to include only products that have been ordered more than 10 times in the past month and calculates the total quantity ordered and the average price per unit for each product."
922,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records",Which customers have placed orders for both laptops and printers in the past year?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(255));
CREATE TABLE orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), order_date DATE);
CREATE TABLE order_items (order_id INT, product_id INT, quantity INT, PRIMARY KEY (order_id, product_id));
INSERT INTO customers (customer_id, customer_name) VALUES
(1, 'John Doe'),
(2, 'Jane Smith'),
(3, 'Alice Johnson');
INSERT INTO products (product_id, product_name) VALUES
(1, 'Laptop'),
(2, 'Printer');
INSERT INTO orders (order_id, customer_id, order_date) VALUES
(1, 1, '2022-12-01'),
(2, 2, '2022-12-05'),
(3, 1, '2023-01-10'),
(4, 3, '2023-01-15'),
(5, 2, '2023-02-01'),
(6, 1, '2023-02-05'),
(7, 3, '2023-02-10');
INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 1),
(2, 2, 1),
(3, 1, 2),
(4, 2, 1),
(5, 1, 1),
(6, 2, 2),
(7, 1, 1);
","SELECT c.customer_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
WHERE oi.product_id IN (1, 2)
GROUP BY c.customer_name
HAVING COUNT(DISTINCT oi.product_id) = 2
ORDER BY c.customer_name;","This query first joins the customers, orders, and order_items tables on the customer_id, order_id, and product_id columns, respectively. Then, it filters the results to include only orders that contain either a laptop or a printer. Finally, it groups the results by customer name and counts the number of distinct product IDs for each customer. The query then filters the results to include only customers who have placed orders for both laptops and printers."
923,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","What were the top 5 products sold in Q2 2023, excluding products in the 'Electronics' category?","CREATE TABLE product_sales (product_id INT, category VARCHAR(255), sale_date DATE, quantity INT);
INSERT INTO product_sales (product_id, category, sale_date, quantity) VALUES (1, 'Electronics', '2023-04-01', 10), (2, 'Clothing', '2023-04-05', 15), (3, 'Electronics', '2023-04-10', 8), (4, 'Furniture', '2023-04-15', 20), (5, 'Electronics', '2023-04-20', 12), (6, 'Clothing', '2023-04-25', 18), (7, 'Furniture', '2023-04-30', 25), (8, 'Electronics', '2023-05-01', 14), (9, 'Clothing', '2023-05-05', 22), (10, 'Furniture', '2023-05-10', 30), (11, 'Electronics', '2023-05-15', 16), (12, 'Clothing', '2023-05-20', 26), (13, 'Furniture', '2023-05-25', 35), (14, 'Electronics', '2023-05-30', 18), (15, 'Clothing', '2023-06-01', 30), (16, 'Furniture', '2023-06-05', 40), (17, 'Electronics', '2023-06-10', 20), (18, 'Clothing', '2023-06-15', 35), (19, 'Furniture', '2023-06-20', 45), (20, 'Electronics', '2023-06-25', 22);","SELECT product_id, product_name FROM products WHERE category != 'Electronics' EXCEPT SELECT product_id, product_name FROM products WHERE category = 'Electronics' AND sale_date BETWEEN '2023-04-01' AND '2023-06-30' ORDER BY quantity DESC LIMIT 5;","This query first selects all product IDs and names from the 'products' table where the category is not 'Electronics'. Then, it excludes any products with the 'Electronics' category that were sold between April 1, 2023, and June 30, 2023. Finally, the query orders the remaining products by their sales quantity in descending order and limits the results to the top 5 products."
924,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records",What customers have purchased products from both the 'Clothing' and 'Electronics' categories in the past year?,"CREATE TABLE customer_purchases (customer_id INT, product_id INT, purchase_date DATE);
INSERT INTO customer_purchases (customer_id, product_id, purchase_date) VALUES (1, 1, '2022-07-15'), (2, 2, '2022-08-01'), (3, 3, '2022-08-15'), (4, 4, '2022-09-01'), (5, 5, '2022-09-15'), (6, 6, '2022-10-01'), (7, 7, '2022-10-15'), (8, 8, '2022-11-01'), (9, 9, '2022-11-15'), (10, 10, '2022-12-01'), (11, 11, '2022-12-15'), (12, 12, '2023-01-01'), (13, 13, '2023-01-15'), (14, 14, '2023-02-01'), (15, 15, '2023-02-15'), (16, 16, '2023-03-01'), (17, 17, '2023-03-15'), (18, 18, '2023-04-01'), (19, 19, '2023-04-15'), (20, 20, '2023-05-01');
CREATE TABLE products (product_id INT, category VARCHAR(255));
INSERT INTO products (product_id, category) VALUES (1, 'Electronics'), (2, 'Clothing'), (3, 'Electronics'), (4, 'Furniture'), (5, 'Electronics'), (6, 'Clothing'), (7, 'Furniture'), (8, 'Electronics'), (9, 'Clothing'), (10, 'Furniture'), (11, 'Electronics'), (12, 'Clothing'), (13, 'Furniture'), (14, 'Electronics'), (15, 'Clothing'), (16, 'Furniture'), (17, 'Electronics'), (18, 'Clothing'), (19, 'Furniture'), (20, 'Electronics');","SELECT DISTINCT customer_id FROM customer_purchases AS cp JOIN products AS p ON cp.product_id = p.product_id WHERE p.category = 'Clothing' INTERSECT SELECT DISTINCT customer_id FROM customer_purchases AS cp JOIN products AS p ON cp.product_id = p.product_id WHERE p.category = 'Electronics' AND purchase_date >= DATE('now', '-1 year');","This query uses two INTERSECT operations to find customers who have purchased products from both the 'Clothing' and 'Electronics' categories in the past year. The first operation selects all distinct customer IDs who have purchased products from the 'Clothing' category. The second operation selects all distinct customer IDs who have purchased products from the 'Electronics' category and whose purchase date was within the past year. The INTERSECT operation then returns only the customer IDs that appear in both results, meaning those customers who have made purchases from both categories within the specified timeframe."
925,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Show the total quantity of parts received for each supplier in January, grouped by region, sorted by decreasing quantity, and with a subtotal for each region.","CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), region VARCHAR(255));

CREATE TABLE parts (part_id INT PRIMARY KEY, part_name VARCHAR(255), supplier_id INT REFERENCES suppliers(supplier_id));

CREATE TABLE inventory (inventory_id INT PRIMARY KEY, part_id INT REFERENCES parts(part_id), quantity INT, received_date DATE);","WITH MonthlyReceivedParts AS (
  SELECT
    s.region,
    p.part_name,
    SUM(i.quantity) AS total_quantity
  FROM suppliers s
  JOIN parts p ON s.supplier_id = p.supplier_id
  JOIN inventory i ON p.part_id = i.part_id
  WHERE DATE_PART('month', i.received_date) = 1
  GROUP BY s.region, p.part_name
),
RegionalTotals AS (
  SELECT
    region,
    SUM(total_quantity) AS regional_total
  FROM MonthlyReceivedParts
  GROUP BY region
)
SELECT
  mrp.region,
  mrp.part_name,
  mrp.total_quantity,
  rt.regional_total
FROM MonthlyReceivedParts mrp
JOIN RegionalTotals rt ON mrp.region = rt.region
ORDER BY rt.regional_total DESC, mrp.total_quantity DESC;","1. This query starts by creating a temporary table called `MonthlyReceivedParts`.

2. This temporary table joins the `suppliers`, `parts`, and `inventory` tables to calculate the total quantity of each part received in January, grouped by supplier region and part name.

3. It then creates another temporary table called `RegionalTotals` that calculates the total quantity received for each region across all parts.

4. Finally, the query joins `MonthlyReceivedParts` and `RegionalTotals` on the `region` column and selects the region, part name, total quantity received for that part, and the regional total for each row. The results are sorted first by decreasing regional total and then by decreasing total quantity for each part within a region."
926,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Show me the average number of units produced per day for each product in the last month, grouped by product category, and highlight any categories with average daily production exceeding 1000 units.","CREATE TABLE Production (product_id INT PRIMARY KEY, product_name VARCHAR(255), category VARCHAR(255), production_date DATE, units_produced INT);
INSERT INTO Production (product_id, product_name, category, production_date, units_produced) VALUES
(1, 'Widget A', 'Electronics', '2023-10-26', 1200),
(2, 'Widget B', 'Electronics', '2023-10-26', 850),
(3, 'Gear C', 'Machinery', '2023-10-26', 1500),
(4, 'Cog D', 'Machinery', '2023-10-26', 750),
(5, 'Valve E', 'Plumbing', '2023-10-26', 900),
(1, 'Widget A', 'Electronics', '2023-10-27', 1100),
(2, 'Widget B', 'Electronics', '2023-10-27', 900),
(3, 'Gear C', 'Machinery', '2023-10-27', 1400),
(4, 'Cog D', 'Machinery', '2023-10-27', 800),
(5, 'Valve E', 'Plumbing', '2023-10-27', 1000);

CREATE TABLE Product_Categories (category_id INT PRIMARY KEY, category_name VARCHAR(255));
INSERT INTO Product_Categories (category_id, category_name) VALUES
(1, 'Electronics'),
(2, 'Machinery'),
(3, 'Plumbing');","WITH DailyProduction AS (
    SELECT
        p.category,
        p.production_date,
        SUM(p.units_produced) AS daily_units_produced
    FROM
        Production p
    WHERE
        p.production_date >= DATE('now', '-1 month')
    GROUP BY
        p.category,
        p.production_date
),
AverageDailyProduction AS (
    SELECT
        dp.category,
        AVG(dp.daily_units_produced) AS average_daily_units
    FROM
        DailyProduction dp
    GROUP BY
        dp.category
)
SELECT
    adp.category,
    adp.average_daily_units,
    CASE
        WHEN adp.average_daily_units > 1000 THEN 'High Production'
        ELSE 'Normal Production'
    END AS production_level
FROM
    AverageDailyProduction adp
ORDER BY
    adp.average_daily_units DESC;","1. **Create a CTE (Common Table Expression) called `DailyProduction`:**
   - This CTE calculates the sum of units produced for each product category and production date within the last month.
2. **Create another CTE called `AverageDailyProduction`:**
   - This CTE calculates the average daily units produced for each product category based on the `DailyProduction` CTE.
3. **Select the category, average daily units, and a production level based on the average:**
   - The `CASE` statement classifies categories with an average daily production exceeding 1000 units as 'High Production' and others as 'Normal Production'.
4. **Order the result by average daily units in descending order:**
   - This presents the categories with the highest average production first."
927,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Display the five most recent purchases from suppliers and highlight their payment status. Include the purchase order number, product description, supplier name, purchase date, and payment status.","CREATE TABLE purchases (purchase_order_number INT PRIMARY KEY, product_description VARCHAR(255), supplier_name VARCHAR(255), purchase_date DATE, payment_status VARCHAR(255));
INSERT INTO purchases VALUES (101, 'Screws', 'Acme Supply', '2023-03-08', 'Paid'), (102, 'Gears', 'Big Gears Inc.', '2023-03-15', 'Paid'), (103, 'Bolts', 'Reliable Bolts', '2023-03-22', 'Paid'), (104, 'Nuts', 'Nutty Nuts Co.', '2023-03-29', 'Paid'), (105, 'Washers', 'Washer World', '2023-04-05', 'Paid'), (106, 'Springs', 'Springy Springs Ltd.', '2023-04-12', 'Paid'), (107, 'Cables', 'Cable Connections Inc.', '2023-04-19', 'Paid'), (108, 'Hinges', 'Hinge Heaven', '2023-04-26', 'Paid'), (109, 'Knobs', 'Knob King', '2023-05-03', 'Paid'), (110, 'Levers', 'Leverage Inc.', '2023-05-10', 'Paid');
CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(255), payment_terms VARCHAR(255));
INSERT INTO suppliers VALUES (1, 'Acme Supply', 'Net 30'), (2, 'Big Gears Inc.', 'Net 45'), (3, 'Reliable Bolts', 'Net 60'), (4, 'Nutty Nuts Co.', 'Net 15'), (5, 'Washer World', 'Net 30'), (6, 'Springy Springs Ltd.', 'Net 45'), (7, 'Cable Connections Inc.', 'Net 60'), (8, 'Hinge Heaven', 'Net 15'), (9, 'Knob King', 'Net 30'), (10, 'Leverage Inc.', 'Net 45');","SELECT p.purchase_order_number, p.product_description, s.supplier_name, p.purchase_date, p.payment_status FROM purchases p JOIN suppliers s ON p.supplier_name = s.supplier_name ORDER BY p.purchase_date DESC LIMIT 5;","This query selects the purchase order number, product description, supplier name, purchase date, and payment status from the 'purchases' table. It joins the 'purchases' table with the 'suppliers' table on the 'supplier_name' field to retrieve the supplier information. The query then orders the results by the purchase date in descending order and limits the output to the five most recent purchases."
928,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","SHOW ME A LIST OF ALL SUPPLIERS IN THE CHICAGO REGION WHO HAVE SUPPLIED PARTS FOR ORDERS PLACED IN THE LAST QUARTER OF 2022. INCLUDE THE ORDER DATE, SUPPLIER NAME, PART NAME, AND QUANTITY SUPPLIED.","CREATE TABLE orders ( order_id INT PRIMARY KEY, customer_id INT, order_date DATE, region VARCHAR(50) );
CREATE TABLE order_items ( order_id INT, part_id INT, quantity INT, PRIMARY KEY (order_id, part_id), FOREIGN KEY (order_id) REFERENCES orders(order_id) );
CREATE TABLE parts ( part_id INT PRIMARY KEY, part_name VARCHAR(50) );
CREATE TABLE suppliers ( supplier_id INT PRIMARY KEY, supplier_name VARCHAR(50), region VARCHAR(50) );
CREATE TABLE supplier_parts ( supplier_id INT, part_id INT, PRIMARY KEY (supplier_id, part_id), FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id), FOREIGN KEY (part_id) REFERENCES parts(part_id) );
INSERT INTO orders (order_id, customer_id, order_date, region) VALUES
(1, 101, '2022-10-01', 'Chicago'),
(2, 102, '2022-10-15', 'New York'),
(3, 103, '2022-10-22', 'Los Angeles'),
(4, 104, '2022-11-05', 'Chicago'),
(5, 105, '2022-11-12', 'San Francisco'),
(6, 106, '2022-11-19', 'Chicago'),
(7, 107, '2022-12-03', 'Dallas'),
(8, 108, '2022-12-10', 'Chicago'),
(9, 109, '2022-12-17', 'Miami');
INSERT INTO order_items (order_id, part_id, quantity) VALUES
(1, 201, 10),
(1, 202, 5),
(2, 203, 15),
(2, 204, 8),
(3, 205, 12),
(3, 206, 7),
(4, 207, 18),
(4, 208, 9),
(5, 209, 11),
(5, 210, 6),
(6, 211, 14),
(6, 212, 7),
(7, 213, 16),
(7, 214, 8),
(8, 215, 13),
(8, 216, 7),
(9, 217, 17),
(9, 218, 9);","SELECT o.order_date, s.supplier_name, p.part_name, oi.quantity
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
JOIN parts p ON oi.part_id = p.part_id
JOIN supplier_parts sp ON p.part_id = sp.part_id
JOIN suppliers s ON sp.supplier_id = s.supplier_id
WHERE o.region = 'Chicago' AND o.order_date BETWEEN '2022-10-01' AND '2022-12-31';","This query joins five tables: orders, order_items, parts, supplier_parts, and suppliers.
It selects the order date, supplier name, part name, and quantity for all orders placed in the Chicago region during the last quarter of 2022."
929,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","How many orders have been placed for a specific product in a given month and year, and show the order status at the end of the month?","CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    ProductID INT,
    OrderDate DATE,
    OrderStatus VARCHAR(20),
    Quantity INT
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50)
);

CREATE VIEW MonthlyOrders AS
SELECT
    YEAR(OrderDate) AS Year,
    MONTH(OrderDate) AS Month,
    ProductID,
    COUNT(*) AS TotalOrders
FROM
    Orders
GROUP BY
    YEAR(OrderDate),
    MONTH(OrderDate),
    ProductID;

CREATE TABLE OrderStatuses (
    OrderID INT,
    OrderStatus VARCHAR(20),
    StatusDate DATE
);

INSERT INTO OrderStatuses (OrderID, OrderStatus, StatusDate)
VALUES
(1, 'Placed', '2023-01-10'),
(1, 'Shipped', '2023-01-15'),
(2, 'Placed', '2023-02-01'),
(2, 'Cancelled', '2023-02-10');","SELECT
    mo.Year,
    mo.Month,
    p.ProductName,
    mo.TotalOrders,
    os.OrderStatus
FROM
    MonthlyOrders mo
JOIN
    Products p ON mo.ProductID = p.ProductID
LEFT JOIN
    OrderStatuses os ON mo.OrderID = os.OrderID
WHERE
    mo.Year = 2023 AND mo.Month = 2 AND p.ProductName = 'Widget'
ORDER BY
    mo.Year, mo.Month, p.ProductName, os.StatusDate DESC;","The SQL query provides the total number of orders for a specific product in a given month and year. It also shows the order status at the end of the month. This query uses the following steps:

1. **Join the MonthlyOrders view with the Products table** to retrieve the product name.
2. **Left join with the OrderStatuses table** to get the latest order status for each order.
3. **Filter the results** for the specified year, month, and product name.
4. **Order the results** by year, month, product name, and order status date in descending order."
930,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",How many different suppliers have provided raw materials for the production of the 'Acme Bolt' in the past year?,"CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255) NOT NULL, Country VARCHAR(255));
CREATE TABLE RawMaterials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(255) NOT NULL, SupplierID INT REFERENCES Suppliers(SupplierID));
CREATE TABLE ProductionOrders (OrderID INT PRIMARY KEY, ProductID INT REFERENCES Products(ProductID), OrderDate DATE NOT NULL, Quantity INT NOT NULL);
CREATE TABLE ProductComponents (ProductID INT REFERENCES Products(ProductID), MaterialID INT REFERENCES RawMaterials(MaterialID), Quantity INT NOT NULL);
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, Description TEXT);","SELECT COUNT(DISTINCT s.SupplierName) FROM Suppliers s JOIN RawMaterials rm ON s.SupplierID = rm.SupplierID JOIN ProductComponents pc ON rm.MaterialID = pc.MaterialID JOIN Products p ON pc.ProductID = p.ProductID WHERE p.ProductName = 'Acme Bolt' AND po.OrderDate BETWEEN DATE('now', '-1 year') AND DATE('now');","The query first joins the 'Suppliers' table to the 'RawMaterials' table on the 'SupplierID' field, then joins the 'RawMaterials' table to the 'ProductComponents' table on the 'MaterialID' field. Finally, it joins the 'ProductComponents' table to the 'Products' table on the 'ProductID' field. This ensures that we only consider suppliers who have provided raw materials for the production of the 'Acme Bolt'.

The query then filters the data to only include production orders placed in the past year by using the 'OrderDate' field in the 'ProductionOrders' table. Finally, the query uses the COUNT() function to count the number of distinct supplier names, which gives us the number of different suppliers who have provided raw materials for the production of the 'Acme Bolt' in the past year."
931,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",What is the average number of units produced per day for each product in the 'Fasteners' category?,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, Description TEXT, Category VARCHAR(255));
CREATE TABLE ProductionOrders (OrderID INT PRIMARY KEY, ProductID INT REFERENCES Products(ProductID), OrderDate DATE NOT NULL, Quantity INT NOT NULL);","SELECT p.ProductName, AVG(po.Quantity) AS AverageUnitsPerDay FROM Products p JOIN ProductionOrders po ON p.ProductID = po.ProductID WHERE p.Category = 'Fasteners' GROUP BY p.ProductName;","The query first joins the 'Products' table to the 'ProductionOrders' table on the 'ProductID' field. This ensures that we only consider production orders for products in the 'Fasteners' category.

The query then uses the AVG() function to calculate the average quantity produced per day for each product. Finally, the query groups the results by product name, so that we can see the average number of units produced per day for each product in the 'Fasteners' category."
932,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Which raw materials have been used in the production of the 'Acme Widget' in the last 6 months?,"CREATE TABLE RawMaterials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(255) NOT NULL, SupplierID INT REFERENCES Suppliers(SupplierID));
CREATE TABLE ProductComponents (ProductID INT REFERENCES Products(ProductID), MaterialID INT REFERENCES RawMaterials(MaterialID), Quantity INT NOT NULL);
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, Description TEXT);","SELECT rm.MaterialName FROM RawMaterials rm JOIN ProductComponents pc ON rm.MaterialID = pc.MaterialID JOIN Products p ON pc.ProductID = p.ProductID WHERE p.ProductName = 'Acme Widget' AND po.OrderDate BETWEEN DATE('now', '-6 months') AND DATE('now');","The query first joins the 'RawMaterials' table to the 'ProductComponents' table on the 'MaterialID' field. This ensures that we only consider raw materials that have been used in the production of products.

The query then joins the 'ProductComponents' table to the 'Products' table on the 'ProductID' field. This ensures that we only consider raw materials that have been used in the production of the 'Acme Widget'.

Finally, the query filters the data to only include raw materials that have been used in the production of the 'Acme Widget' in the last 6 months by using the 'OrderDate' field in the 'ProductionOrders' table."
933,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",What are the top 5 suppliers in terms of the total quantity of raw materials supplied in the past year?,"CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255) NOT NULL, Country VARCHAR(255));
CREATE TABLE RawMaterials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(255) NOT NULL, SupplierID INT REFERENCES Suppliers(SupplierID));
CREATE TABLE ProductionOrders (OrderID INT PRIMARY KEY, ProductID INT REFERENCES Products(ProductID), OrderDate DATE NOT NULL, Quantity INT NOT NULL);
CREATE TABLE ProductComponents (ProductID INT REFERENCES Products(ProductID), MaterialID INT REFERENCES RawMaterials(MaterialID), Quantity INT NOT NULL);
CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(255) NOT NULL, Description TEXT);","SELECT s.SupplierName, SUM(pc.Quantity) AS TotalQuantitySupplied FROM Suppliers s JOIN RawMaterials rm ON s.SupplierID = rm.SupplierID JOIN ProductComponents pc ON rm.MaterialID = pc.MaterialID GROUP BY s.SupplierName ORDER BY TotalQuantitySupplied DESC LIMIT 5;","The query first joins the 'Suppliers' table to the 'RawMaterials' table on the 'SupplierID' field. This ensures that we only consider raw materials that have been supplied by suppliers.

The query then joins the 'RawMaterials' table to the 'ProductComponents' table on the 'MaterialID' field. This ensures that we only consider raw materials that have been used in the production of products.

The query then groups the data by supplier name and uses the SUM() function to calculate the total quantity of raw materials supplied by each supplier. Finally, the query orders the results by the total quantity supplied, in descending order, and limits the results to the top 5 suppliers."
934,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",What is the average lead time for raw material deliveries from suppliers in the United States?,"CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(255) NOT NULL, Country VARCHAR(255));
CREATE TABLE RawMaterials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(255) NOT NULL, SupplierID INT REFERENCES Suppliers(SupplierID));
CREATE TABLE PurchaseOrders (OrderID INT PRIMARY KEY, SupplierID INT REFERENCES Suppliers(SupplierID), OrderDate DATE NOT NULL, DeliveryDate DATE NOT NULL);
CREATE TABLE RawMaterialDeliveries (DeliveryID INT PRIMARY KEY, OrderID INT REFERENCES PurchaseOrders(OrderID), MaterialID INT REFERENCES RawMaterials(MaterialID), Quantity INT NOT NULL, DeliveryDate DATE NOT NULL);","SELECT AVG(DATEDIFF(rd.DeliveryDate, po.OrderDate)) AS AverageLeadTime FROM PurchaseOrders po JOIN RawMaterialDeliveries rd ON po.OrderID = rd.OrderID JOIN RawMaterials rm ON rd.MaterialID = rm.MaterialID JOIN Suppliers s ON po.SupplierID = s.SupplierID WHERE s.Country = 'United States';","The query first joins the 'PurchaseOrders' table to the 'RawMaterialDeliveries' table on the 'OrderID' field. This ensures that we only consider deliveries of raw materials that were ordered through purchase orders.

The query then joins the 'RawMaterialDeliveries' table to the 'RawMaterials' table on the 'MaterialID' field. This ensures that we only consider deliveries of raw materials.

The query then joins the 'PurchaseOrders' table to the 'Suppliers' table on the 'SupplierID' field. This ensures that we only consider deliveries from suppliers in the United States.

Finally, the query uses the DATEDIFF() function to calculate the lead time for each delivery, which is the difference between the delivery date and the order date. The query then uses the AVG() function to calculate the average lead time for all deliveries from suppliers in the United States."
935,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Show me all the customers in the database and their total spend in the last year, sorted by spend in descending order.","CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO Customers (customer_id, customer_name, country) VALUES (1, 'John Smith', 'USA'), (2, 'Alice Johnson', 'Canada'), (3, 'Bob Williams', 'UK'), (4, 'Emily Brown', 'France'), (5, 'David Davis', 'Germany');
INSERT INTO Orders (order_id, customer_id, order_date, order_amount) VALUES (1, 1, '2023-01-01', 100.00), (2, 2, '2023-02-15', 50.00), (3, 3, '2023-03-20', 75.00), (4, 1, '2023-04-10', 200.00), (5, 5, '2023-05-05', 150.00), (6, 2, '2023-06-12', 125.00), (7, 3, '2023-07-07', 100.00), (8, 4, '2023-08-19', 300.00), (9, 5, '2023-09-02', 250.00), (10, 1, '2023-10-15', 400.00), (11, 2, '2023-11-10', 200.00), (12, 3, '2023-12-05', 175.00), (13, 4, '2023-12-20', 350.00);","SELECT c.customer_name, SUM(o.order_amount) AS total_spend
FROM Customers c
JOIN Orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-1 year')
GROUP BY c.customer_name
ORDER BY total_spend DESC;","This query joins the Customers and Orders tables on the customer_id field. It then filters the results to only include orders placed in the last year. It then groups the results by customer_name and calculates the sum of the order_amount for each customer. Finally, it orders the results by total_spend in descending order."
936,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Add a new customer to the database named 'Michael Jones' from 'Australia'.,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO Customers (customer_id, customer_name, country) VALUES (1, 'John Smith', 'USA'), (2, 'Alice Johnson', 'Canada'), (3, 'Bob Williams', 'UK'), (4, 'Emily Brown', 'France'), (5, 'David Davis', 'Germany');
INSERT INTO Orders (order_id, customer_id, order_date, order_amount) VALUES (1, 1, '2023-01-01', 100.00), (2, 2, '2023-02-15', 50.00), (3, 3, '2023-03-20', 75.00), (4, 1, '2023-04-10', 200.00), (5, 5, '2023-05-05', 150.00), (6, 2, '2023-06-12', 125.00), (7, 3, '2023-07-07', 100.00), (8, 4, '2023-08-19', 300.00), (9, 5, '2023-09-02', 250.00), (10, 1, '2023-10-15', 400.00), (11, 2, '2023-11-10', 200.00), (12, 3, '2023-12-05', 175.00), (13, 4, '2023-12-20', 350.00);","INSERT INTO Customers (customer_name, country) VALUES ('Michael Jones', 'Australia');",This query inserts a new row into the Customers table with the name 'Michael Jones' and the country 'Australia'.
937,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the customer named 'Alice Johnson' to have the country 'USA'.,"CREATE TABLE Customers (customer_id INT PRIMARY KEY, customer_name VARCHAR(255) NOT NULL, country VARCHAR(255));
CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, order_amount DECIMAL(10,2));
INSERT INTO Customers (customer_id, customer_name, country) VALUES (1, 'John Smith', 'USA'), (2, 'Alice Johnson', 'Canada'), (3, 'Bob Williams', 'UK'), (4, 'Emily Brown', 'France'), (5, 'David Davis', 'Germany');
INSERT INTO Orders (order_id, customer_id, order_date, order_amount) VALUES (1, 1, '2023-01-01', 100.00), (2, 2, '2023-02-15', 50.00), (3, 3, '2023-03-20', 75.00), (4, 1, '2023-04-10', 200.00), (5, 5, '2023-05-05', 150.00), (6, 2, '2023-06-12', 125.00), (7, 3, '2023-07-07', 100.00), (8, 4, '2023-08-19', 300.00), (9, 5, '2023-09-02', 250.00), (10, 1, '2023-10-15', 400.00), (11, 2, '2023-11-10', 200.00), (12, 3, '2023-12-05', 175.00), (13, 4, '2023-12-20', 350.00);",UPDATE Customers SET country = 'USA' WHERE customer_name = 'Alice Johnson';,This query updates the country of the customer named 'Alice Johnson' to 'USA'.
938,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Please update the 'supplier_name' field in the 'suppliers' table to 'ABC Supplier Inc.' where the 'supplier_id' is 10002.,"CREATE TABLE suppliers (supplier_id INTEGER PRIMARY KEY, supplier_name VARCHAR(255) NOT NULL, address VARCHAR(255), phone_number VARCHAR(20));
INSERT INTO suppliers (supplier_id, supplier_name, address, phone_number) VALUES (10001, 'XYZ Supplier Ltd.', '123 Main St, Anytown', '555-123-4567'), (10002, 'DEF Supplier Corp.', '456 Elm St, Othertown', '555-234-5678');",UPDATE suppliers SET supplier_name = 'ABC Supplier Inc.' WHERE supplier_id = 10002;,This SQL statement updates the 'supplier_name' field in the 'suppliers' table to 'ABC Supplier Inc.' for the record where the 'supplier_id' is 10002.
939,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Add a new record to the 'production_runs' table with the following values: '2023-04-26', 'Product A', 'Machine 1', 100, 'Pass'.","CREATE TABLE production_runs (run_date DATE, product_name VARCHAR(255), machine_name VARCHAR(255), quantity INTEGER, quality_check VARCHAR(10));
INSERT INTO production_runs (run_date, product_name, machine_name, quantity, quality_check) VALUES ('2023-04-25', 'Product A', 'Machine 1', 120, 'Pass'), ('2023-04-25', 'Product B', 'Machine 2', 80, 'Fail');","INSERT INTO production_runs (run_date, product_name, machine_name, quantity, quality_check) VALUES ('2023-04-26', 'Product A', 'Machine 1', 100, 'Pass');","This SQL statement adds a new record to the 'production_runs' table with the values '2023-04-26', 'Product A', 'Machine 1', 100, and 'Pass'."
940,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,How many customers have active leases in the state of California?,"CREATE TABLE customers (customer_id INT PRIMARY KEY, name VARCHAR(255), address VARCHAR(255), city VARCHAR(255), state VARCHAR(255), zip_code VARCHAR(10));
INSERT INTO customers (customer_id, name, address, city, state, zip_code) VALUES
(1, 'John Smith', '123 Main St', 'Los Angeles', 'CA', '90012'),
(2, 'Jane Doe', '456 Elm St', 'San Francisco', 'CA', '94102'),
(3, 'Alice Johnson', '789 Oak St', 'San Diego', 'CA', '92101'),
(4, 'Bob Williams', '1011 Pine St', 'Sacramento', 'CA', '95814'),
(5, 'Emily Brown', '1213 Willow St', 'San Jose', 'CA', '95113');

CREATE TABLE leases (lease_id INT PRIMARY KEY, customer_id INT REFERENCES customers(customer_id), start_date DATE, end_date DATE, active BOOLEAN); 
INSERT INTO leases (lease_id, customer_id, start_date, end_date, active) VALUES
(1, 1, '2023-01-01', '2024-01-01', TRUE),
(2, 2, '2022-03-15', '2023-03-15', FALSE),
(3, 3, '2023-07-01', '2024-07-01', TRUE),
(4, 4, '2022-12-01', '2023-12-01', FALSE),
(5, 5, '2023-04-01', '2024-04-01', TRUE);",SELECT COUNT(*) FROM customers c JOIN leases l ON c.customer_id = l.customer_id WHERE c.state = 'CA' AND l.active = TRUE;,"This query joins the 'customers' and 'leases' tables on the 'customer_id' field. It then filters the results to include only customers in California (state = 'CA') and whose leases are active (active = TRUE). Finally, it counts the number of customers that meet these criteria."
941,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Which drivers have completed the most deliveries in the past month?,"CREATE TABLE drivers (driver_id INT PRIMARY KEY, name VARCHAR(255), city VARCHAR(255), state VARCHAR(255));
INSERT INTO drivers (driver_id, name, city, state) VALUES
(1, 'John Doe', 'Los Angeles', 'CA'),
(2, 'Jane Smith', 'San Francisco', 'CA'),
(3, 'Bob Johnson', 'San Diego', 'CA'),
(4, 'Alice Williams', 'Sacramento', 'CA'),
(5, 'Emily Brown', 'San Jose', 'CA');

CREATE TABLE deliveries (delivery_id INT PRIMARY KEY, driver_id INT REFERENCES drivers(driver_id), delivery_date DATE, completed BOOLEAN);
INSERT INTO deliveries (delivery_id, driver_id, delivery_date, completed) VALUES
(1, 1, '2023-10-26', TRUE),
(2, 2, '2023-10-27', TRUE),
(3, 3, '2023-10-28', TRUE),
(4, 4, '2023-10-29', TRUE),
(5, 5, '2023-10-30', TRUE),
(6, 1, '2023-10-31', TRUE),
(7, 2, '2023-11-01', TRUE),
(8, 3, '2023-11-02', TRUE),
(9, 4, '2023-11-03', TRUE),
(10, 5, '2023-11-04', TRUE),
(11, 1, '2023-11-05', TRUE),
(12, 2, '2023-11-06', TRUE),
(13, 3, '2023-11-07', TRUE),
(14, 4, '2023-11-08', TRUE),
(15, 5, '2023-11-09', TRUE);

CREATE TABLE vehicles (vehicle_id INT PRIMARY KEY, driver_id INT REFERENCES drivers(driver_id), make VARCHAR(255), model VARCHAR(255), year INT);","SELECT d.name, COUNT(del.delivery_id) AS deliveries_completed
FROM drivers d
JOIN deliveries del ON d.driver_id = del.driver_id
WHERE del.delivery_date >= DATE('now', '-1 month') AND del.completed = TRUE
GROUP BY d.name
ORDER BY deliveries_completed DESC;","This query joins the 'drivers' and 'deliveries' tables on the 'driver_id' field. It then filters the results to include only deliveries made in the past month (delivery_date >= DATE('now', '-1 month')) and that were completed (completed = TRUE). It then groups the results by driver name and counts the number of deliveries completed by each driver. Finally, it orders the results in descending order of deliveries completed."
942,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Which vehicles have been serviced in the last month and are assigned to drivers in the United States?,"CREATE TABLE Vehicles ( 
  vehicle_id INT PRIMARY KEY, 
  make VARCHAR(255) NOT NULL, 
  model VARCHAR(255) NOT NULL, 
  year INT NOT NULL, 
  driver_id INT REFERENCES Drivers(driver_id) 
);

CREATE TABLE Drivers ( 
  driver_id INT PRIMARY KEY, 
  name VARCHAR(255) NOT NULL, 
  country VARCHAR(255) NOT NULL 
);

CREATE TABLE ServiceRecords ( 
  service_id INT PRIMARY KEY, 
  vehicle_id INT REFERENCES Vehicles(vehicle_id), 
  service_date DATE NOT NULL 
);

INSERT INTO Vehicles (vehicle_id, make, model, year, driver_id) VALUES 
(1, 'Honda', 'Accord', 2018, 10), 
(2, 'Toyota', 'Camry', 2020, 15), 
(3, 'Ford', 'F-150', 2021, 20);

INSERT INTO Drivers (driver_id, name, country) VALUES 
(10, 'John Smith', 'USA'), 
(15, 'Alice Johnson', 'Canada'), 
(20, 'Bob Williams', 'USA');

INSERT INTO ServiceRecords (service_id, vehicle_id, service_date) VALUES 
(1, 1, '2023-09-15'), 
(2, 2, '2023-08-22'), 
(3, 3, '2023-09-05');","SELECT v.make, v.model
FROM Vehicles v
JOIN ServiceRecords sr ON v.vehicle_id = sr.vehicle_id
JOIN Drivers d ON v.driver_id = d.driver_id
WHERE sr.service_date BETWEEN DATE('now', '-1 month') AND DATE('now') AND d.country = 'USA';","This query selects the make and model of vehicles that have been serviced in the last month and are assigned to drivers in the United States. 

The query joins the Vehicles, ServiceRecords, and Drivers tables on the vehicle_id and driver_id columns. It then filters the results to include only vehicles that have been serviced in the last month and are assigned to drivers in the United States."
943,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,What are the average order value and quantity for customers in Europe?,"CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL
);

INSERT INTO customers (customer_id, customer_name, country) VALUES
(1, 'John Doe', 'USA'),
(2, 'Jane Smith', 'Canada'),
(3, 'Max Mustermann', 'Germany'),
(4, 'Amelie Dubois', 'France'),
(5, 'Antonio Rossi', 'Italy');

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    order_value DECIMAL(10,2) NOT NULL,
    order_quantity INT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

INSERT INTO orders (order_id, customer_id, order_date, order_value, order_quantity) VALUES
(1, 1, '2023-01-01', 100.00, 5),
(2, 2, '2023-01-02', 50.00, 2),
(3, 3, '2023-01-03', 75.00, 3),
(4, 4, '2023-01-04', 125.00, 6),
(5, 5, '2023-01-05', 200.00, 10);

CREATE VIEW customer_orders AS
SELECT c.customer_name, o.order_date, o.order_value, o.order_quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id;","SELECT AVG(o.order_value) AS average_order_value, AVG(o.order_quantity) AS average_order_quantity
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE c.country IN ('Germany', 'France', 'Italy');","1. This query joins the 'orders' and 'customers' tables on the 'customer_id' field.
2. It filters the results to include only orders from customers in Europe (Germany, France, Italy).
3. It calculates the average order value and average order quantity for these orders using the AVG() function.
4. The results are displayed as 'average_order_value' and 'average_order_quantity'."
944,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Which customers have placed orders in the last month?,"CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL
);

INSERT INTO customers (customer_id, customer_name, country) VALUES
(1, 'John Doe', 'USA'),
(2, 'Jane Smith', 'Canada'),
(3, 'Max Mustermann', 'Germany'),
(4, 'Amelie Dubois', 'France'),
(5, 'Antonio Rossi', 'Italy');

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date DATE NOT NULL,
    order_value DECIMAL(10,2) NOT NULL,
    order_quantity INT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

INSERT INTO orders (order_id, customer_id, order_date, order_value, order_quantity) VALUES
(1, 1, '2023-01-01', 100.00, 5),
(2, 2, '2023-01-02', 50.00, 2),
(3, 3, '2023-01-03', 75.00, 3),
(4, 4, '2023-01-04', 125.00, 6),
(5, 5, '2023-01-05', 200.00, 10);

CREATE VIEW customer_orders AS
SELECT c.customer_name, o.order_date, o.order_value, o.order_quantity
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id;","SELECT c.customer_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_date >= DATE('now', '-1 month');","1. This query joins the 'customers' and 'orders' tables on the 'customer_id' field.
2. It filters the results to include only orders placed in the last month (from the current date minus one month).
3. It selects the 'customer_name' from the 'customers' table for the filtered orders.
4. The results display the names of customers who have placed orders in the last month."
945,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Delete all records from the 'defects' table where the defect code is 'D123' and the defect date is before January 1, 2023.","CREATE TABLE defects (defect_id INT PRIMARY KEY, defect_code VARCHAR(10) NOT NULL, defect_date DATE NOT NULL, product_id INT, FOREIGN KEY (product_id) REFERENCES products(product_id));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50) NOT NULL, product_category VARCHAR(20) NOT NULL);",DELETE FROM defects WHERE defect_code = 'D123' AND defect_date < '2023-01-01';,"This SQL statement deletes all records from the 'defects' table where the defect code is 'D123' and the defect date is before January 1, 2023. The 'DELETE FROM' clause specifies the table to delete from, and the 'WHERE' clause specifies the condition for deleting records. The condition checks if the 'defect_code' column is equal to 'D123' and the 'defect_date' column is less than '2023-01-01'."
946,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Update the 'quantity_on_hand' field in the 'inventory' table by subtracting 100 from all records where the 'product_id' is 1234.,"CREATE TABLE inventory (inventory_id INT PRIMARY KEY, product_id INT, quantity_on_hand INT, FOREIGN KEY (product_id) REFERENCES products(product_id));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50) NOT NULL, product_category VARCHAR(20) NOT NULL);",UPDATE inventory SET quantity_on_hand = quantity_on_hand - 100 WHERE product_id = 1234;,"This SQL statement updates the 'quantity_on_hand' field in the 'inventory' table by subtracting 100 from all records where the 'product_id' is 1234. The 'UPDATE' clause specifies the table to update, and the 'SET' clause specifies the field to update and the new value. The 'WHERE' clause specifies the condition for updating records. The condition checks if the 'product_id' column is equal to 1234."
947,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Insert a new record into the 'suppliers' table with the following values: supplier_name = 'Acme Inc.', supplier_address = '123 Main St, Anytown, USA', supplier_phone = '555-123-4567'.","CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(50) NOT NULL, supplier_address VARCHAR(100) NOT NULL, supplier_phone VARCHAR(20) NOT NULL);","INSERT INTO suppliers (supplier_name, supplier_address, supplier_phone) VALUES ('Acme Inc.', '123 Main St, Anytown, USA', '555-123-4567');","This SQL statement inserts a new record into the 'suppliers' table with the following values: supplier_name = 'Acme Inc.', supplier_address = '123 Main St, Anytown, USA', supplier_phone = '555-123-4567'. The 'INSERT INTO' clause specifies the table to insert into, and the 'VALUES' clause specifies the values to insert."
948,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Find all products in the 'products' table that have been ordered more than 10 times in the 'orders' table.,"CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50) NOT NULL, product_category VARCHAR(20) NOT NULL);
CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date DATE, FOREIGN KEY (product_id) REFERENCES products(product_id));",SELECT product_name FROM products WHERE product_id IN (SELECT product_id FROM orders GROUP BY product_id HAVING COUNT(*) > 10);,"This SQL statement finds all products in the 'products' table that have been ordered more than 10 times in the 'orders' table. The 'SELECT' clause specifies the column to select, and the 'FROM' clause specifies the table to select from. The 'WHERE' clause specifies the condition for selecting records. The condition checks if the 'product_id' column is in the subquery that selects 'product_id' from the 'orders' table, grouped by 'product_id', and having a count greater than 10."
949,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Find the top 5 suppliers with the highest total order amount in the 'orders' table.,"CREATE TABLE suppliers (supplier_id INT PRIMARY KEY, supplier_name VARCHAR(50) NOT NULL, supplier_address VARCHAR(100) NOT NULL, supplier_phone VARCHAR(20) NOT NULL);
CREATE TABLE orders (order_id INT PRIMARY KEY, product_id INT, quantity INT, order_date DATE, supplier_id INT, FOREIGN KEY (product_id) REFERENCES products(product_id), FOREIGN KEY (supplier_id) REFERENCES suppliers(supplier_id));
CREATE TABLE products (product_id INT PRIMARY KEY, product_name VARCHAR(50) NOT NULL, product_category VARCHAR(20) NOT NULL, price DECIMAL(10,2) NOT NULL);","SELECT supplier_name, SUM(quantity * price) AS total_order_amount FROM orders o JOIN products p ON o.product_id = p.product_id JOIN suppliers s ON o.supplier_id = s.supplier_id GROUP BY supplier_name ORDER BY total_order_amount DESC LIMIT 5;","This SQL statement finds the top 5 suppliers with the highest total order amount in the 'orders' table. The 'SELECT' clause specifies the columns to select, and the 'FROM' clause specifies the tables to join. The 'JOIN' clauses join the 'orders' table to the 'products' table on 'product_id' and the 'orders' table to the 'suppliers' table on 'supplier_id'. The 'GROUP BY' clause groups the results by supplier_name. The 'ORDER BY' clause orders the results by total_order_amount in descending order. The 'LIMIT' clause limits the results to the top 5 suppliers."
950,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Which states have the highest average corn yields?,"CREATE TABLE corn_yields(state TEXT, year INTEGER, yield REAL);
INSERT INTO corn_yields(state, year, yield) VALUES ('Iowa', 2021, 180), ('Illinois', 2021, 175), ('Nebraska', 2021, 165), ('Iowa', 2020, 178), ('Illinois', 2020, 170), ('Nebraska', 2020, 160);
CREATE TABLE states(state TEXT, region TEXT);
INSERT INTO states(state, region) VALUES ('Iowa', 'Midwest'), ('Illinois', 'Midwest'), ('Nebraska', 'Midwest'), ('California', 'West'), ('Texas', 'South');",SELECT state FROM corn_yields WHERE yield = (SELECT MAX(yield) FROM corn_yields);,"This SQL query first finds the maximum corn yield by using a subquery that selects the maximum value in the 'yield' column of the 'corn_yields' table. Then, it selects the 'state' from the 'corn_yields' table where the 'yield' is equal to the maximum yield found in the subquery."
951,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",What is the average wheat yield in Kansas for the past three years?,"CREATE TABLE wheat_yields(state TEXT, year INTEGER, yield REAL);
INSERT INTO wheat_yields(state, year, yield) VALUES ('Kansas', 2021, 65), ('Kansas', 2020, 60), ('Kansas', 2019, 55), ('Oklahoma', 2021, 50), ('Oklahoma', 2020, 45), ('Oklahoma', 2019, 40);
CREATE TABLE states(state TEXT, region TEXT);
INSERT INTO states(state, region) VALUES ('Kansas', 'Midwest'), ('Oklahoma', 'South'), ('California', 'West'), ('Texas', 'South');","SELECT AVG(yield) FROM wheat_yields WHERE state='Kansas' AND year IN (2021, 2020, 2019);","This SQL query first filters the 'wheat_yields' table to select only records for Kansas and for the years 2021, 2020, and 2019. Then, it calculates the average 'yield' for these filtered records using the 'AVG' function."
952,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","In which year did California have the highest tomato production, and what was the production amount?","CREATE TABLE tomato_production(state TEXT, year INTEGER, production INTEGER);
INSERT INTO tomato_production(state, year, production) VALUES ('California', 2021, 10000, 'California', 2020, 9500), ('California', 2019, 9000), ('Florida', 2021, 7000), ('Florida', 2020, 6500), ('Florida', 2019, 6000);
CREATE TABLE states(state TEXT, region TEXT);
INSERT INTO states(state, region) VALUES ('California', 'West'), ('Florida', 'South'), ('Texas', 'South');","SELECT year, production FROM tomato_production WHERE state='California' AND production=(SELECT MAX(production) FROM tomato_production WHERE state='California');","This SQL query first uses a subquery to find the maximum tomato production for California. Then, it selects the year and production from the 'tomato_production' table for California where the production matches the maximum production found in the subquery."
953,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",What are the top 5 states with the highest average rainfall in the last decade?,"CREATE TABLE rainfall(state TEXT, year INTEGER, rainfall REAL);
INSERT INTO rainfall(state, year, rainfall) VALUES ('California', 2021, 20, 'California', 2020, 25, 'California', 2019, 30), ('Texas', 2021, 35, 'Texas', 2020, 40, 'Texas', 2019, 45), ('Florida', 2021, 50, 'Florida', 2020, 55, 'Florida', 2019, 60);
CREATE TABLE states(state TEXT, region TEXT);
INSERT INTO states(state, region) VALUES ('California', 'West'), ('Texas', 'South'), ('Florida', 'South');","SELECT state, AVG(rainfall) FROM rainfall WHERE year BETWEEN 2013 AND 2022 GROUP BY state ORDER BY AVG(rainfall) DESC LIMIT 5;","This SQL query first filters the 'rainfall' table to select records between the years 2013 and 2022. Then, it calculates the average rainfall for each state by grouping by state and using the 'AVG' function. Finally, it orders the results in descending order of average rainfall and limits the output to the top 5 states."
954,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Calculate the average price of corn in Iowa and Illinois for the year 2021 and compare it to the national average corn price.,"CREATE TABLE corn_prices(state TEXT, year INTEGER, price REAL);
INSERT INTO corn_prices(state, year, price) VALUES ('Iowa', 2021, 5.0, 'Illinois', 2021, 4.8, 'Nebraska', 2021, 4.9, 'National', 2021, 5.1), ('Iowa', 2020, 4.5, 'Illinois', 2020, 4.3, 'Nebraska', 2020, 4.4, 'National', 2020, 4.6);
CREATE TABLE states(state TEXT, region TEXT);
INSERT INTO states(state, region) VALUES ('Iowa', 'Midwest'), ('Illinois', 'Midwest'), ('Nebraska', 'Midwest'), ('California', 'West'), ('Texas', 'South');","SELECT AVG(price) AS Iowa_Illinois_average, (SELECT AVG(price) FROM corn_prices WHERE state='National' AND year=2021) AS national_average FROM corn_prices WHERE state IN ('Iowa', 'Illinois') AND year=2021;","This SQL query first calculates the average corn price for Iowa and Illinois in 2021 by filtering the 'corn_prices' table and using the 'AVG' function. Then, it uses a subquery to calculate the national average corn price for 2021. Finally, it displays both averages for comparison."
955,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average yield of wheat in the state of Kansas for the year 2022?,"CREATE TABLE wheat_yields (  state VARCHAR(255),  year INT,  yield DECIMAL(10, 2) );
INSERT INTO wheat_yields (state, year, yield) VALUES ('Kansas', 2021, 55.5), ('Kansas', 2022, 58.2), ('Nebraska', 2021, 62.1), ('Nebraska', 2022, 64.8);",SELECT AVG(yield) AS avg_yield FROM wheat_yields WHERE state = 'Kansas' AND year = 2022;,This query selects the average yield from the 'wheat_yields' table where the state is 'Kansas' and the year is 2022. The result is stored in a variable called 'avg_yield'.
956,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Which farmers in California have planted more than 100 acres of almonds in 2023?,"CREATE TABLE almond_plantings (  farmer_id INT,  farmer_name VARCHAR(255),  state VARCHAR(255),  crop VARCHAR(255),  acres INT,  year INT );
INSERT INTO almond_plantings (farmer_id, farmer_name, state, crop, acres, year) VALUES (1, 'John Smith', 'California', 'Almonds', 120, 2023), (2, 'Jane Doe', 'California', 'Almonds', 80, 2023), (3, 'Peter Jones', 'Arizona', 'Almonds', 50, 2023);",SELECT farmer_name FROM almond_plantings WHERE state = 'California' AND crop = 'Almonds' AND acres > 100 AND year = 2023;,"This query selects the names of farmers from the 'almond_plantings' table where the state is 'California', the crop is 'Almonds', the acres planted are greater than 100, and the year is 2023."
957,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What was the total rainfall in inches in the Central Valley of California during the month of June 2023?,"CREATE TABLE weather_data (  region VARCHAR(255),  month INT,  year INT,  rainfall DECIMAL(10, 2) );
INSERT INTO weather_data (region, month, year, rainfall) VALUES ('Central Valley', 6, 2023, 1.2), ('Central Valley', 7, 2023, 0.5), ('Southern California', 6, 2023, 0.1), ('Southern California', 7, 2023, 0.0);",SELECT SUM(rainfall) AS total_rainfall FROM weather_data WHERE region = 'Central Valley' AND month = 6 AND year = 2023;,"This query calculates the total rainfall for the Central Valley in June 2023 by summing up the 'rainfall' values in the 'weather_data' table for that specific region, month, and year."
958,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What are the top 5 crops grown in the United States in terms of total acreage planted in 2022?,"CREATE TABLE crop_acreage (  crop VARCHAR(255),  state VARCHAR(255),  acres INT,  year INT );
INSERT INTO crop_acreage (crop, state, acres, year) VALUES ('Corn', 'Iowa', 12000000, 2022), ('Soybeans', 'Illinois', 10000000, 2022), ('Wheat', 'Kansas', 8000000, 2022), ('Almonds', 'California', 6000000, 2022), ('Cotton', 'Texas', 5000000, 2022);","SELECT crop, SUM(acres) AS total_acres FROM crop_acreage WHERE year = 2022 GROUP BY crop ORDER BY total_acres DESC LIMIT 5;","This query first groups the data in the 'crop_acreage' table by crop for the year 2022. Then, it calculates the sum of acres for each crop and stores it in a variable called 'total_acres'. Finally, it orders the results by 'total_acres' in descending order and limits the output to the top 5 crops."
959,agriculture,"Detailed data on crop yields, farming practices, weather patterns, and market trends; resource allocation and sustainability metrics.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",What is the average price per bushel of corn sold in the state of Iowa during the month of August 2023?,"CREATE TABLE corn_prices (  state VARCHAR(255),  month INT,  year INT,  price DECIMAL(10, 2) );
INSERT INTO corn_prices (state, month, year, price) VALUES ('Iowa', 8, 2023, 6.50), ('Iowa', 9, 2023, 6.20), ('Illinois', 8, 2023, 6.30), ('Illinois', 9, 2023, 6.00);",SELECT AVG(price) AS avg_price FROM corn_prices WHERE state = 'Iowa' AND month = 8 AND year = 2023;,"This query calculates the average price per bushel of corn in Iowa for August 2023 by averaging the 'price' values in the 'corn_prices' table for the specified state, month, and year."
960,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Which products are currently in development by each department?,"CREATE TABLE product_development (product_id INT PRIMARY KEY, product_name VARCHAR(255), department_id INT, development_stage VARCHAR(255));
INSERT INTO product_development (product_id, product_name, department_id, development_stage) VALUES (1, 'New Phone', 1, 'Prototype'), (2, 'Smartwatch', 2, 'Concept'), (3, 'AI Assistant', 3, 'Beta Testing');

CREATE TABLE department (department_id INT PRIMARY KEY, department_name VARCHAR(255));
INSERT INTO department (department_id, department_name) VALUES (1, 'Mobile'), (2, 'Wearables'), (3, 'AI');","SELECT p.product_name, d.department_name
FROM product_development p
JOIN department d ON p.department_id = d.department_id
WHERE p.development_stage = 'Prototype';",This query joins the product_development and department tables on the department_id field. It then filters the results to only include products where the development_stage is 'Prototype'. The final result is a list of product names and their corresponding department names.
961,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the development stage of the AI Assistant product to 'Released'.,"CREATE TABLE product_development (product_id INT PRIMARY KEY, product_name VARCHAR(255), department_id INT, development_stage VARCHAR(255));
INSERT INTO product_development (product_id, product_name, department_id, development_stage) VALUES (1, 'New Phone', 1, 'Prototype'), (2, 'Smartwatch', 2, 'Concept'), (3, 'AI Assistant', 3, 'Beta Testing');

CREATE TABLE department (department_id INT PRIMARY KEY, department_name VARCHAR(255));
INSERT INTO department (department_id, department_id, department_name) VALUES (1, 'Mobile'), (2, 'Wearables'), (3, 'AI');","UPDATE product_development
SET development_stage = 'Released'
WHERE product_name = 'AI Assistant';",This query updates the development_stage of the AI Assistant product to 'Released'. It does this by updating the product_development table where the product_name is 'AI Assistant'.
962,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Delete the record for the Smartwatch product.,"CREATE TABLE product_development (product_id INT PRIMARY KEY, product_name VARCHAR(255), department_id INT, development_stage VARCHAR(255));
INSERT INTO product_development (product_id, product_name, department_id, development_stage) VALUES (1, 'New Phone', 1, 'Prototype'), (2, 'Smartwatch', 2, 'Concept'), (3, 'AI Assistant', 3, 'Beta Testing');

CREATE TABLE department (department_id INT PRIMARY KEY, department_name VARCHAR(255));
INSERT INTO department (department_id, department_id, department_name) VALUES (1, 'Mobile'), (2, 'Wearables'), (3, 'AI');","DELETE FROM product_development
WHERE product_name = 'Smartwatch';",This query deletes the record for the Smartwatch product from the product_development table. It does this by deleting the row where the product_name is 'Smartwatch'.
963,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert a new record for a product called 'Fitness Tracker' in the Wearables department with a development stage of 'Concept'.,"CREATE TABLE product_development (product_id INT PRIMARY KEY, product_name VARCHAR(255), department_id INT, development_stage VARCHAR(255));
INSERT INTO product_development (product_id, product_name, department_id, development_stage) VALUES (1, 'New Phone', 1, 'Prototype'), (2, 'Smartwatch', 2, 'Concept'), (3, 'AI Assistant', 3, 'Beta Testing');

CREATE TABLE department (department_id INT PRIMARY KEY, department_name VARCHAR(255));
INSERT INTO department (department_id, department_id, department_name) VALUES (1, 'Mobile'), (2, 'Wearables'), (3, 'AI');","INSERT INTO product_development (product_name, department_id, development_stage)
VALUES ('Fitness Tracker', 2, 'Concept');",This query inserts a new record into the product_development table for a product called 'Fitness Tracker'. The product is assigned to the Wearables department and has a development stage of 'Concept'.
964,technology,"Comprehensive data on product development, market trends, consumer behavior, and innovation; data privacy and cybersecurity.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",What is the average development time for products in the Mobile department?,"CREATE TABLE product_development (product_id INT PRIMARY KEY, product_name VARCHAR(255), department_id INT, development_stage VARCHAR(255), start_date DATE, end_date DATE);
INSERT INTO product_development (product_id, product_name, department_id, development_stage, start_date, end_date) VALUES (1, 'New Phone', 1, 'Prototype', '2023-01-01', '2023-03-01'), (2, 'Smartwatch', 2, 'Concept', '2023-02-01', '2023-04-01'), (3, 'AI Assistant', 3, 'Beta Testing', '2023-03-01', '2023-05-01');

CREATE TABLE department (department_id INT PRIMARY KEY, department_name VARCHAR(255));
INSERT INTO department (department_id, department_name) VALUES (1, 'Mobile'), (2, 'Wearables'), (3, 'AI');","SELECT AVG(DATEDIFF(end_date, start_date)) AS average_development_time
FROM product_development
WHERE department_id = 1;",This query calculates the average development time for products in the Mobile department. It does this by first calculating the difference between the start_date and end_date for each product in the Mobile department. It then averages these differences to get the average development time.
965,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","How many different products did we manufacture between January 1, 2022 and December 31, 2022?","CREATE TABLE Production_Runs (
    RunID INT PRIMARY KEY,
    ProductID INT,
    StartTime DATETIME,
    EndTime DATETIME
);

CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(255)
);

CREATE TABLE Inventory (
    InventoryID INT PRIMARY KEY,
    ProductID INT,
    Quantity INT,
    Date DATETIME
);",SELECT COUNT(DISTINCT ProductID) FROM Production_Runs WHERE StartTime >= '2022-01-01' AND EndTime <= '2022-12-31';,"This query selects the count of distinct product IDs from the Production_Runs table where the start time is between January 1, 2022, and December 31, 2022. This gives us the number of different products manufactured in that time period."
966,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",What was the average inventory level for each product in 2022?,"CREATE TABLE Inventory (
    InventoryID INT PRIMARY KEY,
    ProductID INT,
    Quantity INT,
    Date DATETIME
);","SELECT p.ProductName, AVG(i.Quantity) AS AverageInventory
FROM Inventory i
JOIN Products p ON i.ProductID = p.ProductID
WHERE i.Date BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY p.ProductName
ORDER BY AverageInventory DESC;","This query calculates the average inventory level for each product in 2022. It joins the Inventory and Products tables on the ProductID, filters the inventory records for the year 2022, groups the data by ProductName, calculates the average inventory for each product, and orders the results in descending order of average inventory."
967,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Which suppliers delivered the most components in Q1 2023?,"CREATE TABLE Suppliers (
    SupplierID INT PRIMARY KEY,
    SupplierName VARCHAR(255)
);

CREATE TABLE Components (
    ComponentID INT PRIMARY KEY,
    ComponentType VARCHAR(255),
    SupplierID INT
);

CREATE TABLE Deliveries (
    DeliveryID INT PRIMARY KEY,
    ComponentID INT,
    DeliveryDate DATETIME,
    Quantity INT
);","SELECT s.SupplierName, SUM(d.Quantity) AS TotalComponentsDelivered
FROM Deliveries d
JOIN Components c ON d.ComponentID = c.ComponentID
JOIN Suppliers s ON c.SupplierID = s.SupplierID
WHERE d.DeliveryDate BETWEEN '2023-01-01' AND '2023-03-31'
GROUP BY s.SupplierName
ORDER BY TotalComponentsDelivered DESC;","This query identifies the suppliers who delivered the most components in Q1 2023. It joins the Deliveries, Components, and Suppliers tables, filters deliveries for Q1 2023, groups deliveries by supplier, sums the delivered quantities for each supplier, and orders the results in descending order of total components delivered."
968,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the 'Quantity' in the 'Inventory' table for product 'ABC123' to '500' where the 'Date' is '2023-04-15'.,"CREATE TABLE Inventory (
    InventoryID INT PRIMARY KEY,
    ProductID INT,
    Quantity INT,
    Date DATETIME
);","UPDATE Inventory
SET Quantity = 500
WHERE ProductID = 'ABC123' AND Date = '2023-04-15';",This query updates the 'Quantity' value in the 'Inventory' table to '500' for the record where the 'ProductID' is 'ABC123' and the 'Date' is '2023-04-15'.
969,manufacturing,"Detailed records on production processes, inventory management, supplier relationships, and quality control.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete all records from the 'Production_Runs' table where the 'EndTime' is before '2022-06-01'.,"CREATE TABLE Production_Runs (
    RunID INT PRIMARY KEY,
    ProductID INT,
    StartTime DATETIME,
    EndTime DATETIME
);","DELETE FROM Production_Runs
WHERE EndTime < '2022-06-01';",This query deletes all records from the 'Production_Runs' table where the 'EndTime' is earlier than '2022-06-01'.
970,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","Add a new record to the Vehicles table for a Nissan Altima with license plate ABC123, owned by customer ID 123, assigned to depot 456. The car's current mileage is 10,000 miles.","CREATE TABLE Vehicles (vehicle_id INT PRIMARY KEY, make VARCHAR(255) NOT NULL, model VARCHAR(255) NOT NULL, license_plate VARCHAR(255) UNIQUE, owner_id INT REFERENCES Customers(customer_id), depot_id INT REFERENCES Depots(depot_id), mileage INT);","INSERT INTO Vehicles (make, model, license_plate, owner_id, depot_id, mileage) VALUES ('Nissan', 'Altima', 'ABC123', 123, 456, 10000);","This SQL statement inserts a new row into the Vehicles table with the specified values for make, model, license plate, owner ID, depot ID, and mileage."
971,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","Update the customer's address in the Customers table where the customer ID is 456 to '123 Main St, Anytown, CA 91234'.","CREATE TABLE Customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, phone_number VARCHAR(255) UNIQUE);","UPDATE Customers SET address = '123 Main St, Anytown, CA 91234' WHERE customer_id = 456;",This SQL statement updates the address of the customer with ID 456 in the Customers table.
972,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records",Delete the record from the Orders table where the order ID is 789.,"CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, total_amount DECIMAL(10,2));",DELETE FROM Orders WHERE order_id = 789;,This SQL statement deletes the row from the Orders table where the order ID is 789.
973,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","Calculate the average mileage of all vehicles in the Vehicles table, grouped by make.","CREATE TABLE Vehicles (vehicle_id INT PRIMARY KEY, make VARCHAR(255) NOT NULL, model VARCHAR(255) NOT NULL, license_plate VARCHAR(255) UNIQUE, owner_id INT REFERENCES Customers(customer_id), depot_id INT REFERENCES Depots(depot_id), mileage INT);","SELECT make, AVG(mileage) AS average_mileage FROM Vehicles GROUP BY make;","This SQL statement calculates the average mileage of all vehicles in the Vehicles table, grouped by make."
974,transportation,"Extensive data on fleet management, logistics, customer demographics, and supply chain optimization.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.) with partitioning and ordering","data manipulation: inserting, updating, or deleting records","Find the top 5 customers with the highest total order amount in the Orders table, sorted by total order amount in descending order.","CREATE TABLE Orders (order_id INT PRIMARY KEY, customer_id INT REFERENCES Customers(customer_id), order_date DATE, total_amount DECIMAL(10,2));
CREATE TABLE Customers (customer_id INT PRIMARY KEY, name VARCHAR(255) NOT NULL, address VARCHAR(255) NOT NULL, phone_number VARCHAR(255) UNIQUE);","SELECT c.name, SUM(o.total_amount) AS total_order_amount FROM Customers c JOIN Orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id ORDER BY total_order_amount DESC LIMIT 5;","This SQL statement finds the top 5 customers with the highest total order amount in the Orders table, sorted by total order amount in descending order."
