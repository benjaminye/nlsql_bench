domain,domain_description,user_proficiency,sql_complexity,sql_task,sql_prompt,sql_context,sql,sql_explanation
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Show me a report of all unique movies watched by users in 2022 and 2023.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseYear INT); CREATE TABLE UserWatchHistory (UserID INT, MovieID INT, WatchDate DATE);",SELECT Title FROM Movies WHERE MovieID IN (SELECT MovieID FROM UserWatchHistory WHERE YEAR(WatchDate) = 2022 UNION SELECT MovieID FROM UserWatchHistory WHERE YEAR(WatchDate) = 2023);,"The query first selects all MovieIDs from the UserWatchHistory table where the WatchDate year is 2022 or 2023 using the UNION set operation to combine the results. Then, it retrieves the Titles of these movies from the Movies table."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a list of TV shows that were watched by users in both 2021 and 2022.,"CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100), ReleaseYear INT); CREATE TABLE UserWatchHistory (UserID INT, ShowID INT, WatchDate DATE);",SELECT Title FROM TVShows WHERE ShowID IN (SELECT ShowID FROM UserWatchHistory WHERE YEAR(WatchDate) = 2021 INTERSECT SELECT ShowID FROM UserWatchHistory WHERE YEAR(WatchDate) = 2022);,The query selects all ShowIDs from the UserWatchHistory table where the WatchDate year is 2021 and intersects them with ShowIDs where the WatchDate year is 2022. It then retrieves the Titles of these shows from the TVShows table.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find all users who have watched movies but not TV shows in 2023.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseYear INT); CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100), ReleaseYear INT); CREATE TABLE UserWatchHistory (UserID INT, ContentID INT, ContentType VARCHAR(10), WatchDate DATE);",SELECT DISTINCT UserID FROM UserWatchHistory WHERE ContentType = 'Movie' AND YEAR(WatchDate) = 2023 EXCEPT SELECT DISTINCT UserID FROM UserWatchHistory WHERE ContentType = 'TVShow' AND YEAR(WatchDate) = 2023;,The query selects distinct UserIDs from the UserWatchHistory table where the ContentType is 'Movie' and the WatchDate year is 2023. It then excludes UserIDs who have watched 'TVShow' in the same year using the EXCEPT set operation.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",List all unique genres of content consumed by users in 2022.,"CREATE TABLE Content (ContentID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE UserWatchHistory (UserID INT, ContentID INT, WatchDate DATE);",SELECT DISTINCT Genre FROM Content WHERE ContentID IN (SELECT ContentID FROM UserWatchHistory WHERE YEAR(WatchDate) = 2022);,The query selects distinct genres from the Content table where the ContentID matches those in the UserWatchHistory table with a WatchDate year of 2022.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Provide a report of all unique content titles watched by users in 2021 but not in 2022.,"CREATE TABLE Content (ContentID INT PRIMARY KEY, Title VARCHAR(100)); CREATE TABLE UserWatchHistory (UserID INT, ContentID INT, WatchDate DATE);",SELECT Title FROM Content WHERE ContentID IN (SELECT ContentID FROM UserWatchHistory WHERE YEAR(WatchDate) = 2021 EXCEPT SELECT ContentID FROM UserWatchHistory WHERE YEAR(WatchDate) = 2022);,The query selects ContentIDs from the UserWatchHistory table where the WatchDate year is 2021 and excludes those watched in 2022 using the EXCEPT set operation. It then retrieves the Titles of these contents from the Content table.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the top 3 genres with the highest average user ratings for movies released in the last 5 years.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseYear INT); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, MovieID INT, UserID INT, Rating DECIMAL);","WITH RecentMovies AS (SELECT MovieID, Genre FROM Movies WHERE ReleaseYear >= YEAR(CURRENT_DATE) - 5), GenreRatings AS (SELECT Genre, AVG(Rating) AS AvgRating FROM RecentMovies JOIN Ratings ON RecentMovies.MovieID = Ratings.MovieID GROUP BY Genre) SELECT Genre, AvgRating FROM GenreRatings ORDER BY AvgRating DESC LIMIT 3;",The query first creates a common table expression (CTE) to filter movies released in the last 5 years. It then calculates the average rating for each genre and selects the top 3 genres with the highest average ratings.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Calculate the total revenue generated by each content creator in the past year.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(100)); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, CreatorID INT, Amount DECIMAL, RevenueDate DATE);","SELECT CreatorName, SUM(Amount) AS TotalRevenue FROM ContentCreators JOIN Revenue ON ContentCreators.CreatorID = Revenue.CreatorID WHERE RevenueDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY CreatorName;",The query joins the ContentCreators and Revenue tables to calculate the total revenue generated by each content creator in the past year. It filters the revenue records to include only those from the past year and groups the results by creator name.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Identify the top 5 most active users based on the number of comments made on videos.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(100)); CREATE TABLE Comments (CommentID INT PRIMARY KEY, UserID INT, VideoID INT, CommentDate DATE);","SELECT UserName, COUNT(CommentID) AS CommentCount FROM Users JOIN Comments ON Users.UserID = Comments.UserID GROUP BY UserName ORDER BY CommentCount DESC LIMIT 5;",The query joins the Users and Comments tables to count the number of comments made by each user. It then orders the results by the comment count in descending order and selects the top 5 most active users.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the average watch time per user for each video category in the last month.,"CREATE TABLE Videos (VideoID INT PRIMARY KEY, Title VARCHAR(100), Category VARCHAR(50)); CREATE TABLE WatchTime (WatchTimeID INT PRIMARY KEY, UserID INT, VideoID INT, WatchDuration INT, WatchDate DATE);","WITH LastMonthWatchTime AS (SELECT VideoID, UserID, WatchDuration FROM WatchTime WHERE WatchDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)), CategoryWatchTime AS (SELECT Videos.Category, UserID, AVG(WatchDuration) AS AvgWatchDuration FROM LastMonthWatchTime JOIN Videos ON LastMonthWatchTime.VideoID = Videos.VideoID GROUP BY Videos.Category, UserID) SELECT Category, AVG(AvgWatchDuration) AS AvgWatchTimePerUser FROM CategoryWatchTime GROUP BY Category;",The query first creates a CTE to filter watch time records from the last month. It then calculates the average watch duration per user for each video category and finally computes the average watch time per user for each category.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Determine the top 3 countries with the highest number of video uploads in the past year.,"CREATE TABLE Videos (VideoID INT PRIMARY KEY, Title VARCHAR(100), UploadDate DATE, Country VARCHAR(50));","SELECT Country, COUNT(VideoID) AS UploadCount FROM Videos WHERE UploadDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 YEAR) GROUP BY Country ORDER BY UploadCount DESC LIMIT 3;","The query counts the number of video uploads for each country in the past year. It groups the results by country, orders them by the upload count in descending order, and selects the top 3 countries with the highest number of uploads."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the top 10 highest-scoring basketball players in each season, and then display the top 5 players based on their average points per game.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50)); CREATE TABLE Seasons (SeasonID INT PRIMARY KEY, SeasonYear INT); CREATE TABLE PlayerStats (StatID INT PRIMARY KEY, PlayerID INT, SeasonID INT, PointsPerGame DECIMAL, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (SeasonID) REFERENCES Seasons(SeasonID));","WITH RankedPlayers AS (SELECT PlayerID, AVG(PointsPerGame) AS AvgPoints, DENSE_RANK() OVER (ORDER BY AVG(PointsPerGame) DESC) AS Rank FROM PlayerStats GROUP BY PlayerID) SELECT PlayerID, AvgPoints FROM RankedPlayers WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank players based on their average points per game in descending order. It then selects the top 5 players using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average attendance for different football matches across various leagues, and then display the top 5 matches with the highest attendance.","CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, League VARCHAR(50)); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, MatchID INT, AttendanceCount INT, FOREIGN KEY (MatchID) REFERENCES Matches(MatchID));","WITH RankedMatches AS (SELECT MatchID, AVG(AttendanceCount) AS AvgAttendance, DENSE_RANK() OVER (ORDER BY AVG(AttendanceCount) DESC) AS Rank FROM Attendance GROUP BY MatchID) SELECT MatchID, AvgAttendance FROM RankedMatches WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank matches based on their average attendance in descending order. It then selects the top 5 matches using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different sports teams in various seasons, and then display the top 5 teams based on their average revenue.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Seasons (SeasonID INT PRIMARY KEY, SeasonYear INT); CREATE TABLE TeamRevenue (RevenueID INT PRIMARY KEY, TeamID INT, SeasonID INT, Revenue DECIMAL, FOREIGN KEY (TeamID) REFERENCES Teams(TeamID), FOREIGN KEY (SeasonID) REFERENCES Seasons(SeasonID));","WITH RankedTeams AS (SELECT TeamID, AVG(Revenue) AS AvgRevenue, DENSE_RANK() OVER (ORDER BY AVG(Revenue) DESC) AS Rank FROM TeamRevenue GROUP BY TeamID) SELECT TeamID, AvgRevenue FROM RankedTeams WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank teams based on their average revenue in descending order. It then selects the top 5 teams using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of goals scored by different soccer players in various tournaments, and then display the top 5 players based on their total goals scored.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50)); CREATE TABLE Tournaments (TournamentID INT PRIMARY KEY, TournamentName VARCHAR(50)); CREATE TABLE PlayerGoals (GoalID INT PRIMARY KEY, PlayerID INT, TournamentID INT, Goals INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (TournamentID) REFERENCES Tournaments(TournamentID));","WITH RankedPlayers AS (SELECT PlayerID, SUM(Goals) AS TotalGoals, DENSE_RANK() OVER (ORDER BY SUM(Goals) DESC) AS Rank FROM PlayerGoals GROUP BY PlayerID) SELECT PlayerID, TotalGoals FROM RankedPlayers WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank players based on their total goals scored in descending order. It then selects the top 5 players using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average ticket prices for different sports events, and then display the top 5 events with the highest average ticket price.","CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE); CREATE TABLE TicketPrices (PriceID INT PRIMARY KEY, EventID INT, TicketPrice DECIMAL, FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH RankedEvents AS (SELECT EventID, AVG(TicketPrice) AS AvgPrice, DENSE_RANK() OVER (ORDER BY AVG(TicketPrice) DESC) AS Rank FROM TicketPrices GROUP BY EventID) SELECT EventID, AvgPrice FROM RankedEvents WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank events based on their average ticket price in descending order. It then selects the top 5 events using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total carbon emissions reduced by each renewable energy project in the last year and identify projects that have reduced more than 1000 tons of CO2.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), StartDate DATE, EndDate DATE, CO2Reduction DECIMAL); CREATE TABLE Emissions (EmissionID INT PRIMARY KEY, ProjectID INT, EmissionDate DATE, CO2Reduced DECIMAL, FOREIGN KEY (ProjectID) REFERENCES RenewableProjects(ProjectID));","BEGIN; WITH AnnualReduction AS (SELECT ProjectID, SUM(CO2Reduced) AS TotalReduction FROM Emissions WHERE EmissionDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY ProjectID HAVING SUM(CO2Reduced) > 1000) SELECT rp.ProjectName, ar.TotalReduction FROM RenewableProjects rp JOIN AnnualReduction ar ON rp.ProjectID = ar.ProjectID; COMMIT;","The query calculates the total CO2 reduction for each renewable energy project over the past year. It uses a common table expression (CTE) to sum the CO2 reductions and filters projects that have reduced more than 1000 tons of CO2. Finally, it joins the CTE with the RenewableProjects table to get the project names and their total reductions."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 regions with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureData (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), Year INT, AvgTemperature DECIMAL);","BEGIN; WITH DecadeAvgTemp AS (SELECT RegionID, AVG(AvgTemperature) AS AvgTempIncrease FROM TemperatureData WHERE Year BETWEEN YEAR(CURDATE()) - 10 AND YEAR(CURDATE()) GROUP BY RegionID) SELECT td.RegionName, dat.AvgTempIncrease FROM TemperatureData td JOIN DecadeAvgTemp dat ON td.RegionID = dat.RegionID ORDER BY dat.AvgTempIncrease DESC LIMIT 3; COMMIT;","The query calculates the average temperature increase for each region over the past decade. It uses a common table expression (CTE) to compute the average temperature for each region and then joins this CTE with the TemperatureData table to get the region names. Finally, it orders the results by the average temperature increase in descending order and limits the output to the top 3 regions."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total number of endangered species in each conservation area and list areas with more than 50 endangered species.,"CREATE TABLE ConservationAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), AreaID INT, FOREIGN KEY (AreaID) REFERENCES ConservationAreas(AreaID));","BEGIN; WITH SpeciesCount AS (SELECT AreaID, COUNT(SpeciesID) AS TotalSpecies FROM EndangeredSpecies GROUP BY AreaID HAVING COUNT(SpeciesID) > 50) SELECT ca.AreaName, sc.TotalSpecies FROM ConservationAreas ca JOIN SpeciesCount sc ON ca.AreaID = sc.AreaID; COMMIT;","The query calculates the total number of endangered species in each conservation area. It uses a common table expression (CTE) to count the species in each area and filters areas with more than 50 endangered species. Finally, it joins the CTE with the ConservationAreas table to get the area names and their total species count."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the average water consumption per household in each city and identify cities with an average consumption greater than 500 liters per day.,"CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(100)); CREATE TABLE WaterConsumption (ConsumptionID INT PRIMARY KEY, CityID INT, HouseholdID INT, DailyConsumption DECIMAL, FOREIGN KEY (CityID) REFERENCES Cities(CityID));","BEGIN; WITH AvgConsumption AS (SELECT CityID, AVG(DailyConsumption) AS AvgDailyConsumption FROM WaterConsumption GROUP BY CityID HAVING AVG(DailyConsumption) > 500) SELECT c.CityName, ac.AvgDailyConsumption FROM Cities c JOIN AvgConsumption ac ON c.CityID = ac.CityID; COMMIT;","The query calculates the average daily water consumption per household in each city. It uses a common table expression (CTE) to compute the average consumption and filters cities with an average consumption greater than 500 liters per day. Finally, it joins the CTE with the Cities table to get the city names and their average daily consumption."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 5 countries with the highest total investment in sustainable development projects over the past five years.,"CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(100)); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, CountryID INT, ProjectName VARCHAR(100), InvestmentAmount DECIMAL, InvestmentDate DATE, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));","BEGIN; WITH RecentInvestments AS (SELECT CountryID, SUM(InvestmentAmount) AS TotalInvestment FROM Investments WHERE InvestmentDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 5 YEAR) AND CURDATE() GROUP BY CountryID) SELECT c.CountryName, ri.TotalInvestment FROM Countries c JOIN RecentInvestments ri ON c.CountryID = ri.CountryID ORDER BY ri.TotalInvestment DESC LIMIT 5; COMMIT;","The query calculates the total investment in sustainable development projects for each country over the past five years. It uses a common table expression (CTE) to sum the investments and then joins this CTE with the Countries table to get the country names. Finally, it orders the results by total investment in descending order and limits the output to the top 5 countries."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Identify the top 5 most popular sustainable fashion brands in North America based on consumer purchases.,"CREATE TABLE ConsumerPurchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE, Region VARCHAR(50)); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO ConsumerPurchases (PurchaseID, ConsumerID, BrandID, PurchaseDate, Region) VALUES (1, 101, 1, '2023-01-15', 'North America'), (2, 102, 2, '2023-02-20', 'North America'), (3, 103, 1, '2023-03-10', 'North America'), (4, 104, 3, '2023-04-05', 'North America'), (5, 105, 2, '2023-05-25', 'North America'); INSERT INTO Brands (BrandID, BrandName, IsSustainable) VALUES (1, 'EcoWear', TRUE), (2, 'GreenThreads', TRUE), (3, 'FastFashion', FALSE);","WITH SustainableBrands AS (SELECT BrandID, BrandName FROM Brands WHERE IsSustainable = TRUE), NorthAmericaPurchases AS (SELECT BrandID, COUNT(*) AS PurchaseCount FROM ConsumerPurchases WHERE Region = 'North America' GROUP BY BrandID) SELECT SB.BrandName, NAP.PurchaseCount FROM SustainableBrands SB JOIN NorthAmericaPurchases NAP ON SB.BrandID = NAP.BrandID ORDER BY NAP.PurchaseCount DESC LIMIT 5;",The query first creates a CTE for sustainable brands and another CTE for purchases in North America. It then joins these CTEs to find the top 5 most popular sustainable fashion brands based on the number of purchases.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the average rating of fashion items based on recent customer reviews.,"CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), AvgRating DECIMAL); CREATE TABLE CustomerReviews (ReviewID INT PRIMARY KEY, ItemID INT, Rating DECIMAL, ReviewDate DATE); INSERT INTO FashionItems (ItemID, ItemName, AvgRating) VALUES (1, 'Denim Jacket', 4.5), (2, 'Leather Boots', 4.0), (3, 'Silk Scarf', 3.8); INSERT INTO CustomerReviews (ReviewID, ItemID, Rating, ReviewDate) VALUES (1, 1, 5.0, '2023-01-10'), (2, 2, 4.5, '2023-02-15'), (3, 1, 4.0, '2023-03-20'), (4, 3, 3.5, '2023-04-25'), (5, 2, 4.0, '2023-05-30');","WITH RecentReviews AS (SELECT ItemID, AVG(Rating) AS NewAvgRating FROM CustomerReviews WHERE ReviewDate >= '2023-01-01' GROUP BY ItemID) UPDATE FashionItems SET AvgRating = (SELECT NewAvgRating FROM RecentReviews WHERE RecentReviews.ItemID = FashionItems.ItemID) WHERE EXISTS (SELECT 1 FROM RecentReviews WHERE RecentReviews.ItemID = FashionItems.ItemID);",The query creates a CTE to calculate the new average rating for each fashion item based on recent reviews. It then updates the AvgRating in the FashionItems table with these new values.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Delete records of fashion items that have not been purchased in the last year.,"CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50)); CREATE TABLE ConsumerPurchases (PurchaseID INT PRIMARY KEY, ItemID INT, PurchaseDate DATE); INSERT INTO FashionItems (ItemID, ItemName) VALUES (1, 'Denim Jacket'), (2, 'Leather Boots'), (3, 'Silk Scarf'); INSERT INTO ConsumerPurchases (PurchaseID, ItemID, PurchaseDate) VALUES (1, 1, '2022-01-10'), (2, 2, '2023-02-15'), (3, 1, '2023-03-20'), (4, 3, '2021-04-25'), (5, 2, '2023-05-30');","WITH RecentPurchases AS (SELECT DISTINCT ItemID FROM ConsumerPurchases WHERE PurchaseDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) DELETE FROM FashionItems WHERE ItemID NOT IN (SELECT ItemID FROM RecentPurchases);",The query creates a CTE to identify items that have been purchased in the last year. It then deletes records from the FashionItems table for items that do not appear in this CTE.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert new fashion trends based on recent social media mentions.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), MentionCount INT); CREATE TABLE SocialMediaMentions (MentionID INT PRIMARY KEY, TrendName VARCHAR(50), MentionDate DATE); INSERT INTO FashionTrends (TrendID, TrendName, MentionCount) VALUES (1, 'Vintage', 500), (2, 'Minimalist', 300); INSERT INTO SocialMediaMentions (MentionID, TrendName, MentionDate) VALUES (1, 'Vintage', '2023-01-10'), (2, 'Boho', '2023-02-15'), (3, 'Minimalist', '2023-03-20'), (4, 'Boho', '2023-04-25'), (5, 'Streetwear', '2023-05-30');","WITH NewTrends AS (SELECT TrendName, COUNT(*) AS MentionCount FROM SocialMediaMentions WHERE MentionDate >= '2023-01-01' GROUP BY TrendName HAVING TrendName NOT IN (SELECT TrendName FROM FashionTrends)) INSERT INTO FashionTrends (TrendName, MentionCount) SELECT TrendName, MentionCount FROM NewTrends;",The query creates a CTE to identify new fashion trends based on social media mentions that are not already in the FashionTrends table. It then inserts these new trends into the FashionTrends table.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Analyze the average spending of consumers on sustainable fashion items in Europe.,"CREATE TABLE ConsumerPurchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, ItemID INT, PurchaseAmount DECIMAL, Region VARCHAR(50)); CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO ConsumerPurchases (PurchaseID, ConsumerID, ItemID, PurchaseAmount, Region) VALUES (1, 101, 1, 150.0, 'Europe'), (2, 102, 2, 200.0, 'Europe'), (3, 103, 1, 150.0, 'Europe'), (4, 104, 3, 100.0, 'Europe'), (5, 105, 2, 200.0, 'Europe'); INSERT INTO FashionItems (ItemID, ItemName, IsSustainable) VALUES (1, 'Denim Jacket', TRUE), (2, 'Leather Boots', TRUE), (3, 'Silk Scarf', FALSE);","WITH SustainablePurchases AS (SELECT CP.ConsumerID, CP.PurchaseAmount FROM ConsumerPurchases CP JOIN FashionItems FI ON CP.ItemID = FI.ItemID WHERE FI.IsSustainable = TRUE AND CP.Region = 'Europe') SELECT ConsumerID, AVG(PurchaseAmount) AS AvgSpending FROM SustainablePurchases GROUP BY ConsumerID;",The query creates a CTE to identify purchases of sustainable fashion items in Europe. It then calculates the average spending per consumer on these items.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the crop yield data to reflect the latest harvest figures and then display the average yield per crop type for each region.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); CREATE TABLE HarvestUpdates (CropID INT PRIMARY KEY, NewYield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 300.5), (2, 'Corn', 'Europe', 250.0), (3, 'Rice', 'Asia', 400.0), (4, 'Soybean', 'South America', 350.0), (5, 'Barley', 'Australia', 200.0); INSERT INTO HarvestUpdates (CropID, NewYield) VALUES (1, 320.0), (2, 260.0), (3, 410.0), (4, 360.0), (5, 210.0);","UPDATE CropYields SET Yield = (SELECT NewYield FROM HarvestUpdates WHERE CropYields.CropID = HarvestUpdates.CropID); SELECT Region, CropName, AVG(Yield) AS AvgYield FROM CropYields GROUP BY Region, CropName;","The query first updates the CropYields table with the new yield values from the HarvestUpdates table. Then, it calculates the average yield per crop type for each region by grouping the data by Region and CropName and using the AVG function."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert new farming practice data and then pivot the data to show the number of farms using each practice by region.,"CREATE TABLE FarmingPractices (FarmID INT PRIMARY KEY, Region VARCHAR(50), Practice VARCHAR(50)); CREATE TABLE NewPractices (FarmID INT PRIMARY KEY, Region VARCHAR(50), Practice VARCHAR(50)); INSERT INTO FarmingPractices (FarmID, Region, Practice) VALUES (1, 'North America', 'Organic'), (2, 'Europe', 'Conventional'), (3, 'Asia', 'Sustainable'), (4, 'South America', 'Organic'), (5, 'Australia', 'Conventional'); INSERT INTO NewPractices (FarmID, Region, Practice) VALUES (6, 'North America', 'Sustainable'), (7, 'Europe', 'Organic'), (8, 'Asia', 'Conventional'), (9, 'South America', 'Sustainable'), (10, 'Australia', 'Organic');","INSERT INTO FarmingPractices (FarmID, Region, Practice) SELECT FarmID, Region, Practice FROM NewPractices; SELECT Region, [Organic], [Conventional], [Sustainable] FROM (SELECT Region, Practice, COUNT(*) AS Count FROM FarmingPractices GROUP BY Region, Practice) AS SourceTable PIVOT (SUM(Count) FOR Practice IN ([Organic], [Conventional], [Sustainable])) AS PivotTable;","The query first inserts new farming practice data from the NewPractices table into the FarmingPractices table. Then, it pivots the data to show the number of farms using each practice by region by counting the occurrences of each practice and using the PIVOT function."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Delete outdated supply chain records and then unpivot the data to show each supply chain stage for each product.,"CREATE TABLE SupplyChain (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Stage1 VARCHAR(50), Stage2 VARCHAR(50), Stage3 VARCHAR(50)); CREATE TABLE OutdatedRecords (ProductID INT PRIMARY KEY); INSERT INTO SupplyChain (ProductID, ProductName, Stage1, Stage2, Stage3) VALUES (1, 'Wheat', 'Harvested', 'Processed', 'Shipped'), (2, 'Corn', 'Harvested', 'Processed', 'Shipped'), (3, 'Rice', 'Harvested', 'Processed', 'Shipped'), (4, 'Soybean', 'Harvested', 'Processed', 'Shipped'), (5, 'Barley', 'Harvested', 'Processed', 'Shipped'); INSERT INTO OutdatedRecords (ProductID) VALUES (2), (4);","DELETE FROM SupplyChain WHERE ProductID IN (SELECT ProductID FROM OutdatedRecords); SELECT ProductID, ProductName, Stage, Status FROM (SELECT ProductID, ProductName, Stage1, Stage2, Stage3 FROM SupplyChain) AS SourceTable UNPIVOT (Status FOR Stage IN (Stage1, Stage2, Stage3)) AS UnpivotTable;","The query first deletes outdated supply chain records from the SupplyChain table based on the ProductID values in the OutdatedRecords table. Then, it unpivots the remaining data to show each supply chain stage for each product by transforming the Stage1, Stage2, and Stage3 columns into rows using the UNPIVOT function."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert new global food security initiative data and then display the total number of initiatives by country and type.,"CREATE TABLE FoodSecurityInitiatives (InitiativeID INT PRIMARY KEY, Country VARCHAR(50), InitiativeType VARCHAR(50)); CREATE TABLE NewInitiatives (InitiativeID INT PRIMARY KEY, Country VARCHAR(50), InitiativeType VARCHAR(50)); INSERT INTO FoodSecurityInitiatives (InitiativeID, Country, InitiativeType) VALUES (1, 'USA', 'Nutrition'), (2, 'UK', 'Sustainability'), (3, 'India', 'Nutrition'), (4, 'Brazil', 'Sustainability'), (5, 'Australia', 'Nutrition'); INSERT INTO NewInitiatives (InitiativeID, Country, InitiativeType) VALUES (6, 'USA', 'Sustainability'), (7, 'UK', 'Nutrition'), (8, 'India', 'Sustainability'), (9, 'Brazil', 'Nutrition'), (10, 'Australia', 'Sustainability');","INSERT INTO FoodSecurityInitiatives (InitiativeID, Country, InitiativeType) SELECT InitiativeID, Country, InitiativeType FROM NewInitiatives; SELECT Country, InitiativeType, COUNT(*) AS TotalInitiatives FROM FoodSecurityInitiatives GROUP BY Country, InitiativeType;","The query first inserts new global food security initiative data from the NewInitiatives table into the FoodSecurityInitiatives table. Then, it calculates the total number of initiatives by country and type by grouping the data by Country and InitiativeType and using the COUNT function."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the farming equipment data to reflect new purchases and then pivot the data to show the total number of each equipment type by farm.,"CREATE TABLE FarmingEquipment (FarmID INT PRIMARY KEY, Tractor INT, Harvester INT, Plow INT); CREATE TABLE EquipmentUpdates (FarmID INT PRIMARY KEY, Tractor INT, Harvester INT, Plow INT); INSERT INTO FarmingEquipment (FarmID, Tractor, Harvester, Plow) VALUES (1, 5, 3, 2), (2, 4, 2, 3), (3, 6, 4, 1), (4, 3, 5, 2), (5, 7, 3, 4); INSERT INTO EquipmentUpdates (FarmID, Tractor, Harvester, Plow) VALUES (1, 6, 4, 3), (2, 5, 3, 4), (3, 7, 5, 2), (4, 4, 6, 3), (5, 8, 4, 5);","UPDATE FarmingEquipment SET Tractor = (SELECT Tractor FROM EquipmentUpdates WHERE FarmingEquipment.FarmID = EquipmentUpdates.FarmID), Harvester = (SELECT Harvester FROM EquipmentUpdates WHERE FarmingEquipment.FarmID = EquipmentUpdates.FarmID), Plow = (SELECT Plow FROM EquipmentUpdates WHERE FarmingEquipment.FarmID = EquipmentUpdates.FarmID); SELECT FarmID, [Tractor], [Harvester], [Plow] FROM (SELECT FarmID, 'Tractor' AS EquipmentType, Tractor AS Quantity FROM FarmingEquipment UNION ALL SELECT FarmID, 'Harvester' AS EquipmentType, Harvester AS Quantity FROM FarmingEquipment UNION ALL SELECT FarmID, 'Plow' AS EquipmentType, Plow AS Quantity FROM FarmingEquipment) AS SourceTable PIVOT (SUM(Quantity) FOR EquipmentType IN ([Tractor], [Harvester], [Plow])) AS PivotTable;","The query first updates the FarmingEquipment table with new equipment quantities from the EquipmentUpdates table. Then, it pivots the data to show the total number of each equipment type by farm by transforming the Tractor, Harvester, and Plow columns into rows and using the PIVOT function."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 3 best-selling electric vehicle models in each region for the year 2022.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleYear INT, UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, SaleYear, UnitsSold) VALUES (1, 'Model X', 'North America', 2022, 5000), (2, 'Model Y', 'Europe', 2022, 4500), (3, 'Model 3', 'Asia', 2022, 6000), (4, 'Leaf', 'North America', 2022, 3000), (5, 'Bolt', 'Europe', 2022, 3500);","WITH RankedSales AS (SELECT ModelName, Region, UnitsSold, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY UnitsSold DESC) AS Rank FROM VehicleSales WHERE SaleYear = 2022) SELECT ModelName, Region, UnitsSold FROM RankedSales WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank electric vehicle models based on their units sold in each region for the year 2022. It then selects the top 3 best-selling models in each region using the ROW_NUMBER function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Retrieve the average CO2 emissions for each vehicle model and rank them in ascending order.,"CREATE TABLE VehicleEmissions (EmissionID INT PRIMARY KEY, ModelName VARCHAR(50), CO2Emissions DECIMAL); INSERT INTO VehicleEmissions (EmissionID, ModelName, CO2Emissions) VALUES (1, 'Model S', 120.5), (2, 'Model 3', 118.0), (3, 'Leaf', 110.0), (4, 'Bolt', 115.7), (5, 'Prius', 95.0);","WITH RankedEmissions AS (SELECT ModelName, CO2Emissions, RANK() OVER (ORDER BY CO2Emissions ASC) AS Rank FROM VehicleEmissions) SELECT ModelName, CO2Emissions FROM RankedEmissions ORDER BY Rank;",The query creates a common table expression (CTE) to rank vehicle models based on their CO2 emissions in ascending order. It then selects and orders the models by their rank using the RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Identify the top 5 regions with the highest average vehicle sales in 2021.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleYear INT, UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, SaleYear, UnitsSold) VALUES (1, 'Model X', 'North America', 2021, 5000), (2, 'Model Y', 'Europe', 2021, 4500), (3, 'Model 3', 'Asia', 2021, 6000), (4, 'Leaf', 'North America', 2021, 3000), (5, 'Bolt', 'Europe', 2021, 3500);","WITH AvgSales AS (SELECT Region, AVG(UnitsSold) AS AvgUnitsSold FROM VehicleSales WHERE SaleYear = 2021 GROUP BY Region), RankedRegions AS (SELECT Region, AvgUnitsSold, RANK() OVER (ORDER BY AvgUnitsSold DESC) AS Rank FROM AvgSales) SELECT Region, AvgUnitsSold FROM RankedRegions WHERE Rank <= 5;",The query first calculates the average units sold per region for the year 2021 using a common table expression (CTE). It then ranks these regions based on their average sales and selects the top 5 regions using the RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,List the top 3 vehicle models with the highest increase in sales from 2020 to 2021.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleYear INT, UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, SaleYear, UnitsSold) VALUES (1, 'Model X', 'North America', 2020, 4000), (2, 'Model X', 'North America', 2021, 5000), (3, 'Model Y', 'Europe', 2020, 3000), (4, 'Model Y', 'Europe', 2021, 4500), (5, 'Model 3', 'Asia', 2020, 5000), (6, 'Model 3', 'Asia', 2021, 6000);","WITH SalesGrowth AS (SELECT ModelName, (SUM(CASE WHEN SaleYear = 2021 THEN UnitsSold ELSE 0 END) - SUM(CASE WHEN SaleYear = 2020 THEN UnitsSold ELSE 0 END)) AS SalesIncrease FROM VehicleSales GROUP BY ModelName), RankedModels AS (SELECT ModelName, SalesIncrease, RANK() OVER (ORDER BY SalesIncrease DESC) AS Rank FROM SalesGrowth) SELECT ModelName, SalesIncrease FROM RankedModels WHERE Rank <= 3;",The query calculates the increase in sales for each vehicle model from 2020 to 2021 using a common table expression (CTE). It then ranks these models based on their sales increase and selects the top 3 models using the RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Determine the top 5 most popular vehicle models based on the total units sold across all regions in 2022.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleYear INT, UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, SaleYear, UnitsSold) VALUES (1, 'Model X', 'North America', 2022, 5000), (2, 'Model Y', 'Europe', 2022, 4500), (3, 'Model 3', 'Asia', 2022, 6000), (4, 'Leaf', 'North America', 2022, 3000), (5, 'Bolt', 'Europe', 2022, 3500);","WITH TotalSales AS (SELECT ModelName, SUM(UnitsSold) AS TotalUnitsSold FROM VehicleSales WHERE SaleYear = 2022 GROUP BY ModelName), RankedModels AS (SELECT ModelName, TotalUnitsSold, RANK() OVER (ORDER BY TotalUnitsSold DESC) AS Rank FROM TotalSales) SELECT ModelName, TotalUnitsSold FROM RankedModels WHERE Rank <= 5;",The query calculates the total units sold for each vehicle model across all regions for the year 2022 using a common table expression (CTE). It then ranks these models based on their total units sold and selects the top 5 models using the RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Find the top 5 most popular sustainable fashion brands in Europe and North America, excluding those brands that are only popular in one region.","CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), PopularityScore DECIMAL); INSERT INTO FashionBrands (BrandID, BrandName, Region, PopularityScore) VALUES (1, 'EcoWear', 'Europe', 85.5), (2, 'GreenStyle', 'North America', 90.0), (3, 'SustainableChic', 'Europe', 88.0), (4, 'EcoWear', 'North America', 87.5), (5, 'GreenStyle', 'Europe', 80.0);","WITH PopularBrands AS (SELECT BrandName, AVG(PopularityScore) AS AvgPopularity FROM FashionBrands WHERE Region IN ('Europe', 'North America') GROUP BY BrandName HAVING COUNT(DISTINCT Region) = 2) SELECT BrandName, AvgPopularity FROM PopularBrands ORDER BY AvgPopularity DESC LIMIT 5;",The query first creates a common table expression (CTE) to find brands that are popular in both Europe and North America by averaging their popularity scores. It then selects the top 5 brands based on the average popularity score.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Update the popularity score of brands that have launched a new sustainable collection in the last year by 10% in the global fashion industry database.,"CREATE TABLE BrandCollections (CollectionID INT PRIMARY KEY, BrandID INT, CollectionName VARCHAR(50), LaunchDate DATE); INSERT INTO BrandCollections (CollectionID, BrandID, CollectionName, LaunchDate) VALUES (1, 1, 'EcoWear Spring', '2022-03-01'), (2, 2, 'GreenStyle Summer', '2022-06-15'), (3, 3, 'SustainableChic Fall', '2021-09-10');","UPDATE FashionBrands SET PopularityScore = PopularityScore * 1.1 WHERE BrandID IN (SELECT BrandID FROM BrandCollections WHERE LaunchDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",The query updates the popularity score of brands by 10% if they have launched a new collection in the last year. It uses a subquery to find the relevant BrandIDs from the BrandCollections table.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Delete records of fashion brands that have not launched any new collection in the past two years from the global fashion industry database.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), PopularityScore DECIMAL); CREATE TABLE BrandCollections (CollectionID INT PRIMARY KEY, BrandID INT, CollectionName VARCHAR(50), LaunchDate DATE); INSERT INTO BrandCollections (CollectionID, BrandID, CollectionName, LaunchDate) VALUES (1, 1, 'EcoWear Spring', '2022-03-01'), (2, 2, 'GreenStyle Summer', '2022-06-15'), (3, 3, 'SustainableChic Fall', '2021-09-10');","DELETE FROM FashionBrands WHERE BrandID NOT IN (SELECT BrandID FROM BrandCollections WHERE LaunchDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR));",The query deletes records from the FashionBrands table for brands that have not launched any new collection in the past two years. It uses a subquery to find the relevant BrandIDs from the BrandCollections table.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert new records of sustainable fashion brands and their initial popularity scores into the global fashion industry database.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), PopularityScore DECIMAL);","INSERT INTO FashionBrands (BrandID, BrandName, Region, PopularityScore) VALUES (6, 'EcoTrend', 'Europe', 75.0), (7, 'GreenFashion', 'North America', 82.0), (8, 'SustainableElegance', 'Asia', 78.5);","The query inserts new records into the FashionBrands table with the specified BrandID, BrandName, Region, and initial PopularityScore."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Find the common fashion trends in Europe and Asia that are not popular in North America.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), PopularityScore DECIMAL); INSERT INTO FashionTrends (TrendID, TrendName, Region, PopularityScore) VALUES (1, 'Vintage', 'Europe', 85.0), (2, 'Minimalist', 'Asia', 90.0), (3, 'Vintage', 'North America', 70.0), (4, 'Boho', 'Europe', 88.0), (5, 'Boho', 'Asia', 87.0);","SELECT TrendName FROM FashionTrends WHERE Region IN ('Europe', 'Asia') AND TrendName NOT IN (SELECT TrendName FROM FashionTrends WHERE Region = 'North America');",The query selects fashion trends that are common in Europe and Asia but not popular in North America by using a subquery to exclude trends found in North America.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Retrieve the total government spending by category for each year and display it in a pivot table format.,"CREATE TABLE GovernmentSpending (Year INT, Category VARCHAR(50), Amount DECIMAL); INSERT INTO GovernmentSpending (Year, Category, Amount) VALUES (2020, 'Healthcare', 5000000), (2020, 'Education', 3000000), (2020, 'Defense', 7000000), (2021, 'Healthcare', 5200000), (2021, 'Education', 3100000), (2021, 'Defense', 7100000);","SELECT Year, SUM(CASE WHEN Category = 'Healthcare' THEN Amount ELSE 0 END) AS Healthcare, SUM(CASE WHEN Category = 'Education' THEN Amount ELSE 0 END) AS Education, SUM(CASE WHEN Category = 'Defense' THEN Amount ELSE 0 END) AS Defense FROM GovernmentSpending GROUP BY Year;",The query retrieves the total spending for each category by year and displays it in a pivot table format by using conditional aggregation with CASE statements.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Show the average approval rating of different legislative bills by region and year.,"CREATE TABLE LegislativeApproval (BillID INT, Region VARCHAR(50), Year INT, ApprovalRating DECIMAL); INSERT INTO LegislativeApproval (BillID, Region, Year, ApprovalRating) VALUES (1, 'North', 2020, 75.5), (2, 'South', 2020, 65.0), (3, 'East', 2020, 80.0), (1, 'North', 2021, 78.0), (2, 'South', 2021, 66.5), (3, 'East', 2021, 82.0);","SELECT Year, Region, AVG(ApprovalRating) AS AvgApprovalRating FROM LegislativeApproval GROUP BY Year, Region;","The query calculates the average approval rating for each legislative bill by region and year, grouping the results accordingly."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,"List the number of citizens in each age group for each region and year, and display the data in a pivot table format.","CREATE TABLE CitizenDemographics (Region VARCHAR(50), Year INT, AgeGroup VARCHAR(50), Population INT); INSERT INTO CitizenDemographics (Region, Year, AgeGroup, Population) VALUES ('North', 2020, '0-18', 100000), ('North', 2020, '19-35', 150000), ('North', 2020, '36-60', 200000), ('South', 2020, '0-18', 120000), ('South', 2020, '19-35', 140000), ('South', 2020, '36-60', 180000);","SELECT Year, Region, SUM(CASE WHEN AgeGroup = '0-18' THEN Population ELSE 0 END) AS Age_0_18, SUM(CASE WHEN AgeGroup = '19-35' THEN Population ELSE 0 END) AS Age_19_35, SUM(CASE WHEN AgeGroup = '36-60' THEN Population ELSE 0 END) AS Age_36_60 FROM CitizenDemographics GROUP BY Year, Region;","The query retrieves the number of citizens in each age group for each region and year, displaying the data in a pivot table format by using conditional aggregation with CASE statements."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the total number of legislative bills passed each year and display the data in a pivot table format.,"CREATE TABLE LegislativeBills (BillID INT, Year INT, Status VARCHAR(50)); INSERT INTO LegislativeBills (BillID, Year, Status) VALUES (1, 2020, 'Passed'), (2, 2020, 'Failed'), (3, 2020, 'Passed'), (4, 2021, 'Passed'), (5, 2021, 'Failed');","SELECT Year, SUM(CASE WHEN Status = 'Passed' THEN 1 ELSE 0 END) AS PassedBills, SUM(CASE WHEN Status = 'Failed' THEN 1 ELSE 0 END) AS FailedBills FROM LegislativeBills GROUP BY Year;","The query calculates the total number of legislative bills passed and failed each year, displaying the data in a pivot table format by using conditional aggregation with CASE statements."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,"Retrieve the effectiveness scores of different governance programs by region and year, and display the data in a pivot table format.","CREATE TABLE GovernanceEffectiveness (ProgramID INT, Region VARCHAR(50), Year INT, EffectivenessScore DECIMAL); INSERT INTO GovernanceEffectiveness (ProgramID, Region, Year, EffectivenessScore) VALUES (1, 'North', 2020, 85.0), (2, 'South', 2020, 78.5), (3, 'East', 2020, 82.0), (1, 'North', 2021, 87.0), (2, 'South', 2021, 80.0), (3, 'East', 2021, 84.0);","SELECT Year, Region, AVG(EffectivenessScore) AS AvgEffectivenessScore FROM GovernanceEffectiveness GROUP BY Year, Region;","The query retrieves the average effectiveness scores of different governance programs by region and year, displaying the data in a pivot table format by using conditional aggregation with CASE statements."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 most popular fashion items sold in the last quarter.,"CREATE TABLE Sales (SaleID INT PRIMARY KEY, ItemID INT, SaleDate DATE, Quantity INT); CREATE TABLE Items (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Category VARCHAR(50)); INSERT INTO Sales (SaleID, ItemID, SaleDate, Quantity) VALUES (1, 101, '2023-07-15', 10), (2, 102, '2023-08-20', 15), (3, 103, '2023-09-10', 20), (4, 101, '2023-09-25', 5), (5, 104, '2023-07-30', 8);","WITH LastQuarterSales AS (SELECT ItemID, SUM(Quantity) AS TotalQuantity FROM Sales WHERE SaleDate >= '2023-07-01' AND SaleDate <= '2023-09-30' GROUP BY ItemID), RankedItems AS (SELECT ItemID, TotalQuantity, DENSE_RANK() OVER (ORDER BY TotalQuantity DESC) AS Rank FROM LastQuarterSales) SELECT Items.ItemName, RankedItems.TotalQuantity FROM RankedItems JOIN Items ON RankedItems.ItemID = Items.ItemID WHERE Rank <= 5;","The query first filters sales data to include only the last quarter, then sums the quantities sold for each item. It ranks the items based on total quantity sold and selects the top 5 most popular items by joining with the Items table to get item names."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Show the average price of sustainable fashion items by category.,"CREATE TABLE SustainableItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Category VARCHAR(50), Price DECIMAL, Sustainable BOOLEAN); INSERT INTO SustainableItems (ItemID, ItemName, Category, Price, Sustainable) VALUES (1, 'Eco T-Shirt', 'Tops', 25.0, TRUE), (2, 'Organic Jeans', 'Bottoms', 45.0, TRUE), (3, 'Recycled Jacket', 'Outerwear', 60.0, TRUE), (4, 'Regular T-Shirt', 'Tops', 20.0, FALSE), (5, 'Vegan Shoes', 'Footwear', 75.0, TRUE);","WITH SustainableCategories AS (SELECT Category, AVG(Price) AS AvgPrice FROM SustainableItems WHERE Sustainable = TRUE GROUP BY Category) SELECT Category, AvgPrice FROM SustainableCategories;","The query calculates the average price of items marked as sustainable, grouped by category, and then selects the category and average price."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",List the top 3 regions with the highest sales revenue for fashion items.,"CREATE TABLE Sales (SaleID INT PRIMARY KEY, ItemID INT, SaleDate DATE, Quantity INT, Region VARCHAR(50)); CREATE TABLE Items (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Price DECIMAL); INSERT INTO Sales (SaleID, ItemID, SaleDate, Quantity, Region) VALUES (1, 101, '2023-07-15', 10, 'North America'), (2, 102, '2023-08-20', 15, 'Europe'), (3, 103, '2023-09-10', 20, 'Asia'), (4, 101, '2023-09-25', 5, 'North America'), (5, 104, '2023-07-30', 8, 'Europe'); INSERT INTO Items (ItemID, ItemName, Price) VALUES (101, 'T-Shirt', 20.0), (102, 'Jeans', 40.0), (103, 'Jacket', 60.0), (104, 'Shoes', 50.0);","WITH RevenueByRegion AS (SELECT Region, SUM(Sales.Quantity * Items.Price) AS TotalRevenue FROM Sales JOIN Items ON Sales.ItemID = Items.ItemID GROUP BY Region), RankedRegions AS (SELECT Region, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM RevenueByRegion) SELECT Region, TotalRevenue FROM RankedRegions WHERE Rank <= 3;","The query calculates the total revenue for each region by multiplying the quantity sold by the item price, ranks the regions by total revenue, and selects the top 3 regions."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 most common fashion categories purchased by consumers.,"CREATE TABLE Sales (SaleID INT PRIMARY KEY, ItemID INT, SaleDate DATE, Quantity INT); CREATE TABLE Items (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Category VARCHAR(50)); INSERT INTO Sales (SaleID, ItemID, SaleDate, Quantity) VALUES (1, 101, '2023-07-15', 10), (2, 102, '2023-08-20', 15), (3, 103, '2023-09-10', 20), (4, 101, '2023-09-25', 5), (5, 104, '2023-07-30', 8); INSERT INTO Items (ItemID, ItemName, Category) VALUES (101, 'T-Shirt', 'Tops'), (102, 'Jeans', 'Bottoms'), (103, 'Jacket', 'Outerwear'), (104, 'Shoes', 'Footwear');","WITH CategoryCounts AS (SELECT Items.Category, SUM(Sales.Quantity) AS TotalQuantity FROM Sales JOIN Items ON Sales.ItemID = Items.ItemID GROUP BY Items.Category), RankedCategories AS (SELECT Category, TotalQuantity, DENSE_RANK() OVER (ORDER BY TotalQuantity DESC) AS Rank FROM CategoryCounts) SELECT Category, TotalQuantity FROM RankedCategories WHERE Rank <= 5;","The query sums the quantities sold for each category, ranks the categories based on total quantity sold, and selects the top 5 most common categories purchased by consumers."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the average consumer spending on fashion items per month.,"CREATE TABLE Sales (SaleID INT PRIMARY KEY, ItemID INT, SaleDate DATE, Quantity INT); CREATE TABLE Items (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Price DECIMAL); INSERT INTO Sales (SaleID, ItemID, SaleDate, Quantity) VALUES (1, 101, '2023-07-15', 10), (2, 102, '2023-08-20', 15), (3, 103, '2023-09-10', 20), (4, 101, '2023-09-25', 5), (5, 104, '2023-07-30', 8); INSERT INTO Items (ItemID, ItemName, Price) VALUES (101, 'T-Shirt', 20.0), (102, 'Jeans', 40.0), (103, 'Jacket', 60.0), (104, 'Shoes', 50.0);","WITH MonthlySpending AS (SELECT DATE_TRUNC('month', SaleDate) AS Month, SUM(Sales.Quantity * Items.Price) AS TotalSpending FROM Sales JOIN Items ON Sales.ItemID = Items.ItemID GROUP BY DATE_TRUNC('month', SaleDate)) SELECT Month, AVG(TotalSpending) AS AvgSpending FROM MonthlySpending GROUP BY Month;","The query calculates the total spending per month by multiplying the quantity sold by the item price, groups the results by month, and then calculates the average spending per month."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the most popular fashion brands in different regions and then display the top 3 brands in terms of popularity.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), PopularityScore INT); INSERT INTO FashionBrands (BrandID, BrandName, Region, PopularityScore) VALUES (1, 'Gucci', 'Europe', 95), (2, 'Chanel', 'North America', 90), (3, 'Louis Vuitton', 'Asia', 85), (4, 'Prada', 'Europe', 80), (5, 'Hermes', 'North America', 75);","WITH RankedBrands AS (SELECT BrandName, PopularityScore, DENSE_RANK() OVER (ORDER BY PopularityScore DESC) AS Rank FROM FashionBrands) SELECT BrandName, PopularityScore FROM RankedBrands WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank fashion brands based on their popularity score in descending order. It then selects the top 3 most popular brands using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the average spending on sustainable fashion by consumers in different regions and then display the top 2 regions with the highest average spending.,"CREATE TABLE SustainableFashionSpending (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), AvgSpending DECIMAL); INSERT INTO SustainableFashionSpending (RegionID, RegionName, AvgSpending) VALUES (1, 'North America', 150.75), (2, 'Europe', 200.50), (3, 'Asia', 100.25), (4, 'South America', 120.00);","WITH RankedRegions AS (SELECT RegionName, AvgSpending, DENSE_RANK() OVER (ORDER BY AvgSpending DESC) AS Rank FROM SustainableFashionSpending) SELECT RegionName, AvgSpending FROM RankedRegions WHERE Rank <= 2;",The query creates a common table expression (CTE) to rank regions based on their average spending on sustainable fashion in descending order. It then selects the top 2 regions with the highest average spending using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the number of fashion shows held in different cities and then display the top 3 cities with the most fashion shows.,"CREATE TABLE FashionShows (CityID INT PRIMARY KEY, CityName VARCHAR(50), NumberOfShows INT); INSERT INTO FashionShows (CityID, CityName, NumberOfShows) VALUES (1, 'Paris', 50), (2, 'New York', 45), (3, 'Milan', 40), (4, 'London', 35), (5, 'Tokyo', 30);","WITH RankedCities AS (SELECT CityName, NumberOfShows, DENSE_RANK() OVER (ORDER BY NumberOfShows DESC) AS Rank FROM FashionShows) SELECT CityName, NumberOfShows FROM RankedCities WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank cities based on the number of fashion shows held in descending order. It then selects the top 3 cities with the most fashion shows using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the most common materials used in sustainable fashion and then display the top 3 materials.,"CREATE TABLE SustainableMaterials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(50), UsageFrequency INT); INSERT INTO SustainableMaterials (MaterialID, MaterialName, UsageFrequency) VALUES (1, 'Organic Cotton', 100), (2, 'Recycled Polyester', 90), (3, 'Hemp', 80), (4, 'Bamboo', 70), (5, 'Tencel', 60);","WITH RankedMaterials AS (SELECT MaterialName, UsageFrequency, DENSE_RANK() OVER (ORDER BY UsageFrequency DESC) AS Rank FROM SustainableMaterials) SELECT MaterialName, UsageFrequency FROM RankedMaterials WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank materials based on their usage frequency in sustainable fashion in descending order. It then selects the top 3 most common materials using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the average price of luxury fashion items in different regions and then display the top 2 regions with the highest average price.,"CREATE TABLE LuxuryFashionPrices (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), AvgPrice DECIMAL); INSERT INTO LuxuryFashionPrices (RegionID, RegionName, AvgPrice) VALUES (1, 'North America', 1200.50), (2, 'Europe', 1500.75), (3, 'Asia', 1100.25), (4, 'South America', 900.00);","WITH RankedRegions AS (SELECT RegionName, AvgPrice, DENSE_RANK() OVER (ORDER BY AvgPrice DESC) AS Rank FROM LuxuryFashionPrices) SELECT RegionName, AvgPrice FROM RankedRegions WHERE Rank <= 2;",The query creates a common table expression (CTE) to rank regions based on the average price of luxury fashion items in descending order. It then selects the top 2 regions with the highest average price using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the latest innovation trends in the AI industry and roll back if any error occurs during the transaction.,"CREATE TABLE AI_Trends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), Description TEXT, DateReported DATE); INSERT INTO AI_Trends (TrendID, TrendName, Description, DateReported) VALUES (1, 'AI Ethics', 'Focus on ethical AI practices', '2023-01-15'), (2, 'AI in Healthcare', 'AI applications in medical diagnostics', '2023-02-10'), (3, 'AI in Finance', 'AI for fraud detection', '2023-03-05');","BEGIN TRANSACTION; SELECT TrendName, Description, DateReported FROM AI_Trends WHERE DateReported = (SELECT MAX(DateReported) FROM AI_Trends); ROLLBACK;","The query starts a transaction, retrieves the latest reported AI trend by finding the maximum date in the AI_Trends table, and then rolls back the transaction to ensure no changes are committed."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 3 emerging technologies in the renewable energy sector and commit the transaction.,"CREATE TABLE Renewable_Tech (TechID INT PRIMARY KEY, TechName VARCHAR(100), ImpactScore DECIMAL, DateIntroduced DATE); INSERT INTO Renewable_Tech (TechID, TechName, ImpactScore, DateIntroduced) VALUES (1, 'Solar Panels', 9.5, '2022-05-20'), (2, 'Wind Turbines', 8.7, '2022-06-15'), (3, 'Hydrogen Fuel Cells', 9.0, '2022-07-10'), (4, 'Battery Storage', 8.9, '2022-08-05');","BEGIN TRANSACTION; WITH RankedTech AS (SELECT TechName, ImpactScore, DENSE_RANK() OVER (ORDER BY ImpactScore DESC) AS Rank FROM Renewable_Tech) SELECT TechName, ImpactScore FROM RankedTech WHERE Rank <= 3; COMMIT;","The query begins a transaction, ranks renewable technologies by their impact score using a common table expression (CTE), selects the top 3 technologies, and commits the transaction."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the most recent market trends in blockchain technology and ensure the transaction is committed.,"CREATE TABLE Blockchain_Trends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), Description TEXT, DateReported DATE); INSERT INTO Blockchain_Trends (TrendID, TrendName, Description, DateReported) VALUES (1, 'DeFi', 'Decentralized Finance', '2023-01-05'), (2, 'NFTs', 'Non-Fungible Tokens', '2023-02-15'), (3, 'Smart Contracts', 'Automated contract execution', '2023-03-10');","BEGIN TRANSACTION; SELECT TrendName, Description, DateReported FROM Blockchain_Trends WHERE DateReported = (SELECT MAX(DateReported) FROM Blockchain_Trends); COMMIT;","The query starts a transaction, retrieves the most recent blockchain trend by finding the maximum date in the Blockchain_Trends table, and then commits the transaction."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the top 5 innovations in the autonomous vehicle industry and roll back if any error occurs.,"CREATE TABLE Autonomous_Vehicles (InnovationID INT PRIMARY KEY, InnovationName VARCHAR(100), ImpactScore DECIMAL, DateIntroduced DATE); INSERT INTO Autonomous_Vehicles (InnovationID, InnovationName, ImpactScore, DateIntroduced) VALUES (1, 'Lidar Sensors', 9.8, '2022-01-10'), (2, 'AI Driving Algorithms', 9.7, '2022-02-20'), (3, 'Vehicle-to-Everything (V2X)', 9.5, '2022-03-15'), (4, 'Advanced Driver Assistance Systems (ADAS)', 9.4, '2022-04-10'), (5, 'Autonomous Fleet Management', 9.3, '2022-05-05');","BEGIN TRANSACTION; WITH RankedInnovations AS (SELECT InnovationName, ImpactScore, DENSE_RANK() OVER (ORDER BY ImpactScore DESC) AS Rank FROM Autonomous_Vehicles) SELECT InnovationName, ImpactScore FROM RankedInnovations WHERE Rank <= 5; ROLLBACK;","The query begins a transaction, ranks autonomous vehicle innovations by their impact score using a common table expression (CTE), selects the top 5 innovations, and rolls back the transaction to ensure no changes are committed."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 3 market disruptions in the fintech industry and commit the transaction.,"CREATE TABLE Fintech_Disruptions (DisruptionID INT PRIMARY KEY, DisruptionName VARCHAR(100), ImpactScore DECIMAL, DateReported DATE); INSERT INTO Fintech_Disruptions (DisruptionID, DisruptionName, ImpactScore, DateReported) VALUES (1, 'Blockchain Payments', 9.6, '2022-03-01'), (2, 'Robo-Advisors', 9.4, '2022-04-15'), (3, 'Peer-to-Peer Lending', 9.2, '2022-05-20'), (4, 'Insurtech', 9.1, '2022-06-10');","BEGIN TRANSACTION; WITH RankedDisruptions AS (SELECT DisruptionName, ImpactScore, DENSE_RANK() OVER (ORDER BY ImpactScore DESC) AS Rank FROM Fintech_Disruptions) SELECT DisruptionName, ImpactScore FROM RankedDisruptions WHERE Rank <= 3; COMMIT;","The query begins a transaction, ranks fintech disruptions by their impact score using a common table expression (CTE), selects the top 3 disruptions, and commits the transaction."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average crop yield per hectare for different crop types across various regions, and then display the top 5 regions with the highest average yield.","CREATE TABLE CropYield (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropType VARCHAR(50), AvgYieldPerHectare DECIMAL); INSERT INTO CropYield (RegionID, RegionName, CropType, AvgYieldPerHectare) VALUES (1, 'North America', 'Wheat', 3.5), (2, 'Europe', 'Corn', 4.2), (3, 'Asia', 'Rice', 5.0), (4, 'South America', 'Soybean', 3.8), (5, 'Africa', 'Maize', 2.9);","WITH RankedRegions AS (SELECT RegionName, AvgYieldPerHectare, DENSE_RANK() OVER (ORDER BY AvgYieldPerHectare DESC) AS Rank FROM CropYield) SELECT RegionName, AvgYieldPerHectare FROM RankedRegions WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank regions based on their average crop yield per hectare in descending order. It then selects the top 5 regions with the highest average yield using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the total production and export quantities for different crops and then display the top 5 crops with the highest export quantities.,"CREATE TABLE CropProduction (CropID INT PRIMARY KEY, CropName VARCHAR(50), TotalProduction INT, ExportQuantity INT); INSERT INTO CropProduction (CropID, CropName, TotalProduction, ExportQuantity) VALUES (1, 'Wheat', 500000, 200000), (2, 'Corn', 600000, 250000), (3, 'Rice', 700000, 300000), (4, 'Soybean', 400000, 150000), (5, 'Maize', 450000, 180000);","WITH RankedCrops AS (SELECT CropName, ExportQuantity, DENSE_RANK() OVER (ORDER BY ExportQuantity DESC) AS Rank FROM CropProduction) SELECT CropName, ExportQuantity FROM RankedCrops WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank crops based on their export quantities in descending order. It then selects the top 5 crops with the highest export quantities using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the details of farming practices and their impact on crop yield, and then display the top 5 practices with the highest positive impact.","CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), ImpactOnYield DECIMAL); INSERT INTO FarmingPractices (PracticeID, PracticeName, ImpactOnYield) VALUES (1, 'Crop Rotation', 1.2), (2, 'No-Till Farming', 1.5), (3, 'Organic Fertilizers', 1.3), (4, 'Precision Agriculture', 1.7), (5, 'Integrated Pest Management', 1.4);","WITH RankedPractices AS (SELECT PracticeName, ImpactOnYield, DENSE_RANK() OVER (ORDER BY ImpactOnYield DESC) AS Rank FROM FarmingPractices) SELECT PracticeName, ImpactOnYield FROM RankedPractices WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank farming practices based on their impact on crop yield in descending order. It then selects the top 5 practices with the highest positive impact using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the details of agricultural supply chain stages and their associated costs, and then display the top 5 stages with the highest costs.","CREATE TABLE SupplyChain (StageID INT PRIMARY KEY, StageName VARCHAR(50), AssociatedCost DECIMAL); INSERT INTO SupplyChain (StageID, StageName, AssociatedCost) VALUES (1, 'Production', 10000), (2, 'Processing', 15000), (3, 'Packaging', 12000), (4, 'Transportation', 18000), (5, 'Distribution', 14000);","WITH RankedStages AS (SELECT StageName, AssociatedCost, DENSE_RANK() OVER (ORDER BY AssociatedCost DESC) AS Rank FROM SupplyChain) SELECT StageName, AssociatedCost FROM RankedStages WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank supply chain stages based on their associated costs in descending order. It then selects the top 5 stages with the highest costs using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the details of global food security initiatives and their funding amounts, and then display the top 5 initiatives with the highest funding.","CREATE TABLE FoodSecurityInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(50), FundingAmount DECIMAL); INSERT INTO FoodSecurityInitiatives (InitiativeID, InitiativeName, FundingAmount) VALUES (1, 'Zero Hunger', 5000000), (2, 'Food for All', 3000000), (3, 'Sustainable Agriculture', 4000000), (4, 'Nutrition Improvement', 3500000), (5, 'Food Security Program', 4500000);","WITH RankedInitiatives AS (SELECT InitiativeName, FundingAmount, DENSE_RANK() OVER (ORDER BY FundingAmount DESC) AS Rank FROM FoodSecurityInitiatives) SELECT InitiativeName, FundingAmount FROM RankedInitiatives WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank food security initiatives based on their funding amounts in descending order. It then selects the top 5 initiatives with the highest funding using the DENSE_RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the top 3 most prescribed medications for patients over 60 years old, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(100)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, DatePrescribed DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));","BEGIN TRANSACTION; WITH PatientMedications AS (SELECT p.PatientID, p.Age, pr.MedicationID, m.MedicationName FROM Patients p JOIN Prescriptions pr ON p.PatientID = pr.PatientID JOIN Medications m ON pr.MedicationID = m.MedicationID WHERE p.Age > 60), RankedMedications AS (SELECT MedicationName, COUNT(*) AS PrescriptionCount, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM PatientMedications GROUP BY MedicationName) SELECT MedicationName, PrescriptionCount FROM RankedMedications WHERE Rank <= 3; COMMIT;","The query starts a transaction and retrieves the top 3 most prescribed medications for patients over 60 years old. It uses a common table expression (CTE) to join the Patients, Prescriptions, and Medications tables and filter patients over 60. Another CTE ranks the medications by prescription count using the RANK() window function. Finally, it selects the top 3 medications. The transaction is committed if successful."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 5 doctors with the highest number of successful treatments, and ensure the transaction is committed only if all operations succeed.","CREATE TABLE Doctors (DoctorID INT PRIMARY KEY, Name VARCHAR(100), Specialty VARCHAR(100)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(100), SuccessRate DECIMAL); CREATE TABLE PatientTreatments (PatientTreatmentID INT PRIMARY KEY, PatientID INT, DoctorID INT, TreatmentID INT, Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));","BEGIN TRANSACTION; WITH DoctorSuccess AS (SELECT d.DoctorID, d.Name, COUNT(*) AS SuccessfulTreatments FROM Doctors d JOIN PatientTreatments pt ON d.DoctorID = pt.DoctorID WHERE pt.Outcome = 'Successful' GROUP BY d.DoctorID, d.Name), RankedDoctors AS (SELECT DoctorID, Name, SuccessfulTreatments, RANK() OVER (ORDER BY SuccessfulTreatments DESC) AS Rank FROM DoctorSuccess) SELECT DoctorID, Name, SuccessfulTreatments FROM RankedDoctors WHERE Rank <= 5; COMMIT;","The query initiates a transaction and identifies the top 5 doctors with the highest number of successful treatments. It uses a common table expression (CTE) to join the Doctors and PatientTreatments tables, filtering for successful outcomes. Another CTE ranks the doctors by the number of successful treatments using the RANK() window function. Finally, it selects the top 5 doctors. The transaction is committed if all operations succeed."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average length of hospital stay for patients who underwent surgery, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE Surgeries (SurgeryID INT PRIMARY KEY, SurgeryName VARCHAR(100)); CREATE TABLE HospitalStays (StayID INT PRIMARY KEY, PatientID INT, SurgeryID INT, AdmissionDate DATE, DischargeDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (SurgeryID) REFERENCES Surgeries(SurgeryID));","BEGIN TRANSACTION; WITH SurgeryStays AS (SELECT hs.PatientID, hs.AdmissionDate, hs.DischargeDate, DATEDIFF(day, hs.AdmissionDate, hs.DischargeDate) AS LengthOfStay FROM HospitalStays hs JOIN Surgeries s ON hs.SurgeryID = s.SurgeryID), AverageStay AS (SELECT AVG(LengthOfStay) AS AvgLengthOfStay FROM SurgeryStays) SELECT AvgLengthOfStay FROM AverageStay; COMMIT;","The query starts a transaction and calculates the average length of hospital stay for patients who underwent surgery. It uses a common table expression (CTE) to join the HospitalStays and Surgeries tables and calculate the length of stay for each patient. Another CTE calculates the average length of stay. Finally, it selects the average length of stay. The transaction is committed if successful."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the top 3 most common side effects reported for a specific drug, and ensure the transaction is committed only if all operations succeed.","CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(100)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, SideEffectName VARCHAR(100)); CREATE TABLE DrugSideEffects (DrugSideEffectID INT PRIMARY KEY, DrugID INT, SideEffectID INT, FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID), FOREIGN KEY (SideEffectID) REFERENCES SideEffects(SideEffectID));","BEGIN TRANSACTION; WITH DrugEffects AS (SELECT d.DrugID, d.DrugName, se.SideEffectID, se.SideEffectName FROM Drugs d JOIN DrugSideEffects dse ON d.DrugID = dse.DrugID JOIN SideEffects se ON dse.SideEffectID = se.SideEffectID WHERE d.DrugName = 'SpecificDrug'), RankedEffects AS (SELECT SideEffectName, COUNT(*) AS EffectCount, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM DrugEffects GROUP BY SideEffectName) SELECT SideEffectName, EffectCount FROM RankedEffects WHERE Rank <= 3; COMMIT;","The query initiates a transaction and determines the top 3 most common side effects reported for a specific drug. It uses a common table expression (CTE) to join the Drugs, DrugSideEffects, and SideEffects tables and filter for the specific drug. Another CTE ranks the side effects by count using the RANK() window function. Finally, it selects the top 3 side effects. The transaction is committed if all operations succeed."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the top 5 patients with the highest number of hospital visits in the past year, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE HospitalVisits (VisitID INT PRIMARY KEY, PatientID INT, VisitDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","BEGIN TRANSACTION; WITH RecentVisits AS (SELECT PatientID, COUNT(*) AS VisitCount FROM HospitalVisits WHERE VisitDate >= DATEADD(year, -1, GETDATE()) GROUP BY PatientID), RankedPatients AS (SELECT PatientID, VisitCount, RANK() OVER (ORDER BY VisitCount DESC) AS Rank FROM RecentVisits) SELECT PatientID, VisitCount FROM RankedPatients WHERE Rank <= 5; COMMIT;","The query starts a transaction and lists the top 5 patients with the highest number of hospital visits in the past year. It uses a common table expression (CTE) to count the number of visits for each patient within the past year. Another CTE ranks the patients by visit count using the RANK() window function. Finally, it selects the top 5 patients. The transaction is committed if successful."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different movies across various regions, and then display the top 3 highest-grossing movies.","CREATE TABLE MovieRevenue (MovieID INT PRIMARY KEY, MovieName VARCHAR(100), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO MovieRevenue (MovieID, MovieName, Region, TotalRevenue) VALUES (1, 'Avengers: Endgame', 'North America', 858.4), (2, 'Avatar', 'Europe', 760.5), (3, 'Titanic', 'Asia', 690.2), (4, 'Star Wars: The Force Awakens', 'North America', 936.7), (5, 'Jurassic World', 'Europe', 652.3);","WITH RankedMovies AS (SELECT MovieName, SUM(TotalRevenue) AS TotalRevenue, DENSE_RANK() OVER (ORDER BY SUM(TotalRevenue) DESC) AS Rank FROM MovieRevenue GROUP BY MovieName) SELECT MovieName, TotalRevenue FROM RankedMovies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank movies based on their total revenue in descending order. It then selects the top 3 highest-grossing movies using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average viewership ratings for different TV shows across various regions, and then display the top 5 highest-rated shows.","CREATE TABLE TVShowRatings (ShowID INT PRIMARY KEY, ShowName VARCHAR(100), Region VARCHAR(50), AvgRating DECIMAL); INSERT INTO TVShowRatings (ShowID, ShowName, Region, AvgRating) VALUES (1, 'Breaking Bad', 'North America', 9.5), (2, 'Game of Thrones', 'Europe', 9.3), (3, 'Stranger Things', 'Asia', 8.9), (4, 'The Crown', 'Europe', 8.7), (5, 'The Mandalorian', 'North America', 9.0);","WITH RankedShows AS (SELECT ShowName, AVG(AvgRating) AS AvgRating, DENSE_RANK() OVER (ORDER BY AVG(AvgRating) DESC) AS Rank FROM TVShowRatings GROUP BY ShowName) SELECT ShowName, AvgRating FROM RankedShows WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank TV shows based on their average ratings in descending order. It then selects the top 5 highest-rated shows using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of subscribers for different streaming platforms across various regions, and then display the top 3 platforms with the most subscribers.","CREATE TABLE StreamingSubscribers (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(100), Region VARCHAR(50), TotalSubscribers INT); INSERT INTO StreamingSubscribers (PlatformID, PlatformName, Region, TotalSubscribers) VALUES (1, 'Netflix', 'North America', 70000000), (2, 'Amazon Prime', 'Europe', 50000000), (3, 'Disney+', 'Asia', 30000000), (4, 'Hulu', 'North America', 25000000), (5, 'HBO Max', 'Europe', 20000000);","WITH RankedPlatforms AS (SELECT PlatformName, SUM(TotalSubscribers) AS TotalSubscribers, DENSE_RANK() OVER (ORDER BY SUM(TotalSubscribers) DESC) AS Rank FROM StreamingSubscribers GROUP BY PlatformName) SELECT PlatformName, TotalSubscribers FROM RankedPlatforms WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank streaming platforms based on their total number of subscribers in descending order. It then selects the top 3 platforms with the most subscribers using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of awards won by different actors across various categories, and then display the top 5 actors with the most awards.","CREATE TABLE ActorAwards (ActorID INT PRIMARY KEY, ActorName VARCHAR(100), Category VARCHAR(50), TotalAwards INT); INSERT INTO ActorAwards (ActorID, ActorName, Category, TotalAwards) VALUES (1, 'Leonardo DiCaprio', 'Best Actor', 5), (2, 'Meryl Streep', 'Best Actress', 8), (3, 'Denzel Washington', 'Best Actor', 4), (4, 'Cate Blanchett', 'Best Actress', 6), (5, 'Tom Hanks', 'Best Actor', 7);","WITH RankedActors AS (SELECT ActorName, SUM(TotalAwards) AS TotalAwards, DENSE_RANK() OVER (ORDER BY SUM(TotalAwards) DESC) AS Rank FROM ActorAwards GROUP BY ActorName) SELECT ActorName, TotalAwards FROM RankedActors WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank actors based on their total number of awards in descending order. It then selects the top 5 actors with the most awards using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of views for different music videos across various platforms, and then display the top 3 most viewed music videos.","CREATE TABLE MusicVideoViews (VideoID INT PRIMARY KEY, VideoName VARCHAR(100), Platform VARCHAR(50), TotalViews INT); INSERT INTO MusicVideoViews (VideoID, VideoName, Platform, TotalViews) VALUES (1, 'Despacito', 'YouTube', 7000000000), (2, 'Shape of You', 'YouTube', 5000000000), (3, 'See You Again', 'YouTube', 4000000000), (4, 'Uptown Funk', 'Vimeo', 3000000000), (5, 'Gangnam Style', 'YouTube', 3500000000);","WITH RankedVideos AS (SELECT VideoName, SUM(TotalViews) AS TotalViews, DENSE_RANK() OVER (ORDER BY SUM(TotalViews) DESC) AS Rank FROM MusicVideoViews GROUP BY VideoName) SELECT VideoName, TotalViews FROM RankedVideos WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank music videos based on their total number of views in descending order. It then selects the top 3 most viewed music videos using the DENSE_RANK function.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Insert a new public policy record into the database and then retrieve all policies related to healthcare.,"CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), PolicyType VARCHAR(50), Description TEXT, EffectiveDate DATE); CREATE TABLE PolicyCategory (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(50)); CREATE TABLE PolicyCategoryMapping (PolicyID INT, CategoryID INT, FOREIGN KEY (PolicyID) REFERENCES PublicPolicy(PolicyID), FOREIGN KEY (CategoryID) REFERENCES PolicyCategory(CategoryID)); INSERT INTO PolicyCategory (CategoryID, CategoryName) VALUES (1, 'Healthcare'), (2, 'Education'), (3, 'Infrastructure');","INSERT INTO PublicPolicy (PolicyID, PolicyName, PolicyType, Description, EffectiveDate) VALUES (101, 'Universal Healthcare Act', 'Healthcare', 'A policy to provide universal healthcare coverage to all citizens.', '2023-01-01'); SELECT * FROM PublicPolicy WHERE PolicyType = 'Healthcare';",The query first inserts a new record into the PublicPolicy table for a healthcare policy. It then retrieves all records from the PublicPolicy table where the PolicyType is 'Healthcare'. 
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the description of a legislative process and then display all legislative processes related to budget approval.,"CREATE TABLE LegislativeProcess (ProcessID INT PRIMARY KEY, ProcessName VARCHAR(100), Description TEXT, StartDate DATE, EndDate DATE); CREATE TABLE ProcessCategory (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(50)); CREATE TABLE ProcessCategoryMapping (ProcessID INT, CategoryID INT, FOREIGN KEY (ProcessID) REFERENCES LegislativeProcess(ProcessID), FOREIGN KEY (CategoryID) REFERENCES ProcessCategory(CategoryID)); INSERT INTO ProcessCategory (CategoryID, CategoryName) VALUES (1, 'Budget Approval'), (2, 'Law Making'), (3, 'Policy Review');",UPDATE LegislativeProcess SET Description = 'Updated description for budget approval process.' WHERE ProcessID = 201; SELECT * FROM LegislativeProcess WHERE ProcessID IN (SELECT ProcessID FROM ProcessCategoryMapping WHERE CategoryID = 1);,The query first updates the description of a legislative process with ProcessID 201. It then retrieves all legislative processes that are related to budget approval by joining the LegislativeProcess table with the ProcessCategoryMapping table.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Delete a government spending record and then display all remaining records for the year 2022.,"CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, DepartmentName VARCHAR(100), Amount DECIMAL, SpendingDate DATE); INSERT INTO GovernmentSpending (SpendingID, DepartmentName, Amount, SpendingDate) VALUES (301, 'Health Department', 500000.00, '2022-05-15'), (302, 'Education Department', 300000.00, '2022-06-20'), (303, 'Infrastructure Department', 700000.00, '2022-07-10');",DELETE FROM GovernmentSpending WHERE SpendingID = 301; SELECT * FROM GovernmentSpending WHERE YEAR(SpendingDate) = 2022;,The query first deletes the government spending record with SpendingID 301. It then retrieves all remaining records from the GovernmentSpending table for the year 2022.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Insert a new citizen demographic record and then display all records for citizens aged 65 and above.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, FullName VARCHAR(100), Age INT, Gender VARCHAR(10), City VARCHAR(50)); INSERT INTO CitizenDemographics (CitizenID, FullName, Age, Gender, City) VALUES (401, 'John Doe', 70, 'Male', 'New York'), (402, 'Jane Smith', 60, 'Female', 'Los Angeles'), (403, 'Alice Johnson', 65, 'Female', 'Chicago');","INSERT INTO CitizenDemographics (CitizenID, FullName, Age, Gender, City) VALUES (404, 'Robert Brown', 68, 'Male', 'Houston'); SELECT * FROM CitizenDemographics WHERE Age >= 65;",The query first inserts a new record into the CitizenDemographics table for a citizen aged 68. It then retrieves all records from the CitizenDemographics table for citizens aged 65 and above.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the governance effectiveness score for a city and then display all cities with a score above 80.,"CREATE TABLE GovernanceEffectiveness (CityID INT PRIMARY KEY, CityName VARCHAR(50), EffectivenessScore DECIMAL); INSERT INTO GovernanceEffectiveness (CityID, CityName, EffectivenessScore) VALUES (501, 'New York', 85.5), (502, 'Los Angeles', 78.0), (503, 'Chicago', 82.0);",UPDATE GovernanceEffectiveness SET EffectivenessScore = 90.0 WHERE CityID = 502; SELECT * FROM GovernanceEffectiveness WHERE EffectivenessScore > 80;,The query first updates the governance effectiveness score for the city with CityID 502 (Los Angeles) to 90.0. It then retrieves all cities from the GovernanceEffectiveness table with an effectiveness score above 80.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total government spending by department and year, and then display the departments that had spending in 2022 but not in 2021.","CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), Year INT, TotalSpending DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, Year, TotalSpending) VALUES (1, 'Health', 2021, 5000000), (2, 'Education', 2021, 3000000), (3, 'Defense', 2021, 7000000), (4, 'Health', 2022, 5500000), (5, 'Infrastructure', 2022, 4000000);",SELECT DepartmentName FROM GovernmentSpending WHERE Year = 2022 EXCEPT SELECT DepartmentName FROM GovernmentSpending WHERE Year = 2021;,The query selects department names from the GovernmentSpending table for the year 2022 and excludes those departments that also had spending in 2021 using the EXCEPT set operation.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the demographic details of citizens and then display the names of citizens who are registered voters but not employed.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, CitizenName VARCHAR(100), Age INT, IsEmployed BOOLEAN, IsRegisteredVoter BOOLEAN); INSERT INTO CitizenDemographics (CitizenID, CitizenName, Age, IsEmployed, IsRegisteredVoter) VALUES (1, 'John Doe', 30, TRUE, TRUE), (2, 'Jane Smith', 25, FALSE, TRUE), (3, 'Alice Johnson', 40, TRUE, FALSE), (4, 'Bob Brown', 50, FALSE, TRUE);",SELECT CitizenName FROM CitizenDemographics WHERE IsRegisteredVoter = TRUE EXCEPT SELECT CitizenName FROM CitizenDemographics WHERE IsEmployed = TRUE;,The query selects the names of citizens who are registered voters and excludes those who are employed using the EXCEPT set operation.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores legislative bills and their statuses, and then display the bills that were passed but not yet signed by the governor.","CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), Status VARCHAR(50)); INSERT INTO LegislativeBills (BillID, BillName, Status) VALUES (1, 'Healthcare Reform', 'Passed'), (2, 'Education Funding', 'Signed'), (3, 'Infrastructure Development', 'Passed'), (4, 'Defense Budget', 'Signed');",SELECT BillName FROM LegislativeBills WHERE Status = 'Passed' EXCEPT SELECT BillName FROM LegislativeBills WHERE Status = 'Signed';,The query selects the names of bills that have the status 'Passed' and excludes those that have the status 'Signed' using the EXCEPT set operation.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores public policy initiatives and their effectiveness ratings, and then display the initiatives that were rated effective in 2021 but not in 2022.","CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), Year INT, EffectivenessRating VARCHAR(50)); INSERT INTO PublicPolicy (PolicyID, PolicyName, Year, EffectivenessRating) VALUES (1, 'Climate Action', 2021, 'Effective'), (2, 'Healthcare Improvement', 2021, 'Moderate'), (3, 'Education Reform', 2022, 'Effective'), (4, 'Infrastructure Upgrade', 2022, 'Moderate');",SELECT PolicyName FROM PublicPolicy WHERE Year = 2021 AND EffectivenessRating = 'Effective' EXCEPT SELECT PolicyName FROM PublicPolicy WHERE Year = 2022 AND EffectivenessRating = 'Effective';,The query selects the names of policies that were rated 'Effective' in 2021 and excludes those that were rated 'Effective' in 2022 using the EXCEPT set operation.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores government project details and then display the projects that were initiated in 2020 but not completed by 2021.,"CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), StartYear INT, EndYear INT); INSERT INTO GovernmentProjects (ProjectID, ProjectName, StartYear, EndYear) VALUES (1, 'Road Construction', 2020, 2021), (2, 'School Renovation', 2020, 2022), (3, 'Hospital Expansion', 2021, 2023), (4, 'Park Development', 2020, 2021);",SELECT ProjectName FROM GovernmentProjects WHERE StartYear = 2020 EXCEPT SELECT ProjectName FROM GovernmentProjects WHERE EndYear = 2021;,The query selects the names of projects that were initiated in 2020 and excludes those that were completed by 2021 using the EXCEPT set operation.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the total government spending on healthcare and education for the last fiscal year, and ensure the transaction is committed only if both values are successfully retrieved.","CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, Category VARCHAR(50), Amount DECIMAL, FiscalYear INT); INSERT INTO GovernmentSpending (SpendingID, Category, Amount, FiscalYear) VALUES (1, 'Healthcare', 5000000, 2022), (2, 'Education', 3000000, 2022), (3, 'Defense', 7000000, 2022);",BEGIN; SELECT SUM(Amount) AS TotalHealthcareSpending FROM GovernmentSpending WHERE Category = 'Healthcare' AND FiscalYear = 2022; SELECT SUM(Amount) AS TotalEducationSpending FROM GovernmentSpending WHERE Category = 'Education' AND FiscalYear = 2022; COMMIT;,"The query begins a transaction, retrieves the total spending on healthcare and education for the fiscal year 2022, and commits the transaction only if both SELECT statements are successfully executed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List all legislative bills passed in the last year along with their sponsors, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), Sponsor VARCHAR(100), Status VARCHAR(50), YearPassed INT); INSERT INTO LegislativeBills (BillID, BillName, Sponsor, Status, YearPassed) VALUES (1, 'Healthcare Reform Act', 'Senator A', 'Passed', 2022), (2, 'Education Improvement Act', 'Senator B', 'Passed', 2022), (3, 'Defense Budget Act', 'Senator C', 'Passed', 2022);","BEGIN; SELECT BillName, Sponsor FROM LegislativeBills WHERE Status = 'Passed' AND YearPassed = 2022; ROLLBACK;","The query begins a transaction, retrieves the names and sponsors of all legislative bills passed in 2022, and rolls back the transaction if any error occurs during execution."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average age of citizens in each region and ensure the transaction is committed only if the calculation is successful.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, Age INT, Region VARCHAR(50)); INSERT INTO CitizenDemographics (CitizenID, Age, Region) VALUES (1, 34, 'North'), (2, 45, 'South'), (3, 29, 'East'), (4, 40, 'West');","BEGIN; SELECT Region, AVG(Age) AS AverageAge FROM CitizenDemographics GROUP BY Region; COMMIT;","The query begins a transaction, calculates the average age of citizens in each region, and commits the transaction only if the calculation is successfully executed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the effectiveness ratings of governance for each department and ensure the transaction is committed only if all ratings are successfully retrieved.,"CREATE TABLE GovernanceEffectiveness (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), EffectivenessRating DECIMAL); INSERT INTO GovernanceEffectiveness (DepartmentID, DepartmentName, EffectivenessRating) VALUES (1, 'Health Department', 4.5), (2, 'Education Department', 4.0), (3, 'Defense Department', 3.8);","BEGIN; SELECT DepartmentName, EffectivenessRating FROM GovernanceEffectiveness; COMMIT;","The query begins a transaction, retrieves the effectiveness ratings for each department, and commits the transaction only if all ratings are successfully retrieved."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List all public policies implemented in the last five years and ensure the transaction is rolled back if any error occurs.,"CREATE TABLE PublicPolicies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), ImplementationYear INT); INSERT INTO PublicPolicies (PolicyID, PolicyName, ImplementationYear) VALUES (1, 'Universal Healthcare', 2018), (2, 'Free Education', 2019), (3, 'Environmental Protection', 2020);","BEGIN; SELECT PolicyName, ImplementationYear FROM PublicPolicies WHERE ImplementationYear >= 2018; ROLLBACK;","The query begins a transaction, retrieves the names and implementation years of all public policies implemented in the last five years, and rolls back the transaction if any error occurs during execution."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different movies across various regions, and then display the top 3 highest-grossing movies.","CREATE TABLE MovieRevenue (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO MovieRevenue (MovieID, MovieName, Region, TotalRevenue) VALUES (1, 'Avengers', 'North America', 500.0), (2, 'Avatar', 'Europe', 450.0), (3, 'Titanic', 'Asia', 400.0), (4, 'Inception', 'North America', 300.0), (5, 'Frozen', 'Europe', 350.0);","WITH RankedMovies AS (SELECT MovieName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM MovieRevenue) SELECT MovieName, TotalRevenue FROM RankedMovies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank movies based on their total revenue in descending order. It then selects the top 3 highest-grossing movies using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average viewership ratings for different TV shows across various platforms, and then display the top 3 highest-rated shows.","CREATE TABLE TVShowRatings (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), Platform VARCHAR(50), AvgRating DECIMAL); INSERT INTO TVShowRatings (ShowID, ShowName, Platform, AvgRating) VALUES (1, 'Breaking Bad', 'Netflix', 9.5), (2, 'Game of Thrones', 'HBO', 9.3), (3, 'Stranger Things', 'Netflix', 8.9), (4, 'The Crown', 'Netflix', 8.7), (5, 'Westworld', 'HBO', 8.5);","WITH RankedShows AS (SELECT ShowName, AvgRating, DENSE_RANK() OVER (ORDER BY AvgRating DESC) AS Rank FROM TVShowRatings) SELECT ShowName, AvgRating FROM RankedShows WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank TV shows based on their average ratings in descending order. It then selects the top 3 highest-rated shows using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of subscribers for different streaming platforms across various regions, and then display the top 2 platforms with the most subscribers.","CREATE TABLE StreamingSubscribers (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50), Region VARCHAR(50), Subscribers INT); INSERT INTO StreamingSubscribers (PlatformID, PlatformName, Region, Subscribers) VALUES (1, 'Netflix', 'North America', 1000000), (2, 'Amazon Prime', 'Europe', 800000), (3, 'Disney+', 'Asia', 600000), (4, 'Hulu', 'North America', 500000), (5, 'HBO Max', 'Europe', 700000);","WITH RankedPlatforms AS (SELECT PlatformName, Subscribers, DENSE_RANK() OVER (ORDER BY Subscribers DESC) AS Rank FROM StreamingSubscribers) SELECT PlatformName, Subscribers FROM RankedPlatforms WHERE Rank <= 2;",The query creates a common table expression (CTE) to rank streaming platforms based on their number of subscribers in descending order. It then selects the top 2 platforms with the most subscribers using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of views for different music videos across various platforms, and then display the top 3 most viewed music videos.","CREATE TABLE MusicVideoViews (VideoID INT PRIMARY KEY, VideoName VARCHAR(50), Platform VARCHAR(50), TotalViews INT); INSERT INTO MusicVideoViews (VideoID, VideoName, Platform, TotalViews) VALUES (1, 'Despacito', 'YouTube', 7000000), (2, 'Shape of You', 'YouTube', 6000000), (3, 'See You Again', 'YouTube', 5000000), (4, 'Uptown Funk', 'Vimeo', 4000000), (5, 'Gangnam Style', 'YouTube', 8000000);","WITH RankedVideos AS (SELECT VideoName, TotalViews, DENSE_RANK() OVER (ORDER BY TotalViews DESC) AS Rank FROM MusicVideoViews) SELECT VideoName, TotalViews FROM RankedVideos WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank music videos based on their total views in descending order. It then selects the top 3 most viewed music videos using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different video games across various regions, and then display the top 3 highest-grossing games.","CREATE TABLE VideoGameRevenue (GameID INT PRIMARY KEY, GameName VARCHAR(50), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO VideoGameRevenue (GameID, GameName, Region, TotalRevenue) VALUES (1, 'Fortnite', 'North America', 1000.0), (2, 'Minecraft', 'Europe', 900.0), (3, 'PUBG', 'Asia', 800.0), (4, 'Apex Legends', 'North America', 700.0), (5, 'Call of Duty', 'Europe', 850.0);","WITH RankedGames AS (SELECT GameName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM VideoGameRevenue) SELECT GameName, TotalRevenue FROM RankedGames WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank video games based on their total revenue in descending order. It then selects the top 3 highest-grossing games using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new record for a species that was recently discovered in the Amazon rainforest.,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), Habitat VARCHAR(100), DiscoveryDate DATE);","INSERT INTO Species (SpeciesID, SpeciesName, Habitat, DiscoveryDate) VALUES (101, 'New Amazon Frog', 'Amazon Rainforest', '2023-10-01');","The query inserts a new record into the Species table with the ID 101, the name 'New Amazon Frog', the habitat 'Amazon Rainforest', and the discovery date '2023-10-01'."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the average temperature data for the year 2022 in the ClimateData table.,"CREATE TABLE ClimateData (Year INT PRIMARY KEY, AvgTemperature DECIMAL, AvgRainfall DECIMAL);",UPDATE ClimateData SET AvgTemperature = 15.3 WHERE Year = 2022;,The query updates the AvgTemperature field to 15.3 for the record where the Year is 2022 in the ClimateData table.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Delete records of endangered species that have not been sighted in the last 10 years.,"CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), LastSighted DATE);",DELETE FROM EndangeredSpecies WHERE LastSighted < '2013-10-01';,The query deletes records from the EndangeredSpecies table where the LastSighted date is before '2013-10-01'.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert new data on renewable energy projects initiated in 2023.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), StartDate DATE, EnergyType VARCHAR(50));","INSERT INTO RenewableProjects (ProjectID, ProjectName, StartDate, EnergyType) VALUES (201, 'Solar Farm Alpha', '2023-01-15', 'Solar'), (202, 'Wind Turbine Beta', '2023-03-22', 'Wind');",The query inserts two new records into the RenewableProjects table with details about projects initiated in 2023.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the conservation status of a species in the Biodiversity table.,"CREATE TABLE Biodiversity (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), ConservationStatus VARCHAR(50));",UPDATE Biodiversity SET ConservationStatus = 'Critically Endangered' WHERE SpeciesID = 301;,The query updates the ConservationStatus field to 'Critically Endangered' for the record where the SpeciesID is 301 in the Biodiversity table.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average spending on sustainable fashion items by age group.,"CREATE TABLE ConsumerSpending (ConsumerID INT PRIMARY KEY, AgeGroup VARCHAR(50), Spending DECIMAL); INSERT INTO ConsumerSpending (ConsumerID, AgeGroup, Spending) VALUES (1, '18-25', 150.0), (2, '26-35', 200.0), (3, '36-45', 250.0), (4, '46-55', 300.0), (5, '56+', 100.0);","SELECT AgeGroup, AVG(Spending) AS AvgSpending FROM ConsumerSpending GROUP BY AgeGroup;",The query calculates the average spending on sustainable fashion items for each age group by grouping the data by AgeGroup and then using the AVG function to find the average spending.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Show the number of consumers interested in different fashion trends over the past year.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50)); CREATE TABLE ConsumerTrends (ConsumerID INT, TrendID INT, InterestLevel INT, FOREIGN KEY (TrendID) REFERENCES FashionTrends(TrendID)); INSERT INTO FashionTrends (TrendID, TrendName) VALUES (1, 'Vintage'), (2, 'Streetwear'), (3, 'Athleisure'), (4, 'Minimalism'), (5, 'Sustainable'); INSERT INTO ConsumerTrends (ConsumerID, TrendID, InterestLevel) VALUES (1, 1, 5), (2, 2, 4), (3, 3, 3), (4, 4, 2), (5, 5, 1);","SELECT TrendName, COUNT(ConsumerID) AS NumberOfConsumers FROM FashionTrends FT JOIN ConsumerTrends CT ON FT.TrendID = CT.TrendID GROUP BY TrendName;","The query joins the FashionTrends and ConsumerTrends tables on TrendID, groups the data by TrendName, and counts the number of consumers interested in each trend."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard showing the percentage of consumers who prefer online shopping versus in-store shopping for fashion items.,"CREATE TABLE ShoppingPreferences (PreferenceID INT PRIMARY KEY, PreferenceType VARCHAR(50)); CREATE TABLE ConsumerPreferences (ConsumerID INT, PreferenceID INT, FOREIGN KEY (PreferenceID) REFERENCES ShoppingPreferences(PreferenceID)); INSERT INTO ShoppingPreferences (PreferenceID, PreferenceType) VALUES (1, 'Online'), (2, 'In-Store'); INSERT INTO ConsumerPreferences (ConsumerID, PreferenceID) VALUES (1, 1), (2, 2), (3, 1), (4, 2), (5, 1);","SELECT SP.PreferenceType, COUNT(CP.ConsumerID) * 100.0 / (SELECT COUNT(*) FROM ConsumerPreferences) AS Percentage FROM ShoppingPreferences SP JOIN ConsumerPreferences CP ON SP.PreferenceID = CP.PreferenceID GROUP BY SP.PreferenceType;","The query joins the ShoppingPreferences and ConsumerPreferences tables on PreferenceID, groups the data by PreferenceType, and calculates the percentage of consumers who prefer each shopping method."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the sales performance of different fashion brands over the last quarter.,"CREATE TABLE SalesPerformance (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SalesQ1 DECIMAL, SalesQ2 DECIMAL, SalesQ3 DECIMAL, SalesQ4 DECIMAL); INSERT INTO SalesPerformance (BrandID, BrandName, SalesQ1, SalesQ2, SalesQ3, SalesQ4) VALUES (1, 'Brand A', 1000.0, 1500.0, 2000.0, 2500.0), (2, 'Brand B', 1200.0, 1600.0, 2100.0, 2600.0), (3, 'Brand C', 1100.0, 1700.0, 2200.0, 2700.0);","SELECT BrandName, SalesQ4 FROM SalesPerformance;",The query selects the brand names and their sales performance for the last quarter (Q4) from the SalesPerformance table.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the most popular sustainable fashion materials used by different brands.,"CREATE TABLE SustainableMaterials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(50)); CREATE TABLE BrandMaterials (BrandID INT, MaterialID INT, UsageFrequency INT, FOREIGN KEY (MaterialID) REFERENCES SustainableMaterials(MaterialID)); INSERT INTO SustainableMaterials (MaterialID, MaterialName) VALUES (1, 'Organic Cotton'), (2, 'Recycled Polyester'), (3, 'Bamboo'), (4, 'Hemp'), (5, 'Tencel'); INSERT INTO BrandMaterials (BrandID, MaterialID, UsageFrequency) VALUES (1, 1, 50), (2, 2, 40), (3, 3, 30), (4, 4, 20), (5, 5, 10);","SELECT SM.MaterialName, SUM(BM.UsageFrequency) AS TotalUsage FROM SustainableMaterials SM JOIN BrandMaterials BM ON SM.MaterialID = BM.MaterialID GROUP BY SM.MaterialName ORDER BY TotalUsage DESC;","The query joins the SustainableMaterials and BrandMaterials tables on MaterialID, groups the data by MaterialName, sums the usage frequency for each material, and orders the results by total usage in descending order to identify the most popular materials."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Show the total number of bookings for each hotel in the last year.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, BookingDate DATE, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT H.HotelName, COUNT(B.BookingID) AS TotalBookings FROM Hotels H INNER JOIN Bookings B ON H.HotelID = B.HotelID WHERE B.BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY H.HotelName;","The query joins the Hotels and Bookings tables on the HotelID field using an INNER JOIN. It then filters bookings to those made in the last year and groups the results by hotel name, counting the total number of bookings for each hotel."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",List the average rating for each hotel based on customer reviews.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, Rating INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT H.HotelName, AVG(R.Rating) AS AverageRating FROM Hotels H INNER JOIN Reviews R ON H.HotelID = R.HotelID GROUP BY H.HotelName;",The query joins the Hotels and Reviews tables on the HotelID field using an INNER JOIN. It then groups the results by hotel name and calculates the average rating for each hotel.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Find the most popular travel destination based on the number of bookings.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, DestinationID INT, FOREIGN KEY (DestinationID) REFERENCES Destinations(DestinationID));","SELECT D.DestinationName, COUNT(B.BookingID) AS TotalBookings FROM Destinations D INNER JOIN Bookings B ON D.DestinationID = B.DestinationID GROUP BY D.DestinationName ORDER BY TotalBookings DESC LIMIT 1;","The query joins the Destinations and Bookings tables on the DestinationID field using an INNER JOIN. It then groups the results by destination name, counts the total number of bookings for each destination, and orders the results in descending order to find the most popular destination."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Show the total revenue generated by each hotel from bookings.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, Revenue DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT H.HotelName, SUM(B.Revenue) AS TotalRevenue FROM Hotels H INNER JOIN Bookings B ON H.HotelID = B.HotelID GROUP BY H.HotelName;",The query joins the Hotels and Bookings tables on the HotelID field using an INNER JOIN. It then groups the results by hotel name and calculates the total revenue generated by each hotel from bookings.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Get the top 3 most reviewed hotels.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT H.HotelName, COUNT(R.ReviewID) AS ReviewCount FROM Hotels H INNER JOIN Reviews R ON H.HotelID = R.HotelID GROUP BY H.HotelName ORDER BY ReviewCount DESC LIMIT 3;","The query joins the Hotels and Reviews tables on the HotelID field using an INNER JOIN. It then groups the results by hotel name, counts the number of reviews for each hotel, and orders the results in descending order to get the top 3 most reviewed hotels."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify the top 3 departments with the highest average spending per project in the last fiscal year.,"CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); CREATE TABLE Projects (ProjectID INT PRIMARY KEY, DepartmentID INT, ProjectName VARCHAR(100), FiscalYear INT, Spending DECIMAL, FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID));","WITH DepartmentSpending AS (SELECT DepartmentID, AVG(Spending) AS AvgSpending FROM Projects WHERE FiscalYear = 2022 GROUP BY DepartmentID), RankedDepartments AS (SELECT DepartmentID, AvgSpending, RANK() OVER (ORDER BY AvgSpending DESC) AS Rank FROM DepartmentSpending) SELECT DepartmentID, AvgSpending FROM RankedDepartments WHERE Rank <= 3;","The query first calculates the average spending per department for the last fiscal year (2022) and then ranks these departments based on their average spending in descending order. Finally, it selects the top 3 departments with the highest average spending."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Find the top 5 legislative bills by the number of amendments proposed in the current session.,"CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), SessionYear INT); CREATE TABLE Amendments (AmendmentID INT PRIMARY KEY, BillID INT, AmendmentText TEXT, FOREIGN KEY (BillID) REFERENCES LegislativeBills(BillID));","WITH BillAmendments AS (SELECT BillID, COUNT(AmendmentID) AS AmendmentCount FROM Amendments GROUP BY BillID), RankedBills AS (SELECT BillID, AmendmentCount, RANK() OVER (ORDER BY AmendmentCount DESC) AS Rank FROM BillAmendments) SELECT BillID, AmendmentCount FROM RankedBills WHERE Rank <= 5;",The query counts the number of amendments for each bill in the current session and ranks the bills based on the number of amendments in descending order. It then selects the top 5 bills with the most amendments.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Determine the top 10 most populated cities based on the latest census data.,"CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(100), Population INT, CensusYear INT);","WITH LatestCensus AS (SELECT CityID, CityName, Population, ROW_NUMBER() OVER (PARTITION BY CityID ORDER BY CensusYear DESC) AS RowNum FROM Cities), LatestPopulation AS (SELECT CityID, CityName, Population FROM LatestCensus WHERE RowNum = 1), RankedCities AS (SELECT CityID, CityName, Population, RANK() OVER (ORDER BY Population DESC) AS Rank FROM LatestPopulation) SELECT CityID, CityName, Population FROM RankedCities WHERE Rank <= 10;",The query first identifies the latest census data for each city using the ROW_NUMBER function. It then ranks these cities based on their population in descending order and selects the top 10 most populated cities.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",List the top 5 government programs with the highest increase in funding compared to the previous year.,"CREATE TABLE GovernmentPrograms (ProgramID INT PRIMARY KEY, ProgramName VARCHAR(100)); CREATE TABLE ProgramFunding (FundingID INT PRIMARY KEY, ProgramID INT, FiscalYear INT, FundingAmount DECIMAL, FOREIGN KEY (ProgramID) REFERENCES GovernmentPrograms(ProgramID));","WITH FundingChanges AS (SELECT ProgramID, FiscalYear, FundingAmount - LAG(FundingAmount) OVER (PARTITION BY ProgramID ORDER BY FiscalYear) AS FundingChange FROM ProgramFunding), LatestChanges AS (SELECT ProgramID, FundingChange, ROW_NUMBER() OVER (PARTITION BY ProgramID ORDER BY FiscalYear DESC) AS RowNum FROM FundingChanges), RankedPrograms AS (SELECT ProgramID, FundingChange, RANK() OVER (ORDER BY FundingChange DESC) AS Rank FROM LatestChanges WHERE RowNum = 1) SELECT ProgramID, FundingChange FROM RankedPrograms WHERE Rank <= 5;",The query calculates the change in funding for each government program compared to the previous year using the LAG function. It then ranks these programs based on the latest funding change in descending order and selects the top 5 programs with the highest increase in funding.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify the top 3 regions with the highest average household income based on the latest survey data.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE HouseholdIncome (IncomeID INT PRIMARY KEY, RegionID INT, SurveyYear INT, HouseholdIncome DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH LatestSurvey AS (SELECT RegionID, HouseholdIncome, ROW_NUMBER() OVER (PARTITION BY RegionID ORDER BY SurveyYear DESC) AS RowNum FROM HouseholdIncome), LatestIncome AS (SELECT RegionID, HouseholdIncome FROM LatestSurvey WHERE RowNum = 1), RankedRegions AS (SELECT RegionID, HouseholdIncome, RANK() OVER (ORDER BY HouseholdIncome DESC) AS Rank FROM LatestIncome) SELECT RegionID, HouseholdIncome FROM RankedRegions WHERE Rank <= 3;",The query first identifies the latest survey data for each region using the ROW_NUMBER function. It then ranks these regions based on their average household income in descending order and selects the top 3 regions with the highest average household income.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total government spending on healthcare and education, excluding any overlapping expenditures between the two categories.","CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, Category VARCHAR(50), Amount DECIMAL, Year INT); INSERT INTO GovernmentSpending (SpendingID, Category, Amount, Year) VALUES (1, 'Healthcare', 5000000, 2022), (2, 'Education', 3000000, 2022), (3, 'Healthcare', 4500000, 2021), (4, 'Education', 3200000, 2021), (5, 'Healthcare', 4800000, 2020), (6, 'Education', 3100000, 2020);","SELECT Category, SUM(Amount) AS TotalSpending FROM GovernmentSpending WHERE Category IN ('Healthcare', 'Education') GROUP BY Category;",The query selects the categories 'Healthcare' and 'Education' from the GovernmentSpending table and calculates the total spending for each category by summing the Amount column. It groups the results by Category to provide a breakdown of spending for each category.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","List all legislative bills that have been proposed but not yet passed, and compare them to bills that have been passed in the last year.","CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), Status VARCHAR(50), ProposedDate DATE, PassedDate DATE); INSERT INTO LegislativeBills (BillID, BillName, Status, ProposedDate, PassedDate) VALUES (1, 'Healthcare Reform', 'Proposed', '2022-01-15', NULL), (2, 'Education Funding', 'Passed', '2021-03-10', '2021-08-20'), (3, 'Tax Reform', 'Proposed', '2022-05-22', NULL), (4, 'Infrastructure Bill', 'Passed', '2021-07-12', '2021-12-01');",SELECT BillName FROM LegislativeBills WHERE Status = 'Proposed' EXCEPT SELECT BillName FROM LegislativeBills WHERE Status = 'Passed' AND PassedDate >= '2021-01-01';,"The query first selects the names of bills that are currently proposed from the LegislativeBills table. It then excludes the names of bills that have been passed since January 1, 2021, using the EXCEPT set operation to provide a list of bills that are proposed but not yet passed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the demographic groups that have the highest and lowest voter turnout in the last election.,"CREATE TABLE VoterDemographics (DemographicID INT PRIMARY KEY, AgeGroup VARCHAR(50), IncomeLevel VARCHAR(50), EducationLevel VARCHAR(50), VoterTurnout DECIMAL, ElectionYear INT); INSERT INTO VoterDemographics (DemographicID, AgeGroup, IncomeLevel, EducationLevel, VoterTurnout, ElectionYear) VALUES (1, '18-25', 'Low', 'High School', 45.2, 2022), (2, '26-35', 'Medium', 'Bachelor', 55.3, 2022), (3, '36-45', 'High', 'Master', 65.4, 2022), (4, '46-60', 'Medium', 'Bachelor', 70.1, 2022), (5, '60+', 'High', 'High School', 75.0, 2022);","SELECT AgeGroup, IncomeLevel, EducationLevel, VoterTurnout FROM VoterDemographics WHERE ElectionYear = 2022 ORDER BY VoterTurnout DESC;","The query selects the age group, income level, education level, and voter turnout from the VoterDemographics table for the year 2022. It orders the results by voter turnout in descending order to identify the demographic groups with the highest and lowest voter turnout."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Compare the effectiveness of different public policies on reducing unemployment rates over the past five years.,"CREATE TABLE PublicPolicies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), ImplementationDate DATE, EffectivenessScore DECIMAL); CREATE TABLE UnemploymentRates (Year INT PRIMARY KEY, UnemploymentRate DECIMAL); INSERT INTO PublicPolicies (PolicyID, PolicyName, ImplementationDate, EffectivenessScore) VALUES (1, 'Job Training Program', '2018-01-01', 8.5), (2, 'Tax Incentives', '2019-06-15', 7.2), (3, 'Small Business Grants', '2020-03-20', 6.8); INSERT INTO UnemploymentRates (Year, UnemploymentRate) VALUES (2018, 5.0), (2019, 4.7), (2020, 6.0), (2021, 5.5), (2022, 4.8);","SELECT p.PolicyName, p.EffectivenessScore, u.UnemploymentRate FROM PublicPolicies p JOIN UnemploymentRates u ON YEAR(p.ImplementationDate) = u.Year WHERE u.Year BETWEEN 2018 AND 2022;","The query joins the PublicPolicies and UnemploymentRates tables on the year of policy implementation and the year of recorded unemployment rates. It selects the policy name, effectiveness score, and unemployment rate for the years 2018 to 2022 to compare the effectiveness of different public policies on reducing unemployment rates."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a dashboard showing the distribution of government spending across different sectors for the current fiscal year.,"CREATE TABLE SectorSpending (SectorID INT PRIMARY KEY, SectorName VARCHAR(50), SpendingAmount DECIMAL, FiscalYear INT); INSERT INTO SectorSpending (SectorID, SectorName, SpendingAmount, FiscalYear) VALUES (1, 'Healthcare', 5000000, 2022), (2, 'Education', 3000000, 2022), (3, 'Defense', 7000000, 2022), (4, 'Infrastructure', 4000000, 2022), (5, 'Welfare', 2000000, 2022);","SELECT SectorName, SpendingAmount FROM SectorSpending WHERE FiscalYear = 2022;",The query selects the sector name and spending amount from the SectorSpending table for the fiscal year 2022. This information can be used to generate a dashboard showing the distribution of government spending across different sectors for the current fiscal year.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total revenue generated by each content creator in the last month and roll back the transaction if any content creator has negative revenue.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50)); CREATE TABLE ContentConsumption (ConsumptionID INT PRIMARY KEY, CreatorID INT, ConsumptionDate DATE, Revenue DECIMAL, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID));","BEGIN TRANSACTION; WITH MonthlyRevenue AS (SELECT CreatorID, SUM(Revenue) AS TotalRevenue FROM ContentConsumption WHERE ConsumptionDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY CreatorID) SELECT CreatorID, TotalRevenue FROM MonthlyRevenue; IF EXISTS (SELECT 1 FROM MonthlyRevenue WHERE TotalRevenue < 0) ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query calculates the total revenue generated by each content creator in the last month using a common table expression (CTE). It then checks if any content creator has negative revenue. If so, it rolls back the transaction; otherwise, it commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average watch time per user for each genre and commit the transaction only if the average watch time is above 30 minutes.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50)); CREATE TABLE WatchHistory (WatchID INT PRIMARY KEY, UserID INT, Genre VARCHAR(50), WatchTime INT, FOREIGN KEY (UserID) REFERENCES Users(UserID));","BEGIN TRANSACTION; WITH AvgWatchTime AS (SELECT Genre, AVG(WatchTime) AS AvgTime FROM WatchHistory GROUP BY Genre) SELECT Genre, AvgTime FROM AvgWatchTime; IF EXISTS (SELECT 1 FROM AvgWatchTime WHERE AvgTime <= 30) ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query calculates the average watch time per user for each genre using a common table expression (CTE). It then checks if the average watch time is above 30 minutes. If not, it rolls back the transaction; otherwise, it commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 3 most engaged users based on the number of comments they have made in the last week and commit the transaction.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50)); CREATE TABLE Comments (CommentID INT PRIMARY KEY, UserID INT, CommentDate DATE, FOREIGN KEY (UserID) REFERENCES Users(UserID));","BEGIN TRANSACTION; WITH WeeklyComments AS (SELECT UserID, COUNT(CommentID) AS CommentCount FROM Comments WHERE CommentDate >= DATEADD(WEEK, -1, GETDATE()) GROUP BY UserID), RankedUsers AS (SELECT UserID, CommentCount, DENSE_RANK() OVER (ORDER BY CommentCount DESC) AS Rank FROM WeeklyComments) SELECT UserID, CommentCount FROM RankedUsers WHERE Rank <= 3; COMMIT TRANSACTION;","The query calculates the number of comments made by each user in the last week using a common table expression (CTE). It then ranks the users based on their comment count and selects the top 3 most engaged users. Finally, it commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total number of views for each video in the last month and roll back the transaction if any video has zero views.,"CREATE TABLE Videos (VideoID INT PRIMARY KEY, VideoTitle VARCHAR(100)); CREATE TABLE VideoViews (ViewID INT PRIMARY KEY, VideoID INT, ViewDate DATE, FOREIGN KEY (VideoID) REFERENCES Videos(VideoID));","BEGIN TRANSACTION; WITH MonthlyViews AS (SELECT VideoID, COUNT(ViewID) AS TotalViews FROM VideoViews WHERE ViewDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY VideoID) SELECT VideoID, TotalViews FROM MonthlyViews; IF EXISTS (SELECT 1 FROM MonthlyViews WHERE TotalViews = 0) ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query calculates the total number of views for each video in the last month using a common table expression (CTE). It then checks if any video has zero views. If so, it rolls back the transaction; otherwise, it commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the total number of likes each content creator received in the last year and commit the transaction only if all creators have received at least one like.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50)); CREATE TABLE Likes (LikeID INT PRIMARY KEY, CreatorID INT, LikeDate DATE, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID));","BEGIN TRANSACTION; WITH YearlyLikes AS (SELECT CreatorID, COUNT(LikeID) AS TotalLikes FROM Likes WHERE LikeDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY CreatorID) SELECT CreatorID, TotalLikes FROM YearlyLikes; IF EXISTS (SELECT 1 FROM YearlyLikes WHERE TotalLikes = 0) ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query calculates the total number of likes each content creator received in the last year using a common table expression (CTE). It then checks if all creators have received at least one like. If not, it rolls back the transaction; otherwise, it commits the transaction."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the top 3 most popular tourist destinations based on customer bookings in the last year.,"CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, Destination VARCHAR(100), BookingDate DATE); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(100), Email VARCHAR(100));","WITH RecentBookings AS (SELECT Destination, COUNT(*) AS BookingCount FROM Bookings WHERE BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY Destination) SELECT TOP 3 Destination, BookingCount FROM RecentBookings ORDER BY BookingCount DESC;",The query first creates a common table expression (CTE) named RecentBookings that counts the number of bookings for each destination in the last year. It then selects the top 3 destinations with the highest booking counts.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average stay duration for customers in different hotel categories and display the results for categories with an average stay of more than 3 days.,"CREATE TABLE Stays (StayID INT PRIMARY KEY, CustomerID INT, HotelID INT, CheckInDate DATE, CheckOutDate DATE); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Category VARCHAR(50));","WITH StayDurations AS (SELECT H.Category, DATEDIFF(DAY, S.CheckInDate, S.CheckOutDate) AS Duration FROM Stays S JOIN Hotels H ON S.HotelID = H.HotelID) SELECT Category, AVG(Duration) AS AvgStayDuration FROM StayDurations GROUP BY Category HAVING AVG(Duration) > 3;","The query creates a CTE named StayDurations that calculates the duration of each stay by subtracting the check-in date from the check-out date. It then groups the results by hotel category and calculates the average stay duration for each category, filtering for categories with an average stay of more than 3 days."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify customers who have booked more than 5 times in the last 6 months and list their names and email addresses.,"CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, BookingDate DATE); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(100), Email VARCHAR(100));","WITH FrequentCustomers AS (SELECT CustomerID, COUNT(*) AS BookingCount FROM Bookings WHERE BookingDate >= DATEADD(MONTH, -6, GETDATE()) GROUP BY CustomerID HAVING COUNT(*) > 5) SELECT C.Name, C.Email FROM FrequentCustomers FC JOIN Customers C ON FC.CustomerID = C.CustomerID;",The query creates a CTE named FrequentCustomers that counts the number of bookings for each customer in the last 6 months and filters for those with more than 5 bookings. It then joins this result with the Customers table to retrieve the names and email addresses of these frequent customers.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total revenue generated from bookings in each region for the current year.,"CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, HotelID INT, BookingDate DATE, Amount DECIMAL); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Region VARCHAR(50));","WITH CurrentYearBookings AS (SELECT H.Region, B.Amount FROM Bookings B JOIN Hotels H ON B.HotelID = H.HotelID WHERE YEAR(B.BookingDate) = YEAR(GETDATE())) SELECT Region, SUM(Amount) AS TotalRevenue FROM CurrentYearBookings GROUP BY Region;",The query creates a CTE named CurrentYearBookings that selects the region and amount for each booking made in the current year. It then groups the results by region and calculates the total revenue generated from bookings in each region.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the top 5 customers who have spent the most on bookings in the last year, including their names and total amount spent.","CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, BookingDate DATE, Amount DECIMAL); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(100), Email VARCHAR(100));","WITH CustomerSpending AS (SELECT CustomerID, SUM(Amount) AS TotalSpent FROM Bookings WHERE BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY CustomerID) SELECT TOP 5 C.Name, CS.TotalSpent FROM CustomerSpending CS JOIN Customers C ON CS.CustomerID = C.CustomerID ORDER BY CS.TotalSpent DESC;","The query creates a CTE named CustomerSpending that calculates the total amount spent by each customer on bookings in the last year. It then joins this result with the Customers table and selects the top 5 customers who have spent the most, ordering the results by total amount spent in descending order."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average crop yield for different crop types across various regions, and then display the top 5 regions with the highest average yield.","CREATE TABLE CropYield (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropType VARCHAR(50), AvgYield DECIMAL); INSERT INTO CropYield (RegionID, RegionName, CropType, AvgYield) VALUES (1, 'North America', 'Wheat', 3.5), (2, 'South America', 'Corn', 4.2), (3, 'Europe', 'Barley', 2.8), (4, 'Asia', 'Rice', 5.0), (5, 'Africa', 'Sorghum', 1.9);","WITH RankedRegions AS (SELECT RegionName, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM CropYield) SELECT RegionName, AvgYield FROM RankedRegions WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank regions based on their average crop yield in descending order. It then selects the top 5 regions with the highest average yield using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total fertilizer usage for different crops across various countries, and then display the top 5 crops with the highest fertilizer usage.","CREATE TABLE FertilizerUsage (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), CropType VARCHAR(50), TotalUsage DECIMAL); INSERT INTO FertilizerUsage (CountryID, CountryName, CropType, TotalUsage) VALUES (1, 'USA', 'Corn', 500.0), (2, 'Brazil', 'Soybean', 450.0), (3, 'India', 'Rice', 600.0), (4, 'China', 'Wheat', 550.0), (5, 'Australia', 'Barley', 300.0);","WITH RankedCrops AS (SELECT CropType, TotalUsage, DENSE_RANK() OVER (ORDER BY TotalUsage DESC) AS Rank FROM FertilizerUsage) SELECT CropType, TotalUsage FROM RankedCrops WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank crops based on their total fertilizer usage in descending order. It then selects the top 5 crops with the highest fertilizer usage using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average water usage for different farming practices across various regions, and then display the top 5 practices with the lowest average water usage.","CREATE TABLE WaterUsage (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), Region VARCHAR(50), AvgWaterUsage DECIMAL); INSERT INTO WaterUsage (PracticeID, PracticeName, Region, AvgWaterUsage) VALUES (1, 'Drip Irrigation', 'North America', 200.0), (2, 'Sprinkler Irrigation', 'Europe', 300.0), (3, 'Flood Irrigation', 'Asia', 500.0), (4, 'Furrow Irrigation', 'South America', 400.0), (5, 'Subsurface Irrigation', 'Africa', 150.0);","WITH RankedPractices AS (SELECT PracticeName, AvgWaterUsage, DENSE_RANK() OVER (ORDER BY AvgWaterUsage ASC) AS Rank FROM WaterUsage) SELECT PracticeName, AvgWaterUsage FROM RankedPractices WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank farming practices based on their average water usage in ascending order. It then selects the top 5 practices with the lowest average water usage using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average pesticide usage for different crops across various regions, and then display the top 5 crops with the lowest pesticide usage.","CREATE TABLE PesticideUsage (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgPesticideUsage DECIMAL); INSERT INTO PesticideUsage (CropID, CropName, Region, AvgPesticideUsage) VALUES (1, 'Wheat', 'North America', 2.5), (2, 'Corn', 'South America', 3.0), (3, 'Rice', 'Asia', 4.0), (4, 'Barley', 'Europe', 1.5), (5, 'Sorghum', 'Africa', 1.0);","WITH RankedCrops AS (SELECT CropName, AvgPesticideUsage, DENSE_RANK() OVER (ORDER BY AvgPesticideUsage ASC) AS Rank FROM PesticideUsage) SELECT CropName, AvgPesticideUsage FROM RankedCrops WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank crops based on their average pesticide usage in ascending order. It then selects the top 5 crops with the lowest pesticide usage using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total agricultural production for different countries, and then display the top 5 countries with the highest production.","CREATE TABLE AgriculturalProduction (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), TotalProduction DECIMAL); INSERT INTO AgriculturalProduction (CountryID, CountryName, TotalProduction) VALUES (1, 'USA', 10000.0), (2, 'China', 15000.0), (3, 'India', 12000.0), (4, 'Brazil', 8000.0), (5, 'Russia', 7000.0);","WITH RankedCountries AS (SELECT CountryName, TotalProduction, DENSE_RANK() OVER (ORDER BY TotalProduction DESC) AS Rank FROM AgriculturalProduction) SELECT CountryName, TotalProduction FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank countries based on their total agricultural production in descending order. It then selects the top 5 countries with the highest production using the DENSE_RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store patient demographics and medical histories, and then display the number of patients who have been treated for diabetes.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DOB DATE, Gender VARCHAR(10)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), Treatment VARCHAR(100), Outcome VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","CREATE TABLE DiabetesPatients AS SELECT p.PatientID, p.FirstName, p.LastName, p.DOB, p.Gender, mh.Diagnosis, mh.Treatment, mh.Outcome FROM Patients p INNER JOIN MedicalHistories mh ON p.PatientID = mh.PatientID WHERE mh.Diagnosis = 'Diabetes'; SELECT COUNT(*) AS DiabetesPatientCount FROM DiabetesPatients;","The query first creates a new table 'DiabetesPatients' by joining the 'Patients' and 'MedicalHistories' tables on the 'PatientID' field, filtering for records where the diagnosis is 'Diabetes'. It then counts the number of records in the 'DiabetesPatients' table to get the total number of patients treated for diabetes."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store drug efficacy data and then display the average efficacy of a specific drug.,"CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), Manufacturer VARCHAR(50)); CREATE TABLE DrugEfficacy (EfficacyID INT PRIMARY KEY, DrugID INT, EfficacyRate DECIMAL(5,2), SideEffects VARCHAR(100), FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID));","CREATE TABLE SpecificDrugEfficacy AS SELECT d.DrugID, d.DrugName, de.EfficacyRate FROM Drugs d INNER JOIN DrugEfficacy de ON d.DrugID = de.DrugID WHERE d.DrugName = 'Aspirin'; SELECT AVG(EfficacyRate) AS AvgEfficacy FROM SpecificDrugEfficacy;","The query first creates a new table 'SpecificDrugEfficacy' by joining the 'Drugs' and 'DrugEfficacy' tables on the 'DrugID' field, filtering for records where the drug name is 'Aspirin'. It then calculates the average efficacy rate for 'Aspirin' from the 'SpecificDrugEfficacy' table."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store patient treatment protocols and then display the most common treatment for hypertension.,"CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, ProtocolName VARCHAR(100), Description TEXT); CREATE TABLE PatientTreatments (TreatmentID INT PRIMARY KEY, PatientID INT, ProtocolID INT, StartDate DATE, EndDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (ProtocolID) REFERENCES TreatmentProtocols(ProtocolID));","CREATE TABLE HypertensionTreatments AS SELECT pt.ProtocolID, tp.ProtocolName, COUNT(*) AS TreatmentCount FROM PatientTreatments pt INNER JOIN TreatmentProtocols tp ON pt.ProtocolID = tp.ProtocolID INNER JOIN MedicalHistories mh ON pt.PatientID = mh.PatientID WHERE mh.Diagnosis = 'Hypertension' GROUP BY pt.ProtocolID, tp.ProtocolName ORDER BY TreatmentCount DESC; SELECT ProtocolName FROM HypertensionTreatments LIMIT 1;","The query first creates a new table 'HypertensionTreatments' by joining the 'PatientTreatments', 'TreatmentProtocols', and 'MedicalHistories' tables, filtering for records where the diagnosis is 'Hypertension'. It then groups the results by 'ProtocolID' and 'ProtocolName', counts the number of treatments, and orders them in descending order. Finally, it selects the most common treatment for hypertension."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store patient outcomes and then display the average recovery time for patients treated with a specific protocol.,"CREATE TABLE PatientOutcomes (OutcomeID INT PRIMARY KEY, PatientID INT, ProtocolID INT, RecoveryTime INT, OutcomeDescription TEXT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (ProtocolID) REFERENCES TreatmentProtocols(ProtocolID));","CREATE TABLE ProtocolRecoveryTimes AS SELECT po.PatientID, po.ProtocolID, po.RecoveryTime FROM PatientOutcomes po INNER JOIN TreatmentProtocols tp ON po.ProtocolID = tp.ProtocolID WHERE tp.ProtocolName = 'Chemotherapy'; SELECT AVG(RecoveryTime) AS AvgRecoveryTime FROM ProtocolRecoveryTimes;","The query first creates a new table 'ProtocolRecoveryTimes' by joining the 'PatientOutcomes' and 'TreatmentProtocols' tables on the 'ProtocolID' field, filtering for records where the protocol name is 'Chemotherapy'. It then calculates the average recovery time for patients treated with 'Chemotherapy' from the 'ProtocolRecoveryTimes' table."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store patient side effects from treatments and then display the most common side effect for a specific drug.,"CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, PatientID INT, DrugID INT, SideEffectDescription TEXT, Severity VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID));","CREATE TABLE DrugSideEffects AS SELECT se.DrugID, se.SideEffectDescription, COUNT(*) AS EffectCount FROM SideEffects se INNER JOIN Drugs d ON se.DrugID = d.DrugID WHERE d.DrugName = 'Ibuprofen' GROUP BY se.DrugID, se.SideEffectDescription ORDER BY EffectCount DESC; SELECT SideEffectDescription FROM DrugSideEffects LIMIT 1;","The query first creates a new table 'DrugSideEffects' by joining the 'SideEffects' and 'Drugs' tables on the 'DrugID' field, filtering for records where the drug name is 'Ibuprofen'. It then groups the results by 'DrugID' and 'SideEffectDescription', counts the number of occurrences of each side effect, and orders them in descending order. Finally, it selects the most common side effect for 'Ibuprofen'."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the top 10 players with the highest average points per game in the last season.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT, Position VARCHAR(20)); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, Date DATE, Season VARCHAR(20)); CREATE TABLE PlayerStats (StatID INT PRIMARY KEY, PlayerID INT, GameID INT, Points INT, Assists INT, Rebounds INT);","WITH PlayerAverages AS (SELECT P.PlayerName, AVG(PS.Points) AS AvgPoints FROM Players P JOIN PlayerStats PS ON P.PlayerID = PS.PlayerID JOIN Games G ON PS.GameID = G.GameID WHERE G.Season = '2022-2023' GROUP BY P.PlayerName) SELECT PlayerName, AvgPoints FROM PlayerAverages ORDER BY AvgPoints DESC LIMIT 10;","The query first creates a common table expression (CTE) called PlayerAverages that calculates the average points per game for each player in the 2022-2023 season. It then selects the top 10 players with the highest average points per game, ordering them in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the total revenue generated by each team from ticket sales in the current year.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, TeamID INT, Date DATE, Season VARCHAR(20)); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, GameID INT, TicketsSold INT, TicketPrice DECIMAL);","SELECT T.TeamName, SUM(TS.TicketsSold * TS.TicketPrice) AS TotalRevenue FROM Teams T JOIN Games G ON T.TeamID = G.TeamID JOIN TicketSales TS ON G.GameID = TS.GameID WHERE YEAR(G.Date) = YEAR(CURDATE()) GROUP BY T.TeamName;","The query calculates the total revenue generated by each team from ticket sales in the current year by joining the Teams, Games, and TicketSales tables. It multiplies the number of tickets sold by the ticket price for each game and sums these values for each team."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the top 5 most attended games in the last five years.,"CREATE TABLE Games (GameID INT PRIMARY KEY, Date DATE, Season VARCHAR(20)); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, GameID INT, AttendanceCount INT);","SELECT G.GameID, G.Date, A.AttendanceCount FROM Games G JOIN Attendance A ON G.GameID = A.GameID WHERE G.Date >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) ORDER BY A.AttendanceCount DESC LIMIT 5;","The query retrieves the top 5 most attended games in the last five years by joining the Games and Attendance tables. It filters the games that occurred in the last five years and orders them by attendance count in descending order, limiting the result to the top 5."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Identify the players who have scored more than 1000 points in their career.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE PlayerStats (StatID INT PRIMARY KEY, PlayerID INT, GameID INT, Points INT);","SELECT P.PlayerName, SUM(PS.Points) AS TotalPoints FROM Players P JOIN PlayerStats PS ON P.PlayerID = PS.PlayerID GROUP BY P.PlayerName HAVING SUM(PS.Points) > 1000;",The query identifies players who have scored more than 1000 points in their career by joining the Players and PlayerStats tables. It groups the results by player name and filters those with a total points sum greater than 1000.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Determine the average number of assists per game for each player in the current season.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, Date DATE, Season VARCHAR(20)); CREATE TABLE PlayerStats (StatID INT PRIMARY KEY, PlayerID INT, GameID INT, Assists INT);","WITH CurrentSeasonStats AS (SELECT PS.PlayerID, PS.Assists FROM PlayerStats PS JOIN Games G ON PS.GameID = G.GameID WHERE G.Season = '2023-2024') SELECT P.PlayerName, AVG(CS.Assists) AS AvgAssists FROM Players P JOIN CurrentSeasonStats CS ON P.PlayerID = CS.PlayerID GROUP BY P.PlayerName;","The query calculates the average number of assists per game for each player in the current season by first creating a common table expression (CTE) called CurrentSeasonStats that filters player stats for the current season. It then joins this CTE with the Players table and calculates the average assists per game for each player, grouping the results by player name."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 10 most popular sustainable fashion brands in different regions based on consumer purchases and reviews.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(100), IsSustainable BOOLEAN); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, BrandID INT, RegionID INT, PurchaseDate DATE, Quantity INT); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, BrandID INT, Rating DECIMAL(2,1));","WITH BrandPopularity AS (SELECT B.BrandName, R.RegionName, SUM(P.Quantity) AS TotalPurchases, AVG(Rev.Rating) AS AvgRating FROM Purchases P INNER JOIN Brands B ON P.BrandID = B.BrandID INNER JOIN Regions R ON P.RegionID = R.RegionID LEFT JOIN Reviews Rev ON B.BrandID = Rev.BrandID WHERE B.IsSustainable = TRUE GROUP BY B.BrandName, R.RegionName), RankedBrands AS (SELECT BrandName, RegionName, TotalPurchases, AvgRating, DENSE_RANK() OVER (PARTITION BY RegionName ORDER BY TotalPurchases DESC, AvgRating DESC) AS Rank FROM BrandPopularity) SELECT BrandName, RegionName, TotalPurchases, AvgRating FROM RankedBrands WHERE Rank <= 10;","The query first creates a common table expression (CTE) to calculate the total purchases and average rating for each sustainable brand in different regions. It then ranks the brands within each region based on total purchases and average rating using the DENSE_RANK function. Finally, it selects the top 10 brands per region."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the correlation between consumer demographics and their preference for sustainable fashion brands.,"CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, AgeGroup VARCHAR(50), Gender VARCHAR(10), IncomeLevel VARCHAR(50)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE, Quantity INT); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(100), IsSustainable BOOLEAN);","SELECT C.AgeGroup, C.Gender, C.IncomeLevel, COUNT(P.PurchaseID) AS PurchaseCount FROM Consumers C INNER JOIN Purchases P ON C.ConsumerID = P.ConsumerID INNER JOIN Brands B ON P.BrandID = B.BrandID WHERE B.IsSustainable = TRUE GROUP BY C.AgeGroup, C.Gender, C.IncomeLevel ORDER BY PurchaseCount DESC;","The query joins the Consumers, Purchases, and Brands tables to count the number of purchases of sustainable fashion brands by different consumer demographics. It groups the results by age group, gender, and income level, and orders the results by purchase count in descending order."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard that shows the monthly sales trends for different fashion categories across various regions.,"CREATE TABLE Categories (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(100)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE Sales (SaleID INT PRIMARY KEY, CategoryID INT, RegionID INT, SaleDate DATE, Quantity INT, Revenue DECIMAL(10,2));","SELECT C.CategoryName, R.RegionName, DATE_TRUNC('month', S.SaleDate) AS Month, SUM(S.Quantity) AS TotalQuantity, SUM(S.Revenue) AS TotalRevenue FROM Sales S INNER JOIN Categories C ON S.CategoryID = C.CategoryID INNER JOIN Regions R ON S.RegionID = R.RegionID GROUP BY C.CategoryName, R.RegionName, DATE_TRUNC('month', S.SaleDate) ORDER BY Month, C.CategoryName, R.RegionName;","The query joins the Sales, Categories, and Regions tables to calculate the total quantity and revenue of sales for each fashion category in different regions on a monthly basis. It groups the results by category name, region name, and month, and orders the results accordingly."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 regions with the highest average spending on luxury fashion items.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, RegionID INT, ItemType VARCHAR(50), AmountSpent DECIMAL(10,2));","WITH RegionSpending AS (SELECT R.RegionName, AVG(P.AmountSpent) AS AvgSpending FROM Purchases P INNER JOIN Regions R ON P.RegionID = R.RegionID WHERE P.ItemType = 'Luxury' GROUP BY R.RegionName), RankedRegions AS (SELECT RegionName, AvgSpending, DENSE_RANK() OVER (ORDER BY AvgSpending DESC) AS Rank FROM RegionSpending) SELECT RegionName, AvgSpending FROM RankedRegions WHERE Rank <= 5;","The query first creates a common table expression (CTE) to calculate the average spending on luxury fashion items for each region. It then ranks the regions based on average spending using the DENSE_RANK function. Finally, it selects the top 5 regions with the highest average spending."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the impact of promotional campaigns on sales of eco-friendly fashion products.,"CREATE TABLE Campaigns (CampaignID INT PRIMARY KEY, CampaignName VARCHAR(100), StartDate DATE, EndDate DATE); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, SaleDate DATE, Quantity INT, Revenue DECIMAL(10,2)); CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(100), IsEcoFriendly BOOLEAN);","WITH CampaignSales AS (SELECT C.CampaignName, SUM(S.Quantity) AS TotalQuantity, SUM(S.Revenue) AS TotalRevenue FROM Sales S INNER JOIN Products P ON S.ProductID = P.ProductID INNER JOIN Campaigns C ON S.SaleDate BETWEEN C.StartDate AND C.EndDate WHERE P.IsEcoFriendly = TRUE GROUP BY C.CampaignName) SELECT CampaignName, TotalQuantity, TotalRevenue FROM CampaignSales ORDER BY TotalRevenue DESC;","The query joins the Sales, Products, and Campaigns tables to calculate the total quantity and revenue of sales for eco-friendly fashion products during promotional campaigns. It groups the results by campaign name and orders the results by total revenue in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total government spending by department and year, and then display the top 3 departments with the highest spending for the most recent year.","CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), Year INT, TotalSpending DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, Year, TotalSpending) VALUES (1, 'Health', 2022, 5000000), (2, 'Education', 2022, 3000000), (3, 'Defense', 2022, 7000000), (4, 'Health', 2021, 4800000), (5, 'Education', 2021, 2900000);","WITH RecentYear AS (SELECT MAX(Year) AS MostRecentYear FROM GovernmentSpending), RankedDepartments AS (SELECT DepartmentName, TotalSpending, DENSE_RANK() OVER (ORDER BY TotalSpending DESC) AS Rank FROM GovernmentSpending WHERE Year = (SELECT MostRecentYear FROM RecentYear)) SELECT DepartmentName, TotalSpending FROM RankedDepartments WHERE Rank <= 3;",The query first identifies the most recent year in the GovernmentSpending table using a common table expression (CTE). It then ranks departments based on their total spending for that year and selects the top 3 departments with the highest spending.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of bills passed by each legislative body per year, and then display the legislative body that passed the most bills in the last 5 years.","CREATE TABLE LegislativeActivity (LegislativeBodyID INT PRIMARY KEY, LegislativeBodyName VARCHAR(100), Year INT, BillsPassed INT); INSERT INTO LegislativeActivity (LegislativeBodyID, LegislativeBodyName, Year, BillsPassed) VALUES (1, 'Senate', 2022, 150), (2, 'House of Representatives', 2022, 200), (3, 'Senate', 2021, 140), (4, 'House of Representatives', 2021, 190), (5, 'Senate', 2020, 130);","WITH LastFiveYears AS (SELECT Year FROM LegislativeActivity WHERE Year >= YEAR(CURRENT_DATE) - 5), RankedBodies AS (SELECT LegislativeBodyName, SUM(BillsPassed) AS TotalBills, DENSE_RANK() OVER (ORDER BY SUM(BillsPassed) DESC) AS Rank FROM LegislativeActivity WHERE Year IN (SELECT Year FROM LastFiveYears) GROUP BY LegislativeBodyName) SELECT LegislativeBodyName, TotalBills FROM RankedBodies WHERE Rank = 1;","The query first identifies the years within the last 5 years using a common table expression (CTE). It then sums the number of bills passed by each legislative body during these years, ranks them, and selects the legislative body that passed the most bills."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the demographic distribution of citizens by region and age group, and then display the region with the highest population of citizens aged 65 and above.","CREATE TABLE CitizenDemographics (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), AgeGroup VARCHAR(50), Population INT); INSERT INTO CitizenDemographics (RegionID, RegionName, AgeGroup, Population) VALUES (1, 'North', '65+', 50000), (2, 'South', '65+', 60000), (3, 'East', '65+', 55000), (4, 'West', '65+', 45000), (5, 'North', '18-64', 200000);","WITH AgeGroup65Plus AS (SELECT RegionName, Population FROM CitizenDemographics WHERE AgeGroup = '65+'), RankedRegions AS (SELECT RegionName, Population, DENSE_RANK() OVER (ORDER BY Population DESC) AS Rank FROM AgeGroup65Plus) SELECT RegionName, Population FROM RankedRegions WHERE Rank = 1;",The query first filters the CitizenDemographics table to include only the '65+' age group using a common table expression (CTE). It then ranks the regions based on the population of citizens aged 65 and above and selects the region with the highest population.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the effectiveness ratings of various government programs by year, and then display the top 5 most effective programs for the current year.","CREATE TABLE ProgramEffectiveness (ProgramID INT PRIMARY KEY, ProgramName VARCHAR(100), Year INT, EffectivenessRating DECIMAL); INSERT INTO ProgramEffectiveness (ProgramID, ProgramName, Year, EffectivenessRating) VALUES (1, 'Healthcare Improvement', 2022, 4.5), (2, 'Education Reform', 2022, 4.2), (3, 'Defense Upgrade', 2022, 4.8), (4, 'Healthcare Improvement', 2021, 4.3), (5, 'Education Reform', 2021, 4.1);","WITH CurrentYear AS (SELECT YEAR(CURRENT_DATE) AS ThisYear), RankedPrograms AS (SELECT ProgramName, EffectivenessRating, DENSE_RANK() OVER (ORDER BY EffectivenessRating DESC) AS Rank FROM ProgramEffectiveness WHERE Year = (SELECT ThisYear FROM CurrentYear)) SELECT ProgramName, EffectivenessRating FROM RankedPrograms WHERE Rank <= 5;",The query first identifies the current year using a common table expression (CTE). It then ranks government programs based on their effectiveness ratings for the current year and selects the top 5 most effective programs.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of public policy initiatives by category and year, and then display the category with the most initiatives in the past decade.","CREATE TABLE PublicPolicyInitiatives (InitiativeID INT PRIMARY KEY, Category VARCHAR(100), Year INT, InitiativeCount INT); INSERT INTO PublicPolicyInitiatives (InitiativeID, Category, Year, InitiativeCount) VALUES (1, 'Healthcare', 2022, 50), (2, 'Education', 2022, 40), (3, 'Defense', 2022, 30), (4, 'Healthcare', 2021, 45), (5, 'Education', 2021, 35);","WITH LastDecade AS (SELECT Year FROM PublicPolicyInitiatives WHERE Year >= YEAR(CURRENT_DATE) - 10), RankedCategories AS (SELECT Category, SUM(InitiativeCount) AS TotalInitiatives, DENSE_RANK() OVER (ORDER BY SUM(InitiativeCount) DESC) AS Rank FROM PublicPolicyInitiatives WHERE Year IN (SELECT Year FROM LastDecade) GROUP BY Category) SELECT Category, TotalInitiatives FROM RankedCategories WHERE Rank = 1;","The query first identifies the years within the last decade using a common table expression (CTE). It then sums the number of initiatives by category during these years, ranks them, and selects the category with the most initiatives."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average crop yield per hectare for each crop type in the last five years.,"CREATE TABLE CropYields (Year INT, CropType VARCHAR(50), Region VARCHAR(50), YieldPerHectare DECIMAL); INSERT INTO CropYields (Year, CropType, Region, YieldPerHectare) VALUES (2018, 'Wheat', 'North America', 3.5), (2019, 'Wheat', 'North America', 3.7), (2020, 'Wheat', 'North America', 3.6), (2021, 'Wheat', 'North America', 3.8), (2022, 'Wheat', 'North America', 3.9), (2018, 'Corn', 'Europe', 7.2), (2019, 'Corn', 'Europe', 7.4), (2020, 'Corn', 'Europe', 7.3), (2021, 'Corn', 'Europe', 7.5), (2022, 'Corn', 'Europe', 7.6);","SELECT CropType, AVG(YieldPerHectare) AS AvgYield FROM CropYields WHERE Year BETWEEN 2018 AND 2022 GROUP BY CropType;",The query calculates the average yield per hectare for each crop type over the last five years by grouping the data by CropType and using the AVG function to find the average yield.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",List the top 3 regions with the highest average crop yield for rice in the past decade.,"CREATE TABLE CropYields (Year INT, CropType VARCHAR(50), Region VARCHAR(50), YieldPerHectare DECIMAL); INSERT INTO CropYields (Year, CropType, Region, YieldPerHectare) VALUES (2013, 'Rice', 'Asia', 4.5), (2014, 'Rice', 'Asia', 4.6), (2015, 'Rice', 'Asia', 4.7), (2016, 'Rice', 'Asia', 4.8), (2017, 'Rice', 'Asia', 4.9), (2018, 'Rice', 'Asia', 5.0), (2019, 'Rice', 'Asia', 5.1), (2020, 'Rice', 'Asia', 5.2), (2021, 'Rice', 'Asia', 5.3), (2022, 'Rice', 'Asia', 5.4);","SELECT Region, AVG(YieldPerHectare) AS AvgYield FROM CropYields WHERE CropType = 'Rice' AND Year BETWEEN 2013 AND 2022 GROUP BY Region ORDER BY AvgYield DESC LIMIT 3;","The query calculates the average yield per hectare for rice in each region over the past decade and then selects the top 3 regions with the highest average yield by using the AVG function, grouping by Region, and ordering the results in descending order."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard showing the total production of corn in each region for the current year.,"CREATE TABLE CropProduction (Year INT, CropType VARCHAR(50), Region VARCHAR(50), TotalProduction DECIMAL); INSERT INTO CropProduction (Year, CropType, Region, TotalProduction) VALUES (2023, 'Corn', 'North America', 5000), (2023, 'Corn', 'Europe', 4500), (2023, 'Corn', 'Asia', 4800);","SELECT Region, SUM(TotalProduction) AS TotalCornProduction FROM CropProduction WHERE Year = 2023 AND CropType = 'Corn' GROUP BY Region;","The query calculates the total production of corn in each region for the current year by summing the TotalProduction for each region where the CropType is 'Corn' and the Year is 2023, and then grouping the results by Region."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the regions with the highest increase in wheat yield per hectare over the last five years.,"CREATE TABLE CropYields (Year INT, CropType VARCHAR(50), Region VARCHAR(50), YieldPerHectare DECIMAL); INSERT INTO CropYields (Year, CropType, Region, YieldPerHectare) VALUES (2018, 'Wheat', 'North America', 3.5), (2019, 'Wheat', 'North America', 3.7), (2020, 'Wheat', 'North America', 3.6), (2021, 'Wheat', 'North America', 3.8), (2022, 'Wheat', 'North America', 3.9), (2018, 'Wheat', 'Europe', 4.0), (2019, 'Wheat', 'Europe', 4.1), (2020, 'Wheat', 'Europe', 4.2), (2021, 'Wheat', 'Europe', 4.3), (2022, 'Wheat', 'Europe', 4.4);","WITH YieldChange AS (SELECT Region, (MAX(YieldPerHectare) - MIN(YieldPerHectare)) AS YieldIncrease FROM CropYields WHERE CropType = 'Wheat' AND Year BETWEEN 2018 AND 2022 GROUP BY Region) SELECT Region, YieldIncrease FROM YieldChange ORDER BY YieldIncrease DESC;","The query calculates the increase in wheat yield per hectare for each region over the last five years by finding the difference between the maximum and minimum yield per hectare for each region, and then ordering the results in descending order of yield increase."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the average yield per hectare for all crops in each region for the last three years.,"CREATE TABLE CropYields (Year INT, CropType VARCHAR(50), Region VARCHAR(50), YieldPerHectare DECIMAL); INSERT INTO CropYields (Year, CropType, Region, YieldPerHectare) VALUES (2020, 'Wheat', 'North America', 3.6), (2021, 'Wheat', 'North America', 3.8), (2022, 'Wheat', 'North America', 3.9), (2020, 'Corn', 'Europe', 7.3), (2021, 'Corn', 'Europe', 7.5), (2022, 'Corn', 'Europe', 7.6);","SELECT Region, AVG(YieldPerHectare) AS AvgYield FROM CropYields WHERE Year BETWEEN 2020 AND 2022 GROUP BY Region;",The query calculates the average yield per hectare for all crops in each region over the last three years by grouping the data by Region and using the AVG function to find the average yield.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert a new hotel record into the Hotels table with the name 'Sunset Resort', located in 'Hawaii', with a rating of 4.5.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100), Rating DECIMAL);","INSERT INTO Hotels (HotelID, HotelName, Location, Rating) VALUES (1, 'Sunset Resort', 'Hawaii', 4.5);","The query inserts a new record into the Hotels table with the specified hotel name, location, and rating."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the rating of the hotel 'Oceanview Inn' to 4.7 in the Hotels table.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100), Rating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, Location, Rating) VALUES (2, 'Oceanview Inn', 'California', 4.3);",UPDATE Hotels SET Rating = 4.7 WHERE HotelName = 'Oceanview Inn';,The query updates the rating of the hotel named 'Oceanview Inn' to 4.7 in the Hotels table.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Delete all records of customers who have not made a booking in the last year from the Customers table.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), LastBookingDate DATE); INSERT INTO Customers (CustomerID, CustomerName, LastBookingDate) VALUES (1, 'John Doe', '2022-01-15'), (2, 'Jane Smith', '2021-05-10');","DELETE FROM Customers WHERE LastBookingDate < DATEADD(YEAR, -1, GETDATE());",The query deletes all customer records from the Customers table where the last booking date is older than one year from the current date.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert a new travel package into the TravelPackages table with the name 'Adventure Tour', destination 'New Zealand', and price 2500.","CREATE TABLE TravelPackages (PackageID INT PRIMARY KEY, PackageName VARCHAR(100), Destination VARCHAR(100), Price DECIMAL);","INSERT INTO TravelPackages (PackageID, PackageName, Destination, Price) VALUES (1, 'Adventure Tour', 'New Zealand', 2500);","The query inserts a new travel package record into the TravelPackages table with the specified package name, destination, and price."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the price of the travel package 'Luxury Cruise' to 5000 in the TravelPackages table.,"CREATE TABLE TravelPackages (PackageID INT PRIMARY KEY, PackageName VARCHAR(100), Destination VARCHAR(100), Price DECIMAL); INSERT INTO TravelPackages (PackageID, PackageName, Destination, Price) VALUES (2, 'Luxury Cruise', 'Caribbean', 4500);",UPDATE TravelPackages SET Price = 5000 WHERE PackageName = 'Luxury Cruise';,The query updates the price of the travel package named 'Luxury Cruise' to 5000 in the TravelPackages table.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that tracks the average temperature changes across different regions over the past decade, and then display the top 3 regions with the highest average temperature increase.","CREATE TABLE TemperatureChanges (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, AvgTemperature DECIMAL); INSERT INTO TemperatureChanges (RegionID, RegionName, Year, AvgTemperature) VALUES (1, 'North America', 2010, 15.5), (1, 'North America', 2020, 16.5), (2, 'Europe', 2010, 14.0), (2, 'Europe', 2020, 15.2), (3, 'Asia', 2010, 20.0), (3, 'Asia', 2020, 21.5);","WITH TempDiff AS (SELECT RegionName, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS TempIncrease FROM TemperatureChanges GROUP BY RegionName), RankedRegions AS (SELECT RegionName, TempIncrease, ROW_NUMBER() OVER (ORDER BY TempIncrease DESC) AS Rank FROM TempDiff) SELECT RegionName, TempIncrease FROM RankedRegions WHERE Rank <= 3;",The query first calculates the temperature increase for each region by subtracting the minimum average temperature from the maximum average temperature over the past decade. It then ranks these regions based on the temperature increase and selects the top 3 regions with the highest temperature increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the annual deforestation rates for various countries and then display the top 5 countries with the highest deforestation rates in the last year.,"CREATE TABLE DeforestationRates (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, DeforestationRate DECIMAL); INSERT INTO DeforestationRates (CountryID, CountryName, Year, DeforestationRate) VALUES (1, 'Brazil', 2020, 1.5), (2, 'Indonesia', 2020, 1.2), (3, 'DR Congo', 2020, 1.0), (4, 'Peru', 2020, 0.8), (5, 'Malaysia', 2020, 0.7);","WITH RankedCountries AS (SELECT CountryName, DeforestationRate, RANK() OVER (ORDER BY DeforestationRate DESC) AS Rank FROM DeforestationRates WHERE Year = 2020) SELECT CountryName, DeforestationRate FROM RankedCountries WHERE Rank <= 5;",The query ranks countries based on their deforestation rates for the year 2020 using the RANK function and then selects the top 5 countries with the highest deforestation rates.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects",Create a table that tracks the carbon emissions of different industries over the past five years and then display the industry with the highest average annual increase in carbon emissions.,"CREATE TABLE CarbonEmissions (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CarbonEmissions (IndustryID, IndustryName, Year, Emissions) VALUES (1, 'Energy', 2016, 500), (1, 'Energy', 2020, 600), (2, 'Transport', 2016, 300), (2, 'Transport', 2020, 400), (3, 'Agriculture', 2016, 200), (3, 'Agriculture', 2020, 250);","WITH EmissionDiff AS (SELECT IndustryName, (MAX(Emissions) - MIN(Emissions)) / 5.0 AS AvgAnnualIncrease FROM CarbonEmissions GROUP BY IndustryName), RankedIndustries AS (SELECT IndustryName, AvgAnnualIncrease, ROW_NUMBER() OVER (ORDER BY AvgAnnualIncrease DESC) AS Rank FROM EmissionDiff) SELECT IndustryName, AvgAnnualIncrease FROM RankedIndustries WHERE Rank = 1;",The query calculates the average annual increase in carbon emissions for each industry by dividing the difference between the maximum and minimum emissions over the past five years by 5. It then ranks these industries based on the average annual increase and selects the industry with the highest average annual increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects",Create a table that records the biodiversity index for various ecosystems and then display the top 3 ecosystems with the highest biodiversity index.,"CREATE TABLE BiodiversityIndex (EcosystemID INT PRIMARY KEY, EcosystemName VARCHAR(50), Year INT, BiodiversityIndex DECIMAL); INSERT INTO BiodiversityIndex (EcosystemID, EcosystemName, Year, BiodiversityIndex) VALUES (1, 'Amazon Rainforest', 2020, 95.5), (2, 'Great Barrier Reef', 2020, 90.0), (3, 'Congo Basin', 2020, 88.0), (4, 'Sundarbans', 2020, 85.0), (5, 'Galapagos Islands', 2020, 80.0);","WITH RankedEcosystems AS (SELECT EcosystemName, BiodiversityIndex, RANK() OVER (ORDER BY BiodiversityIndex DESC) AS Rank FROM BiodiversityIndex WHERE Year = 2020) SELECT EcosystemName, BiodiversityIndex FROM RankedEcosystems WHERE Rank <= 3;",The query ranks ecosystems based on their biodiversity index for the year 2020 using the RANK function and then selects the top 3 ecosystems with the highest biodiversity index.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects",Create a table that tracks renewable energy production by country and then display the top 5 countries with the highest increase in renewable energy production over the past decade.,"CREATE TABLE RenewableEnergyProduction (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, EnergyProduced DECIMAL); INSERT INTO RenewableEnergyProduction (CountryID, CountryName, Year, EnergyProduced) VALUES (1, 'Germany', 2010, 100), (1, 'Germany', 2020, 200), (2, 'China', 2010, 150), (2, 'China', 2020, 300), (3, 'USA', 2010, 120), (3, 'USA', 2020, 250), (4, 'India', 2010, 80), (4, 'India', 2020, 180), (5, 'Brazil', 2010, 90), (5, 'Brazil', 2020, 170);","WITH EnergyDiff AS (SELECT CountryName, (MAX(EnergyProduced) - MIN(EnergyProduced)) AS EnergyIncrease FROM RenewableEnergyProduction GROUP BY CountryName), RankedCountries AS (SELECT CountryName, EnergyIncrease, ROW_NUMBER() OVER (ORDER BY EnergyIncrease DESC) AS Rank FROM EnergyDiff) SELECT CountryName, EnergyIncrease FROM RankedCountries WHERE Rank <= 5;",The query calculates the increase in renewable energy production for each country by subtracting the minimum energy produced from the maximum energy produced over the past decade. It then ranks these countries based on the energy increase and selects the top 5 countries with the highest increase in renewable energy production.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the top 10 most popular sustainable fashion brands among consumers in different regions.,"CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, Name VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE);","WITH PopularBrands AS (SELECT B.BrandName, C.Region, COUNT(P.PurchaseID) AS PurchaseCount FROM Purchases P INNER JOIN Consumers C ON P.ConsumerID = C.ConsumerID INNER JOIN Brands B ON P.BrandID = B.BrandID WHERE B.IsSustainable = TRUE GROUP BY B.BrandName, C.Region) SELECT BrandName, Region, PurchaseCount FROM PopularBrands ORDER BY PurchaseCount DESC LIMIT 10;",The query first creates a common table expression (CTE) named PopularBrands that counts the number of purchases for each sustainable brand in different regions. It then selects the top 10 most popular sustainable fashion brands based on the purchase count.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average spending of consumers on sustainable fashion in each region.,"CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, Name VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE, AmountSpent DECIMAL);","SELECT C.Region, AVG(P.AmountSpent) AS AvgSpending FROM Purchases P INNER JOIN Consumers C ON P.ConsumerID = C.ConsumerID INNER JOIN Brands B ON P.BrandID = B.BrandID WHERE B.IsSustainable = TRUE GROUP BY C.Region;","The query calculates the average amount spent by consumers on sustainable fashion in each region by joining the Purchases, Consumers, and Brands tables and grouping the results by region."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the top 5 regions with the highest number of fashion influencers and their average follower count.,"CREATE TABLE Influencers (InfluencerID INT PRIMARY KEY, Name VARCHAR(50), Region VARCHAR(50), FollowerCount INT);","WITH RegionInfluencers AS (SELECT Region, COUNT(InfluencerID) AS InfluencerCount, AVG(FollowerCount) AS AvgFollowerCount FROM Influencers GROUP BY Region) SELECT Region, InfluencerCount, AvgFollowerCount FROM RegionInfluencers ORDER BY InfluencerCount DESC LIMIT 5;",The query creates a common table expression (CTE) named RegionInfluencers that counts the number of influencers and calculates the average follower count for each region. It then selects the top 5 regions with the highest number of influencers.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Identify the top 3 fashion trends in each region based on consumer purchases.,"CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, Name VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Trends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, TrendID INT, PurchaseDate DATE);","WITH TrendPopularity AS (SELECT T.TrendName, C.Region, COUNT(P.PurchaseID) AS PurchaseCount, ROW_NUMBER() OVER (PARTITION BY C.Region ORDER BY COUNT(P.PurchaseID) DESC) AS Rank FROM Purchases P INNER JOIN Consumers C ON P.ConsumerID = C.ConsumerID INNER JOIN Trends T ON P.TrendID = T.TrendID GROUP BY T.TrendName, C.Region) SELECT TrendName, Region, PurchaseCount FROM TrendPopularity WHERE Rank <= 3;",The query creates a common table expression (CTE) named TrendPopularity that ranks fashion trends in each region based on the number of purchases. It then selects the top 3 trends for each region.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Determine the correlation between consumer age and spending on luxury fashion items.,"CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, Name VARCHAR(50), Age INT); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsLuxury BOOLEAN); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE, AmountSpent DECIMAL);","SELECT C.Age, AVG(P.AmountSpent) AS AvgSpending FROM Purchases P INNER JOIN Consumers C ON P.ConsumerID = C.ConsumerID INNER JOIN Brands B ON P.BrandID = B.BrandID WHERE B.IsLuxury = TRUE GROUP BY C.Age;","The query calculates the average amount spent by consumers on luxury fashion items for each age group by joining the Purchases, Consumers, and Brands tables and grouping the results by age."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Show the total sales for each vehicle model in the year 2022.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, QuantitySold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50));","SELECT vm.ModelName, SUM(vs.QuantitySold) AS TotalSales FROM VehicleSales vs JOIN VehicleModels vm ON vs.ModelID = vm.ModelID WHERE YEAR(vs.SaleDate) = 2022 GROUP BY vm.ModelName;","The query joins the VehicleSales and VehicleModels tables on the ModelID column. It then filters the sales records to include only those from the year 2022 and groups the results by vehicle model name. Finally, it calculates the total quantity sold for each model."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the top 3 countries with the highest number of electric vehicle sales.,"CREATE TABLE CountrySales (CountryID INT PRIMARY KEY, CountryName VARCHAR(50)); CREATE TABLE ElectricVehicleSales (SaleID INT PRIMARY KEY, CountryID INT, SaleDate DATE, QuantitySold INT);","SELECT cs.CountryName, SUM(evs.QuantitySold) AS TotalSales FROM ElectricVehicleSales evs JOIN CountrySales cs ON evs.CountryID = cs.CountryID GROUP BY cs.CountryName ORDER BY TotalSales DESC LIMIT 3;","The query joins the ElectricVehicleSales and CountrySales tables on the CountryID column. It groups the results by country name and calculates the total quantity of electric vehicles sold in each country. The results are then ordered in descending order of total sales, and the top 3 countries are selected."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the average fuel efficiency of all hybrid vehicles sold in 2021.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, QuantitySold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50), AvgFuelEfficiency DECIMAL);",SELECT AVG(vm.AvgFuelEfficiency) AS AvgFuelEfficiency FROM VehicleSales vs JOIN VehicleModels vm ON vs.ModelID = vm.ModelID WHERE vm.VehicleType = 'Hybrid' AND YEAR(vs.SaleDate) = 2021;,The query joins the VehicleSales and VehicleModels tables on the ModelID column. It filters the records to include only hybrid vehicles sold in the year 2021 and calculates the average fuel efficiency of these vehicles.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Get the total number of vehicles sold by each manufacturer in 2020.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, QuantitySold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), ManufacturerID INT); CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50));","SELECT m.ManufacturerName, SUM(vs.QuantitySold) AS TotalSales FROM VehicleSales vs JOIN VehicleModels vm ON vs.ModelID = vm.ModelID JOIN Manufacturers m ON vm.ManufacturerID = m.ManufacturerID WHERE YEAR(vs.SaleDate) = 2020 GROUP BY m.ManufacturerName;","The query joins the VehicleSales, VehicleModels, and Manufacturers tables on their respective ID columns. It filters the sales records to include only those from the year 2020 and groups the results by manufacturer name. Finally, it calculates the total quantity sold for each manufacturer."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the names of all vehicle models that have never been sold.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, QuantitySold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50));",SELECT vm.ModelName FROM VehicleModels vm WHERE vm.ModelID NOT IN (SELECT DISTINCT vs.ModelID FROM VehicleSales vs);,The query selects the names of vehicle models from the VehicleModels table where the ModelID does not appear in the VehicleSales table. This ensures that only models that have never been sold are retrieved.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the sales data for electric and hybrid vehicles across different regions, and then display the regions where electric vehicle sales exceed hybrid vehicle sales.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleType VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (SaleID, VehicleType, Region, Sales) VALUES (1, 'Electric', 'North America', 15000), (2, 'Hybrid', 'North America', 12000), (3, 'Electric', 'Europe', 18000), (4, 'Hybrid', 'Europe', 20000), (5, 'Electric', 'Asia', 22000), (6, 'Hybrid', 'Asia', 21000);","WITH ElectricSales AS (SELECT Region, Sales FROM VehicleSales WHERE VehicleType = 'Electric'), HybridSales AS (SELECT Region, Sales FROM VehicleSales WHERE VehicleType = 'Hybrid') SELECT e.Region FROM ElectricSales e JOIN HybridSales h ON e.Region = h.Region WHERE e.Sales > h.Sales;",The query creates two common table expressions (CTEs) to separate electric and hybrid vehicle sales by region. It then joins these CTEs on the region and selects the regions where electric vehicle sales exceed hybrid vehicle sales.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the details of various automotive technologies and then display the technologies that are unique to electric vehicles.,"CREATE TABLE AutomotiveTechnologies (TechID INT PRIMARY KEY, TechName VARCHAR(50), VehicleType VARCHAR(50)); INSERT INTO AutomotiveTechnologies (TechID, TechName, VehicleType) VALUES (1, 'Regenerative Braking', 'Electric'), (2, 'Turbocharging', 'Hybrid'), (3, 'Battery Management System', 'Electric'), (4, 'Start-Stop System', 'Hybrid'), (5, 'Electric Drive Motor', 'Electric');","WITH ElectricTech AS (SELECT TechName FROM AutomotiveTechnologies WHERE VehicleType = 'Electric'), HybridTech AS (SELECT TechName FROM AutomotiveTechnologies WHERE VehicleType = 'Hybrid') SELECT TechName FROM ElectricTech EXCEPT SELECT TechName FROM HybridTech;",The query creates two common table expressions (CTEs) to separate technologies used in electric and hybrid vehicles. It then uses the EXCEPT set operation to select technologies that are unique to electric vehicles.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the global market share of different vehicle manufacturers and then display the manufacturers that have a market share greater than 10% in all regions.,"CREATE TABLE MarketShare (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50), Region VARCHAR(50), MarketShare DECIMAL); INSERT INTO MarketShare (ManufacturerID, ManufacturerName, Region, MarketShare) VALUES (1, 'Toyota', 'North America', 12.5), (2, 'Toyota', 'Europe', 11.0), (3, 'Toyota', 'Asia', 15.0), (4, 'Ford', 'North America', 9.0), (5, 'Ford', 'Europe', 10.5), (6, 'Ford', 'Asia', 8.0);","WITH HighMarketShare AS (SELECT ManufacturerName, Region FROM MarketShare WHERE MarketShare > 10) SELECT ManufacturerName FROM HighMarketShare GROUP BY ManufacturerName HAVING COUNT(DISTINCT Region) = (SELECT COUNT(DISTINCT Region) FROM MarketShare);",The query creates a common table expression (CTE) to select manufacturers with a market share greater than 10% in any region. It then groups these manufacturers by name and ensures they appear in all regions by comparing the count of distinct regions.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the CO2 emissions data for different vehicle models and then display the models that have lower emissions than the average emissions of all hybrid vehicles.,"CREATE TABLE CO2Emissions (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50), CO2Emission DECIMAL); INSERT INTO CO2Emissions (ModelID, ModelName, VehicleType, CO2Emission) VALUES (1, 'Model S', 'Electric', 0.0), (2, 'Model 3', 'Electric', 0.0), (3, 'Prius', 'Hybrid', 89.0), (4, 'Civic Hybrid', 'Hybrid', 95.0), (5, 'Leaf', 'Electric', 0.0);","WITH HybridEmissions AS (SELECT CO2Emission FROM CO2Emissions WHERE VehicleType = 'Hybrid'), AvgHybridEmissions AS (SELECT AVG(CO2Emission) AS AvgEmission FROM HybridEmissions) SELECT ModelName FROM CO2Emissions WHERE CO2Emission < (SELECT AvgEmission FROM AvgHybridEmissions);",The query creates a common table expression (CTE) to select CO2 emissions of hybrid vehicles and calculates their average. It then selects vehicle models with CO2 emissions lower than this average.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the annual sales data for different vehicle models and then display the models that have consistently increased sales over the years.,"CREATE TABLE AnnualSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Year INT, Sales INT); INSERT INTO AnnualSales (SaleID, ModelName, Year, Sales) VALUES (1, 'Model S', 2018, 5000), (2, 'Model S', 2019, 7000), (3, 'Model S', 2020, 9000), (4, 'Model 3', 2018, 8000), (5, 'Model 3', 2019, 7500), (6, 'Model 3', 2020, 8500);","WITH SalesGrowth AS (SELECT ModelName, Year, Sales, LAG(Sales) OVER (PARTITION BY ModelName ORDER BY Year) AS PrevSales FROM AnnualSales) SELECT ModelName FROM SalesGrowth WHERE Sales > PrevSales GROUP BY ModelName HAVING COUNT(*) = (SELECT COUNT(DISTINCT Year) FROM AnnualSales);",The query creates a common table expression (CTE) to calculate the previous year's sales for each model using the LAG function. It then selects models that have increased sales every year by ensuring the count of years with increased sales matches the total number of distinct years.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert a new record for an athlete's performance in a recent event and then retrieve all athletes who have participated in more than 3 events.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, EventID INT, PerformanceTime DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","INSERT INTO Performance (PerformanceID, AthleteID, EventID, PerformanceTime) VALUES (101, 1, 5, 9.58); SELECT AthleteName FROM Athletes WHERE AthleteID IN (SELECT AthleteID FROM Performance GROUP BY AthleteID HAVING COUNT(EventID) > 3);",The query first inserts a new performance record for an athlete. Then it retrieves the names of athletes who have participated in more than 3 events by using a subquery that groups performances by AthleteID and filters those with a count greater than 3.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Update the ticket sales for a specific sports event and then find all events where ticket sales exceeded 50,000.","CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE, TicketSales INT);",UPDATE Events SET TicketSales = 60000 WHERE EventID = 3; SELECT EventName FROM Events WHERE TicketSales > 50000;,"The query first updates the ticket sales for a specific event to 60,000. Then it retrieves the names of all events where ticket sales exceeded 50,000."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Delete records of athletes who have not participated in any events and then list all remaining athletes.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, EventID INT, PerformanceTime DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID));",DELETE FROM Athletes WHERE AthleteID NOT IN (SELECT DISTINCT AthleteID FROM Performance); SELECT * FROM Athletes;,The query first deletes records of athletes who have not participated in any events by using a subquery to find AthleteIDs that are not in the Performance table. Then it lists all remaining athletes.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert new fan engagement data and then find all fans who have engaged with more than 5 different sports events.,"CREATE TABLE Fans (FanID INT PRIMARY KEY, FanName VARCHAR(50), Age INT); CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, FanID INT, EventID INT, EngagementType VARCHAR(50), FOREIGN KEY (FanID) REFERENCES Fans(FanID));","INSERT INTO FanEngagement (EngagementID, FanID, EventID, EngagementType) VALUES (201, 2, 7, 'Comment'); SELECT FanName FROM Fans WHERE FanID IN (SELECT FanID FROM FanEngagement GROUP BY FanID HAVING COUNT(DISTINCT EventID) > 5);",The query first inserts a new fan engagement record. Then it retrieves the names of fans who have engaged with more than 5 different sports events by using a subquery that groups engagements by FanID and filters those with a count of distinct EventIDs greater than 5.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Update the sponsorship amount for a specific team and then find all teams with sponsorship amounts exceeding $1,000,000.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), SponsorshipAmount DECIMAL);",UPDATE Teams SET SponsorshipAmount = 1500000 WHERE TeamID = 4; SELECT TeamName FROM Teams WHERE SponsorshipAmount > 1000000;,"The query first updates the sponsorship amount for a specific team to $1,500,000. Then it retrieves the names of all teams with sponsorship amounts exceeding $1,000,000."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 crops with the highest yield in 2022, excluding those that had a significant pest infestation.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Yield DECIMAL); CREATE TABLE PestInfestations (InfestationID INT PRIMARY KEY, CropID INT, Year INT, Severity VARCHAR(50)); INSERT INTO CropYields (CropID, CropName, Year, Yield) VALUES (1, 'Wheat', 2022, 3000), (2, 'Corn', 2022, 2500), (3, 'Rice', 2022, 2800), (4, 'Soybean', 2022, 2700), (5, 'Barley', 2022, 2600); INSERT INTO PestInfestations (InfestationID, CropID, Year, Severity) VALUES (1, 1, 2022, 'High'), (2, 3, 2022, 'Low'), (3, 5, 2022, 'Medium');","WITH FilteredCrops AS (SELECT CropID, CropName, Yield FROM CropYields WHERE Year = 2022 AND CropID NOT IN (SELECT CropID FROM PestInfestations WHERE Year = 2022 AND Severity = 'High')) SELECT CropName, Yield FROM FilteredCrops ORDER BY Yield DESC LIMIT 3;",The query first filters out crops that had a high severity pest infestation in 2022. It then selects the top 3 crops based on yield in descending order.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average yield of crops that were not affected by any pest infestations in the last 5 years.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Yield DECIMAL); CREATE TABLE PestInfestations (InfestationID INT PRIMARY KEY, CropID INT, Year INT, Severity VARCHAR(50)); INSERT INTO CropYields (CropID, CropName, Year, Yield) VALUES (1, 'Wheat', 2018, 3000), (2, 'Corn', 2019, 2500), (3, 'Rice', 2020, 2800), (4, 'Soybean', 2021, 2700), (5, 'Barley', 2022, 2600); INSERT INTO PestInfestations (InfestationID, CropID, Year, Severity) VALUES (1, 1, 2018, 'High'), (2, 3, 2020, 'Low'), (3, 5, 2022, 'Medium');","WITH NoInfestationCrops AS (SELECT CropID, CropName, Yield FROM CropYields WHERE Year BETWEEN 2018 AND 2022 AND CropID NOT IN (SELECT CropID FROM PestInfestations WHERE Year BETWEEN 2018 AND 2022)) SELECT AVG(Yield) AS AvgYield FROM NoInfestationCrops;",The query calculates the average yield of crops that were not affected by any pest infestations in the last 5 years by first filtering out crops that had any pest infestations and then computing the average yield.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the crops that have consistently had a yield above 2000 units in the past 3 years, excluding those that had any pest infestations.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Yield DECIMAL); CREATE TABLE PestInfestations (InfestationID INT PRIMARY KEY, CropID INT, Year INT, Severity VARCHAR(50)); INSERT INTO CropYields (CropID, CropName, Year, Yield) VALUES (1, 'Wheat', 2020, 3000), (2, 'Corn', 2021, 2500), (3, 'Rice', 2022, 2800), (4, 'Soybean', 2020, 2700), (5, 'Barley', 2021, 2600); INSERT INTO PestInfestations (InfestationID, CropID, Year, Severity) VALUES (1, 1, 2020, 'High'), (2, 3, 2022, 'Low'), (3, 5, 2021, 'Medium');","WITH ConsistentCrops AS (SELECT CropID, CropName FROM CropYields WHERE Year BETWEEN 2020 AND 2022 GROUP BY CropID, CropName HAVING MIN(Yield) > 2000), NoInfestationCrops AS (SELECT CropID FROM PestInfestations WHERE Year BETWEEN 2020 AND 2022) SELECT CropName FROM ConsistentCrops WHERE CropID NOT IN (SELECT CropID FROM NoInfestationCrops);","The query identifies crops that have consistently had a yield above 2000 units in the past 3 years by first grouping and filtering crops based on yield, and then excluding those that had any pest infestations."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the total yield of crops in 2021 that were part of global food security initiatives, excluding those with medium or high pest infestations.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Yield DECIMAL); CREATE TABLE PestInfestations (InfestationID INT PRIMARY KEY, CropID INT, Year INT, Severity VARCHAR(50)); CREATE TABLE FoodSecurityInitiatives (InitiativeID INT PRIMARY KEY, CropID INT, Year INT); INSERT INTO CropYields (CropID, CropName, Year, Yield) VALUES (1, 'Wheat', 2021, 3000), (2, 'Corn', 2021, 2500), (3, 'Rice', 2021, 2800), (4, 'Soybean', 2021, 2700), (5, 'Barley', 2021, 2600); INSERT INTO PestInfestations (InfestationID, CropID, Year, Severity) VALUES (1, 1, 2021, 'High'), (2, 3, 2021, 'Low'), (3, 5, 2021, 'Medium'); INSERT INTO FoodSecurityInitiatives (InitiativeID, CropID, Year) VALUES (1, 2, 2021), (2, 3, 2021), (3, 4, 2021);","WITH FilteredCrops AS (SELECT CropID, Yield FROM CropYields WHERE Year = 2021 AND CropID NOT IN (SELECT CropID FROM PestInfestations WHERE Year = 2021 AND Severity IN ('Medium', 'High'))) SELECT SUM(Yield) AS TotalYield FROM FilteredCrops WHERE CropID IN (SELECT CropID FROM FoodSecurityInitiatives WHERE Year = 2021);",The query calculates the total yield of crops in 2021 that were part of global food security initiatives by first filtering out crops with medium or high pest infestations and then summing the yields of the remaining crops that are part of the initiatives.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the crops that had a yield increase of more than 10% from 2020 to 2021, excluding those affected by pest infestations in either year.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Yield DECIMAL); CREATE TABLE PestInfestations (InfestationID INT PRIMARY KEY, CropID INT, Year INT, Severity VARCHAR(50)); INSERT INTO CropYields (CropID, CropName, Year, Yield) VALUES (1, 'Wheat', 2020, 3000), (2, 'Corn', 2020, 2500), (3, 'Rice', 2020, 2800), (4, 'Soybean', 2020, 2700), (5, 'Barley', 2020, 2600), (1, 'Wheat', 2021, 3300), (2, 'Corn', 2021, 2700), (3, 'Rice', 2021, 3100), (4, 'Soybean', 2021, 2900), (5, 'Barley', 2021, 2500); INSERT INTO PestInfestations (InfestationID, CropID, Year, Severity) VALUES (1, 1, 2020, 'High'), (2, 3, 2021, 'Low'), (3, 5, 2020, 'Medium');","WITH NoInfestationCrops AS (SELECT CropID FROM CropYields WHERE Year IN (2020, 2021) AND CropID NOT IN (SELECT CropID FROM PestInfestations WHERE Year IN (2020, 2021))), YieldIncrease AS (SELECT c2020.CropID, c2020.CropName, ((c2021.Yield - c2020.Yield) / c2020.Yield) * 100 AS YieldIncreasePercent FROM CropYields c2020 JOIN CropYields c2021 ON c2020.CropID = c2021.CropID WHERE c2020.Year = 2020 AND c2021.Year = 2021) SELECT CropName, YieldIncreasePercent FROM YieldIncrease WHERE YieldIncreasePercent > 10 AND CropID IN (SELECT CropID FROM NoInfestationCrops);","The query identifies crops that had a yield increase of more than 10% from 2020 to 2021 by first filtering out crops affected by pest infestations in either year, then calculating the percentage yield increase, and finally selecting crops with more than a 10% increase."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total carbon emissions reduced by each renewable energy project and commit the transaction.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), EnergyProduced DECIMAL, EmissionReduction DECIMAL); CREATE TABLE EmissionData (EmissionID INT PRIMARY KEY, ProjectID INT, EmissionReduced DECIMAL, FOREIGN KEY (ProjectID) REFERENCES RenewableProjects(ProjectID));","BEGIN; WITH TotalReduction AS (SELECT ProjectID, SUM(EmissionReduced) AS TotalEmissionReduced FROM EmissionData GROUP BY ProjectID) SELECT ProjectID, TotalEmissionReduced FROM TotalReduction; COMMIT;","The query begins a transaction, calculates the total emissions reduced by each project using a common table expression (CTE), and then commits the transaction."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 3 regions with the highest average temperature increase over the last decade and rollback if any error occurs.,"CREATE TABLE TemperatureData (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), Year INT, AvgTemperature DECIMAL);","BEGIN; WITH AvgTempIncrease AS (SELECT RegionName, AVG(AvgTemperature) AS AvgTemp FROM TemperatureData WHERE Year BETWEEN 2011 AND 2020 GROUP BY RegionName ORDER BY AvgTemp DESC LIMIT 3) SELECT RegionName, AvgTemp FROM AvgTempIncrease; ROLLBACK;","The query begins a transaction, calculates the average temperature increase for each region over the last decade, selects the top 3 regions, and rolls back the transaction if any error occurs."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 species with the highest population growth rate and commit the transaction.,"CREATE TABLE SpeciesPopulation (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), Year INT, Population INT); CREATE TABLE PopulationGrowth (GrowthID INT PRIMARY KEY, SpeciesID INT, GrowthRate DECIMAL, FOREIGN KEY (SpeciesID) REFERENCES SpeciesPopulation(SpeciesID));","BEGIN; WITH GrowthRates AS (SELECT SpeciesName, GrowthRate, DENSE_RANK() OVER (ORDER BY GrowthRate DESC) AS Rank FROM PopulationGrowth JOIN SpeciesPopulation ON PopulationGrowth.SpeciesID = SpeciesPopulation.SpeciesID) SELECT SpeciesName, GrowthRate FROM GrowthRates WHERE Rank <= 5; COMMIT;","The query begins a transaction, calculates the growth rate for each species, ranks them in descending order, selects the top 5 species, and commits the transaction."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average water consumption per household in each city and commit the transaction.,"CREATE TABLE WaterConsumption (CityID INT PRIMARY KEY, CityName VARCHAR(100), HouseholdID INT, WaterUsed DECIMAL);","BEGIN; WITH AvgConsumption AS (SELECT CityName, AVG(WaterUsed) AS AvgWaterUsed FROM WaterConsumption GROUP BY CityName) SELECT CityName, AvgWaterUsed FROM AvgConsumption; COMMIT;","The query begins a transaction, calculates the average water consumption per household for each city using a common table expression (CTE), and commits the transaction."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the total funding allocated to each conservation project and rollback if any error occurs.,"CREATE TABLE ConservationProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), TotalFunding DECIMAL); CREATE TABLE FundingData (FundingID INT PRIMARY KEY, ProjectID INT, FundingAmount DECIMAL, FOREIGN KEY (ProjectID) REFERENCES ConservationProjects(ProjectID));","BEGIN; WITH TotalFunding AS (SELECT ProjectID, SUM(FundingAmount) AS TotalFundingAllocated FROM FundingData GROUP BY ProjectID) SELECT ProjectID, TotalFundingAllocated FROM TotalFunding; ROLLBACK;","The query begins a transaction, calculates the total funding allocated to each conservation project using a common table expression (CTE), and rolls back the transaction if any error occurs."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total government spending per department for the last fiscal year, and include only those departments where the total spending exceeds $10 million.","CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), FiscalYear INT, AmountSpent DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, FiscalYear, AmountSpent) VALUES (1, 'Health', 2022, 15000000), (2, 'Education', 2022, 8000000), (3, 'Defense', 2022, 20000000), (4, 'Transportation', 2022, 5000000), (5, 'Agriculture', 2022, 12000000);","SELECT DepartmentName, SUM(AmountSpent) AS TotalSpending FROM GovernmentSpending WHERE FiscalYear = 2022 GROUP BY DepartmentName HAVING SUM(AmountSpent) > 10000000;",The query calculates the total spending for each department in the last fiscal year (2022) by summing the AmountSpent. It then filters the results to include only those departments where the total spending exceeds $10 million.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","List the average age of citizens by city, but only include cities where the average age is above 40.","CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, City VARCHAR(100), Age INT); INSERT INTO CitizenDemographics (CitizenID, City, Age) VALUES (1, 'New York', 45), (2, 'Los Angeles', 38), (3, 'Chicago', 42), (4, 'Houston', 35), (5, 'Phoenix', 50);","SELECT City, AVG(Age) AS AverageAge FROM CitizenDemographics GROUP BY City HAVING AVG(Age) > 40;",The query calculates the average age of citizens for each city by using the AVG function. It then filters the results to include only those cities where the average age is above 40.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 3 most common types of public policy initiatives based on the number of initiatives launched in the last 5 years.,"CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyType VARCHAR(100), LaunchYear INT); INSERT INTO PublicPolicy (PolicyID, PolicyType, LaunchYear) VALUES (1, 'Healthcare', 2019), (2, 'Education', 2020), (3, 'Infrastructure', 2021), (4, 'Healthcare', 2021), (5, 'Education', 2022);","WITH PolicyCount AS (SELECT PolicyType, COUNT(*) AS InitiativeCount FROM PublicPolicy WHERE LaunchYear >= YEAR(CURDATE()) - 5 GROUP BY PolicyType) SELECT PolicyType, InitiativeCount FROM PolicyCount ORDER BY InitiativeCount DESC LIMIT 3;",The query first creates a common table expression (CTE) to count the number of initiatives for each policy type launched in the last 5 years. It then selects the top 3 most common policy types based on the count.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a list of legislative bills that have been passed in the last year, including the total number of votes each bill received, and only include bills with more than 100 votes.","CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), YearPassed INT, VotesReceived INT); INSERT INTO LegislativeBills (BillID, BillName, YearPassed, VotesReceived) VALUES (1, 'Healthcare Reform', 2022, 150), (2, 'Education Funding', 2022, 90), (3, 'Defense Budget', 2022, 200), (4, 'Infrastructure Development', 2022, 50), (5, 'Agricultural Subsidies', 2022, 120);","SELECT BillName, VotesReceived FROM LegislativeBills WHERE YearPassed = 2022 AND VotesReceived > 100;",The query selects the names and vote counts of legislative bills that were passed in the last year (2022) and filters the results to include only those bills that received more than 100 votes.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Create a summary of the average effectiveness score of governance by region, but only include regions where the average score is above 75.","CREATE TABLE GovernanceEffectiveness (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), EffectivenessScore DECIMAL); INSERT INTO GovernanceEffectiveness (RegionID, RegionName, EffectivenessScore) VALUES (1, 'North America', 80), (2, 'Europe', 70), (3, 'Asia', 85), (4, 'Africa', 65), (5, 'South America', 78);","SELECT RegionName, AVG(EffectivenessScore) AS AverageScore FROM GovernanceEffectiveness GROUP BY RegionName HAVING AVG(EffectivenessScore) > 75;",The query calculates the average effectiveness score for each region by using the AVG function. It then filters the results to include only those regions where the average score is above 75.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Show the top 3 most innovative companies based on their innovation score in the last year.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Industry VARCHAR(50)); CREATE TABLE InnovationScores (ScoreID INT PRIMARY KEY, CompanyID INT, Year INT, InnovationScore DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); INSERT INTO Companies (CompanyID, CompanyName, Industry) VALUES (1, 'TechCorp', 'Technology'), (2, 'InnoWorks', 'Healthcare'), (3, 'FutureGen', 'Energy'); INSERT INTO InnovationScores (ScoreID, CompanyID, Year, InnovationScore) VALUES (1, 1, 2022, 95.5), (2, 2, 2022, 88.0), (3, 3, 2022, 92.3);","WITH RankedCompanies AS (SELECT CompanyName, InnovationScore, RANK() OVER (ORDER BY InnovationScore DESC) AS Rank FROM InnovationScores JOIN Companies ON InnovationScores.CompanyID = Companies.CompanyID WHERE Year = 2022) SELECT CompanyName, InnovationScore FROM RankedCompanies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank companies based on their innovation score in descending order for the year 2022. It then selects the top 3 most innovative companies using the RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Retrieve the latest market trends in the AI industry.,"CREATE TABLE MarketTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), Industry VARCHAR(50), Year INT); INSERT INTO MarketTrends (TrendID, TrendName, Industry, Year) VALUES (1, 'AI in Healthcare', 'AI', 2023), (2, 'AI in Finance', 'AI', 2023), (3, 'AI in Retail', 'AI', 2022);","SELECT TrendName, Year FROM MarketTrends WHERE Industry = 'AI' ORDER BY Year DESC;",The query selects the trend names and years from the MarketTrends table where the industry is 'AI' and orders the results by year in descending order to show the latest trends first.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 5 regions with the highest adoption rate of electric vehicles (EVs).,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE EVAdoption (AdoptionID INT PRIMARY KEY, RegionID INT, Year INT, AdoptionRate DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'); INSERT INTO EVAdoption (AdoptionID, RegionID, Year, AdoptionRate) VALUES (1, 1, 2022, 15.5), (2, 2, 2022, 20.0), (3, 3, 2022, 10.0);","WITH RankedRegions AS (SELECT RegionName, AdoptionRate, RANK() OVER (ORDER BY AdoptionRate DESC) AS Rank FROM EVAdoption JOIN Regions ON EVAdoption.RegionID = Regions.RegionID WHERE Year = 2022) SELECT RegionName, AdoptionRate FROM RankedRegions WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank regions based on their EV adoption rate in descending order for the year 2022. It then selects the top 5 regions using the RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,List the top 3 most disruptive technologies in the energy sector based on their impact score.,"CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE ImpactScores (ImpactID INT PRIMARY KEY, TechID INT, Year INT, ImpactScore DECIMAL, FOREIGN KEY (TechID) REFERENCES Technologies(TechID)); INSERT INTO Technologies (TechID, TechName, Sector) VALUES (1, 'Solar Power', 'Energy'), (2, 'Wind Energy', 'Energy'), (3, 'Hydrogen Fuel', 'Energy'); INSERT INTO ImpactScores (ImpactID, TechID, Year, ImpactScore) VALUES (1, 1, 2022, 85.5), (2, 2, 2022, 90.0), (3, 3, 2022, 88.3);","WITH RankedTechnologies AS (SELECT TechName, ImpactScore, RANK() OVER (ORDER BY ImpactScore DESC) AS Rank FROM ImpactScores JOIN Technologies ON ImpactScores.TechID = Technologies.TechID WHERE Sector = 'Energy' AND Year = 2022) SELECT TechName, ImpactScore FROM RankedTechnologies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank technologies based on their impact score in descending order for the energy sector in the year 2022. It then selects the top 3 most disruptive technologies using the RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Identify the top 5 startups in the fintech industry based on their funding amount.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(100), Industry VARCHAR(50)); CREATE TABLE Funding (FundingID INT PRIMARY KEY, StartupID INT, Year INT, FundingAmount DECIMAL, FOREIGN KEY (StartupID) REFERENCES Startups(StartupID)); INSERT INTO Startups (StartupID, StartupName, Industry) VALUES (1, 'FinTechOne', 'Fintech'), (2, 'PayTech', 'Fintech'), (3, 'CryptoStart', 'Fintech'); INSERT INTO Funding (FundingID, StartupID, Year, FundingAmount) VALUES (1, 1, 2022, 5000000), (2, 2, 2022, 7500000), (3, 3, 2022, 6000000);","WITH RankedStartups AS (SELECT StartupName, FundingAmount, RANK() OVER (ORDER BY FundingAmount DESC) AS Rank FROM Funding JOIN Startups ON Funding.StartupID = Startups.StartupID WHERE Industry = 'Fintech' AND Year = 2022) SELECT StartupName, FundingAmount FROM RankedStartups WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank startups based on their funding amount in descending order for the fintech industry in the year 2022. It then selects the top 5 startups using the RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 3 regions with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureData (Region VARCHAR(50), Year INT, AvgTemperature DECIMAL); INSERT INTO TemperatureData (Region, Year, AvgTemperature) VALUES ('North America', 2010, 15.2), ('North America', 2020, 16.5), ('Europe', 2010, 14.0), ('Europe', 2020, 15.1), ('Asia', 2010, 20.5), ('Asia', 2020, 21.7);","WITH TempIncrease AS (SELECT Region, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS TempChange FROM TemperatureData WHERE Year BETWEEN 2010 AND 2020 GROUP BY Region) SELECT Region, TempChange FROM TempIncrease ORDER BY TempChange DESC LIMIT 3;",The query calculates the temperature change for each region over the past decade by finding the difference between the maximum and minimum average temperatures. It then selects the top 3 regions with the highest temperature increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report of the total number of endangered species in each country, but only include countries with more than 5 endangered species.","CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Country VARCHAR(50), Status VARCHAR(50)); INSERT INTO EndangeredSpecies (SpeciesID, SpeciesName, Country, Status) VALUES (1, 'Tiger', 'India', 'Endangered'), (2, 'Panda', 'China', 'Endangered'), (3, 'Elephant', 'Kenya', 'Endangered'), (4, 'Rhino', 'South Africa', 'Endangered'), (5, 'Orangutan', 'Indonesia', 'Endangered'), (6, 'Snow Leopard', 'Nepal', 'Endangered'), (7, 'Blue Whale', 'Australia', 'Endangered'), (8, 'Gorilla', 'Congo', 'Endangered'), (9, 'Koala', 'Australia', 'Endangered'), (10, 'Jaguar', 'Brazil', 'Endangered');","SELECT Country, COUNT(SpeciesID) AS EndangeredSpeciesCount FROM EndangeredSpecies WHERE Status = 'Endangered' GROUP BY Country HAVING COUNT(SpeciesID) > 5;",The query counts the number of endangered species in each country and filters the results to include only those countries with more than 5 endangered species.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Calculate the average carbon emissions per capita for each country and list the top 5 countries with the lowest emissions.,"CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, Emissions DECIMAL, Population INT); INSERT INTO CarbonEmissions (Country, Year, Emissions, Population) VALUES ('USA', 2020, 5000, 331000000), ('China', 2020, 10000, 1439323776), ('India', 2020, 3000, 1380004385), ('Germany', 2020, 800, 83783942), ('France', 2020, 600, 65273511);","SELECT Country, AVG(Emissions / Population) AS AvgEmissionsPerCapita FROM CarbonEmissions GROUP BY Country ORDER BY AvgEmissionsPerCapita ASC LIMIT 5;",The query calculates the average carbon emissions per capita for each country by dividing the total emissions by the population and then averaging the results. It then lists the top 5 countries with the lowest emissions per capita.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 projects with the highest funding in renewable energy initiatives.,"CREATE TABLE RenewableEnergyProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), Funding DECIMAL); INSERT INTO RenewableEnergyProjects (ProjectID, ProjectName, Funding) VALUES (1, 'Solar Power Plant', 5000000), (2, 'Wind Farm', 3000000), (3, 'Hydroelectric Dam', 7000000), (4, 'Geothermal Plant', 2000000), (5, 'Biomass Energy', 1000000);","SELECT ProjectName, Funding FROM RenewableEnergyProjects ORDER BY Funding DESC LIMIT 5;",The query selects the top 5 renewable energy projects with the highest funding by ordering the projects in descending order based on their funding amounts.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",List the average deforestation rate per year for each continent and identify the continent with the highest average rate.,"CREATE TABLE DeforestationData (Continent VARCHAR(50), Year INT, DeforestationRate DECIMAL); INSERT INTO DeforestationData (Continent, Year, DeforestationRate) VALUES ('South America', 2010, 2.5), ('South America', 2020, 3.0), ('Africa', 2010, 1.5), ('Africa', 2020, 2.0), ('Asia', 2010, 1.0), ('Asia', 2020, 1.5);","SELECT Continent, AVG(DeforestationRate) AS AvgDeforestationRate FROM DeforestationData GROUP BY Continent ORDER BY AvgDeforestationRate DESC LIMIT 1;",The query calculates the average deforestation rate per year for each continent and then identifies the continent with the highest average deforestation rate by ordering the results in descending order and limiting the output to the top result.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total sales and average price of electric vehicles sold in the last year, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice) VALUES (1, 101, '2022-05-01', 35000), (2, 102, '2022-06-15', 40000), (3, 101, '2022-07-20', 36000); INSERT INTO Vehicles (VehicleID, ModelName, VehicleType) VALUES (101, 'Model X', 'Electric'), (102, 'Model Y', 'Electric');","BEGIN TRANSACTION; WITH EVSales AS (SELECT VS.SalePrice FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.VehicleType = 'Electric' AND VS.SaleDate BETWEEN '2022-01-01' AND '2022-12-31') SELECT SUM(SalePrice) AS TotalSales, AVG(SalePrice) AS AvgPrice FROM EVSales; COMMIT;",The query begins a transaction and uses a common table expression (CTE) to filter sales of electric vehicles within the last year. It then calculates the total sales and average price of these vehicles. The transaction is committed if no errors occur.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the top 3 regions with the highest sales of hybrid vehicles, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE, SalePrice DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, Region, SaleDate, SalePrice) VALUES (1, 201, 'North America', '2022-05-01', 30000), (2, 202, 'Europe', '2022-06-15', 32000), (3, 201, 'Asia', '2022-07-20', 31000); INSERT INTO Vehicles (VehicleID, ModelName, VehicleType) VALUES (201, 'Prius', 'Hybrid'), (202, 'Insight', 'Hybrid');","BEGIN TRANSACTION; WITH HybridSales AS (SELECT VS.Region, SUM(VS.SalePrice) AS TotalSales FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.VehicleType = 'Hybrid' GROUP BY VS.Region) SELECT Region, TotalSales FROM HybridSales ORDER BY TotalSales DESC LIMIT 3; COMMIT;",The query begins a transaction and uses a common table expression (CTE) to aggregate sales of hybrid vehicles by region. It then retrieves the top 3 regions with the highest sales. The transaction is committed if no errors occur.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the top 5 most popular vehicle models sold in Europe last year, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE, SalePrice DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, Region, SaleDate, SalePrice) VALUES (1, 301, 'Europe', '2022-05-01', 25000), (2, 302, 'Europe', '2022-06-15', 27000), (3, 301, 'Europe', '2022-07-20', 26000); INSERT INTO Vehicles (VehicleID, ModelName) VALUES (301, 'Golf', 'Hatchback'), (302, 'Civic', 'Sedan');","BEGIN TRANSACTION; WITH EuropeSales AS (SELECT V.ModelName, COUNT(VS.SaleID) AS SalesCount FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE VS.Region = 'Europe' AND VS.SaleDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY V.ModelName) SELECT ModelName, SalesCount FROM EuropeSales ORDER BY SalesCount DESC LIMIT 5; COMMIT;",The query begins a transaction and uses a common table expression (CTE) to count the number of sales for each vehicle model sold in Europe last year. It then lists the top 5 most popular models. The transaction is committed if no errors occur.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average fuel efficiency of electric vehicles sold in North America, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE, SalePrice DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50), FuelEfficiency DECIMAL); INSERT INTO VehicleSales (SaleID, VehicleID, Region, SaleDate, SalePrice) VALUES (1, 401, 'North America', '2022-05-01', 45000), (2, 402, 'North America', '2022-06-15', 47000); INSERT INTO Vehicles (VehicleID, ModelName, VehicleType, FuelEfficiency) VALUES (401, 'Model S', 'Electric', 120.5), (402, 'Model 3', 'Electric', 118.0);",BEGIN TRANSACTION; WITH EVNorthAmerica AS (SELECT V.FuelEfficiency FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.VehicleType = 'Electric' AND VS.Region = 'North America') SELECT AVG(FuelEfficiency) AS AvgFuelEfficiency FROM EVNorthAmerica; COMMIT;,The query begins a transaction and uses a common table expression (CTE) to filter electric vehicles sold in North America. It then calculates the average fuel efficiency of these vehicles. The transaction is committed if no errors occur.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the total revenue generated from the sales of autonomous vehicles in the last quarter, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Technology VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice) VALUES (1, 501, '2022-10-01', 55000), (2, 502, '2022-11-15', 60000); INSERT INTO Vehicles (VehicleID, ModelName, Technology) VALUES (501, 'Model X', 'Autonomous'), (502, 'Model Y', 'Autonomous');",BEGIN TRANSACTION; WITH AutonomousSales AS (SELECT VS.SalePrice FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Technology = 'Autonomous' AND VS.SaleDate BETWEEN '2022-10-01' AND '2022-12-31') SELECT SUM(SalePrice) AS TotalRevenue FROM AutonomousSales; COMMIT;,The query begins a transaction and uses a common table expression (CTE) to filter sales of autonomous vehicles in the last quarter. It then calculates the total revenue generated from these sales. The transaction is committed if no errors occur.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 10 most-watched movies along with the total revenue generated from ticket sales and streaming for each movie, including details on the average rating and number of reviews.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseDate DATE); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, MovieID INT, SaleAmount DECIMAL, SaleDate DATE, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID)); CREATE TABLE Streaming (StreamID INT PRIMARY KEY, MovieID INT, StreamAmount DECIMAL, StreamDate DATE, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID)); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, MovieID INT, Rating DECIMAL, ReviewDate DATE, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID));","WITH MovieRevenue AS (SELECT M.MovieID, M.Title, SUM(TS.SaleAmount) + SUM(S.StreamAmount) AS TotalRevenue FROM Movies M INNER JOIN TicketSales TS ON M.MovieID = TS.MovieID INNER JOIN Streaming S ON M.MovieID = S.MovieID GROUP BY M.MovieID, M.Title), MovieRatings AS (SELECT MovieID, AVG(Rating) AS AvgRating, COUNT(ReviewID) AS NumReviews FROM Reviews GROUP BY MovieID) SELECT MR.MovieID, MR.Title, MR.TotalRevenue, MR2.AvgRating, MR2.NumReviews FROM MovieRevenue MR INNER JOIN MovieRatings MR2 ON MR.MovieID = MR2.MovieID ORDER BY MR.TotalRevenue DESC LIMIT 10;","The query first creates a common table expression (CTE) named MovieRevenue to calculate the total revenue from ticket sales and streaming for each movie. It then creates another CTE named MovieRatings to calculate the average rating and number of reviews for each movie. Finally, it joins these two CTEs to generate a report showing the top 10 most-watched movies along with their total revenue, average rating, and number of reviews."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a detailed report on the top 5 TV shows with the highest audience engagement, including the total number of views, average watch time, and the number of unique viewers.","CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE Views (ViewID INT PRIMARY KEY, ShowID INT, WatchTime DECIMAL, ViewerID INT, ViewDate DATE, FOREIGN KEY (ShowID) REFERENCES TVShows(ShowID)); CREATE TABLE Viewers (ViewerID INT PRIMARY KEY, Name VARCHAR(100), Age INT);","WITH ShowEngagement AS (SELECT V.ShowID, TS.Title, COUNT(V.ViewID) AS TotalViews, AVG(V.WatchTime) AS AvgWatchTime, COUNT(DISTINCT V.ViewerID) AS UniqueViewers FROM Views V INNER JOIN TVShows TS ON V.ShowID = TS.ShowID GROUP BY V.ShowID, TS.Title) SELECT ShowID, Title, TotalViews, AvgWatchTime, UniqueViewers FROM ShowEngagement ORDER BY TotalViews DESC LIMIT 5;","The query creates a common table expression (CTE) named ShowEngagement to calculate the total number of views, average watch time, and the number of unique viewers for each TV show. It then selects the top 5 TV shows with the highest audience engagement based on the total number of views."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Identify the top 5 content creators with the highest total revenue from both ad revenue and subscription fees, including their total number of subscribers and average content rating.","CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, Name VARCHAR(100), JoinDate DATE); CREATE TABLE AdRevenue (AdID INT PRIMARY KEY, CreatorID INT, RevenueAmount DECIMAL, RevenueDate DATE, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID)); CREATE TABLE Subscriptions (SubID INT PRIMARY KEY, CreatorID INT, SubscriberID INT, SubscriptionFee DECIMAL, SubDate DATE, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID)); CREATE TABLE ContentRatings (RatingID INT PRIMARY KEY, CreatorID INT, Rating DECIMAL, RatingDate DATE, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID));","WITH CreatorRevenue AS (SELECT CC.CreatorID, CC.Name, SUM(AR.RevenueAmount) + SUM(S.SubscriptionFee) AS TotalRevenue FROM ContentCreators CC INNER JOIN AdRevenue AR ON CC.CreatorID = AR.CreatorID INNER JOIN Subscriptions S ON CC.CreatorID = S.CreatorID GROUP BY CC.CreatorID, CC.Name), CreatorRatings AS (SELECT CreatorID, AVG(Rating) AS AvgRating, COUNT(RatingID) AS NumRatings FROM ContentRatings GROUP BY CreatorID) SELECT CR.CreatorID, CR.Name, CR.TotalRevenue, CR2.AvgRating, CR2.NumRatings FROM CreatorRevenue CR INNER JOIN CreatorRatings CR2 ON CR.CreatorID = CR2.CreatorID ORDER BY CR.TotalRevenue DESC LIMIT 5;","The query first creates a common table expression (CTE) named CreatorRevenue to calculate the total revenue from ad revenue and subscription fees for each content creator. It then creates another CTE named CreatorRatings to calculate the average content rating and number of ratings for each creator. Finally, it joins these two CTEs to generate a report showing the top 5 content creators with the highest total revenue, average content rating, and number of ratings."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 most popular music albums based on total streams and downloads, including the total revenue generated from both streams and downloads.","CREATE TABLE Albums (AlbumID INT PRIMARY KEY, Title VARCHAR(100), ReleaseDate DATE); CREATE TABLE Streams (StreamID INT PRIMARY KEY, AlbumID INT, StreamAmount DECIMAL, StreamDate DATE, FOREIGN KEY (AlbumID) REFERENCES Albums(AlbumID)); CREATE TABLE Downloads (DownloadID INT PRIMARY KEY, AlbumID INT, DownloadAmount DECIMAL, DownloadDate DATE, FOREIGN KEY (AlbumID) REFERENCES Albums(AlbumID));","WITH AlbumRevenue AS (SELECT A.AlbumID, A.Title, SUM(S.StreamAmount) + SUM(D.DownloadAmount) AS TotalRevenue FROM Albums A INNER JOIN Streams S ON A.AlbumID = S.AlbumID INNER JOIN Downloads D ON A.AlbumID = D.AlbumID GROUP BY A.AlbumID, A.Title) SELECT AlbumID, Title, TotalRevenue FROM AlbumRevenue ORDER BY TotalRevenue DESC LIMIT 5;",The query creates a common table expression (CTE) named AlbumRevenue to calculate the total revenue from streams and downloads for each album. It then selects the top 5 most popular music albums based on the total revenue generated from both streams and downloads.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a detailed report on the top 5 video games with the highest player engagement, including the total number of players, average playtime, and total revenue from in-game purchases.","CREATE TABLE VideoGames (GameID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE Players (PlayerID INT PRIMARY KEY, GameID INT, PlayTime DECIMAL, PlayerDate DATE, FOREIGN KEY (GameID) REFERENCES VideoGames(GameID)); CREATE TABLE InGamePurchases (PurchaseID INT PRIMARY KEY, GameID INT, PurchaseAmount DECIMAL, PurchaseDate DATE, FOREIGN KEY (GameID) REFERENCES VideoGames(GameID));","WITH GameEngagement AS (SELECT P.GameID, VG.Title, COUNT(P.PlayerID) AS TotalPlayers, AVG(P.PlayTime) AS AvgPlayTime, SUM(IGP.PurchaseAmount) AS TotalRevenue FROM Players P INNER JOIN VideoGames VG ON P.GameID = VG.GameID INNER JOIN InGamePurchases IGP ON P.GameID = IGP.GameID GROUP BY P.GameID, VG.Title) SELECT GameID, Title, TotalPlayers, AvgPlayTime, TotalRevenue FROM GameEngagement ORDER BY TotalPlayers DESC LIMIT 5;","The query creates a common table expression (CTE) named GameEngagement to calculate the total number of players, average playtime, and total revenue from in-game purchases for each video game. It then selects the top 5 video games with the highest player engagement based on the total number of players."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the top 3 countries with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureData (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, AvgTemperatureIncrease DECIMAL); INSERT INTO TemperatureData (CountryID, CountryName, Year, AvgTemperatureIncrease) VALUES (1, 'USA', 2020, 1.2), (2, 'Canada', 2020, 1.5), (3, 'Brazil', 2020, 0.9), (4, 'USA', 2019, 1.1), (5, 'Canada', 2019, 1.4);","SELECT CountryName, AVG(AvgTemperatureIncrease) AS AvgTempIncrease FROM TemperatureData WHERE Year BETWEEN 2010 AND 2020 GROUP BY CountryName ORDER BY AvgTempIncrease DESC LIMIT 3;",The query calculates the average temperature increase for each country over the past decade and then selects the top 3 countries with the highest average temperature increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the total number of endangered species in each continent.,"CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Continent VARCHAR(50), Status VARCHAR(50)); INSERT INTO EndangeredSpecies (SpeciesID, SpeciesName, Continent, Status) VALUES (1, 'Tiger', 'Asia', 'Endangered'), (2, 'Panda', 'Asia', 'Endangered'), (3, 'Elephant', 'Africa', 'Endangered'), (4, 'Kangaroo', 'Australia', 'Endangered'), (5, 'Polar Bear', 'North America', 'Endangered');","SELECT Continent, COUNT(SpeciesID) AS TotalEndangeredSpecies FROM EndangeredSpecies WHERE Status = 'Endangered' GROUP BY Continent;",The query counts the number of endangered species in each continent by grouping the data based on the continent and filtering for species with the status 'Endangered'.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the average CO2 emissions per capita for each country in the year 2020.,"CREATE TABLE CO2Emissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, CO2EmissionsPerCapita DECIMAL); INSERT INTO CO2Emissions (CountryID, CountryName, Year, CO2EmissionsPerCapita) VALUES (1, 'USA', 2020, 15.5), (2, 'Canada', 2020, 16.2), (3, 'Brazil', 2020, 2.5), (4, 'USA', 2019, 15.7), (5, 'Canada', 2019, 16.0);","SELECT CountryName, AVG(CO2EmissionsPerCapita) AS AvgCO2Emissions FROM CO2Emissions WHERE Year = 2020 GROUP BY CountryName;",The query calculates the average CO2 emissions per capita for each country for the year 2020 by grouping the data based on the country name.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Identify the regions with the highest deforestation rates in the past five years.,"CREATE TABLE DeforestationRates (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, DeforestationRate DECIMAL); INSERT INTO DeforestationRates (RegionID, RegionName, Year, DeforestationRate) VALUES (1, 'Amazon', 2020, 2.5), (2, 'Congo Basin', 2020, 1.8), (3, 'Southeast Asia', 2020, 3.0), (4, 'Amazon', 2019, 2.7), (5, 'Congo Basin', 2019, 1.9);","SELECT RegionName, AVG(DeforestationRate) AS AvgDeforestationRate FROM DeforestationRates WHERE Year BETWEEN 2016 AND 2020 GROUP BY RegionName ORDER BY AvgDeforestationRate DESC;",The query calculates the average deforestation rate for each region over the past five years and then orders the regions by the highest average deforestation rate.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Get the list of renewable energy projects started in the last three years along with their funding amounts.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), StartYear INT, FundingAmount DECIMAL); INSERT INTO RenewableProjects (ProjectID, ProjectName, StartYear, FundingAmount) VALUES (1, 'Solar Farm', 2020, 5000000), (2, 'Wind Turbine', 2019, 3000000), (3, 'Hydro Plant', 2021, 7000000), (4, 'Geothermal Plant', 2018, 4000000), (5, 'Bioenergy Plant', 2021, 6000000);","SELECT ProjectName, FundingAmount FROM RenewableProjects WHERE StartYear >= 2018;",The query retrieves the names and funding amounts of renewable energy projects that were started in the last three years by filtering the data based on the start year.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the top 3 companies with the highest average investment in AI technologies over the past 5 years.,"CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, CompanyName VARCHAR(100), Technology VARCHAR(50), InvestmentAmount DECIMAL, InvestmentYear INT); INSERT INTO Investments (InvestmentID, CompanyName, Technology, InvestmentAmount, InvestmentYear) VALUES (1, 'TechCorp', 'AI', 5000000, 2020), (2, 'InnovateX', 'AI', 3000000, 2021), (3, 'FutureTech', 'AI', 7000000, 2022), (4, 'TechCorp', 'AI', 6000000, 2021), (5, 'InnovateX', 'AI', 4000000, 2022);","SELECT CompanyName, AVG(InvestmentAmount) AS AvgInvestment FROM Investments WHERE Technology = 'AI' AND InvestmentYear >= YEAR(CURDATE()) - 5 GROUP BY CompanyName HAVING COUNT(InvestmentID) > 1 ORDER BY AvgInvestment DESC LIMIT 3;","The query calculates the average investment amount in AI technologies for each company over the past 5 years. It groups the results by company name and filters out companies with only one investment record. Finally, it orders the companies by average investment in descending order and limits the result to the top 3 companies."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Show the total number of patents filed in the last decade for renewable energy technologies by each company.,"CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyName VARCHAR(100), Technology VARCHAR(50), FilingYear INT); INSERT INTO Patents (PatentID, CompanyName, Technology, FilingYear) VALUES (1, 'GreenEnergy Inc.', 'Renewable Energy', 2015), (2, 'EcoTech', 'Renewable Energy', 2018), (3, 'GreenEnergy Inc.', 'Renewable Energy', 2020), (4, 'SolarSolutions', 'Renewable Energy', 2017), (5, 'EcoTech', 'Renewable Energy', 2019);","SELECT CompanyName, COUNT(PatentID) AS TotalPatents FROM Patents WHERE Technology = 'Renewable Energy' AND FilingYear >= YEAR(CURDATE()) - 10 GROUP BY CompanyName;",The query counts the total number of patents filed for renewable energy technologies by each company in the last decade. It groups the results by company name.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Retrieve the average market share of companies in the blockchain sector for the current year.,"CREATE TABLE MarketShare (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50), MarketShare DECIMAL, Year INT); INSERT INTO MarketShare (CompanyID, CompanyName, Sector, MarketShare, Year) VALUES (1, 'BlockChain Inc.', 'Blockchain', 15.5, 2023), (2, 'CryptoTech', 'Blockchain', 20.0, 2023), (3, 'LedgerWorks', 'Blockchain', 18.0, 2023), (4, 'BlockChain Inc.', 'Blockchain', 16.0, 2022), (5, 'CryptoTech', 'Blockchain', 19.0, 2022);",SELECT AVG(MarketShare) AS AvgMarketShare FROM MarketShare WHERE Sector = 'Blockchain' AND Year = YEAR(CURDATE());,"The query calculates the average market share of companies in the blockchain sector for the current year by filtering the records for the blockchain sector and the current year, then averaging the market share values."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,List the top 5 most innovative companies based on the number of new technology products launched in the last 3 years.,"CREATE TABLE ProductLaunches (LaunchID INT PRIMARY KEY, CompanyName VARCHAR(100), ProductName VARCHAR(100), Technology VARCHAR(50), LaunchYear INT); INSERT INTO ProductLaunches (LaunchID, CompanyName, ProductName, Technology, LaunchYear) VALUES (1, 'InnovateX', 'AI Assistant', 'AI', 2021), (2, 'TechCorp', 'Smart Home Hub', 'IoT', 2022), (3, 'FutureTech', 'Blockchain Wallet', 'Blockchain', 2023), (4, 'InnovateX', 'AI Analytics', 'AI', 2022), (5, 'TechCorp', 'IoT Sensor', 'IoT', 2023);","SELECT CompanyName, COUNT(ProductName) AS ProductCount FROM ProductLaunches WHERE LaunchYear >= YEAR(CURDATE()) - 3 GROUP BY CompanyName ORDER BY ProductCount DESC LIMIT 5;","The query counts the number of new technology products launched by each company in the last 3 years. It groups the results by company name, orders them by the product count in descending order, and limits the result to the top 5 companies."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Calculate the total R&D expenditure on emerging technologies for each company in the last 5 years.,"CREATE TABLE RnDExpenditure (ExpenditureID INT PRIMARY KEY, CompanyName VARCHAR(100), Technology VARCHAR(50), ExpenditureAmount DECIMAL, ExpenditureYear INT); INSERT INTO RnDExpenditure (ExpenditureID, CompanyName, Technology, ExpenditureAmount, ExpenditureYear) VALUES (1, 'TechCorp', 'AI', 2000000, 2019), (2, 'InnovateX', 'Blockchain', 1500000, 2020), (3, 'FutureTech', 'AI', 2500000, 2021), (4, 'TechCorp', 'IoT', 3000000, 2022), (5, 'InnovateX', 'AI', 1800000, 2023);","SELECT CompanyName, SUM(ExpenditureAmount) AS TotalExpenditure FROM RnDExpenditure WHERE ExpenditureYear >= YEAR(CURDATE()) - 5 GROUP BY CompanyName;",The query calculates the total R&D expenditure on emerging technologies for each company in the last 5 years by summing the expenditure amounts for each company and grouping the results by company name.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,data retrieval: basic data fetching queries,Show the average crop yield for each type of crop in different regions.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 3.5), (2, 'Corn', 'Europe', 4.2), (3, 'Rice', 'Asia', 5.0), (4, 'Soybean', 'South America', 2.8), (5, 'Barley', 'Australia', 3.1);","WITH AvgYield AS (SELECT CropName, Region, AVG(Yield) AS AvgYield FROM CropYields GROUP BY CropName, Region) SELECT CropName, Region, AvgYield FROM AvgYield;","The query creates a common table expression (CTE) to calculate the average yield for each crop in different regions. It then selects the crop name, region, and average yield from the CTE."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,data retrieval: basic data fetching queries,List the total quantity of each crop produced by different farms.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50)); CREATE TABLE CropProduction (ProductionID INT PRIMARY KEY, FarmID INT, CropName VARCHAR(50), Quantity DECIMAL, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID)); INSERT INTO Farms (FarmID, FarmName) VALUES (1, 'Green Acres'), (2, 'Sunny Fields'), (3, 'River Valley'); INSERT INTO CropProduction (ProductionID, FarmID, CropName, Quantity) VALUES (1, 1, 'Wheat', 500), (2, 2, 'Corn', 300), (3, 3, 'Rice', 700), (4, 1, 'Soybean', 200), (5, 2, 'Barley', 400);","WITH TotalProduction AS (SELECT CropName, SUM(Quantity) AS TotalQuantity FROM CropProduction GROUP BY CropName) SELECT CropName, TotalQuantity FROM TotalProduction;",The query creates a common table expression (CTE) to calculate the total quantity of each crop produced by different farms. It then selects the crop name and total quantity from the CTE.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,data retrieval: basic data fetching queries,Retrieve the list of farms that produce more than 300 units of any crop.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50)); CREATE TABLE CropProduction (ProductionID INT PRIMARY KEY, FarmID INT, CropName VARCHAR(50), Quantity DECIMAL, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID)); INSERT INTO Farms (FarmID, FarmName) VALUES (1, 'Green Acres'), (2, 'Sunny Fields'), (3, 'River Valley'); INSERT INTO CropProduction (ProductionID, FarmID, CropName, Quantity) VALUES (1, 1, 'Wheat', 500), (2, 2, 'Corn', 300), (3, 3, 'Rice', 700), (4, 1, 'Soybean', 200), (5, 2, 'Barley', 400);",WITH HighProductionFarms AS (SELECT FarmID FROM CropProduction WHERE Quantity > 300 GROUP BY FarmID) SELECT FarmName FROM Farms WHERE FarmID IN (SELECT FarmID FROM HighProductionFarms);,The query creates a common table expression (CTE) to identify farms that produce more than 300 units of any crop. It then selects the farm names from the Farms table where the farm ID matches those in the CTE.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,data retrieval: basic data fetching queries,Find the regions with the highest average yield for each crop.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 3.5), (2, 'Corn', 'Europe', 4.2), (3, 'Rice', 'Asia', 5.0), (4, 'Soybean', 'South America', 2.8), (5, 'Barley', 'Australia', 3.1);","WITH AvgYield AS (SELECT CropName, Region, AVG(Yield) AS AvgYield FROM CropYields GROUP BY CropName, Region), MaxYield AS (SELECT CropName, MAX(AvgYield) AS MaxAvgYield FROM AvgYield GROUP BY CropName) SELECT AvgYield.CropName, AvgYield.Region, AvgYield.AvgYield FROM AvgYield JOIN MaxYield ON AvgYield.CropName = MaxYield.CropName AND AvgYield.AvgYield = MaxYield.MaxAvgYield;","The query creates two common table expressions (CTEs): one to calculate the average yield for each crop in different regions, and another to find the maximum average yield for each crop. It then selects the crop name, region, and average yield from the first CTE where the average yield matches the maximum average yield from the second CTE."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,data retrieval: basic data fetching queries,Display the total number of farms in each region.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Farms (FarmID, FarmName, Region) VALUES (1, 'Green Acres', 'North America'), (2, 'Sunny Fields', 'Europe'), (3, 'River Valley', 'Asia'), (4, 'Mountain View', 'South America'), (5, 'Ocean Breeze', 'Australia');","WITH FarmCount AS (SELECT Region, COUNT(FarmID) AS TotalFarms FROM Farms GROUP BY Region) SELECT Region, TotalFarms FROM FarmCount;",The query creates a common table expression (CTE) to count the total number of farms in each region. It then selects the region and total number of farms from the CTE.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Retrieve the total government spending by department for the year 2022.,"CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), FiscalYear INT, AmountSpent DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, FiscalYear, AmountSpent) VALUES (1, 'Health', 2022, 5000000), (2, 'Education', 2022, 3000000), (3, 'Defense', 2022, 7000000), (4, 'Transport', 2022, 2000000), (5, 'Welfare', 2022, 4000000);","SELECT DepartmentName, SUM(AmountSpent) AS TotalSpent FROM GovernmentSpending WHERE FiscalYear = 2022 GROUP BY DepartmentName;",The query selects the department names and the total amount spent by each department for the fiscal year 2022. It groups the results by department name and sums the spending amounts.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,List all legislative bills passed in 2021 along with their sponsors.,"CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), Sponsor VARCHAR(100), YearPassed INT); INSERT INTO LegislativeBills (BillID, BillName, Sponsor, YearPassed) VALUES (1, 'Healthcare Reform Act', 'John Doe', 2021), (2, 'Education Improvement Act', 'Jane Smith', 2021), (3, 'Defense Budget Act', 'Robert Brown', 2021), (4, 'Transport Infrastructure Act', 'Emily White', 2021), (5, 'Welfare Support Act', 'Michael Green', 2021);","SELECT BillName, Sponsor FROM LegislativeBills WHERE YearPassed = 2021;",The query retrieves the names of legislative bills and their sponsors that were passed in the year 2021.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the average age of citizens in each region.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Region VARCHAR(100)); INSERT INTO CitizenDemographics (CitizenID, Name, Age, Region) VALUES (1, 'Alice', 30, 'North'), (2, 'Bob', 45, 'South'), (3, 'Charlie', 35, 'East'), (4, 'Diana', 50, 'West'), (5, 'Eve', 40, 'North');","SELECT Region, AVG(Age) AS AverageAge FROM CitizenDemographics GROUP BY Region;",The query calculates the average age of citizens for each region by grouping the results by region and averaging the ages.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show the effectiveness ratings of governance for each city in 2022.,"CREATE TABLE GovernanceEffectiveness (CityID INT PRIMARY KEY, CityName VARCHAR(100), Year INT, EffectivenessRating DECIMAL); INSERT INTO GovernanceEffectiveness (CityID, CityName, Year, EffectivenessRating) VALUES (1, 'City A', 2022, 8.5), (2, 'City B', 2022, 7.2), (3, 'City C', 2022, 9.1), (4, 'City D', 2022, 6.8), (5, 'City E', 2022, 7.9);","SELECT CityName, EffectivenessRating FROM GovernanceEffectiveness WHERE Year = 2022;",The query retrieves the names of cities and their governance effectiveness ratings for the year 2022.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Get the list of public policies implemented in 2020 and their respective departments.,"CREATE TABLE PublicPolicies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), DepartmentID INT, YearImplemented INT); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); INSERT INTO PublicPolicies (PolicyID, PolicyName, DepartmentID, YearImplemented) VALUES (1, 'Policy A', 1, 2020), (2, 'Policy B', 2, 2020), (3, 'Policy C', 3, 2020), (4, 'Policy D', 4, 2020), (5, 'Policy E', 5, 2020); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Health'), (2, 'Education'), (3, 'Defense'), (4, 'Transport'), (5, 'Welfare');","SELECT p.PolicyName, d.DepartmentName FROM PublicPolicies p JOIN Departments d ON p.DepartmentID = d.DepartmentID WHERE p.YearImplemented = 2020;",The query retrieves the names of public policies implemented in 2020 along with the names of their respective departments by joining the PublicPolicies and Departments tables on the DepartmentID field.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new vehicle model with its sales data into the database and then retrieve the updated list of all vehicle models and their total sales.,"CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Technology VARCHAR(50)); CREATE TABLE SalesData (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, UnitsSold INT, FOREIGN KEY (ModelID) REFERENCES VehicleModels(ModelID));","INSERT INTO VehicleModels (ModelID, ModelName, Technology) VALUES (6, 'Model X', 'Electric'); INSERT INTO SalesData (SaleID, ModelID, SaleDate, UnitsSold) VALUES (10, 6, '2023-10-01', 150); SELECT VM.ModelName, SUM(SD.UnitsSold) AS TotalSales FROM VehicleModels VM INNER JOIN SalesData SD ON VM.ModelID = SD.ModelID GROUP BY VM.ModelName;",The query first inserts a new vehicle model 'Model X' into the VehicleModels table and its corresponding sales data into the SalesData table. It then retrieves the updated list of all vehicle models along with their total sales by performing an INNER JOIN on the VehicleModels and SalesData tables and grouping the results by the model name.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the technology type of a specific vehicle model and then display all models with their updated technology types.,"CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Technology VARCHAR(50));","UPDATE VehicleModels SET Technology = 'Hybrid' WHERE ModelName = 'Model Y'; SELECT ModelName, Technology FROM VehicleModels;",The query updates the technology type of 'Model Y' to 'Hybrid' in the VehicleModels table. It then selects and displays all vehicle models along with their updated technology types.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Delete sales records for a specific vehicle model and then show the remaining sales data.,"CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Technology VARCHAR(50)); CREATE TABLE SalesData (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, UnitsSold INT, FOREIGN KEY (ModelID) REFERENCES VehicleModels(ModelID));",DELETE FROM SalesData WHERE ModelID = (SELECT ModelID FROM VehicleModels WHERE ModelName = 'Model Z'); SELECT * FROM SalesData;,The query deletes all sales records for the vehicle model 'Model Z' from the SalesData table. It then selects and displays the remaining sales data.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new sustainable transportation initiative and then list all initiatives along with their details.,"CREATE TABLE Initiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(100), Description TEXT, StartDate DATE);","INSERT INTO Initiatives (InitiativeID, InitiativeName, Description, StartDate) VALUES (3, 'Green Fleet', 'A program to convert all company vehicles to electric by 2025', '2023-01-01'); SELECT * FROM Initiatives;",The query inserts a new sustainable transportation initiative called 'Green Fleet' into the Initiatives table. It then selects and displays all initiatives along with their details.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the sales units for a specific date and model, then retrieve the updated sales data.","CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Technology VARCHAR(50)); CREATE TABLE SalesData (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, UnitsSold INT, FOREIGN KEY (ModelID) REFERENCES VehicleModels(ModelID));",UPDATE SalesData SET UnitsSold = 200 WHERE ModelID = (SELECT ModelID FROM VehicleModels WHERE ModelName = 'Model A') AND SaleDate = '2023-09-15'; SELECT * FROM SalesData;,The query updates the sales units to 200 for 'Model A' on the date '2023-09-15' in the SalesData table. It then selects and displays the updated sales data.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total revenue generated from ticket sales for each sports event in the last year and identify the top 3 highest-grossing events.,"CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, EventID INT, SaleDate DATE, TicketPrice DECIMAL, QuantitySold INT, FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH TotalRevenue AS (SELECT E.EventName, SUM(TS.TicketPrice * TS.QuantitySold) AS Revenue FROM Events E JOIN TicketSales TS ON E.EventID = TS.EventID WHERE TS.SaleDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY E.EventName) SELECT EventName, Revenue FROM TotalRevenue ORDER BY Revenue DESC LIMIT 3;",The query calculates the total revenue for each event by summing the product of ticket price and quantity sold for sales made in the last year. It then selects the top 3 events with the highest revenue.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average performance score of athletes in each sport over the past 5 years and list the sports with an average score above 80.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100), Sport VARCHAR(50)); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, PerformanceDate DATE, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID));","WITH AvgPerformance AS (SELECT A.Sport, AVG(P.Score) AS AvgScore FROM Athletes A JOIN Performance P ON A.AthleteID = P.AthleteID WHERE P.PerformanceDate >= DATEADD(YEAR, -5, GETDATE()) GROUP BY A.Sport) SELECT Sport, AvgScore FROM AvgPerformance HAVING AvgScore > 80;",The query calculates the average performance score for athletes in each sport over the past 5 years and filters the results to include only those sports with an average score above 80.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the total number of fans engaged in different sports through social media interactions in the last month and identify the sport with the highest engagement.,"CREATE TABLE Sports (SportID INT PRIMARY KEY, SportName VARCHAR(50)); CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, SportID INT, EngagementDate DATE, InteractionType VARCHAR(50), InteractionCount INT, FOREIGN KEY (SportID) REFERENCES Sports(SportID));","WITH MonthlyEngagement AS (SELECT S.SportName, SUM(FE.InteractionCount) AS TotalInteractions FROM Sports S JOIN FanEngagement FE ON S.SportID = FE.SportID WHERE FE.EngagementDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY S.SportName) SELECT SportName, TotalInteractions FROM MonthlyEngagement ORDER BY TotalInteractions DESC LIMIT 1;",The query calculates the total number of social media interactions for each sport in the last month and identifies the sport with the highest engagement.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 athletes with the highest total earnings from sponsorship deals over the past 3 years.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100)); CREATE TABLE SponsorshipDeals (DealID INT PRIMARY KEY, AthleteID INT, DealDate DATE, DealAmount DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID));","WITH TotalEarnings AS (SELECT A.AthleteName, SUM(SD.DealAmount) AS TotalEarnings FROM Athletes A JOIN SponsorshipDeals SD ON A.AthleteID = SD.AthleteID WHERE SD.DealDate >= DATEADD(YEAR, -3, GETDATE()) GROUP BY A.AthleteName) SELECT AthleteName, TotalEarnings FROM TotalEarnings ORDER BY TotalEarnings DESC LIMIT 5;",The query calculates the total earnings from sponsorship deals for each athlete over the past 3 years and selects the top 5 athletes with the highest total earnings.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average attendance for each sports event type over the past 2 years and list the event types with an average attendance above 10,000.","CREATE TABLE EventTypes (EventTypeID INT PRIMARY KEY, EventTypeName VARCHAR(50)); CREATE TABLE EventAttendance (AttendanceID INT PRIMARY KEY, EventTypeID INT, EventDate DATE, AttendanceCount INT, FOREIGN KEY (EventTypeID) REFERENCES EventTypes(EventTypeID));","WITH AvgAttendance AS (SELECT ET.EventTypeName, AVG(EA.AttendanceCount) AS AvgAttendance FROM EventTypes ET JOIN EventAttendance EA ON ET.EventTypeID = EA.EventTypeID WHERE EA.EventDate >= DATEADD(YEAR, -2, GETDATE()) GROUP BY ET.EventTypeName) SELECT EventTypeName, AvgAttendance FROM AvgAttendance HAVING AvgAttendance > 10000;","The query calculates the average attendance for each event type over the past 2 years and filters the results to include only those event types with an average attendance above 10,000."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total sales of electric vehicles by region and year, and then display the total sales for each region for the year 2022.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), Region VARCHAR(50), SaleYear INT, UnitsSold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50));","CREATE TABLE EVSalesByRegion AS SELECT Region, SUM(UnitsSold) AS TotalSales FROM VehicleSales WHERE SaleYear = 2022 AND VehicleModel IN (SELECT ModelName FROM VehicleModels WHERE Type = 'Electric') GROUP BY Region;",The query creates a new table that aggregates the total sales of electric vehicles by region for the year 2022. It uses a subquery to filter only electric vehicle models and then groups the results by region.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the average CO2 emissions for different vehicle models and then display the models with emissions below 100 g/km.,"CREATE TABLE VehicleEmissions (EmissionID INT PRIMARY KEY, ModelName VARCHAR(50), CO2Emissions DECIMAL);","CREATE TABLE LowEmissionVehicles AS SELECT ModelName, CO2Emissions FROM VehicleEmissions WHERE CO2Emissions < 100;",The query creates a new table that stores vehicle models with CO2 emissions below 100 grams per kilometer. It filters the VehicleEmissions table to include only those models.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the number of hybrid vehicles sold in each region and then display the regions with sales above 5000 units.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), Region VARCHAR(50), SaleYear INT, UnitsSold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50));","CREATE TABLE HighHybridSales AS SELECT Region, SUM(UnitsSold) AS TotalSales FROM VehicleSales WHERE VehicleModel IN (SELECT ModelName FROM VehicleModels WHERE Type = 'Hybrid') GROUP BY Region HAVING SUM(UnitsSold) > 5000;",The query creates a new table that aggregates the total sales of hybrid vehicles by region and filters the results to include only those regions with sales above 5000 units.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the details of vehicle recalls and then display the recalls for vehicles manufactured after 2015.,"CREATE TABLE VehicleRecalls (RecallID INT PRIMARY KEY, ModelName VARCHAR(50), RecallReason VARCHAR(255), ManufactureYear INT);","CREATE TABLE RecentRecalls AS SELECT ModelName, RecallReason FROM VehicleRecalls WHERE ManufactureYear > 2015;",The query creates a new table that stores details of vehicle recalls for models manufactured after 2015. It filters the VehicleRecalls table to include only those recalls.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the fuel efficiency of different vehicle models and then display the models with efficiency above 50 mpg.,"CREATE TABLE FuelEfficiency (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), FuelEfficiencyMPG DECIMAL);","CREATE TABLE HighEfficiencyVehicles AS SELECT ModelName, FuelEfficiencyMPG FROM FuelEfficiency WHERE FuelEfficiencyMPG > 50;",The query creates a new table that stores vehicle models with fuel efficiency above 50 miles per gallon. It filters the FuelEfficiency table to include only those models.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average scores of athletes in different sports events, and then display the top 5 athletes with the highest average scores.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50)); CREATE TABLE Scores (ScoreID INT PRIMARY KEY, AthleteID INT, EventID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH AvgScores AS (SELECT AthleteID, AVG(Score) AS AvgScore FROM Scores GROUP BY AthleteID) SELECT A.AthleteName, S.AvgScore FROM AvgScores S INNER JOIN Athletes A ON S.AthleteID = A.AthleteID ORDER BY S.AvgScore DESC LIMIT 5;","The query first calculates the average score for each athlete using a common table expression (CTE). It then joins this CTE with the Athletes table to get the names of the athletes and orders the results by average score in descending order, limiting the output to the top 5 athletes."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated from ticket sales for different sports events, and then display the top 3 events with the highest revenue.","CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50)); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, EventID INT, Revenue DECIMAL, FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH TotalRevenue AS (SELECT EventID, SUM(Revenue) AS TotalRevenue FROM TicketSales GROUP BY EventID) SELECT E.EventName, T.TotalRevenue FROM TotalRevenue T INNER JOIN Events E ON T.EventID = E.EventID ORDER BY T.TotalRevenue DESC LIMIT 3;","The query first calculates the total revenue for each event using a common table expression (CTE). It then joins this CTE with the Events table to get the names of the events and orders the results by total revenue in descending order, limiting the output to the top 3 events."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of fans attending different sports events, and then display the top 5 events with the highest attendance.","CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50)); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, EventID INT, NumberOfFans INT, FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH TotalAttendance AS (SELECT EventID, SUM(NumberOfFans) AS TotalFans FROM Attendance GROUP BY EventID) SELECT E.EventName, T.TotalFans FROM TotalAttendance T INNER JOIN Events E ON T.EventID = E.EventID ORDER BY T.TotalFans DESC LIMIT 5;","The query first calculates the total number of fans for each event using a common table expression (CTE). It then joins this CTE with the Events table to get the names of the events and orders the results by total fans in descending order, limiting the output to the top 5 events."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average ticket price for different sports events, and then display the top 5 events with the highest average ticket price.","CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50)); CREATE TABLE TicketPrices (PriceID INT PRIMARY KEY, EventID INT, TicketPrice DECIMAL, FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH AvgPrices AS (SELECT EventID, AVG(TicketPrice) AS AvgPrice FROM TicketPrices GROUP BY EventID) SELECT E.EventName, A.AvgPrice FROM AvgPrices A INNER JOIN Events E ON A.EventID = E.EventID ORDER BY A.AvgPrice DESC LIMIT 5;","The query first calculates the average ticket price for each event using a common table expression (CTE). It then joins this CTE with the Events table to get the names of the events and orders the results by average ticket price in descending order, limiting the output to the top 5 events."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of medals won by athletes in different sports events, and then display the top 5 athletes with the highest number of medals.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50)); CREATE TABLE Medals (MedalID INT PRIMARY KEY, AthleteID INT, EventID INT, MedalType VARCHAR(10), FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH MedalCount AS (SELECT AthleteID, COUNT(MedalID) AS TotalMedals FROM Medals GROUP BY AthleteID) SELECT A.AthleteName, M.TotalMedals FROM MedalCount M INNER JOIN Athletes A ON M.AthleteID = A.AthleteID ORDER BY M.TotalMedals DESC LIMIT 5;","The query first calculates the total number of medals for each athlete using a common table expression (CTE). It then joins this CTE with the Athletes table to get the names of the athletes and orders the results by total medals in descending order, limiting the output to the top 5 athletes."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the names and ages of patients who have been prescribed a specific medication and have a recorded side effect.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(50)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT p.Name, p.Age FROM Patients p WHERE p.PatientID IN (SELECT s.PatientID FROM SideEffects s) AND p.PatientID IN (SELECT pr.PatientID FROM Prescriptions pr WHERE pr.MedicationID = (SELECT MedicationID FROM Medications WHERE MedicationName = 'specific medication'));",The query retrieves the names and ages of patients who have been prescribed a specific medication and have a recorded side effect. It uses subqueries to filter patients based on their prescriptions and side effects.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the treatment protocols and outcomes for patients diagnosed with a specific condition.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentProtocol VARCHAR(255), Outcome VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT t.TreatmentProtocol, t.Outcome FROM Treatments t WHERE t.PatientID IN (SELECT d.PatientID FROM Diagnoses d WHERE d.Condition = 'specific condition');",The query lists the treatment protocols and outcomes for patients diagnosed with a specific condition. It uses a subquery to filter patients based on their diagnoses.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the average age of patients who have experienced side effects from a specific drug.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(50)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",SELECT AVG(p.Age) AS AverageAge FROM Patients p WHERE p.PatientID IN (SELECT s.PatientID FROM SideEffects s) AND p.PatientID IN (SELECT pr.PatientID FROM Prescriptions pr WHERE pr.MedicationID = (SELECT MedicationID FROM Medications WHERE MedicationName = 'specific drug'));,The query calculates the average age of patients who have experienced side effects from a specific drug. It uses subqueries to filter patients based on their prescriptions and side effects.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Get the list of patients who have been treated for multiple conditions.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",SELECT p.Name FROM Patients p WHERE p.PatientID IN (SELECT d.PatientID FROM Diagnoses d GROUP BY d.PatientID HAVING COUNT(DISTINCT d.Condition) > 1);,The query retrieves the list of patients who have been treated for multiple conditions. It uses a subquery to group patients by their diagnoses and filters those who have more than one distinct condition.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Show the names of patients and the medications they are prescribed, along with any side effects they have experienced.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(50)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT p.Name, m.MedicationName, s.SideEffectDescription FROM Patients p JOIN Prescriptions pr ON p.PatientID = pr.PatientID JOIN Medications m ON pr.MedicationID = m.MedicationID LEFT JOIN SideEffects s ON p.PatientID = s.PatientID;","The query shows the names of patients and the medications they are prescribed, along with any side effects they have experienced. It uses JOINs to combine data from multiple tables and a LEFT JOIN to include patients who may not have side effects."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",List the top 3 regions with the highest average temperature increases over the past decade.,"CREATE TABLE TemperatureData (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, AvgTemperature DECIMAL); INSERT INTO TemperatureData (RegionID, RegionName, Year, AvgTemperature) VALUES (1, 'North America', 2010, 15.5), (1, 'North America', 2020, 16.5), (2, 'Europe', 2010, 14.0), (2, 'Europe', 2020, 15.0), (3, 'Asia', 2010, 20.0), (3, 'Asia', 2020, 21.5);","WITH TempIncrease AS (SELECT RegionName, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS TempChange FROM TemperatureData WHERE Year BETWEEN 2010 AND 2020 GROUP BY RegionName) SELECT RegionName, TempChange FROM TempIncrease ORDER BY TempChange DESC LIMIT 3;",The query calculates the temperature change for each region over the past decade by finding the difference between the maximum and minimum average temperatures for each region. It then selects the top 3 regions with the highest temperature increases.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify the top 5 species that have shown the most significant population decline in the last 5 years.,"CREATE TABLE SpeciesPopulation (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Year INT, Population INT); INSERT INTO SpeciesPopulation (SpeciesID, SpeciesName, Year, Population) VALUES (1, 'Tiger', 2015, 3200), (1, 'Tiger', 2020, 3000), (2, 'Elephant', 2015, 50000), (2, 'Elephant', 2020, 47000), (3, 'Panda', 2015, 1864), (3, 'Panda', 2020, 1860), (4, 'Rhino', 2015, 29000), (4, 'Rhino', 2020, 27000), (5, 'Gorilla', 2015, 1000), (5, 'Gorilla', 2020, 900);","WITH PopulationDecline AS (SELECT SpeciesName, (MAX(Population) - MIN(Population)) AS PopChange FROM SpeciesPopulation WHERE Year BETWEEN 2015 AND 2020 GROUP BY SpeciesName) SELECT SpeciesName, PopChange FROM PopulationDecline ORDER BY PopChange ASC LIMIT 5;",The query calculates the population change for each species over the last 5 years by finding the difference between the maximum and minimum population counts for each species. It then selects the top 5 species with the most significant population declines.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Find the top 3 countries with the highest percentage of renewable energy usage in the last year.,"CREATE TABLE EnergyUsage (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, TotalEnergyUsage DECIMAL, RenewableEnergyUsage DECIMAL); INSERT INTO EnergyUsage (CountryID, CountryName, Year, TotalEnergyUsage, RenewableEnergyUsage) VALUES (1, 'Germany', 2020, 5000, 2000), (2, 'France', 2020, 4000, 1500), (3, 'China', 2020, 10000, 3000), (4, 'USA', 2020, 12000, 2500), (5, 'India', 2020, 8000, 1000);","WITH RenewablePercentage AS (SELECT CountryName, (RenewableEnergyUsage / TotalEnergyUsage) * 100 AS RenewablePct FROM EnergyUsage WHERE Year = 2020) SELECT CountryName, RenewablePct FROM RenewablePercentage ORDER BY RenewablePct DESC LIMIT 3;",The query calculates the percentage of renewable energy usage for each country in the last year by dividing the renewable energy usage by the total energy usage and multiplying by 100. It then selects the top 3 countries with the highest percentages.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Determine the top 3 cities with the most significant reduction in air pollution levels over the past 5 years.,"CREATE TABLE AirQuality (CityID INT PRIMARY KEY, CityName VARCHAR(50), Year INT, PollutionLevel DECIMAL); INSERT INTO AirQuality (CityID, CityName, Year, PollutionLevel) VALUES (1, 'Los Angeles', 2015, 75.0), (1, 'Los Angeles', 2020, 65.0), (2, 'Beijing', 2015, 150.0), (2, 'Beijing', 2020, 130.0), (3, 'Delhi', 2015, 200.0), (3, 'Delhi', 2020, 180.0), (4, 'London', 2015, 50.0), (4, 'London', 2020, 45.0), (5, 'Paris', 2015, 55.0), (5, 'Paris', 2020, 50.0);","WITH PollutionReduction AS (SELECT CityName, (MAX(PollutionLevel) - MIN(PollutionLevel)) AS PollutionChange FROM AirQuality WHERE Year BETWEEN 2015 AND 2020 GROUP BY CityName) SELECT CityName, PollutionChange FROM PollutionReduction ORDER BY PollutionChange DESC LIMIT 3;",The query calculates the reduction in pollution levels for each city over the past 5 years by finding the difference between the maximum and minimum pollution levels for each city. It then selects the top 3 cities with the most significant reductions.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify the top 3 projects with the highest funding in sustainable development initiatives over the past decade.,"CREATE TABLE ProjectFunding (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), Year INT, FundingAmount DECIMAL); INSERT INTO ProjectFunding (ProjectID, ProjectName, Year, FundingAmount) VALUES (1, 'Clean Water Initiative', 2010, 500000), (1, 'Clean Water Initiative', 2020, 700000), (2, 'Renewable Energy Project', 2010, 1000000), (2, 'Renewable Energy Project', 2020, 1500000), (3, 'Forest Conservation', 2010, 300000), (3, 'Forest Conservation', 2020, 500000), (4, 'Urban Green Spaces', 2010, 200000), (4, 'Urban Green Spaces', 2020, 400000), (5, 'Sustainable Agriculture', 2010, 600000), (5, 'Sustainable Agriculture', 2020, 800000);","WITH FundingIncrease AS (SELECT ProjectName, (MAX(FundingAmount) - MIN(FundingAmount)) AS FundingChange FROM ProjectFunding WHERE Year BETWEEN 2010 AND 2020 GROUP BY ProjectName) SELECT ProjectName, FundingChange FROM FundingIncrease ORDER BY FundingChange DESC LIMIT 3;",The query calculates the funding increase for each project over the past decade by finding the difference between the maximum and minimum funding amounts for each project. It then selects the top 3 projects with the highest funding increases.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Find the top 3 genres that have the highest average user ratings, excluding genres that have less than 10 reviews.","CREATE TABLE MediaConsumption (UserID INT, MediaID INT, Genre VARCHAR(50), Rating DECIMAL, ReviewCount INT); CREATE TABLE ContentCreation (ContentID INT, CreatorID INT, Genre VARCHAR(50), Revenue DECIMAL);","WITH GenreRatings AS (SELECT Genre, AVG(Rating) AS AvgRating, SUM(ReviewCount) AS TotalReviews FROM MediaConsumption GROUP BY Genre HAVING SUM(ReviewCount) >= 10) SELECT Genre, AvgRating FROM GenreRatings ORDER BY AvgRating DESC LIMIT 3;","The query first creates a common table expression (CTE) named GenreRatings that calculates the average rating and total number of reviews for each genre, filtering out genres with less than 10 reviews. It then selects the top 3 genres with the highest average ratings."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Update the revenue for content creators who have produced content in the 'Documentary' genre and have generated more than $50,000 in revenue.","CREATE TABLE ContentCreation (ContentID INT, CreatorID INT, Genre VARCHAR(50), Revenue DECIMAL); CREATE TABLE CreatorDetails (CreatorID INT, CreatorName VARCHAR(50), TotalRevenue DECIMAL);",UPDATE CreatorDetails SET TotalRevenue = (SELECT SUM(Revenue) FROM ContentCreation WHERE ContentCreation.CreatorID = CreatorDetails.CreatorID AND Genre = 'Documentary' AND Revenue > 50000);,"The query updates the TotalRevenue field in the CreatorDetails table for creators who have produced content in the 'Documentary' genre and have generated more than $50,000 in revenue. It uses a subquery to calculate the sum of revenue for each qualifying creator."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Delete records of media consumption for users who have not logged in for over a year.,"CREATE TABLE MediaConsumption (UserID INT, MediaID INT, Genre VARCHAR(50), Rating DECIMAL, LastLogin DATE); CREATE TABLE UserActivity (UserID INT, LastLogin DATE);","DELETE FROM MediaConsumption WHERE UserID IN (SELECT UserID FROM UserActivity WHERE LastLogin < DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",The query deletes records from the MediaConsumption table for users who have not logged in for over a year. It uses a subquery to identify such users based on the LastLogin date in the UserActivity table.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert new media consumption records for a user who has recently watched multiple genres of content.,"CREATE TABLE MediaConsumption (UserID INT, MediaID INT, Genre VARCHAR(50), Rating DECIMAL, ReviewCount INT);","INSERT INTO MediaConsumption (UserID, MediaID, Genre, Rating, ReviewCount) VALUES (101, 201, 'Action', 4.5, 1), (101, 202, 'Comedy', 3.8, 1), (101, 203, 'Drama', 4.2, 1);","The query inserts new records into the MediaConsumption table for a user with UserID 101 who has recently watched content in the 'Action', 'Comedy', and 'Drama' genres. Each record includes the MediaID, Genre, Rating, and ReviewCount."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Find the total revenue generated by content creators who have produced content in both 'Action' and 'Sci-Fi' genres.,"CREATE TABLE ContentCreation (ContentID INT, CreatorID INT, Genre VARCHAR(50), Revenue DECIMAL);",SELECT SUM(Revenue) AS TotalRevenue FROM ContentCreation WHERE CreatorID IN (SELECT CreatorID FROM ContentCreation WHERE Genre = 'Action' INTERSECT SELECT CreatorID FROM ContentCreation WHERE Genre = 'Sci-Fi');,The query calculates the total revenue generated by content creators who have produced content in both 'Action' and 'Sci-Fi' genres. It uses an INTERSECT operation to find creators who have worked in both genres and then sums their revenue.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Identify the top 3 most innovative companies in the AI sector based on their R&D expenditure and the number of patents filed in the last year.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE RnDExpenditure (CompanyID INT, Year INT, Expenditure DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyID INT, Year INT, PatentCount INT, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH RecentRnD AS (SELECT CompanyID, SUM(Expenditure) AS TotalExpenditure FROM RnDExpenditure WHERE Year = YEAR(CURDATE()) - 1 GROUP BY CompanyID), RecentPatents AS (SELECT CompanyID, SUM(PatentCount) AS TotalPatents FROM Patents WHERE Year = YEAR(CURDATE()) - 1 GROUP BY CompanyID) SELECT c.CompanyName, r.TotalExpenditure, p.TotalPatents FROM Companies c JOIN RecentRnD r ON c.CompanyID = r.CompanyID JOIN RecentPatents p ON c.CompanyID = p.CompanyID ORDER BY r.TotalExpenditure DESC, p.TotalPatents DESC LIMIT 3;","The query first creates two common table expressions (CTEs) to aggregate R&D expenditure and patent counts for the last year. It then joins these CTEs with the Companies table to retrieve the company names and sorts the results by R&D expenditure and patent counts in descending order, limiting the output to the top 3 companies."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the market share of companies in the renewable energy sector based on their latest quarterly revenue data.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE Revenue (CompanyID INT, Quarter INT, Year INT, Revenue DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); CREATE TABLE MarketShare (CompanyID INT, MarketShare DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH LatestRevenue AS (SELECT CompanyID, SUM(Revenue) AS TotalRevenue FROM Revenue WHERE Year = YEAR(CURDATE()) AND Quarter = (SELECT MAX(Quarter) FROM Revenue WHERE Year = YEAR(CURDATE())) GROUP BY CompanyID), TotalMarketRevenue AS (SELECT SUM(TotalRevenue) AS MarketRevenue FROM LatestRevenue) UPDATE MarketShare SET MarketShare = (SELECT lr.TotalRevenue / tmr.MarketRevenue FROM LatestRevenue lr, TotalMarketRevenue tmr WHERE MarketShare.CompanyID = lr.CompanyID);",The query first creates two common table expressions (CTEs) to calculate the latest quarterly revenue for each company and the total market revenue. It then updates the MarketShare table by dividing each company's revenue by the total market revenue to compute the market share.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete records of obsolete technologies from the database that have not been updated in the last 5 years.,"CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(100), LastUpdated DATE);","DELETE FROM Technologies WHERE LastUpdated < DATE_SUB(CURDATE(), INTERVAL 5 YEAR);",The query deletes records from the Technologies table where the LastUpdated date is older than 5 years from the current date.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert new records of emerging technologies in the blockchain sector along with their initial market impact scores.,"CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE MarketImpact (TechID INT, ImpactScore DECIMAL, FOREIGN KEY (TechID) REFERENCES Technologies(TechID));","INSERT INTO Technologies (TechID, TechName, Sector) VALUES (1, 'Blockchain A', 'Blockchain'), (2, 'Blockchain B', 'Blockchain'); INSERT INTO MarketImpact (TechID, ImpactScore) VALUES (1, 75.5), (2, 82.3);",The query inserts new records into the Technologies table for emerging blockchain technologies and then inserts corresponding initial market impact scores into the MarketImpact table.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Retrieve the top 5 regions with the highest adoption rates of 5G technology based on the number of active users.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE TechnologyAdoption (RegionID INT, TechName VARCHAR(100), ActiveUsers INT, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH AdoptionRates AS (SELECT RegionID, SUM(ActiveUsers) AS TotalUsers FROM TechnologyAdoption WHERE TechName = '5G' GROUP BY RegionID) SELECT r.RegionName, ar.TotalUsers FROM Regions r JOIN AdoptionRates ar ON r.RegionID = ar.RegionID ORDER BY ar.TotalUsers DESC LIMIT 5;","The query creates a common table expression (CTE) to aggregate the number of active users for 5G technology by region. It then joins this CTE with the Regions table to retrieve the region names and sorts the results by the number of active users in descending order, limiting the output to the top 5 regions."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the monthly sales data for electric vehicles across different regions, and then display the top 3 regions with the highest sales growth rate over the last year.","CREATE TABLE EVSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, SalesCount INT); INSERT INTO EVSales (SaleID, ModelName, Region, SaleDate, SalesCount) VALUES (1, 'Model S', 'North America', '2022-01-01', 150), (2, 'Model 3', 'Europe', '2022-01-01', 200), (3, 'Leaf', 'Asia', '2022-01-01', 180), (4, 'Bolt', 'North America', '2022-02-01', 160), (5, 'Prius', 'Europe', '2022-02-01', 210);","WITH SalesGrowth AS (SELECT Region, (SUM(SalesCount) - LAG(SUM(SalesCount)) OVER (PARTITION BY Region ORDER BY SaleDate)) / LAG(SUM(SalesCount)) OVER (PARTITION BY Region ORDER BY SaleDate) AS GrowthRate FROM EVSales GROUP BY Region, SaleDate) SELECT Region, GrowthRate FROM SalesGrowth ORDER BY GrowthRate DESC LIMIT 3;",The query calculates the sales growth rate for each region by comparing the current month's sales with the previous month's sales using the LAG window function. It then selects the top 3 regions with the highest sales growth rate.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the details of various automotive technologies and their adoption rates across different countries, and then display the top 5 countries with the highest adoption rates for autonomous driving technology.","CREATE TABLE AutoTechAdoption (TechID INT PRIMARY KEY, TechName VARCHAR(50), Country VARCHAR(50), AdoptionRate DECIMAL); INSERT INTO AutoTechAdoption (TechID, TechName, Country, AdoptionRate) VALUES (1, 'Autonomous Driving', 'USA', 75.5), (2, 'Electric Vehicles', 'Germany', 65.0), (3, 'Autonomous Driving', 'Japan', 80.0), (4, 'Electric Vehicles', 'China', 70.0), (5, 'Autonomous Driving', 'Germany', 85.0);","WITH RankedCountries AS (SELECT Country, AdoptionRate, DENSE_RANK() OVER (ORDER BY AdoptionRate DESC) AS Rank FROM AutoTechAdoption WHERE TechName = 'Autonomous Driving') SELECT Country, AdoptionRate FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank countries based on their adoption rates for autonomous driving technology in descending order. It then selects the top 5 countries using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the CO2 emissions data for different vehicle models across various regions, and then display the top 5 models with the lowest CO2 emissions.","CREATE TABLE CO2Emissions (EmissionID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), CO2Emission DECIMAL); INSERT INTO CO2Emissions (EmissionID, ModelName, Region, CO2Emission) VALUES (1, 'Model S', 'North America', 120.5), (2, 'Model 3', 'Europe', 118.0), (3, 'Leaf', 'Asia', 110.0), (4, 'Bolt', 'North America', 115.7), (5, 'Prius', 'Europe', 95.0);","WITH RankedModels AS (SELECT ModelName, CO2Emission, DENSE_RANK() OVER (ORDER BY CO2Emission ASC) AS Rank FROM CO2Emissions) SELECT ModelName, CO2Emission FROM RankedModels WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank vehicle models based on their CO2 emissions in ascending order. It then selects the top 5 models with the lowest CO2 emissions using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the market share data for different automotive manufacturers across various regions, and then display the top 3 manufacturers with the highest market share in the last quarter.","CREATE TABLE MarketShare (ShareID INT PRIMARY KEY, ManufacturerName VARCHAR(50), Region VARCHAR(50), Quarter INT, MarketShare DECIMAL); INSERT INTO MarketShare (ShareID, ManufacturerName, Region, Quarter, MarketShare) VALUES (1, 'Tesla', 'North America', 1, 30.5), (2, 'BMW', 'Europe', 1, 25.0), (3, 'Nissan', 'Asia', 1, 20.0), (4, 'Chevrolet', 'North America', 2, 28.0), (5, 'Toyota', 'Europe', 2, 22.0);","WITH RankedManufacturers AS (SELECT ManufacturerName, MarketShare, DENSE_RANK() OVER (ORDER BY MarketShare DESC) AS Rank FROM MarketShare WHERE Quarter = 2) SELECT ManufacturerName, MarketShare FROM RankedManufacturers WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank automotive manufacturers based on their market share in the last quarter (Quarter 2) in descending order. It then selects the top 3 manufacturers using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the fuel efficiency data for different vehicle models across various regions, and then display the top 5 most fuel-efficient models in the last year.","CREATE TABLE FuelEfficiency (EfficiencyID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Year INT, FuelEfficiency DECIMAL); INSERT INTO FuelEfficiency (EfficiencyID, ModelName, Region, Year, FuelEfficiency) VALUES (1, 'Model S', 'North America', 2022, 120.5), (2, 'Model 3', 'Europe', 2022, 118.0), (3, 'Leaf', 'Asia', 2022, 110.0), (4, 'Bolt', 'North America', 2022, 115.7), (5, 'Prius', 'Europe', 2022, 95.0);","WITH RankedModels AS (SELECT ModelName, FuelEfficiency, DENSE_RANK() OVER (ORDER BY FuelEfficiency DESC) AS Rank FROM FuelEfficiency WHERE Year = 2022) SELECT ModelName, FuelEfficiency FROM RankedModels WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank vehicle models based on their fuel efficiency in the last year (2022) in descending order. It then selects the top 5 most fuel-efficient models using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 3 players with the highest average score in basketball games, but only include games where the player scored more than 20 points.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, GameDate DATE); CREATE TABLE PlayerScores (PlayerID INT, GameID INT, PointsScored INT, PRIMARY KEY (PlayerID, GameID), FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (GameID) REFERENCES Games(GameID));","WITH FilteredScores AS (SELECT PlayerID, AVG(PointsScored) AS AvgScore FROM PlayerScores WHERE PointsScored > 20 GROUP BY PlayerID) SELECT PlayerName, AvgScore FROM FilteredScores JOIN Players ON FilteredScores.PlayerID = Players.PlayerID ORDER BY AvgScore DESC LIMIT 3;","The query first filters the scores to include only those where the player scored more than 20 points. It then calculates the average score for each player and ranks them in descending order. Finally, it selects the top 3 players with the highest average scores."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the top 5 football teams with the highest average attendance per game, but only include games played in the last 2 years.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, HomeTeamID INT, AwayTeamID INT, Attendance INT, FOREIGN KEY (HomeTeamID) REFERENCES Teams(TeamID), FOREIGN KEY (AwayTeamID) REFERENCES Teams(TeamID));","WITH RecentMatches AS (SELECT * FROM Matches WHERE MatchDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)), TeamAttendance AS (SELECT HomeTeamID AS TeamID, AVG(Attendance) AS AvgAttendance FROM RecentMatches GROUP BY HomeTeamID) SELECT TeamName, AvgAttendance FROM TeamAttendance JOIN Teams ON TeamAttendance.TeamID = Teams.TeamID ORDER BY AvgAttendance DESC LIMIT 5;","The query first filters matches to include only those played in the last 2 years. It then calculates the average attendance for each team based on home games and ranks them in descending order. Finally, it selects the top 5 teams with the highest average attendance."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 tennis players with the most wins in the last year, but only include matches where the player won in straight sets.","CREATE TABLE TennisPlayers (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE TennisMatches (MatchID INT PRIMARY KEY, MatchDate DATE, WinnerID INT, LoserID INT, SetsWon INT, SetsLost INT, FOREIGN KEY (WinnerID) REFERENCES TennisPlayers(PlayerID), FOREIGN KEY (LoserID) REFERENCES TennisPlayers(PlayerID));","WITH RecentWins AS (SELECT WinnerID, COUNT(*) AS WinCount FROM TennisMatches WHERE MatchDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND SetsLost = 0 GROUP BY WinnerID) SELECT PlayerName, WinCount FROM RecentWins JOIN TennisPlayers ON RecentWins.WinnerID = TennisPlayers.PlayerID ORDER BY WinCount DESC LIMIT 3;","The query first filters matches to include only those played in the last year and where the winner won in straight sets. It then counts the number of such wins for each player and ranks them in descending order. Finally, it selects the top 3 players with the most wins."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 cricket players with the highest batting average, but only include players who have played at least 10 matches.","CREATE TABLE CricketPlayers (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE CricketMatches (MatchID INT PRIMARY KEY, MatchDate DATE); CREATE TABLE BattingStats (PlayerID INT, MatchID INT, RunsScored INT, PRIMARY KEY (PlayerID, MatchID), FOREIGN KEY (PlayerID) REFERENCES CricketPlayers(PlayerID), FOREIGN KEY (MatchID) REFERENCES CricketMatches(MatchID));","WITH PlayerStats AS (SELECT PlayerID, AVG(RunsScored) AS BattingAverage, COUNT(*) AS MatchesPlayed FROM BattingStats GROUP BY PlayerID HAVING COUNT(*) >= 10) SELECT PlayerName, BattingAverage FROM PlayerStats JOIN CricketPlayers ON PlayerStats.PlayerID = CricketPlayers.PlayerID ORDER BY BattingAverage DESC LIMIT 5;","The query first calculates the batting average and the number of matches played for each player, filtering to include only those who have played at least 10 matches. It then ranks the players by batting average in descending order. Finally, it selects the top 5 players with the highest batting averages."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the top 3 soccer players with the most assists in the current season, but only include players who have played in at least 15 matches.","CREATE TABLE SoccerPlayers (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE SoccerMatches (MatchID INT PRIMARY KEY, MatchDate DATE); CREATE TABLE PlayerAssists (PlayerID INT, MatchID INT, Assists INT, PRIMARY KEY (PlayerID, MatchID), FOREIGN KEY (PlayerID) REFERENCES SoccerPlayers(PlayerID), FOREIGN KEY (MatchID) REFERENCES SoccerMatches(MatchID));","WITH CurrentSeasonAssists AS (SELECT PlayerID, SUM(Assists) AS TotalAssists, COUNT(*) AS MatchesPlayed FROM PlayerAssists WHERE YEAR(MatchDate) = YEAR(CURDATE()) GROUP BY PlayerID HAVING COUNT(*) >= 15) SELECT PlayerName, TotalAssists FROM CurrentSeasonAssists JOIN SoccerPlayers ON CurrentSeasonAssists.PlayerID = SoccerPlayers.PlayerID ORDER BY TotalAssists DESC LIMIT 3;","The query first calculates the total number of assists and the number of matches played for each player in the current season, filtering to include only those who have played at least 15 matches. It then ranks the players by total assists in descending order. Finally, it selects the top 3 players with the most assists."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report of all unique legislative bills that have been proposed but not passed.,"CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), Status VARCHAR(50)); INSERT INTO LegislativeBills (BillID, BillName, Status) VALUES (1, 'Healthcare Reform', 'Proposed'), (2, 'Education Funding', 'Passed'), (3, 'Infrastructure Development', 'Proposed'), (4, 'Tax Reduction', 'Passed'), (5, 'Climate Action', 'Proposed');",SELECT BillName FROM LegislativeBills WHERE Status = 'Proposed' EXCEPT SELECT BillName FROM LegislativeBills WHERE Status = 'Passed';,The query selects all bill names from the LegislativeBills table where the status is 'Proposed' and excludes those that have a status of 'Passed' using the EXCEPT set operation.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",List all regions that have received government funding for both healthcare and education.,"CREATE TABLE GovernmentFunding (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), Sector VARCHAR(50), Amount DECIMAL); INSERT INTO GovernmentFunding (RegionID, RegionName, Sector, Amount) VALUES (1, 'North', 'Healthcare', 500000), (2, 'South', 'Education', 300000), (3, 'North', 'Education', 200000), (4, 'East', 'Healthcare', 400000), (5, 'West', 'Education', 250000);",SELECT RegionName FROM GovernmentFunding WHERE Sector = 'Healthcare' INTERSECT SELECT RegionName FROM GovernmentFunding WHERE Sector = 'Education';,The query selects region names from the GovernmentFunding table where the sector is 'Healthcare' and intersects them with region names where the sector is 'Education' to find regions that have received funding for both sectors.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find all citizens who are eligible for both healthcare benefits and education grants.,"CREATE TABLE CitizenBenefits (CitizenID INT PRIMARY KEY, CitizenName VARCHAR(100), BenefitType VARCHAR(50)); INSERT INTO CitizenBenefits (CitizenID, CitizenName, BenefitType) VALUES (1, 'John Doe', 'Healthcare'), (2, 'Jane Smith', 'Education'), (3, 'Alice Johnson', 'Healthcare'), (4, 'Bob Brown', 'Education'), (5, 'Charlie Davis', 'Healthcare');",SELECT CitizenName FROM CitizenBenefits WHERE BenefitType = 'Healthcare' INTERSECT SELECT CitizenName FROM CitizenBenefits WHERE BenefitType = 'Education';,The query selects citizen names from the CitizenBenefits table where the benefit type is 'Healthcare' and intersects them with citizen names where the benefit type is 'Education' to find citizens eligible for both benefits.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a list of all public policies that have been implemented in either 2020 or 2021 but not in both years.,"CREATE TABLE PublicPolicies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), ImplementationYear INT); INSERT INTO PublicPolicies (PolicyID, PolicyName, ImplementationYear) VALUES (1, 'Policy A', 2020), (2, 'Policy B', 2021), (3, 'Policy C', 2020), (4, 'Policy D', 2021), (5, 'Policy E', 2020);",SELECT PolicyName FROM PublicPolicies WHERE ImplementationYear = 2020 UNION SELECT PolicyName FROM PublicPolicies WHERE ImplementationYear = 2021 EXCEPT SELECT PolicyName FROM PublicPolicies WHERE ImplementationYear = 2020 INTERSECT SELECT PolicyName FROM PublicPolicies WHERE ImplementationYear = 2021;,"The query selects policy names from the PublicPolicies table where the implementation year is either 2020 or 2021 and excludes those that were implemented in both years using a combination of UNION, EXCEPT, and INTERSECT set operations."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Identify all demographic groups that are represented in both the census data and the voter registration data.,"CREATE TABLE CensusData (GroupID INT PRIMARY KEY, GroupName VARCHAR(100)); CREATE TABLE VoterRegistration (GroupID INT PRIMARY KEY, GroupName VARCHAR(100)); INSERT INTO CensusData (GroupID, GroupName) VALUES (1, 'Youth'), (2, 'Adults'), (3, 'Seniors'); INSERT INTO VoterRegistration (GroupID, GroupName) VALUES (1, 'Youth'), (2, 'Adults'), (4, 'Veterans');",SELECT GroupName FROM CensusData INTERSECT SELECT GroupName FROM VoterRegistration;,The query selects group names from the CensusData table and intersects them with group names from the VoterRegistration table to identify demographic groups represented in both datasets.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 10 countries with the highest reduction in CO2 emissions over the last decade.,"CREATE TABLE Emissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, CO2Emissions DECIMAL); INSERT INTO Emissions (CountryID, CountryName, Year, CO2Emissions) VALUES (1, 'USA', 2010, 5000.0), (1, 'USA', 2020, 4500.0), (2, 'China', 2010, 10000.0), (2, 'China', 2020, 9500.0), (3, 'India', 2010, 3000.0), (3, 'India', 2020, 3200.0);","WITH EmissionReduction AS (SELECT CountryName, (MAX(CO2Emissions) - MIN(CO2Emissions)) AS Reduction FROM Emissions WHERE Year BETWEEN 2010 AND 2020 GROUP BY CountryName) SELECT CountryName, Reduction FROM EmissionReduction ORDER BY Reduction DESC LIMIT 10;",The query calculates the reduction in CO2 emissions for each country over the last decade by finding the difference between the maximum and minimum emissions recorded between 2010 and 2020. It then selects the top 10 countries with the highest reduction.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 regions with the highest average temperature increase over the past 20 years.,"CREATE TABLE Temperature (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, AvgTemperature DECIMAL); INSERT INTO Temperature (RegionID, RegionName, Year, AvgTemperature) VALUES (1, 'North America', 2000, 15.0), (1, 'North America', 2020, 16.5), (2, 'Europe', 2000, 10.0), (2, 'Europe', 2020, 11.5), (3, 'Asia', 2000, 25.0), (3, 'Asia', 2020, 26.5);","WITH TempIncrease AS (SELECT RegionName, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS Increase FROM Temperature WHERE Year BETWEEN 2000 AND 2020 GROUP BY RegionName) SELECT RegionName, Increase FROM TempIncrease ORDER BY Increase DESC LIMIT 5;",The query calculates the average temperature increase for each region over the past 20 years by finding the difference between the maximum and minimum average temperatures recorded between 2000 and 2020. It then selects the top 5 regions with the highest increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 species with the highest population decline in the last 50 years.,"CREATE TABLE SpeciesPopulation (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Year INT, Population INT); INSERT INTO SpeciesPopulation (SpeciesID, SpeciesName, Year, Population) VALUES (1, 'Tiger', 1970, 100000), (1, 'Tiger', 2020, 3900), (2, 'Elephant', 1970, 150000), (2, 'Elephant', 2020, 41500), (3, 'Rhino', 1970, 70000), (3, 'Rhino', 2020, 27000);","WITH PopulationDecline AS (SELECT SpeciesName, (MIN(Population) - MAX(Population)) AS Decline FROM SpeciesPopulation WHERE Year BETWEEN 1970 AND 2020 GROUP BY SpeciesName) SELECT SpeciesName, Decline FROM PopulationDecline ORDER BY Decline DESC LIMIT 5;",The query calculates the population decline for each species over the last 50 years by finding the difference between the minimum and maximum populations recorded between 1970 and 2020. It then selects the top 5 species with the highest decline.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 renewable energy projects with the highest energy output in the last decade.,"CREATE TABLE RenewableEnergy (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), Year INT, EnergyOutput DECIMAL); INSERT INTO RenewableEnergy (ProjectID, ProjectName, Year, EnergyOutput) VALUES (1, 'Solar Farm A', 2010, 500.0), (1, 'Solar Farm A', 2020, 700.0), (2, 'Wind Farm B', 2010, 300.0), (2, 'Wind Farm B', 2020, 600.0), (3, 'Hydro Plant C', 2010, 800.0), (3, 'Hydro Plant C', 2020, 900.0);","WITH EnergyOutputIncrease AS (SELECT ProjectName, (MAX(EnergyOutput) - MIN(EnergyOutput)) AS OutputIncrease FROM RenewableEnergy WHERE Year BETWEEN 2010 AND 2020 GROUP BY ProjectName) SELECT ProjectName, OutputIncrease FROM EnergyOutputIncrease ORDER BY OutputIncrease DESC LIMIT 5;",The query calculates the energy output increase for each renewable energy project over the last decade by finding the difference between the maximum and minimum energy outputs recorded between 2010 and 2020. It then selects the top 5 projects with the highest increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 countries with the highest increase in protected land area over the past 30 years.,"CREATE TABLE ProtectedAreas (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, ProtectedLandArea DECIMAL); INSERT INTO ProtectedAreas (CountryID, CountryName, Year, ProtectedLandArea) VALUES (1, 'Brazil', 1990, 100000.0), (1, 'Brazil', 2020, 150000.0), (2, 'Canada', 1990, 200000.0), (2, 'Canada', 2020, 250000.0), (3, 'Australia', 1990, 50000.0), (3, 'Australia', 2020, 80000.0);","WITH LandAreaIncrease AS (SELECT CountryName, (MAX(ProtectedLandArea) - MIN(ProtectedLandArea)) AS AreaIncrease FROM ProtectedAreas WHERE Year BETWEEN 1990 AND 2020 GROUP BY CountryName) SELECT CountryName, AreaIncrease FROM LandAreaIncrease ORDER BY AreaIncrease DESC LIMIT 5;",The query calculates the increase in protected land area for each country over the past 30 years by finding the difference between the maximum and minimum protected land areas recorded between 1990 and 2020. It then selects the top 5 countries with the highest increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert new records for endangered species observed in different regions and then retrieve the total number of endangered species per region.,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Status VARCHAR(20)); CREATE TABLE Observations (ObservationID INT PRIMARY KEY, SpeciesID INT, Region VARCHAR(50), ObservationDate DATE, FOREIGN KEY (SpeciesID) REFERENCES Species(SpeciesID));","INSERT INTO Observations (ObservationID, SpeciesID, Region, ObservationDate) VALUES (1, 101, 'Amazon', '2023-01-15'), (2, 102, 'Sahara', '2023-02-20'), (3, 103, 'Arctic', '2023-03-10'); SELECT Region, COUNT(DISTINCT SpeciesID) AS TotalEndangeredSpecies FROM Observations JOIN Species ON Observations.SpeciesID = Species.SpeciesID WHERE Species.Status = 'Endangered' GROUP BY Region;","The query first inserts new observation records into the Observations table. It then joins the Observations and Species tables to count the number of distinct endangered species observed in each region, grouping the results by region."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the average temperature records for various cities and then find the top 3 cities with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureRecords (CityID INT PRIMARY KEY, CityName VARCHAR(50), AvgTemperature DECIMAL, Year INT);","UPDATE TemperatureRecords SET AvgTemperature = AvgTemperature + 1.5 WHERE Year BETWEEN 2013 AND 2023; WITH TempIncrease AS (SELECT CityName, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS TempIncrease FROM TemperatureRecords WHERE Year BETWEEN 2013 AND 2023 GROUP BY CityName) SELECT CityName, TempIncrease FROM TempIncrease ORDER BY TempIncrease DESC LIMIT 3;",The query first updates the average temperature records for cities over the past decade by increasing the temperature by 1.5 degrees. It then uses a common table expression (CTE) to calculate the temperature increase for each city and selects the top 3 cities with the highest temperature increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete records of deforestation activities older than 10 years and then list the regions with the highest deforestation rates in the last decade.,"CREATE TABLE Deforestation (ActivityID INT PRIMARY KEY, Region VARCHAR(50), AreaCleared DECIMAL, ActivityDate DATE);","DELETE FROM Deforestation WHERE ActivityDate < DATE_SUB(CURDATE(), INTERVAL 10 YEAR); WITH RecentDeforestation AS (SELECT Region, SUM(AreaCleared) AS TotalCleared FROM Deforestation WHERE ActivityDate >= DATE_SUB(CURDATE(), INTERVAL 10 YEAR) GROUP BY Region) SELECT Region, TotalCleared FROM RecentDeforestation ORDER BY TotalCleared DESC;",The query deletes deforestation activity records older than 10 years. It then uses a common table expression (CTE) to calculate the total area cleared in each region over the last decade and lists the regions with the highest deforestation rates.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert new renewable energy projects and then find the top 5 regions with the highest number of renewable energy projects.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), Region VARCHAR(50), StartDate DATE);","INSERT INTO RenewableProjects (ProjectID, ProjectName, Region, StartDate) VALUES (1, 'Solar Farm A', 'California', '2023-01-01'), (2, 'Wind Farm B', 'Texas', '2023-02-15'), (3, 'Hydro Plant C', 'Washington', '2023-03-10'); WITH ProjectCount AS (SELECT Region, COUNT(ProjectID) AS TotalProjects FROM RenewableProjects GROUP BY Region) SELECT Region, TotalProjects FROM ProjectCount ORDER BY TotalProjects DESC LIMIT 5;",The query first inserts new records for renewable energy projects into the RenewableProjects table. It then uses a common table expression (CTE) to count the number of projects in each region and selects the top 5 regions with the highest number of renewable energy projects.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the carbon emission records for various industries and then find the top 3 industries with the highest reduction in carbon emissions over the past five years.,"CREATE TABLE CarbonEmissions (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50), EmissionAmount DECIMAL, Year INT);","UPDATE CarbonEmissions SET EmissionAmount = EmissionAmount - 10 WHERE Year BETWEEN 2018 AND 2023; WITH EmissionReduction AS (SELECT IndustryName, (MAX(EmissionAmount) - MIN(EmissionAmount)) AS Reduction FROM CarbonEmissions WHERE Year BETWEEN 2018 AND 2023 GROUP BY IndustryName) SELECT IndustryName, Reduction FROM EmissionReduction ORDER BY Reduction DESC LIMIT 3;",The query first updates the carbon emission records for various industries by reducing the emission amount by 10 units over the past five years. It then uses a common table expression (CTE) to calculate the reduction in emissions for each industry and selects the top 3 industries with the highest reduction.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the average age of patients who have been treated for diabetes.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",SELECT AVG(Age) AS AverageAge FROM Patients WHERE PatientID IN (SELECT PatientID FROM MedicalHistory WHERE Condition = 'Diabetes');,The query calculates the average age of patients who have been treated for diabetes. It first selects the PatientID from the MedicalHistory table where the condition is 'Diabetes' and then calculates the average age of those patients from the Patients table.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Count the number of male patients who have had a heart attack.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",SELECT COUNT(*) AS MaleHeartAttackPatients FROM Patients WHERE Gender = 'Male' AND PatientID IN (SELECT PatientID FROM MedicalHistory WHERE Condition = 'Heart Attack');,The query counts the number of male patients who have had a heart attack. It first selects the PatientID from the MedicalHistory table where the condition is 'Heart Attack' and then counts those patients from the Patients table where the gender is 'Male'.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Update the treatment protocol for patients with hypertension to 'New Protocol'.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",UPDATE MedicalHistory SET Treatment = 'New Protocol' WHERE Condition = 'Hypertension';,The query updates the treatment protocol for patients with hypertension to 'New Protocol'. It modifies the Treatment field in the MedicalHistory table where the condition is 'Hypertension'.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the maximum age of patients who have been treated for cancer.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",SELECT MAX(Age) AS MaxAge FROM Patients WHERE PatientID IN (SELECT PatientID FROM MedicalHistory WHERE Condition = 'Cancer');,The query finds the maximum age of patients who have been treated for cancer. It first selects the PatientID from the MedicalHistory table where the condition is 'Cancer' and then finds the maximum age of those patients from the Patients table.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Delete records of patients who have had no treatments recorded.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",DELETE FROM Patients WHERE PatientID NOT IN (SELECT DISTINCT PatientID FROM MedicalHistory);,The query deletes records of patients who have had no treatments recorded. It removes entries from the Patients table where the PatientID does not exist in the MedicalHistory table.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the average temperature and CO2 emissions for each country over the last decade, and identify the top 5 countries with the highest average CO2 emissions.","CREATE TABLE TemperatureData (CountryID INT, Year INT, AvgTemperature DECIMAL, PRIMARY KEY (CountryID, Year)); CREATE TABLE CO2Emissions (CountryID INT, Year INT, Emissions DECIMAL, PRIMARY KEY (CountryID, Year)); CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50));","WITH AvgData AS (SELECT c.CountryName, AVG(t.AvgTemperature) AS AvgTemp, AVG(e.Emissions) AS AvgEmissions FROM TemperatureData t INNER JOIN CO2Emissions e ON t.CountryID = e.CountryID AND t.Year = e.Year INNER JOIN Countries c ON t.CountryID = c.CountryID WHERE t.Year BETWEEN YEAR(CURDATE()) - 10 AND YEAR(CURDATE()) GROUP BY c.CountryName) SELECT CountryName, AvgTemp, AvgEmissions FROM AvgData ORDER BY AvgEmissions DESC LIMIT 5;",The query first creates a common table expression (CTE) named AvgData that calculates the average temperature and CO2 emissions for each country over the last decade. It then selects the top 5 countries with the highest average CO2 emissions.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"List the top 10 endangered species and the number of conservation projects associated with each, sorted by the number of projects in descending order.","CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), EndangeredStatus BOOLEAN); CREATE TABLE ConservationProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100)); CREATE TABLE ProjectSpecies (ProjectID INT, SpeciesID INT, PRIMARY KEY (ProjectID, SpeciesID));","SELECT s.SpeciesName, COUNT(ps.ProjectID) AS ProjectCount FROM Species s INNER JOIN ProjectSpecies ps ON s.SpeciesID = ps.SpeciesID WHERE s.EndangeredStatus = TRUE GROUP BY s.SpeciesName ORDER BY ProjectCount DESC LIMIT 10;","The query retrieves the top 10 endangered species and the number of conservation projects associated with each. It joins the Species and ProjectSpecies tables, filters for endangered species, groups by species name, and orders by the number of projects in descending order."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average renewable energy production per year for each country and display the top 5 countries with the highest average production.,"CREATE TABLE RenewableEnergy (CountryID INT, Year INT, EnergyProduced DECIMAL, PRIMARY KEY (CountryID, Year)); CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50));","WITH AvgProduction AS (SELECT c.CountryName, AVG(r.EnergyProduced) AS AvgEnergy FROM RenewableEnergy r INNER JOIN Countries c ON r.CountryID = c.CountryID GROUP BY c.CountryName) SELECT CountryName, AvgEnergy FROM AvgProduction ORDER BY AvgEnergy DESC LIMIT 5;",The query creates a common table expression (CTE) named AvgProduction that calculates the average renewable energy production per year for each country. It then selects the top 5 countries with the highest average production.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Identify the regions with the highest average deforestation rates over the past 5 years and display the top 3 regions.,"CREATE TABLE Deforestation (RegionID INT, Year INT, DeforestationRate DECIMAL, PRIMARY KEY (RegionID, Year)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50));","WITH AvgDeforestation AS (SELECT r.RegionName, AVG(d.DeforestationRate) AS AvgRate FROM Deforestation d INNER JOIN Regions r ON d.RegionID = r.RegionID WHERE d.Year BETWEEN YEAR(CURDATE()) - 5 AND YEAR(CURDATE()) GROUP BY r.RegionName) SELECT RegionName, AvgRate FROM AvgDeforestation ORDER BY AvgRate DESC LIMIT 3;",The query creates a common table expression (CTE) named AvgDeforestation that calculates the average deforestation rates over the past 5 years for each region. It then selects the top 3 regions with the highest average deforestation rates.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the total funding received by each environmental organization over the past 3 years and list the top 5 organizations.,"CREATE TABLE Organizations (OrgID INT PRIMARY KEY, OrgName VARCHAR(100)); CREATE TABLE Funding (OrgID INT, Year INT, Amount DECIMAL, PRIMARY KEY (OrgID, Year));","WITH TotalFunding AS (SELECT o.OrgName, SUM(f.Amount) AS TotalAmount FROM Funding f INNER JOIN Organizations o ON f.OrgID = o.OrgID WHERE f.Year BETWEEN YEAR(CURDATE()) - 3 AND YEAR(CURDATE()) GROUP BY o.OrgName) SELECT OrgName, TotalAmount FROM TotalFunding ORDER BY TotalAmount DESC LIMIT 5;",The query creates a common table expression (CTE) named TotalFunding that calculates the total funding received by each environmental organization over the past 3 years. It then selects the top 5 organizations with the highest total funding.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total government spending on healthcare and education per capita for each state, including the percentage of total spending that each category represents.","CREATE TABLE GovernmentSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), Category VARCHAR(50), Amount DECIMAL); CREATE TABLE Population (StateID INT PRIMARY KEY, Population INT);","SELECT gs.StateName, SUM(CASE WHEN gs.Category = 'Healthcare' THEN gs.Amount ELSE 0 END) / p.Population AS HealthcarePerCapita, SUM(CASE WHEN gs.Category = 'Education' THEN gs.Amount ELSE 0 END) / p.Population AS EducationPerCapita, SUM(gs.Amount) / p.Population AS TotalPerCapita, SUM(CASE WHEN gs.Category = 'Healthcare' THEN gs.Amount ELSE 0 END) / SUM(gs.Amount) * 100 AS HealthcarePercentage, SUM(CASE WHEN gs.Category = 'Education' THEN gs.Amount ELSE 0 END) / SUM(gs.Amount) * 100 AS EducationPercentage FROM GovernmentSpending gs INNER JOIN Population p ON gs.StateID = p.StateID GROUP BY gs.StateName, p.Population;",The query calculates per capita spending on healthcare and education by dividing the total spending in each category by the state's population. It also calculates the total per capita spending and the percentage of total spending that each category represents. The results are grouped by state.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard that shows the average legislative approval ratings and the number of bills passed per year for each legislative body.,"CREATE TABLE LegislativeBodies (BodyID INT PRIMARY KEY, BodyName VARCHAR(50)); CREATE TABLE ApprovalRatings (BodyID INT, Year INT, Rating DECIMAL, PRIMARY KEY (BodyID, Year)); CREATE TABLE BillsPassed (BodyID INT, Year INT, BillsCount INT, PRIMARY KEY (BodyID, Year));","SELECT lb.BodyName, ar.Year, AVG(ar.Rating) AS AvgRating, SUM(bp.BillsCount) AS TotalBills FROM LegislativeBodies lb INNER JOIN ApprovalRatings ar ON lb.BodyID = ar.BodyID INNER JOIN BillsPassed bp ON lb.BodyID = bp.BodyID AND ar.Year = bp.Year GROUP BY lb.BodyName, ar.Year;","The query joins the LegislativeBodies, ApprovalRatings, and BillsPassed tables to calculate the average approval ratings and the total number of bills passed per year for each legislative body. The results are grouped by legislative body and year."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a detailed report on the demographic distribution of citizens who have benefited from government welfare programs, segmented by age group and income level.","CREATE TABLE WelfarePrograms (ProgramID INT PRIMARY KEY, ProgramName VARCHAR(50)); CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, AgeGroup VARCHAR(20), IncomeLevel VARCHAR(20)); CREATE TABLE ProgramBeneficiaries (CitizenID INT, ProgramID INT, PRIMARY KEY (CitizenID, ProgramID));","SELECT c.AgeGroup, c.IncomeLevel, COUNT(pb.CitizenID) AS BeneficiaryCount FROM Citizens c INNER JOIN ProgramBeneficiaries pb ON c.CitizenID = pb.CitizenID GROUP BY c.AgeGroup, c.IncomeLevel;","The query joins the Citizens and ProgramBeneficiaries tables to count the number of citizens who have benefited from government welfare programs, segmented by age group and income level. The results are grouped by age group and income level."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the effectiveness of different public policies by comparing the unemployment rates before and after policy implementation across various regions.,"CREATE TABLE Policies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(50), ImplementationDate DATE); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE UnemploymentRates (RegionID INT, Date DATE, UnemploymentRate DECIMAL, PRIMARY KEY (RegionID, Date)); CREATE TABLE PolicyRegions (PolicyID INT, RegionID INT, PRIMARY KEY (PolicyID, RegionID));","SELECT r.RegionName, p.PolicyName, ur_before.UnemploymentRate AS UnemploymentBefore, ur_after.UnemploymentRate AS UnemploymentAfter FROM Policies p INNER JOIN PolicyRegions pr ON p.PolicyID = pr.PolicyID INNER JOIN Regions r ON pr.RegionID = r.RegionID INNER JOIN UnemploymentRates ur_before ON r.RegionID = ur_before.RegionID AND ur_before.Date < p.ImplementationDate INNER JOIN UnemploymentRates ur_after ON r.RegionID = ur_after.RegionID AND ur_after.Date > p.ImplementationDate;","The query joins the Policies, PolicyRegions, Regions, and UnemploymentRates tables to compare the unemployment rates before and after policy implementation across various regions. The results include the region name, policy name, and unemployment rates before and after the policy implementation."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a comprehensive report on the allocation of government funds to different sectors and the impact on citizen satisfaction levels over the past decade.,"CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(50)); CREATE TABLE GovernmentFunds (SectorID INT, Year INT, Amount DECIMAL, PRIMARY KEY (SectorID, Year)); CREATE TABLE CitizenSatisfaction (Year INT, SectorID INT, SatisfactionLevel DECIMAL, PRIMARY KEY (Year, SectorID));","SELECT s.SectorName, gf.Year, SUM(gf.Amount) AS TotalFunds, AVG(cs.SatisfactionLevel) AS AvgSatisfaction FROM Sectors s INNER JOIN GovernmentFunds gf ON s.SectorID = gf.SectorID INNER JOIN CitizenSatisfaction cs ON gf.SectorID = cs.SectorID AND gf.Year = cs.Year GROUP BY s.SectorName, gf.Year;","The query joins the Sectors, GovernmentFunds, and CitizenSatisfaction tables to generate a report on the allocation of government funds to different sectors and the impact on citizen satisfaction levels over the past decade. The results are grouped by sector and year."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 3 most-watched movies in each genre over the past year.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseDate DATE); CREATE TABLE WatchHistory (WatchID INT PRIMARY KEY, MovieID INT, WatchDate DATE, UserID INT);","WITH GenreWatchCount AS (SELECT M.Genre, M.Title, COUNT(WH.WatchID) AS WatchCount FROM Movies M JOIN WatchHistory WH ON M.MovieID = WH.MovieID WHERE WH.WatchDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY M.Genre, M.Title), RankedMovies AS (SELECT Genre, Title, WatchCount, DENSE_RANK() OVER (PARTITION BY Genre ORDER BY WatchCount DESC) AS Rank FROM GenreWatchCount) SELECT Genre, Title, WatchCount FROM RankedMovies WHERE Rank <= 3;","The query first creates a common table expression (CTE) to count the number of watches for each movie in each genre over the past year. It then ranks these movies within their genres based on watch count using the DENSE_RANK function. Finally, it selects the top 3 movies in each genre."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 content creators with the highest average engagement per post.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(100)); CREATE TABLE Posts (PostID INT PRIMARY KEY, CreatorID INT, PostDate DATE, Engagements INT);","WITH CreatorEngagement AS (SELECT CC.CreatorName, AVG(P.Engagements) AS AvgEngagement FROM ContentCreators CC JOIN Posts P ON CC.CreatorID = P.CreatorID GROUP BY CC.CreatorName), RankedCreators AS (SELECT CreatorName, AvgEngagement, DENSE_RANK() OVER (ORDER BY AvgEngagement DESC) AS Rank FROM CreatorEngagement) SELECT CreatorName, AvgEngagement FROM RankedCreators WHERE Rank <= 5;","The query first creates a common table expression (CTE) to calculate the average engagements per post for each content creator. It then ranks these creators based on their average engagements using the DENSE_RANK function. Finally, it selects the top 5 content creators with the highest average engagement per post."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 TV shows with the highest average rating from users aged 18-25.,"CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE UserRatings (RatingID INT PRIMARY KEY, ShowID INT, UserID INT, Rating INT); CREATE TABLE Users (UserID INT PRIMARY KEY, Age INT);","WITH AgeFilteredRatings AS (SELECT UR.ShowID, UR.Rating FROM UserRatings UR JOIN Users U ON UR.UserID = U.UserID WHERE U.Age BETWEEN 18 AND 25), ShowAvgRatings AS (SELECT ShowID, AVG(Rating) AS AvgRating FROM AgeFilteredRatings GROUP BY ShowID), RankedShows AS (SELECT S.Title, SAR.AvgRating, DENSE_RANK() OVER (ORDER BY SAR.AvgRating DESC) AS Rank FROM ShowAvgRatings SAR JOIN TVShows S ON SAR.ShowID = S.ShowID) SELECT Title, AvgRating FROM RankedShows WHERE Rank <= 5;","The query first creates a common table expression (CTE) to filter ratings given by users aged 18-25. It then calculates the average rating for each TV show and ranks these shows based on their average ratings using the DENSE_RANK function. Finally, it selects the top 5 TV shows with the highest average rating."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total revenue generated by each movie genre in the last quarter.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, MovieID INT, RevenueAmount DECIMAL, RevenueDate DATE);","WITH QuarterlyRevenue AS (SELECT M.Genre, SUM(R.RevenueAmount) AS TotalRevenue FROM Movies M JOIN Revenue R ON M.MovieID = R.MovieID WHERE R.RevenueDate >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY M.Genre) SELECT Genre, TotalRevenue FROM QuarterlyRevenue;","The query creates a common table expression (CTE) to calculate the total revenue generated by each movie genre in the last quarter. It joins the Movies and Revenue tables, filters the revenue data to the last quarter, groups the data by genre, and sums the revenue amounts. Finally, it selects the genre and total revenue."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 3 most popular music albums based on the number of streams in the past month.,"CREATE TABLE Albums (AlbumID INT PRIMARY KEY, AlbumName VARCHAR(100), ArtistName VARCHAR(100)); CREATE TABLE Streams (StreamID INT PRIMARY KEY, AlbumID INT, StreamDate DATE);","WITH MonthlyStreams AS (SELECT A.AlbumName, A.ArtistName, COUNT(S.StreamID) AS StreamCount FROM Albums A JOIN Streams S ON A.AlbumID = S.AlbumID WHERE S.StreamDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY A.AlbumName, A.ArtistName), RankedAlbums AS (SELECT AlbumName, ArtistName, StreamCount, DENSE_RANK() OVER (ORDER BY StreamCount DESC) AS Rank FROM MonthlyStreams) SELECT AlbumName, ArtistName, StreamCount FROM RankedAlbums WHERE Rank <= 3;","The query first creates a common table expression (CTE) to count the number of streams for each album in the past month. It then ranks these albums based on their stream count using the DENSE_RANK function. Finally, it selects the top 3 most popular music albums based on the number of streams."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store information about different crop yields across various regions and then display the average yield for each crop.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 3.5), (2, 'Corn', 'Europe', 4.0), (3, 'Rice', 'Asia', 2.8), (4, 'Soybean', 'South America', 3.2), (5, 'Barley', 'Africa', 2.5);","SELECT CropName, AVG(Yield) AS AvgYield FROM CropYields GROUP BY CropName;",The query calculates the average yield for each crop by grouping the data based on the CropName and then applying the AVG function to the Yield column.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store information about farming practices and then display the total number of farms using organic practices.,"CREATE TABLE FarmingPractices (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), PracticeType VARCHAR(50)); INSERT INTO FarmingPractices (FarmID, FarmName, PracticeType) VALUES (1, 'Green Acres', 'Organic'), (2, 'Sunny Fields', 'Conventional'), (3, 'Eco Farm', 'Organic'), (4, 'Healthy Harvest', 'Conventional'), (5, 'Nature's Best', 'Organic');",SELECT COUNT(*) AS OrganicFarms FROM FarmingPractices WHERE PracticeType = 'Organic';,The query counts the total number of farms that use organic practices by filtering the rows where the PracticeType is 'Organic' and then applying the COUNT function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store information about agricultural supply chain stages and then display the stages for a specific crop.,"CREATE TABLE SupplyChain (StageID INT PRIMARY KEY, StageName VARCHAR(50), CropID INT); INSERT INTO SupplyChain (StageID, StageName, CropID) VALUES (1, 'Planting', 1), (2, 'Growing', 1), (3, 'Harvesting', 1), (4, 'Processing', 2), (5, 'Distribution', 2);",SELECT StageName FROM SupplyChain WHERE CropID = 1;,The query retrieves the names of the supply chain stages for a specific crop by filtering the rows where the CropID is 1.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store information about global food security initiatives and then display the initiatives in a specific region.,"CREATE TABLE FoodSecurityInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(50), Region VARCHAR(50)); INSERT INTO FoodSecurityInitiatives (InitiativeID, InitiativeName, Region) VALUES (1, 'Zero Hunger', 'Africa'), (2, 'Food for All', 'Asia'), (3, 'Nourish the Future', 'South America'), (4, 'Healthy Eating', 'Europe'), (5, 'Sustainable Agriculture', 'North America');",SELECT InitiativeName FROM FoodSecurityInitiatives WHERE Region = 'Africa';,The query retrieves the names of food security initiatives in a specific region by filtering the rows where the Region is 'Africa'.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store information about crop prices in different markets and then display the average price for each crop.,"CREATE TABLE CropPrices (PriceID INT PRIMARY KEY, CropName VARCHAR(50), Market VARCHAR(50), Price DECIMAL); INSERT INTO CropPrices (PriceID, CropName, Market, Price) VALUES (1, 'Wheat', 'Market A', 200.5), (2, 'Corn', 'Market B', 150.0), (3, 'Rice', 'Market C', 180.0), (4, 'Soybean', 'Market D', 220.7), (5, 'Barley', 'Market E', 160.0);","SELECT CropName, AVG(Price) AS AvgPrice FROM CropPrices GROUP BY CropName;",The query calculates the average price for each crop by grouping the data based on the CropName and then applying the AVG function to the Price column.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the total revenue generated from ticket sales for each sports event, including the event name and date, and commit the transaction.","CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE); CREATE TABLE Tickets (TicketID INT PRIMARY KEY, EventID INT, Price DECIMAL, FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN; SELECT E.EventName, E.EventDate, SUM(T.Price) AS TotalRevenue FROM Events E INNER JOIN Tickets T ON E.EventID = T.EventID GROUP BY E.EventName, E.EventDate; COMMIT;","The query begins a transaction, joins the Events and Tickets tables on EventID using an INNER JOIN, groups the results by EventName and EventDate, calculates the total revenue for each event, and commits the transaction."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List all athletes who have participated in more than three events, including their names and the number of events, and roll back the transaction if any error occurs.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100)); CREATE TABLE Participation (ParticipationID INT PRIMARY KEY, AthleteID INT, EventID INT, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN; SELECT A.AthleteName, COUNT(P.EventID) AS EventCount FROM Athletes A INNER JOIN Participation P ON A.AthleteID = P.AthleteID GROUP BY A.AthleteName HAVING COUNT(P.EventID) > 3; ROLLBACK;","The query begins a transaction, joins the Athletes and Participation tables on AthleteID using an INNER JOIN, groups the results by AthleteName, counts the number of events each athlete has participated in, filters for athletes with more than three events, and rolls back the transaction if any error occurs."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average performance score of athletes in each event, including the event name and date, and commit the transaction.","CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, EventID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN; SELECT E.EventName, E.EventDate, AVG(P.Score) AS AvgScore FROM Events E INNER JOIN Performance P ON E.EventID = P.EventID GROUP BY E.EventName, E.EventDate; COMMIT;","The query begins a transaction, joins the Events and Performance tables on EventID using an INNER JOIN, groups the results by EventName and EventDate, calculates the average performance score for each event, and commits the transaction."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the total number of tickets sold for each event, including the event name and date, and commit the transaction.","CREATE TABLE Tickets (TicketID INT PRIMARY KEY, EventID INT, Price DECIMAL, FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN; SELECT E.EventName, E.EventDate, COUNT(T.TicketID) AS TotalTickets FROM Events E INNER JOIN Tickets T ON E.EventID = T.EventID GROUP BY E.EventName, E.EventDate; COMMIT;","The query begins a transaction, joins the Events and Tickets tables on EventID using an INNER JOIN, groups the results by EventName and EventDate, counts the total number of tickets sold for each event, and commits the transaction."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List all events along with the total number of athletes who participated in each event, and commit the transaction.","CREATE TABLE Participation (ParticipationID INT PRIMARY KEY, AthleteID INT, EventID INT, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN; SELECT E.EventName, E.EventDate, COUNT(P.AthleteID) AS TotalAthletes FROM Events E INNER JOIN Participation P ON E.EventID = P.EventID GROUP BY E.EventName, E.EventDate; COMMIT;","The query begins a transaction, joins the Events and Participation tables on EventID using an INNER JOIN, groups the results by EventName and EventDate, counts the total number of athletes who participated in each event, and commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total revenue generated from movies and TV shows in 2022, excluding any content that was released before 2020.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseYear INT, Revenue DECIMAL); CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100), ReleaseYear INT, Revenue DECIMAL);",BEGIN; SELECT SUM(Revenue) AS TotalRevenue FROM (SELECT Revenue FROM Movies WHERE ReleaseYear >= 2020 UNION ALL SELECT Revenue FROM TVShows WHERE ReleaseYear >= 2020) AS CombinedRevenue WHERE ReleaseYear = 2022; COMMIT;,"The query starts a transaction, then selects and sums the revenue from both movies and TV shows that were released in or after 2020 and specifically in the year 2022. It uses UNION ALL to combine the revenue from both tables and then filters for the year 2022. Finally, it commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 most-watched genres in 2021, excluding any genres that were not watched in 2020.","CREATE TABLE MediaConsumption (UserID INT, Genre VARCHAR(50), WatchYear INT, WatchCount INT);","BEGIN; WITH Genre2020 AS (SELECT DISTINCT Genre FROM MediaConsumption WHERE WatchYear = 2020), Genre2021 AS (SELECT Genre, SUM(WatchCount) AS TotalWatchCount FROM MediaConsumption WHERE WatchYear = 2021 GROUP BY Genre) SELECT Genre, TotalWatchCount FROM Genre2021 WHERE Genre IN (SELECT Genre FROM Genre2020) ORDER BY TotalWatchCount DESC LIMIT 3; COMMIT;","The query begins a transaction and creates two common table expressions (CTEs): one for genres watched in 2020 and another for genres watched in 2021 with their total watch counts. It then selects the top 3 genres from 2021 that were also watched in 2020, ordered by total watch count in descending order, and commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the list of users who have watched both movies and TV shows in 2023, but exclude those who only watched one type of content.","CREATE TABLE UserMovies (UserID INT, MovieID INT, WatchYear INT); CREATE TABLE UserTVShows (UserID INT, ShowID INT, WatchYear INT);",BEGIN; SELECT UserID FROM (SELECT UserID FROM UserMovies WHERE WatchYear = 2023 INTERSECT SELECT UserID FROM UserTVShows WHERE WatchYear = 2023) AS BothTypes; COMMIT;,The query starts a transaction and selects users who have watched both movies and TV shows in 2023 by using the INTERSECT set operation on the UserID columns from the UserMovies and UserTVShows tables. It then commits the transaction.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report of all content creators who have produced content in both the 'Drama' and 'Comedy' genres, excluding those who have only produced in one genre.","CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, Name VARCHAR(100)); CREATE TABLE CreatorGenres (CreatorID INT, Genre VARCHAR(50));",BEGIN; SELECT Name FROM ContentCreators WHERE CreatorID IN (SELECT CreatorID FROM CreatorGenres WHERE Genre = 'Drama' INTERSECT SELECT CreatorID FROM CreatorGenres WHERE Genre = 'Comedy'); COMMIT;,The query begins a transaction and selects the names of content creators who have produced content in both 'Drama' and 'Comedy' genres by using the INTERSECT set operation on the CreatorID column from the CreatorGenres table. It then commits the transaction.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total number of unique users who engaged with any content in 2022, excluding those who did not engage in 2021.","CREATE TABLE UserEngagement (UserID INT, ContentID INT, EngagementYear INT);",BEGIN; SELECT COUNT(DISTINCT UserID) AS UniqueUsers FROM UserEngagement WHERE EngagementYear = 2022 AND UserID IN (SELECT DISTINCT UserID FROM UserEngagement WHERE EngagementYear = 2021); COMMIT;,"The query starts a transaction and counts the total number of unique users who engaged with any content in 2022, but only includes those who also engaged in 2021. It uses a subquery to filter users who engaged in 2021 and then commits the transaction."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records","Find the top 3 patients with the highest number of hospital visits in the last year, and display their demographic information.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10)); CREATE TABLE Visits (VisitID INT PRIMARY KEY, PatientID INT, VisitDate DATE, Diagnosis VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","WITH VisitCounts AS (SELECT PatientID, COUNT(*) AS VisitCount FROM Visits WHERE VisitDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY PatientID), RankedPatients AS (SELECT PatientID, VisitCount, ROW_NUMBER() OVER (ORDER BY VisitCount DESC) AS Rank FROM VisitCounts) SELECT P.PatientID, P.FirstName, P.LastName, P.DateOfBirth, P.Gender, R.VisitCount FROM RankedPatients R JOIN Patients P ON R.PatientID = P.PatientID WHERE R.Rank <= 3;","The query first creates a common table expression (CTE) to count the number of visits each patient has had in the last year. It then ranks these patients based on the visit count in descending order. Finally, it joins this ranked list with the Patients table to display the demographic information of the top 3 patients with the highest number of visits."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Update the treatment protocol for patients diagnosed with diabetes to include a new medication and display the updated treatment protocols.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), Medication VARCHAR(255), StartDate DATE, EndDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","UPDATE Treatments SET Medication = CONCAT(Medication, ', NewMedication') WHERE Diagnosis = 'Diabetes'; SELECT * FROM Treatments WHERE Diagnosis = 'Diabetes';",The query updates the Treatments table to include 'NewMedication' for all patients diagnosed with diabetes by concatenating the new medication to the existing list of medications. It then selects and displays the updated treatment protocols for these patients.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify patients who have experienced side effects from a specific drug and list their medical history.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(255), Treatment VARCHAR(255), StartDate DATE, EndDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, PatientID INT, Drug VARCHAR(255), SideEffect VARCHAR(255), ReportDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT P.PatientID, P.FirstName, P.LastName, P.DateOfBirth, P.Gender, M.Condition, M.Treatment, M.StartDate, M.EndDate FROM Patients P JOIN SideEffects S ON P.PatientID = S.PatientID JOIN MedicalHistory M ON P.PatientID = M.PatientID WHERE S.Drug = 'SpecificDrug';","The query joins the Patients, SideEffects, and MedicalHistory tables to identify patients who have experienced side effects from 'SpecificDrug'. It then lists their medical history, including conditions, treatments, and relevant dates."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Delete records of patients who have not visited the hospital in the last 5 years and display the remaining patient records.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10)); CREATE TABLE Visits (VisitID INT PRIMARY KEY, PatientID INT, VisitDate DATE, Diagnosis VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","DELETE FROM Patients WHERE PatientID NOT IN (SELECT DISTINCT PatientID FROM Visits WHERE VisitDate >= DATEADD(YEAR, -5, GETDATE())); SELECT * FROM Patients;",The query deletes records from the Patients table for those who have not visited the hospital in the last 5 years. It then selects and displays the remaining patient records.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records","Insert new patient records and their initial treatment protocols, then display all patient and treatment information.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), Medication VARCHAR(255), StartDate DATE, EndDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","INSERT INTO Patients (PatientID, FirstName, LastName, DateOfBirth, Gender) VALUES (101, 'John', 'Doe', '1980-01-01', 'Male'), (102, 'Jane', 'Smith', '1990-02-02', 'Female'); INSERT INTO Treatments (TreatmentID, PatientID, Diagnosis, Medication, StartDate, EndDate) VALUES (201, 101, 'Hypertension', 'MedA', '2023-01-01', NULL), (202, 102, 'Asthma', 'MedB', '2023-01-01', NULL); SELECT P.PatientID, P.FirstName, P.LastName, P.DateOfBirth, P.Gender, T.Diagnosis, T.Medication, T.StartDate, T.EndDate FROM Patients P LEFT JOIN Treatments T ON P.PatientID = T.PatientID;",The query inserts new records into the Patients and Treatments tables for two new patients and their initial treatment protocols. It then selects and displays all patient and treatment information by performing a left join on the Patients and Treatments tables.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the top 3 most common side effects for a specific drug after a treatment protocol is applied, and ensure the transaction is committed only if the query executes successfully.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(255)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(255), EfficacyRate DECIMAL); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, DrugID INT, SideEffect VARCHAR(255), Frequency INT, FOREIGN KEY (DrugID) REFERENCES DrugEfficacy(DrugID));","BEGIN TRANSACTION; WITH CommonSideEffects AS (SELECT SideEffect, COUNT(*) AS Frequency FROM SideEffects WHERE DrugID = (SELECT DrugID FROM DrugEfficacy WHERE DrugName = 'DrugX') GROUP BY SideEffect ORDER BY Frequency DESC) SELECT TOP 3 SideEffect, Frequency FROM CommonSideEffects; COMMIT;",The query starts a transaction and uses a common table expression (CTE) to count the frequency of each side effect for a specific drug. It then selects the top 3 most common side effects and commits the transaction if successful.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List all patients who have been diagnosed with diabetes and have undergone a specific treatment protocol, ensuring the transaction is rolled back if any error occurs.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(255)); CREATE TABLE PatientTreatments (PatientTreatmentID INT PRIMARY KEY, PatientID INT, TreatmentID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));","BEGIN TRANSACTION; WITH DiabeticPatients AS (SELECT PatientID FROM MedicalHistory WHERE Diagnosis = 'Diabetes') SELECT p.Name, p.Age, p.Gender FROM Patients p JOIN DiabeticPatients dp ON p.PatientID = dp.PatientID JOIN PatientTreatments pt ON p.PatientID = pt.PatientID WHERE pt.TreatmentID = (SELECT TreatmentID FROM Treatments WHERE TreatmentName = 'TreatmentX'); ROLLBACK;",The query starts a transaction and uses a common table expression (CTE) to find patients diagnosed with diabetes. It then joins this result with the Patients and PatientTreatments tables to list patients who have undergone a specific treatment. The transaction is rolled back if any error occurs.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average efficacy rate of all drugs used in a specific treatment protocol and commit the transaction only if the query executes successfully.,"CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(255)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(255), EfficacyRate DECIMAL); CREATE TABLE TreatmentDrugs (TreatmentDrugID INT PRIMARY KEY, TreatmentID INT, DrugID INT, FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID), FOREIGN KEY (DrugID) REFERENCES DrugEfficacy(DrugID));",BEGIN TRANSACTION; WITH TreatmentDrugsEfficacy AS (SELECT de.EfficacyRate FROM DrugEfficacy de JOIN TreatmentDrugs td ON de.DrugID = td.DrugID WHERE td.TreatmentID = (SELECT TreatmentID FROM Treatments WHERE TreatmentName = 'TreatmentX')) SELECT AVG(EfficacyRate) AS AvgEfficacyRate FROM TreatmentDrugsEfficacy; COMMIT;,The query starts a transaction and uses a common table expression (CTE) to find the efficacy rates of all drugs used in a specific treatment protocol. It then calculates the average efficacy rate and commits the transaction if successful.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify patients who have experienced severe side effects from a specific drug and ensure the transaction is committed only if the query executes successfully.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, DrugID INT, SideEffect VARCHAR(255), Severity VARCHAR(50), PatientID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(255));","BEGIN TRANSACTION; WITH SevereSideEffects AS (SELECT PatientID FROM SideEffects WHERE Severity = 'Severe' AND DrugID = (SELECT DrugID FROM DrugEfficacy WHERE DrugName = 'DrugX')) SELECT p.Name, p.Age, p.Gender FROM Patients p JOIN SevereSideEffects sse ON p.PatientID = sse.PatientID; COMMIT;",The query starts a transaction and uses a common table expression (CTE) to find patients who have experienced severe side effects from a specific drug. It then joins this result with the Patients table to list these patients and commits the transaction if successful.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report of all treatments and their corresponding average drug efficacy rates, ensuring the transaction is rolled back if any error occurs.","CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(255)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(255), EfficacyRate DECIMAL); CREATE TABLE TreatmentDrugs (TreatmentDrugID INT PRIMARY KEY, TreatmentID INT, DrugID INT, FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID), FOREIGN KEY (DrugID) REFERENCES DrugEfficacy(DrugID));","BEGIN TRANSACTION; WITH TreatmentEfficacy AS (SELECT td.TreatmentID, AVG(de.EfficacyRate) AS AvgEfficacyRate FROM TreatmentDrugs td JOIN DrugEfficacy de ON td.DrugID = de.DrugID GROUP BY td.TreatmentID) SELECT t.TreatmentName, te.AvgEfficacyRate FROM Treatments t JOIN TreatmentEfficacy te ON t.TreatmentID = te.TreatmentID; ROLLBACK;",The query starts a transaction and uses a common table expression (CTE) to calculate the average efficacy rate of drugs for each treatment. It then joins this result with the Treatments table to generate a report of treatments and their average drug efficacy rates. The transaction is rolled back if any error occurs.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total revenue generated by each hotel in different regions for the last quarter and display the results in a pivot table format.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Region VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, BookingDate DATE, Revenue DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT HotelName, Region, SUM(CASE WHEN MONTH(BookingDate) IN (10, 11, 12) THEN Revenue ELSE 0 END) AS TotalRevenue FROM Hotels H JOIN Bookings B ON H.HotelID = B.HotelID GROUP BY HotelName, Region;","The query joins the Hotels and Bookings tables on HotelID and calculates the total revenue for each hotel in different regions for the last quarter (October, November, December). It then groups the results by HotelName and Region."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 most preferred room types by customers in each hotel and display the results.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE RoomTypes (RoomTypeID INT PRIMARY KEY, RoomTypeName VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, RoomTypeID INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID), FOREIGN KEY (RoomTypeID) REFERENCES RoomTypes(RoomTypeID));","WITH RoomPreferences AS (SELECT HotelID, RoomTypeID, COUNT(*) AS PreferenceCount FROM Bookings GROUP BY HotelID, RoomTypeID), RankedPreferences AS (SELECT HotelID, RoomTypeID, PreferenceCount, DENSE_RANK() OVER (PARTITION BY HotelID ORDER BY PreferenceCount DESC) AS Rank FROM RoomPreferences) SELECT HotelID, RoomTypeID, PreferenceCount FROM RankedPreferences WHERE Rank <= 3;",The query first calculates the count of bookings for each room type in each hotel. It then ranks these counts within each hotel using the DENSE_RANK function and selects the top 3 most preferred room types for each hotel.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the average customer rating for each hotel in different regions and display the results in a pivot table format.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Region VARCHAR(50)); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, Rating INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT HotelName, Region, AVG(Rating) AS AvgRating FROM Hotels H JOIN Reviews R ON H.HotelID = R.HotelID GROUP BY HotelName, Region;",The query joins the Hotels and Reviews tables on HotelID and calculates the average customer rating for each hotel in different regions. It then groups the results by HotelName and Region.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the total number of bookings and the total revenue generated by each hotel in the last month, and display the results in a pivot table format.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, BookingDate DATE, Revenue DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT HotelName, COUNT(BookingID) AS TotalBookings, SUM(Revenue) AS TotalRevenue FROM Hotels H JOIN Bookings B ON H.HotelID = B.HotelID WHERE MONTH(BookingDate) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH) AND YEAR(BookingDate) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH) GROUP BY HotelName;",The query joins the Hotels and Bookings tables on HotelID and calculates the total number of bookings and total revenue for each hotel in the last month. It then groups the results by HotelName.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average length of stay for customers in each hotel and display the results in a pivot table format.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CheckInDate DATE, CheckOutDate DATE, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT HotelName, AVG(DATEDIFF(CheckOutDate, CheckInDate)) AS AvgLengthOfStay FROM Hotels H JOIN Bookings B ON H.HotelID = B.HotelID GROUP BY HotelName;",The query joins the Hotels and Bookings tables on HotelID and calculates the average length of stay for customers in each hotel by finding the difference between CheckOutDate and CheckInDate. It then groups the results by HotelName.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 10 highest-scoring basketball players in the current season, including their total points and average points per game.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, Date DATE); CREATE TABLE PlayerStats (PlayerID INT, GameID INT, Points INT, PRIMARY KEY (PlayerID, GameID));","WITH PlayerScores AS (SELECT P.PlayerName, SUM(PS.Points) AS TotalPoints, AVG(PS.Points) AS AvgPointsPerGame FROM Players P JOIN PlayerStats PS ON P.PlayerID = PS.PlayerID GROUP BY P.PlayerName) SELECT PlayerName, TotalPoints, AvgPointsPerGame FROM PlayerScores ORDER BY TotalPoints DESC LIMIT 10;","The query first creates a common table expression (CTE) named PlayerScores that calculates the total points and average points per game for each player. It then selects the player names, total points, and average points per game from the CTE, ordering the results by total points in descending order and limiting the output to the top 10 players."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Show the top 5 football teams with the highest average attendance per game this season.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, TeamID INT, Attendance INT, Date DATE);","WITH TeamAttendance AS (SELECT T.TeamName, AVG(G.Attendance) AS AvgAttendance FROM Teams T JOIN Games G ON T.TeamID = G.TeamID GROUP BY T.TeamName) SELECT TeamName, AvgAttendance FROM TeamAttendance ORDER BY AvgAttendance DESC LIMIT 5;","The query creates a common table expression (CTE) named TeamAttendance that calculates the average attendance per game for each team. It then selects the team names and their average attendance from the CTE, ordering the results by average attendance in descending order and limiting the output to the top 5 teams."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","List the top 5 tennis players with the highest win percentage in the current year, including the number of matches played and won.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, PlayerID INT, OpponentID INT, Result VARCHAR(10), Date DATE);","WITH PlayerWins AS (SELECT P.PlayerName, COUNT(M.MatchID) AS MatchesPlayed, SUM(CASE WHEN M.Result = 'Win' THEN 1 ELSE 0 END) AS MatchesWon, (SUM(CASE WHEN M.Result = 'Win' THEN 1 ELSE 0 END) * 1.0 / COUNT(M.MatchID)) AS WinPercentage FROM Players P JOIN Matches M ON P.PlayerID = M.PlayerID GROUP BY P.PlayerName) SELECT PlayerName, MatchesPlayed, MatchesWon, WinPercentage FROM PlayerWins ORDER BY WinPercentage DESC LIMIT 5;","The query creates a common table expression (CTE) named PlayerWins that calculates the number of matches played, matches won, and win percentage for each player. It then selects the player names, matches played, matches won, and win percentage from the CTE, ordering the results by win percentage in descending order and limiting the output to the top 5 players."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 most valuable sports franchises based on their current market value.,"CREATE TABLE Franchises (FranchiseID INT PRIMARY KEY, FranchiseName VARCHAR(50), MarketValue DECIMAL);","SELECT FranchiseName, MarketValue FROM Franchises ORDER BY MarketValue DESC LIMIT 5;","The query selects the franchise names and their market values from the Franchises table, ordering the results by market value in descending order and limiting the output to the top 5 most valuable franchises."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","Show the top 5 countries with the highest number of gold medals in the latest Olympics, including the total number of medals won.","CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50)); CREATE TABLE Medals (MedalID INT PRIMARY KEY, CountryID INT, MedalType VARCHAR(10), EventID INT);","WITH CountryMedals AS (SELECT C.CountryName, COUNT(M.MedalID) AS TotalMedals, SUM(CASE WHEN M.MedalType = 'Gold' THEN 1 ELSE 0 END) AS GoldMedals FROM Countries C JOIN Medals M ON C.CountryID = M.CountryID GROUP BY C.CountryName) SELECT CountryName, TotalMedals, GoldMedals FROM CountryMedals ORDER BY GoldMedals DESC LIMIT 5;","The query creates a common table expression (CTE) named CountryMedals that calculates the total number of medals and the number of gold medals for each country. It then selects the country names, total medals, and gold medals from the CTE, ordering the results by the number of gold medals in descending order and limiting the output to the top 5 countries."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the most popular fashion brands in different regions and then display the brands that are popular in both Europe and North America.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), PopularityScore DECIMAL); INSERT INTO FashionBrands (BrandID, BrandName, Region, PopularityScore) VALUES (1, 'Gucci', 'Europe', 95.0), (2, 'Nike', 'North America', 90.0), (3, 'Adidas', 'Europe', 85.0), (4, 'Levi\'s', 'North America', 80.0), (5, 'Zara', 'Europe', 75.0);",CREATE TABLE PopularBrands AS SELECT BrandName FROM FashionBrands WHERE Region = 'Europe' INTERSECT SELECT BrandName FROM FashionBrands WHERE Region = 'North America'; SELECT * FROM PopularBrands;,"The query first creates a table to store the most popular fashion brands in different regions. It then uses the INTERSECT set operation to find brands that are popular in both Europe and North America and stores the result in a new table called PopularBrands. Finally, it selects all records from the PopularBrands table."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the average spending on sustainable fashion by consumers in different age groups and then display the age groups that spend above the average.,"CREATE TABLE SustainableFashionSpending (AgeGroup VARCHAR(20), AvgSpending DECIMAL); INSERT INTO SustainableFashionSpending (AgeGroup, AvgSpending) VALUES ('18-25', 150.0), ('26-35', 200.0), ('36-45', 180.0), ('46-55', 170.0), ('56+', 160.0);",CREATE TABLE AboveAverageSpending AS SELECT AgeGroup FROM SustainableFashionSpending WHERE AvgSpending > (SELECT AVG(AvgSpending) FROM SustainableFashionSpending); SELECT * FROM AboveAverageSpending;,"The query first creates a table to store the average spending on sustainable fashion by consumers in different age groups. It then uses a subquery to calculate the overall average spending and selects the age groups that spend above this average. The result is stored in a new table called AboveAverageSpending, and all records from this table are selected."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the number of fashion items sold in different categories and then display the categories that have sold more items than the average across all categories.,"CREATE TABLE FashionSales (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(50), ItemsSold INT); INSERT INTO FashionSales (CategoryID, CategoryName, ItemsSold) VALUES (1, 'Clothing', 5000), (2, 'Footwear', 3000), (3, 'Accessories', 2000), (4, 'Bags', 1500), (5, 'Jewelry', 1000);",CREATE TABLE AboveAverageSales AS SELECT CategoryName FROM FashionSales WHERE ItemsSold > (SELECT AVG(ItemsSold) FROM FashionSales); SELECT * FROM AboveAverageSales;,"The query first creates a table to store the number of fashion items sold in different categories. It then uses a subquery to calculate the average number of items sold across all categories and selects the categories that have sold more items than this average. The result is stored in a new table called AboveAverageSales, and all records from this table are selected."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the environmental impact scores of different fashion brands and then display the brands that have a lower impact than the average.,"CREATE TABLE EnvironmentalImpact (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), ImpactScore DECIMAL); INSERT INTO EnvironmentalImpact (BrandID, BrandName, ImpactScore) VALUES (1, 'Patagonia', 20.0), (2, 'H&M', 50.0), (3, 'Zara', 45.0), (4, 'Levi\'s', 30.0), (5, 'Nike', 40.0);",CREATE TABLE LowImpactBrands AS SELECT BrandName FROM EnvironmentalImpact WHERE ImpactScore < (SELECT AVG(ImpactScore) FROM EnvironmentalImpact); SELECT * FROM LowImpactBrands;,"The query first creates a table to store the environmental impact scores of different fashion brands. It then uses a subquery to calculate the average impact score and selects the brands that have a lower impact than this average. The result is stored in a new table called LowImpactBrands, and all records from this table are selected."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the fashion trends in different seasons and then display the trends that are common in both Spring and Summer.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Season VARCHAR(20)); INSERT INTO FashionTrends (TrendID, TrendName, Season) VALUES (1, 'Floral Prints', 'Spring'), (2, 'Pastel Colors', 'Spring'), (3, 'Bright Colors', 'Summer'), (4, 'Floral Prints', 'Summer'), (5, 'Denim', 'Fall');",CREATE TABLE CommonTrends AS SELECT TrendName FROM FashionTrends WHERE Season = 'Spring' INTERSECT SELECT TrendName FROM FashionTrends WHERE Season = 'Summer'; SELECT * FROM CommonTrends;,"The query first creates a table to store the fashion trends in different seasons. It then uses the INTERSECT set operation to find trends that are common in both Spring and Summer and stores the result in a new table called CommonTrends. Finally, it selects all records from the CommonTrends table."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the total government spending on healthcare and education for each state, and ensure the transaction is committed only if both queries succeed.","CREATE TABLE GovernmentSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), HealthcareSpending DECIMAL, EducationSpending DECIMAL); CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(50));","BEGIN TRANSACTION; SELECT s.StateName, g.HealthcareSpending, g.EducationSpending FROM GovernmentSpending g INNER JOIN States s ON g.StateID = s.StateID; COMMIT;","The query starts a transaction, retrieves the total spending on healthcare and education for each state by joining the GovernmentSpending and States tables on StateID, and commits the transaction if the query is successful."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List all legislative bills along with their sponsors and the committees they were referred to, ensuring the transaction is committed only if all queries succeed.","CREATE TABLE Bills (BillID INT PRIMARY KEY, BillName VARCHAR(100), SponsorID INT, CommitteeID INT); CREATE TABLE Sponsors (SponsorID INT PRIMARY KEY, SponsorName VARCHAR(50)); CREATE TABLE Committees (CommitteeID INT PRIMARY KEY, CommitteeName VARCHAR(50));","BEGIN TRANSACTION; SELECT b.BillName, s.SponsorName, c.CommitteeName FROM Bills b INNER JOIN Sponsors s ON b.SponsorID = s.SponsorID INNER JOIN Committees c ON b.CommitteeID = c.CommitteeID; COMMIT;","The query starts a transaction, retrieves all legislative bills along with their sponsors and the committees they were referred to by joining the Bills, Sponsors, and Committees tables, and commits the transaction if the query is successful."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total population and average income for each city, ensuring the transaction is committed only if both queries succeed.","CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(50), StateID INT); CREATE TABLE Population (CityID INT PRIMARY KEY, TotalPopulation INT); CREATE TABLE Income (CityID INT PRIMARY KEY, AverageIncome DECIMAL);","BEGIN TRANSACTION; SELECT c.CityName, p.TotalPopulation, i.AverageIncome FROM Cities c INNER JOIN Population p ON c.CityID = p.CityID INNER JOIN Income i ON c.CityID = i.CityID; COMMIT;","The query starts a transaction, retrieves the total population and average income for each city by joining the Cities, Population, and Income tables on CityID, and commits the transaction if the query is successful."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Get the details of all public policies along with the departments responsible for their implementation, ensuring the transaction is committed only if all queries succeed.","CREATE TABLE Policies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), DepartmentID INT); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50));","BEGIN TRANSACTION; SELECT p.PolicyName, d.DepartmentName FROM Policies p INNER JOIN Departments d ON p.DepartmentID = d.DepartmentID; COMMIT;","The query starts a transaction, retrieves the details of all public policies along with the departments responsible for their implementation by joining the Policies and Departments tables on DepartmentID, and commits the transaction if the query is successful."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show the effectiveness ratings of various government programs along with the agencies responsible for them, ensuring the transaction is committed only if all queries succeed.","CREATE TABLE Programs (ProgramID INT PRIMARY KEY, ProgramName VARCHAR(100), AgencyID INT, EffectivenessRating DECIMAL); CREATE TABLE Agencies (AgencyID INT PRIMARY KEY, AgencyName VARCHAR(50));","BEGIN TRANSACTION; SELECT p.ProgramName, a.AgencyName, p.EffectivenessRating FROM Programs p INNER JOIN Agencies a ON p.AgencyID = a.AgencyID; COMMIT;","The query starts a transaction, retrieves the effectiveness ratings of various government programs along with the agencies responsible for them by joining the Programs and Agencies tables on AgencyID, and commits the transaction if the query is successful."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store the average crop yield per hectare for different crops across various regions, and then display the top 5 regions with the highest average yield.","CREATE TABLE CropYields (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropName VARCHAR(50), AvgYieldPerHectare DECIMAL); INSERT INTO CropYields (RegionID, RegionName, CropName, AvgYieldPerHectare) VALUES (1, 'North America', 'Wheat', 3.2), (2, 'Europe', 'Corn', 4.5), (3, 'Asia', 'Rice', 5.0), (4, 'South America', 'Soybean', 2.8), (5, 'Africa', 'Maize', 1.9);","WITH RankedRegions AS (SELECT RegionName, AvgYieldPerHectare, DENSE_RANK() OVER (ORDER BY AvgYieldPerHectare DESC) AS Rank FROM CropYields) SELECT RegionName, AvgYieldPerHectare FROM RankedRegions WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank regions based on their average crop yield per hectare in descending order. It then selects the top 5 regions with the highest average yield using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about different farming practices and their adoption rates across various countries, and then display the top 3 countries with the highest adoption rates for organic farming.","CREATE TABLE FarmingPractices (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), PracticeName VARCHAR(50), AdoptionRate DECIMAL); INSERT INTO FarmingPractices (CountryID, CountryName, PracticeName, AdoptionRate) VALUES (1, 'USA', 'Organic Farming', 25.0), (2, 'Germany', 'Organic Farming', 30.0), (3, 'India', 'Organic Farming', 15.0), (4, 'Brazil', 'Organic Farming', 20.0), (5, 'Australia', 'Organic Farming', 35.0);","WITH RankedCountries AS (SELECT CountryName, AdoptionRate, DENSE_RANK() OVER (ORDER BY AdoptionRate DESC) AS Rank FROM FarmingPractices WHERE PracticeName = 'Organic Farming') SELECT CountryName, AdoptionRate FROM RankedCountries WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank countries based on their adoption rates for organic farming in descending order. It then selects the top 3 countries with the highest adoption rates using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store data on the supply chain stages for different agricultural products, and then display the stages for the product 'Wheat'.","CREATE TABLE SupplyChain (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), StageName VARCHAR(50), StageOrder INT); INSERT INTO SupplyChain (ProductID, ProductName, StageName, StageOrder) VALUES (1, 'Wheat', 'Harvesting', 1), (2, 'Wheat', 'Processing', 2), (3, 'Wheat', 'Packaging', 3), (4, 'Wheat', 'Distribution', 4), (5, 'Wheat', 'Retail', 5);","SELECT StageName, StageOrder FROM SupplyChain WHERE ProductName = 'Wheat' ORDER BY StageOrder;",The query selects the stages for the product 'Wheat' from the SupplyChain table and orders them by the stage order to display the supply chain stages in the correct sequence.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about global food security initiatives and their funding amounts, and then display the top 3 initiatives with the highest funding.","CREATE TABLE FoodSecurityInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(100), FundingAmount DECIMAL); INSERT INTO FoodSecurityInitiatives (InitiativeID, InitiativeName, FundingAmount) VALUES (1, 'Zero Hunger', 5000000.0), (2, 'Food for All', 3000000.0), (3, 'Sustainable Agriculture', 4000000.0), (4, 'Nutrition Improvement', 2000000.0), (5, 'Food Security for Women', 3500000.0);","WITH RankedInitiatives AS (SELECT InitiativeName, FundingAmount, DENSE_RANK() OVER (ORDER BY FundingAmount DESC) AS Rank FROM FoodSecurityInitiatives) SELECT InitiativeName, FundingAmount FROM RankedInitiatives WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank food security initiatives based on their funding amounts in descending order. It then selects the top 3 initiatives with the highest funding using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store data on crop diseases and their impact on yield reduction, and then display the diseases causing more than 20% yield reduction.","CREATE TABLE CropDiseases (DiseaseID INT PRIMARY KEY, DiseaseName VARCHAR(50), CropAffected VARCHAR(50), YieldReductionPercentage DECIMAL); INSERT INTO CropDiseases (DiseaseID, DiseaseName, CropAffected, YieldReductionPercentage) VALUES (1, 'Rust', 'Wheat', 25.0), (2, 'Blight', 'Potato', 30.0), (3, 'Mosaic Virus', 'Cassava', 15.0), (4, 'Wilt', 'Tomato', 20.0), (5, 'Smut', 'Corn', 10.0);","SELECT DiseaseName, CropAffected, YieldReductionPercentage FROM CropDiseases WHERE YieldReductionPercentage > 20.0;","The query selects the diseases from the CropDiseases table that cause more than 20% yield reduction, displaying the disease name, the crop affected, and the yield reduction percentage."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the total sales and average price of electric vehicles sold in 2022, grouped by region, and ensure the transaction is committed only if the total sales exceed 1000 units.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice, Region) VALUES (1, 101, '2022-01-15', 35000, 'North America'), (2, 102, '2022-02-20', 32000, 'Europe'), (3, 101, '2022-03-10', 34000, 'Asia'); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (101, 'Model X', 'Electric'), (102, 'Model Y', 'Electric');","BEGIN TRANSACTION; WITH EVSales AS (SELECT Region, COUNT(*) AS TotalSales, AVG(SalePrice) AS AvgPrice FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type = 'Electric' AND YEAR(VS.SaleDate) = 2022 GROUP BY Region) SELECT Region, TotalSales, AvgPrice FROM EVSales; IF (SELECT SUM(TotalSales) FROM EVSales) > 1000 COMMIT; ELSE ROLLBACK;","The query begins a transaction and creates a common table expression (CTE) to calculate the total sales and average price of electric vehicles sold in 2022, grouped by region. It then checks if the total sales exceed 1000 units. If so, the transaction is committed; otherwise, it is rolled back."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the top 3 regions with the highest average sales price for hybrid vehicles in 2021, ensuring the transaction is committed only if the average price is above $30,000.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice, Region) VALUES (4, 103, '2021-05-15', 28000, 'North America'), (5, 104, '2021-06-20', 31000, 'Europe'), (6, 103, '2021-07-10', 29000, 'Asia'); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (103, 'Prius', 'Hybrid'), (104, 'Civic Hybrid', 'Hybrid');","BEGIN TRANSACTION; WITH HybridSales AS (SELECT Region, AVG(SalePrice) AS AvgPrice FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type = 'Hybrid' AND YEAR(VS.SaleDate) = 2021 GROUP BY Region) SELECT Region, AvgPrice FROM HybridSales ORDER BY AvgPrice DESC LIMIT 3; IF (SELECT MIN(AvgPrice) FROM (SELECT AVG(SalePrice) AS AvgPrice FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type = 'Hybrid' AND YEAR(VS.SaleDate) = 2021 GROUP BY Region ORDER BY AvgPrice DESC LIMIT 3) AS TopRegions) > 30000 COMMIT; ELSE ROLLBACK;","The query begins a transaction and creates a common table expression (CTE) to calculate the average sales price of hybrid vehicles sold in 2021, grouped by region. It then selects the top 3 regions with the highest average sales price. If the minimum average price among these top regions is above $30,000, the transaction is committed; otherwise, it is rolled back."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total number of diesel vehicles sold in each region in 2020 and ensure the transaction is committed only if the total number of sales is above 500 units.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice, Region) VALUES (7, 105, '2020-03-15', 25000, 'North America'), (8, 106, '2020-04-20', 27000, 'Europe'), (9, 105, '2020-05-10', 26000, 'Asia'); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (105, 'F-150', 'Diesel'), (106, 'Ram 1500', 'Diesel');","BEGIN TRANSACTION; WITH DieselSales AS (SELECT Region, COUNT(*) AS TotalSales FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type = 'Diesel' AND YEAR(VS.SaleDate) = 2020 GROUP BY Region) SELECT Region, TotalSales FROM DieselSales; IF (SELECT SUM(TotalSales) FROM DieselSales) > 500 COMMIT; ELSE ROLLBACK;","The query begins a transaction and creates a common table expression (CTE) to calculate the total number of diesel vehicles sold in each region in 2020. It then checks if the total number of sales exceeds 500 units. If so, the transaction is committed; otherwise, it is rolled back."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average sales price of electric and hybrid vehicles sold in 2021, grouped by vehicle type, and ensure the transaction is committed only if the average price for both types is above $25,000.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice, Region) VALUES (10, 107, '2021-08-15', 33000, 'North America'), (11, 108, '2021-09-20', 29000, 'Europe'), (12, 107, '2021-10-10', 31000, 'Asia'); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (107, 'Model 3', 'Electric'), (108, 'Accord Hybrid', 'Hybrid');","BEGIN TRANSACTION; WITH AvgSalesPrice AS (SELECT V.Type, AVG(VS.SalePrice) AS AvgPrice FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type IN ('Electric', 'Hybrid') AND YEAR(VS.SaleDate) = 2021 GROUP BY V.Type) SELECT Type, AvgPrice FROM AvgSalesPrice; IF (SELECT MIN(AvgPrice) FROM AvgSalesPrice) > 25000 COMMIT; ELSE ROLLBACK;","The query begins a transaction and creates a common table expression (CTE) to calculate the average sales price of electric and hybrid vehicles sold in 2021, grouped by vehicle type. It then checks if the average price for both types is above $25,000. If so, the transaction is committed; otherwise, it is rolled back."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the total sales and average price of vehicles sold in 2021, grouped by vehicle type and region, and ensure the transaction is committed only if the total sales exceed 2000 units.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice, Region) VALUES (13, 109, '2021-11-15', 27000, 'North America'), (14, 110, '2021-12-20', 29000, 'Europe'), (15, 109, '2021-11-10', 28000, 'Asia'); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (109, 'Camry', 'Sedan'), (110, 'RAV4', 'SUV');","BEGIN TRANSACTION; WITH SalesData AS (SELECT V.Type, VS.Region, COUNT(*) AS TotalSales, AVG(VS.SalePrice) AS AvgPrice FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE YEAR(VS.SaleDate) = 2021 GROUP BY V.Type, VS.Region) SELECT Type, Region, TotalSales, AvgPrice FROM SalesData; IF (SELECT SUM(TotalSales) FROM SalesData) > 2000 COMMIT; ELSE ROLLBACK;","The query begins a transaction and creates a common table expression (CTE) to calculate the total sales and average price of vehicles sold in 2021, grouped by vehicle type and region. It then checks if the total sales exceed 2000 units. If so, the transaction is committed; otherwise, it is rolled back."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total government spending by department for the year 2022.,"CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), FiscalYear INT, AmountSpent DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, FiscalYear, AmountSpent) VALUES (1, 'Health', 2022, 5000000), (2, 'Education', 2022, 3000000), (3, 'Defense', 2022, 7000000), (4, 'Transportation', 2022, 2000000), (5, 'Agriculture', 2022, 1000000);","SELECT DepartmentName, SUM(AmountSpent) AS TotalSpent FROM GovernmentSpending WHERE FiscalYear = 2022 GROUP BY DepartmentName;",The query selects the department names and sums up the amount spent for each department for the fiscal year 2022. It groups the results by department name to provide a total spending per department.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",List the number of bills passed by each legislative body in 2021.,"CREATE TABLE LegislativeBodies (BodyID INT PRIMARY KEY, BodyName VARCHAR(100)); CREATE TABLE Bills (BillID INT PRIMARY KEY, BodyID INT, BillName VARCHAR(100), YearPassed INT); INSERT INTO LegislativeBodies (BodyID, BodyName) VALUES (1, 'Senate'), (2, 'House of Representatives'); INSERT INTO Bills (BillID, BodyID, BillName, YearPassed) VALUES (1, 1, 'Healthcare Reform', 2021), (2, 2, 'Education Funding', 2021), (3, 1, 'Defense Budget', 2021), (4, 2, 'Infrastructure Bill', 2021);","SELECT LB.BodyName, COUNT(B.BillID) AS BillsPassed FROM LegislativeBodies LB INNER JOIN Bills B ON LB.BodyID = B.BodyID WHERE B.YearPassed = 2021 GROUP BY LB.BodyName;",The query joins the LegislativeBodies and Bills tables on the BodyID field and counts the number of bills passed by each legislative body in the year 2021. It groups the results by the legislative body name.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Show the average age of citizens by region.,"CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Region VARCHAR(100)); INSERT INTO Citizens (CitizenID, Name, Age, Region) VALUES (1, 'John Doe', 45, 'North'), (2, 'Jane Smith', 34, 'South'), (3, 'Emily Davis', 29, 'East'), (4, 'Michael Brown', 52, 'West'), (5, 'Sarah Wilson', 40, 'North');","SELECT Region, AVG(Age) AS AverageAge FROM Citizens GROUP BY Region;",The query selects the region and calculates the average age of citizens in each region. It groups the results by region to provide the average age per region.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Provide a summary of the number of policies implemented by each government agency in 2020.,"CREATE TABLE GovernmentAgencies (AgencyID INT PRIMARY KEY, AgencyName VARCHAR(100)); CREATE TABLE Policies (PolicyID INT PRIMARY KEY, AgencyID INT, PolicyName VARCHAR(100), YearImplemented INT); INSERT INTO GovernmentAgencies (AgencyID, AgencyName) VALUES (1, 'Environmental Protection Agency'), (2, 'Department of Health'), (3, 'Department of Education'); INSERT INTO Policies (PolicyID, AgencyID, PolicyName, YearImplemented) VALUES (1, 1, 'Clean Air Act', 2020), (2, 2, 'Health Insurance Reform', 2020), (3, 3, 'Student Loan Forgiveness', 2020), (4, 1, 'Water Quality Standards', 2020);","SELECT GA.AgencyName, COUNT(P.PolicyID) AS PoliciesImplemented FROM GovernmentAgencies GA INNER JOIN Policies P ON GA.AgencyID = P.AgencyID WHERE P.YearImplemented = 2020 GROUP BY GA.AgencyName;",The query joins the GovernmentAgencies and Policies tables on the AgencyID field and counts the number of policies implemented by each agency in the year 2020. It groups the results by the agency name.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Display the effectiveness rating of governance by region for the year 2021.,"CREATE TABLE GovernanceEffectiveness (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), Year INT, EffectivenessRating DECIMAL); INSERT INTO GovernanceEffectiveness (RegionID, RegionName, Year, EffectivenessRating) VALUES (1, 'North', 2021, 8.5), (2, 'South', 2021, 7.2), (3, 'East', 2021, 6.8), (4, 'West', 2021, 7.9);","SELECT RegionName, EffectivenessRating FROM GovernanceEffectiveness WHERE Year = 2021;",The query selects the region name and effectiveness rating from the GovernanceEffectiveness table for the year 2021.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the average annual temperature and CO2 emissions for countries that have implemented renewable energy projects, and display the top 5 countries with the highest average annual temperature.","CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50)); CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, CountryID INT, ProjectName VARCHAR(50), FOREIGN KEY (CountryID) REFERENCES Countries(CountryID)); CREATE TABLE ClimateData (ClimateID INT PRIMARY KEY, CountryID INT, AvgAnnualTemp DECIMAL, CO2Emissions DECIMAL, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));","WITH CountryClimate AS (SELECT c.CountryName, cd.AvgAnnualTemp, cd.CO2Emissions FROM Countries c INNER JOIN ClimateData cd ON c.CountryID = cd.CountryID INNER JOIN RenewableProjects rp ON c.CountryID = rp.CountryID) SELECT CountryName, AvgAnnualTemp, CO2Emissions FROM CountryClimate ORDER BY AvgAnnualTemp DESC LIMIT 5;","The query first creates a common table expression (CTE) named CountryClimate that joins the Countries, ClimateData, and RenewableProjects tables using INNER JOINs. It then selects the CountryName, AvgAnnualTemp, and CO2Emissions from the CTE and orders the results by AvgAnnualTemp in descending order, limiting the output to the top 5 countries."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the total number of endangered species in each continent and display the continents with more than 100 endangered species.,"CREATE TABLE Continents (ContinentID INT PRIMARY KEY, ContinentName VARCHAR(50)); CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), ContinentID INT, FOREIGN KEY (ContinentID) REFERENCES Continents(ContinentID)); CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), CountryID INT, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));","SELECT ct.ContinentName, COUNT(es.SpeciesID) AS TotalEndangeredSpecies FROM Continents ct INNER JOIN Countries c ON ct.ContinentID = c.ContinentID INNER JOIN EndangeredSpecies es ON c.CountryID = es.CountryID GROUP BY ct.ContinentName HAVING COUNT(es.SpeciesID) > 100;","The query joins the Continents, Countries, and EndangeredSpecies tables using INNER JOINs. It groups the results by ContinentName and counts the number of endangered species in each continent. The HAVING clause filters the results to include only continents with more than 100 endangered species."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Fetch the average water quality index for rivers that flow through protected areas and display the top 3 rivers with the highest water quality index.,"CREATE TABLE Rivers (RiverID INT PRIMARY KEY, RiverName VARCHAR(50)); CREATE TABLE ProtectedAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(50)); CREATE TABLE RiverFlow (FlowID INT PRIMARY KEY, RiverID INT, AreaID INT, FOREIGN KEY (RiverID) REFERENCES Rivers(RiverID), FOREIGN KEY (AreaID) REFERENCES ProtectedAreas(AreaID)); CREATE TABLE WaterQuality (QualityID INT PRIMARY KEY, RiverID INT, WaterQualityIndex DECIMAL, FOREIGN KEY (RiverID) REFERENCES Rivers(RiverID));","WITH ProtectedRiverQuality AS (SELECT r.RiverName, wq.WaterQualityIndex FROM Rivers r INNER JOIN WaterQuality wq ON r.RiverID = wq.RiverID INNER JOIN RiverFlow rf ON r.RiverID = rf.RiverID INNER JOIN ProtectedAreas pa ON rf.AreaID = pa.AreaID) SELECT RiverName, AVG(WaterQualityIndex) AS AvgWaterQualityIndex FROM ProtectedRiverQuality GROUP BY RiverName ORDER BY AvgWaterQualityIndex DESC LIMIT 3;","The query creates a common table expression (CTE) named ProtectedRiverQuality that joins the Rivers, WaterQuality, RiverFlow, and ProtectedAreas tables using INNER JOINs. It then selects the RiverName and the average WaterQualityIndex from the CTE, groups the results by RiverName, and orders them by AvgWaterQualityIndex in descending order, limiting the output to the top 3 rivers."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Identify the top 5 cities with the highest recycling rates and their corresponding population density.,"CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(50), PopulationDensity DECIMAL); CREATE TABLE RecyclingData (RecyclingID INT PRIMARY KEY, CityID INT, RecyclingRate DECIMAL, FOREIGN KEY (CityID) REFERENCES Cities(CityID));","SELECT c.CityName, c.PopulationDensity, rd.RecyclingRate FROM Cities c INNER JOIN RecyclingData rd ON c.CityID = rd.CityID ORDER BY rd.RecyclingRate DESC LIMIT 5;","The query joins the Cities and RecyclingData tables using an INNER JOIN. It selects the CityName, PopulationDensity, and RecyclingRate from the joined tables and orders the results by RecyclingRate in descending order, limiting the output to the top 5 cities."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the total area of forest cover and the number of forest conservation projects for each country, and display countries with more than 10 projects.","CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50)); CREATE TABLE ForestCover (CoverID INT PRIMARY KEY, CountryID INT, TotalArea DECIMAL, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID)); CREATE TABLE ConservationProjects (ProjectID INT PRIMARY KEY, CountryID INT, ProjectName VARCHAR(50), FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));","SELECT c.CountryName, fc.TotalArea, COUNT(cp.ProjectID) AS TotalProjects FROM Countries c INNER JOIN ForestCover fc ON c.CountryID = fc.CountryID INNER JOIN ConservationProjects cp ON c.CountryID = cp.CountryID GROUP BY c.CountryName, fc.TotalArea HAVING COUNT(cp.ProjectID) > 10;","The query joins the Countries, ForestCover, and ConservationProjects tables using INNER JOINs. It groups the results by CountryName and TotalArea, counting the number of conservation projects in each country. The HAVING clause filters the results to include only countries with more than 10 projects."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 3 most popular tourist destinations in each region based on the number of visits.,"CREATE TABLE TouristVisits (VisitID INT PRIMARY KEY, Destination VARCHAR(100), Region VARCHAR(50), VisitCount INT); INSERT INTO TouristVisits (VisitID, Destination, Region, VisitCount) VALUES (1, 'Eiffel Tower', 'Europe', 5000), (2, 'Great Wall', 'Asia', 4500), (3, 'Statue of Liberty', 'North America', 3000), (4, 'Colosseum', 'Europe', 4000), (5, 'Taj Mahal', 'Asia', 3500);","WITH RankedDestinations AS (SELECT Destination, Region, VisitCount, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY VisitCount DESC) AS Rank FROM TouristVisits) SELECT Destination, Region, VisitCount FROM RankedDestinations WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank tourist destinations within each region based on the number of visits in descending order. It then selects the top 3 destinations for each region using the ROW_NUMBER function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,List the top 5 hotels with the highest customer ratings in each city.,"CREATE TABLE HotelRatings (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), City VARCHAR(50), CustomerRating DECIMAL); INSERT INTO HotelRatings (HotelID, HotelName, City, CustomerRating) VALUES (1, 'Hotel A', 'New York', 4.8), (2, 'Hotel B', 'Paris', 4.7), (3, 'Hotel C', 'Tokyo', 4.9), (4, 'Hotel D', 'New York', 4.6), (5, 'Hotel E', 'Paris', 4.5);","WITH RankedHotels AS (SELECT HotelName, City, CustomerRating, RANK() OVER (PARTITION BY City ORDER BY CustomerRating DESC) AS Rank FROM HotelRatings) SELECT HotelName, City, CustomerRating FROM RankedHotels WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank hotels within each city based on customer ratings in descending order. It then selects the top 5 hotels for each city using the RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,"Identify the average length of stay for guests in each hotel, and rank the hotels by this metric.","CREATE TABLE GuestStays (StayID INT PRIMARY KEY, HotelName VARCHAR(100), GuestID INT, LengthOfStay INT); INSERT INTO GuestStays (StayID, HotelName, GuestID, LengthOfStay) VALUES (1, 'Hotel A', 101, 5), (2, 'Hotel B', 102, 3), (3, 'Hotel C', 103, 7), (4, 'Hotel D', 104, 4), (5, 'Hotel E', 105, 6);","WITH AvgStay AS (SELECT HotelName, AVG(LengthOfStay) AS AvgLengthOfStay FROM GuestStays GROUP BY HotelName), RankedHotels AS (SELECT HotelName, AvgLengthOfStay, RANK() OVER (ORDER BY AvgLengthOfStay DESC) AS Rank FROM AvgStay) SELECT HotelName, AvgLengthOfStay FROM RankedHotels;",The query first calculates the average length of stay for each hotel using a common table expression (CTE). It then ranks the hotels based on the average length of stay in descending order and selects the hotel names and their average lengths of stay.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Determine the percentage of total bookings each hotel contributes within its city.,"CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, HotelName VARCHAR(100), City VARCHAR(50), BookingCount INT); INSERT INTO HotelBookings (BookingID, HotelName, City, BookingCount) VALUES (1, 'Hotel A', 'New York', 200), (2, 'Hotel B', 'Paris', 150), (3, 'Hotel C', 'Tokyo', 180), (4, 'Hotel D', 'New York', 220), (5, 'Hotel E', 'Paris', 170);","WITH CityTotals AS (SELECT City, SUM(BookingCount) AS TotalBookings FROM HotelBookings GROUP BY City), BookingPercentages AS (SELECT HotelName, City, BookingCount, (BookingCount * 100.0 / TotalBookings) AS BookingPercentage FROM HotelBookings JOIN CityTotals USING (City)) SELECT HotelName, City, BookingPercentage FROM BookingPercentages;","The query first calculates the total number of bookings for each city using a common table expression (CTE). It then calculates the percentage of total bookings each hotel contributes within its city and selects the hotel names, cities, and their booking percentages."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 3 most preferred travel packages based on customer bookings in each region.,"CREATE TABLE TravelPackages (PackageID INT PRIMARY KEY, PackageName VARCHAR(100), Region VARCHAR(50), BookingCount INT); INSERT INTO TravelPackages (PackageID, PackageName, Region, BookingCount) VALUES (1, 'Package A', 'Europe', 300), (2, 'Package B', 'Asia', 250), (3, 'Package C', 'North America', 200), (4, 'Package D', 'Europe', 350), (5, 'Package E', 'Asia', 400);","WITH RankedPackages AS (SELECT PackageName, Region, BookingCount, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY BookingCount DESC) AS Rank FROM TravelPackages) SELECT PackageName, Region, BookingCount FROM RankedPackages WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank travel packages within each region based on the number of bookings in descending order. It then selects the top 3 travel packages for each region using the ROW_NUMBER function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 most popular travel destinations based on customer bookings in the last year.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(50), Email VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, Destination VARCHAR(50), BookingDate DATE, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","WITH RankedDestinations AS (SELECT Destination, COUNT(*) AS BookingCount, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Bookings WHERE BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY Destination) SELECT Destination, BookingCount FROM RankedDestinations WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank travel destinations based on the number of bookings in the last year. It then selects the top 3 most popular destinations using the RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average length of stay for guests in each hotel, and rank the hotels by this metric.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Location VARCHAR(50)); CREATE TABLE Stays (StayID INT PRIMARY KEY, HotelID INT, CustomerID INT, CheckInDate DATE, CheckOutDate DATE, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","WITH StayDurations AS (SELECT HotelID, DATEDIFF(DAY, CheckInDate, CheckOutDate) AS Duration FROM Stays), AvgStayDurations AS (SELECT HotelID, AVG(Duration) AS AvgDuration FROM StayDurations GROUP BY HotelID), RankedHotels AS (SELECT HotelID, AvgDuration, RANK() OVER (ORDER BY AvgDuration DESC) AS Rank FROM AvgStayDurations) SELECT HotelID, AvgDuration FROM RankedHotels WHERE Rank <= 5;","The query calculates the duration of each stay, then computes the average stay duration for each hotel. It ranks the hotels by average stay duration and selects the top 5."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the top 5 customers who have spent the most on hotel bookings in the past year.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(50), Email VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, HotelID INT, BookingDate DATE, AmountSpent DECIMAL, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","WITH CustomerSpending AS (SELECT CustomerID, SUM(AmountSpent) AS TotalSpent FROM Bookings WHERE BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY CustomerID), RankedCustomers AS (SELECT CustomerID, TotalSpent, RANK() OVER (ORDER BY TotalSpent DESC) AS Rank FROM CustomerSpending) SELECT CustomerID, TotalSpent FROM RankedCustomers WHERE Rank <= 5;","The query calculates the total amount spent by each customer on hotel bookings in the past year, ranks the customers by total spending, and selects the top 5."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 5 hotels with the highest average customer ratings in the past year.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Location VARCHAR(50)); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, CustomerID INT, Rating INT, ReviewDate DATE, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","WITH RecentReviews AS (SELECT HotelID, Rating FROM Reviews WHERE ReviewDate >= DATEADD(YEAR, -1, GETDATE())), AvgRatings AS (SELECT HotelID, AVG(Rating) AS AvgRating FROM RecentReviews GROUP BY HotelID), RankedHotels AS (SELECT HotelID, AvgRating, RANK() OVER (ORDER BY AvgRating DESC) AS Rank FROM AvgRatings) SELECT HotelID, AvgRating FROM RankedHotels WHERE Rank <= 5;","The query filters reviews from the past year, calculates the average rating for each hotel, ranks the hotels by average rating, and selects the top 5."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the top 3 travel agencies based on the number of bookings they have facilitated in the past year.,"CREATE TABLE TravelAgencies (AgencyID INT PRIMARY KEY, AgencyName VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, AgencyID INT, CustomerID INT, BookingDate DATE, FOREIGN KEY (AgencyID) REFERENCES TravelAgencies(AgencyID));","WITH AgencyBookings AS (SELECT AgencyID, COUNT(*) AS BookingCount FROM Bookings WHERE BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY AgencyID), RankedAgencies AS (SELECT AgencyID, BookingCount, RANK() OVER (ORDER BY BookingCount DESC) AS Rank FROM AgencyBookings) SELECT AgencyID, BookingCount FROM RankedAgencies WHERE Rank <= 3;","The query counts the number of bookings facilitated by each travel agency in the past year, ranks the agencies by booking count, and selects the top 3."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 10 most popular tourist destinations based on customer reviews and booking data, including average ratings and number of bookings.","CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100), Country VARCHAR(50)); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, DestinationID INT, CustomerID INT, Rating DECIMAL, ReviewDate DATE); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, DestinationID INT, CustomerID INT, BookingDate DATE); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), Country VARCHAR(50));","WITH DestinationPopularity AS (SELECT D.DestinationName, AVG(R.Rating) AS AvgRating, COUNT(B.BookingID) AS NumberOfBookings FROM Destinations D INNER JOIN Reviews R ON D.DestinationID = R.DestinationID INNER JOIN Bookings B ON D.DestinationID = B.DestinationID GROUP BY D.DestinationName) SELECT DestinationName, AvgRating, NumberOfBookings FROM DestinationPopularity ORDER BY NumberOfBookings DESC LIMIT 10;","The query first creates a common table expression (CTE) named DestinationPopularity that joins the Destinations, Reviews, and Bookings tables to calculate the average rating and number of bookings for each destination. It then selects the top 10 destinations based on the number of bookings, ordered in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Identify the top 5 countries with the highest average hotel occupancy rates over the past year, including the average occupancy rate and total number of hotels.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Country VARCHAR(50), OccupancyRate DECIMAL, ReportDate DATE); CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50));","WITH CountryOccupancy AS (SELECT H.Country, AVG(H.OccupancyRate) AS AvgOccupancyRate, COUNT(H.HotelID) AS NumberOfHotels FROM Hotels H WHERE H.ReportDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY H.Country) SELECT Country, AvgOccupancyRate, NumberOfHotels FROM CountryOccupancy ORDER BY AvgOccupancyRate DESC LIMIT 5;","The query creates a common table expression (CTE) named CountryOccupancy that calculates the average occupancy rate and total number of hotels for each country over the past year. It then selects the top 5 countries with the highest average occupancy rates, ordered in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a detailed report on customer preferences for hotel amenities, including the most requested amenities and their frequency of requests.","CREATE TABLE Amenities (AmenityID INT PRIMARY KEY, AmenityName VARCHAR(50)); CREATE TABLE HotelAmenities (HotelID INT, AmenityID INT, PRIMARY KEY (HotelID, AmenityID)); CREATE TABLE CustomerRequests (RequestID INT PRIMARY KEY, CustomerID INT, AmenityID INT, RequestDate DATE);","WITH AmenityRequests AS (SELECT A.AmenityName, COUNT(CR.RequestID) AS RequestFrequency FROM Amenities A INNER JOIN CustomerRequests CR ON A.AmenityID = CR.AmenityID GROUP BY A.AmenityName) SELECT AmenityName, RequestFrequency FROM AmenityRequests ORDER BY RequestFrequency DESC;",The query creates a common table expression (CTE) named AmenityRequests that joins the Amenities and CustomerRequests tables to count the frequency of requests for each amenity. It then selects and orders the amenities by their request frequency in descending order.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Analyze the correlation between customer demographics and their preferred travel destinations, including age groups and preferred destinations.","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), AgeGroup VARCHAR(20), Country VARCHAR(50)); CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100), Country VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, DestinationID INT, BookingDate DATE);","WITH CustomerPreferences AS (SELECT C.AgeGroup, D.DestinationName, COUNT(B.BookingID) AS BookingCount FROM Customers C INNER JOIN Bookings B ON C.CustomerID = B.CustomerID INNER JOIN Destinations D ON B.DestinationID = D.DestinationID GROUP BY C.AgeGroup, D.DestinationName) SELECT AgeGroup, DestinationName, BookingCount FROM CustomerPreferences ORDER BY AgeGroup, BookingCount DESC;","The query creates a common table expression (CTE) named CustomerPreferences that joins the Customers, Bookings, and Destinations tables to count the number of bookings for each destination by different age groups. It then selects and orders the results by age group and booking count in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report on the seasonal trends in hotel bookings, including the number of bookings per season and the average booking duration.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Country VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, CheckInDate DATE, CheckOutDate DATE);","WITH SeasonalBookings AS (SELECT CASE WHEN MONTH(B.CheckInDate) IN (12, 1, 2) THEN 'Winter' WHEN MONTH(B.CheckInDate) IN (3, 4, 5) THEN 'Spring' WHEN MONTH(B.CheckInDate) IN (6, 7, 8) THEN 'Summer' ELSE 'Fall' END AS Season, COUNT(B.BookingID) AS NumberOfBookings, AVG(DATEDIFF(B.CheckOutDate, B.CheckInDate)) AS AvgBookingDuration FROM Bookings B GROUP BY Season) SELECT Season, NumberOfBookings, AvgBookingDuration FROM SeasonalBookings ORDER BY NumberOfBookings DESC;","The query creates a common table expression (CTE) named SeasonalBookings that categorizes bookings into seasons based on the check-in date, counts the number of bookings per season, and calculates the average booking duration. It then selects and orders the results by the number of bookings in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 most preferred hotel amenities by customers across different regions, excluding amenities that are only popular in one region.","CREATE TABLE CustomerPreferences (CustomerID INT PRIMARY KEY, Region VARCHAR(50), Amenity VARCHAR(50)); CREATE TABLE HotelAmenities (AmenityID INT PRIMARY KEY, AmenityName VARCHAR(50)); CREATE TABLE RegionPreferences (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE VIEW PreferredAmenities AS SELECT Region, Amenity, COUNT(*) AS PreferenceCount FROM CustomerPreferences GROUP BY Region, Amenity;","WITH RegionalPreferences AS (SELECT Amenity, SUM(PreferenceCount) AS TotalPreferences FROM PreferredAmenities GROUP BY Amenity), ExcludedAmenities AS (SELECT Amenity FROM PreferredAmenities GROUP BY Amenity HAVING COUNT(DISTINCT Region) = 1) SELECT Amenity, TotalPreferences FROM RegionalPreferences WHERE Amenity NOT IN (SELECT Amenity FROM ExcludedAmenities) ORDER BY TotalPreferences DESC LIMIT 5;","The query first creates a common table expression (CTE) to sum the preference counts for each amenity across all regions. It then creates another CTE to identify amenities that are only popular in one region. Finally, it selects the top 5 amenities by total preferences, excluding those that are only popular in one region."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Identify the top 3 regions with the highest average customer satisfaction scores for hotel stays, excluding regions with fewer than 100 reviews.","CREATE TABLE CustomerReviews (ReviewID INT PRIMARY KEY, Region VARCHAR(50), SatisfactionScore DECIMAL, ReviewCount INT); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE VIEW RegionSatisfaction AS SELECT Region, AVG(SatisfactionScore) AS AvgSatisfaction, SUM(ReviewCount) AS TotalReviews FROM CustomerReviews GROUP BY Region;","WITH FilteredRegions AS (SELECT Region, AvgSatisfaction FROM RegionSatisfaction WHERE TotalReviews >= 100) SELECT Region, AvgSatisfaction FROM FilteredRegions ORDER BY AvgSatisfaction DESC LIMIT 3;",The query creates a common table expression (CTE) to filter out regions with fewer than 100 reviews. It then selects the top 3 regions by average satisfaction score from the filtered results.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a list of hotels that have received awards in multiple categories, excluding those that have only won awards in a single category.","CREATE TABLE HotelAwards (AwardID INT PRIMARY KEY, HotelID INT, Category VARCHAR(50)); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50)); CREATE VIEW AwardedHotels AS SELECT HotelID, Category, COUNT(*) AS AwardCount FROM HotelAwards GROUP BY HotelID, Category;","WITH MultiCategoryAwards AS (SELECT HotelID FROM AwardedHotels GROUP BY HotelID HAVING COUNT(DISTINCT Category) > 1) SELECT HotelID, HotelName FROM Hotels WHERE HotelID IN (SELECT HotelID FROM MultiCategoryAwards);",The query first creates a common table expression (CTE) to identify hotels that have won awards in more than one category. It then selects the hotel IDs and names of these multi-category award winners.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Find the top 5 travel destinations based on the number of bookings, excluding destinations that have only been booked by a single customer.","CREATE TABLE TravelBookings (BookingID INT PRIMARY KEY, CustomerID INT, Destination VARCHAR(50)); CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50)); CREATE VIEW DestinationBookings AS SELECT Destination, COUNT(*) AS BookingCount, COUNT(DISTINCT CustomerID) AS UniqueCustomers FROM TravelBookings GROUP BY Destination;","WITH PopularDestinations AS (SELECT Destination, BookingCount FROM DestinationBookings WHERE UniqueCustomers > 1) SELECT Destination, BookingCount FROM PopularDestinations ORDER BY BookingCount DESC LIMIT 5;",The query first creates a common table expression (CTE) to filter out destinations that have only been booked by a single customer. It then selects the top 5 destinations by booking count from the filtered results.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","List the top 5 most frequently booked hotel room types, excluding room types that are only popular in one hotel.","CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, HotelID INT, RoomType VARCHAR(50)); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50)); CREATE VIEW RoomTypeBookings AS SELECT HotelID, RoomType, COUNT(*) AS BookingCount FROM HotelBookings GROUP BY HotelID, RoomType;","WITH PopularRoomTypes AS (SELECT RoomType, SUM(BookingCount) AS TotalBookings FROM RoomTypeBookings GROUP BY RoomType), ExcludedRoomTypes AS (SELECT RoomType FROM RoomTypeBookings GROUP BY RoomType HAVING COUNT(DISTINCT HotelID) = 1) SELECT RoomType, TotalBookings FROM PopularRoomTypes WHERE RoomType NOT IN (SELECT RoomType FROM ExcludedRoomTypes) ORDER BY TotalBookings DESC LIMIT 5;","The query first creates a common table expression (CTE) to sum the booking counts for each room type across all hotels. It then creates another CTE to identify room types that are only popular in one hotel. Finally, it selects the top 5 room types by total bookings, excluding those that are only popular in one hotel."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total revenue generated from top 3 most-watched movies in the last month and ensure the transaction is committed only if the total revenue exceeds $1,000,000.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseDate DATE, Genre VARCHAR(50)); CREATE TABLE WatchHistory (WatchID INT PRIMARY KEY, MovieID INT, UserID INT, WatchDate DATE); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, MovieID INT, RevenueAmount DECIMAL);","BEGIN TRANSACTION; WITH TopMovies AS (SELECT MovieID, COUNT(*) AS WatchCount FROM WatchHistory WHERE WatchDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY MovieID ORDER BY WatchCount DESC LIMIT 3), TotalRevenue AS (SELECT SUM(R.RevenueAmount) AS TotalRevenue FROM Revenue R JOIN TopMovies T ON R.MovieID = T.MovieID) SELECT * FROM TotalRevenue; IF (SELECT TotalRevenue FROM TotalRevenue) > 1000000 COMMIT; ELSE ROLLBACK;","The query begins a transaction and uses a common table expression (CTE) to find the top 3 most-watched movies in the last month. It then calculates the total revenue generated from these movies. If the total revenue exceeds $1,000,000, the transaction is committed; otherwise, it is rolled back."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 content creators based on the number of videos uploaded in the last year and ensure the transaction is committed only if all creators have uploaded more than 50 videos each.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, Name VARCHAR(100), JoinDate DATE); CREATE TABLE Videos (VideoID INT PRIMARY KEY, CreatorID INT, UploadDate DATE, Title VARCHAR(100));","BEGIN TRANSACTION; WITH TopCreators AS (SELECT CreatorID, COUNT(*) AS VideoCount FROM Videos WHERE UploadDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY CreatorID HAVING COUNT(*) > 50 ORDER BY VideoCount DESC LIMIT 5) SELECT * FROM TopCreators; IF (SELECT COUNT(*) FROM TopCreators) = 5 COMMIT; ELSE ROLLBACK;","The query starts a transaction and uses a common table expression (CTE) to identify the top 5 content creators based on the number of videos uploaded in the last year. It ensures that each of these creators has uploaded more than 50 videos. If all conditions are met, the transaction is committed; otherwise, it is rolled back."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average engagement time for the top 10 most engaging TV shows in the last quarter and commit the transaction only if the average engagement time is above 30 minutes.,"CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE Engagement (EngagementID INT PRIMARY KEY, ShowID INT, UserID INT, EngagementTime INT, EngagementDate DATE);","BEGIN TRANSACTION; WITH TopEngagingShows AS (SELECT ShowID, AVG(EngagementTime) AS AvgEngagementTime FROM Engagement WHERE EngagementDate >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY ShowID ORDER BY AvgEngagementTime DESC LIMIT 10), AvgEngagement AS (SELECT AVG(AvgEngagementTime) AS OverallAvgEngagement FROM TopEngagingShows) SELECT * FROM AvgEngagement; IF (SELECT OverallAvgEngagement FROM AvgEngagement) > 30 COMMIT; ELSE ROLLBACK;","The query begins a transaction and uses a common table expression (CTE) to calculate the average engagement time for the top 10 most engaging TV shows in the last quarter. It then calculates the overall average engagement time for these shows. If the average engagement time is above 30 minutes, the transaction is committed; otherwise, it is rolled back."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the top 5 genres based on the number of new subscribers in the last year and commit the transaction only if each genre has more than 10,000 new subscribers.","CREATE TABLE Genres (GenreID INT PRIMARY KEY, GenreName VARCHAR(50)); CREATE TABLE Subscribers (SubscriberID INT PRIMARY KEY, GenreID INT, JoinDate DATE);","BEGIN TRANSACTION; WITH TopGenres AS (SELECT GenreID, COUNT(*) AS NewSubscribers FROM Subscribers WHERE JoinDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY GenreID HAVING COUNT(*) > 10000 ORDER BY NewSubscribers DESC LIMIT 5) SELECT * FROM TopGenres; IF (SELECT COUNT(*) FROM TopGenres) = 5 COMMIT; ELSE ROLLBACK;","The query starts a transaction and uses a common table expression (CTE) to determine the top 5 genres based on the number of new subscribers in the last year. It ensures that each genre has more than 10,000 new subscribers. If all conditions are met, the transaction is committed; otherwise, it is rolled back."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 3 most active users based on the number of comments made in the last month and commit the transaction only if each user has made more than 100 comments.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(100), JoinDate DATE); CREATE TABLE Comments (CommentID INT PRIMARY KEY, UserID INT, CommentDate DATE, Content TEXT);","BEGIN TRANSACTION; WITH ActiveUsers AS (SELECT UserID, COUNT(*) AS CommentCount FROM Comments WHERE CommentDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY UserID HAVING COUNT(*) > 100 ORDER BY CommentCount DESC LIMIT 3) SELECT * FROM ActiveUsers; IF (SELECT COUNT(*) FROM ActiveUsers) = 3 COMMIT; ELSE ROLLBACK;","The query begins a transaction and uses a common table expression (CTE) to find the top 3 most active users based on the number of comments made in the last month. It ensures that each user has made more than 100 comments. If all conditions are met, the transaction is committed; otherwise, it is rolled back."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 3 most frequently prescribed medications for patients over 60 years old, including the count of prescriptions for each medication.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationName VARCHAR(50), DatePrescribed DATE); INSERT INTO Patients (PatientID, Name, Age, Gender) VALUES (1, 'John Doe', 65, 'Male'), (2, 'Jane Smith', 70, 'Female'), (3, 'Alice Johnson', 55, 'Female'); INSERT INTO Prescriptions (PrescriptionID, PatientID, MedicationName, DatePrescribed) VALUES (1, 1, 'Aspirin', '2023-01-01'), (2, 1, 'Metformin', '2023-02-01'), (3, 2, 'Aspirin', '2023-01-15'), (4, 2, 'Lisinopril', '2023-03-01'), (5, 3, 'Metformin', '2023-01-20');","WITH MedicationCounts AS (SELECT MedicationName, COUNT(*) AS PrescriptionCount FROM Prescriptions WHERE PatientID IN (SELECT PatientID FROM Patients WHERE Age > 60) GROUP BY MedicationName), RankedMedications AS (SELECT MedicationName, PrescriptionCount, ROW_NUMBER() OVER (ORDER BY PrescriptionCount DESC) AS Rank FROM MedicationCounts) SELECT MedicationName, PrescriptionCount FROM RankedMedications WHERE Rank <= 3;",The query first creates a common table expression (CTE) to count the number of prescriptions for each medication for patients over 60 years old. It then ranks these medications based on the count using the ROW_NUMBER function and selects the top 3 most frequently prescribed medications.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","List the top 5 patients with the highest number of hospital visits in the past year, including their names and visit counts.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE HospitalVisits (VisitID INT PRIMARY KEY, PatientID INT, VisitDate DATE); INSERT INTO Patients (PatientID, Name, Age, Gender) VALUES (1, 'John Doe', 65, 'Male'), (2, 'Jane Smith', 70, 'Female'), (3, 'Alice Johnson', 55, 'Female'); INSERT INTO HospitalVisits (VisitID, PatientID, VisitDate) VALUES (1, 1, '2023-01-01'), (2, 1, '2023-02-01'), (3, 2, '2023-01-15'), (4, 2, '2023-03-01'), (5, 3, '2023-01-20');","WITH VisitCounts AS (SELECT PatientID, COUNT(*) AS VisitCount FROM HospitalVisits WHERE VisitDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY PatientID), RankedPatients AS (SELECT PatientID, VisitCount, ROW_NUMBER() OVER (ORDER BY VisitCount DESC) AS Rank FROM VisitCounts) SELECT P.Name, R.VisitCount FROM RankedPatients R JOIN Patients P ON R.PatientID = P.PatientID WHERE Rank <= 5;","The query first creates a common table expression (CTE) to count the number of hospital visits for each patient in the past year. It then ranks these patients based on the visit count using the ROW_NUMBER function and selects the top 5 patients with the highest number of visits, including their names and visit counts."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Identify the top 3 treatments with the best outcomes for diabetes patients, including the average outcome score for each treatment.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), Diagnosis VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentName VARCHAR(50), OutcomeScore DECIMAL); INSERT INTO Patients (PatientID, Name, Age, Gender, Diagnosis) VALUES (1, 'John Doe', 65, 'Male', 'Diabetes'), (2, 'Jane Smith', 70, 'Female', 'Diabetes'), (3, 'Alice Johnson', 55, 'Female', 'Hypertension'); INSERT INTO Treatments (TreatmentID, PatientID, TreatmentName, OutcomeScore) VALUES (1, 1, 'Insulin', 85.0), (2, 1, 'Metformin', 90.0), (3, 2, 'Insulin', 88.0), (4, 2, 'Lisinopril', 70.0), (5, 3, 'Metformin', 75.0);","WITH DiabetesTreatments AS (SELECT TreatmentName, AVG(OutcomeScore) AS AvgOutcomeScore FROM Treatments WHERE PatientID IN (SELECT PatientID FROM Patients WHERE Diagnosis = 'Diabetes') GROUP BY TreatmentName), RankedTreatments AS (SELECT TreatmentName, AvgOutcomeScore, ROW_NUMBER() OVER (ORDER BY AvgOutcomeScore DESC) AS Rank FROM DiabetesTreatments) SELECT TreatmentName, AvgOutcomeScore FROM RankedTreatments WHERE Rank <= 3;",The query first creates a common table expression (CTE) to calculate the average outcome score for each treatment for diabetes patients. It then ranks these treatments based on the average outcome score using the ROW_NUMBER function and selects the top 3 treatments with the best outcomes.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 most common side effects for a specific drug, including the count of occurrences for each side effect.","CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, DrugID INT, SideEffectName VARCHAR(50), OccurrenceCount INT); INSERT INTO Drugs (DrugID, DrugName) VALUES (1, 'Aspirin'), (2, 'Metformin'), (3, 'Lisinopril'); INSERT INTO SideEffects (SideEffectID, DrugID, SideEffectName, OccurrenceCount) VALUES (1, 1, 'Nausea', 50), (2, 1, 'Headache', 30), (3, 2, 'Nausea', 40), (4, 2, 'Diarrhea', 20), (5, 3, 'Cough', 25);","WITH DrugSideEffects AS (SELECT SideEffectName, OccurrenceCount FROM SideEffects WHERE DrugID = (SELECT DrugID FROM Drugs WHERE DrugName = 'Aspirin')), RankedSideEffects AS (SELECT SideEffectName, OccurrenceCount, ROW_NUMBER() OVER (ORDER BY OccurrenceCount DESC) AS Rank FROM DrugSideEffects) SELECT SideEffectName, OccurrenceCount FROM RankedSideEffects WHERE Rank <= 5;",The query first creates a common table expression (CTE) to select the side effects and their occurrence counts for a specific drug ('Aspirin'). It then ranks these side effects based on the occurrence count using the ROW_NUMBER function and selects the top 5 most common side effects.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","List the top 3 regions with the highest average patient satisfaction scores for a specific treatment, including the average satisfaction score for each region.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentName VARCHAR(50), SatisfactionScore DECIMAL); INSERT INTO Patients (PatientID, Name, Age, Gender, Region) VALUES (1, 'John Doe', 65, 'Male', 'North'), (2, 'Jane Smith', 70, 'Female', 'South'), (3, 'Alice Johnson', 55, 'Female', 'East'); INSERT INTO Treatments (TreatmentID, PatientID, TreatmentName, SatisfactionScore) VALUES (1, 1, 'Insulin', 85.0), (2, 1, 'Metformin', 90.0), (3, 2, 'Insulin', 88.0), (4, 2, 'Lisinopril', 70.0), (5, 3, 'Metformin', 75.0);","WITH RegionSatisfaction AS (SELECT P.Region, AVG(T.SatisfactionScore) AS AvgSatisfactionScore FROM Treatments T JOIN Patients P ON T.PatientID = P.PatientID WHERE T.TreatmentName = 'Insulin' GROUP BY P.Region), RankedRegions AS (SELECT Region, AvgSatisfactionScore, ROW_NUMBER() OVER (ORDER BY AvgSatisfactionScore DESC) AS Rank FROM RegionSatisfaction) SELECT Region, AvgSatisfactionScore FROM RankedRegions WHERE Rank <= 3;",The query first creates a common table expression (CTE) to calculate the average patient satisfaction score for a specific treatment ('Insulin') in each region. It then ranks these regions based on the average satisfaction score using the ROW_NUMBER function and selects the top 3 regions with the highest average satisfaction scores.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 3 companies with the highest average R&D expenditure in the last 5 years.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100)); CREATE TABLE RnDExpenditure (ExpenditureID INT PRIMARY KEY, CompanyID INT, Year INT, Amount DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH AvgExpenditure AS (SELECT CompanyID, AVG(Amount) AS AvgAmount FROM RnDExpenditure WHERE Year >= YEAR(CURDATE()) - 5 GROUP BY CompanyID) SELECT c.CompanyName, ae.AvgAmount FROM AvgExpenditure ae JOIN Companies c ON ae.CompanyID = c.CompanyID ORDER BY ae.AvgAmount DESC LIMIT 3;",The query calculates the average R&D expenditure for each company over the last 5 years using a common table expression (CTE). It then joins this result with the Companies table to get the company names and selects the top 3 companies with the highest average R&D expenditure.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 most innovative products based on the number of patents filed in the last 3 years.,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(100)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, ProductID INT, FilingDate DATE, FOREIGN KEY (ProductID) REFERENCES Products(ProductID));","WITH RecentPatents AS (SELECT ProductID, COUNT(PatentID) AS PatentCount FROM Patents WHERE FilingDate >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) GROUP BY ProductID) SELECT p.ProductName, rp.PatentCount FROM RecentPatents rp JOIN Products p ON rp.ProductID = p.ProductID ORDER BY rp.PatentCount DESC LIMIT 5;",The query counts the number of patents filed for each product in the last 3 years using a common table expression (CTE). It then joins this result with the Products table to get the product names and selects the top 5 products with the highest number of patents filed.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 regions with the highest average adoption rate of renewable energy technologies in the past decade.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE RenewableAdoption (AdoptionID INT PRIMARY KEY, RegionID INT, Year INT, AdoptionRate DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH AvgAdoption AS (SELECT RegionID, AVG(AdoptionRate) AS AvgRate FROM RenewableAdoption WHERE Year >= YEAR(CURDATE()) - 10 GROUP BY RegionID) SELECT r.RegionName, aa.AvgRate FROM AvgAdoption aa JOIN Regions r ON aa.RegionID = r.RegionID ORDER BY aa.AvgRate DESC LIMIT 5;",The query calculates the average adoption rate of renewable energy technologies for each region over the past decade using a common table expression (CTE). It then joins this result with the Regions table to get the region names and selects the top 5 regions with the highest average adoption rate.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 industries with the highest average investment in AI technologies over the last 7 years.,"CREATE TABLE Industries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(100)); CREATE TABLE AIInvestments (InvestmentID INT PRIMARY KEY, IndustryID INT, Year INT, Amount DECIMAL, FOREIGN KEY (IndustryID) REFERENCES Industries(IndustryID));","WITH AvgInvestment AS (SELECT IndustryID, AVG(Amount) AS AvgAmount FROM AIInvestments WHERE Year >= YEAR(CURDATE()) - 7 GROUP BY IndustryID) SELECT i.IndustryName, ai.AvgAmount FROM AvgInvestment ai JOIN Industries i ON ai.IndustryID = i.IndustryID ORDER BY ai.AvgAmount DESC LIMIT 5;",The query calculates the average investment in AI technologies for each industry over the last 7 years using a common table expression (CTE). It then joins this result with the Industries table to get the industry names and selects the top 5 industries with the highest average investment.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 companies with the highest average annual revenue growth in the last 5 years.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100)); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, CompanyID INT, Year INT, RevenueAmount DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH AvgGrowth AS (SELECT CompanyID, AVG((RevenueAmount - LAG(RevenueAmount) OVER (PARTITION BY CompanyID ORDER BY Year)) / LAG(RevenueAmount) OVER (PARTITION BY CompanyID ORDER BY Year)) AS AvgGrowthRate FROM Revenue WHERE Year >= YEAR(CURDATE()) - 5 GROUP BY CompanyID) SELECT c.CompanyName, ag.AvgGrowthRate FROM AvgGrowth ag JOIN Companies c ON ag.CompanyID = c.CompanyID ORDER BY ag.AvgGrowthRate DESC LIMIT 5;",The query calculates the average annual revenue growth rate for each company over the last 5 years using a common table expression (CTE) and window functions. It then joins this result with the Companies table to get the company names and selects the top 5 companies with the highest average annual revenue growth rate.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the sales data to reflect a 10% increase in sales for electric vehicles in the European market and then display the updated sales figures.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT, VehicleType VARCHAR(50)); INSERT INTO VehicleSales (SaleID, ModelName, Region, Sales, VehicleType) VALUES (1, 'Model S', 'Europe', 500, 'Electric'), (2, 'Model 3', 'North America', 700, 'Electric'), (3, 'Leaf', 'Asia', 300, 'Electric'), (4, 'Bolt', 'Europe', 400, 'Electric'), (5, 'Prius', 'Europe', 600, 'Hybrid');",UPDATE VehicleSales SET Sales = Sales * 1.10 WHERE VehicleType = 'Electric' AND Region = 'Europe'; SELECT * FROM VehicleSales;,The query first updates the sales figures by increasing the sales by 10% for electric vehicles in the European market. It then selects and displays all the updated sales records.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert new records for hybrid vehicles sold in the Asian market and then display the total sales for each vehicle type in each region.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT, VehicleType VARCHAR(50)); INSERT INTO VehicleSales (SaleID, ModelName, Region, Sales, VehicleType) VALUES (1, 'Model S', 'Europe', 500, 'Electric'), (2, 'Model 3', 'North America', 700, 'Electric'), (3, 'Leaf', 'Asia', 300, 'Electric'), (4, 'Bolt', 'Europe', 400, 'Electric'), (5, 'Prius', 'Europe', 600, 'Hybrid');","INSERT INTO VehicleSales (SaleID, ModelName, Region, Sales, VehicleType) VALUES (6, 'Prius', 'Asia', 200, 'Hybrid'), (7, 'Insight', 'Asia', 150, 'Hybrid'); SELECT Region, VehicleType, SUM(Sales) AS TotalSales FROM VehicleSales GROUP BY Region, VehicleType;","The query inserts new records for hybrid vehicles sold in the Asian market. It then groups the sales data by region and vehicle type, calculating the total sales for each combination."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Delete records of vehicles that have sales less than 300 units and then display the remaining records.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT, VehicleType VARCHAR(50)); INSERT INTO VehicleSales (SaleID, ModelName, Region, Sales, VehicleType) VALUES (1, 'Model S', 'Europe', 500, 'Electric'), (2, 'Model 3', 'North America', 700, 'Electric'), (3, 'Leaf', 'Asia', 300, 'Electric'), (4, 'Bolt', 'Europe', 400, 'Electric'), (5, 'Prius', 'Europe', 600, 'Hybrid');",DELETE FROM VehicleSales WHERE Sales < 300; SELECT * FROM VehicleSales;,The query deletes records of vehicles that have sales less than 300 units. It then selects and displays the remaining records in the VehicleSales table.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the technology details for autonomous vehicles and then display the updated technology information.,"CREATE TABLE VehicleTechnology (TechID INT PRIMARY KEY, ModelName VARCHAR(50), Technology VARCHAR(50), Details VARCHAR(255)); INSERT INTO VehicleTechnology (TechID, ModelName, Technology, Details) VALUES (1, 'Model S', 'Autonomous', 'Level 4'), (2, 'Model 3', 'Autonomous', 'Level 3'), (3, 'Leaf', 'Electric', 'Battery 40 kWh'), (4, 'Bolt', 'Electric', 'Battery 60 kWh'), (5, 'Prius', 'Hybrid', 'Battery 1.3 kWh');",UPDATE VehicleTechnology SET Details = 'Level 5' WHERE Technology = 'Autonomous'; SELECT * FROM VehicleTechnology;,The query updates the technology details to 'Level 5' for all autonomous vehicles. It then selects and displays all the updated technology records.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert new records for sustainable transportation initiatives in North America and then display the total number of initiatives by region.,"CREATE TABLE SustainableInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(50), Region VARCHAR(50), Description VARCHAR(255)); INSERT INTO SustainableInitiatives (InitiativeID, InitiativeName, Region, Description) VALUES (1, 'EV Charging Stations', 'Europe', 'Installation of 1000 EV charging stations'), (2, 'Carpooling Programs', 'Asia', 'Launch of new carpooling programs'), (3, 'Bike Sharing', 'North America', 'Expansion of bike-sharing services'), (4, 'Public Transport', 'Europe', 'Upgrade of public transport systems'), (5, 'Green Zones', 'Asia', 'Creation of low-emission zones');","INSERT INTO SustainableInitiatives (InitiativeID, InitiativeName, Region, Description) VALUES (6, 'EV Incentives', 'North America', 'Tax incentives for EV purchases'), (7, 'Solar Parking', 'North America', 'Solar panels in parking lots'); SELECT Region, COUNT(*) AS TotalInitiatives FROM SustainableInitiatives GROUP BY Region;",The query inserts new records for sustainable transportation initiatives in North America. It then groups the initiatives by region and counts the total number of initiatives in each region.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average points scored per game by each player in different seasons and then display the top 3 players with the highest average points per game in each season.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, Season VARCHAR(20)); CREATE TABLE PlayerStats (PlayerID INT, GameID INT, Points INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (GameID) REFERENCES Games(GameID));","WITH AvgPoints AS (SELECT P.PlayerName, G.Season, AVG(PS.Points) AS AvgPointsPerGame FROM PlayerStats PS JOIN Players P ON PS.PlayerID = P.PlayerID JOIN Games G ON PS.GameID = G.GameID GROUP BY P.PlayerName, G.Season), RankedPlayers AS (SELECT PlayerName, Season, AvgPointsPerGame, DENSE_RANK() OVER (PARTITION BY Season ORDER BY AvgPointsPerGame DESC) AS Rank FROM AvgPoints) SELECT PlayerName, Season, AvgPointsPerGame FROM RankedPlayers WHERE Rank <= 3;","The query first calculates the average points per game for each player in each season using a common table expression (CTE). It then ranks these players within each season based on their average points per game in descending order. Finally, it selects the top 3 players with the highest average points per game in each season."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard that shows the total revenue generated from ticket sales for each sports event and then display the top 5 events with the highest revenue.,"CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, EventID INT, TicketPrice DECIMAL, TicketsSold INT, FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH TotalRevenue AS (SELECT E.EventName, SUM(TS.TicketPrice * TS.TicketsSold) AS Revenue FROM TicketSales TS JOIN Events E ON TS.EventID = E.EventID GROUP BY E.EventName), RankedEvents AS (SELECT EventName, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM TotalRevenue) SELECT EventName, Revenue FROM RankedEvents WHERE Rank <= 5;",The query calculates the total revenue generated from ticket sales for each event by multiplying the ticket price by the number of tickets sold and summing these values for each event. It then ranks the events based on their total revenue in descending order and selects the top 5 events with the highest revenue.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the fan engagement by calculating the average number of social media interactions per post for each team and then display the top 3 teams with the highest average interactions.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE SocialMediaPosts (PostID INT PRIMARY KEY, TeamID INT, PostDate DATE, Interactions INT, FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","WITH AvgInteractions AS (SELECT T.TeamName, AVG(SMP.Interactions) AS AvgInteractionsPerPost FROM SocialMediaPosts SMP JOIN Teams T ON SMP.TeamID = T.TeamID GROUP BY T.TeamName), RankedTeams AS (SELECT TeamName, AvgInteractionsPerPost, DENSE_RANK() OVER (ORDER BY AvgInteractionsPerPost DESC) AS Rank FROM AvgInteractions) SELECT TeamName, AvgInteractionsPerPost FROM RankedTeams WHERE Rank <= 3;",The query calculates the average number of social media interactions per post for each team using a common table expression (CTE). It then ranks the teams based on their average interactions per post in descending order and selects the top 3 teams with the highest average interactions.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total sponsorship revenue for each sports league and then display the top 3 leagues with the highest revenue.,"CREATE TABLE Leagues (LeagueID INT PRIMARY KEY, LeagueName VARCHAR(50)); CREATE TABLE Sponsorships (SponsorshipID INT PRIMARY KEY, LeagueID INT, SponsorName VARCHAR(50), Revenue DECIMAL, FOREIGN KEY (LeagueID) REFERENCES Leagues(LeagueID));","WITH TotalSponsorshipRevenue AS (SELECT L.LeagueName, SUM(S.Revenue) AS TotalRevenue FROM Sponsorships S JOIN Leagues L ON S.LeagueID = L.LeagueID GROUP BY L.LeagueName), RankedLeagues AS (SELECT LeagueName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM TotalSponsorshipRevenue) SELECT LeagueName, TotalRevenue FROM RankedLeagues WHERE Rank <= 3;",The query calculates the total sponsorship revenue for each league by summing the revenue from all sponsorships for each league. It then ranks the leagues based on their total revenue in descending order and selects the top 3 leagues with the highest revenue.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a report that shows the average attendance per game for each stadium and then display the top 5 stadiums with the highest average attendance.,"CREATE TABLE Stadiums (StadiumID INT PRIMARY KEY, StadiumName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, StadiumID INT, Attendance INT, FOREIGN KEY (StadiumID) REFERENCES Stadiums(StadiumID));","WITH AvgAttendance AS (SELECT S.StadiumName, AVG(G.Attendance) AS AvgAttendancePerGame FROM Games G JOIN Stadiums S ON G.StadiumID = S.StadiumID GROUP BY S.StadiumName), RankedStadiums AS (SELECT StadiumName, AvgAttendancePerGame, DENSE_RANK() OVER (ORDER BY AvgAttendancePerGame DESC) AS Rank FROM AvgAttendance) SELECT StadiumName, AvgAttendancePerGame FROM RankedStadiums WHERE Rank <= 5;",The query calculates the average attendance per game for each stadium using a common table expression (CTE). It then ranks the stadiums based on their average attendance per game in descending order and selects the top 5 stadiums with the highest average attendance.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total sales and average price of electric vehicles by region, and then display the regions with the highest total sales.","CREATE TABLE ElectricVehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SalePrice DECIMAL, SaleDate DATE); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE Models (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50));","WITH SalesByRegion AS (SELECT Region, SUM(SalePrice) AS TotalSales, AVG(SalePrice) AS AvgPrice FROM ElectricVehicleSales GROUP BY Region) SELECT Region, TotalSales, AvgPrice FROM SalesByRegion ORDER BY TotalSales DESC;",The query creates a common table expression (CTE) to calculate the total sales and average price of electric vehicles by region. It then selects and orders the regions by total sales in descending order.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of vehicles sold by each manufacturer and the average sale price, and then display the top 3 manufacturers by number of vehicles sold.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SalePrice DECIMAL, SaleDate DATE); CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50)); CREATE TABLE Models (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), ManufacturerID INT);","WITH SalesByManufacturer AS (SELECT M.ManufacturerName, COUNT(VS.SaleID) AS VehiclesSold, AVG(VS.SalePrice) AS AvgSalePrice FROM VehicleSales VS INNER JOIN Models MD ON VS.ModelID = MD.ModelID INNER JOIN Manufacturers M ON MD.ManufacturerID = M.ManufacturerID GROUP BY M.ManufacturerName) SELECT ManufacturerName, VehiclesSold, AvgSalePrice FROM SalesByManufacturer ORDER BY VehiclesSold DESC LIMIT 3;",The query creates a common table expression (CTE) to calculate the number of vehicles sold and the average sale price by manufacturer. It then selects the top 3 manufacturers by the number of vehicles sold.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the details of hybrid vehicles and their fuel efficiency, and then display the top 5 most fuel-efficient hybrid vehicles.","CREATE TABLE HybridVehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), FuelEfficiency DECIMAL); CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50));","WITH RankedHybrids AS (SELECT ModelName, FuelEfficiency, DENSE_RANK() OVER (ORDER BY FuelEfficiency DESC) AS Rank FROM HybridVehicles) SELECT ModelName, FuelEfficiency FROM RankedHybrids WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank hybrid vehicles based on their fuel efficiency in descending order. It then selects the top 5 most fuel-efficient hybrid vehicles using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the sales data of autonomous vehicles and their safety ratings, and then display the top 5 safest autonomous vehicles by sales.","CREATE TABLE AutonomousVehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SalePrice DECIMAL, SaleDate DATE); CREATE TABLE SafetyRatings (RatingID INT PRIMARY KEY, ModelID INT, SafetyRating DECIMAL); CREATE TABLE Models (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50));","WITH SalesAndRatings AS (SELECT M.ModelName, SUM(AVS.SalePrice) AS TotalSales, SR.SafetyRating FROM AutonomousVehicleSales AVS INNER JOIN SafetyRatings SR ON AVS.ModelID = SR.ModelID INNER JOIN Models M ON AVS.ModelID = M.ModelID GROUP BY M.ModelName, SR.SafetyRating) SELECT ModelName, TotalSales, SafetyRating FROM SalesAndRatings ORDER BY SafetyRating DESC, TotalSales DESC LIMIT 5;","The query creates a common table expression (CTE) to calculate the total sales and safety ratings of autonomous vehicles. It then selects the top 5 safest autonomous vehicles by sales, ordering by safety rating and total sales in descending order."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the global market share of different automotive manufacturers and their revenue, and then display the top 5 manufacturers by market share.","CREATE TABLE GlobalMarketShare (ManufacturerID INT PRIMARY KEY, MarketShare DECIMAL, Revenue DECIMAL); CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50));","WITH MarketShareRank AS (SELECT M.ManufacturerName, GMS.MarketShare, GMS.Revenue, DENSE_RANK() OVER (ORDER BY GMS.MarketShare DESC) AS Rank FROM GlobalMarketShare GMS INNER JOIN Manufacturers M ON GMS.ManufacturerID = M.ManufacturerID) SELECT ManufacturerName, MarketShare, Revenue FROM MarketShareRank WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank manufacturers based on their global market share in descending order. It then selects the top 5 manufacturers by market share using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the average crop yield for different regions and then display the regions with the highest average yield.,"CREATE TABLE CropYields (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropType VARCHAR(50), AvgYield DECIMAL); INSERT INTO CropYields (RegionID, RegionName, CropType, AvgYield) VALUES (1, 'North America', 'Wheat', 3.5), (2, 'Europe', 'Barley', 2.8), (3, 'Asia', 'Rice', 4.2), (4, 'Africa', 'Maize', 2.1), (5, 'South America', 'Soybean', 3.0);","WITH RankedRegions AS (SELECT RegionName, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM CropYields) SELECT RegionName, AvgYield FROM RankedRegions WHERE Rank = 1;",The query creates a common table expression (CTE) to rank regions based on their average crop yield in descending order. It then selects the regions with the highest average yield using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores information about farming practices and then display the practices that are common across all regions.,"CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), Region VARCHAR(50)); INSERT INTO FarmingPractices (PracticeID, PracticeName, Region) VALUES (1, 'Crop Rotation', 'North America'), (2, 'No-Till Farming', 'Europe'), (3, 'Agroforestry', 'Asia'), (4, 'Organic Farming', 'Africa'), (5, 'Precision Agriculture', 'South America');",SELECT PracticeName FROM FarmingPractices INTERSECT SELECT PracticeName FROM FarmingPractices WHERE Region = 'North America' UNION SELECT PracticeName FROM FarmingPractices WHERE Region = 'Europe' UNION SELECT PracticeName FROM FarmingPractices WHERE Region = 'Asia' UNION SELECT PracticeName FROM FarmingPractices WHERE Region = 'Africa' UNION SELECT PracticeName FROM FarmingPractices WHERE Region = 'South America';,The query uses INTERSECT and UNION set operations to find farming practices that are common across all regions.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores data on agricultural supply chains and then display the supply chains that are unique to a specific region.,"CREATE TABLE SupplyChains (ChainID INT PRIMARY KEY, ChainName VARCHAR(50), Region VARCHAR(50)); INSERT INTO SupplyChains (ChainID, ChainName, Region) VALUES (1, 'Grain Supply', 'North America'), (2, 'Fruit Supply', 'Europe'), (3, 'Vegetable Supply', 'Asia'), (4, 'Dairy Supply', 'Africa'), (5, 'Meat Supply', 'South America');",SELECT ChainName FROM SupplyChains EXCEPT SELECT ChainName FROM SupplyChains WHERE Region <> 'North America' UNION SELECT ChainName FROM SupplyChains WHERE Region <> 'Europe' UNION SELECT ChainName FROM SupplyChains WHERE Region <> 'Asia' UNION SELECT ChainName FROM SupplyChains WHERE Region <> 'Africa' UNION SELECT ChainName FROM SupplyChains WHERE Region <> 'South America';,The query uses the EXCEPT set operation to find supply chains that are unique to each specific region.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores data on global food security initiatives and then display the initiatives that are implemented in at least two regions.,"CREATE TABLE FoodSecurityInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(50), Region VARCHAR(50)); INSERT INTO FoodSecurityInitiatives (InitiativeID, InitiativeName, Region) VALUES (1, 'Zero Hunger', 'North America'), (2, 'Zero Hunger', 'Europe'), (3, 'Food for All', 'Asia'), (4, 'Food for All', 'Africa'), (5, 'Sustainable Agriculture', 'South America');",SELECT InitiativeName FROM FoodSecurityInitiatives GROUP BY InitiativeName HAVING COUNT(DISTINCT Region) >= 2;,The query groups the initiatives by name and uses the HAVING clause to filter initiatives that are implemented in at least two regions.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores data on crop yields and farming practices and then display the regions that have both high crop yields and use sustainable farming practices.,"CREATE TABLE CropYields (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropType VARCHAR(50), AvgYield DECIMAL); INSERT INTO CropYields (RegionID, RegionName, CropType, AvgYield) VALUES (1, 'North America', 'Wheat', 3.5), (2, 'Europe', 'Barley', 2.8), (3, 'Asia', 'Rice', 4.2), (4, 'Africa', 'Maize', 2.1), (5, 'South America', 'Soybean', 3.0); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), Region VARCHAR(50)); INSERT INTO FarmingPractices (PracticeID, PracticeName, Region) VALUES (1, 'Sustainable Farming', 'North America'), (2, 'Sustainable Farming', 'Europe'), (3, 'Agroforestry', 'Asia'), (4, 'Organic Farming', 'Africa'), (5, 'Precision Agriculture', 'South America');",SELECT RegionName FROM CropYields WHERE AvgYield > 3.0 INTERSECT SELECT Region FROM FarmingPractices WHERE PracticeName = 'Sustainable Farming';,The query uses the INTERSECT set operation to find regions that have both high crop yields (greater than 3.0) and use sustainable farming practices.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total government spending by category for each year and then display the top 3 categories with the highest spending for the most recent year.,"CREATE TABLE GovernmentSpending (Year INT, Category VARCHAR(50), Amount DECIMAL); INSERT INTO GovernmentSpending (Year, Category, Amount) VALUES (2020, 'Healthcare', 500000), (2020, 'Education', 300000), (2020, 'Defense', 700000), (2021, 'Healthcare', 550000), (2021, 'Education', 320000), (2021, 'Defense', 750000);","WITH TotalSpending AS (SELECT Year, Category, SUM(Amount) AS TotalAmount FROM GovernmentSpending GROUP BY Year, Category), RecentYearSpending AS (SELECT * FROM TotalSpending WHERE Year = (SELECT MAX(Year) FROM GovernmentSpending)) SELECT Category, TotalAmount FROM RecentYearSpending ORDER BY TotalAmount DESC LIMIT 3;",The query first calculates the total spending by category for each year. It then filters the results to get the spending for the most recent year and finally selects the top 3 categories with the highest spending for that year.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard that shows the number of bills passed by each legislative body per year and then identify the legislative body with the highest number of bills passed in the last 5 years.,"CREATE TABLE LegislativeBills (Year INT, LegislativeBody VARCHAR(50), BillsPassed INT); INSERT INTO LegislativeBills (Year, LegislativeBody, BillsPassed) VALUES (2017, 'Senate', 120), (2017, 'House', 150), (2018, 'Senate', 130), (2018, 'House', 160), (2019, 'Senate', 140), (2019, 'House', 170), (2020, 'Senate', 150), (2020, 'House', 180), (2021, 'Senate', 160), (2021, 'House', 190);","WITH BillsPerYear AS (SELECT Year, LegislativeBody, SUM(BillsPassed) AS TotalBills FROM LegislativeBills GROUP BY Year, LegislativeBody), LastFiveYears AS (SELECT * FROM BillsPerYear WHERE Year >= (SELECT MAX(Year) - 5 FROM LegislativeBills)) SELECT LegislativeBody, SUM(TotalBills) AS TotalBillsPassed FROM LastFiveYears GROUP BY LegislativeBody ORDER BY TotalBillsPassed DESC LIMIT 1;",The query first calculates the total number of bills passed by each legislative body per year. It then filters the results to include only the last 5 years and finally identifies the legislative body with the highest number of bills passed during that period.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the demographic distribution of citizens who have participated in government surveys over the past decade and display the top 3 most represented age groups.,"CREATE TABLE CitizenDemographics (SurveyYear INT, AgeGroup VARCHAR(50), Participants INT); INSERT INTO CitizenDemographics (SurveyYear, AgeGroup, Participants) VALUES (2011, '18-25', 5000), (2011, '26-35', 7000), (2011, '36-45', 6000), (2012, '18-25', 5200), (2012, '26-35', 7100), (2012, '36-45', 6200), (2020, '18-25', 8000), (2020, '26-35', 9000), (2020, '36-45', 8500);","WITH AgeGroupParticipation AS (SELECT AgeGroup, SUM(Participants) AS TotalParticipants FROM CitizenDemographics WHERE SurveyYear >= (SELECT MAX(SurveyYear) - 10 FROM CitizenDemographics) GROUP BY AgeGroup) SELECT AgeGroup, TotalParticipants FROM AgeGroupParticipation ORDER BY TotalParticipants DESC LIMIT 3;",The query first calculates the total number of participants for each age group over the past decade. It then selects the top 3 most represented age groups based on the total number of participants.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the effectiveness of different governance policies by comparing the average citizen satisfaction scores before and after policy implementation.,"CREATE TABLE GovernancePolicies (PolicyID INT, PolicyName VARCHAR(50), ImplementationYear INT); CREATE TABLE CitizenSatisfaction (Year INT, PolicyID INT, SatisfactionScore DECIMAL); INSERT INTO GovernancePolicies (PolicyID, PolicyName, ImplementationYear) VALUES (1, 'Policy A', 2018), (2, 'Policy B', 2019); INSERT INTO CitizenSatisfaction (Year, PolicyID, SatisfactionScore) VALUES (2017, 1, 6.5), (2018, 1, 7.0), (2019, 1, 7.5), (2018, 2, 6.0), (2019, 2, 6.5), (2020, 2, 7.0);","WITH PrePostPolicy AS (SELECT p.PolicyName, AVG(CASE WHEN s.Year < p.ImplementationYear THEN s.SatisfactionScore ELSE NULL END) AS PreImplementation, AVG(CASE WHEN s.Year >= p.ImplementationYear THEN s.SatisfactionScore ELSE NULL END) AS PostImplementation FROM GovernancePolicies p JOIN CitizenSatisfaction s ON p.PolicyID = s.PolicyID GROUP BY p.PolicyName) SELECT PolicyName, PreImplementation, PostImplementation FROM PrePostPolicy;",The query calculates the average citizen satisfaction scores before and after the implementation of each policy. It uses a common table expression (CTE) to join the policies with satisfaction scores and then computes the averages based on the implementation year.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Create a summary of public policy initiatives and their impact on employment rates, showing the top 3 initiatives with the highest positive impact.","CREATE TABLE PolicyInitiatives (InitiativeID INT, InitiativeName VARCHAR(50), StartYear INT); CREATE TABLE EmploymentRates (Year INT, InitiativeID INT, EmploymentRate DECIMAL); INSERT INTO PolicyInitiatives (InitiativeID, InitiativeName, StartYear) VALUES (1, 'Initiative A', 2015), (2, 'Initiative B', 2016); INSERT INTO EmploymentRates (Year, InitiativeID, EmploymentRate) VALUES (2014, 1, 5.0), (2015, 1, 5.5), (2016, 1, 6.0), (2015, 2, 4.5), (2016, 2, 5.0), (2017, 2, 5.5);","WITH ImpactAnalysis AS (SELECT p.InitiativeName, AVG(CASE WHEN e.Year < p.StartYear THEN e.EmploymentRate ELSE NULL END) AS PreStart, AVG(CASE WHEN e.Year >= p.StartYear THEN e.EmploymentRate ELSE NULL END) AS PostStart FROM PolicyInitiatives p JOIN EmploymentRates e ON p.InitiativeID = e.InitiativeID GROUP BY p.InitiativeName), ImpactScore AS (SELECT InitiativeName, (PostStart - PreStart) AS Impact FROM ImpactAnalysis) SELECT InitiativeName, Impact FROM ImpactScore ORDER BY Impact DESC LIMIT 3;",The query calculates the average employment rates before and after the start of each policy initiative. It then computes the impact score by subtracting the pre-start average from the post-start average and selects the top 3 initiatives with the highest positive impact.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the hotels that have bookings from both domestic and international customers within the last year, and list their names and locations.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerType VARCHAR(50), BookingDate DATE, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","BEGIN; WITH DomesticBookings AS (SELECT HotelID FROM Bookings WHERE CustomerType = 'Domestic' AND BookingDate >= DATEADD(YEAR, -1, GETDATE())), InternationalBookings AS (SELECT HotelID FROM Bookings WHERE CustomerType = 'International' AND BookingDate >= DATEADD(YEAR, -1, GETDATE())) SELECT H.HotelName, H.Location FROM Hotels H WHERE H.HotelID IN (SELECT HotelID FROM DomesticBookings INTERSECT SELECT HotelID FROM InternationalBookings); COMMIT;",The query first creates two common table expressions (CTEs) to find hotels with domestic and international bookings in the last year. It then uses the INTERSECT set operation to find hotels that appear in both CTEs and selects their names and locations from the Hotels table.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 destinations with the highest number of bookings canceled in the last month, and display their names and the number of cancellations.","CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, DestinationID INT, BookingStatus VARCHAR(50), BookingDate DATE, FOREIGN KEY (DestinationID) REFERENCES Destinations(DestinationID));","BEGIN; WITH CanceledBookings AS (SELECT DestinationID, COUNT(*) AS CancellationCount FROM Bookings WHERE BookingStatus = 'Canceled' AND BookingDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY DestinationID) SELECT D.DestinationName, C.CancellationCount FROM Destinations D JOIN CanceledBookings C ON D.DestinationID = C.DestinationID ORDER BY C.CancellationCount DESC LIMIT 3; COMMIT;","The query creates a common table expression (CTE) to count the number of canceled bookings for each destination in the last month. It then joins this CTE with the Destinations table to get the destination names and orders the results by the number of cancellations in descending order, limiting the output to the top 3 destinations."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the list of customers who have stayed in all the hotels located in Paris at least once.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100)); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE Stays (StayID INT PRIMARY KEY, CustomerID INT, HotelID INT, StayDate DATE, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID), FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","BEGIN; WITH ParisHotels AS (SELECT HotelID FROM Hotels WHERE Location = 'Paris'), CustomerStays AS (SELECT CustomerID, HotelID FROM Stays WHERE HotelID IN (SELECT HotelID FROM ParisHotels)) SELECT CustomerID FROM Customers WHERE CustomerID NOT IN (SELECT CustomerID FROM ParisHotels EXCEPT SELECT CustomerID FROM CustomerStays); COMMIT;","The query first creates a common table expression (CTE) to find all hotels located in Paris. It then creates another CTE to find all stays by customers in these Paris hotels. Finally, it selects customers who have stayed in all Paris hotels by using the EXCEPT set operation to exclude those who haven't stayed in any of the Paris hotels."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the names of hotels that have never had a booking canceled.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, BookingStatus VARCHAR(50), FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));",BEGIN; SELECT HotelName FROM Hotels WHERE HotelID NOT IN (SELECT HotelID FROM Bookings WHERE BookingStatus = 'Canceled'); COMMIT;,The query selects the names of hotels from the Hotels table where the HotelID does not appear in the list of HotelIDs from the Bookings table with a 'Canceled' status.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the customers who have booked both luxury and budget hotels in the past year.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100)); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), HotelType VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, HotelID INT, BookingDate DATE, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID), FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","BEGIN; WITH LuxuryBookings AS (SELECT CustomerID FROM Bookings B JOIN Hotels H ON B.HotelID = H.HotelID WHERE H.HotelType = 'Luxury' AND B.BookingDate >= DATEADD(YEAR, -1, GETDATE())), BudgetBookings AS (SELECT CustomerID FROM Bookings B JOIN Hotels H ON B.HotelID = H.HotelID WHERE H.HotelType = 'Budget' AND B.BookingDate >= DATEADD(YEAR, -1, GETDATE())) SELECT CustomerID FROM LuxuryBookings INTERSECT SELECT CustomerID FROM BudgetBookings; COMMIT;","The query creates two common table expressions (CTEs) to find customers who have booked luxury and budget hotels in the past year. It then uses the INTERSECT set operation to find customers who appear in both CTEs, indicating they have booked both types of hotels."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Show the total government spending per department for the year 2022.,"CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), FiscalYear INT, AmountSpent DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, FiscalYear, AmountSpent) VALUES (1, 'Health', 2022, 5000000), (2, 'Education', 2022, 3000000), (3, 'Defense', 2022, 7000000), (4, 'Infrastructure', 2022, 4000000), (5, 'Welfare', 2022, 2000000);","SELECT DepartmentName, SUM(AmountSpent) AS TotalSpent FROM GovernmentSpending WHERE FiscalYear = 2022 GROUP BY DepartmentName;",The query selects the total amount spent by each department for the fiscal year 2022 by summing the AmountSpent column and grouping the results by DepartmentName.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,List the number of legislative bills passed by each committee in the last 5 years.,"CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, CommitteeName VARCHAR(50), YearPassed INT); INSERT INTO LegislativeBills (BillID, CommitteeName, YearPassed) VALUES (1, 'Finance', 2018), (2, 'Health', 2019), (3, 'Education', 2020), (4, 'Defense', 2021), (5, 'Finance', 2022);","SELECT CommitteeName, COUNT(BillID) AS BillsPassed FROM LegislativeBills WHERE YearPassed >= 2018 GROUP BY CommitteeName;",The query counts the number of bills passed by each committee in the last 5 years by counting the BillID column and grouping the results by CommitteeName.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the average age of citizens in each city.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, City VARCHAR(50), Age INT); INSERT INTO CitizenDemographics (CitizenID, City, Age) VALUES (1, 'New York', 30), (2, 'Los Angeles', 40), (3, 'Chicago', 35), (4, 'Houston', 25), (5, 'Phoenix', 45);","SELECT City, AVG(Age) AS AverageAge FROM CitizenDemographics GROUP BY City;",The query calculates the average age of citizens in each city by averaging the Age column and grouping the results by City.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Get the total number of citizens in each age group.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, AgeGroup VARCHAR(50)); INSERT INTO CitizenDemographics (CitizenID, AgeGroup) VALUES (1, '18-25'), (2, '26-35'), (3, '36-45'), (4, '46-55'), (5, '56-65');","SELECT AgeGroup, COUNT(CitizenID) AS TotalCitizens FROM CitizenDemographics GROUP BY AgeGroup;",The query counts the total number of citizens in each age group by counting the CitizenID column and grouping the results by AgeGroup.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Show the maximum amount spent on a single project by each department.,"CREATE TABLE DepartmentProjects (ProjectID INT PRIMARY KEY, DepartmentName VARCHAR(50), AmountSpent DECIMAL); INSERT INTO DepartmentProjects (ProjectID, DepartmentName, AmountSpent) VALUES (1, 'Health', 1000000), (2, 'Education', 500000), (3, 'Defense', 2000000), (4, 'Infrastructure', 1500000), (5, 'Welfare', 300000);","SELECT DepartmentName, MAX(AmountSpent) AS MaxSpent FROM DepartmentProjects GROUP BY DepartmentName;",The query finds the maximum amount spent on a single project by each department by selecting the maximum value of the AmountSpent column and grouping the results by DepartmentName.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Identify the top 3 most popular sustainable fashion brands in Europe based on consumer purchases.,"CREATE TABLE ConsumerPurchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, Region VARCHAR(50), PurchaseDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, ConsumerName VARCHAR(50), Age INT, Gender VARCHAR(10));","WITH BrandPopularity AS (SELECT b.BrandName, COUNT(cp.PurchaseID) AS PurchaseCount FROM ConsumerPurchases cp JOIN Brands b ON cp.BrandID = b.BrandID WHERE b.IsSustainable = TRUE AND cp.Region = 'Europe' GROUP BY b.BrandName) SELECT BrandName, PurchaseCount FROM BrandPopularity ORDER BY PurchaseCount DESC LIMIT 3;",The query first creates a common table expression (CTE) named BrandPopularity that counts the number of purchases for each sustainable brand in Europe. It then selects the top 3 brands based on the purchase count.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the average age of consumers who purchase eco-friendly fashion items in North America.,"CREATE TABLE ConsumerPurchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, Region VARCHAR(50), PurchaseDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsEcoFriendly BOOLEAN); CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, ConsumerName VARCHAR(50), Age INT, Gender VARCHAR(10));",SELECT AVG(c.Age) AS AverageAge FROM ConsumerPurchases cp JOIN Brands b ON cp.BrandID = b.BrandID JOIN Consumers c ON cp.ConsumerID = c.ConsumerID WHERE b.IsEcoFriendly = TRUE AND cp.Region = 'North America';,"The query joins the ConsumerPurchases, Brands, and Consumers tables to find the average age of consumers who purchase eco-friendly fashion items in North America."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the top 5 fashion trends in Asia based on the number of mentions in social media posts.,"CREATE TABLE SocialMediaPosts (PostID INT PRIMARY KEY, TrendID INT, Region VARCHAR(50), PostDate DATE); CREATE TABLE Trends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50));","WITH TrendMentions AS (SELECT t.TrendName, COUNT(smp.PostID) AS MentionCount FROM SocialMediaPosts smp JOIN Trends t ON smp.TrendID = t.TrendID WHERE smp.Region = 'Asia' GROUP BY t.TrendName) SELECT TrendName, MentionCount FROM TrendMentions ORDER BY MentionCount DESC LIMIT 5;",The query creates a common table expression (CTE) named TrendMentions that counts the number of social media posts mentioning each trend in Asia. It then selects the top 5 trends based on the mention count.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Determine the gender distribution of consumers who prefer sustainable fashion in Europe.,"CREATE TABLE ConsumerPreferences (PreferenceID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PreferenceDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, ConsumerName VARCHAR(50), Age INT, Gender VARCHAR(10));","SELECT c.Gender, COUNT(cp.PreferenceID) AS PreferenceCount FROM ConsumerPreferences cp JOIN Brands b ON cp.BrandID = b.BrandID JOIN Consumers c ON cp.ConsumerID = c.ConsumerID WHERE b.IsSustainable = TRUE AND c.Region = 'Europe' GROUP BY c.Gender;","The query joins the ConsumerPreferences, Brands, and Consumers tables to count the number of consumers who prefer sustainable fashion in Europe, grouped by gender."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Analyze the correlation between consumer age and preference for sustainable fashion brands globally.,"CREATE TABLE ConsumerPreferences (PreferenceID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PreferenceDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, ConsumerName VARCHAR(50), Age INT, Gender VARCHAR(10));","SELECT c.Age, COUNT(cp.PreferenceID) AS PreferenceCount FROM ConsumerPreferences cp JOIN Brands b ON cp.BrandID = b.BrandID JOIN Consumers c ON cp.ConsumerID = c.ConsumerID WHERE b.IsSustainable = TRUE GROUP BY c.Age ORDER BY c.Age;","The query joins the ConsumerPreferences, Brands, and Consumers tables to count the number of consumers who prefer sustainable fashion brands globally, grouped by age, and orders the result by age."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the total number of startups in each industry that have received funding greater than $1 million.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(100), Industry VARCHAR(50), FundingAmount DECIMAL); INSERT INTO Startups (StartupID, StartupName, Industry, FundingAmount) VALUES (1, 'Tech Innovators', 'Technology', 1500000), (2, 'Green Future', 'Energy', 2000000), (3, 'Health First', 'Healthcare', 500000), (4, 'EduTech', 'Education', 1200000), (5, 'AgriTech', 'Agriculture', 800000);","SELECT Industry, COUNT(*) AS TotalStartups FROM Startups WHERE FundingAmount > 1000000 GROUP BY Industry;",The query counts the number of startups in each industry that have received funding greater than $1 million. It groups the results by industry and uses the COUNT function to get the total number of such startups.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Calculate the average market value of companies in each sector that have been in operation for more than 10 years.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50), MarketValue DECIMAL, YearsInOperation INT); INSERT INTO Companies (CompanyID, CompanyName, Sector, MarketValue, YearsInOperation) VALUES (1, 'Tech Giants', 'Technology', 500000000, 15), (2, 'Green Energy', 'Energy', 300000000, 12), (3, 'Health Solutions', 'Healthcare', 200000000, 8), (4, 'EduLeaders', 'Education', 150000000, 11), (5, 'AgriLeaders', 'Agriculture', 100000000, 20);","SELECT Sector, AVG(MarketValue) AS AvgMarketValue FROM Companies WHERE YearsInOperation > 10 GROUP BY Sector;",The query calculates the average market value of companies in each sector that have been in operation for more than 10 years. It groups the results by sector and uses the AVG function to compute the average market value.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",List the top 3 most innovative products based on the number of patents filed in the last year.,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(100), PatentsFiled INT, Year INT); INSERT INTO Products (ProductID, ProductName, PatentsFiled, Year) VALUES (1, 'Smartphone X', 50, 2022), (2, 'Eco Car', 30, 2022), (3, 'Health Tracker', 40, 2022), (4, 'AI Assistant', 60, 2022), (5, 'Solar Panel', 20, 2022);","WITH RankedProducts AS (SELECT ProductName, PatentsFiled, DENSE_RANK() OVER (ORDER BY PatentsFiled DESC) AS Rank FROM Products WHERE Year = 2022) SELECT ProductName, PatentsFiled FROM RankedProducts WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank products based on the number of patents filed in the last year. It then selects the top 3 most innovative products using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the total revenue generated by each technology type in the last quarter.,"CREATE TABLE Revenues (RevenueID INT PRIMARY KEY, TechnologyType VARCHAR(50), RevenueAmount DECIMAL, Quarter INT); INSERT INTO Revenues (RevenueID, TechnologyType, RevenueAmount, Quarter) VALUES (1, 'AI', 1000000, 4), (2, 'Blockchain', 800000, 4), (3, 'IoT', 600000, 4), (4, 'AI', 1200000, 4), (5, 'Blockchain', 900000, 4);","SELECT TechnologyType, SUM(RevenueAmount) AS TotalRevenue FROM Revenues WHERE Quarter = 4 GROUP BY TechnologyType;",The query calculates the total revenue generated by each technology type in the last quarter. It groups the results by technology type and uses the SUM function to compute the total revenue.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Identify the number of employees in each department who have completed advanced training.,"CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, EmployeeName VARCHAR(100), Department VARCHAR(50), TrainingLevel VARCHAR(50)); INSERT INTO Employees (EmployeeID, EmployeeName, Department, TrainingLevel) VALUES (1, 'John Doe', 'Engineering', 'Advanced'), (2, 'Jane Smith', 'Marketing', 'Basic'), (3, 'Alice Johnson', 'Engineering', 'Advanced'), (4, 'Bob Brown', 'Sales', 'Intermediate'), (5, 'Charlie Davis', 'Engineering', 'Basic');","SELECT Department, COUNT(*) AS NumEmployees FROM Employees WHERE TrainingLevel = 'Advanced' GROUP BY Department;",The query counts the number of employees in each department who have completed advanced training. It groups the results by department and uses the COUNT function to get the total number of such employees.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new record for a basketball player who scored 30 points in a recent game and then retrieve the top 5 players with the highest average points per game.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, PlayerID INT, PointsScored INT, GameDate DATE, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID));","INSERT INTO Games (GameID, PlayerID, PointsScored, GameDate) VALUES (101, 1, 30, '2023-10-01'); WITH PlayerAverages AS (SELECT PlayerID, AVG(PointsScored) AS AvgPoints FROM Games GROUP BY PlayerID) SELECT P.PlayerName, PA.AvgPoints FROM PlayerAverages PA JOIN Players P ON PA.PlayerID = P.PlayerID ORDER BY PA.AvgPoints DESC LIMIT 5;","The query first inserts a new record into the Games table for a player who scored 30 points. It then creates a common table expression (CTE) to calculate the average points per game for each player. Finally, it retrieves the top 5 players with the highest average points per game by joining the CTE with the Players table."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the salary of a soccer player and then display the top 5 highest-paid players in the league.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50), Salary DECIMAL);","UPDATE Players SET Salary = 1500000 WHERE PlayerID = 2; WITH SalaryRank AS (SELECT PlayerName, Salary, DENSE_RANK() OVER (ORDER BY Salary DESC) AS Rank FROM Players) SELECT PlayerName, Salary FROM SalaryRank WHERE Rank <= 5;","The query first updates the salary of a specific player in the Players table. It then creates a common table expression (CTE) to rank players based on their salary in descending order. Finally, it selects the top 5 highest-paid players using the DENSE_RANK function."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Delete records of a tennis player who has retired and then list the top 5 players with the most wins.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, PlayerID INT, Wins INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID));","DELETE FROM Players WHERE PlayerID = 3; DELETE FROM Matches WHERE PlayerID = 3; WITH WinRank AS (SELECT PlayerID, SUM(Wins) AS TotalWins FROM Matches GROUP BY PlayerID) SELECT P.PlayerName, WR.TotalWins FROM WinRank WR JOIN Players P ON WR.PlayerID = P.PlayerID ORDER BY WR.TotalWins DESC LIMIT 5;","The query first deletes records of a retired player from both the Players and Matches tables. It then creates a common table expression (CTE) to sum the total wins for each player. Finally, it retrieves the top 5 players with the most wins by joining the CTE with the Players table."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new sponsorship deal for a cricket team and then display the top 5 teams with the highest sponsorship revenue.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Sponsorships (SponsorshipID INT PRIMARY KEY, TeamID INT, Revenue DECIMAL, SponsorName VARCHAR(50), FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","INSERT INTO Sponsorships (SponsorshipID, TeamID, Revenue, SponsorName) VALUES (201, 1, 5000000, 'Nike'); WITH RevenueRank AS (SELECT TeamID, SUM(Revenue) AS TotalRevenue FROM Sponsorships GROUP BY TeamID) SELECT T.TeamName, RR.TotalRevenue FROM RevenueRank RR JOIN Teams T ON RR.TeamID = T.TeamID ORDER BY RR.TotalRevenue DESC LIMIT 5;","The query first inserts a new sponsorship deal into the Sponsorships table. It then creates a common table expression (CTE) to sum the total sponsorship revenue for each team. Finally, it retrieves the top 5 teams with the highest sponsorship revenue by joining the CTE with the Teams table."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the number of goals scored by a hockey player and then display the top 5 players with the most goals.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50)); CREATE TABLE Goals (GoalID INT PRIMARY KEY, PlayerID INT, GoalsScored INT, Season VARCHAR(50), FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID));","UPDATE Goals SET GoalsScored = 25 WHERE PlayerID = 4 AND Season = '2023'; WITH GoalRank AS (SELECT PlayerID, SUM(GoalsScored) AS TotalGoals FROM Goals GROUP BY PlayerID) SELECT P.PlayerName, GR.TotalGoals FROM GoalRank GR JOIN Players P ON GR.PlayerID = P.PlayerID ORDER BY GR.TotalGoals DESC LIMIT 5;","The query first updates the number of goals scored by a specific player in the Goals table. It then creates a common table expression (CTE) to sum the total goals for each player. Finally, it retrieves the top 5 players with the most goals by joining the CTE with the Players table."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of views for different movies across various platforms, and then display the top 3 most viewed movies.","CREATE TABLE MovieViews (MovieID INT PRIMARY KEY, MovieName VARCHAR(100), Platform VARCHAR(50), TotalViews INT); INSERT INTO MovieViews (MovieID, MovieName, Platform, TotalViews) VALUES (1, 'Inception', 'Netflix', 1500000), (2, 'The Matrix', 'Amazon Prime', 1200000), (3, 'Interstellar', 'Hulu', 1300000), (4, 'The Dark Knight', 'Netflix', 2000000), (5, 'Pulp Fiction', 'Amazon Prime', 1100000);","WITH RankedMovies AS (SELECT MovieName, TotalViews, DENSE_RANK() OVER (ORDER BY TotalViews DESC) AS Rank FROM MovieViews) SELECT MovieName, TotalViews FROM RankedMovies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank movies based on their total views in descending order. It then selects the top 3 most viewed movies using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average rating for different TV shows across various platforms, and then display the top 5 highest-rated shows.","CREATE TABLE TVShowRatings (ShowID INT PRIMARY KEY, ShowName VARCHAR(100), Platform VARCHAR(50), AvgRating DECIMAL); INSERT INTO TVShowRatings (ShowID, ShowName, Platform, AvgRating) VALUES (1, 'Breaking Bad', 'Netflix', 9.5), (2, 'Game of Thrones', 'HBO', 9.3), (3, 'Stranger Things', 'Netflix', 8.9), (4, 'The Crown', 'Netflix', 8.7), (5, 'Westworld', 'HBO', 8.5);","WITH RankedShows AS (SELECT ShowName, AvgRating, DENSE_RANK() OVER (ORDER BY AvgRating DESC) AS Rank FROM TVShowRatings) SELECT ShowName, AvgRating FROM RankedShows WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank TV shows based on their average rating in descending order. It then selects the top 5 highest-rated shows using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different music albums across various regions, and then display the top 3 highest-grossing albums.","CREATE TABLE AlbumRevenue (AlbumID INT PRIMARY KEY, AlbumName VARCHAR(100), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO AlbumRevenue (AlbumID, AlbumName, Region, TotalRevenue) VALUES (1, 'Thriller', 'North America', 50000000), (2, 'Back in Black', 'Europe', 45000000), (3, 'The Dark Side of the Moon', 'Asia', 40000000), (4, 'The Bodyguard', 'North America', 42000000), (5, 'Rumours', 'Europe', 39000000);","WITH RankedAlbums AS (SELECT AlbumName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM AlbumRevenue) SELECT AlbumName, TotalRevenue FROM RankedAlbums WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank music albums based on their total revenue in descending order. It then selects the top 3 highest-grossing albums using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of subscribers for different streaming services, and then display the top 3 services with the most subscribers.","CREATE TABLE StreamingSubscribers (ServiceID INT PRIMARY KEY, ServiceName VARCHAR(100), TotalSubscribers INT); INSERT INTO StreamingSubscribers (ServiceID, ServiceName, TotalSubscribers) VALUES (1, 'Netflix', 200000000), (2, 'Amazon Prime', 150000000), (3, 'Disney+', 100000000), (4, 'Hulu', 50000000), (5, 'HBO Max', 70000000);","WITH RankedServices AS (SELECT ServiceName, TotalSubscribers, DENSE_RANK() OVER (ORDER BY TotalSubscribers DESC) AS Rank FROM StreamingSubscribers) SELECT ServiceName, TotalSubscribers FROM RankedServices WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank streaming services based on their total number of subscribers in descending order. It then selects the top 3 services with the most subscribers using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of downloads for different podcasts across various platforms, and then display the top 5 most downloaded podcasts.","CREATE TABLE PodcastDownloads (PodcastID INT PRIMARY KEY, PodcastName VARCHAR(100), Platform VARCHAR(50), TotalDownloads INT); INSERT INTO PodcastDownloads (PodcastID, PodcastName, Platform, TotalDownloads) VALUES (1, 'The Daily', 'Spotify', 1000000), (2, 'Serial', 'Apple Podcasts', 1500000), (3, 'Joe Rogan Experience', 'Spotify', 2000000), (4, 'Stuff You Should Know', 'Google Podcasts', 800000), (5, 'TED Talks Daily', 'Apple Podcasts', 900000);","WITH RankedPodcasts AS (SELECT PodcastName, TotalDownloads, DENSE_RANK() OVER (ORDER BY TotalDownloads DESC) AS Rank FROM PodcastDownloads) SELECT PodcastName, TotalDownloads FROM RankedPodcasts WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank podcasts based on their total downloads in descending order. It then selects the top 5 most downloaded podcasts using the DENSE_RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Retrieve the top 3 most common treatments for patients aged over 60.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(50)); CREATE TABLE PatientTreatments (PatientID INT, TreatmentID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));","WITH AgeFiltered AS (SELECT pt.TreatmentID, COUNT(pt.TreatmentID) AS TreatmentCount FROM Patients p JOIN PatientTreatments pt ON p.PatientID = pt.PatientID WHERE p.Age > 60 GROUP BY pt.TreatmentID), RankedTreatments AS (SELECT TreatmentID, TreatmentCount, ROW_NUMBER() OVER (ORDER BY TreatmentCount DESC) AS Rank FROM AgeFiltered) SELECT t.TreatmentName, rt.TreatmentCount FROM RankedTreatments rt JOIN Treatments t ON rt.TreatmentID = t.TreatmentID WHERE rt.Rank <= 3;",The query first filters treatments for patients older than 60 and counts the occurrences of each treatment. It then ranks these treatments by their count in descending order and selects the top 3 most common treatments.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,List the top 5 patients with the highest number of hospital visits.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE HospitalVisits (VisitID INT PRIMARY KEY, PatientID INT, VisitDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","WITH VisitCounts AS (SELECT PatientID, COUNT(VisitID) AS VisitCount FROM HospitalVisits GROUP BY PatientID), RankedPatients AS (SELECT PatientID, VisitCount, RANK() OVER (ORDER BY VisitCount DESC) AS Rank FROM VisitCounts) SELECT p.Name, rp.VisitCount FROM RankedPatients rp JOIN Patients p ON rp.PatientID = p.PatientID WHERE rp.Rank <= 5;","The query counts the number of hospital visits for each patient, ranks them in descending order of visit count, and then selects the top 5 patients with the highest number of visits."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the average age of patients for each treatment type.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(50)); CREATE TABLE PatientTreatments (PatientID INT, TreatmentID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));","SELECT t.TreatmentName, AVG(p.Age) AS AverageAge FROM Patients p JOIN PatientTreatments pt ON p.PatientID = pt.PatientID JOIN Treatments t ON pt.TreatmentID = t.TreatmentID GROUP BY t.TreatmentName;","The query joins the Patients, PatientTreatments, and Treatments tables to calculate the average age of patients for each treatment type, grouping the results by treatment name."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Identify the top 3 drugs with the most reported side effects.,"CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, Description VARCHAR(100)); CREATE TABLE DrugSideEffects (DrugID INT, SideEffectID INT, FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID), FOREIGN KEY (SideEffectID) REFERENCES SideEffects(SideEffectID));","WITH SideEffectCounts AS (SELECT DrugID, COUNT(SideEffectID) AS SideEffectCount FROM DrugSideEffects GROUP BY DrugID), RankedDrugs AS (SELECT DrugID, SideEffectCount, RANK() OVER (ORDER BY SideEffectCount DESC) AS Rank FROM SideEffectCounts) SELECT d.DrugName, rd.SideEffectCount FROM RankedDrugs rd JOIN Drugs d ON rd.DrugID = d.DrugID WHERE rd.Rank <= 3;","The query counts the number of side effects reported for each drug, ranks them in descending order of side effect count, and then selects the top 3 drugs with the most reported side effects."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Get the most recent treatment for each patient.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(50)); CREATE TABLE PatientTreatments (PatientID INT, TreatmentID INT, TreatmentDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));","WITH RankedTreatments AS (SELECT PatientID, TreatmentID, TreatmentDate, ROW_NUMBER() OVER (PARTITION BY PatientID ORDER BY TreatmentDate DESC) AS Rank FROM PatientTreatments) SELECT p.Name, t.TreatmentName, rt.TreatmentDate FROM RankedTreatments rt JOIN Patients p ON rt.PatientID = p.PatientID JOIN Treatments t ON rt.TreatmentID = t.TreatmentID WHERE rt.Rank = 1;",The query ranks treatments for each patient by treatment date in descending order and selects the most recent treatment for each patient by filtering for rows with rank equal to 1.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the total government spending on healthcare and education for the last fiscal year, ensuring the transaction is committed only if both operations succeed.","CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, Department VARCHAR(50), Amount DECIMAL, FiscalYear INT); INSERT INTO GovernmentSpending (SpendingID, Department, Amount, FiscalYear) VALUES (1, 'Healthcare', 5000000, 2022), (2, 'Education', 3000000, 2022), (3, 'Defense', 7000000, 2022);","BEGIN TRANSACTION; SELECT SUM(Amount) AS TotalSpending FROM GovernmentSpending WHERE Department IN ('Healthcare', 'Education') AND FiscalYear = 2022; COMMIT;","The query begins a transaction, then selects the total spending on healthcare and education for the fiscal year 2022. If the selection is successful, the transaction is committed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List all legislative bills passed in the last year along with their sponsors, ensuring the transaction is rolled back if any error occurs.","CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), SponsorID INT, Status VARCHAR(50), YearPassed INT); CREATE TABLE Sponsors (SponsorID INT PRIMARY KEY, SponsorName VARCHAR(100)); INSERT INTO LegislativeBills (BillID, BillName, SponsorID, Status, YearPassed) VALUES (1, 'Healthcare Reform', 101, 'Passed', 2022), (2, 'Education Act', 102, 'Passed', 2022); INSERT INTO Sponsors (SponsorID, SponsorName) VALUES (101, 'John Doe'), (102, 'Jane Smith');","BEGIN TRANSACTION; SELECT BillName, SponsorName FROM LegislativeBills INNER JOIN Sponsors ON LegislativeBills.SponsorID = Sponsors.SponsorID WHERE Status = 'Passed' AND YearPassed = 2022; COMMIT;","The query begins a transaction, then selects the names of bills passed in 2022 along with their sponsors by performing an inner join between the LegislativeBills and Sponsors tables. If the selection is successful, the transaction is committed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average age of citizens in each region, ensuring the transaction is committed only if the calculation is successful.","CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Region VARCHAR(50)); INSERT INTO Citizens (CitizenID, Name, Age, Region) VALUES (1, 'Alice', 30, 'North'), (2, 'Bob', 45, 'South'), (3, 'Charlie', 35, 'East');","BEGIN TRANSACTION; SELECT Region, AVG(Age) AS AverageAge FROM Citizens GROUP BY Region; COMMIT;","The query begins a transaction, then calculates the average age of citizens in each region by grouping the data by the Region column. If the calculation is successful, the transaction is committed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the details of all public policies that were amended last year, ensuring the transaction is rolled back if any error occurs.","CREATE TABLE PublicPolicies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), AmendmentDate DATE); INSERT INTO PublicPolicies (PolicyID, PolicyName, AmendmentDate) VALUES (1, 'Tax Reform', '2022-05-01'), (2, 'Healthcare Policy', '2022-08-15');",BEGIN TRANSACTION; SELECT * FROM PublicPolicies WHERE YEAR(AmendmentDate) = 2022; COMMIT;,"The query begins a transaction, then selects all details of public policies that were amended in 2022. If the selection is successful, the transaction is committed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show the number of government projects completed in each department last year, ensuring the transaction is committed only if the count is successful.","CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, Department VARCHAR(50), CompletionDate DATE); INSERT INTO GovernmentProjects (ProjectID, Department, CompletionDate) VALUES (1, 'Infrastructure', '2022-03-01'), (2, 'Healthcare', '2022-07-20');","BEGIN TRANSACTION; SELECT Department, COUNT(ProjectID) AS ProjectsCompleted FROM GovernmentProjects WHERE YEAR(CompletionDate) = 2022 GROUP BY Department; COMMIT;","The query begins a transaction, then counts the number of government projects completed in each department in 2022 by grouping the data by the Department column. If the count is successful, the transaction is committed."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total sales and average discount for sustainable fashion items in the last quarter, and ensure the transaction is committed only if the total sales exceed $10,000.","CREATE TABLE FashionSales (SaleID INT PRIMARY KEY, ItemID INT, SaleDate DATE, SaleAmount DECIMAL, Discount DECIMAL); CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(100), Category VARCHAR(50), IsSustainable BOOLEAN);","BEGIN TRANSACTION; WITH SustainableSales AS (SELECT FS.SaleAmount, FS.Discount FROM FashionSales FS JOIN FashionItems FI ON FS.ItemID = FI.ItemID WHERE FI.IsSustainable = TRUE AND FS.SaleDate >= DATEADD(QUARTER, -1, GETDATE())) SELECT SUM(SaleAmount) AS TotalSales, AVG(Discount) AS AvgDiscount FROM SustainableSales HAVING SUM(SaleAmount) > 10000; COMMIT;","The query begins a transaction and creates a common table expression (CTE) to filter sales of sustainable fashion items in the last quarter. It then calculates the total sales and average discount. The transaction is committed only if the total sales exceed $10,000."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 most popular fashion categories based on the number of items sold, and ensure the transaction is rolled back if any category has zero sales.","CREATE TABLE FashionSales (SaleID INT PRIMARY KEY, ItemID INT, SaleDate DATE, SaleAmount DECIMAL); CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(100), Category VARCHAR(50));","BEGIN TRANSACTION; WITH CategorySales AS (SELECT FI.Category, COUNT(FS.SaleID) AS ItemsSold FROM FashionSales FS JOIN FashionItems FI ON FS.ItemID = FI.ItemID GROUP BY FI.Category HAVING COUNT(FS.SaleID) > 0) SELECT Category, ItemsSold FROM CategorySales ORDER BY ItemsSold DESC LIMIT 3; IF EXISTS (SELECT 1 FROM CategorySales WHERE ItemsSold = 0) ROLLBACK; ELSE COMMIT;","The query begins a transaction and creates a common table expression (CTE) to count the number of items sold per fashion category. It then selects the top 3 categories based on items sold. If any category has zero sales, the transaction is rolled back; otherwise, it is committed."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the average spending per customer on luxury fashion items, and commit the transaction only if the average spending is above $500.","CREATE TABLE CustomerPurchases (PurchaseID INT PRIMARY KEY, CustomerID INT, ItemID INT, PurchaseDate DATE, PurchaseAmount DECIMAL); CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(100), Category VARCHAR(50), IsLuxury BOOLEAN);","BEGIN TRANSACTION; WITH LuxurySpending AS (SELECT CP.CustomerID, CP.PurchaseAmount FROM CustomerPurchases CP JOIN FashionItems FI ON CP.ItemID = FI.ItemID WHERE FI.IsLuxury = TRUE) SELECT AVG(PurchaseAmount) AS AvgSpending FROM LuxurySpending HAVING AVG(PurchaseAmount) > 500; COMMIT;",The query begins a transaction and creates a common table expression (CTE) to filter purchases of luxury fashion items. It then calculates the average spending per customer. The transaction is committed only if the average spending is above $500.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total number of unique customers who purchased sustainable fashion items in the last year, and commit the transaction only if the number exceeds 1,000.","CREATE TABLE CustomerPurchases (PurchaseID INT PRIMARY KEY, CustomerID INT, ItemID INT, PurchaseDate DATE); CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(100), Category VARCHAR(50), IsSustainable BOOLEAN);","BEGIN TRANSACTION; WITH SustainableCustomers AS (SELECT DISTINCT CP.CustomerID FROM CustomerPurchases CP JOIN FashionItems FI ON CP.ItemID = FI.ItemID WHERE FI.IsSustainable = TRUE AND CP.PurchaseDate >= DATEADD(YEAR, -1, GETDATE())) SELECT COUNT(CustomerID) AS UniqueCustomers FROM SustainableCustomers HAVING COUNT(CustomerID) > 1000; COMMIT;","The query begins a transaction and creates a common table expression (CTE) to identify unique customers who purchased sustainable fashion items in the last year. It then counts the number of unique customers. The transaction is committed only if the number exceeds 1,000."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total revenue and average order value for fashion items sold in Europe, and commit the transaction only if the total revenue exceeds $50,000.","CREATE TABLE FashionSales (SaleID INT PRIMARY KEY, ItemID INT, SaleDate DATE, SaleAmount DECIMAL, Region VARCHAR(50)); CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(100), Category VARCHAR(50));","BEGIN TRANSACTION; WITH EuropeSales AS (SELECT FS.SaleAmount FROM FashionSales FS WHERE FS.Region = 'Europe') SELECT SUM(SaleAmount) AS TotalRevenue, AVG(SaleAmount) AS AvgOrderValue FROM EuropeSales HAVING SUM(SaleAmount) > 50000; COMMIT;","The query begins a transaction and creates a common table expression (CTE) to filter sales of fashion items in Europe. It then calculates the total revenue and average order value. The transaction is committed only if the total revenue exceeds $50,000."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total government spending by department for the last fiscal year.,"CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); CREATE TABLE Spending (SpendingID INT PRIMARY KEY, DepartmentID INT, Amount DECIMAL, FiscalYear INT, FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID));","SELECT DepartmentName, SUM(Amount) AS TotalSpending FROM Departments d JOIN Spending s ON d.DepartmentID = s.DepartmentID WHERE FiscalYear = (SELECT MAX(FiscalYear) FROM Spending) GROUP BY DepartmentName;","The query joins the Departments and Spending tables on DepartmentID, filters for the most recent fiscal year using a subquery, and then groups the results by DepartmentName to calculate the total spending for each department."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 3 states with the highest number of registered voters.,"CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(100)); CREATE TABLE Voters (VoterID INT PRIMARY KEY, StateID INT, RegistrationDate DATE, FOREIGN KEY (StateID) REFERENCES States(StateID));","WITH VoterCounts AS (SELECT StateID, COUNT(VoterID) AS VoterCount FROM Voters GROUP BY StateID) SELECT StateName, VoterCount FROM VoterCounts vc JOIN States s ON vc.StateID = s.StateID ORDER BY VoterCount DESC LIMIT 3;","The query first creates a common table expression (CTE) to count the number of voters per state. It then joins this CTE with the States table to get the state names and orders the results by voter count in descending order, limiting the output to the top 3 states."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the average age of citizens in each city.,"CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(100)); CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, CityID INT, Age INT, FOREIGN KEY (CityID) REFERENCES Cities(CityID));","SELECT CityName, AVG(Age) AS AverageAge FROM Cities c JOIN Citizens ci ON c.CityID = ci.CityID GROUP BY CityName;","The query joins the Cities and Citizens tables on CityID, groups the results by CityName, and calculates the average age of citizens in each city."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 legislative bills with the highest number of votes in favor.,"CREATE TABLE Bills (BillID INT PRIMARY KEY, BillName VARCHAR(100)); CREATE TABLE Votes (VoteID INT PRIMARY KEY, BillID INT, VoteType VARCHAR(10), FOREIGN KEY (BillID) REFERENCES Bills(BillID));","WITH VoteCounts AS (SELECT BillID, COUNT(VoteID) AS FavorVotes FROM Votes WHERE VoteType = 'Favor' GROUP BY BillID) SELECT BillName, FavorVotes FROM VoteCounts vc JOIN Bills b ON vc.BillID = b.BillID ORDER BY FavorVotes DESC LIMIT 5;","The query creates a common table expression (CTE) to count the number of 'Favor' votes for each bill. It then joins this CTE with the Bills table to get the bill names and orders the results by the number of favor votes in descending order, limiting the output to the top 5 bills."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the average government effectiveness score by region.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE Effectiveness (EffectivenessID INT PRIMARY KEY, RegionID INT, Score DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","SELECT RegionName, AVG(Score) AS AverageScore FROM Regions r JOIN Effectiveness e ON r.RegionID = e.RegionID GROUP BY RegionName;","The query joins the Regions and Effectiveness tables on RegionID, groups the results by RegionName, and calculates the average government effectiveness score for each region."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the regions with the highest average temperature increase over the past decade, excluding regions that have implemented significant reforestation projects.","CREATE TABLE TemperatureData (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, AvgTemperature DECIMAL); CREATE TABLE ReforestationProjects (ProjectID INT PRIMARY KEY, RegionID INT, ProjectName VARCHAR(50), TreesPlanted INT, StartYear INT, EndYear INT);","WITH TempIncrease AS (SELECT RegionName, AVG(AvgTemperature) - LAG(AVG(AvgTemperature)) OVER (PARTITION BY RegionName ORDER BY Year) AS TempChange FROM TemperatureData GROUP BY RegionName, Year) SELECT RegionName, AVG(TempChange) AS AvgTempIncrease FROM TempIncrease WHERE Year BETWEEN 2010 AND 2020 AND RegionName NOT IN (SELECT DISTINCT RegionName FROM ReforestationProjects WHERE StartYear <= 2020 AND EndYear >= 2010) GROUP BY RegionName ORDER BY AvgTempIncrease DESC;",The query calculates the average temperature change for each region over the past decade and excludes regions that have had significant reforestation projects during that period. It uses a common table expression (CTE) to compute the temperature change and then filters out regions with reforestation projects before calculating the average temperature increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Identify the top 5 countries with the highest reduction in carbon emissions due to renewable energy adoption, excluding countries that have not met their renewable energy targets.","CREATE TABLE CarbonEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, Emissions DECIMAL); CREATE TABLE RenewableEnergy (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, EnergyProduced DECIMAL, TargetMet BOOLEAN);","WITH EmissionReduction AS (SELECT CountryName, MAX(Emissions) - MIN(Emissions) AS EmissionDrop FROM CarbonEmissions GROUP BY CountryName) SELECT CountryName, EmissionDrop FROM EmissionReduction WHERE CountryName IN (SELECT CountryName FROM RenewableEnergy WHERE TargetMet = TRUE) ORDER BY EmissionDrop DESC LIMIT 5;",The query identifies the top 5 countries with the highest reduction in carbon emissions due to renewable energy adoption. It calculates the emission drop for each country and filters out countries that have not met their renewable energy targets before selecting the top 5.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Create a dashboard that shows the biodiversity index for different ecosystems, excluding ecosystems that have been affected by industrial activities.","CREATE TABLE BiodiversityIndex (EcosystemID INT PRIMARY KEY, EcosystemName VARCHAR(50), Year INT, BiodiversityScore DECIMAL); CREATE TABLE IndustrialActivities (ActivityID INT PRIMARY KEY, EcosystemID INT, ActivityName VARCHAR(50), StartYear INT, EndYear INT);","WITH BiodiversityData AS (SELECT EcosystemName, AVG(BiodiversityScore) AS AvgBiodiversity FROM BiodiversityIndex GROUP BY EcosystemName) SELECT EcosystemName, AvgBiodiversity FROM BiodiversityData WHERE EcosystemName NOT IN (SELECT DISTINCT EcosystemName FROM IndustrialActivities WHERE StartYear <= 2020 AND EndYear >= 2010) ORDER BY AvgBiodiversity DESC;","The query creates a dashboard showing the biodiversity index for different ecosystems, excluding those affected by industrial activities. It calculates the average biodiversity score for each ecosystem and filters out ecosystems with industrial activities before displaying the results."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the effectiveness of conservation efforts by comparing protected areas with non-protected areas in terms of species diversity.,"CREATE TABLE SpeciesDiversity (AreaID INT PRIMARY KEY, AreaName VARCHAR(50), Year INT, SpeciesCount INT); CREATE TABLE ProtectedAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(50), ProtectionStatus BOOLEAN);","WITH ProtectedData AS (SELECT AreaName, AVG(SpeciesCount) AS AvgSpecies FROM SpeciesDiversity WHERE AreaID IN (SELECT AreaID FROM ProtectedAreas WHERE ProtectionStatus = TRUE) GROUP BY AreaName), NonProtectedData AS (SELECT AreaName, AVG(SpeciesCount) AS AvgSpecies FROM SpeciesDiversity WHERE AreaID NOT IN (SELECT AreaID FROM ProtectedAreas WHERE ProtectionStatus = TRUE) GROUP BY AreaName) SELECT AreaName, AvgSpecies FROM ProtectedData UNION SELECT AreaName, AvgSpecies FROM NonProtectedData ORDER BY AvgSpecies DESC;",The query generates a report comparing species diversity in protected and non-protected areas. It uses common table expressions (CTEs) to calculate the average species count for both protected and non-protected areas and then combines the results using a UNION operation.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the impact of sustainable agricultural practices on crop yield by comparing regions that have adopted these practices with those that have not.,"CREATE TABLE CropYield (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, Yield DECIMAL); CREATE TABLE SustainablePractices (PracticeID INT PRIMARY KEY, RegionID INT, PracticeName VARCHAR(50), AdoptionYear INT);","WITH SustainableYield AS (SELECT RegionName, AVG(Yield) AS AvgYield FROM CropYield WHERE RegionID IN (SELECT RegionID FROM SustainablePractices) GROUP BY RegionName), NonSustainableYield AS (SELECT RegionName, AVG(Yield) AS AvgYield FROM CropYield WHERE RegionID NOT IN (SELECT RegionID FROM SustainablePractices) GROUP BY RegionName) SELECT RegionName, AvgYield FROM SustainableYield UNION SELECT RegionName, AvgYield FROM NonSustainableYield ORDER BY AvgYield DESC;",The query analyzes the impact of sustainable agricultural practices on crop yield by comparing regions that have adopted these practices with those that have not. It calculates the average yield for both groups using common table expressions (CTEs) and then combines the results using a UNION operation.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 3 most popular tourist destinations based on the number of bookings in the last year.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, DestinationID INT, BookingDate DATE); INSERT INTO Destinations (DestinationID, DestinationName) VALUES (1, 'Paris'), (2, 'New York'), (3, 'Tokyo'), (4, 'London'), (5, 'Sydney'); INSERT INTO Bookings (BookingID, DestinationID, BookingDate) VALUES (1, 1, '2022-05-01'), (2, 2, '2022-06-15'), (3, 3, '2022-07-20'), (4, 1, '2022-08-10'), (5, 2, '2022-09-25');","SELECT DestinationName, COUNT(*) AS BookingCount FROM Bookings INNER JOIN Destinations ON Bookings.DestinationID = Destinations.DestinationID WHERE BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY DestinationName ORDER BY BookingCount DESC LIMIT 3;","The query joins the Bookings and Destinations tables to get the destination names and counts the number of bookings for each destination in the last year. It then groups the results by destination name and orders them by the booking count in descending order, limiting the output to the top 3 destinations."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the average rating of hotels in each city and display the top 5 cities with the highest average hotel rating.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), City VARCHAR(100), Rating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, City, Rating) VALUES (1, 'Hotel A', 'Paris', 4.5), (2, 'Hotel B', 'New York', 4.7), (3, 'Hotel C', 'Tokyo', 4.3), (4, 'Hotel D', 'London', 4.6), (5, 'Hotel E', 'Sydney', 4.4);","SELECT City, AVG(Rating) AS AvgRating FROM Hotels GROUP BY City ORDER BY AvgRating DESC LIMIT 5;",The query calculates the average rating of hotels in each city by grouping the Hotels table by city and using the AVG function on the Rating column. It then orders the results by the average rating in descending order and limits the output to the top 5 cities.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 customers who have made the most bookings in the past year.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, BookingDate DATE); INSERT INTO Customers (CustomerID, CustomerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'), (4, 'Bob Brown'), (5, 'Charlie Davis'); INSERT INTO Bookings (BookingID, CustomerID, BookingDate) VALUES (1, 1, '2022-05-01'), (2, 2, '2022-06-15'), (3, 3, '2022-07-20'), (4, 1, '2022-08-10'), (5, 2, '2022-09-25');","SELECT CustomerName, COUNT(*) AS BookingCount FROM Bookings INNER JOIN Customers ON Bookings.CustomerID = Customers.CustomerID WHERE BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY CustomerName ORDER BY BookingCount DESC LIMIT 5;","The query joins the Bookings and Customers tables to get the customer names and counts the number of bookings for each customer in the last year. It then groups the results by customer name and orders them by the booking count in descending order, limiting the output to the top 5 customers."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 3 cities with the highest number of hotel bookings in the last month.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), City VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, BookingDate DATE); INSERT INTO Hotels (HotelID, HotelName, City) VALUES (1, 'Hotel A', 'Paris'), (2, 'Hotel B', 'New York'), (3, 'Hotel C', 'Tokyo'), (4, 'Hotel D', 'London'), (5, 'Hotel E', 'Sydney'); INSERT INTO Bookings (BookingID, HotelID, BookingDate) VALUES (1, 1, '2022-09-01'), (2, 2, '2022-09-15'), (3, 3, '2022-09-20'), (4, 1, '2022-09-10'), (5, 2, '2022-09-25');","SELECT City, COUNT(*) AS BookingCount FROM Bookings INNER JOIN Hotels ON Bookings.HotelID = Hotels.HotelID WHERE BookingDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY City ORDER BY BookingCount DESC LIMIT 3;","The query joins the Bookings and Hotels tables to get the city names and counts the number of bookings for each city in the last month. It then groups the results by city and orders them by the booking count in descending order, limiting the output to the top 3 cities."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average length of stay for each hotel in the last year.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Stays (StayID INT PRIMARY KEY, HotelID INT, CheckInDate DATE, CheckOutDate DATE); INSERT INTO Hotels (HotelID, HotelName) VALUES (1, 'Hotel A'), (2, 'Hotel B'), (3, 'Hotel C'), (4, 'Hotel D'), (5, 'Hotel E'); INSERT INTO Stays (StayID, HotelID, CheckInDate, CheckOutDate) VALUES (1, 1, '2022-05-01', '2022-05-05'), (2, 2, '2022-06-15', '2022-06-18'), (3, 3, '2022-07-20', '2022-07-25'), (4, 1, '2022-08-10', '2022-08-15'), (5, 2, '2022-09-25', '2022-09-30');","SELECT HotelName, AVG(DATEDIFF(DAY, CheckInDate, CheckOutDate)) AS AvgLengthOfStay FROM Stays INNER JOIN Hotels ON Stays.HotelID = Hotels.HotelID WHERE CheckInDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY HotelName;",The query joins the Stays and Hotels tables to get the hotel names and calculates the average length of stay for each hotel in the last year by using the DATEDIFF function on the CheckInDate and CheckOutDate columns. It then groups the results by hotel name.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated from ticket sales for different sports events across various regions, and then display the top 3 events with the highest revenue.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), Region VARCHAR(50), TicketRevenue DECIMAL); INSERT INTO SportsEvents (EventID, EventName, Region, TicketRevenue) VALUES (1, 'Super Bowl', 'North America', 5000000), (2, 'World Cup Final', 'Europe', 7000000), (3, 'NBA Finals', 'North America', 3000000), (4, 'Wimbledon Final', 'Europe', 2000000), (5, 'Olympics Opening Ceremony', 'Asia', 8000000);","WITH RankedEvents AS (SELECT EventName, TicketRevenue, DENSE_RANK() OVER (ORDER BY TicketRevenue DESC) AS Rank FROM SportsEvents) SELECT EventName, TicketRevenue FROM RankedEvents WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank sports events based on their ticket revenue in descending order. It then selects the top 3 events with the highest revenue using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average performance metrics for athletes in different sports, and then display the top 5 athletes with the highest average performance score.","CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), AvgPerformanceScore DECIMAL); INSERT INTO AthletePerformance (AthleteID, AthleteName, Sport, AvgPerformanceScore) VALUES (1, 'Usain Bolt', 'Track and Field', 98.5), (2, 'Michael Phelps', 'Swimming', 97.0), (3, 'Serena Williams', 'Tennis', 95.0), (4, 'Lionel Messi', 'Soccer', 96.5), (5, 'LeBron James', 'Basketball', 94.0);","WITH RankedAthletes AS (SELECT AthleteName, AvgPerformanceScore, DENSE_RANK() OVER (ORDER BY AvgPerformanceScore DESC) AS Rank FROM AthletePerformance) SELECT AthleteName, AvgPerformanceScore FROM RankedAthletes WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank athletes based on their average performance score in descending order. It then selects the top 5 athletes with the highest average performance score using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the fan engagement metrics for different sports teams across various social media platforms, and then display the top 3 teams with the highest total engagement.","CREATE TABLE FanEngagement (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Platform VARCHAR(50), EngagementCount INT); INSERT INTO FanEngagement (TeamID, TeamName, Platform, EngagementCount) VALUES (1, 'Lakers', 'Twitter', 500000), (2, 'Warriors', 'Instagram', 700000), (3, 'Real Madrid', 'Facebook', 800000), (4, 'Manchester United', 'Twitter', 600000), (5, 'Patriots', 'Instagram', 300000);","WITH EngagementSum AS (SELECT TeamName, SUM(EngagementCount) AS TotalEngagement FROM FanEngagement GROUP BY TeamName), RankedTeams AS (SELECT TeamName, TotalEngagement, DENSE_RANK() OVER (ORDER BY TotalEngagement DESC) AS Rank FROM EngagementSum) SELECT TeamName, TotalEngagement FROM RankedTeams WHERE Rank <= 3;","The query first sums the engagement counts for each team across all platforms. It then creates a common table expression (CTE) to rank the teams based on their total engagement in descending order. Finally, it selects the top 3 teams with the highest total engagement using the DENSE_RANK function."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the economic impact of major sports events in different countries, and then display the top 5 countries with the highest economic impact.","CREATE TABLE EconomicImpact (EventID INT PRIMARY KEY, EventName VARCHAR(50), Country VARCHAR(50), EconomicImpact DECIMAL); INSERT INTO EconomicImpact (EventID, EventName, Country, EconomicImpact) VALUES (1, 'Super Bowl', 'USA', 500000000), (2, 'World Cup Final', 'Germany', 700000000), (3, 'Olympics', 'Japan', 800000000), (4, 'Wimbledon', 'UK', 200000000), (5, 'Tour de France', 'France', 300000000);","WITH RankedCountries AS (SELECT Country, SUM(EconomicImpact) AS TotalImpact, DENSE_RANK() OVER (ORDER BY SUM(EconomicImpact) DESC) AS Rank FROM EconomicImpact GROUP BY Country) SELECT Country, TotalImpact FROM RankedCountries WHERE Rank <= 5;","The query first sums the economic impact for each country. It then creates a common table expression (CTE) to rank the countries based on their total economic impact in descending order. Finally, it selects the top 5 countries with the highest economic impact using the DENSE_RANK function."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the global market trends for different sports equipment, and then display the top 3 equipment categories with the highest market growth.","CREATE TABLE MarketTrends (TrendID INT PRIMARY KEY, EquipmentCategory VARCHAR(50), Region VARCHAR(50), MarketGrowth DECIMAL); INSERT INTO MarketTrends (TrendID, EquipmentCategory, Region, MarketGrowth) VALUES (1, 'Running Shoes', 'North America', 15.5), (2, 'Tennis Rackets', 'Europe', 10.0), (3, 'Soccer Balls', 'Asia', 12.0), (4, 'Basketballs', 'North America', 8.5), (5, 'Golf Clubs', 'Europe', 9.0);","WITH RankedCategories AS (SELECT EquipmentCategory, SUM(MarketGrowth) AS TotalGrowth, DENSE_RANK() OVER (ORDER BY SUM(MarketGrowth) DESC) AS Rank FROM MarketTrends GROUP BY EquipmentCategory) SELECT EquipmentCategory, TotalGrowth FROM RankedCategories WHERE Rank <= 3;","The query first sums the market growth for each equipment category across all regions. It then creates a common table expression (CTE) to rank the equipment categories based on their total market growth in descending order. Finally, it selects the top 3 equipment categories with the highest market growth using the DENSE_RANK function."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the average temperature and CO2 emissions for each country.,"CREATE TABLE ClimateData (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), AvgTemperature DECIMAL, CO2Emissions DECIMAL); INSERT INTO ClimateData (CountryID, CountryName, AvgTemperature, CO2Emissions) VALUES (1, 'USA', 12.5, 15.6), (2, 'Canada', 5.2, 10.3), (3, 'Germany', 10.1, 9.8), (4, 'India', 25.3, 18.2), (5, 'China', 22.1, 20.5);","SELECT CountryName, AvgTemperature, CO2Emissions FROM ClimateData;","The query selects the country name, average temperature, and CO2 emissions from the ClimateData table, providing a summary of these metrics for each country."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the list of endangered species and their population in different regions.,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), EndangeredStatus BOOLEAN); CREATE TABLE Population (PopulationID INT PRIMARY KEY, SpeciesID INT, Region VARCHAR(50), PopulationCount INT, FOREIGN KEY (SpeciesID) REFERENCES Species(SpeciesID)); INSERT INTO Species (SpeciesID, SpeciesName, EndangeredStatus) VALUES (1, 'Tiger', TRUE), (2, 'Elephant', TRUE), (3, 'Panda', TRUE), (4, 'Kangaroo', FALSE), (5, 'Penguin', FALSE); INSERT INTO Population (PopulationID, SpeciesID, Region, PopulationCount) VALUES (1, 1, 'Asia', 3200), (2, 2, 'Africa', 415000), (3, 3, 'Asia', 1864), (4, 4, 'Australia', 50000), (5, 5, 'Antarctica', 1200000);","SELECT SpeciesName, Region, PopulationCount FROM Species INNER JOIN Population ON Species.SpeciesID = Population.SpeciesID WHERE EndangeredStatus = TRUE;","The query joins the Species and Population tables on the SpeciesID field and selects the species name, region, and population count for species that are marked as endangered."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Show the total renewable energy production by country.,"CREATE TABLE EnergyProduction (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), RenewableEnergy DECIMAL, NonRenewableEnergy DECIMAL); INSERT INTO EnergyProduction (CountryID, CountryName, RenewableEnergy, NonRenewableEnergy) VALUES (1, 'USA', 500.5, 1500.3), (2, 'Canada', 300.2, 700.1), (3, 'Germany', 450.7, 800.4), (4, 'India', 200.3, 1200.8), (5, 'China', 600.9, 1800.5);","SELECT CountryName, RenewableEnergy FROM EnergyProduction;","The query selects the country name and the amount of renewable energy produced from the EnergyProduction table, showing the total renewable energy production by country."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average rainfall in different regions and the number of monitoring stations in each region.,"CREATE TABLE Rainfall (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), AvgRainfall DECIMAL); CREATE TABLE MonitoringStations (StationID INT PRIMARY KEY, RegionID INT, StationName VARCHAR(50), FOREIGN KEY (RegionID) REFERENCES Rainfall(RegionID)); INSERT INTO Rainfall (RegionID, RegionName, AvgRainfall) VALUES (1, 'North America', 1000.5), (2, 'South America', 1500.3), (3, 'Europe', 800.7), (4, 'Asia', 1200.8), (5, 'Africa', 900.2); INSERT INTO MonitoringStations (StationID, RegionID, StationName) VALUES (1, 1, 'Station A'), (2, 2, 'Station B'), (3, 3, 'Station C'), (4, 4, 'Station D'), (5, 5, 'Station E');","SELECT RegionName, AvgRainfall, COUNT(StationID) AS NumberOfStations FROM Rainfall INNER JOIN MonitoringStations ON Rainfall.RegionID = MonitoringStations.RegionID GROUP BY RegionName, AvgRainfall;","The query joins the Rainfall and MonitoringStations tables on the RegionID field, groups the results by region name and average rainfall, and counts the number of monitoring stations in each region."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Get the list of countries and their forest cover percentage.,"CREATE TABLE ForestCover (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), ForestCoverPercentage DECIMAL); INSERT INTO ForestCover (CountryID, CountryName, ForestCoverPercentage) VALUES (1, 'USA', 33.3), (2, 'Canada', 38.2), (3, 'Germany', 31.7), (4, 'India', 21.7), (5, 'China', 22.3);","SELECT CountryName, ForestCoverPercentage FROM ForestCover;","The query selects the country name and forest cover percentage from the ForestCover table, providing a list of countries and their respective forest cover percentages."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Retrieve the top 3 countries with the highest average annual temperature increase over the last decade.,"CREATE TABLE TemperatureData (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, AvgAnnualTemp DECIMAL); INSERT INTO TemperatureData (CountryID, CountryName, Year, AvgAnnualTemp) VALUES (1, 'USA', 2010, 12.5), (1, 'USA', 2020, 13.0), (2, 'Canada', 2010, 5.0), (2, 'Canada', 2020, 6.0), (3, 'Brazil', 2010, 25.0), (3, 'Brazil', 2020, 26.5);","WITH TempIncrease AS (SELECT CountryName, (MAX(AvgAnnualTemp) - MIN(AvgAnnualTemp)) AS TempChange FROM TemperatureData WHERE Year BETWEEN 2010 AND 2020 GROUP BY CountryName) SELECT CountryName, TempChange FROM TempIncrease ORDER BY TempChange DESC LIMIT 3;",The query calculates the temperature change for each country over the last decade by subtracting the minimum average annual temperature from the maximum for the years between 2010 and 2020. It then selects the top 3 countries with the highest temperature increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 5 regions with the highest deforestation rates in the past 5 years.,"CREATE TABLE DeforestationData (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, DeforestationRate DECIMAL); INSERT INTO DeforestationData (RegionID, RegionName, Year, DeforestationRate) VALUES (1, 'Amazon', 2015, 2.5), (1, 'Amazon', 2020, 3.0), (2, 'Congo Basin', 2015, 1.5), (2, 'Congo Basin', 2020, 2.0), (3, 'Southeast Asia', 2015, 3.0), (3, 'Southeast Asia', 2020, 3.5);","WITH DeforestationChange AS (SELECT RegionName, (MAX(DeforestationRate) - MIN(DeforestationRate)) AS RateChange FROM DeforestationData WHERE Year BETWEEN 2015 AND 2020 GROUP BY RegionName) SELECT RegionName, RateChange FROM DeforestationChange ORDER BY RateChange DESC LIMIT 5;",The query calculates the change in deforestation rates for each region over the past 5 years by subtracting the minimum rate from the maximum for the years between 2015 and 2020. It then selects the top 5 regions with the highest deforestation rate increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Identify the top 3 species with the largest population decline in the last decade.,"CREATE TABLE SpeciesPopulation (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Year INT, Population INT); INSERT INTO SpeciesPopulation (SpeciesID, SpeciesName, Year, Population) VALUES (1, 'Tiger', 2010, 3200), (1, 'Tiger', 2020, 2500), (2, 'Elephant', 2010, 50000), (2, 'Elephant', 2020, 40000), (3, 'Panda', 2010, 1600), (3, 'Panda', 2020, 1800);","WITH PopulationDecline AS (SELECT SpeciesName, (MIN(Population) - MAX(Population)) AS PopDecline FROM SpeciesPopulation WHERE Year BETWEEN 2010 AND 2020 GROUP BY SpeciesName) SELECT SpeciesName, PopDecline FROM PopulationDecline ORDER BY PopDecline DESC LIMIT 3;",The query calculates the population decline for each species over the last decade by subtracting the maximum population from the minimum for the years between 2010 and 2020. It then selects the top 3 species with the largest population decline.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,List the top 5 cities with the highest average air pollution levels in the last 5 years.,"CREATE TABLE AirQuality (CityID INT PRIMARY KEY, CityName VARCHAR(50), Year INT, AvgAirPollutionLevel DECIMAL); INSERT INTO AirQuality (CityID, CityName, Year, AvgAirPollutionLevel) VALUES (1, 'Beijing', 2015, 85.0), (1, 'Beijing', 2020, 90.0), (2, 'Delhi', 2015, 95.0), (2, 'Delhi', 2020, 100.0), (3, 'Los Angeles', 2015, 60.0), (3, 'Los Angeles', 2020, 65.0);","WITH PollutionLevels AS (SELECT CityName, AVG(AvgAirPollutionLevel) AS AvgPollution FROM AirQuality WHERE Year BETWEEN 2015 AND 2020 GROUP BY CityName) SELECT CityName, AvgPollution FROM PollutionLevels ORDER BY AvgPollution DESC LIMIT 5;",The query calculates the average air pollution levels for each city over the past 5 years by averaging the pollution levels for the years between 2015 and 2020. It then selects the top 5 cities with the highest average air pollution levels.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Determine the top 3 countries with the highest increase in renewable energy usage over the past decade.,"CREATE TABLE RenewableEnergy (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, EnergyUsage DECIMAL); INSERT INTO RenewableEnergy (CountryID, CountryName, Year, EnergyUsage) VALUES (1, 'Germany', 2010, 20.0), (1, 'Germany', 2020, 40.0), (2, 'China', 2010, 15.0), (2, 'China', 2020, 35.0), (3, 'India', 2010, 10.0), (3, 'India', 2020, 30.0);","WITH EnergyIncrease AS (SELECT CountryName, (MAX(EnergyUsage) - MIN(EnergyUsage)) AS UsageIncrease FROM RenewableEnergy WHERE Year BETWEEN 2010 AND 2020 GROUP BY CountryName) SELECT CountryName, UsageIncrease FROM EnergyIncrease ORDER BY UsageIncrease DESC LIMIT 3;",The query calculates the increase in renewable energy usage for each country over the past decade by subtracting the minimum usage from the maximum for the years between 2010 and 2020. It then selects the top 3 countries with the highest increase in renewable energy usage.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Track the total revenue generated from different genres of movies and rollback if any error occurs during the transaction.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), Revenue DECIMAL); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, MovieID INT, Amount DECIMAL, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID));","BEGIN TRANSACTION; SELECT Genre, SUM(Revenue) AS TotalRevenue FROM Movies GROUP BY Genre; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query starts a transaction to calculate the total revenue generated from different genres of movies. It groups the movies by genre and sums up the revenue for each genre. If any error occurs during the transaction, it rolls back the transaction; otherwise, it commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 most-watched TV shows and ensure the transaction is committed only if no errors occur.,"CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), WatchCount INT); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, ShowID INT, Amount DECIMAL, FOREIGN KEY (ShowID) REFERENCES TVShows(ShowID));","BEGIN TRANSACTION; WITH RankedShows AS (SELECT Title, WatchCount, DENSE_RANK() OVER (ORDER BY WatchCount DESC) AS Rank FROM TVShows) SELECT Title, WatchCount FROM RankedShows WHERE Rank <= 3; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query begins a transaction to identify the top 3 most-watched TV shows. It uses a common table expression (CTE) to rank the shows based on their watch count in descending order. If any error occurs, the transaction is rolled back; otherwise, it is committed."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average engagement time for different types of content and commit the transaction if successful.,"CREATE TABLE Content (ContentID INT PRIMARY KEY, Title VARCHAR(100), Type VARCHAR(50), EngagementTime DECIMAL); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, ContentID INT, Amount DECIMAL, FOREIGN KEY (ContentID) REFERENCES Content(ContentID));","BEGIN TRANSACTION; SELECT Type, AVG(EngagementTime) AS AvgEngagementTime FROM Content GROUP BY Type; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query starts a transaction to calculate the average engagement time for different types of content. It groups the content by type and calculates the average engagement time for each type. If any error occurs, the transaction is rolled back; otherwise, it is committed."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 5 highest-grossing video games and ensure the transaction is committed only if no errors occur.,"CREATE TABLE VideoGames (GameID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), Revenue DECIMAL); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, GameID INT, Amount DECIMAL, FOREIGN KEY (GameID) REFERENCES VideoGames(GameID));","BEGIN TRANSACTION; WITH RankedGames AS (SELECT Title, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM VideoGames) SELECT Title, Revenue FROM RankedGames WHERE Rank <= 5; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query begins a transaction to list the top 5 highest-grossing video games. It uses a common table expression (CTE) to rank the games based on their revenue in descending order. If any error occurs, the transaction is rolled back; otherwise, it is committed."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average rating for different music albums and rollback if any error occurs during the transaction.,"CREATE TABLE MusicAlbums (AlbumID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), Rating DECIMAL); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, AlbumID INT, Amount DECIMAL, FOREIGN KEY (AlbumID) REFERENCES MusicAlbums(AlbumID));","BEGIN TRANSACTION; SELECT Genre, AVG(Rating) AS AvgRating FROM MusicAlbums GROUP BY Genre; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query starts a transaction to find the average rating for different music albums. It groups the albums by genre and calculates the average rating for each genre. If any error occurs during the transaction, it rolls back the transaction; otherwise, it commits the transaction."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that tracks the popularity of different fashion brands across various regions, and then display the top 3 most popular brands in each region.","CREATE TABLE BrandPopularity (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), PopularityScore DECIMAL); INSERT INTO BrandPopularity (BrandID, BrandName, Region, PopularityScore) VALUES (1, 'Brand A', 'North America', 85.5), (2, 'Brand B', 'Europe', 90.0), (3, 'Brand C', 'Asia', 88.0), (4, 'Brand D', 'North America', 80.7), (5, 'Brand E', 'Europe', 95.0);","WITH RankedBrands AS (SELECT BrandName, Region, PopularityScore, DENSE_RANK() OVER (PARTITION BY Region ORDER BY PopularityScore DESC) AS Rank FROM BrandPopularity) SELECT BrandName, Region, PopularityScore FROM RankedBrands WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank fashion brands based on their popularity score within each region. It then selects the top 3 most popular brands in each region using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores consumer preferences for sustainable fashion practices and display the top 2 preferred practices.,"CREATE TABLE SustainablePreferences (PreferenceID INT PRIMARY KEY, PreferenceName VARCHAR(50), PreferenceScore DECIMAL); INSERT INTO SustainablePreferences (PreferenceID, PreferenceName, PreferenceScore) VALUES (1, 'Recycled Materials', 75.0), (2, 'Ethical Labor', 85.0), (3, 'Eco-friendly Packaging', 65.0), (4, 'Carbon Neutral', 70.0);","WITH RankedPreferences AS (SELECT PreferenceName, PreferenceScore, DENSE_RANK() OVER (ORDER BY PreferenceScore DESC) AS Rank FROM SustainablePreferences) SELECT PreferenceName, PreferenceScore FROM RankedPreferences WHERE Rank <= 2;",The query creates a common table expression (CTE) to rank sustainable fashion practices based on their preference score. It then selects the top 2 preferred practices using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that records fashion trend data over the past decade and display the top 5 trends by popularity.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Year INT, PopularityScore DECIMAL); INSERT INTO FashionTrends (TrendID, TrendName, Year, PopularityScore) VALUES (1, 'Minimalism', 2015, 80.0), (2, 'Athleisure', 2016, 85.0), (3, 'Sustainable Fashion', 2018, 90.0), (4, 'Vintage', 2019, 75.0), (5, 'Streetwear', 2020, 88.0);","WITH RankedTrends AS (SELECT TrendName, PopularityScore, DENSE_RANK() OVER (ORDER BY PopularityScore DESC) AS Rank FROM FashionTrends) SELECT TrendName, PopularityScore FROM RankedTrends WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank fashion trends based on their popularity score. It then selects the top 5 trends using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that captures consumer behavior data regarding online and offline shopping habits and display the top 3 most common shopping methods.,"CREATE TABLE ConsumerBehavior (BehaviorID INT PRIMARY KEY, BehaviorName VARCHAR(50), FrequencyScore DECIMAL); INSERT INTO ConsumerBehavior (BehaviorID, BehaviorName, FrequencyScore) VALUES (1, 'Online Shopping', 90.0), (2, 'In-store Shopping', 85.0), (3, 'Click and Collect', 70.0), (4, 'Subscription Services', 65.0);","WITH RankedBehaviors AS (SELECT BehaviorName, FrequencyScore, DENSE_RANK() OVER (ORDER BY FrequencyScore DESC) AS Rank FROM ConsumerBehavior) SELECT BehaviorName, FrequencyScore FROM RankedBehaviors WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank consumer shopping behaviors based on their frequency score. It then selects the top 3 most common shopping methods using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that tracks the adoption of sustainable fashion practices by different brands and display the top 3 brands leading in sustainability.,"CREATE TABLE SustainableBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainabilityScore DECIMAL); INSERT INTO SustainableBrands (BrandID, BrandName, SustainabilityScore) VALUES (1, 'Brand X', 95.0), (2, 'Brand Y', 90.0), (3, 'Brand Z', 85.0), (4, 'Brand W', 80.0);","WITH RankedBrands AS (SELECT BrandName, SustainabilityScore, DENSE_RANK() OVER (ORDER BY SustainabilityScore DESC) AS Rank FROM SustainableBrands) SELECT BrandName, SustainabilityScore FROM RankedBrands WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank fashion brands based on their sustainability score. It then selects the top 3 brands leading in sustainability using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 3 regions with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureData (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, AvgTemperature DECIMAL); INSERT INTO TemperatureData (RegionID, RegionName, Year, AvgTemperature) VALUES (1, 'North America', 2010, 15.2), (1, 'North America', 2020, 16.5), (2, 'Europe', 2010, 14.0), (2, 'Europe', 2020, 15.0), (3, 'Asia', 2010, 20.0), (3, 'Asia', 2020, 21.5);","WITH TempIncrease AS (SELECT RegionName, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS TempChange FROM TemperatureData WHERE Year BETWEEN 2010 AND 2020 GROUP BY RegionName), RankedRegions AS (SELECT RegionName, TempChange, RANK() OVER (ORDER BY TempChange DESC) AS Rank FROM TempIncrease) SELECT RegionName, TempChange FROM RankedRegions WHERE Rank <= 3;",The query calculates the temperature change for each region over the past decade and ranks them in descending order of temperature increase. It then selects the top 3 regions with the highest temperature increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 species with the highest population decline over the last 5 years.,"CREATE TABLE SpeciesPopulation (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Year INT, Population INT); INSERT INTO SpeciesPopulation (SpeciesID, SpeciesName, Year, Population) VALUES (1, 'Tiger', 2015, 3200), (1, 'Tiger', 2020, 3000), (2, 'Elephant', 2015, 50000), (2, 'Elephant', 2020, 47000), (3, 'Panda', 2015, 1800), (3, 'Panda', 2020, 1860), (4, 'Rhino', 2015, 29000), (4, 'Rhino', 2020, 27000), (5, 'Gorilla', 2015, 1000), (5, 'Gorilla', 2020, 950);","WITH PopDecline AS (SELECT SpeciesName, (MIN(Population) - MAX(Population)) AS PopChange FROM SpeciesPopulation WHERE Year BETWEEN 2015 AND 2020 GROUP BY SpeciesName), RankedSpecies AS (SELECT SpeciesName, PopChange, RANK() OVER (ORDER BY PopChange ASC) AS Rank FROM PopDecline) SELECT SpeciesName, PopChange FROM RankedSpecies WHERE Rank <= 5;",The query calculates the population change for each species over the last 5 years and ranks them in ascending order of population decline. It then selects the top 5 species with the highest population decline.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 countries with the highest percentage of renewable energy usage in the last year.,"CREATE TABLE EnergyUsage (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, TotalEnergyUsage DECIMAL, RenewableEnergyUsage DECIMAL); INSERT INTO EnergyUsage (CountryID, CountryName, Year, TotalEnergyUsage, RenewableEnergyUsage) VALUES (1, 'USA', 2020, 4000, 800), (2, 'Germany', 2020, 3000, 1500), (3, 'China', 2020, 5000, 1000), (4, 'India', 2020, 3500, 700), (5, 'Brazil', 2020, 2000, 1200);","WITH RenewablePercentage AS (SELECT CountryName, (RenewableEnergyUsage / TotalEnergyUsage) * 100 AS RenewablePercent FROM EnergyUsage WHERE Year = 2020), RankedCountries AS (SELECT CountryName, RenewablePercent, RANK() OVER (ORDER BY RenewablePercent DESC) AS Rank FROM RenewablePercentage) SELECT CountryName, RenewablePercent FROM RankedCountries WHERE Rank <= 5;",The query calculates the percentage of renewable energy usage for each country in the last year and ranks them in descending order of renewable energy usage percentage. It then selects the top 5 countries with the highest renewable energy usage percentage.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Determine the top 3 conservation projects with the highest funding increase over the past 5 years.,"CREATE TABLE ConservationFunding (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), Year INT, FundingAmount DECIMAL); INSERT INTO ConservationFunding (ProjectID, ProjectName, Year, FundingAmount) VALUES (1, 'Project A', 2015, 500000), (1, 'Project A', 2020, 700000), (2, 'Project B', 2015, 300000), (2, 'Project B', 2020, 600000), (3, 'Project C', 2015, 200000), (3, 'Project C', 2020, 500000);","WITH FundingIncrease AS (SELECT ProjectName, (MAX(FundingAmount) - MIN(FundingAmount)) AS FundingChange FROM ConservationFunding WHERE Year BETWEEN 2015 AND 2020 GROUP BY ProjectName), RankedProjects AS (SELECT ProjectName, FundingChange, RANK() OVER (ORDER BY FundingChange DESC) AS Rank FROM FundingIncrease) SELECT ProjectName, FundingChange FROM RankedProjects WHERE Rank <= 3;",The query calculates the funding change for each conservation project over the past 5 years and ranks them in descending order of funding increase. It then selects the top 3 projects with the highest funding increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 cities with the highest reduction in carbon emissions over the last decade.,"CREATE TABLE CarbonEmissions (CityID INT PRIMARY KEY, CityName VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CarbonEmissions (CityID, CityName, Year, Emissions) VALUES (1, 'New York', 2010, 1000), (1, 'New York', 2020, 800), (2, 'London', 2010, 900), (2, 'London', 2020, 600), (3, 'Tokyo', 2010, 1100), (3, 'Tokyo', 2020, 900), (4, 'Paris', 2010, 700), (4, 'Paris', 2020, 500), (5, 'Berlin', 2010, 800), (5, 'Berlin', 2020, 600);","WITH EmissionReduction AS (SELECT CityName, (MIN(Emissions) - MAX(Emissions)) AS EmissionChange FROM CarbonEmissions WHERE Year BETWEEN 2010 AND 2020 GROUP BY CityName), RankedCities AS (SELECT CityName, EmissionChange, RANK() OVER (ORDER BY EmissionChange ASC) AS Rank FROM EmissionReduction) SELECT CityName, EmissionChange FROM RankedCities WHERE Rank <= 5;",The query calculates the carbon emissions change for each city over the last decade and ranks them in ascending order of emissions reduction. It then selects the top 5 cities with the highest reduction in carbon emissions.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the top 10 most watched movies along with their genres.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE WatchHistory (UserID INT, MovieID INT, WatchDate DATE);","SELECT M.Title, M.Genre, COUNT(W.UserID) AS WatchCount FROM Movies M INNER JOIN WatchHistory W ON M.MovieID = W.MovieID GROUP BY M.Title, M.Genre ORDER BY WatchCount DESC LIMIT 10;","The query joins the Movies table with the WatchHistory table on the MovieID field to count the number of times each movie has been watched. It then groups the results by movie title and genre, orders them by the watch count in descending order, and limits the output to the top 10 most watched movies."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the total revenue generated by each artist from their album sales.,"CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(100)); CREATE TABLE Albums (AlbumID INT PRIMARY KEY, ArtistID INT, Title VARCHAR(100), Price DECIMAL); CREATE TABLE Sales (SaleID INT PRIMARY KEY, AlbumID INT, Quantity INT);","SELECT A.ArtistName, SUM(S.Quantity * AL.Price) AS TotalRevenue FROM Artists A INNER JOIN Albums AL ON A.ArtistID = AL.ArtistID INNER JOIN Sales S ON AL.AlbumID = S.AlbumID GROUP BY A.ArtistName;","The query joins the Artists table with the Albums table on the ArtistID field and then joins the result with the Sales table on the AlbumID field. It calculates the total revenue for each artist by multiplying the quantity of albums sold by the album price and summing the results. Finally, it groups the results by artist name."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average rating for each TV show.,"CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100)); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, ShowID INT, Rating DECIMAL);","SELECT T.Title, AVG(R.Rating) AS AverageRating FROM TVShows T INNER JOIN Ratings R ON T.ShowID = R.ShowID GROUP BY T.Title;",The query joins the TVShows table with the Ratings table on the ShowID field to calculate the average rating for each TV show. It then groups the results by the TV show title.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Get the list of all podcasts and their total number of episodes.,"CREATE TABLE Podcasts (PodcastID INT PRIMARY KEY, Title VARCHAR(100)); CREATE TABLE Episodes (EpisodeID INT PRIMARY KEY, PodcastID INT, EpisodeTitle VARCHAR(100));","SELECT P.Title, COUNT(E.EpisodeID) AS TotalEpisodes FROM Podcasts P LEFT JOIN Episodes E ON P.PodcastID = E.PodcastID GROUP BY P.Title;",The query joins the Podcasts table with the Episodes table on the PodcastID field using a LEFT JOIN to include podcasts with zero episodes. It counts the number of episodes for each podcast and groups the results by podcast title.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Show the number of followers for each content creator.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(100)); CREATE TABLE Followers (FollowerID INT PRIMARY KEY, CreatorID INT);","SELECT C.CreatorName, COUNT(F.FollowerID) AS FollowerCount FROM ContentCreators C LEFT JOIN Followers F ON C.CreatorID = F.CreatorID GROUP BY C.CreatorName;",The query joins the ContentCreators table with the Followers table on the CreatorID field using a LEFT JOIN to include content creators with zero followers. It counts the number of followers for each content creator and groups the results by creator name.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the quarterly revenue trends for different technology sectors and identify the sector with the highest growth rate.,"CREATE TABLE RevenueTrends (SectorID INT PRIMARY KEY, SectorName VARCHAR(50), Q1Revenue DECIMAL, Q2Revenue DECIMAL, Q3Revenue DECIMAL, Q4Revenue DECIMAL); INSERT INTO RevenueTrends (SectorID, SectorName, Q1Revenue, Q2Revenue, Q3Revenue, Q4Revenue) VALUES (1, 'AI', 50000, 60000, 70000, 80000), (2, 'Blockchain', 30000, 35000, 40000, 45000), (3, 'IoT', 20000, 25000, 30000, 35000), (4, 'Cybersecurity', 40000, 45000, 50000, 55000), (5, 'Cloud Computing', 60000, 65000, 70000, 75000);","WITH UnpivotedRevenue AS (SELECT SectorName, Quarter, Revenue FROM RevenueTrends UNPIVOT (Revenue FOR Quarter IN (Q1Revenue, Q2Revenue, Q3Revenue, Q4Revenue)) AS Unpvt) SELECT SectorName, Quarter, Revenue, LAG(Revenue) OVER (PARTITION BY SectorName ORDER BY Quarter) AS PreviousRevenue, (Revenue - LAG(Revenue) OVER (PARTITION BY SectorName ORDER BY Quarter)) / LAG(Revenue) OVER (PARTITION BY SectorName ORDER BY Quarter) * 100 AS GrowthRate FROM UnpivotedRevenue;","The query first unpivots the quarterly revenue columns into rows for each sector. Then, it calculates the previous quarter's revenue and the growth rate for each quarter using the LAG function. The growth rate is calculated as the percentage change from the previous quarter's revenue."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard that shows the adoption rates of different emerging technologies across various regions over the past year.,"CREATE TABLE AdoptionRates (TechID INT PRIMARY KEY, TechName VARCHAR(50), Region VARCHAR(50), Q1AdoptionRate DECIMAL, Q2AdoptionRate DECIMAL, Q3AdoptionRate DECIMAL, Q4AdoptionRate DECIMAL); INSERT INTO AdoptionRates (TechID, TechName, Region, Q1AdoptionRate, Q2AdoptionRate, Q3AdoptionRate, Q4AdoptionRate) VALUES (1, 'AI', 'North America', 0.25, 0.30, 0.35, 0.40), (2, 'Blockchain', 'Europe', 0.10, 0.15, 0.20, 0.25), (3, 'IoT', 'Asia', 0.20, 0.25, 0.30, 0.35), (4, 'Cybersecurity', 'North America', 0.30, 0.35, 0.40, 0.45), (5, 'Cloud Computing', 'Europe', 0.40, 0.45, 0.50, 0.55);","WITH UnpivotedAdoption AS (SELECT TechName, Region, Quarter, AdoptionRate FROM AdoptionRates UNPIVOT (AdoptionRate FOR Quarter IN (Q1AdoptionRate, Q2AdoptionRate, Q3AdoptionRate, Q4AdoptionRate)) AS Unpvt) SELECT TechName, Region, Quarter, AdoptionRate FROM UnpivotedAdoption;",The query unpivots the quarterly adoption rate columns into rows for each technology and region. This allows for easier visualization and analysis of adoption trends over the past year.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the market share of different technology companies in the AI sector and display the top 3 companies by market share.,"CREATE TABLE MarketShare (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Sector VARCHAR(50), MarketShare DECIMAL); INSERT INTO MarketShare (CompanyID, CompanyName, Sector, MarketShare) VALUES (1, 'Company A', 'AI', 25.0), (2, 'Company B', 'AI', 20.0), (3, 'Company C', 'AI', 15.0), (4, 'Company D', 'AI', 10.0), (5, 'Company E', 'AI', 5.0);","WITH RankedCompanies AS (SELECT CompanyName, MarketShare, DENSE_RANK() OVER (ORDER BY MarketShare DESC) AS Rank FROM MarketShare WHERE Sector = 'AI') SELECT CompanyName, MarketShare FROM RankedCompanies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank AI companies based on their market share in descending order. It then selects the top 3 companies using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a comparative report on the investment trends in different technology sectors over the last year.,"CREATE TABLE InvestmentTrends (SectorID INT PRIMARY KEY, SectorName VARCHAR(50), Q1Investment DECIMAL, Q2Investment DECIMAL, Q3Investment DECIMAL, Q4Investment DECIMAL); INSERT INTO InvestmentTrends (SectorID, SectorName, Q1Investment, Q2Investment, Q3Investment, Q4Investment) VALUES (1, 'AI', 100000, 120000, 140000, 160000), (2, 'Blockchain', 80000, 90000, 100000, 110000), (3, 'IoT', 60000, 70000, 80000, 90000), (4, 'Cybersecurity', 90000, 100000, 110000, 120000), (5, 'Cloud Computing', 110000, 120000, 130000, 140000);","WITH UnpivotedInvestment AS (SELECT SectorName, Quarter, Investment FROM InvestmentTrends UNPIVOT (Investment FOR Quarter IN (Q1Investment, Q2Investment, Q3Investment, Q4Investment)) AS Unpvt) SELECT SectorName, Quarter, Investment FROM UnpivotedInvestment;",The query unpivots the quarterly investment columns into rows for each sector. This allows for easier comparison and analysis of investment trends over the last year.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a summary report showing the average innovation index for different regions and identify the region with the highest index.,"CREATE TABLE InnovationIndex (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), InnovationIndex DECIMAL); INSERT INTO InnovationIndex (RegionID, RegionName, InnovationIndex) VALUES (1, 'North America', 85.0), (2, 'Europe', 80.0), (3, 'Asia', 75.0), (4, 'South America', 70.0), (5, 'Africa', 65.0);","SELECT RegionName, InnovationIndex FROM InnovationIndex ORDER BY InnovationIndex DESC LIMIT 1;",The query selects the region with the highest innovation index by ordering the regions in descending order of their innovation index and limiting the result to the top one.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store data on various endangered species across different regions and then display the top 3 regions with the highest number of endangered species.,"CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), Region VARCHAR(50), EndangeredLevel VARCHAR(20)); INSERT INTO EndangeredSpecies (SpeciesID, SpeciesName, Region, EndangeredLevel) VALUES (1, 'Tiger', 'Asia', 'Critical'), (2, 'Panda', 'Asia', 'Endangered'), (3, 'Elephant', 'Africa', 'Vulnerable'), (4, 'Polar Bear', 'Arctic', 'Endangered'), (5, 'Koala', 'Australia', 'Vulnerable');","WITH RegionCount AS (SELECT Region, COUNT(SpeciesID) AS SpeciesCount FROM EndangeredSpecies GROUP BY Region) SELECT Region FROM RegionCount ORDER BY SpeciesCount DESC LIMIT 3;",The query creates a common table expression (CTE) to count the number of endangered species in each region. It then selects the top 3 regions with the highest number of endangered species.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store data on renewable energy projects and then display the total capacity of renewable energy for each type of energy source.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), EnergyType VARCHAR(50), CapacityMW DECIMAL); INSERT INTO RenewableProjects (ProjectID, ProjectName, EnergyType, CapacityMW) VALUES (1, 'Solar Farm A', 'Solar', 150.0), (2, 'Wind Farm B', 'Wind', 200.0), (3, 'Hydro Plant C', 'Hydro', 300.0), (4, 'Solar Farm D', 'Solar', 100.0), (5, 'Wind Farm E', 'Wind', 250.0);","SELECT EnergyType, SUM(CapacityMW) AS TotalCapacity FROM RenewableProjects GROUP BY EnergyType;",The query selects the total capacity of renewable energy for each type of energy source by summing the capacity in megawatts (MW) and grouping by the energy type.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store data on carbon emissions by country and then display the top 5 countries with the highest carbon emissions.,"CREATE TABLE CarbonEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Year INT, EmissionsMT DECIMAL); INSERT INTO CarbonEmissions (CountryID, CountryName, Year, EmissionsMT) VALUES (1, 'USA', 2020, 5000.0), (2, 'China', 2020, 10000.0), (3, 'India', 2020, 3000.0), (4, 'Russia', 2020, 2000.0), (5, 'Japan', 2020, 1500.0);","SELECT CountryName, EmissionsMT FROM CarbonEmissions ORDER BY EmissionsMT DESC LIMIT 5;",The query selects the top 5 countries with the highest carbon emissions by ordering the emissions in descending order and limiting the result to the top 5.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store data on deforestation rates in various countries and then display the average deforestation rate for each continent.,"CREATE TABLE DeforestationRates (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), Continent VARCHAR(50), DeforestationRate DECIMAL); INSERT INTO DeforestationRates (CountryID, CountryName, Continent, DeforestationRate) VALUES (1, 'Brazil', 'South America', 2.5), (2, 'Indonesia', 'Asia', 1.8), (3, 'Congo', 'Africa', 2.0), (4, 'Australia', 'Australia', 0.5), (5, 'Canada', 'North America', 0.3);","SELECT Continent, AVG(DeforestationRate) AS AvgDeforestationRate FROM DeforestationRates GROUP BY Continent;",The query calculates the average deforestation rate for each continent by grouping the data by continent and averaging the deforestation rates.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store data on water quality measurements in different rivers and then display the top 3 rivers with the best water quality.,"CREATE TABLE WaterQuality (MeasurementID INT PRIMARY KEY, RiverName VARCHAR(100), MeasurementDate DATE, QualityIndex DECIMAL); INSERT INTO WaterQuality (MeasurementID, RiverName, MeasurementDate, QualityIndex) VALUES (1, 'Amazon', '2023-01-01', 95.0), (2, 'Nile', '2023-01-01', 85.0), (3, 'Yangtze', '2023-01-01', 80.0), (4, 'Mississippi', '2023-01-01', 90.0), (5, 'Danube', '2023-01-01', 88.0);","SELECT RiverName, QualityIndex FROM WaterQuality ORDER BY QualityIndex DESC LIMIT 3;",The query selects the top 3 rivers with the best water quality by ordering the quality index in descending order and limiting the result to the top 3.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 regions with the highest average crop yield for wheat over the past 5 years.,"CREATE TABLE CropYields (Year INT, Region VARCHAR(50), Crop VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (Year, Region, Crop, Yield) VALUES (2018, 'North America', 'Wheat', 300.5), (2019, 'Europe', 'Wheat', 320.0), (2020, 'Asia', 'Wheat', 310.0), (2021, 'South America', 'Wheat', 330.0), (2022, 'Africa', 'Wheat', 340.0);","WITH WheatYields AS (SELECT Region, AVG(Yield) AS AvgYield FROM CropYields WHERE Crop = 'Wheat' AND Year BETWEEN 2018 AND 2022 GROUP BY Region) SELECT Region, AvgYield FROM WheatYields ORDER BY AvgYield DESC LIMIT 5;","The query creates a common table expression (CTE) to calculate the average yield of wheat for each region over the past 5 years. It then selects the top 5 regions with the highest average yield, ordering them in descending order."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find the total number of farms that have adopted sustainable farming practices in each region and display regions with more than 100 such farms.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, Region VARCHAR(50), SustainablePractices BOOLEAN); INSERT INTO Farms (FarmID, Region, SustainablePractices) VALUES (1, 'North America', TRUE), (2, 'Europe', TRUE), (3, 'Asia', FALSE), (4, 'South America', TRUE), (5, 'Africa', FALSE);","SELECT Region, COUNT(FarmID) AS SustainableFarms FROM Farms WHERE SustainablePractices = TRUE GROUP BY Region HAVING COUNT(FarmID) > 100;",The query counts the number of farms that have adopted sustainable farming practices in each region and filters the results to show only those regions with more than 100 such farms.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Calculate the average annual increase in crop yield for rice across all regions over the past decade.,"CREATE TABLE CropYields (Year INT, Region VARCHAR(50), Crop VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (Year, Region, Crop, Yield) VALUES (2013, 'North America', 'Rice', 200.5), (2014, 'Europe', 'Rice', 210.0), (2015, 'Asia', 'Rice', 220.0), (2016, 'South America', 'Rice', 230.0), (2017, 'Africa', 'Rice', 240.0);","WITH AnnualIncrease AS (SELECT Year, AVG(Yield) AS AvgYield FROM CropYields WHERE Crop = 'Rice' GROUP BY Year) SELECT AVG(AvgYield) AS AvgAnnualIncrease FROM AnnualIncrease;",The query calculates the average yield of rice for each year and then computes the average annual increase in yield over the past decade.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 3 crops with the highest total production in the last year and their respective regions.,"CREATE TABLE CropProduction (Year INT, Region VARCHAR(50), Crop VARCHAR(50), Production DECIMAL); INSERT INTO CropProduction (Year, Region, Crop, Production) VALUES (2022, 'North America', 'Corn', 500.5), (2022, 'Europe', 'Wheat', 600.0), (2022, 'Asia', 'Rice', 700.0), (2022, 'South America', 'Soybean', 800.0), (2022, 'Africa', 'Maize', 900.0);","WITH LastYearProduction AS (SELECT Crop, Region, SUM(Production) AS TotalProduction FROM CropProduction WHERE Year = 2022 GROUP BY Crop, Region) SELECT Crop, Region, TotalProduction FROM LastYearProduction ORDER BY TotalProduction DESC LIMIT 3;",The query calculates the total production of each crop in the last year and then selects the top 3 crops with the highest total production along with their respective regions.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a summary report of the average yield per hectare for different crops in each region and highlight regions with an average yield per hectare greater than 200.,"CREATE TABLE CropYields (Region VARCHAR(50), Crop VARCHAR(50), YieldPerHectare DECIMAL); INSERT INTO CropYields (Region, Crop, YieldPerHectare) VALUES ('North America', 'Corn', 250.5), ('Europe', 'Wheat', 220.0), ('Asia', 'Rice', 210.0), ('South America', 'Soybean', 230.0), ('Africa', 'Maize', 190.0);","SELECT Region, Crop, AVG(YieldPerHectare) AS AvgYieldPerHectare FROM CropYields GROUP BY Region, Crop HAVING AVG(YieldPerHectare) > 200;",The query calculates the average yield per hectare for different crops in each region and filters the results to show only those regions where the average yield per hectare is greater than 200.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the top 10 most-watched movies in different regions, and then display the top 3 movies with the highest average watch time.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(100), Region VARCHAR(50), WatchTime DECIMAL); INSERT INTO Movies (MovieID, MovieName, Region, WatchTime) VALUES (1, 'Inception', 'North America', 150.5), (2, 'Avatar', 'Europe', 200.0), (3, 'Titanic', 'Asia', 180.0), (4, 'The Dark Knight', 'North America', 170.7), (5, 'Interstellar', 'Europe', 160.0);","WITH RankedMovies AS (SELECT MovieName, AVG(WatchTime) AS AvgWatchTime, DENSE_RANK() OVER (ORDER BY AVG(WatchTime) DESC) AS Rank FROM Movies GROUP BY MovieName) SELECT MovieName, AvgWatchTime FROM RankedMovies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank movies based on their average watch time in descending order. It then selects the top 3 movies with the highest average watch time using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the monthly revenue generated by different streaming platforms, and then display the top 5 platforms with the highest average monthly revenue.","CREATE TABLE StreamingRevenue (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50), Month VARCHAR(20), Revenue DECIMAL); INSERT INTO StreamingRevenue (PlatformID, PlatformName, Month, Revenue) VALUES (1, 'Netflix', 'January', 500.0), (2, 'Hulu', 'February', 300.0), (3, 'Disney+', 'March', 400.0), (4, 'Amazon Prime', 'April', 450.0), (5, 'HBO Max', 'May', 350.0);","WITH RankedPlatforms AS (SELECT PlatformName, AVG(Revenue) AS AvgRevenue, DENSE_RANK() OVER (ORDER BY AVG(Revenue) DESC) AS Rank FROM StreamingRevenue GROUP BY PlatformName) SELECT PlatformName, AvgRevenue FROM RankedPlatforms WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank streaming platforms based on their average monthly revenue in descending order. It then selects the top 5 platforms with the highest average monthly revenue using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of episodes watched by users in different age groups, and then display the top 3 age groups with the highest average number of episodes watched.","CREATE TABLE UserEpisodes (UserID INT PRIMARY KEY, AgeGroup VARCHAR(20), EpisodesWatched INT); INSERT INTO UserEpisodes (UserID, AgeGroup, EpisodesWatched) VALUES (1, '18-24', 50), (2, '25-34', 70), (3, '35-44', 60), (4, '45-54', 40), (5, '55-64', 30);","WITH RankedAgeGroups AS (SELECT AgeGroup, AVG(EpisodesWatched) AS AvgEpisodesWatched, DENSE_RANK() OVER (ORDER BY AVG(EpisodesWatched) DESC) AS Rank FROM UserEpisodes GROUP BY AgeGroup) SELECT AgeGroup, AvgEpisodesWatched FROM RankedAgeGroups WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank age groups based on their average number of episodes watched in descending order. It then selects the top 3 age groups with the highest average number of episodes watched using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the engagement metrics for different social media posts, and then display the top 5 posts with the highest average engagement score.","CREATE TABLE SocialMediaEngagement (PostID INT PRIMARY KEY, PostContent VARCHAR(255), EngagementScore DECIMAL); INSERT INTO SocialMediaEngagement (PostID, PostContent, EngagementScore) VALUES (1, 'Post A', 85.5), (2, 'Post B', 90.0), (3, 'Post C', 75.0), (4, 'Post D', 95.7), (5, 'Post E', 80.0);","WITH RankedPosts AS (SELECT PostContent, AVG(EngagementScore) AS AvgEngagementScore, DENSE_RANK() OVER (ORDER BY AVG(EngagementScore) DESC) AS Rank FROM SocialMediaEngagement GROUP BY PostContent) SELECT PostContent, AvgEngagementScore FROM RankedPosts WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank social media posts based on their average engagement score in descending order. It then selects the top 5 posts with the highest average engagement score using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the subscription counts for different content creators, and then display the top 3 creators with the highest average subscription count.","CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50), SubscriptionCount INT); INSERT INTO ContentCreators (CreatorID, CreatorName, SubscriptionCount) VALUES (1, 'Creator A', 1000), (2, 'Creator B', 1500), (3, 'Creator C', 1200), (4, 'Creator D', 1800), (5, 'Creator E', 1100);","WITH RankedCreators AS (SELECT CreatorName, AVG(SubscriptionCount) AS AvgSubscriptionCount, DENSE_RANK() OVER (ORDER BY AVG(SubscriptionCount) DESC) AS Rank FROM ContentCreators GROUP BY CreatorName) SELECT CreatorName, AvgSubscriptionCount FROM RankedCreators WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank content creators based on their average subscription count in descending order. It then selects the top 3 creators with the highest average subscription count using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average temperature changes in different regions over the last decade, and then display the top 3 regions with the highest average temperature increase.","CREATE TABLE TemperatureChanges (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), AvgTempChange DECIMAL); INSERT INTO TemperatureChanges (RegionID, RegionName, AvgTempChange) VALUES (1, 'North America', 1.2), (2, 'Europe', 1.5), (3, 'Asia', 1.3), (4, 'Africa', 1.8), (5, 'South America', 1.1);","WITH RankedRegions AS (SELECT RegionName, AvgTempChange, DENSE_RANK() OVER (ORDER BY AvgTempChange DESC) AS Rank FROM TemperatureChanges) SELECT RegionName, AvgTempChange FROM RankedRegions WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank regions based on their average temperature change in descending order. It then selects the top 3 regions with the highest average temperature increase using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of endangered species in different countries, and then display the top 5 countries with the highest number of endangered species.","CREATE TABLE EndangeredSpecies (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), EndangeredSpeciesCount INT); INSERT INTO EndangeredSpecies (CountryID, CountryName, EndangeredSpeciesCount) VALUES (1, 'Brazil', 120), (2, 'Indonesia', 150), (3, 'India', 110), (4, 'Australia', 130), (5, 'China', 140);","WITH RankedCountries AS (SELECT CountryName, EndangeredSpeciesCount, DENSE_RANK() OVER (ORDER BY EndangeredSpeciesCount DESC) AS Rank FROM EndangeredSpecies) SELECT CountryName, EndangeredSpeciesCount FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank countries based on their number of endangered species in descending order. It then selects the top 5 countries with the highest number of endangered species using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the annual deforestation rates in various countries, and then display the top 3 countries with the highest deforestation rates.","CREATE TABLE DeforestationRates (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), AnnualDeforestationRate DECIMAL); INSERT INTO DeforestationRates (CountryID, CountryName, AnnualDeforestationRate) VALUES (1, 'Brazil', 0.5), (2, 'Indonesia', 0.7), (3, 'Congo', 0.6), (4, 'Peru', 0.4), (5, 'Malaysia', 0.3);","WITH RankedCountries AS (SELECT CountryName, AnnualDeforestationRate, DENSE_RANK() OVER (ORDER BY AnnualDeforestationRate DESC) AS Rank FROM DeforestationRates) SELECT CountryName, AnnualDeforestationRate FROM RankedCountries WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank countries based on their annual deforestation rates in descending order. It then selects the top 3 countries with the highest deforestation rates using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the renewable energy production in different countries, and then display the top 5 countries with the highest renewable energy production.","CREATE TABLE RenewableEnergy (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), EnergyProduction DECIMAL); INSERT INTO RenewableEnergy (CountryID, CountryName, EnergyProduction) VALUES (1, 'Germany', 200.5), (2, 'China', 300.0), (3, 'USA', 250.0), (4, 'India', 180.0), (5, 'Brazil', 220.0);","WITH RankedCountries AS (SELECT CountryName, EnergyProduction, DENSE_RANK() OVER (ORDER BY EnergyProduction DESC) AS Rank FROM RenewableEnergy) SELECT CountryName, EnergyProduction FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank countries based on their renewable energy production in descending order. It then selects the top 5 countries with the highest renewable energy production using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the carbon emissions reductions in various countries, and then display the top 3 countries with the highest reductions.","CREATE TABLE CarbonReductions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), ReductionAmount DECIMAL); INSERT INTO CarbonReductions (CountryID, CountryName, ReductionAmount) VALUES (1, 'Germany', 50.5), (2, 'China', 40.0), (3, 'USA', 45.0), (4, 'India', 30.0), (5, 'Brazil', 35.0);","WITH RankedCountries AS (SELECT CountryName, ReductionAmount, DENSE_RANK() OVER (ORDER BY ReductionAmount DESC) AS Rank FROM CarbonReductions) SELECT CountryName, ReductionAmount FROM RankedCountries WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank countries based on their carbon emissions reductions in descending order. It then selects the top 3 countries with the highest reductions using the DENSE_RANK function.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the total government spending on healthcare for each state and display states with spending over $1 billion.,"CREATE TABLE GovernmentSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), Category VARCHAR(50), Amount DECIMAL); INSERT INTO GovernmentSpending (StateID, StateName, Category, Amount) VALUES (1, 'California', 'Healthcare', 1500000000), (2, 'Texas', 'Healthcare', 800000000), (3, 'New York', 'Healthcare', 1200000000), (4, 'Florida', 'Healthcare', 950000000), (5, 'Illinois', 'Healthcare', 1100000000);","SELECT StateName, SUM(Amount) AS TotalSpending FROM GovernmentSpending WHERE Category = 'Healthcare' GROUP BY StateName HAVING SUM(Amount) > 1000000000;",The query calculates the total spending on healthcare for each state by summing the 'Amount' column for records where the 'Category' is 'Healthcare'. It then filters the results to include only those states where the total spending exceeds $1 billion.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",List the number of bills passed by each senator and display those who have passed more than 10 bills.,"CREATE TABLE Senators (SenatorID INT PRIMARY KEY, SenatorName VARCHAR(50)); CREATE TABLE Bills (BillID INT PRIMARY KEY, BillName VARCHAR(50), SenatorID INT, Status VARCHAR(50)); INSERT INTO Senators (SenatorID, SenatorName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'), (4, 'Bob Brown'), (5, 'Charlie Davis'); INSERT INTO Bills (BillID, BillName, SenatorID, Status) VALUES (1, 'Healthcare Reform', 1, 'Passed'), (2, 'Education Act', 2, 'Passed'), (3, 'Tax Cuts', 1, 'Passed'), (4, 'Infrastructure Bill', 3, 'Passed'), (5, 'Defense Budget', 1, 'Passed'), (6, 'Climate Change Act', 4, 'Passed'), (7, 'Immigration Reform', 1, 'Passed'), (8, 'Cybersecurity Act', 2, 'Passed'), (9, 'Healthcare Expansion', 1, 'Passed'), (10, 'Education Funding', 3, 'Passed'), (11, 'Tax Reform', 1, 'Passed');","SELECT s.SenatorName, COUNT(b.BillID) AS BillsPassed FROM Senators s JOIN Bills b ON s.SenatorID = b.SenatorID WHERE b.Status = 'Passed' GROUP BY s.SenatorName HAVING COUNT(b.BillID) > 10;",The query joins the 'Senators' and 'Bills' tables on 'SenatorID' and counts the number of bills passed by each senator. It then filters the results to include only those senators who have passed more than 10 bills.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Calculate the average age of citizens in each city and display cities with an average age above 40.,"CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, CitizenName VARCHAR(50), Age INT, CityID INT); CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(50)); INSERT INTO Citizens (CitizenID, CitizenName, Age, CityID) VALUES (1, 'John Doe', 45, 1), (2, 'Jane Smith', 38, 2), (3, 'Alice Johnson', 42, 1), (4, 'Bob Brown', 50, 3), (5, 'Charlie Davis', 35, 2); INSERT INTO Cities (CityID, CityName) VALUES (1, 'New York'), (2, 'Los Angeles'), (3, 'Chicago');","SELECT c.CityName, AVG(ci.Age) AS AverageAge FROM Cities c JOIN Citizens ci ON c.CityID = ci.CityID GROUP BY c.CityName HAVING AVG(ci.Age) > 40;",The query joins the 'Cities' and 'Citizens' tables on 'CityID' and calculates the average age of citizens in each city. It then filters the results to include only those cities where the average age is above 40.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the total number of citizens in each state and display states with more than 5 million citizens.,"CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(50)); CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, CitizenName VARCHAR(50), StateID INT); INSERT INTO States (StateID, StateName) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'), (4, 'Florida'), (5, 'Illinois'); INSERT INTO Citizens (CitizenID, CitizenName, StateID) VALUES (1, 'John Doe', 1), (2, 'Jane Smith', 2), (3, 'Alice Johnson', 3), (4, 'Bob Brown', 4), (5, 'Charlie Davis', 5), (6, 'David Wilson', 1), (7, 'Emma Thomas', 2), (8, 'Olivia White', 3), (9, 'Liam Harris', 4), (10, 'Noah Martin', 5);","SELECT s.StateName, COUNT(c.CitizenID) AS TotalCitizens FROM States s JOIN Citizens c ON s.StateID = c.StateID GROUP BY s.StateName HAVING COUNT(c.CitizenID) > 5000000;",The query joins the 'States' and 'Citizens' tables on 'StateID' and counts the total number of citizens in each state. It then filters the results to include only those states with more than 5 million citizens.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",List the total number of legislative sessions held in each year and display years with more than 50 sessions.,"CREATE TABLE LegislativeSessions (SessionID INT PRIMARY KEY, Year INT, SessionName VARCHAR(50)); INSERT INTO LegislativeSessions (SessionID, Year, SessionName) VALUES (1, 2020, 'Session 1'), (2, 2020, 'Session 2'), (3, 2021, 'Session 1'), (4, 2021, 'Session 2'), (5, 2022, 'Session 1'), (6, 2022, 'Session 2'), (7, 2020, 'Session 3'), (8, 2021, 'Session 3'), (9, 2022, 'Session 3'), (10, 2020, 'Session 4');","SELECT Year, COUNT(SessionID) AS TotalSessions FROM LegislativeSessions GROUP BY Year HAVING COUNT(SessionID) > 50;",The query counts the total number of legislative sessions held in each year by grouping the records by 'Year'. It then filters the results to include only those years with more than 50 sessions.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,List the top 10 countries with the highest average annual temperature.,"CREATE TABLE ClimateData (Country VARCHAR(50), Year INT, AvgAnnualTemp DECIMAL); INSERT INTO ClimateData (Country, Year, AvgAnnualTemp) VALUES ('USA', 2020, 12.5), ('Canada', 2020, 5.0), ('Australia', 2020, 21.5), ('India', 2020, 24.0), ('Brazil', 2020, 22.0);","SELECT Country, AVG(AvgAnnualTemp) AS AvgTemp FROM ClimateData GROUP BY Country ORDER BY AvgTemp DESC LIMIT 10;",The query calculates the average annual temperature for each country by grouping the data by country and then orders the results in descending order to list the top 10 countries with the highest average annual temperature.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Retrieve the total number of endangered species recorded in each continent.,"CREATE TABLE SpeciesData (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Continent VARCHAR(50), Status VARCHAR(50)); INSERT INTO SpeciesData (SpeciesID, SpeciesName, Continent, Status) VALUES (1, 'Tiger', 'Asia', 'Endangered'), (2, 'Panda', 'Asia', 'Endangered'), (3, 'Elephant', 'Africa', 'Endangered'), (4, 'Koala', 'Australia', 'Endangered'), (5, 'Polar Bear', 'North America', 'Endangered');","SELECT Continent, COUNT(*) AS EndangeredSpeciesCount FROM SpeciesData WHERE Status = 'Endangered' GROUP BY Continent;",The query counts the number of endangered species in each continent by filtering the records where the status is 'Endangered' and then groups the results by continent.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the average CO2 emissions per capita for each country in the year 2020.,"CREATE TABLE EmissionsData (Country VARCHAR(50), Year INT, CO2Emissions DECIMAL, Population INT); INSERT INTO EmissionsData (Country, Year, CO2Emissions, Population) VALUES ('USA', 2020, 5000, 331000000), ('Canada', 2020, 600, 37700000), ('Australia', 2020, 400, 25600000), ('India', 2020, 2500, 1380000000), ('Brazil', 2020, 2000, 212000000);","SELECT Country, (CO2Emissions / Population) AS CO2PerCapita FROM EmissionsData WHERE Year = 2020;",The query calculates the CO2 emissions per capita for each country by dividing the total CO2 emissions by the population for the year 2020.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Get the list of renewable energy projects initiated in the last 5 years.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), StartYear INT, EnergyType VARCHAR(50)); INSERT INTO RenewableProjects (ProjectID, ProjectName, StartYear, EnergyType) VALUES (1, 'Solar Farm A', 2018, 'Solar'), (2, 'Wind Turbine B', 2019, 'Wind'), (3, 'Hydro Plant C', 2020, 'Hydro'), (4, 'Geothermal D', 2021, 'Geothermal'), (5, 'Solar Farm E', 2022, 'Solar');","SELECT ProjectName, StartYear, EnergyType FROM RenewableProjects WHERE StartYear >= (YEAR(CURDATE()) - 5);","The query retrieves the names, start years, and energy types of renewable energy projects that were initiated in the last 5 years by filtering the records based on the start year."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show the average rainfall in millimeters for each region over the past decade.,"CREATE TABLE RainfallData (Region VARCHAR(50), Year INT, RainfallMM DECIMAL); INSERT INTO RainfallData (Region, Year, RainfallMM) VALUES ('North America', 2011, 800), ('Europe', 2011, 700), ('Asia', 2011, 1200), ('Africa', 2011, 600), ('Australia', 2011, 500);","SELECT Region, AVG(RainfallMM) AS AvgRainfall FROM RainfallData WHERE Year >= (YEAR(CURDATE()) - 10) GROUP BY Region;",The query calculates the average rainfall in millimeters for each region over the past decade by filtering the records based on the year and then grouping the results by region.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new hotel and update the average rating for all hotels in the 'Luxury' category.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Category VARCHAR(50), AvgRating DECIMAL); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, Rating DECIMAL, ReviewDate DATE);","WITH NewHotel AS (INSERT INTO Hotels (HotelID, HotelName, Category, AvgRating) VALUES (101, 'Grand Palace', 'Luxury', 0)), UpdatedRatings AS (SELECT HotelID, AVG(Rating) AS NewAvgRating FROM Reviews WHERE HotelID IN (SELECT HotelID FROM Hotels WHERE Category = 'Luxury') GROUP BY HotelID) UPDATE Hotels SET AvgRating = (SELECT NewAvgRating FROM UpdatedRatings WHERE Hotels.HotelID = UpdatedRatings.HotelID) WHERE Category = 'Luxury';","The query first inserts a new hotel into the Hotels table. Then, it calculates the new average ratings for all hotels in the 'Luxury' category using a common table expression (CTE) and updates the AvgRating field in the Hotels table accordingly."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Delete all customer records who have not made a booking in the last two years and update the total number of bookings for each hotel.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), LastBookingDate DATE); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, HotelID INT, BookingDate DATE); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), TotalBookings INT);","WITH InactiveCustomers AS (SELECT CustomerID FROM Customers WHERE LastBookingDate < DATEADD(YEAR, -2, GETDATE())), DeletedCustomers AS (DELETE FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM InactiveCustomers)), UpdatedBookings AS (SELECT HotelID, COUNT(*) AS NewTotalBookings FROM Bookings WHERE HotelID IN (SELECT HotelID FROM Hotels) GROUP BY HotelID) UPDATE Hotels SET TotalBookings = (SELECT NewTotalBookings FROM UpdatedBookings WHERE Hotels.HotelID = UpdatedBookings.HotelID);","The query first identifies and deletes customers who have not made a booking in the last two years. Then, it calculates the new total number of bookings for each hotel and updates the TotalBookings field in the Hotels table accordingly."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new travel package and update the total number of packages offered by each travel agency.,"CREATE TABLE TravelPackages (PackageID INT PRIMARY KEY, PackageName VARCHAR(100), AgencyID INT, Price DECIMAL); CREATE TABLE TravelAgencies (AgencyID INT PRIMARY KEY, AgencyName VARCHAR(100), TotalPackages INT);","WITH NewPackage AS (INSERT INTO TravelPackages (PackageID, PackageName, AgencyID, Price) VALUES (201, 'European Tour', 1, 2500.00)), UpdatedPackages AS (SELECT AgencyID, COUNT(*) AS NewTotalPackages FROM TravelPackages WHERE AgencyID IN (SELECT AgencyID FROM TravelAgencies) GROUP BY AgencyID) UPDATE TravelAgencies SET TotalPackages = (SELECT NewTotalPackages FROM UpdatedPackages WHERE TravelAgencies.AgencyID = UpdatedPackages.AgencyID);","The query first inserts a new travel package into the TravelPackages table. Then, it calculates the new total number of packages offered by each travel agency and updates the TotalPackages field in the TravelAgencies table accordingly."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the room availability status for all hotels based on recent bookings and delete outdated booking records.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), TotalRooms INT, AvailableRooms INT); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, BookingDate DATE, Status VARCHAR(50));","WITH RecentBookings AS (SELECT HotelID, COUNT(*) AS RecentBookingsCount FROM Bookings WHERE BookingDate > DATEADD(MONTH, -1, GETDATE()) AND Status = 'Confirmed' GROUP BY HotelID), UpdatedAvailability AS (SELECT HotelID, TotalRooms - RecentBookingsCount AS NewAvailableRooms FROM Hotels JOIN RecentBookings ON Hotels.HotelID = RecentBookings.HotelID) UPDATE Hotels SET AvailableRooms = (SELECT NewAvailableRooms FROM UpdatedAvailability WHERE Hotels.HotelID = UpdatedAvailability.HotelID); DELETE FROM Bookings WHERE BookingDate < DATEADD(YEAR, -1, GETDATE());","The query first calculates the number of recent bookings for each hotel and updates the AvailableRooms field in the Hotels table accordingly. Then, it deletes booking records that are older than one year."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new tourist attraction and update the total number of attractions in each city.,"CREATE TABLE TouristAttractions (AttractionID INT PRIMARY KEY, AttractionName VARCHAR(100), CityID INT, EntryFee DECIMAL); CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(100), TotalAttractions INT);","WITH NewAttraction AS (INSERT INTO TouristAttractions (AttractionID, AttractionName, CityID, EntryFee) VALUES (301, 'Ancient Ruins', 2, 15.00)), UpdatedAttractions AS (SELECT CityID, COUNT(*) AS NewTotalAttractions FROM TouristAttractions WHERE CityID IN (SELECT CityID FROM Cities) GROUP BY CityID) UPDATE Cities SET TotalAttractions = (SELECT NewTotalAttractions FROM UpdatedAttractions WHERE Cities.CityID = UpdatedAttractions.CityID);","The query first inserts a new tourist attraction into the TouristAttractions table. Then, it calculates the new total number of attractions in each city and updates the TotalAttractions field in the Cities table accordingly."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average treatment success rate for different age groups and genders, and identify any significant differences in outcomes between these groups.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MedicalHistory TEXT); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentProtocol VARCHAR(100), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","WITH AgeGenderGroups AS (SELECT Age, Gender, COUNT(*) AS TotalPatients, SUM(CASE WHEN Outcome = 'Success' THEN 1 ELSE 0 END) AS SuccessfulTreatments FROM Patients P JOIN Treatments T ON P.PatientID = T.PatientID GROUP BY Age, Gender), SuccessRates AS (SELECT Age, Gender, (SuccessfulTreatments * 1.0 / TotalPatients) AS SuccessRate FROM AgeGenderGroups) SELECT Age, Gender, SuccessRate FROM SuccessRates;",The query first creates a common table expression (CTE) to group patients by age and gender and calculate the total number of patients and successful treatments for each group. It then calculates the success rate for each age and gender group and selects these rates for the final report.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Identify the top 3 drugs with the highest efficacy rates for treating hypertension, and compare their side effects profiles.","CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), EfficacyRate DECIMAL); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, DrugID INT, SideEffectDescription TEXT, FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID)); CREATE TABLE Patients (PatientID INT PRIMARY KEY, Condition VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, DrugID INT, Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID));","WITH TopDrugs AS (SELECT DrugName, EfficacyRate, DENSE_RANK() OVER (ORDER BY EfficacyRate DESC) AS Rank FROM Drugs WHERE DrugID IN (SELECT DrugID FROM Treatments WHERE Condition = 'Hypertension')) SELECT DrugName, EfficacyRate FROM TopDrugs WHERE Rank <= 3;",The query first creates a common table expression (CTE) to rank drugs by their efficacy rates for treating hypertension. It then selects the top 3 drugs based on these efficacy rates.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard that shows the distribution of different medical conditions across various age groups and genders.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MedicalCondition VARCHAR(100));","WITH ConditionDistribution AS (SELECT Age, Gender, MedicalCondition, COUNT(*) AS ConditionCount FROM Patients GROUP BY Age, Gender, MedicalCondition) SELECT Age, Gender, MedicalCondition, ConditionCount FROM ConditionDistribution;","The query creates a common table expression (CTE) to group patients by age, gender, and medical condition, and count the number of occurrences for each condition. It then selects these counts for the final dashboard."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the correlation between patient demographics and the likelihood of experiencing severe side effects from a specific drug.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MedicalHistory TEXT); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, DrugID INT, Outcome VARCHAR(50), SideEffectSeverity VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50));","WITH DemographicSideEffects AS (SELECT Age, Gender, COUNT(*) AS TotalPatients, SUM(CASE WHEN SideEffectSeverity = 'Severe' THEN 1 ELSE 0 END) AS SevereSideEffects FROM Patients P JOIN Treatments T ON P.PatientID = T.PatientID WHERE DrugID = (SELECT DrugID FROM Drugs WHERE DrugName = 'SpecificDrug') GROUP BY Age, Gender) SELECT Age, Gender, (SevereSideEffects * 1.0 / TotalPatients) AS SevereSideEffectRate FROM DemographicSideEffects;",The query first creates a common table expression (CTE) to group patients by age and gender and calculate the total number of patients and severe side effects for each group. It then calculates the rate of severe side effects for each demographic group and selects these rates for the final report.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the effectiveness of different treatment protocols for diabetes and identify which protocol has the best outcomes.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Condition VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentProtocol VARCHAR(100), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","WITH ProtocolEffectiveness AS (SELECT TreatmentProtocol, COUNT(*) AS TotalTreatments, SUM(CASE WHEN Outcome = 'Success' THEN 1 ELSE 0 END) AS SuccessfulTreatments FROM Treatments WHERE PatientID IN (SELECT PatientID FROM Patients WHERE Condition = 'Diabetes') GROUP BY TreatmentProtocol) SELECT TreatmentProtocol, (SuccessfulTreatments * 1.0 / TotalTreatments) AS SuccessRate FROM ProtocolEffectiveness ORDER BY SuccessRate DESC LIMIT 1;",The query first creates a common table expression (CTE) to group treatments by protocol and calculate the total number of treatments and successful treatments for each protocol. It then calculates the success rate for each protocol and selects the protocol with the highest success rate.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average crop yield for different crops across various regions, and then display the top 3 regions with the highest average yield for each crop.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgYield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, AvgYield) VALUES (1, 'Wheat', 'North America', 3.5), (2, 'Corn', 'Europe', 4.0), (3, 'Rice', 'Asia', 5.0), (4, 'Soybean', 'South America', 2.5), (5, 'Barley', 'Australia', 3.0);","WITH RankedRegions AS (SELECT CropName, Region, AvgYield, DENSE_RANK() OVER (PARTITION BY CropName ORDER BY AvgYield DESC) AS Rank FROM CropYield) SELECT CropName, Region, AvgYield FROM RankedRegions WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank regions based on their average crop yield for each crop in descending order. It then selects the top 3 regions with the highest average yield for each crop using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total fertilizer usage for different crops across various regions, and then display the top 2 crops with the highest fertilizer usage in each region.","CREATE TABLE FertilizerUsage (UsageID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), TotalUsage DECIMAL); INSERT INTO FertilizerUsage (UsageID, CropName, Region, TotalUsage) VALUES (1, 'Wheat', 'North America', 150.0), (2, 'Corn', 'Europe', 200.0), (3, 'Rice', 'Asia', 250.0), (4, 'Soybean', 'South America', 100.0), (5, 'Barley', 'Australia', 120.0);","WITH RankedCrops AS (SELECT CropName, Region, TotalUsage, DENSE_RANK() OVER (PARTITION BY Region ORDER BY TotalUsage DESC) AS Rank FROM FertilizerUsage) SELECT CropName, Region, TotalUsage FROM RankedCrops WHERE Rank <= 2;",The query creates a common table expression (CTE) to rank crops based on their total fertilizer usage in each region in descending order. It then selects the top 2 crops with the highest fertilizer usage in each region using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average water usage for different farming practices across various regions, and then display the top 3 farming practices with the lowest average water usage globally.","CREATE TABLE WaterUsage (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), Region VARCHAR(50), AvgWaterUsage DECIMAL); INSERT INTO WaterUsage (PracticeID, PracticeName, Region, AvgWaterUsage) VALUES (1, 'Drip Irrigation', 'North America', 50.0), (2, 'Sprinkler Irrigation', 'Europe', 70.0), (3, 'Flood Irrigation', 'Asia', 100.0), (4, 'Furrow Irrigation', 'South America', 80.0), (5, 'Center Pivot Irrigation', 'Australia', 60.0);","WITH RankedPractices AS (SELECT PracticeName, AvgWaterUsage, DENSE_RANK() OVER (ORDER BY AvgWaterUsage ASC) AS Rank FROM WaterUsage) SELECT PracticeName, AvgWaterUsage FROM RankedPractices WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank farming practices based on their average water usage globally in ascending order. It then selects the top 3 farming practices with the lowest average water usage using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total pesticide usage for different crops across various regions, and then display the top 2 regions with the highest pesticide usage for each crop.","CREATE TABLE PesticideUsage (UsageID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), TotalUsage DECIMAL); INSERT INTO PesticideUsage (UsageID, CropName, Region, TotalUsage) VALUES (1, 'Wheat', 'North America', 80.0), (2, 'Corn', 'Europe', 90.0), (3, 'Rice', 'Asia', 120.0), (4, 'Soybean', 'South America', 70.0), (5, 'Barley', 'Australia', 60.0);","WITH RankedRegions AS (SELECT CropName, Region, TotalUsage, DENSE_RANK() OVER (PARTITION BY CropName ORDER BY TotalUsage DESC) AS Rank FROM PesticideUsage) SELECT CropName, Region, TotalUsage FROM RankedRegions WHERE Rank <= 2;",The query creates a common table expression (CTE) to rank regions based on their total pesticide usage for each crop in descending order. It then selects the top 2 regions with the highest pesticide usage for each crop using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average soil quality index for different regions, and then display the top 3 regions with the highest soil quality index.","CREATE TABLE SoilQuality (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), AvgSoilQualityIndex DECIMAL); INSERT INTO SoilQuality (RegionID, RegionName, AvgSoilQualityIndex) VALUES (1, 'North America', 85.0), (2, 'Europe', 90.0), (3, 'Asia', 75.0), (4, 'South America', 80.0), (5, 'Australia', 70.0);","WITH RankedRegions AS (SELECT RegionName, AvgSoilQualityIndex, DENSE_RANK() OVER (ORDER BY AvgSoilQualityIndex DESC) AS Rank FROM SoilQuality) SELECT RegionName, AvgSoilQualityIndex FROM RankedRegions WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank regions based on their average soil quality index in descending order. It then selects the top 3 regions with the highest soil quality index using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Calculate the total carbon emissions reduced by each renewable energy project and list the top 3 projects with the highest reductions.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), EnergyProduced DECIMAL, CarbonReduction DECIMAL); CREATE TABLE ProjectRegions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE ProjectAssignments (AssignmentID INT PRIMARY KEY, ProjectID INT, RegionID INT, FOREIGN KEY (ProjectID) REFERENCES RenewableProjects(ProjectID), FOREIGN KEY (RegionID) REFERENCES ProjectRegions(RegionID));","WITH ProjectReductions AS (SELECT ProjectName, SUM(CarbonReduction) AS TotalReduction FROM RenewableProjects GROUP BY ProjectName) SELECT ProjectName, TotalReduction FROM ProjectReductions ORDER BY TotalReduction DESC LIMIT 3;","The query first creates a common table expression (CTE) named ProjectReductions that calculates the total carbon reduction for each project by summing the CarbonReduction column. It then selects the project names and their total reductions, ordering them in descending order and limiting the results to the top 3 projects."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the average biodiversity index for each conservation area and identify those with an index above 80.,"CREATE TABLE ConservationAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(100), BiodiversityIndex DECIMAL); CREATE TABLE AreaRegions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE AreaAssignments (AssignmentID INT PRIMARY KEY, AreaID INT, RegionID INT, FOREIGN KEY (AreaID) REFERENCES ConservationAreas(AreaID), FOREIGN KEY (RegionID) REFERENCES AreaRegions(RegionID));","SELECT AreaName, AVG(BiodiversityIndex) AS AvgBiodiversity FROM ConservationAreas GROUP BY AreaName HAVING AVG(BiodiversityIndex) > 80;",The query calculates the average biodiversity index for each conservation area by grouping the data by AreaName and using the AVG function on the BiodiversityIndex column. It then filters the results to include only those areas with an average biodiversity index greater than 80.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Determine the total funding allocated to each sustainable development initiative and find those that have received more than $1 million.,"CREATE TABLE DevelopmentInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(100), Funding DECIMAL); CREATE TABLE InitiativeRegions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE InitiativeAssignments (AssignmentID INT PRIMARY KEY, InitiativeID INT, RegionID INT, FOREIGN KEY (InitiativeID) REFERENCES DevelopmentInitiatives(InitiativeID), FOREIGN KEY (RegionID) REFERENCES InitiativeRegions(RegionID));","SELECT InitiativeName, SUM(Funding) AS TotalFunding FROM DevelopmentInitiatives GROUP BY InitiativeName HAVING SUM(Funding) > 1000000;",The query calculates the total funding for each sustainable development initiative by grouping the data by InitiativeName and using the SUM function on the Funding column. It then filters the results to include only those initiatives with total funding exceeding $1 million.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",List the top 5 regions with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureRecords (RecordID INT PRIMARY KEY, RegionID INT, Year INT, AvgTemperature DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100));","WITH AvgTempIncrease AS (SELECT RegionID, AVG(AvgTemperature) AS AvgTemp FROM TemperatureRecords WHERE Year BETWEEN YEAR(CURDATE()) - 10 AND YEAR(CURDATE()) GROUP BY RegionID) SELECT RegionName, AvgTemp FROM AvgTempIncrease JOIN Regions ON AvgTempIncrease.RegionID = Regions.RegionID ORDER BY AvgTemp DESC LIMIT 5;","The query first creates a common table expression (CTE) named AvgTempIncrease that calculates the average temperature for each region over the past decade. It then selects the region names and their average temperatures, ordering them in descending order and limiting the results to the top 5 regions."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Identify the top 3 species with the highest population growth rate in protected areas.,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), PopulationGrowthRate DECIMAL); CREATE TABLE ProtectedAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(100)); CREATE TABLE SpeciesAssignments (AssignmentID INT PRIMARY KEY, SpeciesID INT, AreaID INT, FOREIGN KEY (SpeciesID) REFERENCES Species(SpeciesID), FOREIGN KEY (AreaID) REFERENCES ProtectedAreas(AreaID));","WITH SpeciesGrowth AS (SELECT SpeciesName, AVG(PopulationGrowthRate) AS AvgGrowthRate FROM Species GROUP BY SpeciesName) SELECT SpeciesName, AvgGrowthRate FROM SpeciesGrowth ORDER BY AvgGrowthRate DESC LIMIT 3;","The query first creates a common table expression (CTE) named SpeciesGrowth that calculates the average population growth rate for each species by grouping the data by SpeciesName and using the AVG function on the PopulationGrowthRate column. It then selects the species names and their average growth rates, ordering them in descending order and limiting the results to the top 3 species."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Show the top 3 companies with the highest average investment in AI research over the past 5 years.,"CREATE TABLE AIInvestments (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Year INT, InvestmentAmount DECIMAL); INSERT INTO AIInvestments (CompanyID, CompanyName, Year, InvestmentAmount) VALUES (1, 'TechCorp', 2019, 5000000), (2, 'InnovateX', 2019, 3000000), (3, 'FutureTech', 2019, 4500000), (1, 'TechCorp', 2020, 5500000), (2, 'InnovateX', 2020, 3200000), (3, 'FutureTech', 2020, 4700000), (1, 'TechCorp', 2021, 6000000), (2, 'InnovateX', 2021, 3500000), (3, 'FutureTech', 2021, 4900000), (1, 'TechCorp', 2022, 6500000), (2, 'InnovateX', 2022, 3700000), (3, 'FutureTech', 2022, 5100000), (1, 'TechCorp', 2023, 7000000), (2, 'InnovateX', 2023, 4000000), (3, 'FutureTech', 2023, 5300000);","SELECT CompanyName, AVG(InvestmentAmount) AS AvgInvestment FROM AIInvestments WHERE Year BETWEEN 2019 AND 2023 GROUP BY CompanyName ORDER BY AvgInvestment DESC LIMIT 3;",The query calculates the average investment amount in AI research for each company over the past 5 years. It then selects the top 3 companies with the highest average investment by using the AVG function and ordering the results in descending order.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total revenue generated by each product category in the last quarter.,"CREATE TABLE ProductSales (SaleID INT PRIMARY KEY, ProductCategory VARCHAR(50), SaleDate DATE, Revenue DECIMAL); INSERT INTO ProductSales (SaleID, ProductCategory, SaleDate, Revenue) VALUES (1, 'Software', '2023-07-15', 15000), (2, 'Hardware', '2023-07-20', 20000), (3, 'Services', '2023-07-25', 10000), (4, 'Software', '2023-08-10', 17000), (5, 'Hardware', '2023-08-15', 22000), (6, 'Services', '2023-08-20', 12000), (7, 'Software', '2023-09-05', 16000), (8, 'Hardware', '2023-09-10', 21000), (9, 'Services', '2023-09-15', 11000);","SELECT ProductCategory, SUM(Revenue) AS TotalRevenue FROM ProductSales WHERE SaleDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY ProductCategory;",The query sums up the revenue for each product category for sales made in the last quarter. It uses the SUM function to aggregate the revenue and groups the results by product category.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find the average customer satisfaction score for each region in the last year.,"CREATE TABLE CustomerFeedback (FeedbackID INT PRIMARY KEY, Region VARCHAR(50), FeedbackDate DATE, SatisfactionScore INT); INSERT INTO CustomerFeedback (FeedbackID, Region, FeedbackDate, SatisfactionScore) VALUES (1, 'North America', '2022-01-15', 8), (2, 'Europe', '2022-02-20', 7), (3, 'Asia', '2022-03-25', 9), (4, 'North America', '2022-04-10', 8), (5, 'Europe', '2022-05-15', 6), (6, 'Asia', '2022-06-20', 9), (7, 'North America', '2022-07-05', 7), (8, 'Europe', '2022-08-10', 8), (9, 'Asia', '2022-09-15', 9);","SELECT Region, AVG(SatisfactionScore) AS AvgSatisfaction FROM CustomerFeedback WHERE FeedbackDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Region;",The query calculates the average customer satisfaction score for each region over the last year. It uses the AVG function to compute the average score and groups the results by region.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 most popular emerging technologies based on the number of mentions in industry reports.,"CREATE TABLE IndustryReports (ReportID INT PRIMARY KEY, Technology VARCHAR(50), Mentions INT); INSERT INTO IndustryReports (ReportID, Technology, Mentions) VALUES (1, 'AI', 150), (2, 'Blockchain', 120), (3, 'IoT', 130), (4, 'Quantum Computing', 90), (5, '5G', 110), (6, 'AI', 160), (7, 'Blockchain', 130), (8, 'IoT', 140), (9, 'Quantum Computing', 100), (10, '5G', 120);","SELECT Technology, SUM(Mentions) AS TotalMentions FROM IndustryReports GROUP BY Technology ORDER BY TotalMentions DESC LIMIT 5;",The query sums up the number of mentions for each emerging technology in industry reports. It then selects the top 5 technologies with the highest total mentions by using the SUM function and ordering the results in descending order.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the regions with the highest average innovation index over the past decade.,"CREATE TABLE InnovationIndex (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, InnovationScore DECIMAL); INSERT INTO InnovationIndex (RegionID, RegionName, Year, InnovationScore) VALUES (1, 'North America', 2013, 75.5), (2, 'Europe', 2013, 70.0), (3, 'Asia', 2013, 65.0), (1, 'North America', 2014, 76.0), (2, 'Europe', 2014, 71.0), (3, 'Asia', 2014, 66.0), (1, 'North America', 2015, 77.0), (2, 'Europe', 2015, 72.0), (3, 'Asia', 2015, 67.0), (1, 'North America', 2016, 78.0), (2, 'Europe', 2016, 73.0), (3, 'Asia', 2016, 68.0), (1, 'North America', 2017, 79.0), (2, 'Europe', 2017, 74.0), (3, 'Asia', 2017, 69.0), (1, 'North America', 2018, 80.0), (2, 'Europe', 2018, 75.0), (3, 'Asia', 2018, 70.0), (1, 'North America', 2019, 81.0), (2, 'Europe', 2019, 76.0), (3, 'Asia', 2019, 71.0), (1, 'North America', 2020, 82.0), (2, 'Europe', 2020, 77.0), (3, 'Asia', 2020, 72.0), (1, 'North America', 2021, 83.0), (2, 'Europe', 2021, 78.0), (3, 'Asia', 2021, 73.0), (1, 'North America', 2022, 84.0), (2, 'Europe', 2022, 79.0), (3, 'Asia', 2022, 74.0), (1, 'North America', 2023, 85.0), (2, 'Europe', 2023, 80.0), (3, 'Asia', 2023, 75.0);","SELECT RegionName, AVG(InnovationScore) AS AvgInnovation FROM InnovationIndex WHERE Year BETWEEN 2013 AND 2023 GROUP BY RegionName ORDER BY AvgInnovation DESC;",The query calculates the average innovation index for each region over the past decade. It uses the AVG function to compute the average score and orders the results in descending order to identify the regions with the highest average innovation index.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 3 athletes with the highest average scores in basketball games for the current season.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, GameDate DATE, Season VARCHAR(20)); CREATE TABLE Scores (ScoreID INT PRIMARY KEY, AthleteID INT, GameID INT, Points INT, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (GameID) REFERENCES Games(GameID));","WITH AvgScores AS (SELECT AthleteID, AVG(Points) AS AvgPoints FROM Scores INNER JOIN Games ON Scores.GameID = Games.GameID WHERE Games.Season = '2023' GROUP BY AthleteID) SELECT AthleteName, AvgPoints FROM AvgScores INNER JOIN Athletes ON AvgScores.AthleteID = Athletes.AthleteID ORDER BY AvgPoints DESC LIMIT 3;",The query first calculates the average points scored by each athlete in the current season using a common table expression (CTE). It then joins this result with the Athletes table to get the athlete names and selects the top 3 athletes based on their average points.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the total revenue generated from ticket sales for each football match in the 2022 season.,"CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, Season VARCHAR(20)); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, MatchID INT, TicketsSold INT, TicketPrice DECIMAL, FOREIGN KEY (MatchID) REFERENCES Matches(MatchID));","SELECT MatchID, SUM(TicketsSold * TicketPrice) AS TotalRevenue FROM TicketSales INNER JOIN Matches ON TicketSales.MatchID = Matches.MatchID WHERE Matches.Season = '2022' GROUP BY MatchID;",The query calculates the total revenue for each football match by multiplying the number of tickets sold by the ticket price and summing these values for each match in the 2022 season.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 most attended sports events in 2021 along with the event names and attendance numbers.,"CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE, Season VARCHAR(20)); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, EventID INT, Attendees INT, FOREIGN KEY (EventID) REFERENCES Events(EventID));","SELECT EventName, Attendees FROM Events INNER JOIN Attendance ON Events.EventID = Attendance.EventID WHERE Events.Season = '2021' ORDER BY Attendees DESC LIMIT 5;","The query joins the Events and Attendance tables to get the event names and attendance numbers, then selects the top 5 most attended events in the 2021 season."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Determine the average ticket price for baseball games in different regions for the 2023 season.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE BaseballGames (GameID INT PRIMARY KEY, GameDate DATE, Season VARCHAR(20), RegionID INT, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)); CREATE TABLE TicketPrices (PriceID INT PRIMARY KEY, GameID INT, TicketPrice DECIMAL, FOREIGN KEY (GameID) REFERENCES BaseballGames(GameID));","SELECT RegionName, AVG(TicketPrice) AS AvgTicketPrice FROM TicketPrices INNER JOIN BaseballGames ON TicketPrices.GameID = BaseballGames.GameID INNER JOIN Regions ON BaseballGames.RegionID = Regions.RegionID WHERE BaseballGames.Season = '2023' GROUP BY RegionName;","The query calculates the average ticket price for baseball games in different regions by joining the TicketPrices, BaseballGames, and Regions tables and grouping the results by region for the 2023 season."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 teams with the highest average fan engagement scores in the 2022 season.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, TeamID INT, Season VARCHAR(20), EngagementScore DECIMAL, FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","WITH AvgEngagement AS (SELECT TeamID, AVG(EngagementScore) AS AvgScore FROM FanEngagement WHERE Season = '2022' GROUP BY TeamID) SELECT TeamName, AvgScore FROM AvgEngagement INNER JOIN Teams ON AvgEngagement.TeamID = Teams.TeamID ORDER BY AvgScore DESC LIMIT 5;",The query first calculates the average fan engagement score for each team in the 2022 season using a common table expression (CTE). It then joins this result with the Teams table to get the team names and selects the top 5 teams based on their average engagement scores.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Find the top 5 most-watched movies and TV shows across different regions, excluding any content that has been flagged for review.","CREATE TABLE MediaConsumption (ContentID INT PRIMARY KEY, ContentType VARCHAR(50), Title VARCHAR(100), Region VARCHAR(50), WatchCount INT, FlaggedForReview BOOLEAN); CREATE TABLE ContentDetails (ContentID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseDate DATE);","WITH RankedContent AS (SELECT Title, WatchCount, DENSE_RANK() OVER (ORDER BY WatchCount DESC) AS Rank FROM MediaConsumption WHERE FlaggedForReview = FALSE) SELECT Title, WatchCount FROM RankedContent WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank movies and TV shows based on their watch count in descending order, excluding any content flagged for review. It then selects the top 5 most-watched titles using the DENSE_RANK function."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Retrieve the total revenue generated from different genres of movies and TV shows, excluding any content that has been removed from the platform.","CREATE TABLE RevenueStreams (ContentID INT PRIMARY KEY, Genre VARCHAR(50), Revenue DECIMAL, RemovedFromPlatform BOOLEAN); CREATE TABLE ContentDetails (ContentID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseDate DATE);","SELECT Genre, SUM(Revenue) AS TotalRevenue FROM RevenueStreams WHERE RemovedFromPlatform = FALSE GROUP BY Genre;",The query calculates the total revenue generated from each genre by summing up the revenue for all content that has not been removed from the platform. It groups the results by genre.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Identify the top 3 genres with the highest average audience engagement, excluding any content that has been flagged for inappropriate content.","CREATE TABLE AudienceEngagement (ContentID INT PRIMARY KEY, Genre VARCHAR(50), EngagementScore DECIMAL, FlaggedInappropriate BOOLEAN); CREATE TABLE ContentDetails (ContentID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseDate DATE);","WITH GenreEngagement AS (SELECT Genre, AVG(EngagementScore) AS AvgEngagement FROM AudienceEngagement WHERE FlaggedInappropriate = FALSE GROUP BY Genre), RankedGenres AS (SELECT Genre, AvgEngagement, DENSE_RANK() OVER (ORDER BY AvgEngagement DESC) AS Rank FROM GenreEngagement) SELECT Genre, AvgEngagement FROM RankedGenres WHERE Rank <= 3;","The query first calculates the average engagement score for each genre, excluding any content flagged as inappropriate. It then ranks the genres based on their average engagement score in descending order and selects the top 3 genres."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,List the unique titles of content that are available in both North America and Europe but not in Asia.,"CREATE TABLE MediaAvailability (ContentID INT PRIMARY KEY, Title VARCHAR(100), Region VARCHAR(50)); CREATE TABLE ContentDetails (ContentID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseDate DATE);",SELECT Title FROM MediaAvailability WHERE Region = 'North America' INTERSECT SELECT Title FROM MediaAvailability WHERE Region = 'Europe' EXCEPT SELECT Title FROM MediaAvailability WHERE Region = 'Asia';,The query finds the titles of content that are available in both North America and Europe by using the INTERSECT operation. It then excludes any titles that are available in Asia using the EXCEPT operation.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Fetch the list of content creators who have produced content in multiple genres, excluding any creators who have been flagged for policy violations.","CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(100), FlaggedForPolicyViolation BOOLEAN); CREATE TABLE CreatorContent (CreatorID INT, ContentID INT, PRIMARY KEY (CreatorID, ContentID)); CREATE TABLE ContentDetails (ContentID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseDate DATE);",SELECT CreatorName FROM ContentCreators WHERE CreatorID IN (SELECT CreatorID FROM CreatorContent GROUP BY CreatorID HAVING COUNT(DISTINCT Genre) > 1) AND FlaggedForPolicyViolation = FALSE;,The query identifies content creators who have produced content in multiple genres by grouping the content they have created and counting the distinct genres. It then filters out any creators who have been flagged for policy violations.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the sales records to reflect a 10% increase in sales for electric vehicles in Europe and then display the updated sales records.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), Sales INT); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, Region, Sales) VALUES (1, 101, 'Europe', 500), (2, 102, 'North America', 300), (3, 103, 'Asia', 450), (4, 104, 'Europe', 600), (5, 105, 'Europe', 700); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (101, 'Model X', 'Electric'), (102, 'Model Y', 'Electric'), (103, 'Model Z', 'Hybrid'), (104, 'Model A', 'Electric'), (105, 'Model B', 'Diesel');",UPDATE VehicleSales SET Sales = Sales * 1.1 FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type = 'Electric' AND VS.Region = 'Europe'; SELECT * FROM VehicleSales;,The query first updates the sales records by increasing the sales by 10% for electric vehicles in Europe using an INNER JOIN between VehicleSales and Vehicles tables. It then selects and displays the updated sales records.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Delete records of vehicles that have not been sold in the last year and then display the remaining vehicles.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate) VALUES (1, 101, '2022-01-15'), (2, 102, '2021-12-20'), (3, 103, '2020-11-10'), (4, 104, '2022-03-05'), (5, 105, '2021-07-25'); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (101, 'Model X', 'Electric'), (102, 'Model Y', 'Electric'), (103, 'Model Z', 'Hybrid'), (104, 'Model A', 'Electric'), (105, 'Model B', 'Diesel');","DELETE FROM Vehicles WHERE VehicleID NOT IN (SELECT VehicleID FROM VehicleSales WHERE SaleDate >= DATEADD(YEAR, -1, GETDATE())); SELECT * FROM Vehicles;",The query deletes records from the Vehicles table where the vehicles have not been sold in the last year by using a subquery to filter out VehicleIDs that have sales within the past year. It then selects and displays the remaining vehicles.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert new records for hybrid vehicles sold in Asia and then display the updated sales records.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), Sales INT); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, Region, Sales) VALUES (1, 101, 'Europe', 500), (2, 102, 'North America', 300), (3, 103, 'Asia', 450), (4, 104, 'Europe', 600), (5, 105, 'Asia', 700); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (101, 'Model X', 'Electric'), (102, 'Model Y', 'Electric'), (103, 'Model Z', 'Hybrid'), (104, 'Model A', 'Electric'), (105, 'Model B', 'Diesel');","INSERT INTO VehicleSales (SaleID, VehicleID, Region, Sales) VALUES (6, 106, 'Asia', 300), (7, 107, 'Asia', 400); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (106, 'Model C', 'Hybrid'), (107, 'Model D', 'Hybrid'); SELECT * FROM VehicleSales;",The query inserts new records for hybrid vehicles sold in Asia into both the VehicleSales and Vehicles tables. It then selects and displays the updated sales records.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the vehicle types to 'Electric' for all vehicles sold in North America and then display the updated vehicle records.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), Sales INT); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, Region, Sales) VALUES (1, 101, 'Europe', 500), (2, 102, 'North America', 300), (3, 103, 'Asia', 450), (4, 104, 'Europe', 600), (5, 105, 'North America', 700); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (101, 'Model X', 'Electric'), (102, 'Model Y', 'Electric'), (103, 'Model Z', 'Hybrid'), (104, 'Model A', 'Electric'), (105, 'Model B', 'Diesel');",UPDATE Vehicles SET Type = 'Electric' FROM Vehicles V INNER JOIN VehicleSales VS ON V.VehicleID = VS.VehicleID WHERE VS.Region = 'North America'; SELECT * FROM Vehicles;,The query updates the vehicle types to 'Electric' for all vehicles sold in North America by using an INNER JOIN between the Vehicles and VehicleSales tables. It then selects and displays the updated vehicle records.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert new sales records for diesel vehicles in Asia and then display the updated sales records.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), Sales INT); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, Region, Sales) VALUES (1, 101, 'Europe', 500), (2, 102, 'North America', 300), (3, 103, 'Asia', 450), (4, 104, 'Europe', 600), (5, 105, 'Asia', 700); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (101, 'Model X', 'Electric'), (102, 'Model Y', 'Electric'), (103, 'Model Z', 'Hybrid'), (104, 'Model A', 'Electric'), (105, 'Model B', 'Diesel');","INSERT INTO VehicleSales (SaleID, VehicleID, Region, Sales) VALUES (6, 108, 'Asia', 350), (7, 109, 'Asia', 450); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (108, 'Model E', 'Diesel'), (109, 'Model F', 'Diesel'); SELECT * FROM VehicleSales;",The query inserts new sales records for diesel vehicles in Asia into both the VehicleSales and Vehicles tables. It then selects and displays the updated sales records.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Retrieve the top 3 most innovative companies in the AI sector based on their innovation score.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50), InnovationScore DECIMAL); INSERT INTO Companies (CompanyID, CompanyName, Sector, InnovationScore) VALUES (1, 'OpenAI', 'AI', 95.5), (2, 'DeepMind', 'AI', 92.3), (3, 'Nvidia', 'AI', 89.7), (4, 'IBM', 'AI', 85.4), (5, 'Google', 'AI', 88.9);","SELECT CompanyName, InnovationScore FROM Companies WHERE Sector = 'AI' ORDER BY InnovationScore DESC LIMIT 3;","The query selects the company names and their innovation scores from the Companies table where the sector is 'AI', orders them by innovation score in descending order, and limits the result to the top 3 companies."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,List the top 5 countries investing in renewable energy technologies based on total investment.,"CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, Country VARCHAR(50), Technology VARCHAR(50), TotalInvestment DECIMAL); INSERT INTO Investments (InvestmentID, Country, Technology, TotalInvestment) VALUES (1, 'USA', 'Renewable Energy', 5000000), (2, 'China', 'Renewable Energy', 7000000), (3, 'Germany', 'Renewable Energy', 3000000), (4, 'India', 'Renewable Energy', 4000000), (5, 'Brazil', 'Renewable Energy', 2000000);","SELECT Country, TotalInvestment FROM Investments WHERE Technology = 'Renewable Energy' ORDER BY TotalInvestment DESC LIMIT 5;","The query selects the country names and their total investments from the Investments table where the technology is 'Renewable Energy', orders them by total investment in descending order, and limits the result to the top 5 countries."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the average market share of companies in the blockchain sector.,"CREATE TABLE MarketShare (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50), MarketShare DECIMAL); INSERT INTO MarketShare (CompanyID, CompanyName, Sector, MarketShare) VALUES (1, 'Company A', 'Blockchain', 15.2), (2, 'Company B', 'Blockchain', 20.3), (3, 'Company C', 'Blockchain', 10.5), (4, 'Company D', 'Blockchain', 12.7), (5, 'Company E', 'Blockchain', 18.4);",SELECT AVG(MarketShare) AS AvgMarketShare FROM MarketShare WHERE Sector = 'Blockchain';,The query calculates the average market share of companies in the blockchain sector by selecting the average of the MarketShare column from the MarketShare table where the sector is 'Blockchain'.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Identify the top 3 regions with the highest adoption rate of 5G technology.,"CREATE TABLE 5GAdoption (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), AdoptionRate DECIMAL); INSERT INTO 5GAdoption (RegionID, RegionName, AdoptionRate) VALUES (1, 'North America', 75.3), (2, 'Europe', 68.4), (3, 'Asia', 80.1), (4, 'South America', 55.2), (5, 'Africa', 40.7);","SELECT RegionName, AdoptionRate FROM 5GAdoption ORDER BY AdoptionRate DESC LIMIT 3;","The query selects the region names and their adoption rates from the 5GAdoption table, orders them by adoption rate in descending order, and limits the result to the top 3 regions."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Get the total number of patents filed in the biotechnology sector over the last year.,"CREATE TABLE Patents (PatentID INT PRIMARY KEY, Sector VARCHAR(50), FilingDate DATE); INSERT INTO Patents (PatentID, Sector, FilingDate) VALUES (1, 'Biotechnology', '2022-01-15'), (2, 'Biotechnology', '2022-03-22'), (3, 'Biotechnology', '2022-07-30'), (4, 'Biotechnology', '2022-11-05'), (5, 'Biotechnology', '2022-12-18');",SELECT COUNT(*) AS TotalPatents FROM Patents WHERE Sector = 'Biotechnology' AND FilingDate BETWEEN '2022-01-01' AND '2022-12-31';,The query counts the total number of patents filed in the biotechnology sector by selecting the count of rows from the Patents table where the sector is 'Biotechnology' and the filing date is within the last year (2022).
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average age of patients for each treatment type.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(50)); CREATE TABLE PatientTreatments (PatientID INT, TreatmentID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));","WITH AvgAge AS (SELECT T.TreatmentName, AVG(P.Age) AS AvgAge FROM Patients P JOIN PatientTreatments PT ON P.PatientID = PT.PatientID JOIN Treatments T ON PT.TreatmentID = T.TreatmentID GROUP BY T.TreatmentName) SELECT TreatmentName, AvgAge FROM AvgAge;","The query calculates the average age of patients for each treatment type by joining the Patients, PatientTreatments, and Treatments tables. It uses a common table expression (CTE) to group the data by treatment type and compute the average age."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",List the top 3 most common side effects for each drug.,"CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, SideEffectName VARCHAR(50)); CREATE TABLE DrugSideEffects (DrugID INT, SideEffectID INT, Occurrences INT, FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID), FOREIGN KEY (SideEffectID) REFERENCES SideEffects(SideEffectID));","WITH RankedSideEffects AS (SELECT D.DrugName, S.SideEffectName, DS.Occurrences, ROW_NUMBER() OVER (PARTITION BY D.DrugName ORDER BY DS.Occurrences DESC) AS Rank FROM Drugs D JOIN DrugSideEffects DS ON D.DrugID = DS.DrugID JOIN SideEffects S ON DS.SideEffectID = S.SideEffectID) SELECT DrugName, SideEffectName, Occurrences FROM RankedSideEffects WHERE Rank <= 3;","The query identifies the top 3 most common side effects for each drug by joining the Drugs, DrugSideEffects, and SideEffects tables. It uses a common table expression (CTE) to rank the side effects by their occurrences for each drug and then selects the top 3."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the total number of patients treated by each doctor.,"CREATE TABLE Doctors (DoctorID INT PRIMARY KEY, DoctorName VARCHAR(50)); CREATE TABLE PatientDoctors (PatientID INT, DoctorID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DoctorID) REFERENCES Doctors(DoctorID));","WITH PatientCount AS (SELECT D.DoctorName, COUNT(PD.PatientID) AS TotalPatients FROM Doctors D JOIN PatientDoctors PD ON D.DoctorID = PD.DoctorID GROUP BY D.DoctorName) SELECT DoctorName, TotalPatients FROM PatientCount;",The query calculates the total number of patients treated by each doctor by joining the Doctors and PatientDoctors tables. It uses a common table expression (CTE) to group the data by doctor and count the number of patients.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average length of hospital stay for patients based on their medical condition.,"CREATE TABLE MedicalConditions (ConditionID INT PRIMARY KEY, ConditionName VARCHAR(50)); CREATE TABLE HospitalStays (StayID INT PRIMARY KEY, PatientID INT, ConditionID INT, LengthOfStay INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (ConditionID) REFERENCES MedicalConditions(ConditionID));","WITH AvgStay AS (SELECT MC.ConditionName, AVG(HS.LengthOfStay) AS AvgLengthOfStay FROM MedicalConditions MC JOIN HospitalStays HS ON MC.ConditionID = HS.ConditionID GROUP BY MC.ConditionName) SELECT ConditionName, AvgLengthOfStay FROM AvgStay;",The query calculates the average length of hospital stay for patients based on their medical condition by joining the MedicalConditions and HospitalStays tables. It uses a common table expression (CTE) to group the data by medical condition and compute the average length of stay.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",List the number of patients who experienced each side effect for a specific drug.,"CREATE TABLE DrugPatients (DrugID INT, PatientID INT, FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","WITH SideEffectCount AS (SELECT S.SideEffectName, COUNT(DP.PatientID) AS PatientCount FROM SideEffects S JOIN DrugSideEffects DS ON S.SideEffectID = DS.SideEffectID JOIN DrugPatients DP ON DS.DrugID = DP.DrugID GROUP BY S.SideEffectName) SELECT SideEffectName, PatientCount FROM SideEffectCount;","The query lists the number of patients who experienced each side effect for a specific drug by joining the SideEffects, DrugSideEffects, and DrugPatients tables. It uses a common table expression (CTE) to group the data by side effect and count the number of patients."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,data retrieval: basic data fetching queries,Show the top 3 most innovative companies in the AI sector based on their R&D expenditure.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE RnDExpenditure (ExpenditureID INT PRIMARY KEY, CompanyID INT, Year INT, Amount DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); INSERT INTO Companies (CompanyID, CompanyName, Sector) VALUES (1, 'Tech Innovators', 'AI'), (2, 'Future AI', 'AI'), (3, 'AI Pioneers', 'AI'), (4, 'Tech Giants', 'Software'), (5, 'Innovative Solutions', 'AI'); INSERT INTO RnDExpenditure (ExpenditureID, CompanyID, Year, Amount) VALUES (1, 1, 2022, 5000000), (2, 2, 2022, 4500000), (3, 3, 2022, 4700000), (4, 4, 2022, 3000000), (5, 5, 2022, 4800000);","WITH RankedCompanies AS (SELECT c.CompanyName, r.Amount, DENSE_RANK() OVER (ORDER BY r.Amount DESC) AS Rank FROM Companies c JOIN RnDExpenditure r ON c.CompanyID = r.CompanyID WHERE c.Sector = 'AI') SELECT CompanyName, Amount FROM RankedCompanies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank AI companies based on their R&D expenditure in descending order. It then selects the top 3 companies using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,data retrieval: basic data fetching queries,Retrieve the top 5 countries leading in renewable energy patents filed in the last decade.,"CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(100)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CountryID INT, Year INT, Technology VARCHAR(50)); INSERT INTO Countries (CountryID, CountryName) VALUES (1, 'USA'), (2, 'Germany'), (3, 'China'), (4, 'Japan'), (5, 'India'); INSERT INTO Patents (PatentID, CountryID, Year, Technology) VALUES (1, 1, 2015, 'Renewable Energy'), (2, 2, 2016, 'Renewable Energy'), (3, 3, 2017, 'Renewable Energy'), (4, 4, 2018, 'Renewable Energy'), (5, 5, 2019, 'Renewable Energy'), (6, 1, 2020, 'Renewable Energy'), (7, 2, 2021, 'Renewable Energy'), (8, 3, 2022, 'Renewable Energy'), (9, 4, 2023, 'Renewable Energy'), (10, 5, 2023, 'Renewable Energy');","WITH PatentCounts AS (SELECT c.CountryName, COUNT(p.PatentID) AS PatentCount FROM Countries c JOIN Patents p ON c.CountryID = p.CountryID WHERE p.Technology = 'Renewable Energy' AND p.Year >= 2013 GROUP BY c.CountryName), RankedCountries AS (SELECT CountryName, PatentCount, DENSE_RANK() OVER (ORDER BY PatentCount DESC) AS Rank FROM PatentCounts) SELECT CountryName, PatentCount FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to count the number of renewable energy patents filed by each country in the last decade. It then ranks the countries based on the patent count and selects the top 5 using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,data retrieval: basic data fetching queries,List the top 5 most popular programming languages based on the number of job postings in the last year.,"CREATE TABLE ProgrammingLanguages (LanguageID INT PRIMARY KEY, LanguageName VARCHAR(50)); CREATE TABLE JobPostings (JobID INT PRIMARY KEY, LanguageID INT, Year INT, JobCount INT, FOREIGN KEY (LanguageID) REFERENCES ProgrammingLanguages(LanguageID)); INSERT INTO ProgrammingLanguages (LanguageID, LanguageName) VALUES (1, 'Python'), (2, 'JavaScript'), (3, 'Java'), (4, 'C#'), (5, 'Ruby'); INSERT INTO JobPostings (JobID, LanguageID, Year, JobCount) VALUES (1, 1, 2022, 15000), (2, 2, 2022, 12000), (3, 3, 2022, 10000), (4, 4, 2022, 8000), (5, 5, 2022, 5000);","WITH RankedLanguages AS (SELECT l.LanguageName, j.JobCount, DENSE_RANK() OVER (ORDER BY j.JobCount DESC) AS Rank FROM ProgrammingLanguages l JOIN JobPostings j ON l.LanguageID = j.LanguageID WHERE j.Year = 2022) SELECT LanguageName, JobCount FROM RankedLanguages WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank programming languages based on the number of job postings in the last year. It then selects the top 5 languages using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,data retrieval: basic data fetching queries,Identify the top 3 cities with the highest number of tech startups founded in the last 5 years.,"CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(100)); CREATE TABLE Startups (StartupID INT PRIMARY KEY, CityID INT, YearFounded INT, Sector VARCHAR(50), FOREIGN KEY (CityID) REFERENCES Cities(CityID)); INSERT INTO Cities (CityID, CityName) VALUES (1, 'San Francisco'), (2, 'New York'), (3, 'Berlin'), (4, 'London'), (5, 'Bangalore'); INSERT INTO Startups (StartupID, CityID, YearFounded, Sector) VALUES (1, 1, 2019, 'Tech'), (2, 2, 2020, 'Tech'), (3, 3, 2021, 'Tech'), (4, 4, 2022, 'Tech'), (5, 5, 2023, 'Tech'), (6, 1, 2021, 'Tech'), (7, 2, 2022, 'Tech'), (8, 3, 2023, 'Tech'), (9, 4, 2019, 'Tech'), (10, 5, 2020, 'Tech');","WITH StartupCounts AS (SELECT c.CityName, COUNT(s.StartupID) AS StartupCount FROM Cities c JOIN Startups s ON c.CityID = s.CityID WHERE s.YearFounded >= 2018 GROUP BY c.CityName), RankedCities AS (SELECT CityName, StartupCount, DENSE_RANK() OVER (ORDER BY StartupCount DESC) AS Rank FROM StartupCounts) SELECT CityName, StartupCount FROM RankedCities WHERE Rank <= 3;",The query creates a common table expression (CTE) to count the number of tech startups founded in each city in the last 5 years. It then ranks the cities based on the startup count and selects the top 3 using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,data retrieval: basic data fetching queries,Find the top 5 universities producing the most graduates in data science programs over the past 3 years.,"CREATE TABLE Universities (UniversityID INT PRIMARY KEY, UniversityName VARCHAR(100)); CREATE TABLE Graduates (GraduateID INT PRIMARY KEY, UniversityID INT, Year INT, Program VARCHAR(50), GraduateCount INT, FOREIGN KEY (UniversityID) REFERENCES Universities(UniversityID)); INSERT INTO Universities (UniversityID, UniversityName) VALUES (1, 'MIT'), (2, 'Stanford'), (3, 'Harvard'), (4, 'UC Berkeley'), (5, 'Carnegie Mellon'); INSERT INTO Graduates (GraduateID, UniversityID, Year, Program, GraduateCount) VALUES (1, 1, 2020, 'Data Science', 200), (2, 2, 2020, 'Data Science', 180), (3, 3, 2020, 'Data Science', 150), (4, 4, 2020, 'Data Science', 170), (5, 5, 2020, 'Data Science', 160), (6, 1, 2021, 'Data Science', 210), (7, 2, 2021, 'Data Science', 190), (8, 3, 2021, 'Data Science', 160), (9, 4, 2021, 'Data Science', 180), (10, 5, 2021, 'Data Science', 170), (11, 1, 2022, 'Data Science', 220), (12, 2, 2022, 'Data Science', 200), (13, 3, 2022, 'Data Science', 170), (14, 4, 2022, 'Data Science', 190), (15, 5, 2022, 'Data Science', 180);","WITH GraduateCounts AS (SELECT u.UniversityName, SUM(g.GraduateCount) AS TotalGraduates FROM Universities u JOIN Graduates g ON u.UniversityID = g.UniversityID WHERE g.Program = 'Data Science' AND g.Year >= 2020 GROUP BY u.UniversityName), RankedUniversities AS (SELECT UniversityName, TotalGraduates, DENSE_RANK() OVER (ORDER BY TotalGraduates DESC) AS Rank FROM GraduateCounts) SELECT UniversityName, TotalGraduates FROM RankedUniversities WHERE Rank <= 5;",The query creates a common table expression (CTE) to sum the number of data science graduates from each university over the past 3 years. It then ranks the universities based on the total number of graduates and selects the top 5 using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 most innovative companies in the AI sector based on their R&D expenditure and number of patents filed in the last year.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE RnDExpenditure (CompanyID INT, Year INT, Expenditure DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyID INT, FilingYear INT, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH RecentRnD AS (SELECT CompanyID, SUM(Expenditure) AS TotalExpenditure FROM RnDExpenditure WHERE Year = YEAR(CURDATE()) - 1 GROUP BY CompanyID), RecentPatents AS (SELECT CompanyID, COUNT(PatentID) AS PatentCount FROM Patents WHERE FilingYear = YEAR(CURDATE()) - 1 GROUP BY CompanyID) SELECT c.CompanyName, rr.TotalExpenditure, rp.PatentCount FROM Companies c INNER JOIN RecentRnD rr ON c.CompanyID = rr.CompanyID INNER JOIN RecentPatents rp ON c.CompanyID = rp.CompanyID ORDER BY rr.TotalExpenditure DESC, rp.PatentCount DESC LIMIT 5;","The query first creates two common table expressions (CTEs) to aggregate R&D expenditure and patent counts for the last year. It then joins these CTEs with the Companies table to fetch the company names and orders the results by R&D expenditure and patent count in descending order, limiting the output to the top 5 companies."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard that shows the quarterly revenue growth for companies in the renewable energy sector over the past two years.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE Revenue (CompanyID INT, Quarter INT, Year INT, Revenue DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH QuarterlyRevenue AS (SELECT CompanyID, Year, Quarter, SUM(Revenue) AS TotalRevenue FROM Revenue WHERE Year >= YEAR(CURDATE()) - 2 AND Sector = 'Renewable Energy' GROUP BY CompanyID, Year, Quarter) SELECT c.CompanyName, qr.Year, qr.Quarter, qr.TotalRevenue FROM Companies c INNER JOIN QuarterlyRevenue qr ON c.CompanyID = qr.CompanyID ORDER BY c.CompanyName, qr.Year, qr.Quarter;","The query creates a common table expression (CTE) to aggregate quarterly revenue for companies in the renewable energy sector over the past two years. It then joins this CTE with the Companies table to fetch the company names and orders the results by company name, year, and quarter."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 10 technology startups by market valuation and the number of funding rounds they have completed in the last three years.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(100), Sector VARCHAR(50), MarketValuation DECIMAL); CREATE TABLE FundingRounds (RoundID INT PRIMARY KEY, StartupID INT, Year INT, FOREIGN KEY (StartupID) REFERENCES Startups(StartupID));","WITH RecentFunding AS (SELECT StartupID, COUNT(RoundID) AS FundingCount FROM FundingRounds WHERE Year >= YEAR(CURDATE()) - 3 GROUP BY StartupID) SELECT s.StartupName, s.MarketValuation, rf.FundingCount FROM Startups s INNER JOIN RecentFunding rf ON s.StartupID = rf.StartupID ORDER BY s.MarketValuation DESC, rf.FundingCount DESC LIMIT 10;","The query creates a common table expression (CTE) to count the number of funding rounds for each startup in the last three years. It then joins this CTE with the Startups table to fetch the startup names and market valuations, ordering the results by market valuation and funding count in descending order, limiting the output to the top 10 startups."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the adoption rate of blockchain technology across different industries over the past five years.,"CREATE TABLE Industries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(100)); CREATE TABLE BlockchainAdoption (AdoptionID INT PRIMARY KEY, IndustryID INT, Year INT, AdoptionRate DECIMAL, FOREIGN KEY (IndustryID) REFERENCES Industries(IndustryID));","SELECT i.IndustryName, ba.Year, ba.AdoptionRate FROM Industries i INNER JOIN BlockchainAdoption ba ON i.IndustryID = ba.IndustryID WHERE ba.Year >= YEAR(CURDATE()) - 5 ORDER BY i.IndustryName, ba.Year;",The query joins the Industries table with the BlockchainAdoption table to fetch the industry names and adoption rates for blockchain technology over the past five years. It orders the results by industry name and year.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Create a summary of the top 5 countries leading in 5G technology deployment based on the number of 5G towers and the total investment in 5G infrastructure.,"CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(100)); CREATE TABLE 5GTowers (TowerID INT PRIMARY KEY, CountryID INT, Year INT, TowerCount INT, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID)); CREATE TABLE 5GInvestment (InvestmentID INT PRIMARY KEY, CountryID INT, Year INT, Investment DECIMAL, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));","WITH RecentTowers AS (SELECT CountryID, SUM(TowerCount) AS TotalTowers FROM 5GTowers WHERE Year = YEAR(CURDATE()) GROUP BY CountryID), RecentInvestment AS (SELECT CountryID, SUM(Investment) AS TotalInvestment FROM 5GInvestment WHERE Year = YEAR(CURDATE()) GROUP BY CountryID) SELECT c.CountryName, rt.TotalTowers, ri.TotalInvestment FROM Countries c INNER JOIN RecentTowers rt ON c.CountryID = rt.CountryID INNER JOIN RecentInvestment ri ON c.CountryID = ri.CountryID ORDER BY rt.TotalTowers DESC, ri.TotalInvestment DESC LIMIT 5;","The query creates two common table expressions (CTEs) to aggregate the number of 5G towers and total investment in 5G infrastructure for the current year. It then joins these CTEs with the Countries table to fetch the country names and orders the results by the number of towers and total investment in descending order, limiting the output to the top 5 countries."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total sales and average price of electric vehicles (EVs) sold in 2022, and compare it with hybrid vehicles (HVs) sold in the same year. Ensure the transaction is committed only if both queries are successful.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleType VARCHAR(50), SaleDate DATE, Price DECIMAL); CREATE TABLE VehicleDetails (VehicleID INT PRIMARY KEY, VehicleType VARCHAR(50), ModelName VARCHAR(50), Manufacturer VARCHAR(50));","BEGIN; WITH EVSales AS (SELECT COUNT(*) AS TotalSales, AVG(Price) AS AvgPrice FROM VehicleSales WHERE VehicleType = 'EV' AND YEAR(SaleDate) = 2022), HVSales AS (SELECT COUNT(*) AS TotalSales, AVG(Price) AS AvgPrice FROM VehicleSales WHERE VehicleType = 'HV' AND YEAR(SaleDate) = 2022) SELECT 'EV' AS VehicleType, TotalSales, AvgPrice FROM EVSales UNION ALL SELECT 'HV' AS VehicleType, TotalSales, AvgPrice FROM HVSales; COMMIT;","The query first starts a transaction with BEGIN. It then creates two common table expressions (CTEs), EVSales and HVSales, to calculate the total sales and average price of electric vehicles and hybrid vehicles sold in 2022, respectively. The results from both CTEs are combined using UNION ALL. Finally, the transaction is committed with COMMIT."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 manufacturers by total sales revenue in 2021 and compare them with the top 3 manufacturers by total sales revenue in 2022. Ensure the transaction is committed only if both queries are successful.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, Price DECIMAL); CREATE TABLE VehicleDetails (VehicleID INT PRIMARY KEY, Manufacturer VARCHAR(50), ModelName VARCHAR(50));","BEGIN; WITH Sales2021 AS (SELECT Manufacturer, SUM(Price) AS TotalRevenue FROM VehicleSales VS JOIN VehicleDetails VD ON VS.VehicleID = VD.VehicleID WHERE YEAR(SaleDate) = 2021 GROUP BY Manufacturer ORDER BY TotalRevenue DESC LIMIT 3), Sales2022 AS (SELECT Manufacturer, SUM(Price) AS TotalRevenue FROM VehicleSales VS JOIN VehicleDetails VD ON VS.VehicleID = VD.VehicleID WHERE YEAR(SaleDate) = 2022 GROUP BY Manufacturer ORDER BY TotalRevenue DESC LIMIT 3) SELECT * FROM Sales2021 UNION ALL SELECT * FROM Sales2022; COMMIT;","The query begins a transaction with BEGIN. It then creates two common table expressions (CTEs), Sales2021 and Sales2022, to calculate the top 3 manufacturers by total sales revenue for the years 2021 and 2022, respectively. The results from both CTEs are combined using UNION ALL. Finally, the transaction is committed with COMMIT."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the list of vehicle models that were sold in both 2020 and 2021 but not in 2022. Ensure the transaction is committed only if the query is successful.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE); CREATE TABLE VehicleDetails (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50));","BEGIN; WITH Sales2020 AS (SELECT DISTINCT VehicleID FROM VehicleSales WHERE YEAR(SaleDate) = 2020), Sales2021 AS (SELECT DISTINCT VehicleID FROM VehicleSales WHERE YEAR(SaleDate) = 2021), Sales2022 AS (SELECT DISTINCT VehicleID FROM VehicleSales WHERE YEAR(SaleDate) = 2022) SELECT ModelName FROM VehicleDetails WHERE VehicleID IN (SELECT VehicleID FROM Sales2020 INTERSECT SELECT VehicleID FROM Sales2021 EXCEPT SELECT VehicleID FROM Sales2022); COMMIT;","The query begins a transaction with BEGIN. It then creates three common table expressions (CTEs), Sales2020, Sales2021, and Sales2022, to get the distinct VehicleIDs sold in the years 2020, 2021, and 2022, respectively. The final SELECT statement retrieves the ModelNames of vehicles that were sold in both 2020 and 2021 but not in 2022 using INTERSECT and EXCEPT set operations. Finally, the transaction is committed with COMMIT."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List all the vehicle models that have never been sold in North America. Ensure the transaction is committed only if the query is successful.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE); CREATE TABLE VehicleDetails (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50));",BEGIN; WITH NorthAmericaSales AS (SELECT DISTINCT VehicleID FROM VehicleSales WHERE Region = 'North America') SELECT ModelName FROM VehicleDetails WHERE VehicleID NOT IN (SELECT VehicleID FROM NorthAmericaSales); COMMIT;,"The query begins a transaction with BEGIN. It then creates a common table expression (CTE), NorthAmericaSales, to get the distinct VehicleIDs sold in North America. The final SELECT statement retrieves the ModelNames of vehicles that have never been sold in North America using a NOT IN clause. Finally, the transaction is committed with COMMIT."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total number of vehicles sold and the total revenue generated by each manufacturer in 2021, and compare it with the same metrics in 2022. Ensure the transaction is committed only if both queries are successful.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, Price DECIMAL); CREATE TABLE VehicleDetails (VehicleID INT PRIMARY KEY, Manufacturer VARCHAR(50), ModelName VARCHAR(50));","BEGIN; WITH Sales2021 AS (SELECT Manufacturer, COUNT(*) AS TotalVehicles, SUM(Price) AS TotalRevenue FROM VehicleSales VS JOIN VehicleDetails VD ON VS.VehicleID = VD.VehicleID WHERE YEAR(SaleDate) = 2021 GROUP BY Manufacturer), Sales2022 AS (SELECT Manufacturer, COUNT(*) AS TotalVehicles, SUM(Price) AS TotalRevenue FROM VehicleSales VS JOIN VehicleDetails VD ON VS.VehicleID = VD.VehicleID WHERE YEAR(SaleDate) = 2022 GROUP BY Manufacturer) SELECT * FROM Sales2021 UNION ALL SELECT * FROM Sales2022; COMMIT;","The query begins a transaction with BEGIN. It then creates two common table expressions (CTEs), Sales2021 and Sales2022, to calculate the total number of vehicles sold and the total revenue generated by each manufacturer for the years 2021 and 2022, respectively. The results from both CTEs are combined using UNION ALL. Finally, the transaction is committed with COMMIT."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 sustainable fashion brands based on consumer ratings and exclude those that have been flagged for unethical practices.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(100), IsSustainable BOOLEAN, IsFlagged BOOLEAN); CREATE TABLE ConsumerRatings (RatingID INT PRIMARY KEY, BrandID INT, Rating DECIMAL, FOREIGN KEY (BrandID) REFERENCES FashionBrands(BrandID)); INSERT INTO FashionBrands (BrandID, BrandName, IsSustainable, IsFlagged) VALUES (1, 'EcoWear', TRUE, FALSE), (2, 'GreenThreads', TRUE, TRUE), (3, 'SustainStyle', TRUE, FALSE), (4, 'FastFashion', FALSE, FALSE), (5, 'EthicalElegance', TRUE, FALSE); INSERT INTO ConsumerRatings (RatingID, BrandID, Rating) VALUES (1, 1, 4.5), (2, 2, 4.0), (3, 3, 4.7), (4, 4, 3.2), (5, 5, 4.8);","WITH SustainableBrands AS (SELECT BrandID, BrandName FROM FashionBrands WHERE IsSustainable = TRUE AND IsFlagged = FALSE), TopRatedBrands AS (SELECT BrandID, AVG(Rating) AS AvgRating FROM ConsumerRatings GROUP BY BrandID) SELECT BrandName, AvgRating FROM SustainableBrands INNER JOIN TopRatedBrands ON SustainableBrands.BrandID = TopRatedBrands.BrandID ORDER BY AvgRating DESC LIMIT 3;","The query first creates a common table expression (CTE) to filter out sustainable and non-flagged brands. It then calculates the average rating for each brand and joins this result with the filtered brands. Finally, it selects the top 3 brands based on average rating."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the regions where sustainable fashion brands have the highest average consumer ratings and exclude regions with less than 3 brands.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(100), IsSustainable BOOLEAN, Region VARCHAR(50)); CREATE TABLE ConsumerRatings (RatingID INT PRIMARY KEY, BrandID INT, Rating DECIMAL, FOREIGN KEY (BrandID) REFERENCES FashionBrands(BrandID)); INSERT INTO FashionBrands (BrandID, BrandName, IsSustainable, Region) VALUES (1, 'EcoWear', TRUE, 'North America'), (2, 'GreenThreads', TRUE, 'Europe'), (3, 'SustainStyle', TRUE, 'Asia'), (4, 'FastFashion', FALSE, 'North America'), (5, 'EthicalElegance', TRUE, 'Europe'); INSERT INTO ConsumerRatings (RatingID, BrandID, Rating) VALUES (1, 1, 4.5), (2, 2, 4.0), (3, 3, 4.7), (4, 4, 3.2), (5, 5, 4.8);","WITH SustainableBrands AS (SELECT BrandID, Region FROM FashionBrands WHERE IsSustainable = TRUE), RegionRatings AS (SELECT Region, AVG(Rating) AS AvgRating FROM ConsumerRatings INNER JOIN SustainableBrands ON ConsumerRatings.BrandID = SustainableBrands.BrandID GROUP BY Region HAVING COUNT(DISTINCT SustainableBrands.BrandID) >= 3) SELECT Region, AvgRating FROM RegionRatings ORDER BY AvgRating DESC;","The query first creates a CTE to filter out sustainable brands. It then calculates the average rating for each region, including only those regions with at least 3 sustainable brands. Finally, it selects and orders the regions by their average rating in descending order."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 5 fashion trends based on consumer mentions and exclude trends that have been marked as outdated.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), IsOutdated BOOLEAN); CREATE TABLE ConsumerMentions (MentionID INT PRIMARY KEY, TrendID INT, MentionCount INT, FOREIGN KEY (TrendID) REFERENCES FashionTrends(TrendID)); INSERT INTO FashionTrends (TrendID, TrendName, IsOutdated) VALUES (1, 'Vintage', FALSE), (2, 'Minimalism', FALSE), (3, 'Athleisure', FALSE), (4, 'Boho', TRUE), (5, 'Streetwear', FALSE); INSERT INTO ConsumerMentions (MentionID, TrendID, MentionCount) VALUES (1, 1, 1500), (2, 2, 1200), (3, 3, 1800), (4, 4, 800), (5, 5, 2000);","WITH CurrentTrends AS (SELECT TrendID, TrendName FROM FashionTrends WHERE IsOutdated = FALSE), TrendMentions AS (SELECT TrendID, SUM(MentionCount) AS TotalMentions FROM ConsumerMentions GROUP BY TrendID) SELECT TrendName, TotalMentions FROM CurrentTrends INNER JOIN TrendMentions ON CurrentTrends.TrendID = TrendMentions.TrendID ORDER BY TotalMentions DESC LIMIT 5;","The query first creates a CTE to filter out outdated trends. It then calculates the total mentions for each trend and joins this result with the filtered trends. Finally, it selects the top 5 trends based on total mentions."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the top 3 regions with the highest sales for sustainable fashion products and exclude regions with less than $10,000 in sales.","CREATE TABLE FashionSales (SaleID INT PRIMARY KEY, Region VARCHAR(50), IsSustainable BOOLEAN, SaleAmount DECIMAL); INSERT INTO FashionSales (SaleID, Region, IsSustainable, SaleAmount) VALUES (1, 'North America', TRUE, 5000), (2, 'Europe', TRUE, 12000), (3, 'Asia', TRUE, 15000), (4, 'North America', FALSE, 8000), (5, 'Europe', TRUE, 9000);","WITH SustainableSales AS (SELECT Region, SUM(SaleAmount) AS TotalSales FROM FashionSales WHERE IsSustainable = TRUE GROUP BY Region HAVING SUM(SaleAmount) >= 10000) SELECT Region, TotalSales FROM SustainableSales ORDER BY TotalSales DESC LIMIT 3;","The query first creates a CTE to filter out sustainable sales and regions with less than $10,000 in sales. It then calculates the total sales for each region and selects the top 3 regions based on total sales in descending order."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 fashion influencers based on their engagement rates and exclude those who have been flagged for unethical practices.,"CREATE TABLE FashionInfluencers (InfluencerID INT PRIMARY KEY, InfluencerName VARCHAR(100), IsFlagged BOOLEAN); CREATE TABLE EngagementRates (EngagementID INT PRIMARY KEY, InfluencerID INT, EngagementRate DECIMAL, FOREIGN KEY (InfluencerID) REFERENCES FashionInfluencers(InfluencerID)); INSERT INTO FashionInfluencers (InfluencerID, InfluencerName, IsFlagged) VALUES (1, 'Jane Doe', FALSE), (2, 'John Smith', TRUE), (3, 'Alice Johnson', FALSE), (4, 'Bob Brown', FALSE), (5, 'Eve White', FALSE); INSERT INTO EngagementRates (EngagementID, InfluencerID, EngagementRate) VALUES (1, 1, 4.5), (2, 2, 3.0), (3, 3, 4.8), (4, 4, 4.2), (5, 5, 4.9);","WITH EthicalInfluencers AS (SELECT InfluencerID, InfluencerName FROM FashionInfluencers WHERE IsFlagged = FALSE), InfluencerEngagement AS (SELECT InfluencerID, AVG(EngagementRate) AS AvgEngagementRate FROM EngagementRates GROUP BY InfluencerID) SELECT InfluencerName, AvgEngagementRate FROM EthicalInfluencers INNER JOIN InfluencerEngagement ON EthicalInfluencers.InfluencerID = InfluencerEngagement.InfluencerID ORDER BY AvgEngagementRate DESC LIMIT 5;","The query first creates a CTE to filter out flagged influencers. It then calculates the average engagement rate for each influencer and joins this result with the filtered influencers. Finally, it selects the top 5 influencers based on average engagement rate."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total points scored by different basketball players in various seasons, and then display the top 3 players with the highest total points.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Seasons (SeasonID INT PRIMARY KEY, SeasonYear VARCHAR(9)); CREATE TABLE PlayerStats (PlayerID INT, SeasonID INT, TotalPoints INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (SeasonID) REFERENCES Seasons(SeasonID));","WITH RankedPlayers AS (SELECT PlayerID, SUM(TotalPoints) AS TotalPoints, DENSE_RANK() OVER (ORDER BY SUM(TotalPoints) DESC) AS Rank FROM PlayerStats GROUP BY PlayerID) SELECT PlayerID, TotalPoints FROM RankedPlayers WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank players based on their total points scored across all seasons in descending order. It then selects the top 3 players with the highest total points using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average ticket prices for different football matches across various leagues, and then display the top 5 matches with the highest average ticket prices.","CREATE TABLE Leagues (LeagueID INT PRIMARY KEY, LeagueName VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, LeagueID INT, MatchDate DATE, FOREIGN KEY (LeagueID) REFERENCES Leagues(LeagueID)); CREATE TABLE TicketPrices (MatchID INT, AvgTicketPrice DECIMAL, FOREIGN KEY (MatchID) REFERENCES Matches(MatchID));","WITH RankedMatches AS (SELECT MatchID, AvgTicketPrice, DENSE_RANK() OVER (ORDER BY AvgTicketPrice DESC) AS Rank FROM TicketPrices) SELECT MatchID, AvgTicketPrice FROM RankedMatches WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank football matches based on their average ticket prices in descending order. It then selects the top 5 matches with the highest average ticket prices using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of goals scored by different soccer players in various tournaments, and then display the top 5 players with the highest total goals.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Tournaments (TournamentID INT PRIMARY KEY, TournamentName VARCHAR(50)); CREATE TABLE PlayerGoals (PlayerID INT, TournamentID INT, GoalsScored INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (TournamentID) REFERENCES Tournaments(TournamentID));","WITH RankedPlayers AS (SELECT PlayerID, SUM(GoalsScored) AS TotalGoals, DENSE_RANK() OVER (ORDER BY SUM(GoalsScored) DESC) AS Rank FROM PlayerGoals GROUP BY PlayerID) SELECT PlayerID, TotalGoals FROM RankedPlayers WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank soccer players based on their total goals scored across all tournaments in descending order. It then selects the top 5 players with the highest total goals using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average attendance for different baseball games across various stadiums, and then display the top 3 games with the highest average attendance.","CREATE TABLE Stadiums (StadiumID INT PRIMARY KEY, StadiumName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, StadiumID INT, GameDate DATE, FOREIGN KEY (StadiumID) REFERENCES Stadiums(StadiumID)); CREATE TABLE Attendance (GameID INT, AvgAttendance INT, FOREIGN KEY (GameID) REFERENCES Games(GameID));","WITH RankedGames AS (SELECT GameID, AvgAttendance, DENSE_RANK() OVER (ORDER BY AvgAttendance DESC) AS Rank FROM Attendance) SELECT GameID, AvgAttendance FROM RankedGames WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank baseball games based on their average attendance in descending order. It then selects the top 3 games with the highest average attendance using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the revenue generated by different tennis tournaments, and then display the top 5 tournaments with the highest revenue.","CREATE TABLE Tournaments (TournamentID INT PRIMARY KEY, TournamentName VARCHAR(50)); CREATE TABLE TournamentRevenue (TournamentID INT, Revenue DECIMAL, FOREIGN KEY (TournamentID) REFERENCES Tournaments(TournamentID));","WITH RankedTournaments AS (SELECT TournamentID, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM TournamentRevenue) SELECT TournamentID, Revenue FROM RankedTournaments WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank tennis tournaments based on their revenue in descending order. It then selects the top 5 tournaments with the highest revenue using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average adoption rate of emerging technologies across various industries, and then display the top 3 industries with the highest adoption rates.","CREATE TABLE TechnologyAdoption (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50), Technology VARCHAR(50), AvgAdoptionRate DECIMAL); INSERT INTO TechnologyAdoption (IndustryID, IndustryName, Technology, AvgAdoptionRate) VALUES (1, 'Healthcare', 'AI', 75.5), (2, 'Finance', 'Blockchain', 80.0), (3, 'Retail', 'IoT', 65.0), (4, 'Manufacturing', 'Robotics', 70.7), (5, 'Education', 'AR/VR', 60.0);","WITH RankedIndustries AS (SELECT IndustryName, AvgAdoptionRate, DENSE_RANK() OVER (ORDER BY AvgAdoptionRate DESC) AS Rank FROM TechnologyAdoption) SELECT IndustryName, AvgAdoptionRate FROM RankedIndustries WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank industries based on their average adoption rate of emerging technologies in descending order. It then selects the top 3 industries with the highest adoption rates using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the market share of different tech companies in various sectors, and then display the top 5 companies with the highest market share.","CREATE TABLE MarketShare (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Sector VARCHAR(50), MarketShare DECIMAL); INSERT INTO MarketShare (CompanyID, CompanyName, Sector, MarketShare) VALUES (1, 'Company A', 'Cloud Computing', 35.5), (2, 'Company B', 'AI', 40.0), (3, 'Company C', 'Cybersecurity', 25.0), (4, 'Company D', 'E-commerce', 30.7), (5, 'Company E', 'Fintech', 20.0);","WITH RankedCompanies AS (SELECT CompanyName, MarketShare, DENSE_RANK() OVER (ORDER BY MarketShare DESC) AS Rank FROM MarketShare) SELECT CompanyName, MarketShare FROM RankedCompanies WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank tech companies based on their market share in descending order. It then selects the top 5 companies with the highest market share using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the investment amounts in various tech startups across different regions, and then display the top 3 regions with the highest total investment.","CREATE TABLE StartupInvestments (InvestmentID INT PRIMARY KEY, Region VARCHAR(50), StartupName VARCHAR(50), InvestmentAmount DECIMAL); INSERT INTO StartupInvestments (InvestmentID, Region, StartupName, InvestmentAmount) VALUES (1, 'North America', 'Startup A', 5000000), (2, 'Europe', 'Startup B', 3000000), (3, 'Asia', 'Startup C', 7000000), (4, 'South America', 'Startup D', 2000000), (5, 'Africa', 'Startup E', 1000000);","WITH RegionInvestments AS (SELECT Region, SUM(InvestmentAmount) AS TotalInvestment FROM StartupInvestments GROUP BY Region), RankedRegions AS (SELECT Region, TotalInvestment, DENSE_RANK() OVER (ORDER BY TotalInvestment DESC) AS Rank FROM RegionInvestments) SELECT Region, TotalInvestment FROM RankedRegions WHERE Rank <= 3;",The query first creates a common table expression (CTE) to calculate the total investment amount for each region. It then ranks the regions based on their total investment in descending order and selects the top 3 regions with the highest total investment using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of patents filed by various tech companies in different fields, and then display the top 5 companies with the most patents filed.","CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyName VARCHAR(50), Field VARCHAR(50), NumPatents INT); INSERT INTO Patents (PatentID, CompanyName, Field, NumPatents) VALUES (1, 'Company A', 'AI', 150), (2, 'Company B', 'Blockchain', 200), (3, 'Company C', 'IoT', 100), (4, 'Company D', 'Cybersecurity', 180), (5, 'Company E', 'Fintech', 120);","WITH RankedCompanies AS (SELECT CompanyName, NumPatents, DENSE_RANK() OVER (ORDER BY NumPatents DESC) AS Rank FROM Patents) SELECT CompanyName, NumPatents FROM RankedCompanies WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank tech companies based on the number of patents filed in descending order. It then selects the top 5 companies with the most patents filed using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the revenue growth rates of various tech sectors, and then display the top 3 sectors with the highest growth rates.","CREATE TABLE RevenueGrowth (SectorID INT PRIMARY KEY, SectorName VARCHAR(50), GrowthRate DECIMAL); INSERT INTO RevenueGrowth (SectorID, SectorName, GrowthRate) VALUES (1, 'Cloud Computing', 25.5), (2, 'AI', 30.0), (3, 'Cybersecurity', 20.0), (4, 'E-commerce', 15.7), (5, 'Fintech', 10.0);","WITH RankedSectors AS (SELECT SectorName, GrowthRate, DENSE_RANK() OVER (ORDER BY GrowthRate DESC) AS Rank FROM RevenueGrowth) SELECT SectorName, GrowthRate FROM RankedSectors WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank tech sectors based on their revenue growth rates in descending order. It then selects the top 3 sectors with the highest growth rates using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total revenue generated from streaming services for each content creator and rollback the transaction if any content creator's revenue exceeds $1,000,000.","CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50)); CREATE TABLE StreamingServices (ServiceID INT PRIMARY KEY, ServiceName VARCHAR(50)); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, CreatorID INT, ServiceID INT, Amount DECIMAL, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID), FOREIGN KEY (ServiceID) REFERENCES StreamingServices(ServiceID));","BEGIN TRANSACTION; WITH TotalRevenue AS (SELECT CreatorID, SUM(Amount) AS TotalAmount FROM Revenue GROUP BY CreatorID) SELECT CreatorID, TotalAmount FROM TotalRevenue; IF EXISTS (SELECT 1 FROM TotalRevenue WHERE TotalAmount > 1000000) ROLLBACK; ELSE COMMIT;","The query begins a transaction and calculates the total revenue for each content creator using a common table expression (CTE). It then checks if any content creator's total revenue exceeds $1,000,000. If so, the transaction is rolled back; otherwise, it is committed."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 10 most-watched movies across all streaming platforms and commit the transaction only if the total view count for these movies exceeds 1,000,000 views.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(100)); CREATE TABLE StreamingPlatforms (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50)); CREATE TABLE ViewCounts (ViewCountID INT PRIMARY KEY, MovieID INT, PlatformID INT, ViewCount INT, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID), FOREIGN KEY (PlatformID) REFERENCES StreamingPlatforms(PlatformID));","BEGIN TRANSACTION; WITH MovieViews AS (SELECT MovieID, SUM(ViewCount) AS TotalViews FROM ViewCounts GROUP BY MovieID), TopMovies AS (SELECT MovieID, TotalViews, ROW_NUMBER() OVER (ORDER BY TotalViews DESC) AS Rank FROM MovieViews) SELECT MovieID, TotalViews FROM TopMovies WHERE Rank <= 10; IF (SELECT SUM(TotalViews) FROM TopMovies WHERE Rank <= 10) > 1000000 COMMIT; ELSE ROLLBACK;","The query starts a transaction and calculates the total view count for each movie using a common table expression (CTE). It then ranks the movies by view count and selects the top 10. If the combined view count for these movies exceeds 1,000,000, the transaction is committed; otherwise, it is rolled back."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the average engagement time for each type of content and rollback the transaction if any type exceeds an average engagement time of 2 hours.,"CREATE TABLE ContentTypes (ContentTypeID INT PRIMARY KEY, ContentTypeName VARCHAR(50)); CREATE TABLE Engagements (EngagementID INT PRIMARY KEY, ContentTypeID INT, EngagementTime DECIMAL, FOREIGN KEY (ContentTypeID) REFERENCES ContentTypes(ContentTypeID));","BEGIN TRANSACTION; WITH AvgEngagement AS (SELECT ContentTypeID, AVG(EngagementTime) AS AvgTime FROM Engagements GROUP BY ContentTypeID) SELECT ContentTypeID, AvgTime FROM AvgEngagement; IF EXISTS (SELECT 1 FROM AvgEngagement WHERE AvgTime > 2) ROLLBACK; ELSE COMMIT;","The query initiates a transaction and calculates the average engagement time for each content type using a common table expression (CTE). It then checks if any content type has an average engagement time exceeding 2 hours. If so, the transaction is rolled back; otherwise, it is committed."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 content creators based on the number of unique viewers and commit the transaction if the total number of unique viewers for these creators exceeds 500,000.","CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50)); CREATE TABLE Viewers (ViewerID INT PRIMARY KEY, ViewerName VARCHAR(50)); CREATE TABLE ViewerCounts (ViewerCountID INT PRIMARY KEY, CreatorID INT, ViewerID INT, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID), FOREIGN KEY (ViewerID) REFERENCES Viewers(ViewerID));","BEGIN TRANSACTION; WITH UniqueViewers AS (SELECT CreatorID, COUNT(DISTINCT ViewerID) AS UniqueViewerCount FROM ViewerCounts GROUP BY CreatorID), TopCreators AS (SELECT CreatorID, UniqueViewerCount, ROW_NUMBER() OVER (ORDER BY UniqueViewerCount DESC) AS Rank FROM UniqueViewers) SELECT CreatorID, UniqueViewerCount FROM TopCreators WHERE Rank <= 5; IF (SELECT SUM(UniqueViewerCount) FROM TopCreators WHERE Rank <= 5) > 500000 COMMIT; ELSE ROLLBACK;","The query starts a transaction and calculates the number of unique viewers for each content creator using a common table expression (CTE). It then ranks the creators by unique viewer count and selects the top 5. If the combined unique viewer count for these creators exceeds 500,000, the transaction is committed; otherwise, it is rolled back."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total advertising revenue for each streaming platform and commit the transaction if the total revenue exceeds $10,000,000.","CREATE TABLE StreamingPlatforms (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50)); CREATE TABLE AdRevenue (AdRevenueID INT PRIMARY KEY, PlatformID INT, RevenueAmount DECIMAL, FOREIGN KEY (PlatformID) REFERENCES StreamingPlatforms(PlatformID));","BEGIN TRANSACTION; WITH TotalAdRevenue AS (SELECT PlatformID, SUM(RevenueAmount) AS TotalRevenue FROM AdRevenue GROUP BY PlatformID) SELECT PlatformID, TotalRevenue FROM TotalAdRevenue; IF (SELECT SUM(TotalRevenue) FROM TotalAdRevenue) > 10000000 COMMIT; ELSE ROLLBACK;","The query begins a transaction and calculates the total advertising revenue for each streaming platform using a common table expression (CTE). It then checks if the combined total revenue exceeds $10,000,000. If so, the transaction is committed; otherwise, it is rolled back."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average carbon emissions for different countries across various years, and then display the top 5 countries with the highest average carbon emissions.","CREATE TABLE CarbonEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, AvgCarbonEmissions DECIMAL); INSERT INTO CarbonEmissions (CountryID, CountryName, Year, AvgCarbonEmissions) VALUES (1, 'USA', 2020, 15.5), (2, 'China', 2020, 20.0), (3, 'India', 2020, 10.0), (4, 'Russia', 2020, 12.7), (5, 'Germany', 2020, 9.5);","WITH RankedCountries AS (SELECT CountryName, AvgCarbonEmissions, DENSE_RANK() OVER (ORDER BY AvgCarbonEmissions DESC) AS Rank FROM CarbonEmissions) SELECT CountryName, AvgCarbonEmissions FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank countries based on their average carbon emissions in descending order. It then selects the top 5 countries with the highest average carbon emissions using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the deforestation rates for different regions and then display the top 3 regions with the highest deforestation rates.,"CREATE TABLE DeforestationRates (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, DeforestationRate DECIMAL); INSERT INTO DeforestationRates (RegionID, RegionName, Year, DeforestationRate) VALUES (1, 'Amazon', 2020, 25.5), (2, 'Congo Basin', 2020, 20.0), (3, 'Southeast Asia', 2020, 15.0), (4, 'Central America', 2020, 10.7), (5, 'West Africa', 2020, 12.5);","WITH RankedRegions AS (SELECT RegionName, DeforestationRate, DENSE_RANK() OVER (ORDER BY DeforestationRate DESC) AS Rank FROM DeforestationRates) SELECT RegionName, DeforestationRate FROM RankedRegions WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank regions based on their deforestation rates in descending order. It then selects the top 3 regions with the highest deforestation rates using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average temperature changes for different cities across various years, and then display the top 5 cities with the highest average temperature changes.","CREATE TABLE TemperatureChanges (CityID INT PRIMARY KEY, CityName VARCHAR(50), Year INT, AvgTempChange DECIMAL); INSERT INTO TemperatureChanges (CityID, CityName, Year, AvgTempChange) VALUES (1, 'New York', 2020, 1.5), (2, 'Los Angeles', 2020, 2.0), (3, 'London', 2020, 1.0), (4, 'Tokyo', 2020, 2.7), (5, 'Sydney', 2020, 1.9);","WITH RankedCities AS (SELECT CityName, AvgTempChange, DENSE_RANK() OVER (ORDER BY AvgTempChange DESC) AS Rank FROM TemperatureChanges) SELECT CityName, AvgTempChange FROM RankedCities WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank cities based on their average temperature changes in descending order. It then selects the top 5 cities with the highest average temperature changes using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the biodiversity index for different ecosystems and then display the top 5 ecosystems with the highest biodiversity index.,"CREATE TABLE BiodiversityIndex (EcosystemID INT PRIMARY KEY, EcosystemName VARCHAR(50), Year INT, BiodiversityIndex DECIMAL); INSERT INTO BiodiversityIndex (EcosystemID, EcosystemName, Year, BiodiversityIndex) VALUES (1, 'Amazon Rainforest', 2020, 95.5), (2, 'Great Barrier Reef', 2020, 90.0), (3, 'Congo Rainforest', 2020, 85.0), (4, 'Galapagos Islands', 2020, 88.7), (5, 'Madagascar', 2020, 80.5);","WITH RankedEcosystems AS (SELECT EcosystemName, BiodiversityIndex, DENSE_RANK() OVER (ORDER BY BiodiversityIndex DESC) AS Rank FROM BiodiversityIndex) SELECT EcosystemName, BiodiversityIndex FROM RankedEcosystems WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank ecosystems based on their biodiversity index in descending order. It then selects the top 5 ecosystems with the highest biodiversity index using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the renewable energy production for different countries and then display the top 5 countries with the highest renewable energy production.,"CREATE TABLE RenewableEnergy (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, EnergyProduction DECIMAL); INSERT INTO RenewableEnergy (CountryID, CountryName, Year, EnergyProduction) VALUES (1, 'Germany', 2020, 250.5), (2, 'USA', 2020, 300.0), (3, 'China', 2020, 500.0), (4, 'India', 2020, 200.7), (5, 'Brazil', 2020, 150.5);","WITH RankedCountries AS (SELECT CountryName, EnergyProduction, DENSE_RANK() OVER (ORDER BY EnergyProduction DESC) AS Rank FROM RenewableEnergy) SELECT CountryName, EnergyProduction FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank countries based on their renewable energy production in descending order. It then selects the top 5 countries with the highest renewable energy production using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 10 most innovative companies in the AI sector based on their R&D expenditure and patent filings over the last 5 years.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE RnDExpenditure (CompanyID INT, Year INT, Expenditure DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyID INT, FilingDate DATE, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH RecentRnD AS (SELECT CompanyID, SUM(Expenditure) AS TotalExpenditure FROM RnDExpenditure WHERE Year >= YEAR(CURRENT_DATE) - 5 GROUP BY CompanyID), RecentPatents AS (SELECT CompanyID, COUNT(PatentID) AS TotalPatents FROM Patents WHERE FilingDate >= DATEADD(YEAR, -5, CURRENT_DATE) GROUP BY CompanyID), InnovationScore AS (SELECT r.CompanyID, c.CompanyName, r.TotalExpenditure + p.TotalPatents * 1000 AS InnovationScore FROM RecentRnD r JOIN RecentPatents p ON r.CompanyID = p.CompanyID JOIN Companies c ON c.CompanyID = r.CompanyID) SELECT CompanyName, InnovationScore FROM InnovationScore ORDER BY InnovationScore DESC LIMIT 10;",The query calculates the total R&D expenditure and the number of patents filed by companies in the last 5 years. It then combines these metrics to create an innovation score and selects the top 10 companies based on this score.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 regions with the highest adoption rates of blockchain technology in the financial sector over the past 3 years.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE BlockchainAdoption (RegionID INT, Sector VARCHAR(50), Year INT, AdoptionRate DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH RecentAdoption AS (SELECT RegionID, AVG(AdoptionRate) AS AvgAdoptionRate FROM BlockchainAdoption WHERE Sector = 'Financial' AND Year >= YEAR(CURRENT_DATE) - 3 GROUP BY RegionID), RankedRegions AS (SELECT r.RegionID, rg.RegionName, r.AvgAdoptionRate, DENSE_RANK() OVER (ORDER BY r.AvgAdoptionRate DESC) AS Rank FROM RecentAdoption r JOIN Regions rg ON r.RegionID = rg.RegionID) SELECT RegionName, AvgAdoptionRate FROM RankedRegions WHERE Rank <= 5;",The query calculates the average adoption rate of blockchain technology in the financial sector for each region over the past 3 years. It then ranks the regions based on this average adoption rate and selects the top 5.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a dashboard showing the quarterly growth rates of renewable energy investments across different countries over the last 2 years.,"CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(100)); CREATE TABLE RenewableInvestments (CountryID INT, Quarter INT, Year INT, InvestmentAmount DECIMAL, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));","WITH QuarterlyGrowth AS (SELECT CountryID, Year, Quarter, (InvestmentAmount - LAG(InvestmentAmount) OVER (PARTITION BY CountryID ORDER BY Year, Quarter)) / LAG(InvestmentAmount) OVER (PARTITION BY CountryID ORDER BY Year, Quarter) AS GrowthRate FROM RenewableInvestments WHERE Year >= YEAR(CURRENT_DATE) - 2) SELECT c.CountryName, q.Year, q.Quarter, q.GrowthRate FROM QuarterlyGrowth q JOIN Countries c ON q.CountryID = c.CountryID ORDER BY c.CountryName, q.Year, q.Quarter;",The query calculates the quarterly growth rates of renewable energy investments for each country over the last 2 years by comparing the current quarter's investment amount to the previous quarter's amount. It then selects and orders the results by country and quarter.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 emerging technologies in the healthcare sector based on the number of research publications and clinical trials in the last 3 years.,"CREATE TABLE Technologies (TechnologyID INT PRIMARY KEY, TechnologyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE ResearchPublications (PublicationID INT PRIMARY KEY, TechnologyID INT, PublicationDate DATE, FOREIGN KEY (TechnologyID) REFERENCES Technologies(TechnologyID)); CREATE TABLE ClinicalTrials (TrialID INT PRIMARY KEY, TechnologyID INT, StartDate DATE, FOREIGN KEY (TechnologyID) REFERENCES Technologies(TechnologyID));","WITH RecentPublications AS (SELECT TechnologyID, COUNT(PublicationID) AS TotalPublications FROM ResearchPublications WHERE PublicationDate >= DATEADD(YEAR, -3, CURRENT_DATE) GROUP BY TechnologyID), RecentTrials AS (SELECT TechnologyID, COUNT(TrialID) AS TotalTrials FROM ClinicalTrials WHERE StartDate >= DATEADD(YEAR, -3, CURRENT_DATE) GROUP BY TechnologyID), TechnologyScore AS (SELECT p.TechnologyID, t.TechnologyName, p.TotalPublications + tr.TotalTrials * 2 AS Score FROM RecentPublications p JOIN RecentTrials tr ON p.TechnologyID = tr.TechnologyID JOIN Technologies t ON t.TechnologyID = p.TechnologyID) SELECT TechnologyName, Score FROM TechnologyScore WHERE t.Sector = 'Healthcare' ORDER BY Score DESC LIMIT 5;",The query calculates the total number of research publications and clinical trials for each technology in the healthcare sector over the last 3 years. It then combines these metrics to create a score and selects the top 5 technologies based on this score.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a report showing the market trends of electric vehicles (EVs) by analyzing the sales data and customer satisfaction ratings over the past 4 years.,"CREATE TABLE EVModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(100), Manufacturer VARCHAR(100)); CREATE TABLE EVSales (ModelID INT, Year INT, Sales INT, FOREIGN KEY (ModelID) REFERENCES EVModels(ModelID)); CREATE TABLE CustomerSatisfaction (ModelID INT, Year INT, SatisfactionRating DECIMAL, FOREIGN KEY (ModelID) REFERENCES EVModels(ModelID));","WITH RecentSales AS (SELECT ModelID, SUM(Sales) AS TotalSales FROM EVSales WHERE Year >= YEAR(CURRENT_DATE) - 4 GROUP BY ModelID), RecentSatisfaction AS (SELECT ModelID, AVG(SatisfactionRating) AS AvgSatisfaction FROM CustomerSatisfaction WHERE Year >= YEAR(CURRENT_DATE) - 4 GROUP BY ModelID), MarketTrends AS (SELECT s.ModelID, m.ModelName, s.TotalSales, r.AvgSatisfaction FROM RecentSales s JOIN RecentSatisfaction r ON s.ModelID = r.ModelID JOIN EVModels m ON m.ModelID = s.ModelID) SELECT ModelName, TotalSales, AvgSatisfaction FROM MarketTrends ORDER BY TotalSales DESC, AvgSatisfaction DESC;","The query calculates the total sales and average customer satisfaction ratings for each EV model over the past 4 years. It then combines these metrics to create a market trends report, ordering the results by total sales and average satisfaction."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,common table expressions,data retrieval: basic data fetching queries,Retrieve the top 10 government projects with the highest spending in the last fiscal year.,"CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Department VARCHAR(100), FiscalYear INT, Spending DECIMAL); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); INSERT INTO GovernmentProjects (ProjectID, ProjectName, Department, FiscalYear, Spending) VALUES (1, 'Infrastructure Development', 'Transport', 2022, 5000000), (2, 'Healthcare Improvement', 'Health', 2022, 3000000), (3, 'Education Reform', 'Education', 2022, 2000000), (4, 'Defense Upgrade', 'Defense', 2022, 7000000), (5, 'Public Safety Enhancement', 'Safety', 2022, 1500000);","WITH ProjectSpending AS (SELECT ProjectName, Spending FROM GovernmentProjects WHERE FiscalYear = 2022) SELECT ProjectName, Spending FROM ProjectSpending ORDER BY Spending DESC LIMIT 10;",The query creates a common table expression (CTE) to select project names and their spending for the fiscal year 2022. It then orders the projects by spending in descending order and limits the result to the top 10 projects.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,common table expressions,data retrieval: basic data fetching queries,List the top 5 departments by the number of projects they have undertaken in the last 5 years.,"CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Department VARCHAR(100), FiscalYear INT, Spending DECIMAL); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); INSERT INTO GovernmentProjects (ProjectID, ProjectName, Department, FiscalYear, Spending) VALUES (1, 'Infrastructure Development', 'Transport', 2018, 5000000), (2, 'Healthcare Improvement', 'Health', 2019, 3000000), (3, 'Education Reform', 'Education', 2020, 2000000), (4, 'Defense Upgrade', 'Defense', 2021, 7000000), (5, 'Public Safety Enhancement', 'Safety', 2022, 1500000);","WITH DepartmentProjects AS (SELECT Department, COUNT(ProjectID) AS ProjectCount FROM GovernmentProjects WHERE FiscalYear BETWEEN 2018 AND 2022 GROUP BY Department) SELECT Department, ProjectCount FROM DepartmentProjects ORDER BY ProjectCount DESC LIMIT 5;",The query creates a common table expression (CTE) to count the number of projects each department has undertaken between 2018 and 2022. It then orders the departments by the number of projects in descending order and limits the result to the top 5 departments.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,common table expressions,data retrieval: basic data fetching queries,Find the average spending per project for each department in the current fiscal year.,"CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Department VARCHAR(100), FiscalYear INT, Spending DECIMAL); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); INSERT INTO GovernmentProjects (ProjectID, ProjectName, Department, FiscalYear, Spending) VALUES (1, 'Infrastructure Development', 'Transport', 2023, 5000000), (2, 'Healthcare Improvement', 'Health', 2023, 3000000), (3, 'Education Reform', 'Education', 2023, 2000000), (4, 'Defense Upgrade', 'Defense', 2023, 7000000), (5, 'Public Safety Enhancement', 'Safety', 2023, 1500000);","WITH DepartmentSpending AS (SELECT Department, AVG(Spending) AS AvgSpending FROM GovernmentProjects WHERE FiscalYear = 2023 GROUP BY Department) SELECT Department, AvgSpending FROM DepartmentSpending;",The query creates a common table expression (CTE) to calculate the average spending per project for each department in the fiscal year 2023. It then selects the department names along with their average spending.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,common table expressions,data retrieval: basic data fetching queries,Identify the top 3 regions with the highest population growth rate over the past decade.,"CREATE TABLE PopulationData (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), Year INT, Population INT); INSERT INTO PopulationData (RegionID, RegionName, Year, Population) VALUES (1, 'North', 2013, 500000), (1, 'North', 2023, 700000), (2, 'South', 2013, 300000), (2, 'South', 2023, 450000), (3, 'East', 2013, 400000), (3, 'East', 2023, 600000), (4, 'West', 2013, 350000), (4, 'West', 2023, 500000);","WITH PopulationGrowth AS (SELECT RegionName, (MAX(Population) - MIN(Population)) / MIN(Population) * 100 AS GrowthRate FROM PopulationData WHERE Year BETWEEN 2013 AND 2023 GROUP BY RegionName) SELECT RegionName, GrowthRate FROM PopulationGrowth ORDER BY GrowthRate DESC LIMIT 3;",The query creates a common table expression (CTE) to calculate the population growth rate for each region over the past decade. It then orders the regions by growth rate in descending order and limits the result to the top 3 regions.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,common table expressions,data retrieval: basic data fetching queries,Determine the effectiveness of governance by comparing the number of completed projects to the total number of projects for each department in the last fiscal year.,"CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Department VARCHAR(100), FiscalYear INT, Spending DECIMAL, Status VARCHAR(50)); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); INSERT INTO GovernmentProjects (ProjectID, ProjectName, Department, FiscalYear, Spending, Status) VALUES (1, 'Infrastructure Development', 'Transport', 2022, 5000000, 'Completed'), (2, 'Healthcare Improvement', 'Health', 2022, 3000000, 'Ongoing'), (3, 'Education Reform', 'Education', 2022, 2000000, 'Completed'), (4, 'Defense Upgrade', 'Defense', 2022, 7000000, 'Completed'), (5, 'Public Safety Enhancement', 'Safety', 2022, 1500000, 'Ongoing');","WITH ProjectCounts AS (SELECT Department, COUNT(ProjectID) AS TotalProjects, SUM(CASE WHEN Status = 'Completed' THEN 1 ELSE 0 END) AS CompletedProjects FROM GovernmentProjects WHERE FiscalYear = 2022 GROUP BY Department) SELECT Department, CompletedProjects, TotalProjects, (CompletedProjects * 100.0 / TotalProjects) AS EffectivenessRate FROM ProjectCounts;",The query creates a common table expression (CTE) to count the total number of projects and the number of completed projects for each department in the fiscal year 2022. It then calculates the effectiveness rate as the percentage of completed projects out of the total projects for each department.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 most popular fashion brands among consumers aged 18-25 in North America.,"CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, Age INT, Region VARCHAR(50)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO Consumers (ConsumerID, Age, Region) VALUES (1, 22, 'North America'), (2, 19, 'North America'), (3, 24, 'North America'); INSERT INTO Purchases (PurchaseID, ConsumerID, BrandID, PurchaseDate) VALUES (1, 1, 1, '2023-01-01'), (2, 2, 2, '2023-02-01'), (3, 3, 1, '2023-03-01'); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B');","WITH ConsumerBrands AS (SELECT B.BrandName, COUNT(P.PurchaseID) AS PurchaseCount FROM Purchases P JOIN Consumers C ON P.ConsumerID = C.ConsumerID JOIN Brands B ON P.BrandID = B.BrandID WHERE C.Age BETWEEN 18 AND 25 AND C.Region = 'North America' GROUP BY B.BrandName) SELECT BrandName, PurchaseCount FROM ConsumerBrands ORDER BY PurchaseCount DESC LIMIT 5;",The query creates a common table expression (CTE) to count the number of purchases for each brand by consumers aged 18-25 in North America. It then selects the top 5 brands based on purchase count.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the trend of sustainable fashion purchases over the last 5 years.,"CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE, IsSustainable BOOLEAN); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO Purchases (PurchaseID, ConsumerID, BrandID, PurchaseDate, IsSustainable) VALUES (1, 1, 1, '2019-01-01', TRUE), (2, 2, 2, '2020-02-01', FALSE), (3, 3, 1, '2021-03-01', TRUE); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B');","SELECT YEAR(PurchaseDate) AS Year, COUNT(PurchaseID) AS SustainablePurchases FROM Purchases WHERE IsSustainable = TRUE GROUP BY YEAR(PurchaseDate) ORDER BY Year;",The query selects the year and counts the number of sustainable purchases for each year. It groups the results by year and orders them in ascending order.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 3 regions with the highest average spending on luxury fashion items.,"CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, Region VARCHAR(50)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE, AmountSpent DECIMAL); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsLuxury BOOLEAN); INSERT INTO Consumers (ConsumerID, Region) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'); INSERT INTO Purchases (PurchaseID, ConsumerID, BrandID, PurchaseDate, AmountSpent) VALUES (1, 1, 1, '2023-01-01', 500.00), (2, 2, 2, '2023-02-01', 700.00), (3, 3, 1, '2023-03-01', 300.00); INSERT INTO Brands (BrandID, BrandName, IsLuxury) VALUES (1, 'Brand A', TRUE), (2, 'Brand B', TRUE);","WITH LuxuryPurchases AS (SELECT C.Region, AVG(P.AmountSpent) AS AvgSpending FROM Purchases P JOIN Consumers C ON P.ConsumerID = C.ConsumerID JOIN Brands B ON P.BrandID = B.BrandID WHERE B.IsLuxury = TRUE GROUP BY C.Region) SELECT Region, AvgSpending FROM LuxuryPurchases ORDER BY AvgSpending DESC LIMIT 3;",The query creates a common table expression (CTE) to calculate the average spending on luxury fashion items for each region. It then selects the top 3 regions based on the highest average spending.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Determine the most common fashion trends in Europe over the past year.,"CREATE TABLE Trends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50)); CREATE TABLE TrendOccurrences (OccurrenceID INT PRIMARY KEY, TrendID INT, Region VARCHAR(50), OccurrenceDate DATE); INSERT INTO Trends (TrendID, TrendName) VALUES (1, 'Vintage'), (2, 'Streetwear'); INSERT INTO TrendOccurrences (OccurrenceID, TrendID, Region, OccurrenceDate) VALUES (1, 1, 'Europe', '2022-01-01'), (2, 2, 'Europe', '2022-02-01'), (3, 1, 'Europe', '2022-03-01');","SELECT T.TrendName, COUNT(O.OccurrenceID) AS OccurrenceCount FROM TrendOccurrences O JOIN Trends T ON O.TrendID = T.TrendID WHERE O.Region = 'Europe' AND O.OccurrenceDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY T.TrendName ORDER BY OccurrenceCount DESC;",The query selects the trend name and counts the number of occurrences for each trend in Europe over the past year. It groups the results by trend name and orders them by the number of occurrences in descending order.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a dashboard showing the monthly sales of eco-friendly fashion products in Asia.,"CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, SaleDate DATE, Region VARCHAR(50), IsEcoFriendly BOOLEAN, Amount DECIMAL); INSERT INTO Sales (SaleID, ProductID, SaleDate, Region, IsEcoFriendly, Amount) VALUES (1, 1, '2023-01-01', 'Asia', TRUE, 100.00), (2, 2, '2023-02-01', 'Asia', TRUE, 150.00), (3, 3, '2023-03-01', 'Asia', FALSE, 200.00);","SELECT DATE_FORMAT(SaleDate, '%Y-%m') AS Month, SUM(Amount) AS TotalSales FROM Sales WHERE IsEcoFriendly = TRUE AND Region = 'Asia' GROUP BY DATE_FORMAT(SaleDate, '%Y-%m') ORDER BY Month;",The query selects the month and sums the total sales amount for eco-friendly fashion products in Asia. It groups the results by month and orders them in ascending order.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the top 5 most popular tourist destinations based on the number of bookings in the last year.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, DestinationID INT, BookingDate DATE); INSERT INTO Destinations (DestinationID, DestinationName) VALUES (1, 'Paris'), (2, 'New York'), (3, 'Tokyo'), (4, 'London'), (5, 'Rome'); INSERT INTO Bookings (BookingID, DestinationID, BookingDate) VALUES (1, 1, '2022-05-01'), (2, 2, '2022-06-15'), (3, 3, '2022-07-20'), (4, 4, '2022-08-10'), (5, 5, '2022-09-05');","SELECT D.DestinationName, COUNT(B.BookingID) AS BookingCount FROM Destinations D INNER JOIN Bookings B ON D.DestinationID = B.DestinationID WHERE B.BookingDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY D.DestinationName ORDER BY BookingCount DESC LIMIT 5;","The query joins the Destinations and Bookings tables on DestinationID, filters bookings from the last year, groups by DestinationName, counts the number of bookings per destination, and orders by the count in descending order to get the top 5 destinations."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average rating for each hotel in a specific city.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), City VARCHAR(100)); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, Rating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, City) VALUES (1, 'Hotel A', 'New York'), (2, 'Hotel B', 'New York'), (3, 'Hotel C', 'Paris'), (4, 'Hotel D', 'Paris'), (5, 'Hotel E', 'Tokyo'); INSERT INTO Reviews (ReviewID, HotelID, Rating) VALUES (1, 1, 4.5), (2, 2, 4.0), (3, 3, 3.5), (4, 4, 4.2), (5, 5, 4.8);","SELECT H.HotelName, AVG(R.Rating) AS AverageRating FROM Hotels H INNER JOIN Reviews R ON H.HotelID = R.HotelID WHERE H.City = 'New York' GROUP BY H.HotelName;","The query joins the Hotels and Reviews tables on HotelID, filters hotels located in New York, groups by HotelName, and calculates the average rating for each hotel."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the top 3 countries with the highest number of international visitors last year.,"CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(100)); CREATE TABLE Visitors (VisitorID INT PRIMARY KEY, CountryID INT, VisitDate DATE); INSERT INTO Countries (CountryID, CountryName) VALUES (1, 'USA'), (2, 'France'), (3, 'Japan'), (4, 'UK'), (5, 'Italy'); INSERT INTO Visitors (VisitorID, CountryID, VisitDate) VALUES (1, 1, '2022-03-10'), (2, 2, '2022-04-15'), (3, 3, '2022-05-20'), (4, 4, '2022-06-25'), (5, 5, '2022-07-30');","SELECT C.CountryName, COUNT(V.VisitorID) AS VisitorCount FROM Countries C INNER JOIN Visitors V ON C.CountryID = V.CountryID WHERE V.VisitDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY C.CountryName ORDER BY VisitorCount DESC LIMIT 3;","The query joins the Countries and Visitors tables on CountryID, filters visits from the last year, groups by CountryName, counts the number of visitors per country, and orders by the count in descending order to get the top 3 countries."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Get the total revenue generated by each hotel in the last quarter.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Revenues (RevenueID INT PRIMARY KEY, HotelID INT, Revenue DECIMAL, RevenueDate DATE); INSERT INTO Hotels (HotelID, HotelName) VALUES (1, 'Hotel A'), (2, 'Hotel B'), (3, 'Hotel C'), (4, 'Hotel D'), (5, 'Hotel E'); INSERT INTO Revenues (RevenueID, HotelID, Revenue, RevenueDate) VALUES (1, 1, 10000, '2022-10-01'), (2, 2, 15000, '2022-11-01'), (3, 3, 20000, '2022-12-01'), (4, 4, 25000, '2022-10-15'), (5, 5, 30000, '2022-11-15');","SELECT H.HotelName, SUM(R.Revenue) AS TotalRevenue FROM Hotels H INNER JOIN Revenues R ON H.HotelID = R.HotelID WHERE R.RevenueDate >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY H.HotelName;","The query joins the Hotels and Revenues tables on HotelID, filters revenues from the last quarter, groups by HotelName, and sums the revenue for each hotel."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Identify the most preferred room type by customers in a specific hotel.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE RoomTypes (RoomTypeID INT PRIMARY KEY, RoomTypeName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, RoomTypeID INT); INSERT INTO Hotels (HotelID, HotelName) VALUES (1, 'Hotel A'), (2, 'Hotel B'), (3, 'Hotel C'), (4, 'Hotel D'), (5, 'Hotel E'); INSERT INTO RoomTypes (RoomTypeID, RoomTypeName) VALUES (1, 'Single'), (2, 'Double'), (3, 'Suite'); INSERT INTO Bookings (BookingID, HotelID, RoomTypeID) VALUES (1, 1, 1), (2, 1, 2), (3, 1, 2), (4, 1, 3), (5, 1, 2);","SELECT RT.RoomTypeName, COUNT(B.BookingID) AS BookingCount FROM RoomTypes RT INNER JOIN Bookings B ON RT.RoomTypeID = B.RoomTypeID WHERE B.HotelID = 1 GROUP BY RT.RoomTypeName ORDER BY BookingCount DESC LIMIT 1;","The query joins the RoomTypes and Bookings tables on RoomTypeID, filters bookings for a specific hotel (HotelID = 1), groups by RoomTypeName, counts the number of bookings per room type, and orders by the count in descending order to identify the most preferred room type."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average treatment outcomes for different age groups and genders, pivoted by treatment type.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(20), Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(50)); CREATE TABLE Outcomes (OutcomeID INT PRIMARY KEY, PatientID INT, TreatmentID INT, OutcomeScore DECIMAL, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));","SELECT AgeGroup, Gender, TreatmentName, AVG(OutcomeScore) AS AvgOutcome FROM Patients P JOIN Outcomes O ON P.PatientID = O.PatientID JOIN Treatments T ON O.TreatmentID = T.TreatmentID GROUP BY AgeGroup, Gender, TreatmentName PIVOT (AVG(OutcomeScore) FOR TreatmentName IN ('Treatment1', 'Treatment2', 'Treatment3'));","The query joins the Patients, Outcomes, and Treatments tables to gather relevant data. It then groups the data by AgeGroup, Gender, and TreatmentName, calculating the average outcome score for each group. Finally, it pivots the data to display the average outcome scores for different treatments side by side."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Create a dashboard that shows the number of patients experiencing side effects for each drug, categorized by severity levels.","CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); CREATE TABLE Patients (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(20), Gender VARCHAR(10)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, DrugID INT, SeverityLevel VARCHAR(20), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID));","SELECT DrugName, SeverityLevel, COUNT(*) AS PatientCount FROM Drugs D JOIN SideEffects S ON D.DrugID = S.DrugID GROUP BY DrugName, SeverityLevel PIVOT (COUNT(*) FOR SeverityLevel IN ('Mild', 'Moderate', 'Severe'));","The query joins the Drugs and SideEffects tables to gather data on side effects experienced by patients. It then groups the data by DrugName and SeverityLevel, counting the number of patients for each severity level. Finally, it pivots the data to display the patient counts for different severity levels side by side."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Analyze the effectiveness of different treatment protocols by comparing the average recovery times for various medical conditions.,"CREATE TABLE MedicalConditions (ConditionID INT PRIMARY KEY, ConditionName VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(50)); CREATE TABLE Patients (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(20), Gender VARCHAR(10)); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, ConditionID INT, TreatmentID INT, RecoveryTime INT, FOREIGN KEY (ConditionID) REFERENCES MedicalConditions(ConditionID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));","SELECT ConditionName, TreatmentName, AVG(RecoveryTime) AS AvgRecoveryTime FROM MedicalConditions MC JOIN TreatmentProtocols TP ON MC.ConditionID = TP.ConditionID JOIN Treatments T ON TP.TreatmentID = T.TreatmentID GROUP BY ConditionName, TreatmentName PIVOT (AVG(RecoveryTime) FOR TreatmentName IN ('TreatmentA', 'TreatmentB', 'TreatmentC'));","The query joins the MedicalConditions, TreatmentProtocols, and Treatments tables to gather data on treatment protocols and recovery times. It then groups the data by ConditionName and TreatmentName, calculating the average recovery time for each group. Finally, it pivots the data to display the average recovery times for different treatments side by side."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the distribution of patients' medical histories across different age groups and genders, unpivoted by medical condition.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(20), Gender VARCHAR(10)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, ConditionID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE MedicalConditions (ConditionID INT PRIMARY KEY, ConditionName VARCHAR(50));","SELECT AgeGroup, Gender, ConditionName FROM Patients P JOIN MedicalHistories MH ON P.PatientID = MH.PatientID JOIN MedicalConditions MC ON MH.ConditionID = MC.ConditionID UNPIVOT (ConditionName FOR ConditionID IN (Condition1, Condition2, Condition3));","The query joins the Patients, MedicalHistories, and MedicalConditions tables to gather data on patients' medical histories. It then unpivots the data to display the distribution of medical conditions across different age groups and genders."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Create a summary report showing the average efficacy of different drugs for various medical conditions, categorized by patient demographics.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(20), Gender VARCHAR(10)); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); CREATE TABLE MedicalConditions (ConditionID INT PRIMARY KEY, ConditionName VARCHAR(50)); CREATE TABLE DrugEfficacy (EfficacyID INT PRIMARY KEY, PatientID INT, DrugID INT, ConditionID INT, EfficacyScore DECIMAL, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID), FOREIGN KEY (ConditionID) REFERENCES MedicalConditions(ConditionID));","SELECT AgeGroup, Gender, ConditionName, DrugName, AVG(EfficacyScore) AS AvgEfficacy FROM Patients P JOIN DrugEfficacy DE ON P.PatientID = DE.PatientID JOIN Drugs D ON DE.DrugID = D.DrugID JOIN MedicalConditions MC ON DE.ConditionID = MC.ConditionID GROUP BY AgeGroup, Gender, ConditionName, DrugName PIVOT (AVG(EfficacyScore) FOR DrugName IN ('DrugX', 'DrugY', 'DrugZ'));","The query joins the Patients, DrugEfficacy, Drugs, and MedicalConditions tables to gather data on drug efficacy. It then groups the data by AgeGroup, Gender, ConditionName, and DrugName, calculating the average efficacy score for each group. Finally, it pivots the data to display the average efficacy scores for different drugs side by side."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the total sales and average price of electric vehicles by manufacturer for the last year.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), VehicleType VARCHAR(50)); CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50));","SELECT M.ManufacturerName, COUNT(VS.SaleID) AS TotalSales, AVG(VS.SalePrice) AS AvgPrice FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID INNER JOIN Manufacturers M ON V.Manufacturer = M.ManufacturerName WHERE V.VehicleType = 'Electric' AND YEAR(VS.SaleDate) = YEAR(CURDATE()) - 1 GROUP BY M.ManufacturerName;","The query retrieves the total sales count and average sale price of electric vehicles by manufacturer for the last year. It uses INNER JOIN to combine VehicleSales, Vehicles, and Manufacturers tables, filters for electric vehicles, and groups the results by manufacturer name."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the top 5 regions with the highest number of hybrid vehicle sales.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50));","SELECT VS.Region, COUNT(VS.SaleID) AS TotalSales FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.VehicleType = 'Hybrid' GROUP BY VS.Region ORDER BY TotalSales DESC LIMIT 5;","The query lists the top 5 regions with the highest number of hybrid vehicle sales. It uses an INNER JOIN to combine VehicleSales and Vehicles tables, filters for hybrid vehicles, groups the results by region, and orders by total sales in descending order, limiting the output to the top 5 regions."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the average fuel efficiency of vehicles sold in each region, categorized by vehicle type.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50), FuelEfficiency DECIMAL);","SELECT VS.Region, V.VehicleType, AVG(V.FuelEfficiency) AS AvgFuelEfficiency FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID GROUP BY VS.Region, V.VehicleType;","The query calculates the average fuel efficiency of vehicles sold in each region, categorized by vehicle type. It uses an INNER JOIN to combine VehicleSales and Vehicles tables, groups the results by region and vehicle type, and calculates the average fuel efficiency for each group."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Get the total revenue generated from the sales of autonomous vehicles by each manufacturer.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), VehicleType VARCHAR(50)); CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50));","SELECT M.ManufacturerName, SUM(VS.SalePrice) AS TotalRevenue FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID INNER JOIN Manufacturers M ON V.Manufacturer = M.ManufacturerName WHERE V.VehicleType = 'Autonomous' GROUP BY M.ManufacturerName;","The query retrieves the total revenue generated from the sales of autonomous vehicles by each manufacturer. It uses INNER JOIN to combine VehicleSales, Vehicles, and Manufacturers tables, filters for autonomous vehicles, and groups the results by manufacturer name, summing the sale prices to get the total revenue."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Identify the top 3 most popular vehicle models in terms of sales volume for each region.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50));","WITH SalesRank AS (SELECT VS.Region, V.ModelName, COUNT(VS.SaleID) AS SalesVolume, DENSE_RANK() OVER (PARTITION BY VS.Region ORDER BY COUNT(VS.SaleID) DESC) AS Rank FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID GROUP BY VS.Region, V.ModelName) SELECT Region, ModelName, SalesVolume FROM SalesRank WHERE Rank <= 3;","The query identifies the top 3 most popular vehicle models in terms of sales volume for each region. It uses a common table expression (CTE) to rank vehicle models by sales volume within each region using the DENSE_RANK function, and then selects the top 3 models for each region based on the rank."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the top 10 most popular travel destinations based on customer bookings and their average ratings from reviews.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, DestinationID INT, BookingDate DATE); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, DestinationID INT, Rating DECIMAL(2,1));","SELECT D.DestinationName, COUNT(B.BookingID) AS TotalBookings, AVG(R.Rating) AS AvgRating FROM Destinations D INNER JOIN Bookings B ON D.DestinationID = B.DestinationID LEFT JOIN Reviews R ON D.DestinationID = R.DestinationID GROUP BY D.DestinationName ORDER BY TotalBookings DESC LIMIT 10;","The query retrieves the top 10 most popular travel destinations based on the number of bookings and their average ratings. It uses an INNER JOIN to link Destinations and Bookings, and a LEFT JOIN to include Reviews. The results are grouped by destination name and ordered by the total number of bookings in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average length of stay for customers in different hotels and the total revenue generated by each hotel.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100)); CREATE TABLE Stays (StayID INT PRIMARY KEY, HotelID INT, CustomerID INT, CheckInDate DATE, CheckOutDate DATE); CREATE TABLE Payments (PaymentID INT PRIMARY KEY, StayID INT, Amount DECIMAL(10,2));","SELECT H.HotelName, AVG(DATEDIFF(S.CheckOutDate, S.CheckInDate)) AS AvgStayLength, SUM(P.Amount) AS TotalRevenue FROM Hotels H INNER JOIN Stays S ON H.HotelID = S.HotelID INNER JOIN Payments P ON S.StayID = P.StayID GROUP BY H.HotelName;","The query calculates the average length of stay and total revenue for each hotel. It uses INNER JOINs to link Hotels, Stays, and Payments tables. The results are grouped by hotel name."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the top 5 countries with the highest number of tourists and their average spending per tourist.,"CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(100)); CREATE TABLE Tourists (TouristID INT PRIMARY KEY, CountryID INT, Spending DECIMAL(10,2));","SELECT C.CountryName, COUNT(T.TouristID) AS TotalTourists, AVG(T.Spending) AS AvgSpending FROM Countries C INNER JOIN Tourists T ON C.CountryID = T.CountryID GROUP BY C.CountryName ORDER BY TotalTourists DESC LIMIT 5;",The query lists the top 5 countries with the highest number of tourists and their average spending. It uses an INNER JOIN to link Countries and Tourists tables. The results are grouped by country name and ordered by the total number of tourists in descending order.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Identify the most preferred room types by customers and the average occupancy rate for each room type.,"CREATE TABLE RoomTypes (RoomTypeID INT PRIMARY KEY, RoomTypeName VARCHAR(50)); CREATE TABLE Rooms (RoomID INT PRIMARY KEY, RoomTypeID INT, HotelID INT); CREATE TABLE Occupancies (OccupancyID INT PRIMARY KEY, RoomID INT, OccupancyDate DATE, IsOccupied BOOLEAN);","SELECT RT.RoomTypeName, COUNT(R.RoomID) AS TotalRooms, AVG(CASE WHEN O.IsOccupied THEN 1 ELSE 0 END) AS AvgOccupancyRate FROM RoomTypes RT INNER JOIN Rooms R ON RT.RoomTypeID = R.RoomTypeID LEFT JOIN Occupancies O ON R.RoomID = O.RoomID GROUP BY RT.RoomTypeName ORDER BY TotalRooms DESC;","The query identifies the most preferred room types by customers and calculates the average occupancy rate for each room type. It uses an INNER JOIN to link RoomTypes and Rooms, and a LEFT JOIN to include Occupancies. The results are grouped by room type name and ordered by the total number of rooms in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Analyze the seasonal trends in hotel bookings and the average booking lead time for each season.,"CREATE TABLE Seasons (SeasonID INT PRIMARY KEY, SeasonName VARCHAR(50), StartDate DATE, EndDate DATE); CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, BookingDate DATE, CheckInDate DATE);","SELECT S.SeasonName, COUNT(HB.BookingID) AS TotalBookings, AVG(DATEDIFF(HB.CheckInDate, HB.BookingDate)) AS AvgLeadTime FROM Seasons S INNER JOIN HotelBookings HB ON HB.BookingDate BETWEEN S.StartDate AND S.EndDate GROUP BY S.SeasonName ORDER BY TotalBookings DESC;",The query analyzes seasonal trends in hotel bookings and calculates the average booking lead time for each season. It uses an INNER JOIN to link Seasons and HotelBookings based on the booking date falling within the season's date range. The results are grouped by season name and ordered by the total number of bookings in descending order.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different streaming platforms across various regions, and then display the regions where Netflix's revenue exceeds Amazon Prime's revenue.","CREATE TABLE StreamingRevenue (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO StreamingRevenue (PlatformID, PlatformName, Region, TotalRevenue) VALUES (1, 'Netflix', 'North America', 500.0), (2, 'Amazon Prime', 'North America', 450.0), (3, 'Netflix', 'Europe', 300.0), (4, 'Amazon Prime', 'Europe', 350.0), (5, 'Netflix', 'Asia', 200.0);","WITH NetflixRevenue AS (SELECT Region, TotalRevenue FROM StreamingRevenue WHERE PlatformName = 'Netflix'), AmazonRevenue AS (SELECT Region, TotalRevenue FROM StreamingRevenue WHERE PlatformName = 'Amazon Prime') SELECT NetflixRevenue.Region FROM NetflixRevenue INNER JOIN AmazonRevenue ON NetflixRevenue.Region = AmazonRevenue.Region WHERE NetflixRevenue.TotalRevenue > AmazonRevenue.TotalRevenue;",The query creates two common table expressions (CTEs) to store the revenue data for Netflix and Amazon Prime. It then joins these CTEs on the Region column and selects the regions where Netflix's revenue exceeds Amazon Prime's revenue.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that records the number of views for different TV shows across various streaming platforms, and then display the shows that have more views on Hulu than on Disney+.","CREATE TABLE ShowViews (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), PlatformName VARCHAR(50), Views INT); INSERT INTO ShowViews (ShowID, ShowName, PlatformName, Views) VALUES (1, 'The Mandalorian', 'Disney+', 1000000), (2, 'The Mandalorian', 'Hulu', 1200000), (3, 'Stranger Things', 'Netflix', 1500000), (4, 'Stranger Things', 'Hulu', 1400000), (5, 'The Handmaid's Tale', 'Hulu', 1300000);","WITH HuluViews AS (SELECT ShowName, Views FROM ShowViews WHERE PlatformName = 'Hulu'), DisneyViews AS (SELECT ShowName, Views FROM ShowViews WHERE PlatformName = 'Disney+') SELECT HuluViews.ShowName FROM HuluViews INNER JOIN DisneyViews ON HuluViews.ShowName = DisneyViews.ShowName WHERE HuluViews.Views > DisneyViews.Views;",The query creates two common table expressions (CTEs) to store the view counts for shows on Hulu and Disney+. It then joins these CTEs on the ShowName column and selects the shows that have more views on Hulu than on Disney+.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average rating for different movies across various streaming platforms, and then display the movies that have an average rating above 8.0 on at least one platform.","CREATE TABLE MovieRatings (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), PlatformName VARCHAR(50), AvgRating DECIMAL); INSERT INTO MovieRatings (MovieID, MovieName, PlatformName, AvgRating) VALUES (1, 'Inception', 'Netflix', 8.5), (2, 'Inception', 'Amazon Prime', 8.3), (3, 'The Irishman', 'Netflix', 7.9), (4, 'The Irishman', 'Amazon Prime', 8.1), (5, 'Parasite', 'Hulu', 8.6);",SELECT DISTINCT MovieName FROM MovieRatings WHERE AvgRating > 8.0;,The query selects distinct movie names from the MovieRatings table where the average rating is above 8.0. This ensures that only movies with an average rating above 8.0 on at least one platform are displayed.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that records the number of subscribers for different streaming platforms across various regions, and then display the regions where the total number of subscribers for all platforms exceeds 1 million.","CREATE TABLE SubscriberCount (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50), Region VARCHAR(50), Subscribers INT); INSERT INTO SubscriberCount (PlatformID, PlatformName, Region, Subscribers) VALUES (1, 'Netflix', 'North America', 600000), (2, 'Amazon Prime', 'North America', 500000), (3, 'Netflix', 'Europe', 400000), (4, 'Amazon Prime', 'Europe', 300000), (5, 'Hulu', 'North America', 200000);",SELECT Region FROM SubscriberCount GROUP BY Region HAVING SUM(Subscribers) > 1000000;,The query groups the SubscriberCount table by region and calculates the sum of subscribers for each region. It then selects the regions where the total number of subscribers exceeds 1 million.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the engagement metrics for different social media campaigns by entertainment companies, and then display the campaigns that have higher engagement on Instagram than on Twitter.","CREATE TABLE EngagementMetrics (CampaignID INT PRIMARY KEY, CampaignName VARCHAR(50), PlatformName VARCHAR(50), Engagement INT); INSERT INTO EngagementMetrics (CampaignID, CampaignName, PlatformName, Engagement) VALUES (1, 'Summer Blockbuster', 'Instagram', 50000), (2, 'Summer Blockbuster', 'Twitter', 45000), (3, 'Holiday Special', 'Instagram', 60000), (4, 'Holiday Special', 'Twitter', 55000), (5, 'New Year Bash', 'Instagram', 70000);","WITH InstagramEngagement AS (SELECT CampaignName, Engagement FROM EngagementMetrics WHERE PlatformName = 'Instagram'), TwitterEngagement AS (SELECT CampaignName, Engagement FROM EngagementMetrics WHERE PlatformName = 'Twitter') SELECT InstagramEngagement.CampaignName FROM InstagramEngagement INNER JOIN TwitterEngagement ON InstagramEngagement.CampaignName = TwitterEngagement.CampaignName WHERE InstagramEngagement.Engagement > TwitterEngagement.Engagement;",The query creates two common table expressions (CTEs) to store the engagement metrics for campaigns on Instagram and Twitter. It then joins these CTEs on the CampaignName column and selects the campaigns that have higher engagement on Instagram than on Twitter.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total revenue generated from ticket sales for each sports event in the last year and identify the top 3 events with the highest revenue.,"CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE, Location VARCHAR(100)); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, EventID INT, SaleDate DATE, TicketPrice DECIMAL, QuantitySold INT, FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN TRANSACTION; WITH EventRevenue AS (SELECT E.EventName, SUM(TS.TicketPrice * TS.QuantitySold) AS TotalRevenue FROM Events E JOIN TicketSales TS ON E.EventID = TS.EventID WHERE TS.SaleDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY E.EventName) SELECT EventName, TotalRevenue FROM EventRevenue ORDER BY TotalRevenue DESC LIMIT 3; COMMIT;",The query begins a transaction and creates a common table expression (CTE) named EventRevenue that calculates the total revenue for each event by joining the Events and TicketSales tables. It filters ticket sales to include only those from the last year and groups the results by event name. The final SELECT statement retrieves the top 3 events with the highest total revenue and commits the transaction.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average performance score of athletes in different sports and identify those sports where the average score is above 80.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100), Sport VARCHAR(50)); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, EventID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID));","BEGIN TRANSACTION; WITH SportPerformance AS (SELECT A.Sport, AVG(P.Score) AS AvgScore FROM Athletes A JOIN Performance P ON A.AthleteID = P.AthleteID GROUP BY A.Sport HAVING AVG(P.Score) > 80) SELECT Sport, AvgScore FROM SportPerformance; COMMIT;","The query begins a transaction and creates a common table expression (CTE) named SportPerformance that calculates the average performance score for each sport by joining the Athletes and Performance tables. It groups the results by sport and filters to include only those sports where the average score is above 80. The final SELECT statement retrieves the sports and their average scores, and commits the transaction."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the total number of fans who attended each sports event this year and find the top 5 events with the highest attendance.,"CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE, Location VARCHAR(100)); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, EventID INT, FanCount INT, FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN TRANSACTION; WITH EventAttendance AS (SELECT E.EventName, SUM(A.FanCount) AS TotalAttendance FROM Events E JOIN Attendance A ON E.EventID = A.EventID WHERE YEAR(E.EventDate) = YEAR(GETDATE()) GROUP BY E.EventName) SELECT EventName, TotalAttendance FROM EventAttendance ORDER BY TotalAttendance DESC LIMIT 5; COMMIT;",The query begins a transaction and creates a common table expression (CTE) named EventAttendance that calculates the total number of fans who attended each event by joining the Events and Attendance tables. It filters events to include only those from the current year and groups the results by event name. The final SELECT statement retrieves the top 5 events with the highest total attendance and commits the transaction.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 countries with the highest average athlete performance scores in international competitions.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100), Country VARCHAR(50)); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, EventID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID));","BEGIN TRANSACTION; WITH CountryPerformance AS (SELECT A.Country, AVG(P.Score) AS AvgScore FROM Athletes A JOIN Performance P ON A.AthleteID = P.AthleteID GROUP BY A.Country) SELECT Country, AvgScore FROM CountryPerformance ORDER BY AvgScore DESC LIMIT 3; COMMIT;",The query begins a transaction and creates a common table expression (CTE) named CountryPerformance that calculates the average performance score for each country by joining the Athletes and Performance tables. It groups the results by country. The final SELECT statement retrieves the top 3 countries with the highest average scores and commits the transaction.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total revenue generated from merchandise sales for each sports team and identify the top 5 teams with the highest revenue.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(100), Sport VARCHAR(50)); CREATE TABLE MerchandiseSales (SaleID INT PRIMARY KEY, TeamID INT, SaleDate DATE, SaleAmount DECIMAL, FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","BEGIN TRANSACTION; WITH TeamRevenue AS (SELECT T.TeamName, SUM(MS.SaleAmount) AS TotalRevenue FROM Teams T JOIN MerchandiseSales MS ON T.TeamID = MS.TeamID GROUP BY T.TeamName) SELECT TeamName, TotalRevenue FROM TeamRevenue ORDER BY TotalRevenue DESC LIMIT 5; COMMIT;",The query begins a transaction and creates a common table expression (CTE) named TeamRevenue that calculates the total revenue for each team by joining the Teams and MerchandiseSales tables. It groups the results by team name. The final SELECT statement retrieves the top 5 teams with the highest total revenue and commits the transaction.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average length of hospital stays for patients with different medical conditions, and then display the top 3 conditions with the longest average stays.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE HospitalStays (StayID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), StayLength INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","CREATE TABLE AvgStayLength (Condition VARCHAR(50) PRIMARY KEY, AvgLength DECIMAL); INSERT INTO AvgStayLength (Condition, AvgLength) SELECT Condition, AVG(StayLength) FROM HospitalStays GROUP BY Condition; WITH RankedConditions AS (SELECT Condition, AvgLength, DENSE_RANK() OVER (ORDER BY AvgLength DESC) AS Rank FROM AvgStayLength) SELECT Condition, AvgLength FROM RankedConditions WHERE Rank <= 3;","The query first creates a table to store the average length of hospital stays for different medical conditions. It then inserts the average stay length for each condition into this table. Finally, it uses a common table expression (CTE) to rank the conditions based on their average stay length in descending order and selects the top 3 conditions with the longest average stays."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of patients treated for each condition in different hospitals, and then display the top 5 hospitals with the highest patient count for a specific condition.","CREATE TABLE Hospitals (HospitalID INT PRIMARY KEY, HospitalName VARCHAR(50), Location VARCHAR(50)); CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, HospitalID INT, Condition VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (HospitalID) REFERENCES Hospitals(HospitalID));","CREATE TABLE PatientCount (HospitalID INT, Condition VARCHAR(50), TotalPatients INT, PRIMARY KEY (HospitalID, Condition)); INSERT INTO PatientCount (HospitalID, Condition, TotalPatients) SELECT HospitalID, Condition, COUNT(PatientID) FROM Treatments GROUP BY HospitalID, Condition; WITH RankedHospitals AS (SELECT HospitalID, TotalPatients, DENSE_RANK() OVER (ORDER BY TotalPatients DESC) AS Rank FROM PatientCount WHERE Condition = 'specific_condition') SELECT HospitalID, TotalPatients FROM RankedHospitals WHERE Rank <= 5;","The query first creates a table to store the total number of patients treated for each condition in different hospitals. It then inserts the total patient count for each hospital and condition into this table. Finally, it uses a common table expression (CTE) to rank the hospitals based on their total patient count for a specific condition in descending order and selects the top 5 hospitals with the highest patient count."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average dosage of a specific drug administered to patients, grouped by age group, and then display the age group with the highest average dosage.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE DrugAdministration (AdminID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50), Dosage DECIMAL, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","CREATE TABLE AvgDosage (AgeGroup VARCHAR(50) PRIMARY KEY, AvgDosage DECIMAL); INSERT INTO AvgDosage (AgeGroup, AvgDosage) SELECT CASE WHEN Age < 18 THEN 'Child' WHEN Age BETWEEN 18 AND 65 THEN 'Adult' ELSE 'Senior' END AS AgeGroup, AVG(Dosage) FROM Patients JOIN DrugAdministration ON Patients.PatientID = DrugAdministration.PatientID WHERE DrugName = 'specific_drug' GROUP BY AgeGroup; SELECT AgeGroup, AvgDosage FROM AvgDosage ORDER BY AvgDosage DESC LIMIT 1;","The query first creates a table to store the average dosage of a specific drug administered to patients, grouped by age group. It then inserts the average dosage for each age group into this table. Finally, it selects the age group with the highest average dosage."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of adverse drug reactions reported for each drug, and then display the top 5 drugs with the highest number of adverse reactions.","CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); CREATE TABLE AdverseReactions (ReactionID INT PRIMARY KEY, DrugID INT, PatientID INT, Reaction VARCHAR(50), FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID));","CREATE TABLE AdverseReactionCount (DrugID INT PRIMARY KEY, TotalReactions INT); INSERT INTO AdverseReactionCount (DrugID, TotalReactions) SELECT DrugID, COUNT(ReactionID) FROM AdverseReactions GROUP BY DrugID; WITH RankedDrugs AS (SELECT DrugID, TotalReactions, DENSE_RANK() OVER (ORDER BY TotalReactions DESC) AS Rank FROM AdverseReactionCount) SELECT DrugID, TotalReactions FROM RankedDrugs WHERE Rank <= 5;","The query first creates a table to store the number of adverse drug reactions reported for each drug. It then inserts the total number of adverse reactions for each drug into this table. Finally, it uses a common table expression (CTE) to rank the drugs based on their total number of adverse reactions in descending order and selects the top 5 drugs with the highest number of adverse reactions."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average recovery time for patients who underwent different types of surgeries, and then display the top 3 surgeries with the shortest average recovery time.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE Surgeries (SurgeryID INT PRIMARY KEY, PatientID INT, SurgeryType VARCHAR(50), RecoveryTime INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","CREATE TABLE AvgRecoveryTime (SurgeryType VARCHAR(50) PRIMARY KEY, AvgTime DECIMAL); INSERT INTO AvgRecoveryTime (SurgeryType, AvgTime) SELECT SurgeryType, AVG(RecoveryTime) FROM Surgeries GROUP BY SurgeryType; WITH RankedSurgeries AS (SELECT SurgeryType, AvgTime, DENSE_RANK() OVER (ORDER BY AvgTime ASC) AS Rank FROM AvgRecoveryTime) SELECT SurgeryType, AvgTime FROM RankedSurgeries WHERE Rank <= 3;","The query first creates a table to store the average recovery time for patients who underwent different types of surgeries. It then inserts the average recovery time for each surgery type into this table. Finally, it uses a common table expression (CTE) to rank the surgeries based on their average recovery time in ascending order and selects the top 3 surgeries with the shortest average recovery time."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 10 most-watched TV shows in the last month, including the number of views and the average rating.","CREATE TABLE TVShows (ShowID INT PRIMARY KEY, ShowName VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE Views (ViewID INT PRIMARY KEY, ShowID INT, ViewDate DATE, FOREIGN KEY (ShowID) REFERENCES TVShows(ShowID)); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, ShowID INT, Rating DECIMAL(3,2), FOREIGN KEY (ShowID) REFERENCES TVShows(ShowID));","WITH RecentViews AS (SELECT ShowID, COUNT(*) AS ViewCount FROM Views WHERE ViewDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY ShowID), ShowRatings AS (SELECT ShowID, AVG(Rating) AS AvgRating FROM Ratings GROUP BY ShowID) SELECT TVShows.ShowName, RecentViews.ViewCount, ShowRatings.AvgRating FROM RecentViews JOIN TVShows ON RecentViews.ShowID = TVShows.ShowID JOIN ShowRatings ON TVShows.ShowID = ShowRatings.ShowID ORDER BY RecentViews.ViewCount DESC LIMIT 10;","The query first creates two common table expressions (CTEs): RecentViews to count the number of views per show in the last month, and ShowRatings to calculate the average rating per show. It then joins these CTEs with the TVShows table to get the show names, view counts, and average ratings, and finally orders the results by view count in descending order, limiting the output to the top 10 shows."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 content creators based on the total revenue generated from their content in the past year.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(100)); CREATE TABLE Content (ContentID INT PRIMARY KEY, CreatorID INT, Title VARCHAR(100), ReleaseDate DATE, Revenue DECIMAL(10,2), FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID));","WITH AnnualRevenue AS (SELECT CreatorID, SUM(Revenue) AS TotalRevenue FROM Content WHERE ReleaseDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY CreatorID) SELECT ContentCreators.CreatorName, AnnualRevenue.TotalRevenue FROM AnnualRevenue JOIN ContentCreators ON AnnualRevenue.CreatorID = ContentCreators.CreatorID ORDER BY AnnualRevenue.TotalRevenue DESC LIMIT 5;","The query creates a common table expression (CTE) called AnnualRevenue to sum the revenue generated by each content creator in the past year. It then joins this CTE with the ContentCreators table to get the creator names and their total revenue, ordering the results by total revenue in descending order and limiting the output to the top 5 creators."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the average watch time per user for each genre over the last six months.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(100)); CREATE TABLE WatchHistory (WatchID INT PRIMARY KEY, UserID INT, ShowID INT, WatchTime DECIMAL(5,2), WatchDate DATE, FOREIGN KEY (UserID) REFERENCES Users(UserID), FOREIGN KEY (ShowID) REFERENCES TVShows(ShowID));","WITH RecentWatchHistory AS (SELECT WatchHistory.UserID, TVShows.Genre, SUM(WatchHistory.WatchTime) AS TotalWatchTime FROM WatchHistory JOIN TVShows ON WatchHistory.ShowID = TVShows.ShowID WHERE WatchHistory.WatchDate >= DATEADD(MONTH, -6, GETDATE()) GROUP BY WatchHistory.UserID, TVShows.Genre) SELECT Genre, AVG(TotalWatchTime) AS AvgWatchTime FROM RecentWatchHistory GROUP BY Genre;",The query creates a common table expression (CTE) called RecentWatchHistory to sum the watch time per user for each genre over the last six months. It then calculates the average watch time per user for each genre by grouping the results by genre and using the AVG function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total number of comments made on each type of content in the last quarter.,"CREATE TABLE ContentTypes (TypeID INT PRIMARY KEY, TypeName VARCHAR(50)); CREATE TABLE Content (ContentID INT PRIMARY KEY, TypeID INT, Title VARCHAR(100), ReleaseDate DATE, FOREIGN KEY (TypeID) REFERENCES ContentTypes(TypeID)); CREATE TABLE Comments (CommentID INT PRIMARY KEY, ContentID INT, CommentDate DATE, FOREIGN KEY (ContentID) REFERENCES Content(ContentID));","WITH RecentComments AS (SELECT Content.TypeID, COUNT(*) AS CommentCount FROM Comments JOIN Content ON Comments.ContentID = Content.ContentID WHERE Comments.CommentDate >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY Content.TypeID) SELECT ContentTypes.TypeName, RecentComments.CommentCount FROM RecentComments JOIN ContentTypes ON RecentComments.TypeID = ContentTypes.TypeID;",The query creates a common table expression (CTE) called RecentComments to count the number of comments made on each type of content in the last quarter. It then joins this CTE with the ContentTypes table to get the type names and their respective comment counts.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 3 genres with the highest average revenue per content piece in the last year.,"CREATE TABLE Genres (GenreID INT PRIMARY KEY, GenreName VARCHAR(50)); CREATE TABLE Content (ContentID INT PRIMARY KEY, GenreID INT, Title VARCHAR(100), ReleaseDate DATE, Revenue DECIMAL(10,2), FOREIGN KEY (GenreID) REFERENCES Genres(GenreID));","WITH RecentContent AS (SELECT GenreID, AVG(Revenue) AS AvgRevenue FROM Content WHERE ReleaseDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY GenreID) SELECT Genres.GenreName, RecentContent.AvgRevenue FROM RecentContent JOIN Genres ON RecentContent.GenreID = Genres.GenreID ORDER BY RecentContent.AvgRevenue DESC LIMIT 3;","The query creates a common table expression (CTE) called RecentContent to calculate the average revenue per content piece for each genre in the last year. It then joins this CTE with the Genres table to get the genre names and their respective average revenues, ordering the results by average revenue in descending order and limiting the output to the top 3 genres."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores patient demographics and their medical histories, and then display the number of patients with each type of medical condition in a pivoted format.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(100), DiagnosisDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); INSERT INTO Patients (PatientID, FirstName, LastName, Age, Gender) VALUES (1, 'John', 'Doe', 45, 'Male'), (2, 'Jane', 'Smith', 30, 'Female'), (3, 'Alice', 'Johnson', 55, 'Female'); INSERT INTO MedicalHistories (HistoryID, PatientID, Condition, DiagnosisDate) VALUES (1, 1, 'Diabetes', '2020-01-01'), (2, 2, 'Hypertension', '2019-05-15'), (3, 3, 'Asthma', '2018-07-20');","SELECT Condition, COUNT(PatientID) AS PatientCount FROM MedicalHistories GROUP BY Condition;",The query counts the number of patients for each medical condition by grouping the MedicalHistories table by the Condition column and then counting the PatientID for each group.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores treatment protocols for different medical conditions, and then display the average treatment duration for each condition in a pivoted format.","CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, Condition VARCHAR(100), TreatmentName VARCHAR(100), DurationDays INT); INSERT INTO Treatments (TreatmentID, Condition, TreatmentName, DurationDays) VALUES (1, 'Diabetes', 'Insulin Therapy', 180), (2, 'Hypertension', 'Beta Blockers', 90), (3, 'Asthma', 'Inhalers', 60);","SELECT Condition, AVG(DurationDays) AS AvgDuration FROM Treatments GROUP BY Condition;",The query calculates the average duration of treatments for each medical condition by grouping the Treatments table by the Condition column and then averaging the DurationDays for each group.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores patient outcomes after treatments, and then display the number of patients with each outcome in a pivoted format.","CREATE TABLE PatientOutcomes (OutcomeID INT PRIMARY KEY, PatientID INT, TreatmentID INT, Outcome VARCHAR(100), OutcomeDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID)); INSERT INTO PatientOutcomes (OutcomeID, PatientID, TreatmentID, Outcome, OutcomeDate) VALUES (1, 1, 1, 'Improved', '2021-01-01'), (2, 2, 2, 'Stable', '2021-02-15'), (3, 3, 3, 'Worsened', '2021-03-20');","SELECT Outcome, COUNT(PatientID) AS PatientCount FROM PatientOutcomes GROUP BY Outcome;",The query counts the number of patients for each treatment outcome by grouping the PatientOutcomes table by the Outcome column and then counting the PatientID for each group.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores drug efficacy data, and then display the average efficacy for each drug in a pivoted format.","CREATE TABLE DrugEfficacy (EfficacyID INT PRIMARY KEY, DrugName VARCHAR(100), EfficacyPercentage DECIMAL); INSERT INTO DrugEfficacy (EfficacyID, DrugName, EfficacyPercentage) VALUES (1, 'Drug A', 85.5), (2, 'Drug B', 78.0), (3, 'Drug C', 92.3);","SELECT DrugName, AVG(EfficacyPercentage) AS AvgEfficacy FROM DrugEfficacy GROUP BY DrugName;",The query calculates the average efficacy percentage for each drug by grouping the DrugEfficacy table by the DrugName column and then averaging the EfficacyPercentage for each group.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores patient side effects from drugs, and then display the number of patients experiencing each type of side effect in a pivoted format.","CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), SideEffect VARCHAR(100), ReportDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); INSERT INTO SideEffects (SideEffectID, PatientID, DrugName, SideEffect, ReportDate) VALUES (1, 1, 'Drug A', 'Nausea', '2021-01-10'), (2, 2, 'Drug B', 'Headache', '2021-02-20'), (3, 3, 'Drug C', 'Dizziness', '2021-03-30');","SELECT SideEffect, COUNT(PatientID) AS PatientCount FROM SideEffects GROUP BY SideEffect;",The query counts the number of patients experiencing each type of side effect by grouping the SideEffects table by the SideEffect column and then counting the PatientID for each group.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average points scored per game by each player in different seasons and then display the top 3 players with the highest average points per game for each season.,"CREATE TABLE PlayerPerformance (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Season VARCHAR(20), PointsScored INT, GamesPlayed INT); INSERT INTO PlayerPerformance (PlayerID, PlayerName, Season, PointsScored, GamesPlayed) VALUES (1, 'John Doe', '2021', 500, 20), (2, 'Jane Smith', '2021', 450, 18), (3, 'Mike Brown', '2021', 480, 19), (4, 'John Doe', '2022', 520, 21), (5, 'Jane Smith', '2022', 470, 20);","WITH AvgPoints AS (SELECT PlayerName, Season, PointsScored / GamesPlayed AS AvgPointsPerGame FROM PlayerPerformance) SELECT PlayerName, Season, AvgPointsPerGame FROM (SELECT PlayerName, Season, AvgPointsPerGame, DENSE_RANK() OVER (PARTITION BY Season ORDER BY AvgPointsPerGame DESC) AS Rank FROM AvgPoints) RankedPlayers WHERE Rank <= 3;","The query first calculates the average points per game for each player in each season. It then ranks the players within each season based on their average points per game in descending order. Finally, it selects the top 3 players for each season."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Show the total revenue generated from ticket sales for each sports event and then display the top 5 events with the highest revenue.,"CREATE TABLE EventRevenue (EventID INT PRIMARY KEY, EventName VARCHAR(50), TicketsSold INT, TicketPrice DECIMAL); INSERT INTO EventRevenue (EventID, EventName, TicketsSold, TicketPrice) VALUES (1, 'Super Bowl', 70000, 150.00), (2, 'World Series', 50000, 120.00), (3, 'NBA Finals', 60000, 130.00), (4, 'Wimbledon', 40000, 200.00), (5, 'Olympics', 80000, 100.00);","WITH TotalRevenue AS (SELECT EventName, TicketsSold * TicketPrice AS Revenue FROM EventRevenue) SELECT EventName, Revenue FROM (SELECT EventName, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM TotalRevenue) RankedEvents WHERE Rank <= 5;",The query calculates the total revenue for each event by multiplying the number of tickets sold by the ticket price. It then ranks the events based on their total revenue in descending order and selects the top 5 events.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a report showing the average attendance for each type of sports event over the past 5 years and display the top 3 event types with the highest average attendance.,"CREATE TABLE EventAttendance (EventID INT PRIMARY KEY, EventType VARCHAR(50), Year INT, Attendance INT); INSERT INTO EventAttendance (EventID, EventType, Year, Attendance) VALUES (1, 'Football', 2018, 70000), (2, 'Basketball', 2018, 15000), (3, 'Tennis', 2018, 10000), (4, 'Football', 2019, 72000), (5, 'Basketball', 2019, 16000);","WITH AvgAttendance AS (SELECT EventType, AVG(Attendance) AS AvgAttendance FROM EventAttendance WHERE Year BETWEEN 2018 AND 2022 GROUP BY EventType) SELECT EventType, AvgAttendance FROM (SELECT EventType, AvgAttendance, DENSE_RANK() OVER (ORDER BY AvgAttendance DESC) AS Rank FROM AvgAttendance) RankedAttendance WHERE Rank <= 3;",The query calculates the average attendance for each event type over the past 5 years. It then ranks the event types based on their average attendance in descending order and selects the top 3 event types.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total number of social media engagements for each sports team and then display the top 5 teams with the highest engagements.,"CREATE TABLE TeamEngagement (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), SocialMediaPlatform VARCHAR(50), Engagements INT); INSERT INTO TeamEngagement (TeamID, TeamName, SocialMediaPlatform, Engagements) VALUES (1, 'Team A', 'Twitter', 50000), (2, 'Team B', 'Twitter', 45000), (3, 'Team A', 'Facebook', 60000), (4, 'Team B', 'Facebook', 55000), (5, 'Team C', 'Instagram', 70000);","WITH TotalEngagements AS (SELECT TeamName, SUM(Engagements) AS TotalEngagements FROM TeamEngagement GROUP BY TeamName) SELECT TeamName, TotalEngagements FROM (SELECT TeamName, TotalEngagements, DENSE_RANK() OVER (ORDER BY TotalEngagements DESC) AS Rank FROM TotalEngagements) RankedTeams WHERE Rank <= 5;",The query calculates the total number of social media engagements for each team by summing the engagements across all platforms. It then ranks the teams based on their total engagements in descending order and selects the top 5 teams.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a report showing the average salary of athletes in different sports and then display the top 3 sports with the highest average salary.,"CREATE TABLE AthleteSalaries (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), Salary DECIMAL); INSERT INTO AthleteSalaries (AthleteID, AthleteName, Sport, Salary) VALUES (1, 'Athlete A', 'Football', 5000000), (2, 'Athlete B', 'Basketball', 4500000), (3, 'Athlete C', 'Tennis', 3000000), (4, 'Athlete D', 'Football', 5500000), (5, 'Athlete E', 'Basketball', 4700000);","WITH AvgSalaries AS (SELECT Sport, AVG(Salary) AS AvgSalary FROM AthleteSalaries GROUP BY Sport) SELECT Sport, AvgSalary FROM (SELECT Sport, AvgSalary, DENSE_RANK() OVER (ORDER BY AvgSalary DESC) AS Rank FROM AvgSalaries) RankedSalaries WHERE Rank <= 3;",The query calculates the average salary for athletes in each sport. It then ranks the sports based on their average salary in descending order and selects the top 3 sports.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify the top 3 departments with the highest average spending per project in the last fiscal year.,"CREATE TABLE Departments (DeptID INT PRIMARY KEY, DeptName VARCHAR(100)); CREATE TABLE Projects (ProjectID INT PRIMARY KEY, DeptID INT, ProjectName VARCHAR(100), Spending DECIMAL, FiscalYear INT); INSERT INTO Departments (DeptID, DeptName) VALUES (1, 'Health'), (2, 'Education'), (3, 'Infrastructure'); INSERT INTO Projects (ProjectID, DeptID, ProjectName, Spending, FiscalYear) VALUES (1, 1, 'Health Initiative', 500000, 2022), (2, 2, 'School Renovation', 300000, 2022), (3, 3, 'Road Construction', 700000, 2022), (4, 1, 'Vaccination Program', 200000, 2022), (5, 2, 'Teacher Training', 150000, 2022);","WITH DeptSpending AS (SELECT DeptID, AVG(Spending) AS AvgSpending FROM Projects WHERE FiscalYear = 2022 GROUP BY DeptID), RankedDepts AS (SELECT DeptID, AvgSpending, RANK() OVER (ORDER BY AvgSpending DESC) AS Rank FROM DeptSpending) SELECT DeptID, AvgSpending FROM RankedDepts WHERE Rank <= 3;",The query first calculates the average spending per department for the last fiscal year using a common table expression (CTE). It then ranks these departments based on their average spending in descending order and selects the top 3.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Find the top 5 most populous cities in each state.,"CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(100)); CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(100), StateID INT, Population INT); INSERT INTO States (StateID, StateName) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'); INSERT INTO Cities (CityID, CityName, StateID, Population) VALUES (1, 'Los Angeles', 1, 4000000), (2, 'San Francisco', 1, 870000), (3, 'Houston', 2, 2300000), (4, 'Dallas', 2, 1300000), (5, 'New York City', 3, 8400000), (6, 'Buffalo', 3, 260000);","WITH RankedCities AS (SELECT CityName, StateID, Population, ROW_NUMBER() OVER (PARTITION BY StateID ORDER BY Population DESC) AS Rank FROM Cities) SELECT CityName, StateID, Population FROM RankedCities WHERE Rank <= 5;",The query uses a common table expression (CTE) to rank cities within each state based on their population in descending order. It then selects the top 5 most populous cities for each state.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",List the top 10 most recent legislative bills passed along with their respective sponsors.,"CREATE TABLE Legislators (LegislatorID INT PRIMARY KEY, LegislatorName VARCHAR(100)); CREATE TABLE Bills (BillID INT PRIMARY KEY, BillName VARCHAR(100), SponsorID INT, DatePassed DATE); INSERT INTO Legislators (LegislatorID, LegislatorName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); INSERT INTO Bills (BillID, BillName, SponsorID, DatePassed) VALUES (1, 'Healthcare Reform', 1, '2023-01-15'), (2, 'Education Funding', 2, '2023-02-20'), (3, 'Infrastructure Bill', 3, '2023-03-10'), (4, 'Tax Reform', 1, '2023-04-05'), (5, 'Environmental Protection', 2, '2023-05-25');","WITH RankedBills AS (SELECT BillName, SponsorID, DatePassed, ROW_NUMBER() OVER (ORDER BY DatePassed DESC) AS Rank FROM Bills) SELECT BillName, SponsorID, DatePassed FROM RankedBills WHERE Rank <= 10;",The query uses a common table expression (CTE) to rank legislative bills based on their passage date in descending order. It then selects the top 10 most recent bills along with their sponsors.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Calculate the average age of citizens in each city and rank the cities within each state by average age.,"CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(100)); CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(100), StateID INT); CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, CityID INT, Age INT); INSERT INTO States (StateID, StateName) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'); INSERT INTO Cities (CityID, CityName, StateID) VALUES (1, 'Los Angeles', 1), (2, 'San Francisco', 1), (3, 'Houston', 2), (4, 'Dallas', 2), (5, 'New York City', 3), (6, 'Buffalo', 3); INSERT INTO Citizens (CitizenID, CityID, Age) VALUES (1, 1, 30), (2, 1, 40), (3, 2, 35), (4, 3, 50), (5, 3, 45), (6, 4, 60), (7, 5, 25), (8, 6, 55);","WITH CityAges AS (SELECT CityID, AVG(Age) AS AvgAge FROM Citizens GROUP BY CityID), RankedCities AS (SELECT CityID, AvgAge, ROW_NUMBER() OVER (PARTITION BY StateID ORDER BY AvgAge DESC) AS Rank FROM CityAges JOIN Cities ON CityAges.CityID = Cities.CityID) SELECT CityID, AvgAge, Rank FROM RankedCities;",The query first calculates the average age of citizens in each city using a common table expression (CTE). It then ranks the cities within each state based on their average age in descending order and selects the relevant information.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Determine the top 3 states with the highest total government spending on public welfare programs.,"CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(100)); CREATE TABLE WelfarePrograms (ProgramID INT PRIMARY KEY, StateID INT, ProgramName VARCHAR(100), Spending DECIMAL); INSERT INTO States (StateID, StateName) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'); INSERT INTO WelfarePrograms (ProgramID, StateID, ProgramName, Spending) VALUES (1, 1, 'Food Assistance', 2000000), (2, 1, 'Housing Support', 1500000), (3, 2, 'Healthcare Aid', 3000000), (4, 2, 'Childcare Services', 1000000), (5, 3, 'Unemployment Benefits', 2500000);","WITH StateSpending AS (SELECT StateID, SUM(Spending) AS TotalSpending FROM WelfarePrograms GROUP BY StateID), RankedStates AS (SELECT StateID, TotalSpending, RANK() OVER (ORDER BY TotalSpending DESC) AS Rank FROM StateSpending) SELECT StateID, TotalSpending FROM RankedStates WHERE Rank <= 3;",The query first calculates the total government spending on public welfare programs for each state using a common table expression (CTE). It then ranks the states based on their total spending in descending order and selects the top 3 states.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total government spending by department and year, and then display the top 3 departments with the highest spending for the most recent year.","CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), Year INT, TotalSpending DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, Year, TotalSpending) VALUES (1, 'Health', 2022, 5000000), (2, 'Education', 2022, 3000000), (3, 'Defense', 2022, 7000000), (4, 'Transportation', 2022, 2000000), (5, 'Health', 2021, 4500000);","WITH RecentYear AS (SELECT MAX(Year) AS MostRecentYear FROM GovernmentSpending), RankedDepartments AS (SELECT DepartmentName, TotalSpending, DENSE_RANK() OVER (ORDER BY TotalSpending DESC) AS Rank FROM GovernmentSpending WHERE Year = (SELECT MostRecentYear FROM RecentYear)) SELECT DepartmentName, TotalSpending FROM RankedDepartments WHERE Rank <= 3;","The query first creates a common table expression (CTE) to find the most recent year of spending data. It then ranks departments based on their total spending for that year in descending order using the DENSE_RANK function. Finally, it selects the top 3 departments with the highest spending."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of bills passed by each legislative body per year, and then display the legislative body with the highest number of bills passed in the last 5 years.","CREATE TABLE LegislativeBills (LegislativeBodyID INT PRIMARY KEY, LegislativeBodyName VARCHAR(50), Year INT, BillsPassed INT); INSERT INTO LegislativeBills (LegislativeBodyID, LegislativeBodyName, Year, BillsPassed) VALUES (1, 'Senate', 2022, 120), (2, 'House of Representatives', 2022, 150), (3, 'Senate', 2021, 110), (4, 'House of Representatives', 2021, 140), (5, 'Senate', 2020, 130);","WITH LastFiveYears AS (SELECT Year FROM LegislativeBills WHERE Year >= YEAR(CURDATE()) - 5), RankedBodies AS (SELECT LegislativeBodyName, SUM(BillsPassed) AS TotalBills, DENSE_RANK() OVER (ORDER BY SUM(BillsPassed) DESC) AS Rank FROM LegislativeBills WHERE Year IN (SELECT Year FROM LastFiveYears) GROUP BY LegislativeBodyName) SELECT LegislativeBodyName, TotalBills FROM RankedBodies WHERE Rank = 1;","The query first creates a common table expression (CTE) to find the years within the last 5 years. It then ranks legislative bodies based on the total number of bills passed in those years using the DENSE_RANK function. Finally, it selects the legislative body with the highest number of bills passed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the demographic data of citizens by region and year, and then display the region with the highest population growth over the last decade.","CREATE TABLE Demographics (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, Population INT); INSERT INTO Demographics (RegionID, RegionName, Year, Population) VALUES (1, 'North', 2022, 500000), (2, 'South', 2022, 600000), (3, 'East', 2022, 550000), (4, 'West', 2022, 450000), (5, 'North', 2012, 400000);","WITH LastDecade AS (SELECT Year FROM Demographics WHERE Year >= YEAR(CURDATE()) - 10), PopulationGrowth AS (SELECT RegionName, (MAX(Population) - MIN(Population)) AS Growth FROM Demographics WHERE Year IN (SELECT Year FROM LastDecade) GROUP BY RegionName), RankedRegions AS (SELECT RegionName, Growth, DENSE_RANK() OVER (ORDER BY Growth DESC) AS Rank FROM PopulationGrowth) SELECT RegionName, Growth FROM RankedRegions WHERE Rank = 1;","The query first creates a common table expression (CTE) to find the years within the last decade. It then calculates the population growth for each region by subtracting the minimum population from the maximum population over those years. Finally, it ranks the regions based on population growth and selects the region with the highest growth."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the effectiveness ratings of different government programs by year, and then display the top 2 most effective programs for the current year.","CREATE TABLE ProgramEffectiveness (ProgramID INT PRIMARY KEY, ProgramName VARCHAR(50), Year INT, EffectivenessRating DECIMAL); INSERT INTO ProgramEffectiveness (ProgramID, ProgramName, Year, EffectivenessRating) VALUES (1, 'Healthcare Improvement', 2022, 8.5), (2, 'Education Reform', 2022, 9.0), (3, 'Defense Upgrade', 2022, 7.5), (4, 'Infrastructure Development', 2022, 8.0), (5, 'Healthcare Improvement', 2021, 8.0);","WITH CurrentYear AS (SELECT YEAR(CURDATE()) AS ThisYear), RankedPrograms AS (SELECT ProgramName, EffectivenessRating, DENSE_RANK() OVER (ORDER BY EffectivenessRating DESC) AS Rank FROM ProgramEffectiveness WHERE Year = (SELECT ThisYear FROM CurrentYear)) SELECT ProgramName, EffectivenessRating FROM RankedPrograms WHERE Rank <= 2;","The query first creates a common table expression (CTE) to find the current year. It then ranks government programs based on their effectiveness ratings for that year in descending order using the DENSE_RANK function. Finally, it selects the top 2 most effective programs."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the annual budget allocations for various public sectors, and then display the sector with the highest average budget allocation over the past 3 years.","CREATE TABLE BudgetAllocations (SectorID INT PRIMARY KEY, SectorName VARCHAR(50), Year INT, BudgetAllocation DECIMAL); INSERT INTO BudgetAllocations (SectorID, SectorName, Year, BudgetAllocation) VALUES (1, 'Healthcare', 2022, 1000000), (2, 'Education', 2022, 800000), (3, 'Defense', 2022, 1200000), (4, 'Infrastructure', 2022, 900000), (5, 'Healthcare', 2021, 950000);","WITH LastThreeYears AS (SELECT Year FROM BudgetAllocations WHERE Year >= YEAR(CURDATE()) - 3), AverageBudget AS (SELECT SectorName, AVG(BudgetAllocation) AS AvgBudget FROM BudgetAllocations WHERE Year IN (SELECT Year FROM LastThreeYears) GROUP BY SectorName), RankedSectors AS (SELECT SectorName, AvgBudget, DENSE_RANK() OVER (ORDER BY AvgBudget DESC) AS Rank FROM AverageBudget) SELECT SectorName, AvgBudget FROM RankedSectors WHERE Rank = 1;","The query first creates a common table expression (CTE) to find the years within the last 3 years. It then calculates the average budget allocation for each sector over those years. Finally, it ranks the sectors based on their average budget allocation and selects the sector with the highest average budget."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Identify the top 3 emerging technologies in terms of investment growth over the past 5 years.,"CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, Technology VARCHAR(50), Year INT, InvestmentAmount DECIMAL); CREATE TABLE Technologies (TechnologyID INT PRIMARY KEY, TechnologyName VARCHAR(50));","WITH InvestmentGrowth AS (SELECT Technology, SUM(InvestmentAmount) AS TotalInvestment FROM Investments WHERE Year BETWEEN YEAR(CURDATE()) - 5 AND YEAR(CURDATE()) GROUP BY Technology), RankedTechnologies AS (SELECT Technology, TotalInvestment, DENSE_RANK() OVER (ORDER BY TotalInvestment DESC) AS Rank FROM InvestmentGrowth) SELECT Technology, TotalInvestment FROM RankedTechnologies WHERE Rank <= 3;",The query first calculates the total investment for each technology over the past 5 years using a common table expression (CTE). It then ranks these technologies based on the total investment amount in descending order and selects the top 3 technologies.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the top 5 companies leading in AI patent filings over the last decade.,"CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyName VARCHAR(50), Technology VARCHAR(50), FilingYear INT); CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50));","WITH AIPatents AS (SELECT CompanyName, COUNT(PatentID) AS PatentCount FROM Patents WHERE Technology = 'AI' AND FilingYear BETWEEN YEAR(CURDATE()) - 10 AND YEAR(CURDATE()) GROUP BY CompanyName), RankedCompanies AS (SELECT CompanyName, PatentCount, DENSE_RANK() OVER (ORDER BY PatentCount DESC) AS Rank FROM AIPatents) SELECT CompanyName, PatentCount FROM RankedCompanies WHERE Rank <= 5;",The query first filters AI patents filed in the last decade and counts the number of patents per company using a common table expression (CTE). It then ranks these companies based on the patent count in descending order and selects the top 5 companies.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 regions with the highest adoption rates of renewable energy technologies in the last 3 years.,"CREATE TABLE EnergyAdoption (AdoptionID INT PRIMARY KEY, Region VARCHAR(50), Technology VARCHAR(50), AdoptionRate DECIMAL, Year INT); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50));","WITH RecentAdoption AS (SELECT Region, AVG(AdoptionRate) AS AvgAdoptionRate FROM EnergyAdoption WHERE Year BETWEEN YEAR(CURDATE()) - 3 AND YEAR(CURDATE()) GROUP BY Region), RankedRegions AS (SELECT Region, AvgAdoptionRate, DENSE_RANK() OVER (ORDER BY AvgAdoptionRate DESC) AS Rank FROM RecentAdoption) SELECT Region, AvgAdoptionRate FROM RankedRegions WHERE Rank <= 5;",The query calculates the average adoption rate of renewable energy technologies for each region over the past 3 years using a common table expression (CTE). It then ranks these regions based on the average adoption rate in descending order and selects the top 5 regions.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the top 5 industries with the highest R&D expenditure in emerging technologies over the past 5 years.,"CREATE TABLE RnDExpenditure (ExpenditureID INT PRIMARY KEY, Industry VARCHAR(50), Technology VARCHAR(50), ExpenditureAmount DECIMAL, Year INT); CREATE TABLE Industries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50));","WITH RecentExpenditure AS (SELECT Industry, SUM(ExpenditureAmount) AS TotalExpenditure FROM RnDExpenditure WHERE Year BETWEEN YEAR(CURDATE()) - 5 AND YEAR(CURDATE()) GROUP BY Industry), RankedIndustries AS (SELECT Industry, TotalExpenditure, DENSE_RANK() OVER (ORDER BY TotalExpenditure DESC) AS Rank FROM RecentExpenditure) SELECT Industry, TotalExpenditure FROM RankedIndustries WHERE Rank <= 5;",The query calculates the total R&D expenditure for each industry in emerging technologies over the past 5 years using a common table expression (CTE). It then ranks these industries based on the total expenditure in descending order and selects the top 5 industries.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Determine the top 5 most innovative companies based on the number of new product launches in the last 3 years.,"CREATE TABLE ProductLaunches (LaunchID INT PRIMARY KEY, CompanyName VARCHAR(50), ProductName VARCHAR(50), LaunchYear INT); CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50));","WITH RecentLaunches AS (SELECT CompanyName, COUNT(ProductName) AS LaunchCount FROM ProductLaunches WHERE LaunchYear BETWEEN YEAR(CURDATE()) - 3 AND YEAR(CURDATE()) GROUP BY CompanyName), RankedCompanies AS (SELECT CompanyName, LaunchCount, DENSE_RANK() OVER (ORDER BY LaunchCount DESC) AS Rank FROM RecentLaunches) SELECT CompanyName, LaunchCount FROM RankedCompanies WHERE Rank <= 5;",The query counts the number of new product launches for each company over the past 3 years using a common table expression (CTE). It then ranks these companies based on the launch count in descending order and selects the top 5 most innovative companies.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total government spending on healthcare and education for each state and identify states where the total spending exceeds $10 billion.,"CREATE TABLE GovernmentSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), Sector VARCHAR(50), AmountSpent DECIMAL); INSERT INTO GovernmentSpending (StateID, StateName, Sector, AmountSpent) VALUES (1, 'California', 'Healthcare', 6000000000), (2, 'California', 'Education', 5000000000), (3, 'Texas', 'Healthcare', 4000000000), (4, 'Texas', 'Education', 3000000000), (5, 'New York', 'Healthcare', 4500000000), (6, 'New York', 'Education', 3500000000);","BEGIN; SELECT StateName, SUM(AmountSpent) AS TotalSpending FROM GovernmentSpending WHERE Sector IN ('Healthcare', 'Education') GROUP BY StateName HAVING SUM(AmountSpent) > 10000000000; COMMIT;","The query begins a transaction, calculates the total spending on healthcare and education for each state by summing the AmountSpent column, groups the results by StateName, and filters the groups to include only those with a total spending exceeding $10 billion. Finally, it commits the transaction."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 states with the highest average spending per citizen on public safety.,"CREATE TABLE CitizenDemographics (StateID INT PRIMARY KEY, StateName VARCHAR(50), Population INT); CREATE TABLE GovernmentSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), Sector VARCHAR(50), AmountSpent DECIMAL); INSERT INTO CitizenDemographics (StateID, StateName, Population) VALUES (1, 'California', 39500000), (2, 'Texas', 29000000), (3, 'New York', 19500000); INSERT INTO GovernmentSpending (StateID, StateName, Sector, AmountSpent) VALUES (1, 'California', 'Public Safety', 8000000000), (2, 'Texas', 'Public Safety', 6000000000), (3, 'New York', 'Public Safety', 5000000000);","BEGIN; WITH AvgSpending AS (SELECT g.StateName, (g.AmountSpent / c.Population) AS AvgSpendingPerCitizen FROM GovernmentSpending g JOIN CitizenDemographics c ON g.StateID = c.StateID WHERE g.Sector = 'Public Safety') SELECT StateName, AvgSpendingPerCitizen FROM AvgSpending ORDER BY AvgSpendingPerCitizen DESC LIMIT 3; COMMIT;","The query begins a transaction, calculates the average spending per citizen on public safety for each state by joining GovernmentSpending and CitizenDemographics tables, and then orders the results by average spending per citizen in descending order, selecting the top 3 states. Finally, it commits the transaction."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total number of legislative bills passed in each year and identify years with more than 100 bills passed.,"CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), YearPassed INT); INSERT INTO LegislativeBills (BillID, BillName, YearPassed) VALUES (1, 'Healthcare Reform', 2020), (2, 'Education Funding', 2020), (3, 'Infrastructure Development', 2021), (4, 'Tax Reform', 2021), (5, 'Environmental Protection', 2021);","BEGIN; SELECT YearPassed, COUNT(BillID) AS TotalBillsPassed FROM LegislativeBills GROUP BY YearPassed HAVING COUNT(BillID) > 100; COMMIT;","The query begins a transaction, counts the total number of legislative bills passed in each year by grouping the results by YearPassed, and filters the groups to include only those with more than 100 bills passed. Finally, it commits the transaction."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the average effectiveness score of governance for each region and identify regions with an average score below 50.,"CREATE TABLE GovernanceEffectiveness (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), EffectivenessScore DECIMAL); INSERT INTO GovernanceEffectiveness (RegionID, RegionName, EffectivenessScore) VALUES (1, 'West', 45.5), (2, 'East', 55.0), (3, 'North', 60.0), (4, 'South', 48.0);","BEGIN; SELECT RegionName, AVG(EffectivenessScore) AS AvgEffectivenessScore FROM GovernanceEffectiveness GROUP BY RegionName HAVING AVG(EffectivenessScore) < 50; COMMIT;","The query begins a transaction, calculates the average effectiveness score of governance for each region by averaging the EffectivenessScore column, groups the results by RegionName, and filters the groups to include only those with an average score below 50. Finally, it commits the transaction."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 cities with the highest population growth rate over the last decade.,"CREATE TABLE CityPopulation (CityID INT PRIMARY KEY, CityName VARCHAR(50), Year INT, Population INT); INSERT INTO CityPopulation (CityID, CityName, Year, Population) VALUES (1, 'Los Angeles', 2010, 3792621), (2, 'Los Angeles', 2020, 3980400), (3, 'Houston', 2010, 2099451), (4, 'Houston', 2020, 2328000), (5, 'Phoenix', 2010, 1445632), (6, 'Phoenix', 2020, 1680992);","BEGIN; WITH GrowthRate AS (SELECT CityName, ((MAX(Population) - MIN(Population)) / MIN(Population)) * 100 AS GrowthRate FROM CityPopulation WHERE Year IN (2010, 2020) GROUP BY CityName) SELECT CityName, GrowthRate FROM GrowthRate ORDER BY GrowthRate DESC LIMIT 5; COMMIT;","The query begins a transaction, calculates the population growth rate over the last decade for each city by finding the difference between the maximum and minimum population values, dividing by the minimum population, and multiplying by 100. It then orders the results by growth rate in descending order, selecting the top 5 cities. Finally, it commits the transaction."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total sales and average price of electric vehicles sold in each region, and display regions with total sales greater than 1000 units.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE, UnitsSold INT, Price DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Bolt', 'Electric'), (5, 'Prius', 'Hybrid');","BEGIN; WITH EVSales AS (SELECT Region, SUM(UnitsSold) AS TotalUnits, AVG(Price) AS AvgPrice FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type = 'Electric' GROUP BY Region HAVING SUM(UnitsSold) > 1000) SELECT Region, TotalUnits, AvgPrice FROM EVSales; COMMIT;",The query starts a transaction and creates a common table expression (CTE) to calculate the total units sold and average price of electric vehicles in each region. It then filters regions where total sales exceed 1000 units and commits the transaction.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 3 regions with the highest average sales price for hybrid vehicles, and ensure the transaction is rolled back if any error occurs.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE, UnitsSold INT, Price DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Bolt', 'Electric'), (5, 'Prius', 'Hybrid');","BEGIN; SAVEPOINT BeforeQuery; WITH HybridSales AS (SELECT Region, AVG(Price) AS AvgPrice FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type = 'Hybrid' GROUP BY Region ORDER BY AVG(Price) DESC LIMIT 3) SELECT Region, AvgPrice FROM HybridSales; ROLLBACK TO BeforeQuery;","The query begins a transaction and sets a savepoint. It then creates a common table expression (CTE) to calculate the average sales price for hybrid vehicles in each region and orders the results to find the top 3 regions. If any error occurs, the transaction rolls back to the savepoint."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the total number of vehicles sold and the maximum price for each vehicle model in the last year, and commit the transaction.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE, UnitsSold INT, Price DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Bolt', 'Electric'), (5, 'Prius', 'Hybrid');","BEGIN; WITH LastYearSales AS (SELECT V.ModelName, SUM(VS.UnitsSold) AS TotalUnits, MAX(VS.Price) AS MaxPrice FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE VS.SaleDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY V.ModelName) SELECT ModelName, TotalUnits, MaxPrice FROM LastYearSales; COMMIT;",The query begins a transaction and creates a common table expression (CTE) to calculate the total number of units sold and the maximum price for each vehicle model in the last year. It then commits the transaction.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 5 most popular vehicle models based on total units sold, and ensure the transaction is committed only if all operations succeed.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE, UnitsSold INT, Price DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Bolt', 'Electric'), (5, 'Prius', 'Hybrid');","BEGIN; WITH ModelPopularity AS (SELECT V.ModelName, SUM(VS.UnitsSold) AS TotalUnits FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID GROUP BY V.ModelName ORDER BY SUM(VS.UnitsSold) DESC LIMIT 5) SELECT ModelName, TotalUnits FROM ModelPopularity; COMMIT;",The query begins a transaction and creates a common table expression (CTE) to calculate the total units sold for each vehicle model. It then orders the results to find the top 5 most popular models and commits the transaction.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average sales price and total units sold for electric and hybrid vehicles in each region, and commit the transaction.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), SaleDate DATE, UnitsSold INT, Price DECIMAL); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO Vehicles (VehicleID, ModelName, Type) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Bolt', 'Electric'), (5, 'Prius', 'Hybrid');","BEGIN; WITH SalesData AS (SELECT V.Type, VS.Region, AVG(VS.Price) AS AvgPrice, SUM(VS.UnitsSold) AS TotalUnits FROM VehicleSales VS JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.Type IN ('Electric', 'Hybrid') GROUP BY V.Type, VS.Region) SELECT Type, Region, AvgPrice, TotalUnits FROM SalesData; COMMIT;",The query begins a transaction and creates a common table expression (CTE) to calculate the average sales price and total units sold for electric and hybrid vehicles in each region. It then commits the transaction.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average monthly sales for different fashion brands across various regions, and then display the top 3 brands with the highest average sales.","CREATE TABLE FashionSales (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), AvgMonthlySales DECIMAL); INSERT INTO FashionSales (BrandID, BrandName, Region, AvgMonthlySales) VALUES (1, 'Brand A', 'North America', 50000.0), (2, 'Brand B', 'Europe', 45000.0), (3, 'Brand C', 'Asia', 60000.0), (4, 'Brand D', 'North America', 55000.0), (5, 'Brand E', 'Europe', 47000.0);","WITH RankedBrands AS (SELECT BrandName, AvgMonthlySales, DENSE_RANK() OVER (ORDER BY AvgMonthlySales DESC) AS Rank FROM FashionSales) SELECT BrandName, AvgMonthlySales FROM RankedBrands WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank fashion brands based on their average monthly sales in descending order. It then selects the top 3 brands with the highest average sales using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of sustainable fashion products sold by different brands in various regions, and then display the total number of sustainable products sold per region.","CREATE TABLE SustainableFashion (ProductID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), NumProductsSold INT); INSERT INTO SustainableFashion (ProductID, BrandName, Region, NumProductsSold) VALUES (1, 'Brand A', 'North America', 1000), (2, 'Brand B', 'Europe', 1500), (3, 'Brand C', 'Asia', 2000), (4, 'Brand D', 'North America', 1200), (5, 'Brand E', 'Europe', 1700);","SELECT Region, SUM(NumProductsSold) AS TotalProductsSold FROM SustainableFashion GROUP BY Region;",The query calculates the total number of sustainable fashion products sold in each region by summing up the number of products sold per region and grouping the results by region.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the consumer satisfaction ratings for different fashion brands across various regions, and then display the average satisfaction rating per region.","CREATE TABLE ConsumerSatisfaction (RatingID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), SatisfactionRating DECIMAL); INSERT INTO ConsumerSatisfaction (RatingID, BrandName, Region, SatisfactionRating) VALUES (1, 'Brand A', 'North America', 4.5), (2, 'Brand B', 'Europe', 4.2), (3, 'Brand C', 'Asia', 4.8), (4, 'Brand D', 'North America', 4.6), (5, 'Brand E', 'Europe', 4.3);","SELECT Region, AVG(SatisfactionRating) AS AvgSatisfactionRating FROM ConsumerSatisfaction GROUP BY Region;",The query calculates the average consumer satisfaction rating for each region by averaging the satisfaction ratings and grouping the results by region.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the annual revenue for different fashion brands across various regions, and then display the top 2 regions with the highest total revenue.","CREATE TABLE AnnualRevenue (RevenueID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), AnnualRevenue DECIMAL); INSERT INTO AnnualRevenue (RevenueID, BrandName, Region, AnnualRevenue) VALUES (1, 'Brand A', 'North America', 1000000.0), (2, 'Brand B', 'Europe', 900000.0), (3, 'Brand C', 'Asia', 1200000.0), (4, 'Brand D', 'North America', 1100000.0), (5, 'Brand E', 'Europe', 950000.0);","WITH RegionRevenue AS (SELECT Region, SUM(AnnualRevenue) AS TotalRevenue FROM AnnualRevenue GROUP BY Region), RankedRegions AS (SELECT Region, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM RegionRevenue) SELECT Region, TotalRevenue FROM RankedRegions WHERE Rank <= 2;",The query first calculates the total annual revenue for each region by summing up the annual revenues and grouping the results by region. It then ranks the regions based on their total revenue in descending order and selects the top 2 regions with the highest total revenue using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of new fashion trends identified by different fashion brands across various regions, and then display the total number of new trends per brand.","CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), NumNewTrends INT); INSERT INTO FashionTrends (TrendID, BrandName, Region, NumNewTrends) VALUES (1, 'Brand A', 'North America', 5), (2, 'Brand B', 'Europe', 7), (3, 'Brand C', 'Asia', 10), (4, 'Brand D', 'North America', 6), (5, 'Brand E', 'Europe', 8);","SELECT BrandName, SUM(NumNewTrends) AS TotalNewTrends FROM FashionTrends GROUP BY BrandName;",The query calculates the total number of new fashion trends identified by each brand by summing up the number of new trends and grouping the results by brand name.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total sales of electric vehicles by region and then display the regions where sales exceeded 10,000 units.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, Sales) VALUES (1, 'Model S', 'North America', 12000), (2, 'Model 3', 'Europe', 15000), (3, 'Leaf', 'Asia', 8000), (4, 'Bolt', 'North America', 9000), (5, 'Prius', 'Europe', 11000);","WITH TotalSales AS (SELECT Region, SUM(Sales) AS TotalSales FROM VehicleSales GROUP BY Region) SELECT Region FROM TotalSales WHERE TotalSales > 10000;","The query first creates a common table expression (CTE) named TotalSales that calculates the total sales for each region by summing up the sales from the VehicleSales table. It then selects the regions where the total sales exceed 10,000 units."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the average CO2 emissions for different vehicle models and then display the models with emissions below 100 g/km.,"CREATE TABLE Emissions (EmissionID INT PRIMARY KEY, ModelName VARCHAR(50), CO2Emissions DECIMAL); INSERT INTO Emissions (EmissionID, ModelName, CO2Emissions) VALUES (1, 'Model S', 95.0), (2, 'Model 3', 98.0), (3, 'Leaf', 85.0), (4, 'Bolt', 105.0), (5, 'Prius', 99.0);","WITH LowEmissions AS (SELECT ModelName, CO2Emissions FROM Emissions WHERE CO2Emissions < 100) SELECT ModelName, CO2Emissions FROM LowEmissions;",The query creates a common table expression (CTE) named LowEmissions that selects vehicle models with CO2 emissions below 100 g/km from the Emissions table. It then retrieves the model names and their respective CO2 emissions.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the number of hybrid vehicles sold in different countries and then display the countries with sales between 5000 and 15000 units.,"CREATE TABLE HybridSales (SaleID INT PRIMARY KEY, Country VARCHAR(50), Sales INT); INSERT INTO HybridSales (SaleID, Country, Sales) VALUES (1, 'USA', 12000), (2, 'Germany', 8000), (3, 'Japan', 14000), (4, 'Canada', 4000), (5, 'France', 6000);","WITH SalesRange AS (SELECT Country, Sales FROM HybridSales WHERE Sales BETWEEN 5000 AND 15000) SELECT Country, Sales FROM SalesRange;",The query creates a common table expression (CTE) named SalesRange that selects countries with hybrid vehicle sales between 5000 and 15000 units from the HybridSales table. It then retrieves the country names and their respective sales figures.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the fuel efficiency of different vehicle models and then display the models with the highest fuel efficiency in each region.,"CREATE TABLE FuelEfficiency (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), FuelEfficiency DECIMAL); INSERT INTO FuelEfficiency (ModelID, ModelName, Region, FuelEfficiency) VALUES (1, 'Model S', 'North America', 120.5), (2, 'Model 3', 'Europe', 118.0), (3, 'Leaf', 'Asia', 110.0), (4, 'Bolt', 'North America', 115.7), (5, 'Prius', 'Europe', 95.0);","WITH RankedEfficiency AS (SELECT ModelName, Region, FuelEfficiency, RANK() OVER (PARTITION BY Region ORDER BY FuelEfficiency DESC) AS Rank FROM FuelEfficiency) SELECT ModelName, Region, FuelEfficiency FROM RankedEfficiency WHERE Rank = 1;",The query creates a common table expression (CTE) named RankedEfficiency that ranks vehicle models based on their fuel efficiency within each region using the RANK() function. It then selects the models with the highest fuel efficiency in each region.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the sales of different vehicle types and then display the vehicle types that have not been sold in any region.,"CREATE TABLE VehicleTypes (TypeID INT PRIMARY KEY, TypeName VARCHAR(50)); CREATE TABLE Sales (SaleID INT PRIMARY KEY, TypeID INT, Region VARCHAR(50), Sales INT); INSERT INTO VehicleTypes (TypeID, TypeName) VALUES (1, 'Sedan'), (2, 'SUV'), (3, 'Truck'), (4, 'Coupe'), (5, 'Convertible'); INSERT INTO Sales (SaleID, TypeID, Region, Sales) VALUES (1, 1, 'North America', 5000), (2, 2, 'Europe', 7000), (3, 3, 'Asia', 3000), (4, 4, 'North America', 2000);",SELECT TypeName FROM VehicleTypes EXCEPT SELECT TypeName FROM VehicleTypes VT JOIN Sales S ON VT.TypeID = S.TypeID;,The query selects vehicle types from the VehicleTypes table that do not have corresponding sales records in the Sales table by using the EXCEPT set operation. It retrieves the names of vehicle types that have not been sold in any region.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new hotel record and then display the top 3 hotels with the highest customer ratings.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100), CustomerRating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, Location, CustomerRating) VALUES (1, 'Grand Plaza', 'New York', 4.5), (2, 'Ocean View', 'Miami', 4.7), (3, 'Mountain Retreat', 'Denver', 4.6);","INSERT INTO Hotels (HotelID, HotelName, Location, CustomerRating) VALUES (4, 'City Center Inn', 'Chicago', 4.8); WITH RankedHotels AS (SELECT HotelName, CustomerRating, DENSE_RANK() OVER (ORDER BY CustomerRating DESC) AS Rank FROM Hotels) SELECT HotelName, CustomerRating FROM RankedHotels WHERE Rank <= 3;","The query first inserts a new hotel record into the Hotels table. Then, it creates a common table expression (CTE) to rank hotels based on their customer ratings in descending order. Finally, it selects the top 3 hotels with the highest customer ratings using the DENSE_RANK function."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the customer rating of a specific hotel and then display all hotels in descending order of their ratings.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100), CustomerRating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, Location, CustomerRating) VALUES (1, 'Grand Plaza', 'New York', 4.5), (2, 'Ocean View', 'Miami', 4.7), (3, 'Mountain Retreat', 'Denver', 4.6);","UPDATE Hotels SET CustomerRating = 4.9 WHERE HotelID = 1; WITH OrderedHotels AS (SELECT HotelName, Location, CustomerRating FROM Hotels ORDER BY CustomerRating DESC) SELECT * FROM OrderedHotels;","The query first updates the customer rating of the hotel with HotelID 1 to 4.9. Then, it creates a common table expression (CTE) to order all hotels by their customer ratings in descending order. Finally, it selects all columns from the ordered list of hotels."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Delete a hotel record and then display the remaining hotels with their average customer ratings per location.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100), CustomerRating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, Location, CustomerRating) VALUES (1, 'Grand Plaza', 'New York', 4.5), (2, 'Ocean View', 'Miami', 4.7), (3, 'Mountain Retreat', 'Denver', 4.6);","DELETE FROM Hotels WHERE HotelID = 2; WITH AvgRatings AS (SELECT Location, AVG(CustomerRating) AS AvgRating FROM Hotels GROUP BY Location) SELECT Location, AvgRating FROM AvgRatings;","The query first deletes the hotel record with HotelID 2. Then, it creates a common table expression (CTE) to calculate the average customer rating for each location by grouping the hotels by location. Finally, it selects the location and their average customer ratings."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new travel trend record and then display the top 5 most popular travel trends.,"CREATE TABLE TravelTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), PopularityScore DECIMAL); INSERT INTO TravelTrends (TrendID, TrendName, PopularityScore) VALUES (1, 'Eco-Tourism', 85.5), (2, 'Adventure Travel', 90.0), (3, 'Cultural Tourism', 88.0);","INSERT INTO TravelTrends (TrendID, TrendName, PopularityScore) VALUES (4, 'Wellness Travel', 92.0); WITH RankedTrends AS (SELECT TrendName, PopularityScore, DENSE_RANK() OVER (ORDER BY PopularityScore DESC) AS Rank FROM TravelTrends) SELECT TrendName, PopularityScore FROM RankedTrends WHERE Rank <= 5;","The query first inserts a new travel trend record into the TravelTrends table. Then, it creates a common table expression (CTE) to rank travel trends based on their popularity scores in descending order. Finally, it selects the top 5 most popular travel trends using the DENSE_RANK function."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the popularity score of a travel trend and then display all trends ordered by their popularity scores.,"CREATE TABLE TravelTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), PopularityScore DECIMAL); INSERT INTO TravelTrends (TrendID, TrendName, PopularityScore) VALUES (1, 'Eco-Tourism', 85.5), (2, 'Adventure Travel', 90.0), (3, 'Cultural Tourism', 88.0);","UPDATE TravelTrends SET PopularityScore = 95.0 WHERE TrendID = 1; WITH OrderedTrends AS (SELECT TrendName, PopularityScore FROM TravelTrends ORDER BY PopularityScore DESC) SELECT * FROM OrderedTrends;","The query first updates the popularity score of the travel trend with TrendID 1 to 95.0. Then, it creates a common table expression (CTE) to order all travel trends by their popularity scores in descending order. Finally, it selects all columns from the ordered list of travel trends."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 10 most popular fashion brands based on consumer purchases in the last year, segmented by region.","CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, Region VARCHAR(50), PurchaseDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50));","WITH RankedBrands AS (SELECT b.BrandName, p.Region, COUNT(p.PurchaseID) AS PurchaseCount, ROW_NUMBER() OVER (PARTITION BY p.Region ORDER BY COUNT(p.PurchaseID) DESC) AS Rank FROM Purchases p JOIN Brands b ON p.BrandID = b.BrandID WHERE p.PurchaseDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY b.BrandName, p.Region) SELECT BrandName, Region, PurchaseCount FROM RankedBrands WHERE Rank <= 10;","The query creates a common table expression (CTE) to rank fashion brands based on the number of purchases in the last year, segmented by region. It then selects the top 10 most popular brands in each region using the ROW_NUMBER function."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 regions with the highest average spending on sustainable fashion products over the past two years.,"CREATE TABLE SustainablePurchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, Region VARCHAR(50), AmountSpent DECIMAL, PurchaseDate DATE);","WITH RegionSpending AS (SELECT Region, AVG(AmountSpent) AS AvgSpending FROM SustainablePurchases WHERE PurchaseDate >= DATEADD(YEAR, -2, GETDATE()) GROUP BY Region), RankedRegions AS (SELECT Region, AvgSpending, RANK() OVER (ORDER BY AvgSpending DESC) AS Rank FROM RegionSpending) SELECT Region, AvgSpending FROM RankedRegions WHERE Rank <= 5;",The query first calculates the average spending on sustainable fashion products for each region over the past two years. It then ranks these regions by average spending in descending order and selects the top 5 regions using the RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 fashion trends based on social media mentions over the past six months, segmented by age group.","CREATE TABLE SocialMediaMentions (MentionID INT PRIMARY KEY, TrendID INT, AgeGroup VARCHAR(50), MentionDate DATE); CREATE TABLE Trends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50));","WITH TrendMentions AS (SELECT t.TrendName, s.AgeGroup, COUNT(s.MentionID) AS MentionCount, DENSE_RANK() OVER (PARTITION BY s.AgeGroup ORDER BY COUNT(s.MentionID) DESC) AS Rank FROM SocialMediaMentions s JOIN Trends t ON s.TrendID = t.TrendID WHERE s.MentionDate >= DATEADD(MONTH, -6, GETDATE()) GROUP BY t.TrendName, s.AgeGroup) SELECT TrendName, AgeGroup, MentionCount FROM TrendMentions WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank fashion trends based on the number of social media mentions over the past six months, segmented by age group. It then selects the top 5 trends in each age group using the DENSE_RANK function."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Find the top 5 most frequently purchased sustainable fashion items in the last year, along with the total quantity purchased.","CREATE TABLE SustainableItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50)); CREATE TABLE SustainablePurchases (PurchaseID INT PRIMARY KEY, ItemID INT, Quantity INT, PurchaseDate DATE);","WITH ItemPurchases AS (SELECT i.ItemName, SUM(p.Quantity) AS TotalQuantity, RANK() OVER (ORDER BY SUM(p.Quantity) DESC) AS Rank FROM SustainablePurchases p JOIN SustainableItems i ON p.ItemID = i.ItemID WHERE p.PurchaseDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY i.ItemName) SELECT ItemName, TotalQuantity FROM ItemPurchases WHERE Rank <= 5;",The query first calculates the total quantity purchased for each sustainable fashion item over the past year. It then ranks these items by total quantity in descending order and selects the top 5 items using the RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 countries with the highest growth in fashion sales over the past year, based on percentage increase.","CREATE TABLE Sales (SaleID INT PRIMARY KEY, Country VARCHAR(50), SaleAmount DECIMAL, SaleDate DATE);","WITH SalesGrowth AS (SELECT Country, (SUM(CASE WHEN SaleDate >= DATEADD(YEAR, -1, GETDATE()) THEN SaleAmount ELSE 0 END) - SUM(CASE WHEN SaleDate < DATEADD(YEAR, -1, GETDATE()) THEN SaleAmount ELSE 0 END)) / SUM(CASE WHEN SaleDate < DATEADD(YEAR, -1, GETDATE()) THEN SaleAmount ELSE 0 END) * 100 AS GrowthPercentage FROM Sales GROUP BY Country), RankedCountries AS (SELECT Country, GrowthPercentage, RANK() OVER (ORDER BY GrowthPercentage DESC) AS Rank FROM SalesGrowth) SELECT Country, GrowthPercentage FROM RankedCountries WHERE Rank <= 5;",The query calculates the percentage growth in fashion sales for each country over the past year. It then ranks these countries by growth percentage in descending order and selects the top 5 countries using the RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that tracks the adoption rates of various emerging technologies across different industries, and then display the top 3 industries with the highest adoption rates for AI.","CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(50)); CREATE TABLE Industries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50)); CREATE TABLE AdoptionRates (AdoptionID INT PRIMARY KEY, TechID INT, IndustryID INT, AdoptionRate DECIMAL, FOREIGN KEY (TechID) REFERENCES Technologies(TechID), FOREIGN KEY (IndustryID) REFERENCES Industries(IndustryID)); INSERT INTO Technologies (TechID, TechName) VALUES (1, 'AI'), (2, 'Blockchain'), (3, 'IoT'); INSERT INTO Industries (IndustryID, IndustryName) VALUES (1, 'Healthcare'), (2, 'Finance'), (3, 'Manufacturing');","WITH RankedIndustries AS (SELECT i.IndustryName, ar.AdoptionRate, DENSE_RANK() OVER (ORDER BY ar.AdoptionRate DESC) AS Rank FROM AdoptionRates ar INNER JOIN Industries i ON ar.IndustryID = i.IndustryID INNER JOIN Technologies t ON ar.TechID = t.TechID WHERE t.TechName = 'AI') SELECT IndustryName, AdoptionRate FROM RankedIndustries WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank industries based on their adoption rates of AI in descending order. It then selects the top 3 industries with the highest adoption rates using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the market share of different tech companies in various regions, and then display the top 5 companies with the highest market share in North America.","CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE MarketShare (MarketShareID INT PRIMARY KEY, CompanyID INT, RegionID INT, MarketShare DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)); INSERT INTO Companies (CompanyID, CompanyName) VALUES (1, 'Company A'), (2, 'Company B'), (3, 'Company C'); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia');","WITH RankedCompanies AS (SELECT c.CompanyName, ms.MarketShare, DENSE_RANK() OVER (ORDER BY ms.MarketShare DESC) AS Rank FROM MarketShare ms INNER JOIN Companies c ON ms.CompanyID = c.CompanyID INNER JOIN Regions r ON ms.RegionID = r.RegionID WHERE r.RegionName = 'North America') SELECT CompanyName, MarketShare FROM RankedCompanies WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank companies based on their market share in North America in descending order. It then selects the top 5 companies with the highest market share using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that records the investment amounts in different tech startups across various funding rounds, and then display the top 5 startups with the highest total investment.","CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50)); CREATE TABLE FundingRounds (RoundID INT PRIMARY KEY, RoundName VARCHAR(50)); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, StartupID INT, RoundID INT, InvestmentAmount DECIMAL, FOREIGN KEY (StartupID) REFERENCES Startups(StartupID), FOREIGN KEY (RoundID) REFERENCES FundingRounds(RoundID)); INSERT INTO Startups (StartupID, StartupName) VALUES (1, 'Startup A'), (2, 'Startup B'), (3, 'Startup C'); INSERT INTO FundingRounds (RoundID, RoundName) VALUES (1, 'Seed'), (2, 'Series A'), (3, 'Series B');","WITH TotalInvestments AS (SELECT s.StartupName, SUM(i.InvestmentAmount) AS TotalInvestment FROM Investments i INNER JOIN Startups s ON i.StartupID = s.StartupID GROUP BY s.StartupName), RankedStartups AS (SELECT StartupName, TotalInvestment, DENSE_RANK() OVER (ORDER BY TotalInvestment DESC) AS Rank FROM TotalInvestments) SELECT StartupName, TotalInvestment FROM RankedStartups WHERE Rank <= 5;",The query creates a common table expression (CTE) to calculate the total investment for each startup. It then ranks the startups based on their total investment in descending order and selects the top 5 startups using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that logs the number of patents filed by different tech companies in various sectors, and then display the top 3 sectors with the highest number of patents filed.","CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50)); CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(50)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyID INT, SectorID INT, PatentCount INT, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID), FOREIGN KEY (SectorID) REFERENCES Sectors(SectorID)); INSERT INTO Companies (CompanyID, CompanyName) VALUES (1, 'Company A'), (2, 'Company B'), (3, 'Company C'); INSERT INTO Sectors (SectorID, SectorName) VALUES (1, 'AI'), (2, 'Blockchain'), (3, 'IoT');","WITH TotalPatents AS (SELECT s.SectorName, SUM(p.PatentCount) AS TotalPatents FROM Patents p INNER JOIN Sectors s ON p.SectorID = s.SectorID GROUP BY s.SectorName), RankedSectors AS (SELECT SectorName, TotalPatents, DENSE_RANK() OVER (ORDER BY TotalPatents DESC) AS Rank FROM TotalPatents) SELECT SectorName, TotalPatents FROM RankedSectors WHERE Rank <= 3;",The query creates a common table expression (CTE) to calculate the total number of patents filed in each sector. It then ranks the sectors based on the total number of patents filed in descending order and selects the top 3 sectors using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that tracks the revenue generated by different tech products across various regions, and then display the top 5 products with the highest revenue in Europe.","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, ProductID INT, RegionID INT, RevenueAmount DECIMAL, FOREIGN KEY (ProductID) REFERENCES Products(ProductID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)); INSERT INTO Products (ProductID, ProductName) VALUES (1, 'Product A'), (2, 'Product B'), (3, 'Product C'); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia');","WITH RankedProducts AS (SELECT p.ProductName, r.RevenueAmount, DENSE_RANK() OVER (ORDER BY r.RevenueAmount DESC) AS Rank FROM Revenue r INNER JOIN Products p ON r.ProductID = p.ProductID INNER JOIN Regions rg ON r.RegionID = rg.RegionID WHERE rg.RegionName = 'Europe') SELECT ProductName, RevenueAmount FROM RankedProducts WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank products based on their revenue in Europe in descending order. It then selects the top 5 products with the highest revenue using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different genres of movies across various regions, and then display the top 3 highest-grossing genres.","CREATE TABLE MovieRevenue (GenreID INT PRIMARY KEY, GenreName VARCHAR(50), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO MovieRevenue (GenreID, GenreName, Region, TotalRevenue) VALUES (1, 'Action', 'North America', 5000000), (2, 'Comedy', 'Europe', 3000000), (3, 'Drama', 'Asia', 4000000), (4, 'Horror', 'North America', 2000000), (5, 'Sci-Fi', 'Europe', 3500000);","WITH RankedGenres AS (SELECT GenreName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM MovieRevenue) SELECT GenreName, TotalRevenue FROM RankedGenres WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank movie genres based on their total revenue in descending order. It then selects the top 3 highest-grossing genres using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average viewership ratings for different TV shows across various platforms, and then display the top 5 highest-rated shows.","CREATE TABLE TVShowRatings (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), Platform VARCHAR(50), AvgRating DECIMAL); INSERT INTO TVShowRatings (ShowID, ShowName, Platform, AvgRating) VALUES (1, 'Breaking Bad', 'Netflix', 9.5), (2, 'Game of Thrones', 'HBO', 9.3), (3, 'Stranger Things', 'Netflix', 8.9), (4, 'The Crown', 'Netflix', 8.7), (5, 'Westworld', 'HBO', 8.5);","WITH RankedShows AS (SELECT ShowName, AvgRating, DENSE_RANK() OVER (ORDER BY AvgRating DESC) AS Rank FROM TVShowRatings) SELECT ShowName, AvgRating FROM RankedShows WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank TV shows based on their average ratings in descending order. It then selects the top 5 highest-rated shows using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of subscribers for different streaming platforms across various regions, and then display the top 3 platforms with the highest number of subscribers.","CREATE TABLE StreamingSubscribers (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50), Region VARCHAR(50), SubscriberCount INT); INSERT INTO StreamingSubscribers (PlatformID, PlatformName, Region, SubscriberCount) VALUES (1, 'Netflix', 'North America', 70000000), (2, 'Hulu', 'Europe', 30000000), (3, 'Amazon Prime', 'Asia', 50000000), (4, 'Disney+', 'North America', 60000000), (5, 'HBO Max', 'Europe', 40000000);","WITH RankedPlatforms AS (SELECT PlatformName, SubscriberCount, DENSE_RANK() OVER (ORDER BY SubscriberCount DESC) AS Rank FROM StreamingSubscribers) SELECT PlatformName, SubscriberCount FROM RankedPlatforms WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank streaming platforms based on their subscriber count in descending order. It then selects the top 3 platforms with the highest number of subscribers using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total number of views for different YouTube channels across various categories, and then display the top 5 most viewed channels.","CREATE TABLE YouTubeViews (ChannelID INT PRIMARY KEY, ChannelName VARCHAR(50), Category VARCHAR(50), TotalViews INT); INSERT INTO YouTubeViews (ChannelID, ChannelName, Category, TotalViews) VALUES (1, 'PewDiePie', 'Gaming', 25000000000), (2, 'T-Series', 'Music', 30000000000), (3, '5-Minute Crafts', 'DIY', 20000000000), (4, 'Cocomelon', 'Kids', 15000000000), (5, 'SET India', 'Entertainment', 18000000000);","WITH RankedChannels AS (SELECT ChannelName, TotalViews, DENSE_RANK() OVER (ORDER BY TotalViews DESC) AS Rank FROM YouTubeViews) SELECT ChannelName, TotalViews FROM RankedChannels WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank YouTube channels based on their total views in descending order. It then selects the top 5 most viewed channels using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different music albums across various regions, and then display the top 3 highest-grossing albums.","CREATE TABLE MusicRevenue (AlbumID INT PRIMARY KEY, AlbumName VARCHAR(50), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO MusicRevenue (AlbumID, AlbumName, Region, TotalRevenue) VALUES (1, 'Thriller', 'North America', 10000000), (2, 'Back in Black', 'Europe', 8000000), (3, 'The Dark Side of the Moon', 'Asia', 9000000), (4, 'The Bodyguard', 'North America', 7000000), (5, 'Rumours', 'Europe', 6000000);","WITH RankedAlbums AS (SELECT AlbumName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM MusicRevenue) SELECT AlbumName, TotalRevenue FROM RankedAlbums WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank music albums based on their total revenue in descending order. It then selects the top 3 highest-grossing albums using the DENSE_RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the list of patients who have been prescribed a specific drug and the outcomes of their treatments, ensuring the transaction is committed only if the data retrieval is successful.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), DatePrescribed DATE); CREATE TABLE Outcomes (OutcomeID INT PRIMARY KEY, PatientID INT, TreatmentOutcome VARCHAR(255), DateRecorded DATE);","BEGIN TRANSACTION; SELECT p.Name, p.Age, p.Gender, pr.DrugName, o.TreatmentOutcome FROM Patients p INNER JOIN Prescriptions pr ON p.PatientID = pr.PatientID INNER JOIN Outcomes o ON p.PatientID = o.PatientID WHERE pr.DrugName = 'DrugX'; COMMIT;","The query starts a transaction and retrieves patient details, prescribed drug, and treatment outcomes by joining the Patients, Prescriptions, and Outcomes tables on PatientID. It commits the transaction only if the data retrieval is successful."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List all patients who have had adverse side effects from a specific drug and rollback the transaction if any error occurs during the process.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), DatePrescribed DATE); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), SideEffect VARCHAR(255), DateRecorded DATE);","BEGIN TRANSACTION; SELECT p.Name, p.Age, p.Gender, s.SideEffect FROM Patients p INNER JOIN SideEffects s ON p.PatientID = s.PatientID WHERE s.DrugName = 'DrugY'; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT;","The query starts a transaction and retrieves patient details and side effects for a specific drug by joining the Patients and SideEffects tables on PatientID. It rolls back the transaction if any error occurs; otherwise, it commits the transaction."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average age of patients who have been treated for a specific condition and commit the transaction only if the average age is successfully calculated.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(255), DateDiagnosed DATE);",BEGIN TRANSACTION; SELECT AVG(p.Age) AS AverageAge FROM Patients p INNER JOIN MedicalHistory mh ON p.PatientID = mh.PatientID WHERE mh.Condition = 'ConditionA'; COMMIT;,The query starts a transaction and calculates the average age of patients treated for a specific condition by joining the Patients and MedicalHistory tables on PatientID. It commits the transaction only if the average age is successfully calculated.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the treatment protocols and outcomes for patients diagnosed with a specific condition, ensuring the transaction is committed only if the data retrieval is successful.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(255), DateDiagnosed DATE); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, PatientID INT, ProtocolDetails VARCHAR(255), DateAdministered DATE); CREATE TABLE Outcomes (OutcomeID INT PRIMARY KEY, PatientID INT, TreatmentOutcome VARCHAR(255), DateRecorded DATE);","BEGIN TRANSACTION; SELECT p.Name, mh.Condition, tp.ProtocolDetails, o.TreatmentOutcome FROM Patients p INNER JOIN MedicalHistory mh ON p.PatientID = mh.PatientID INNER JOIN TreatmentProtocols tp ON p.PatientID = tp.PatientID INNER JOIN Outcomes o ON p.PatientID = o.PatientID WHERE mh.Condition = 'ConditionB'; COMMIT;","The query starts a transaction and retrieves patient details, treatment protocols, and outcomes for a specific condition by joining the Patients, MedicalHistory, TreatmentProtocols, and Outcomes tables on PatientID. It commits the transaction only if the data retrieval is successful."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the names of patients and the drugs they have been prescribed, ensuring the transaction is committed only if the data retrieval is successful.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), DatePrescribed DATE);","BEGIN TRANSACTION; SELECT p.Name, pr.DrugName FROM Patients p INNER JOIN Prescriptions pr ON p.PatientID = pr.PatientID; COMMIT;",The query starts a transaction and retrieves patient names and the drugs they have been prescribed by joining the Patients and Prescriptions tables on PatientID. It commits the transaction only if the data retrieval is successful.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 10 most popular sustainable fashion brands in North America and Europe, excluding those that are only popular in one region.","CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(100), Region VARCHAR(50), PopularityScore INT); INSERT INTO FashionBrands (BrandID, BrandName, Region, PopularityScore) VALUES (1, 'EcoWear', 'North America', 85), (2, 'GreenThreads', 'Europe', 90), (3, 'SustainStyle', 'North America', 75), (4, 'EcoWear', 'Europe', 80), (5, 'GreenThreads', 'North America', 70);","WITH PopularBrandsNA AS (SELECT BrandName, PopularityScore FROM FashionBrands WHERE Region = 'North America' AND PopularityScore > 70), PopularBrandsEU AS (SELECT BrandName, PopularityScore FROM FashionBrands WHERE Region = 'Europe' AND PopularityScore > 70) SELECT BrandName, PopularityScore FROM PopularBrandsNA INTERSECT SELECT BrandName, PopularityScore FROM PopularBrandsEU ORDER BY PopularityScore DESC LIMIT 10;",The query first creates two common table expressions (CTEs) to filter brands with a popularity score greater than 70 in North America and Europe. It then uses the INTERSECT set operation to find brands that are popular in both regions and selects the top 10 based on popularity score.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 fashion trends that are popular in both Asia and Europe but not in North America.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), Region VARCHAR(50), PopularityScore INT); INSERT INTO FashionTrends (TrendID, TrendName, Region, PopularityScore) VALUES (1, 'Minimalism', 'Asia', 95), (2, 'Vintage', 'Europe', 90), (3, 'Streetwear', 'North America', 85), (4, 'Minimalism', 'Europe', 80), (5, 'Vintage', 'Asia', 85);","WITH PopularTrendsAsia AS (SELECT TrendName, PopularityScore FROM FashionTrends WHERE Region = 'Asia' AND PopularityScore > 80), PopularTrendsEurope AS (SELECT TrendName, PopularityScore FROM FashionTrends WHERE Region = 'Europe' AND PopularityScore > 80), PopularTrendsNA AS (SELECT TrendName FROM FashionTrends WHERE Region = 'North America') SELECT TrendName, PopularityScore FROM PopularTrendsAsia INTERSECT SELECT TrendName, PopularityScore FROM PopularTrendsEurope EXCEPT SELECT TrendName FROM PopularTrendsNA ORDER BY PopularityScore DESC LIMIT 5;","The query creates three CTEs to filter trends with a popularity score greater than 80 in Asia and Europe, and all trends in North America. It then uses INTERSECT to find trends popular in both Asia and Europe, and EXCEPT to exclude those trends that are also popular in North America. Finally, it selects the top 5 based on popularity score."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a list of consumers who have shown interest in sustainable fashion practices in both North America and Europe, but not in Asia.","CREATE TABLE ConsumerInterests (ConsumerID INT PRIMARY KEY, ConsumerName VARCHAR(100), Region VARCHAR(50), Interest VARCHAR(100)); INSERT INTO ConsumerInterests (ConsumerID, ConsumerName, Region, Interest) VALUES (1, 'Alice', 'North America', 'Sustainable Fashion'), (2, 'Bob', 'Europe', 'Sustainable Fashion'), (3, 'Charlie', 'Asia', 'Fast Fashion'), (4, 'Alice', 'Europe', 'Sustainable Fashion'), (5, 'Bob', 'North America', 'Sustainable Fashion');","WITH InterestedConsumersNA AS (SELECT ConsumerName FROM ConsumerInterests WHERE Region = 'North America' AND Interest = 'Sustainable Fashion'), InterestedConsumersEU AS (SELECT ConsumerName FROM ConsumerInterests WHERE Region = 'Europe' AND Interest = 'Sustainable Fashion'), InterestedConsumersAsia AS (SELECT ConsumerName FROM ConsumerInterests WHERE Region = 'Asia' AND Interest = 'Sustainable Fashion') SELECT ConsumerName FROM InterestedConsumersNA INTERSECT SELECT ConsumerName FROM InterestedConsumersEU EXCEPT SELECT ConsumerName FROM InterestedConsumersAsia;","The query creates three CTEs to filter consumers interested in sustainable fashion in North America, Europe, and Asia. It then uses INTERSECT to find consumers interested in both North America and Europe, and EXCEPT to exclude those interested in Asia."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Find the top 5 regions where eco-friendly materials are most popular, excluding regions where fast fashion is also highly popular.","CREATE TABLE MaterialPopularity (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(100), Region VARCHAR(50), PopularityScore INT); INSERT INTO MaterialPopularity (MaterialID, MaterialName, Region, PopularityScore) VALUES (1, 'Organic Cotton', 'North America', 90), (2, 'Recycled Polyester', 'Europe', 85), (3, 'Organic Cotton', 'Asia', 80), (4, 'Fast Fashion', 'North America', 95), (5, 'Recycled Polyester', 'Asia', 70);","WITH EcoFriendlyMaterials AS (SELECT Region, PopularityScore FROM MaterialPopularity WHERE MaterialName IN ('Organic Cotton', 'Recycled Polyester') AND PopularityScore > 70), FastFashionRegions AS (SELECT Region FROM MaterialPopularity WHERE MaterialName = 'Fast Fashion' AND PopularityScore > 70) SELECT Region, PopularityScore FROM EcoFriendlyMaterials EXCEPT SELECT Region FROM FastFashionRegions ORDER BY PopularityScore DESC LIMIT 5;",The query creates two CTEs to filter regions where eco-friendly materials have a popularity score greater than 70 and regions where fast fashion has a popularity score greater than 70. It then uses EXCEPT to exclude regions where fast fashion is also highly popular and selects the top 5 regions based on popularity score.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Create a report showing the top 5 consumer demographics interested in sustainable fashion practices across all regions, excluding those interested in fast fashion.","CREATE TABLE ConsumerDemographics (DemographicID INT PRIMARY KEY, AgeGroup VARCHAR(50), Region VARCHAR(50), Interest VARCHAR(100), InterestScore INT); INSERT INTO ConsumerDemographics (DemographicID, AgeGroup, Region, Interest, InterestScore) VALUES (1, '18-25', 'North America', 'Sustainable Fashion', 85), (2, '26-35', 'Europe', 'Sustainable Fashion', 90), (3, '18-25', 'Asia', 'Fast Fashion', 80), (4, '26-35', 'North America', 'Sustainable Fashion', 75), (5, '36-45', 'Europe', 'Fast Fashion', 70);","WITH SustainableFashionInterest AS (SELECT AgeGroup, InterestScore FROM ConsumerDemographics WHERE Interest = 'Sustainable Fashion' AND InterestScore > 70), FastFashionInterest AS (SELECT AgeGroup FROM ConsumerDemographics WHERE Interest = 'Fast Fashion' AND InterestScore > 70) SELECT AgeGroup, InterestScore FROM SustainableFashionInterest EXCEPT SELECT AgeGroup FROM FastFashionInterest ORDER BY InterestScore DESC LIMIT 5;",The query creates two CTEs to filter consumer demographics with an interest score greater than 70 in sustainable fashion and fast fashion. It then uses EXCEPT to exclude demographics interested in fast fashion and selects the top 5 demographics based on interest score.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average crop yield per farm for the last year and ensure the transaction is committed only if the average yield is above a certain threshold.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50)); CREATE TABLE CropYields (YieldID INT PRIMARY KEY, FarmID INT, CropType VARCHAR(50), Yield DECIMAL, Year INT, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID));","BEGIN TRANSACTION; WITH AvgYield AS (SELECT FarmID, AVG(Yield) AS AvgYield FROM CropYields WHERE Year = YEAR(CURRENT_DATE) - 1 GROUP BY FarmID) SELECT * FROM AvgYield WHERE AvgYield > 100; COMMIT;","The query starts a transaction, calculates the average crop yield per farm for the last year using a common table expression (CTE), and commits the transaction only if the average yield is above 100."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 3 crops by yield for each farm and ensure the transaction is rolled back if any farm has less than 3 crops.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50)); CREATE TABLE CropYields (YieldID INT PRIMARY KEY, FarmID INT, CropType VARCHAR(50), Yield DECIMAL, Year INT, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID));","BEGIN TRANSACTION; WITH RankedCrops AS (SELECT FarmID, CropType, Yield, ROW_NUMBER() OVER (PARTITION BY FarmID ORDER BY Yield DESC) AS Rank FROM CropYields) SELECT FarmID, CropType, Yield FROM RankedCrops WHERE Rank <= 3; IF (SELECT COUNT(DISTINCT CropType) FROM CropYields GROUP BY FarmID HAVING COUNT(DISTINCT CropType) < 3) > 0 ROLLBACK; ELSE COMMIT;","The query starts a transaction, ranks crops by yield for each farm using a common table expression (CTE), and lists the top 3 crops. It rolls back the transaction if any farm has less than 3 crops, otherwise, it commits the transaction."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Update the supply chain status for farms that have shipped more than 1000 units of produce this month and commit the transaction.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50)); CREATE TABLE Shipments (ShipmentID INT PRIMARY KEY, FarmID INT, UnitsShipped INT, ShipmentDate DATE, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID)); CREATE TABLE SupplyChainStatus (StatusID INT PRIMARY KEY, FarmID INT, Status VARCHAR(50), FOREIGN KEY (FarmID) REFERENCES Farms(FarmID));","BEGIN TRANSACTION; WITH MonthlyShipments AS (SELECT FarmID, SUM(UnitsShipped) AS TotalUnits FROM Shipments WHERE MONTH(ShipmentDate) = MONTH(CURRENT_DATE) AND YEAR(ShipmentDate) = YEAR(CURRENT_DATE) GROUP BY FarmID) UPDATE SupplyChainStatus SET Status = 'Active' WHERE FarmID IN (SELECT FarmID FROM MonthlyShipments WHERE TotalUnits > 1000); COMMIT;","The query starts a transaction, calculates the total units shipped by each farm this month using a common table expression (CTE), and updates the supply chain status to 'Active' for farms that have shipped more than 1000 units. It then commits the transaction."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total revenue generated by each farm from different crops and commit the transaction if the total revenue exceeds a certain threshold.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50)); CREATE TABLE CropSales (SaleID INT PRIMARY KEY, FarmID INT, CropType VARCHAR(50), Revenue DECIMAL, SaleDate DATE, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID));","BEGIN TRANSACTION; WITH TotalRevenue AS (SELECT FarmID, SUM(Revenue) AS TotalRevenue FROM CropSales GROUP BY FarmID) SELECT * FROM TotalRevenue WHERE TotalRevenue > 50000; COMMIT;","The query starts a transaction, calculates the total revenue generated by each farm from different crops using a common table expression (CTE), and commits the transaction if the total revenue exceeds 50000."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify farms that have not updated their farming practices in the last two years and rollback the transaction if any such farms are found.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50)); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, FarmID INT, PracticeDescription VARCHAR(255), LastUpdated DATE, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID));","BEGIN TRANSACTION; WITH OutdatedPractices AS (SELECT FarmID FROM FarmingPractices WHERE LastUpdated < DATE_SUB(CURRENT_DATE, INTERVAL 2 YEAR)) SELECT * FROM OutdatedPractices; IF (SELECT COUNT(*) FROM OutdatedPractices) > 0 ROLLBACK; ELSE COMMIT;","The query starts a transaction, identifies farms that have not updated their farming practices in the last two years using a common table expression (CTE), and rolls back the transaction if any such farms are found, otherwise, it commits the transaction."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Analyze the impact of sustainable fashion practices on consumer purchasing behavior across different regions and time periods, and ensure the transaction is committed only if all steps succeed.","CREATE TABLE ConsumerBehavior (TransactionID INT PRIMARY KEY, ConsumerID INT, Region VARCHAR(50), PurchaseDate DATE, SustainablePractice VARCHAR(50), AmountSpent DECIMAL); CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), StartDate DATE, EndDate DATE); CREATE TABLE SustainablePractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), Description TEXT);","BEGIN TRANSACTION; WITH TrendImpact AS (SELECT cb.Region, cb.PurchaseDate, sp.PracticeName, SUM(cb.AmountSpent) AS TotalSpent FROM ConsumerBehavior cb JOIN SustainablePractices sp ON cb.SustainablePractice = sp.PracticeName GROUP BY cb.Region, cb.PurchaseDate, sp.PracticeName) SELECT Region, PracticeName, SUM(TotalSpent) AS TotalSpent FROM TrendImpact GROUP BY Region, PracticeName; COMMIT;",The query begins a transaction and creates a common table expression (CTE) to aggregate the total amount spent by consumers on sustainable fashion practices across different regions and time periods. It then selects the total amount spent grouped by region and practice name. The transaction is committed only if all steps succeed.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the most popular fashion trends in different regions and analyze their impact on sales, ensuring the transaction is rolled back if any step fails.","CREATE TABLE SalesData (SaleID INT PRIMARY KEY, TrendID INT, Region VARCHAR(50), SaleDate DATE, Amount DECIMAL); CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), StartDate DATE, EndDate DATE); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50));","BEGIN TRANSACTION; WITH TrendPopularity AS (SELECT ft.TrendName, sd.Region, COUNT(sd.SaleID) AS SalesCount, SUM(sd.Amount) AS TotalSales FROM SalesData sd JOIN FashionTrends ft ON sd.TrendID = ft.TrendID GROUP BY ft.TrendName, sd.Region) SELECT TrendName, Region, SalesCount, TotalSales FROM TrendPopularity; ROLLBACK;","The query begins a transaction and creates a common table expression (CTE) to count the number of sales and sum the total sales amount for each fashion trend in different regions. It then selects the trend name, region, sales count, and total sales. The transaction is rolled back if any step fails."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Evaluate the seasonal variations in consumer spending on sustainable fashion across different regions, and commit the transaction only if all steps are successful.","CREATE TABLE SeasonalSpending (SpendingID INT PRIMARY KEY, ConsumerID INT, Region VARCHAR(50), Season VARCHAR(50), AmountSpent DECIMAL); CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, ConsumerName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Seasons (SeasonID INT PRIMARY KEY, SeasonName VARCHAR(50), StartDate DATE, EndDate DATE);","BEGIN TRANSACTION; WITH SeasonalAnalysis AS (SELECT ss.Region, ss.Season, SUM(ss.AmountSpent) AS TotalSpent FROM SeasonalSpending ss GROUP BY ss.Region, ss.Season) SELECT Region, Season, TotalSpent FROM SeasonalAnalysis; COMMIT;","The query begins a transaction and creates a common table expression (CTE) to aggregate the total amount spent by consumers on sustainable fashion across different regions and seasons. It then selects the region, season, and total amount spent. The transaction is committed only if all steps are successful."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the correlation between fashion trends and consumer demographics, and ensure the transaction is committed only if all steps succeed.","CREATE TABLE ConsumerDemographics (ConsumerID INT PRIMARY KEY, AgeGroup VARCHAR(50), Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), StartDate DATE, EndDate DATE); CREATE TABLE TrendSales (SaleID INT PRIMARY KEY, TrendID INT, ConsumerID INT, SaleDate DATE, Amount DECIMAL);","BEGIN TRANSACTION; WITH DemographicTrend AS (SELECT cd.AgeGroup, cd.Gender, ft.TrendName, SUM(ts.Amount) AS TotalSpent FROM ConsumerDemographics cd JOIN TrendSales ts ON cd.ConsumerID = ts.ConsumerID JOIN FashionTrends ft ON ts.TrendID = ft.TrendID GROUP BY cd.AgeGroup, cd.Gender, ft.TrendName) SELECT AgeGroup, Gender, TrendName, TotalSpent FROM DemographicTrend; COMMIT;","The query begins a transaction and creates a common table expression (CTE) to aggregate the total amount spent on fashion trends by different consumer demographics. It then selects the age group, gender, trend name, and total amount spent. The transaction is committed only if all steps succeed."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Analyze the effectiveness of marketing campaigns on sustainable fashion sales across different regions, and roll back the transaction if any step fails.","CREATE TABLE MarketingCampaigns (CampaignID INT PRIMARY KEY, CampaignName VARCHAR(50), Region VARCHAR(50), StartDate DATE, EndDate DATE); CREATE TABLE CampaignSales (SaleID INT PRIMARY KEY, CampaignID INT, Region VARCHAR(50), SaleDate DATE, Amount DECIMAL); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50));","BEGIN TRANSACTION; WITH CampaignEffectiveness AS (SELECT mc.CampaignName, cs.Region, SUM(cs.Amount) AS TotalSales FROM CampaignSales cs JOIN MarketingCampaigns mc ON cs.CampaignID = mc.CampaignID GROUP BY mc.CampaignName, cs.Region) SELECT CampaignName, Region, TotalSales FROM CampaignEffectiveness; ROLLBACK;","The query begins a transaction and creates a common table expression (CTE) to aggregate the total sales amount for each marketing campaign on sustainable fashion across different regions. It then selects the campaign name, region, and total sales. The transaction is rolled back if any step fails."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average points scored by basketball players in different leagues, and then display the top 3 players with the highest average points.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), League VARCHAR(50)); CREATE TABLE PlayerStats (StatID INT PRIMARY KEY, PlayerID INT, PointsScored INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID));","CREATE TABLE AvgPoints (PlayerID INT PRIMARY KEY, AvgPoints DECIMAL); INSERT INTO AvgPoints (PlayerID, AvgPoints) SELECT PlayerID, AVG(PointsScored) FROM PlayerStats GROUP BY PlayerID; WITH RankedPlayers AS (SELECT PlayerID, AvgPoints, DENSE_RANK() OVER (ORDER BY AvgPoints DESC) AS Rank FROM AvgPoints) SELECT PlayerID, AvgPoints FROM RankedPlayers WHERE Rank <= 3;","The query first creates a table to store the average points scored by each player. It then calculates the average points for each player and inserts this data into the AvgPoints table. Finally, it uses a common table expression (CTE) to rank players based on their average points and selects the top 3 players."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different sports teams in various seasons, and then display the top 5 teams with the highest revenue.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE TeamRevenue (RevenueID INT PRIMARY KEY, TeamID INT, Season VARCHAR(50), Revenue DECIMAL, FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","CREATE TABLE TotalRevenue (TeamID INT PRIMARY KEY, TotalRevenue DECIMAL); INSERT INTO TotalRevenue (TeamID, TotalRevenue) SELECT TeamID, SUM(Revenue) FROM TeamRevenue GROUP BY TeamID; WITH RankedTeams AS (SELECT TeamID, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM TotalRevenue) SELECT TeamID, TotalRevenue FROM RankedTeams WHERE Rank <= 5;","The query first creates a table to store the total revenue generated by each team. It then calculates the total revenue for each team and inserts this data into the TotalRevenue table. Finally, it uses a common table expression (CTE) to rank teams based on their total revenue and selects the top 5 teams."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average attendance of fans at different football matches, and then display the top 3 matches with the highest attendance.","CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, HomeTeam VARCHAR(50), AwayTeam VARCHAR(50)); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, MatchID INT, FansCount INT, FOREIGN KEY (MatchID) REFERENCES Matches(MatchID));","CREATE TABLE AvgAttendance (MatchID INT PRIMARY KEY, AvgFansCount DECIMAL); INSERT INTO AvgAttendance (MatchID, AvgFansCount) SELECT MatchID, AVG(FansCount) FROM Attendance GROUP BY MatchID; WITH RankedMatches AS (SELECT MatchID, AvgFansCount, DENSE_RANK() OVER (ORDER BY AvgFansCount DESC) AS Rank FROM AvgAttendance) SELECT MatchID, AvgFansCount FROM RankedMatches WHERE Rank <= 3;","The query first creates a table to store the average attendance of fans at each match. It then calculates the average attendance for each match and inserts this data into the AvgAttendance table. Finally, it uses a common table expression (CTE) to rank matches based on their average attendance and selects the top 3 matches."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average salary of athletes in different sports, and then display the top 5 athletes with the highest average salary.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE Salaries (SalaryID INT PRIMARY KEY, AthleteID INT, Salary DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID));","CREATE TABLE AvgSalary (AthleteID INT PRIMARY KEY, AvgSalary DECIMAL); INSERT INTO AvgSalary (AthleteID, AvgSalary) SELECT AthleteID, AVG(Salary) FROM Salaries GROUP BY AthleteID; WITH RankedAthletes AS (SELECT AthleteID, AvgSalary, DENSE_RANK() OVER (ORDER BY AvgSalary DESC) AS Rank FROM AvgSalary) SELECT AthleteID, AvgSalary FROM RankedAthletes WHERE Rank <= 5;","The query first creates a table to store the average salary of each athlete. It then calculates the average salary for each athlete and inserts this data into the AvgSalary table. Finally, it uses a common table expression (CTE) to rank athletes based on their average salary and selects the top 5 athletes."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the win-loss ratio of different tennis players, and then display the top 3 players with the highest win ratio.","CREATE TABLE TennisPlayers (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE MatchResults (ResultID INT PRIMARY KEY, PlayerID INT, Wins INT, Losses INT, FOREIGN KEY (PlayerID) REFERENCES TennisPlayers(PlayerID));","CREATE TABLE WinRatio (PlayerID INT PRIMARY KEY, WinRatio DECIMAL); INSERT INTO WinRatio (PlayerID, WinRatio) SELECT PlayerID, CAST(Wins AS DECIMAL) / (Wins + Losses) FROM MatchResults; WITH RankedPlayers AS (SELECT PlayerID, WinRatio, DENSE_RANK() OVER (ORDER BY WinRatio DESC) AS Rank FROM WinRatio) SELECT PlayerID, WinRatio FROM RankedPlayers WHERE Rank <= 3;","The query first creates a table to store the win-loss ratio of each tennis player. It then calculates the win ratio for each player and inserts this data into the WinRatio table. Finally, it uses a common table expression (CTE) to rank players based on their win ratio and selects the top 3 players."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total carbon emissions reduced by each renewable energy project and display projects that have reduced more than 1000 tons of CO2.,"CREATE TABLE RenewableProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), StartDate DATE, EndDate DATE); CREATE TABLE EmissionsReduction (ReductionID INT PRIMARY KEY, ProjectID INT, ReductionDate DATE, CO2Reduced DECIMAL, FOREIGN KEY (ProjectID) REFERENCES RenewableProjects(ProjectID));","BEGIN; WITH TotalReductions AS (SELECT ProjectID, SUM(CO2Reduced) AS TotalCO2Reduced FROM EmissionsReduction GROUP BY ProjectID HAVING SUM(CO2Reduced) > 1000) SELECT rp.ProjectName, tr.TotalCO2Reduced FROM RenewableProjects rp JOIN TotalReductions tr ON rp.ProjectID = tr.ProjectID; COMMIT;",The query calculates the total CO2 reduced by each renewable energy project by summing the CO2Reduced values in the EmissionsReduction table. It then filters projects that have reduced more than 1000 tons of CO2 and joins this data with the RenewableProjects table to display the project names and their total CO2 reductions.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 regions with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureData (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), Year INT, AvgTemperature DECIMAL);","BEGIN; WITH AvgTempIncrease AS (SELECT RegionID, AVG(AvgTemperature) AS AvgTemp FROM TemperatureData WHERE Year BETWEEN YEAR(CURDATE())-10 AND YEAR(CURDATE()) GROUP BY RegionID) SELECT RegionName, AvgTemp FROM AvgTempIncrease ati JOIN Regions r ON ati.RegionID = r.RegionID ORDER BY AvgTemp DESC LIMIT 3; COMMIT;",The query calculates the average temperature for each region over the past decade by averaging the AvgTemperature values in the TemperatureData table. It then selects the top 3 regions with the highest average temperature increase and displays their names and average temperatures.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total number of endangered species in each conservation area and list areas with more than 50 endangered species.,"CREATE TABLE ConservationAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), AreaID INT, FOREIGN KEY (AreaID) REFERENCES ConservationAreas(AreaID));","BEGIN; WITH SpeciesCount AS (SELECT AreaID, COUNT(SpeciesID) AS TotalSpecies FROM EndangeredSpecies GROUP BY AreaID HAVING COUNT(SpeciesID) > 50) SELECT ca.AreaName, sc.TotalSpecies FROM ConservationAreas ca JOIN SpeciesCount sc ON ca.AreaID = sc.AreaID; COMMIT;",The query counts the total number of endangered species in each conservation area by counting the SpeciesID values in the EndangeredSpecies table. It then filters areas with more than 50 endangered species and joins this data with the ConservationAreas table to display the area names and their total endangered species count.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average water consumption per household in each city and display cities with an average consumption above 500 liters per day.,"CREATE TABLE Cities (CityID INT PRIMARY KEY, CityName VARCHAR(100), Population INT); CREATE TABLE WaterConsumption (ConsumptionID INT PRIMARY KEY, CityID INT, HouseholdID INT, ConsumptionDate DATE, LitersConsumed DECIMAL, FOREIGN KEY (CityID) REFERENCES Cities(CityID));","BEGIN; WITH AvgConsumption AS (SELECT CityID, AVG(LitersConsumed) AS AvgLiters FROM WaterConsumption GROUP BY CityID HAVING AVG(LitersConsumed) > 500) SELECT c.CityName, ac.AvgLiters FROM Cities c JOIN AvgConsumption ac ON c.CityID = ac.CityID; COMMIT;",The query calculates the average water consumption per household in each city by averaging the LitersConsumed values in the WaterConsumption table. It then filters cities with an average consumption above 500 liters per day and joins this data with the Cities table to display the city names and their average water consumption.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the total funding received by each sustainable development initiative and list initiatives that have received more than $1 million.,"CREATE TABLE DevelopmentInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(100), StartDate DATE, EndDate DATE); CREATE TABLE Funding (FundingID INT PRIMARY KEY, InitiativeID INT, FundingDate DATE, Amount DECIMAL, FOREIGN KEY (InitiativeID) REFERENCES DevelopmentInitiatives(InitiativeID));","BEGIN; WITH TotalFunding AS (SELECT InitiativeID, SUM(Amount) AS TotalAmount FROM Funding GROUP BY InitiativeID HAVING SUM(Amount) > 1000000) SELECT di.InitiativeName, tf.TotalAmount FROM DevelopmentInitiatives di JOIN TotalFunding tf ON di.InitiativeID = tf.InitiativeID; COMMIT;",The query calculates the total funding received by each sustainable development initiative by summing the Amount values in the Funding table. It then filters initiatives that have received more than $1 million and joins this data with the DevelopmentInitiatives table to display the initiative names and their total funding amounts.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Retrieve the names and market shares of companies that are leading in both AI and Blockchain technologies.,"CREATE TABLE AICompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); CREATE TABLE BlockchainCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); INSERT INTO AICompanies (CompanyID, CompanyName, MarketShare) VALUES (1, 'Tech Innovators', 15.5), (2, 'Future AI', 12.3), (3, 'AI Pioneers', 10.8); INSERT INTO BlockchainCompanies (CompanyID, CompanyName, MarketShare) VALUES (1, 'Tech Innovators', 18.2), (4, 'Blockchain Leaders', 14.7), (5, 'Crypto Innovators', 11.9);","SELECT CompanyName, MarketShare FROM AICompanies INTERSECT SELECT CompanyName, MarketShare FROM BlockchainCompanies;",The query retrieves the names and market shares of companies that are present in both the AICompanies and BlockchainCompanies tables by using the INTERSECT set operation.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Find the companies that are leading in either Renewable Energy or Electric Vehicles but not both.,"CREATE TABLE RenewableEnergyCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); CREATE TABLE ElectricVehicleCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); INSERT INTO RenewableEnergyCompanies (CompanyID, CompanyName, MarketShare) VALUES (1, 'Green Energy Corp', 20.5), (2, 'Eco Power', 18.3), (3, 'Renewable Solutions', 15.0); INSERT INTO ElectricVehicleCompanies (CompanyID, CompanyName, MarketShare) VALUES (2, 'Eco Power', 22.1), (4, 'EV Innovators', 19.7), (5, 'Electric Future', 17.5);","SELECT CompanyName, MarketShare FROM RenewableEnergyCompanies EXCEPT SELECT CompanyName, MarketShare FROM ElectricVehicleCompanies UNION SELECT CompanyName, MarketShare FROM ElectricVehicleCompanies EXCEPT SELECT CompanyName, MarketShare FROM RenewableEnergyCompanies;",The query finds companies that are leading in either Renewable Energy or Electric Vehicles but not both by using the EXCEPT and UNION set operations.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,List the top 3 companies in terms of market share in the fields of Quantum Computing and Cybersecurity.,"CREATE TABLE QuantumComputingCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); CREATE TABLE CybersecurityCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); INSERT INTO QuantumComputingCompanies (CompanyID, CompanyName, MarketShare) VALUES (1, 'Quantum Leaders', 25.5), (2, 'Quantum Innovators', 22.3), (3, 'Future Quantum', 20.8); INSERT INTO CybersecurityCompanies (CompanyID, CompanyName, MarketShare) VALUES (1, 'Cyber Defenders', 30.2), (4, 'SecureTech', 28.7), (5, 'Cyber Innovators', 25.9);","SELECT CompanyName, MarketShare FROM (SELECT CompanyName, MarketShare, ROW_NUMBER() OVER (ORDER BY MarketShare DESC) AS Rank FROM QuantumComputingCompanies UNION ALL SELECT CompanyName, MarketShare, ROW_NUMBER() OVER (ORDER BY MarketShare DESC) AS Rank FROM CybersecurityCompanies) AS Combined WHERE Rank <= 3;",The query lists the top 3 companies in terms of market share in both Quantum Computing and Cybersecurity by combining the results using UNION ALL and then filtering the top 3 using ROW_NUMBER.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Identify companies that have a significant presence in both IoT and 5G technologies.,"CREATE TABLE IoTCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); CREATE TABLE 5GCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); INSERT INTO IoTCompanies (CompanyID, CompanyName, MarketShare) VALUES (1, 'IoT Innovators', 15.5), (2, 'Connected World', 12.3), (3, 'Smart Solutions', 10.8); INSERT INTO 5GCompanies (CompanyID, CompanyName, MarketShare) VALUES (1, 'IoT Innovators', 18.2), (4, '5G Leaders', 14.7), (5, 'NextGen 5G', 11.9);","SELECT CompanyName, MarketShare FROM IoTCompanies INTERSECT SELECT CompanyName, MarketShare FROM 5GCompanies;",The query identifies companies that have a significant presence in both IoT and 5G technologies by using the INTERSECT set operation.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Show the companies that are leading in either Autonomous Vehicles or Smart Cities but not in both.,"CREATE TABLE AutonomousVehicleCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); CREATE TABLE SmartCityCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), MarketShare DECIMAL); INSERT INTO AutonomousVehicleCompanies (CompanyID, CompanyName, MarketShare) VALUES (1, 'Auto Innovators', 20.5), (2, 'Future Mobility', 18.3), (3, 'Self-Drive Solutions', 15.0); INSERT INTO SmartCityCompanies (CompanyID, CompanyName, MarketShare) VALUES (2, 'Future Mobility', 22.1), (4, 'Urban Innovators', 19.7), (5, 'Smart City Leaders', 17.5);","SELECT CompanyName, MarketShare FROM AutonomousVehicleCompanies EXCEPT SELECT CompanyName, MarketShare FROM SmartCityCompanies UNION SELECT CompanyName, MarketShare FROM SmartCityCompanies EXCEPT SELECT CompanyName, MarketShare FROM AutonomousVehicleCompanies;",The query shows companies that are leading in either Autonomous Vehicles or Smart Cities but not in both by using the EXCEPT and UNION set operations.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the top 10 athletes with the highest average scores in basketball games.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, GameDate DATE, Sport VARCHAR(50)); CREATE TABLE Scores (ScoreID INT PRIMARY KEY, AthleteID INT, GameID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (GameID) REFERENCES Games(GameID));","SELECT A.AthleteName, AVG(S.Score) AS AvgScore FROM Athletes A INNER JOIN Scores S ON A.AthleteID = S.AthleteID INNER JOIN Games G ON S.GameID = G.GameID WHERE G.Sport = 'Basketball' GROUP BY A.AthleteName ORDER BY AvgScore DESC LIMIT 10;","The query joins the Athletes, Scores, and Games tables to filter scores specifically for basketball games. It then calculates the average score for each athlete and selects the top 10 athletes with the highest average scores."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the total revenue generated from ticket sales for each football match.,"CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, Sport VARCHAR(50)); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, MatchID INT, TicketPrice DECIMAL, TicketsSold INT, FOREIGN KEY (MatchID) REFERENCES Matches(MatchID));","SELECT M.MatchDate, SUM(T.TicketPrice * T.TicketsSold) AS TotalRevenue FROM Matches M INNER JOIN TicketSales T ON M.MatchID = T.MatchID WHERE M.Sport = 'Football' GROUP BY M.MatchDate;","The query joins the Matches and TicketSales tables to filter sales specifically for football matches. It then calculates the total revenue for each match by multiplying the ticket price by the number of tickets sold and summing the results, grouping by match date."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average attendance for soccer matches in the last year.,"CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, Sport VARCHAR(50)); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, MatchID INT, AttendanceCount INT, FOREIGN KEY (MatchID) REFERENCES Matches(MatchID));","SELECT AVG(A.AttendanceCount) AS AvgAttendance FROM Matches M INNER JOIN Attendance A ON M.MatchID = A.MatchID WHERE M.Sport = 'Soccer' AND M.MatchDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR);",The query joins the Matches and Attendance tables to filter attendance records specifically for soccer matches. It then calculates the average attendance for matches that occurred in the last year.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Get the total number of goals scored by each team in the current season.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, Season INT); CREATE TABLE Goals (GoalID INT PRIMARY KEY, MatchID INT, TeamID INT, GoalsScored INT, FOREIGN KEY (MatchID) REFERENCES Matches(MatchID), FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","SELECT T.TeamName, SUM(G.GoalsScored) AS TotalGoals FROM Teams T INNER JOIN Goals G ON T.TeamID = G.TeamID INNER JOIN Matches M ON G.MatchID = M.MatchID WHERE M.Season = YEAR(CURDATE()) GROUP BY T.TeamName;","The query joins the Teams, Goals, and Matches tables to filter goal records specifically for the current season. It then calculates the total number of goals scored by each team, grouping by team name."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Identify the top 5 most popular sports based on fan engagement metrics.,"CREATE TABLE Sports (SportID INT PRIMARY KEY, SportName VARCHAR(50)); CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, SportID INT, EngagementScore DECIMAL, FOREIGN KEY (SportID) REFERENCES Sports(SportID));","SELECT S.SportName, SUM(F.EngagementScore) AS TotalEngagement FROM Sports S INNER JOIN FanEngagement F ON S.SportID = F.SportID GROUP BY S.SportName ORDER BY TotalEngagement DESC LIMIT 5;","The query joins the Sports and FanEngagement tables to calculate the total engagement score for each sport. It then selects the top 5 sports with the highest total engagement scores, ordering the results in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the top 3 departments with the highest average spending per project in the last fiscal year.,"CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); CREATE TABLE Projects (ProjectID INT PRIMARY KEY, DepartmentID INT, ProjectName VARCHAR(100), StartDate DATE, EndDate DATE, Budget DECIMAL, FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)); CREATE TABLE Spending (SpendingID INT PRIMARY KEY, ProjectID INT, Amount DECIMAL, SpendingDate DATE, FOREIGN KEY (ProjectID) REFERENCES Projects(ProjectID));","WITH LastFiscalYearSpending AS (SELECT p.DepartmentID, p.ProjectID, AVG(s.Amount) AS AvgSpending FROM Projects p JOIN Spending s ON p.ProjectID = s.ProjectID WHERE s.SpendingDate BETWEEN '2022-04-01' AND '2023-03-31' GROUP BY p.DepartmentID, p.ProjectID), DepartmentAvgSpending AS (SELECT DepartmentID, AVG(AvgSpending) AS DepartmentAvg FROM LastFiscalYearSpending GROUP BY DepartmentID) SELECT d.DepartmentName, das.DepartmentAvg FROM DepartmentAvgSpending das JOIN Departments d ON das.DepartmentID = d.DepartmentID ORDER BY das.DepartmentAvg DESC LIMIT 3;",The query first calculates the average spending per project for the last fiscal year using a common table expression (CTE). It then calculates the average spending per department and selects the top 3 departments with the highest average spending.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the top 5 legislative bills with the most amendments in the current session.,"CREATE TABLE Bills (BillID INT PRIMARY KEY, BillName VARCHAR(100), SessionYear INT); CREATE TABLE Amendments (AmendmentID INT PRIMARY KEY, BillID INT, AmendmentDate DATE, FOREIGN KEY (BillID) REFERENCES Bills(BillID));","WITH BillAmendmentCount AS (SELECT b.BillID, b.BillName, COUNT(a.AmendmentID) AS AmendmentCount FROM Bills b JOIN Amendments a ON b.BillID = a.BillID WHERE b.SessionYear = 2023 GROUP BY b.BillID, b.BillName) SELECT BillName, AmendmentCount FROM BillAmendmentCount ORDER BY AmendmentCount DESC LIMIT 5;",The query calculates the number of amendments for each bill in the current session using a common table expression (CTE). It then selects the top 5 bills with the most amendments.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the average age of citizens who have participated in public policy surveys in the last 5 years.,"CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, Name VARCHAR(100), Age INT); CREATE TABLE Surveys (SurveyID INT PRIMARY KEY, SurveyName VARCHAR(100), SurveyDate DATE); CREATE TABLE SurveyParticipation (ParticipationID INT PRIMARY KEY, CitizenID INT, SurveyID INT, FOREIGN KEY (CitizenID) REFERENCES Citizens(CitizenID), FOREIGN KEY (SurveyID) REFERENCES Surveys(SurveyID));","SELECT AVG(c.Age) AS AverageAge FROM Citizens c JOIN SurveyParticipation sp ON c.CitizenID = sp.CitizenID JOIN Surveys s ON sp.SurveyID = s.SurveyID WHERE s.SurveyDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 5 YEAR) AND CURDATE();","The query calculates the average age of citizens who have participated in public policy surveys in the last 5 years by joining the Citizens, SurveyParticipation, and Surveys tables and filtering the survey dates to the last 5 years."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Identify the top 3 regions with the highest number of new public policies enacted in the last decade.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE PublicPolicies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), EnactmentDate DATE, RegionID INT, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH DecadePolicies AS (SELECT RegionID, COUNT(PolicyID) AS PolicyCount FROM PublicPolicies WHERE EnactmentDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 10 YEAR) AND CURDATE() GROUP BY RegionID) SELECT r.RegionName, dp.PolicyCount FROM DecadePolicies dp JOIN Regions r ON dp.RegionID = r.RegionID ORDER BY dp.PolicyCount DESC LIMIT 3;",The query calculates the number of new public policies enacted in each region in the last decade using a common table expression (CTE). It then selects the top 3 regions with the highest number of new policies.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Determine the effectiveness of governance by comparing the average citizen satisfaction scores across different regions.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE CitizenSatisfaction (SatisfactionID INT PRIMARY KEY, RegionID INT, SatisfactionScore DECIMAL, SurveyDate DATE, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","SELECT r.RegionName, AVG(cs.SatisfactionScore) AS AvgSatisfaction FROM CitizenSatisfaction cs JOIN Regions r ON cs.RegionID = r.RegionID GROUP BY r.RegionName ORDER BY AvgSatisfaction DESC;",The query calculates the average citizen satisfaction scores for each region by joining the CitizenSatisfaction and Regions tables. It then orders the regions by their average satisfaction scores in descending order to determine the effectiveness of governance.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Identify the top 3 regions with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureData (Region VARCHAR(50), Year INT, AvgTemperature DECIMAL); INSERT INTO TemperatureData (Region, Year, AvgTemperature) VALUES ('North America', 2010, 15.2), ('North America', 2020, 16.5), ('Europe', 2010, 14.8), ('Europe', 2020, 15.9), ('Asia', 2010, 25.1), ('Asia', 2020, 26.3);","WITH TempIncrease AS (SELECT Region, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS TempDiff FROM TemperatureData WHERE Year BETWEEN 2010 AND 2020 GROUP BY Region) SELECT Region, TempDiff FROM TempIncrease ORDER BY TempDiff DESC LIMIT 3;",The query calculates the temperature difference for each region over the past decade by finding the maximum and minimum average temperatures between 2010 and 2020. It then selects the top 3 regions with the highest temperature increase.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the top 5 species with the highest population decline in the last 5 years.,"CREATE TABLE SpeciesPopulation (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Year INT, Population INT); INSERT INTO SpeciesPopulation (SpeciesID, SpeciesName, Year, Population) VALUES (1, 'Tiger', 2015, 3200), (1, 'Tiger', 2020, 2900), (2, 'Elephant', 2015, 50000), (2, 'Elephant', 2020, 47000), (3, 'Panda', 2015, 1800), (3, 'Panda', 2020, 1860), (4, 'Rhino', 2015, 27000), (4, 'Rhino', 2020, 26000), (5, 'Gorilla', 2015, 1000), (5, 'Gorilla', 2020, 900);","WITH PopulationDecline AS (SELECT SpeciesName, (MAX(Population) - MIN(Population)) AS PopDecline FROM SpeciesPopulation WHERE Year BETWEEN 2015 AND 2020 GROUP BY SpeciesName) SELECT SpeciesName, PopDecline FROM PopulationDecline ORDER BY PopDecline ASC LIMIT 5;",The query calculates the population decline for each species over the last 5 years by finding the difference between the maximum and minimum population counts between 2015 and 2020. It then selects the top 5 species with the highest population decline.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the average carbon emissions per capita for each country and display the top 5 countries with the lowest emissions.,"CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); CREATE TABLE Population (Country VARCHAR(50), Year INT, Population INT); INSERT INTO CarbonEmissions (Country, Year, Emissions) VALUES ('USA', 2020, 5000), ('China', 2020, 10000), ('India', 2020, 3000), ('Germany', 2020, 2000), ('France', 2020, 1500); INSERT INTO Population (Country, Year, Population) VALUES ('USA', 2020, 331000000), ('China', 2020, 1439323776), ('India', 2020, 1380004385), ('Germany', 2020, 83783942), ('France', 2020, 65273511);","WITH EmissionsPerCapita AS (SELECT c.Country, (c.Emissions / p.Population) AS EmissionsPerCapita FROM CarbonEmissions c JOIN Population p ON c.Country = p.Country AND c.Year = p.Year) SELECT Country, EmissionsPerCapita FROM EmissionsPerCapita ORDER BY EmissionsPerCapita ASC LIMIT 5;",The query calculates the carbon emissions per capita for each country by dividing the total emissions by the population for the year 2020. It then selects the top 5 countries with the lowest emissions per capita.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the top 5 conservation projects with the highest funding in the last year.,"CREATE TABLE ConservationProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Year INT, Funding DECIMAL); INSERT INTO ConservationProjects (ProjectID, ProjectName, Year, Funding) VALUES (1, 'Project A', 2022, 500000), (2, 'Project B', 2022, 750000), (3, 'Project C', 2022, 300000), (4, 'Project D', 2022, 450000), (5, 'Project E', 2022, 600000);","SELECT ProjectName, Funding FROM ConservationProjects WHERE Year = 2022 ORDER BY Funding DESC LIMIT 5;",The query selects the top 5 conservation projects with the highest funding for the year 2022 by ordering the projects based on their funding amount in descending order and limiting the results to the top 5.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Determine the average deforestation rate per year for each continent and identify the continent with the highest average rate.,"CREATE TABLE DeforestationData (Continent VARCHAR(50), Year INT, DeforestationRate DECIMAL); INSERT INTO DeforestationData (Continent, Year, DeforestationRate) VALUES ('South America', 2018, 2.5), ('South America', 2019, 2.7), ('South America', 2020, 2.6), ('Africa', 2018, 1.8), ('Africa', 2019, 1.9), ('Africa', 2020, 2.0), ('Asia', 2018, 1.2), ('Asia', 2019, 1.3), ('Asia', 2020, 1.4);","WITH AvgDeforestation AS (SELECT Continent, AVG(DeforestationRate) AS AvgRate FROM DeforestationData GROUP BY Continent) SELECT Continent, AvgRate FROM AvgDeforestation ORDER BY AvgRate DESC LIMIT 1;",The query calculates the average deforestation rate per year for each continent by averaging the deforestation rates for each continent. It then selects the continent with the highest average deforestation rate.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store information about different sports events and then display the details of events that took place in 2023.,"CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE, Location VARCHAR(100)); INSERT INTO SportsEvents (EventID, EventName, EventDate, Location) VALUES (1, 'Super Bowl', '2023-02-12', 'Arizona'), (2, 'Wimbledon', '2023-07-10', 'London'), (3, 'Olympics', '2023-08-05', 'Paris');",SELECT * FROM SportsEvents WHERE YEAR(EventDate) = 2023;,The query selects all columns from the SportsEvents table where the event date is in the year 2023.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store athlete performance metrics and then display the top 3 athletes based on their performance score.,"CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100), Sport VARCHAR(50), PerformanceScore DECIMAL); INSERT INTO AthletePerformance (AthleteID, AthleteName, Sport, PerformanceScore) VALUES (1, 'John Doe', 'Basketball', 95.5), (2, 'Jane Smith', 'Tennis', 98.0), (3, 'Mike Johnson', 'Swimming', 93.0), (4, 'Emily Davis', 'Running', 97.0);","SELECT AthleteName, PerformanceScore FROM AthletePerformance ORDER BY PerformanceScore DESC LIMIT 3;","The query selects the athlete names and their performance scores from the AthletePerformance table, ordering them by performance score in descending order and limiting the results to the top 3 athletes."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store fan engagement data and then display the total number of fans engaged in each sport.,"CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, Sport VARCHAR(50), NumberOfFans INT); INSERT INTO FanEngagement (EngagementID, Sport, NumberOfFans) VALUES (1, 'Football', 50000), (2, 'Basketball', 30000), (3, 'Tennis', 15000), (4, 'Swimming', 10000);","SELECT Sport, SUM(NumberOfFans) AS TotalFans FROM FanEngagement GROUP BY Sport;",The query selects the sport and the total number of fans engaged in each sport by summing the NumberOfFans column and grouping the results by the Sport column.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store information about sports industry revenues and then display the total revenue generated in 2022.,"CREATE TABLE SportsRevenue (RevenueID INT PRIMARY KEY, Year INT, Sport VARCHAR(50), Revenue DECIMAL); INSERT INTO SportsRevenue (RevenueID, Year, Sport, Revenue) VALUES (1, 2022, 'Football', 1000000), (2, 2022, 'Basketball', 750000), (3, 2022, 'Tennis', 500000), (4, 2022, 'Swimming', 250000);",SELECT SUM(Revenue) AS TotalRevenue FROM SportsRevenue WHERE Year = 2022;,The query calculates the total revenue generated in the year 2022 by summing the Revenue column from the SportsRevenue table where the year is 2022.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store global sports market trends and then display the sports with a market growth rate above 5%.,"CREATE TABLE MarketTrends (TrendID INT PRIMARY KEY, Sport VARCHAR(50), MarketGrowthRate DECIMAL); INSERT INTO MarketTrends (TrendID, Sport, MarketGrowthRate) VALUES (1, 'Football', 6.5), (2, 'Basketball', 4.0), (3, 'Tennis', 5.5), (4, 'Swimming', 3.0);","SELECT Sport, MarketGrowthRate FROM MarketTrends WHERE MarketGrowthRate > 5.0;",The query selects the sport and its market growth rate from the MarketTrends table where the market growth rate is greater than 5%.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Retrieve the models and their sales figures for electric vehicles that are sold in both North America and Europe but not in Asia.,"CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (ModelID, ModelName, Region, Sales) VALUES (1, 'Model S', 'North America', 5000), (2, 'Model 3', 'Europe', 4500), (3, 'Leaf', 'Asia', 3000), (4, 'Bolt', 'North America', 2000), (5, 'Prius', 'Europe', 3500), (6, 'Model S', 'Europe', 4000), (7, 'Model 3', 'North America', 6000);","SELECT ModelName, SUM(Sales) AS TotalSales FROM VehicleSales WHERE Region IN ('North America', 'Europe') AND ModelName NOT IN (SELECT ModelName FROM VehicleSales WHERE Region = 'Asia') GROUP BY ModelName HAVING COUNT(DISTINCT Region) = 2;","The query first filters the VehicleSales table to include only records from North America and Europe. It then excludes models that are sold in Asia. The GROUP BY clause groups the results by ModelName, and the HAVING clause ensures that only models sold in both North America and Europe are included. Finally, it sums the sales figures for these models."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,List the vehicle models that have higher sales in Europe than in North America and are also available in Asia.,"CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (ModelID, ModelName, Region, Sales) VALUES (1, 'Model S', 'North America', 5000), (2, 'Model 3', 'Europe', 4500), (3, 'Leaf', 'Asia', 3000), (4, 'Bolt', 'North America', 2000), (5, 'Prius', 'Europe', 3500), (6, 'Model S', 'Europe', 4000), (7, 'Model 3', 'North America', 6000);",SELECT ModelName FROM VehicleSales WHERE Region = 'Europe' AND Sales > (SELECT Sales FROM VehicleSales AS vs2 WHERE vs2.ModelName = VehicleSales.ModelName AND vs2.Region = 'North America') AND ModelName IN (SELECT ModelName FROM VehicleSales WHERE Region = 'Asia');,"The query selects vehicle models from the VehicleSales table where the sales in Europe are greater than the sales in North America. It uses a subquery to compare sales figures between regions. Additionally, it ensures that the models are available in Asia by using another subquery."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Find the vehicle models that are sold in all three regions: North America, Europe, and Asia.","CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (ModelID, ModelName, Region, Sales) VALUES (1, 'Model S', 'North America', 5000), (2, 'Model 3', 'Europe', 4500), (3, 'Leaf', 'Asia', 3000), (4, 'Bolt', 'North America', 2000), (5, 'Prius', 'Europe', 3500), (6, 'Model S', 'Europe', 4000), (7, 'Model 3', 'North America', 6000);",SELECT ModelName FROM VehicleSales GROUP BY ModelName HAVING COUNT(DISTINCT Region) = 3;,"The query groups the VehicleSales table by ModelName and uses the HAVING clause to filter models that are sold in all three regions (North America, Europe, and Asia). The COUNT(DISTINCT Region) ensures that only models available in all three regions are selected."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Identify the vehicle models that are sold in North America but not in Europe or Asia.,"CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (ModelID, ModelName, Region, Sales) VALUES (1, 'Model S', 'North America', 5000), (2, 'Model 3', 'Europe', 4500), (3, 'Leaf', 'Asia', 3000), (4, 'Bolt', 'North America', 2000), (5, 'Prius', 'Europe', 3500), (6, 'Model S', 'Europe', 4000), (7, 'Model 3', 'North America', 6000);","SELECT ModelName FROM VehicleSales WHERE Region = 'North America' EXCEPT SELECT ModelName FROM VehicleSales WHERE Region IN ('Europe', 'Asia');","The query uses the EXCEPT set operation to find vehicle models that are sold in North America but not in Europe or Asia. The first SELECT statement retrieves models from North America, and the second SELECT statement retrieves models from Europe and Asia. The EXCEPT operation returns models that are only in the first set."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Get the total sales for each vehicle model across all regions and list the models with total sales greater than 10,000.","CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (ModelID, ModelName, Region, Sales) VALUES (1, 'Model S', 'North America', 5000), (2, 'Model 3', 'Europe', 4500), (3, 'Leaf', 'Asia', 3000), (4, 'Bolt', 'North America', 2000), (5, 'Prius', 'Europe', 3500), (6, 'Model S', 'Europe', 4000), (7, 'Model 3', 'North America', 6000);","SELECT ModelName, SUM(Sales) AS TotalSales FROM VehicleSales GROUP BY ModelName HAVING SUM(Sales) > 10000;","The query groups the VehicleSales table by ModelName and calculates the total sales for each model using the SUM function. The HAVING clause filters the results to include only models with total sales greater than 10,000."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the total government spending on healthcare and education for each state, and then display the top 3 states with the highest combined spending.","CREATE TABLE GovernmentSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), Year INT, HealthcareSpending DECIMAL, EducationSpending DECIMAL); INSERT INTO GovernmentSpending (StateID, StateName, Year, HealthcareSpending, EducationSpending) VALUES (1, 'California', 2022, 5000000, 3000000), (2, 'Texas', 2022, 4000000, 2500000), (3, 'New York', 2022, 4500000, 2800000), (4, 'Florida', 2022, 3500000, 2200000), (5, 'Illinois', 2022, 3000000, 2000000);","WITH CombinedSpending AS (SELECT StateName, (HealthcareSpending + EducationSpending) AS TotalSpending FROM GovernmentSpending) SELECT StateName, TotalSpending FROM CombinedSpending ORDER BY TotalSpending DESC LIMIT 3;","The query first creates a common table expression (CTE) to calculate the combined spending on healthcare and education for each state. It then selects the top 3 states with the highest combined spending, ordering the results in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 legislative bills with the highest number of amendments in the last 5 years.,"CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), Year INT, AmendmentsCount INT); INSERT INTO LegislativeBills (BillID, BillName, Year, AmendmentsCount) VALUES (1, 'Healthcare Reform Act', 2020, 15), (2, 'Education Improvement Act', 2019, 12), (3, 'Infrastructure Development Act', 2021, 18), (4, 'Tax Relief Act', 2018, 10), (5, 'Environmental Protection Act', 2022, 20);","WITH RecentBills AS (SELECT BillName, AmendmentsCount FROM LegislativeBills WHERE Year >= YEAR(CURDATE()) - 5) SELECT BillName, AmendmentsCount FROM RecentBills ORDER BY AmendmentsCount DESC LIMIT 5;","The query creates a common table expression (CTE) to filter legislative bills from the last 5 years. It then selects the top 5 bills with the highest number of amendments, ordering the results in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average age of citizens in each state and identify the states with an average age above 40.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, StateID INT, Age INT); CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(50)); INSERT INTO CitizenDemographics (CitizenID, StateID, Age) VALUES (1, 1, 35), (2, 1, 42), (3, 2, 38), (4, 2, 45), (5, 3, 50); INSERT INTO States (StateID, StateName) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York');","WITH StateAges AS (SELECT StateID, AVG(Age) AS AvgAge FROM CitizenDemographics GROUP BY StateID) SELECT s.StateName, sa.AvgAge FROM StateAges sa JOIN States s ON sa.StateID = s.StateID WHERE sa.AvgAge > 40;",The query creates a common table expression (CTE) to calculate the average age of citizens in each state. It then joins this CTE with the States table to get the state names and filters the results to include only states with an average age above 40.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 3 government programs with the highest funding in the last fiscal year.,"CREATE TABLE GovernmentPrograms (ProgramID INT PRIMARY KEY, ProgramName VARCHAR(100), FiscalYear INT, FundingAmount DECIMAL); INSERT INTO GovernmentPrograms (ProgramID, ProgramName, FiscalYear, FundingAmount) VALUES (1, 'Healthcare Initiative', 2022, 5000000), (2, 'Education Reform', 2022, 3000000), (3, 'Infrastructure Upgrade', 2022, 4500000), (4, 'Environmental Conservation', 2022, 2000000), (5, 'Public Safety Enhancement', 2022, 3500000);","WITH RecentPrograms AS (SELECT ProgramName, FundingAmount FROM GovernmentPrograms WHERE FiscalYear = YEAR(CURDATE()) - 1) SELECT ProgramName, FundingAmount FROM RecentPrograms ORDER BY FundingAmount DESC LIMIT 3;","The query creates a common table expression (CTE) to filter government programs from the last fiscal year. It then selects the top 3 programs with the highest funding, ordering the results in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average legislative effectiveness score for each state and display states with a score above 75.,"CREATE TABLE LegislativeEffectiveness (LegislatorID INT PRIMARY KEY, StateID INT, EffectivenessScore DECIMAL); CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(50)); INSERT INTO LegislativeEffectiveness (LegislatorID, StateID, EffectivenessScore) VALUES (1, 1, 80), (2, 1, 70), (3, 2, 85), (4, 2, 90), (5, 3, 60); INSERT INTO States (StateID, StateName) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York');","WITH StateScores AS (SELECT StateID, AVG(EffectivenessScore) AS AvgScore FROM LegislativeEffectiveness GROUP BY StateID) SELECT s.StateName, ss.AvgScore FROM StateScores ss JOIN States s ON ss.StateID = s.StateID WHERE ss.AvgScore > 75;",The query creates a common table expression (CTE) to calculate the average legislative effectiveness score for each state. It then joins this CTE with the States table to get the state names and filters the results to include only states with an average score above 75.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total government spending by department for the last fiscal year, including the percentage change compared to the previous fiscal year.","CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), FiscalYear INT, Spending DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, FiscalYear, Spending) VALUES (1, 'Health', 2022, 5000000), (2, 'Education', 2022, 3000000), (3, 'Defense', 2022, 7000000), (1, 'Health', 2021, 4500000), (2, 'Education', 2021, 2800000), (3, 'Defense', 2021, 6500000);","SELECT gs1.DepartmentName, gs1.Spending AS CurrentYearSpending, gs2.Spending AS PreviousYearSpending, ((gs1.Spending - gs2.Spending) / gs2.Spending) * 100 AS PercentageChange FROM GovernmentSpending gs1 INNER JOIN GovernmentSpending gs2 ON gs1.DepartmentID = gs2.DepartmentID AND gs1.FiscalYear = 2022 AND gs2.FiscalYear = 2021;",The query joins the GovernmentSpending table with itself to compare spending between the last fiscal year and the previous fiscal year for each department. It calculates the percentage change in spending for each department.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Create a dashboard that displays the number of bills passed by each legislative body in the current year, and the average time taken to pass a bill.","CREATE TABLE LegislativeBodies (BodyID INT PRIMARY KEY, BodyName VARCHAR(100)); CREATE TABLE Bills (BillID INT PRIMARY KEY, BodyID INT, BillName VARCHAR(100), DateIntroduced DATE, DatePassed DATE); INSERT INTO LegislativeBodies (BodyID, BodyName) VALUES (1, 'Senate'), (2, 'House of Representatives'); INSERT INTO Bills (BillID, BodyID, BillName, DateIntroduced, DatePassed) VALUES (1, 1, 'Healthcare Reform', '2023-01-15', '2023-03-10'), (2, 2, 'Education Funding', '2023-02-01', '2023-04-20'), (3, 1, 'Defense Budget', '2023-03-05', '2023-05-15');","SELECT lb.BodyName, COUNT(b.BillID) AS BillsPassed, AVG(DATEDIFF(b.DatePassed, b.DateIntroduced)) AS AvgTimeToPass FROM Bills b INNER JOIN LegislativeBodies lb ON b.BodyID = lb.BodyID WHERE YEAR(b.DatePassed) = 2023 GROUP BY lb.BodyName;",The query joins the Bills table with the LegislativeBodies table to count the number of bills passed by each legislative body in the current year and calculates the average time taken to pass a bill.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Provide a summary of the demographic distribution of citizens by age group and gender for the latest census year.,"CREATE TABLE CensusData (CitizenID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), CensusYear INT); INSERT INTO CensusData (CitizenID, Age, Gender, CensusYear) VALUES (1, 25, 'Male', 2020), (2, 30, 'Female', 2020), (3, 45, 'Male', 2020), (4, 60, 'Female', 2020), (5, 35, 'Male', 2020);","SELECT CASE WHEN Age < 18 THEN 'Under 18' WHEN Age BETWEEN 18 AND 35 THEN '18-35' WHEN Age BETWEEN 36 AND 50 THEN '36-50' ELSE '51+' END AS AgeGroup, Gender, COUNT(CitizenID) AS Count FROM CensusData WHERE CensusYear = 2020 GROUP BY AgeGroup, Gender;",The query categorizes citizens into age groups and counts the number of citizens in each age group and gender for the latest census year.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the effectiveness of public policies by comparing the key performance indicators (KPIs) before and after the policy implementation.,"CREATE TABLE Policies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), ImplementationDate DATE); CREATE TABLE KPIs (KPIID INT PRIMARY KEY, PolicyID INT, KPIName VARCHAR(100), KPIValue DECIMAL, MeasurementDate DATE); INSERT INTO Policies (PolicyID, PolicyName, ImplementationDate) VALUES (1, 'Healthcare Improvement', '2022-01-01'); INSERT INTO KPIs (KPIID, PolicyID, KPIName, KPIValue, MeasurementDate) VALUES (1, 1, 'Patient Satisfaction', 70, '2021-12-01'), (2, 1, 'Patient Satisfaction', 85, '2022-12-01');","SELECT p.PolicyName, k1.KPIName, k1.KPIValue AS PreImplementation, k2.KPIValue AS PostImplementation, ((k2.KPIValue - k1.KPIValue) / k1.KPIValue) * 100 AS PercentageChange FROM KPIs k1 INNER JOIN KPIs k2 ON k1.PolicyID = k2.PolicyID AND k1.KPIName = k2.KPIName INNER JOIN Policies p ON k1.PolicyID = p.PolicyID WHERE k1.MeasurementDate < p.ImplementationDate AND k2.MeasurementDate > p.ImplementationDate;","The query joins the KPIs table with itself and the Policies table to compare KPI values before and after policy implementation, calculating the percentage change in KPI values."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Create a report showing the distribution of government grants by region and the average grant amount for each region.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE Grants (GrantID INT PRIMARY KEY, RegionID INT, GrantAmount DECIMAL); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO Grants (GrantID, RegionID, GrantAmount) VALUES (1, 1, 100000), (2, 2, 150000), (3, 3, 200000), (4, 4, 250000), (5, 1, 120000);","SELECT r.RegionName, COUNT(g.GrantID) AS NumberOfGrants, AVG(g.GrantAmount) AS AvgGrantAmount FROM Grants g INNER JOIN Regions r ON g.RegionID = r.RegionID GROUP BY r.RegionName;",The query joins the Grants table with the Regions table to count the number of grants and calculate the average grant amount for each region.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 10 electric vehicle models by sales in the last year, including their average price and total sales revenue.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, SalePrice DECIMAL); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50)); CREATE TABLE VehicleTypes (VehicleType VARCHAR(50) PRIMARY KEY, Description VARCHAR(255));","WITH EVSales AS (SELECT VS.ModelID, VM.ModelName, SUM(VS.SalePrice) AS TotalRevenue, AVG(VS.SalePrice) AS AvgPrice, COUNT(VS.SaleID) AS TotalSales FROM VehicleSales VS JOIN VehicleModels VM ON VS.ModelID = VM.ModelID WHERE VM.VehicleType = 'Electric' AND VS.SaleDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY VS.ModelID, VM.ModelName) SELECT ModelName, TotalSales, AvgPrice, TotalRevenue FROM EVSales ORDER BY TotalSales DESC LIMIT 10;","The query first creates a common table expression (CTE) named EVSales to aggregate sales data for electric vehicles in the last year. It calculates total revenue, average price, and total sales for each model. The final SELECT statement retrieves the top 10 models by total sales, ordered in descending order."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 regions with the highest average sales price for hybrid vehicles over the past 5 years.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50));","WITH HybridSales AS (SELECT VS.Region, AVG(VS.SalePrice) AS AvgPrice FROM VehicleSales VS JOIN VehicleModels VM ON VS.ModelID = VM.ModelID WHERE VM.VehicleType = 'Hybrid' AND VS.SaleDate >= DATEADD(YEAR, -5, GETDATE()) GROUP BY VS.Region) SELECT Region, AvgPrice FROM HybridSales ORDER BY AvgPrice DESC LIMIT 5;","The query creates a common table expression (CTE) named HybridSales to calculate the average sales price for hybrid vehicles in each region over the past 5 years. The final SELECT statement retrieves the top 5 regions with the highest average sales price, ordered in descending order."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a monthly sales report for the last year, showing the total number of vehicles sold and total revenue for each month.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, SalePrice DECIMAL);","WITH MonthlySales AS (SELECT DATEPART(YEAR, SaleDate) AS SaleYear, DATEPART(MONTH, SaleDate) AS SaleMonth, COUNT(SaleID) AS TotalSales, SUM(SalePrice) AS TotalRevenue FROM VehicleSales WHERE SaleDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY DATEPART(YEAR, SaleDate), DATEPART(MONTH, SaleDate)) SELECT SaleYear, SaleMonth, TotalSales, TotalRevenue FROM MonthlySales ORDER BY SaleYear, SaleMonth;","The query creates a common table expression (CTE) named MonthlySales to aggregate sales data by month for the last year. It calculates the total number of vehicles sold and total revenue for each month. The final SELECT statement retrieves the monthly sales report, ordered by year and month."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 3 most popular vehicle models in terms of sales volume in each region for the current year.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, Region VARCHAR(50)); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50));","WITH RegionalSales AS (SELECT VS.Region, VM.ModelName, COUNT(VS.SaleID) AS TotalSales, DENSE_RANK() OVER (PARTITION BY VS.Region ORDER BY COUNT(VS.SaleID) DESC) AS Rank FROM VehicleSales VS JOIN VehicleModels VM ON VS.ModelID = VM.ModelID WHERE DATEPART(YEAR, VS.SaleDate) = DATEPART(YEAR, GETDATE()) GROUP BY VS.Region, VM.ModelName) SELECT Region, ModelName, TotalSales FROM RegionalSales WHERE Rank <= 3 ORDER BY Region, Rank;","The query creates a common table expression (CTE) named RegionalSales to aggregate sales data by region and model for the current year. It calculates the total sales for each model in each region and ranks them using the DENSE_RANK function. The final SELECT statement retrieves the top 3 most popular models in each region, ordered by region and rank."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Analyze the trend of average fuel efficiency for electric vehicles over the past 3 years, broken down by quarter.","CREATE TABLE VehicleEfficiency (RecordID INT PRIMARY KEY, ModelID INT, RecordDate DATE, FuelEfficiency DECIMAL); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(50));","WITH QuarterlyEfficiency AS (SELECT DATEPART(YEAR, VE.RecordDate) AS RecordYear, DATEPART(QUARTER, VE.RecordDate) AS RecordQuarter, AVG(VE.FuelEfficiency) AS AvgEfficiency FROM VehicleEfficiency VE JOIN VehicleModels VM ON VE.ModelID = VM.ModelID WHERE VM.VehicleType = 'Electric' AND VE.RecordDate >= DATEADD(YEAR, -3, GETDATE()) GROUP BY DATEPART(YEAR, VE.RecordDate), DATEPART(QUARTER, VE.RecordDate)) SELECT RecordYear, RecordQuarter, AvgEfficiency FROM QuarterlyEfficiency ORDER BY RecordYear, RecordQuarter;","The query creates a common table expression (CTE) named QuarterlyEfficiency to calculate the average fuel efficiency for electric vehicles, broken down by quarter, over the past 3 years. The final SELECT statement retrieves the trend data, ordered by year and quarter."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Find the top 3 most popular tourist destinations based on the number of visits in the last year.,"CREATE TABLE TouristVisits (VisitID INT PRIMARY KEY, Destination VARCHAR(100), VisitDate DATE, NumberOfVisits INT); INSERT INTO TouristVisits (VisitID, Destination, VisitDate, NumberOfVisits) VALUES (1, 'Paris', '2022-05-10', 1500), (2, 'New York', '2022-06-15', 1200), (3, 'Tokyo', '2022-07-20', 1300), (4, 'London', '2022-08-25', 1400), (5, 'Rome', '2022-09-30', 1100);","WITH RankedDestinations AS (SELECT Destination, SUM(NumberOfVisits) AS TotalVisits, DENSE_RANK() OVER (ORDER BY SUM(NumberOfVisits) DESC) AS Rank FROM TouristVisits WHERE VisitDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Destination) SELECT Destination, TotalVisits FROM RankedDestinations WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank tourist destinations based on the total number of visits in the last year. It then selects the top 3 most popular destinations using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify the top 5 hotels with the highest average customer rating in the past year.,"CREATE TABLE HotelRatings (RatingID INT PRIMARY KEY, HotelName VARCHAR(100), RatingDate DATE, CustomerRating DECIMAL(3,2)); INSERT INTO HotelRatings (RatingID, HotelName, RatingDate, CustomerRating) VALUES (1, 'Hotel A', '2022-01-15', 4.5), (2, 'Hotel B', '2022-02-20', 4.7), (3, 'Hotel C', '2022-03-25', 4.6), (4, 'Hotel D', '2022-04-30', 4.8), (5, 'Hotel E', '2022-05-05', 4.4);","WITH AvgRatings AS (SELECT HotelName, AVG(CustomerRating) AS AvgRating, ROW_NUMBER() OVER (ORDER BY AVG(CustomerRating) DESC) AS Rank FROM HotelRatings WHERE RatingDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY HotelName) SELECT HotelName, AvgRating FROM AvgRatings WHERE Rank <= 5;",The query creates a common table expression (CTE) to calculate the average customer rating for each hotel in the past year. It then ranks the hotels based on their average rating and selects the top 5 using the ROW_NUMBER function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",List the top 3 travel agencies with the highest number of bookings in the last quarter.,"CREATE TABLE TravelBookings (BookingID INT PRIMARY KEY, AgencyName VARCHAR(100), BookingDate DATE, NumberOfBookings INT); INSERT INTO TravelBookings (BookingID, AgencyName, BookingDate, NumberOfBookings) VALUES (1, 'Agency X', '2022-10-01', 300), (2, 'Agency Y', '2022-11-15', 250), (3, 'Agency Z', '2022-12-20', 350), (4, 'Agency W', '2022-10-25', 200), (5, 'Agency V', '2022-11-30', 150);","WITH RankedAgencies AS (SELECT AgencyName, SUM(NumberOfBookings) AS TotalBookings, RANK() OVER (ORDER BY SUM(NumberOfBookings) DESC) AS Rank FROM TravelBookings WHERE BookingDate BETWEEN '2022-10-01' AND '2022-12-31' GROUP BY AgencyName) SELECT AgencyName, TotalBookings FROM RankedAgencies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank travel agencies based on the total number of bookings in the last quarter. It then selects the top 3 agencies using the RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Find the top 3 countries with the highest average hotel occupancy rate in the past year.,"CREATE TABLE HotelOccupancy (OccupancyID INT PRIMARY KEY, Country VARCHAR(100), OccupancyDate DATE, OccupancyRate DECIMAL(5,2)); INSERT INTO HotelOccupancy (OccupancyID, Country, OccupancyDate, OccupancyRate) VALUES (1, 'USA', '2022-01-10', 85.5), (2, 'France', '2022-02-15', 80.0), (3, 'Japan', '2022-03-20', 90.0), (4, 'UK', '2022-04-25', 75.0), (5, 'Italy', '2022-05-30', 70.0);","WITH AvgOccupancy AS (SELECT Country, AVG(OccupancyRate) AS AvgRate, ROW_NUMBER() OVER (ORDER BY AVG(OccupancyRate) DESC) AS Rank FROM HotelOccupancy WHERE OccupancyDate BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY Country) SELECT Country, AvgRate FROM AvgOccupancy WHERE Rank <= 3;",The query creates a common table expression (CTE) to calculate the average hotel occupancy rate for each country in the past year. It then ranks the countries based on their average occupancy rate and selects the top 3 using the ROW_NUMBER function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Determine the top 3 months with the highest total revenue from hotel bookings in the past year.,"CREATE TABLE HotelRevenue (RevenueID INT PRIMARY KEY, BookingMonth DATE, Revenue DECIMAL(10,2)); INSERT INTO HotelRevenue (RevenueID, BookingMonth, Revenue) VALUES (1, '2022-01-01', 50000.00), (2, '2022-02-01', 60000.00), (3, '2022-03-01', 55000.00), (4, '2022-04-01', 70000.00), (5, '2022-05-01', 65000.00);","WITH MonthlyRevenue AS (SELECT BookingMonth, SUM(Revenue) AS TotalRevenue, RANK() OVER (ORDER BY SUM(Revenue) DESC) AS Rank FROM HotelRevenue WHERE BookingMonth BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY BookingMonth) SELECT BookingMonth, TotalRevenue FROM MonthlyRevenue WHERE Rank <= 3;",The query creates a common table expression (CTE) to calculate the total revenue from hotel bookings for each month in the past year. It then ranks the months based on their total revenue and selects the top 3 using the RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average length of hospital stays for patients with diabetes, grouped by age group, and ensure the transaction is committed only if the average stay is greater than 5 days.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), Treatment VARCHAR(255), Outcome VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE HospitalStays (StayID INT PRIMARY KEY, PatientID INT, AdmissionDate DATE, DischargeDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","BEGIN TRANSACTION; WITH DiabetesPatients AS (SELECT P.Age, DATEDIFF(DAY, H.AdmissionDate, H.DischargeDate) AS LengthOfStay FROM Patients P JOIN MedicalHistory M ON P.PatientID = M.PatientID JOIN HospitalStays H ON P.PatientID = H.PatientID WHERE M.Diagnosis = 'Diabetes') SELECT Age, AVG(LengthOfStay) AS AvgLengthOfStay FROM DiabetesPatients GROUP BY Age HAVING AVG(LengthOfStay) > 5; COMMIT;","The query begins a transaction and creates a common table expression (CTE) to select patients with diabetes and calculate their length of hospital stay. It then groups the results by age and calculates the average length of stay for each age group, only committing the transaction if the average stay is greater than 5 days."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total number of patients who have been prescribed a specific drug and had adverse side effects, ensuring the transaction is rolled back if no patients are found.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(255), DatePrescribed DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, PrescriptionID INT, SideEffect VARCHAR(255), Severity VARCHAR(50), FOREIGN KEY (PrescriptionID) REFERENCES Prescriptions(PrescriptionID));",BEGIN TRANSACTION; WITH AdverseEffects AS (SELECT P.PatientID FROM Patients P JOIN Prescriptions R ON P.PatientID = R.PatientID JOIN SideEffects S ON R.PrescriptionID = S.PrescriptionID WHERE R.DrugName = 'DrugX' AND S.Severity = 'Severe') SELECT COUNT(DISTINCT PatientID) AS TotalPatients FROM AdverseEffects; IF @@ROWCOUNT = 0 ROLLBACK TRANSACTION; ELSE COMMIT;,"The query begins a transaction and creates a common table expression (CTE) to select patients who have been prescribed 'DrugX' and experienced severe side effects. It then counts the total number of such patients and rolls back the transaction if no patients are found, otherwise, it commits the transaction."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the maximum dosage of a drug administered to patients over 60 years old and commit the transaction only if the maximum dosage exceeds a certain threshold.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(255), Dosage INT, DatePrescribed DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","BEGIN TRANSACTION; WITH ElderlyPatients AS (SELECT P.Age, R.Dosage FROM Patients P JOIN Prescriptions R ON P.PatientID = R.PatientID WHERE P.Age > 60 AND R.DrugName = 'DrugY') SELECT MAX(Dosage) AS MaxDosage FROM ElderlyPatients HAVING MAX(Dosage) > 100; COMMIT;",The query begins a transaction and creates a common table expression (CTE) to select patients over 60 years old who have been prescribed 'DrugY' and their respective dosages. It then calculates the maximum dosage and commits the transaction only if the maximum dosage exceeds 100.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average number of treatments per patient for a specific condition and commit the transaction only if the average is greater than 3.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), Treatment VARCHAR(255), Outcome VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","BEGIN TRANSACTION; WITH ConditionTreatments AS (SELECT P.PatientID, COUNT(M.Treatment) AS TreatmentCount FROM Patients P JOIN MedicalHistory M ON P.PatientID = M.PatientID WHERE M.Diagnosis = 'ConditionX' GROUP BY P.PatientID) SELECT AVG(TreatmentCount) AS AvgTreatments FROM ConditionTreatments HAVING AVG(TreatmentCount) > 3; COMMIT;",The query begins a transaction and creates a common table expression (CTE) to count the number of treatments per patient for 'ConditionX'. It then calculates the average number of treatments and commits the transaction only if the average is greater than 3.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 most common side effects for a specific drug and commit the transaction only if all three side effects have been reported at least 10 times.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(255), DatePrescribed DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, PrescriptionID INT, SideEffect VARCHAR(255), Severity VARCHAR(50), FOREIGN KEY (PrescriptionID) REFERENCES Prescriptions(PrescriptionID));","BEGIN TRANSACTION; WITH DrugSideEffects AS (SELECT S.SideEffect, COUNT(S.SideEffect) AS EffectCount FROM Prescriptions R JOIN SideEffects S ON R.PrescriptionID = S.PrescriptionID WHERE R.DrugName = 'DrugZ' GROUP BY S.SideEffect) SELECT SideEffect, EffectCount FROM DrugSideEffects ORDER BY EffectCount DESC LIMIT 3 HAVING MIN(EffectCount) >= 10; COMMIT;",The query begins a transaction and creates a common table expression (CTE) to count the occurrences of each side effect for 'DrugZ'. It then selects the top 3 most common side effects and commits the transaction only if all three side effects have been reported at least 10 times.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores patient demographics and medical histories, and then display patients who have been treated for diabetes but not for hypertension.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(50), Treatment VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",CREATE TABLE DiabetesPatients AS SELECT DISTINCT PatientID FROM MedicalHistory WHERE Diagnosis = 'Diabetes'; CREATE TABLE HypertensionPatients AS SELECT DISTINCT PatientID FROM MedicalHistory WHERE Diagnosis = 'Hypertension'; SELECT PatientID FROM DiabetesPatients EXCEPT SELECT PatientID FROM HypertensionPatients;,"The query first creates two tables to store distinct patient IDs for those diagnosed with diabetes and hypertension, respectively. It then uses the EXCEPT set operation to find patients who have been treated for diabetes but not for hypertension."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores drug efficacy data and side effects, and then display drugs that are effective but have no reported side effects.","CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), Efficacy DECIMAL); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, DrugID INT, SideEffect VARCHAR(50), FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID));",CREATE TABLE EffectiveDrugs AS SELECT DISTINCT DrugID FROM Drugs WHERE Efficacy > 75; CREATE TABLE DrugsWithSideEffects AS SELECT DISTINCT DrugID FROM SideEffects; SELECT DrugID FROM EffectiveDrugs EXCEPT SELECT DrugID FROM DrugsWithSideEffects;,"The query first creates two tables to store distinct drug IDs for those with efficacy greater than 75 and those with reported side effects, respectively. It then uses the EXCEPT set operation to find drugs that are effective but have no reported side effects."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores patient treatment protocols and outcomes, and then display patients who have undergone surgery but have not received chemotherapy.","CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, PatientID INT, TreatmentType VARCHAR(50), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",CREATE TABLE SurgeryPatients AS SELECT DISTINCT PatientID FROM TreatmentProtocols WHERE TreatmentType = 'Surgery'; CREATE TABLE ChemoPatients AS SELECT DISTINCT PatientID FROM TreatmentProtocols WHERE TreatmentType = 'Chemotherapy'; SELECT PatientID FROM SurgeryPatients EXCEPT SELECT PatientID FROM ChemoPatients;,"The query first creates two tables to store distinct patient IDs for those who have undergone surgery and those who have received chemotherapy, respectively. It then uses the EXCEPT set operation to find patients who have undergone surgery but have not received chemotherapy."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores patient demographics and drug efficacy studies, and then display patients who are male and have been prescribed drugs with efficacy greater than 80.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE DrugEfficacy (StudyID INT PRIMARY KEY, PatientID INT, DrugID INT, Efficacy DECIMAL, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",CREATE TABLE MalePatients AS SELECT DISTINCT PatientID FROM Patients WHERE Gender = 'Male'; CREATE TABLE HighEfficacyDrugs AS SELECT DISTINCT PatientID FROM DrugEfficacy WHERE Efficacy > 80; SELECT PatientID FROM MalePatients INTERSECT SELECT PatientID FROM HighEfficacyDrugs;,"The query first creates two tables to store distinct patient IDs for male patients and those prescribed drugs with efficacy greater than 80, respectively. It then uses the INTERSECT set operation to find male patients who have been prescribed drugs with efficacy greater than 80."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores patient demographics and treatment outcomes, and then display patients who have had successful treatments but are not older than 50.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE TreatmentOutcomes (OutcomeID INT PRIMARY KEY, PatientID INT, TreatmentType VARCHAR(50), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",CREATE TABLE SuccessfulTreatments AS SELECT DISTINCT PatientID FROM TreatmentOutcomes WHERE Outcome = 'Successful'; CREATE TABLE YoungPatients AS SELECT DISTINCT PatientID FROM Patients WHERE Age <= 50; SELECT PatientID FROM SuccessfulTreatments INTERSECT SELECT PatientID FROM YoungPatients;,"The query first creates two tables to store distinct patient IDs for those who have had successful treatments and those who are 50 years old or younger, respectively. It then uses the INTERSECT set operation to find patients who have had successful treatments but are not older than 50."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 10 most innovative companies in the AI industry based on their R&D expenditure and patent filings over the last 5 years.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Industry VARCHAR(50)); CREATE TABLE RnDExpenditure (CompanyID INT, Year INT, Expenditure DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyID INT, FilingYear INT, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH RecentRnD AS (SELECT CompanyID, SUM(Expenditure) AS TotalExpenditure FROM RnDExpenditure WHERE Year >= YEAR(CURRENT_DATE) - 5 GROUP BY CompanyID), RecentPatents AS (SELECT CompanyID, COUNT(PatentID) AS PatentCount FROM Patents WHERE FilingYear >= YEAR(CURRENT_DATE) - 5 GROUP BY CompanyID) SELECT C.CompanyName, R.TotalExpenditure, P.PatentCount FROM Companies C JOIN RecentRnD R ON C.CompanyID = R.CompanyID JOIN RecentPatents P ON C.CompanyID = P.CompanyID WHERE C.Industry = 'AI' ORDER BY R.TotalExpenditure DESC, P.PatentCount DESC LIMIT 10;",The query first creates two common table expressions (CTEs) to aggregate R&D expenditure and patent filings for the last 5 years. It then joins these CTEs with the Companies table to filter for companies in the AI industry and orders them by R&D expenditure and patent count to display the top 10 most innovative companies.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 regions with the highest adoption rate of blockchain technology in the financial sector over the past 3 years.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE BlockchainAdoption (RegionID INT, Sector VARCHAR(50), Year INT, AdoptionRate DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH RecentAdoption AS (SELECT RegionID, AVG(AdoptionRate) AS AvgAdoptionRate FROM BlockchainAdoption WHERE Year >= YEAR(CURRENT_DATE) - 3 AND Sector = 'Financial' GROUP BY RegionID) SELECT R.RegionName, A.AvgAdoptionRate FROM Regions R JOIN RecentAdoption A ON R.RegionID = A.RegionID ORDER BY A.AvgAdoptionRate DESC LIMIT 5;",The query creates a common table expression (CTE) to calculate the average adoption rate of blockchain technology in the financial sector for each region over the past 3 years. It then joins this CTE with the Regions table and orders the results by average adoption rate to display the top 5 regions.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a quarterly report on the growth rate of IoT device installations in smart cities over the last 2 years.,"CREATE TABLE SmartCities (CityID INT PRIMARY KEY, CityName VARCHAR(100)); CREATE TABLE IoTInstallations (CityID INT, Quarter INT, Year INT, Installations INT, FOREIGN KEY (CityID) REFERENCES SmartCities(CityID));","WITH QuarterlyGrowth AS (SELECT CityID, Year, Quarter, (Installations - LAG(Installations) OVER (PARTITION BY CityID ORDER BY Year, Quarter)) / NULLIF(LAG(Installations) OVER (PARTITION BY CityID ORDER BY Year, Quarter), 0) * 100 AS GrowthRate FROM IoTInstallations WHERE Year >= YEAR(CURRENT_DATE) - 2) SELECT S.CityName, Q.Year, Q.Quarter, Q.GrowthRate FROM SmartCities S JOIN QuarterlyGrowth Q ON S.CityID = Q.CityID ORDER BY S.CityName, Q.Year, Q.Quarter;","The query creates a common table expression (CTE) to calculate the quarterly growth rate of IoT device installations for each smart city over the last 2 years. It uses the LAG function to compare the current quarter's installations with the previous quarter's installations. The results are then joined with the SmartCities table and ordered by city name, year, and quarter."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 emerging technologies in the healthcare sector based on the number of research publications and clinical trials over the past 5 years.,"CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE ResearchPublications (PublicationID INT PRIMARY KEY, TechID INT, Year INT, FOREIGN KEY (TechID) REFERENCES Technologies(TechID)); CREATE TABLE ClinicalTrials (TrialID INT PRIMARY KEY, TechID INT, Year INT, FOREIGN KEY (TechID) REFERENCES Technologies(TechID));","WITH RecentPublications AS (SELECT TechID, COUNT(PublicationID) AS PublicationCount FROM ResearchPublications WHERE Year >= YEAR(CURRENT_DATE) - 5 GROUP BY TechID), RecentTrials AS (SELECT TechID, COUNT(TrialID) AS TrialCount FROM ClinicalTrials WHERE Year >= YEAR(CURRENT_DATE) - 5 GROUP BY TechID) SELECT T.TechName, P.PublicationCount, C.TrialCount FROM Technologies T JOIN RecentPublications P ON T.TechID = P.TechID JOIN RecentTrials C ON T.TechID = C.TechID WHERE T.Sector = 'Healthcare' ORDER BY P.PublicationCount DESC, C.TrialCount DESC LIMIT 5;",The query creates two common table expressions (CTEs) to count the number of research publications and clinical trials for each technology in the healthcare sector over the past 5 years. It then joins these CTEs with the Technologies table and orders the results by publication count and trial count to display the top 5 emerging technologies.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard showing the annual revenue growth of companies in the renewable energy sector over the last 4 years.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE AnnualRevenue (CompanyID INT, Year INT, Revenue DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH RevenueGrowth AS (SELECT CompanyID, Year, (Revenue - LAG(Revenue) OVER (PARTITION BY CompanyID ORDER BY Year)) / NULLIF(LAG(Revenue) OVER (PARTITION BY CompanyID ORDER BY Year), 0) * 100 AS GrowthRate FROM AnnualRevenue WHERE Year >= YEAR(CURRENT_DATE) - 4) SELECT C.CompanyName, R.Year, R.GrowthRate FROM Companies C JOIN RevenueGrowth R ON C.CompanyID = R.CompanyID WHERE C.Sector = 'Renewable Energy' ORDER BY C.CompanyName, R.Year;",The query creates a common table expression (CTE) to calculate the annual revenue growth rate for each company in the renewable energy sector over the last 4 years. It uses the LAG function to compare the current year's revenue with the previous year's revenue. The results are then joined with the Companies table and ordered by company name and year.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total crop yield for each region that grows either wheat or corn but not both.,"CREATE TABLE CropYields (Region VARCHAR(50), Crop VARCHAR(50), Yield INT); INSERT INTO CropYields (Region, Crop, Yield) VALUES ('North America', 'Wheat', 5000), ('North America', 'Corn', 3000), ('Europe', 'Wheat', 4000), ('Asia', 'Corn', 2000), ('South America', 'Wheat', 3500);","SELECT Region, SUM(Yield) AS TotalYield FROM CropYields WHERE Crop IN ('Wheat', 'Corn') GROUP BY Region HAVING COUNT(DISTINCT Crop) = 1;","The query selects regions that grow either wheat or corn but not both. It groups the data by region and sums the yields, filtering out regions that grow both crops using the HAVING clause."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",List the regions that have a higher average yield for rice compared to the global average yield for rice.,"CREATE TABLE CropYields (Region VARCHAR(50), Crop VARCHAR(50), Yield INT); INSERT INTO CropYields (Region, Crop, Yield) VALUES ('North America', 'Rice', 2000), ('Europe', 'Rice', 2500), ('Asia', 'Rice', 3000), ('South America', 'Rice', 2200);","WITH GlobalAvg AS (SELECT AVG(Yield) AS AvgYield FROM CropYields WHERE Crop = 'Rice') SELECT Region FROM CropYields, GlobalAvg WHERE Crop = 'Rice' AND Yield > GlobalAvg.AvgYield;",The query calculates the global average yield for rice using a common table expression (CTE) and then selects regions where the rice yield is higher than this global average.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 3 regions with the highest combined yield for wheat and barley.,"CREATE TABLE CropYields (Region VARCHAR(50), Crop VARCHAR(50), Yield INT); INSERT INTO CropYields (Region, Crop, Yield) VALUES ('North America', 'Wheat', 5000), ('North America', 'Barley', 2000), ('Europe', 'Wheat', 4000), ('Europe', 'Barley', 3000), ('Asia', 'Wheat', 3500), ('Asia', 'Barley', 1500);","WITH CombinedYields AS (SELECT Region, SUM(Yield) AS TotalYield FROM CropYields WHERE Crop IN ('Wheat', 'Barley') GROUP BY Region) SELECT Region, TotalYield FROM CombinedYields ORDER BY TotalYield DESC LIMIT 3;",The query creates a common table expression (CTE) to calculate the combined yield for wheat and barley for each region. It then selects the top 3 regions with the highest combined yield.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find regions that produce both soybeans and rice but have a higher yield for soybeans.,"CREATE TABLE CropYields (Region VARCHAR(50), Crop VARCHAR(50), Yield INT); INSERT INTO CropYields (Region, Crop, Yield) VALUES ('North America', 'Soybeans', 4000), ('North America', 'Rice', 3000), ('Europe', 'Soybeans', 3500), ('Europe', 'Rice', 2500), ('Asia', 'Soybeans', 2000), ('Asia', 'Rice', 3000);",SELECT Region FROM CropYields WHERE Crop = 'Soybeans' AND Yield > (SELECT Yield FROM CropYields AS RiceYields WHERE Crop = 'Rice' AND CropYields.Region = RiceYields.Region) AND Region IN (SELECT Region FROM CropYields WHERE Crop = 'Rice');,The query selects regions that produce both soybeans and rice but have a higher yield for soybeans. It uses a subquery to compare yields and a set operation to ensure both crops are produced in the region.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing regions that have not grown any crops in the past year.,"CREATE TABLE CropYields (Region VARCHAR(50), Crop VARCHAR(50), Yield INT, Year INT); INSERT INTO CropYields (Region, Crop, Yield, Year) VALUES ('North America', 'Wheat', 5000, 2022), ('Europe', 'Corn', 3000, 2022), ('Asia', 'Rice', 4000, 2022), ('South America', 'Soybeans', 2000, 2022);",SELECT DISTINCT Region FROM CropYields WHERE Region NOT IN (SELECT DISTINCT Region FROM CropYields WHERE Year = 2023);,The query selects regions that have not grown any crops in the past year by using a subquery to find regions that have grown crops in 2023 and then excluding them from the main query.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Retrieve the top 3 states with the highest average government spending per capita over the last 5 years.,"CREATE TABLE GovernmentSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), Year INT, Spending DECIMAL); CREATE TABLE Population (StateID INT PRIMARY KEY, Year INT, Population INT); INSERT INTO GovernmentSpending (StateID, StateName, Year, Spending) VALUES (1, 'California', 2020, 300000000), (2, 'Texas', 2020, 250000000), (3, 'New York', 2020, 200000000); INSERT INTO Population (StateID, Year, Population) VALUES (1, 2020, 39500000), (2, 2020, 29000000), (3, 2020, 19500000);","WITH AvgSpending AS (SELECT gs.StateName, AVG(gs.Spending / p.Population) AS AvgSpendingPerCapita FROM GovernmentSpending gs JOIN Population p ON gs.StateID = p.StateID AND gs.Year = p.Year WHERE gs.Year BETWEEN 2016 AND 2020 GROUP BY gs.StateName), RankedStates AS (SELECT StateName, AvgSpendingPerCapita, ROW_NUMBER() OVER (ORDER BY AvgSpendingPerCapita DESC) AS Rank FROM AvgSpending) SELECT StateName, AvgSpendingPerCapita FROM RankedStates WHERE Rank <= 3;",The query calculates the average government spending per capita for each state over the last 5 years by joining the GovernmentSpending and Population tables. It then ranks the states based on this average spending per capita and selects the top 3 states.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Identify the top 5 legislative bills with the highest number of co-sponsors in the last 10 years.,"CREATE TABLE LegislativeBills (BillID INT PRIMARY KEY, BillName VARCHAR(100), Year INT); CREATE TABLE CoSponsors (BillID INT, SponsorID INT, PRIMARY KEY (BillID, SponsorID)); INSERT INTO LegislativeBills (BillID, BillName, Year) VALUES (1, 'Healthcare Reform', 2015), (2, 'Education Act', 2018), (3, 'Infrastructure Bill', 2020); INSERT INTO CoSponsors (BillID, SponsorID) VALUES (1, 101), (1, 102), (2, 103), (3, 104), (3, 105);","WITH BillCoSponsors AS (SELECT lb.BillName, COUNT(cs.SponsorID) AS CoSponsorCount FROM LegislativeBills lb JOIN CoSponsors cs ON lb.BillID = cs.BillID WHERE lb.Year BETWEEN 2011 AND 2021 GROUP BY lb.BillName), RankedBills AS (SELECT BillName, CoSponsorCount, ROW_NUMBER() OVER (ORDER BY CoSponsorCount DESC) AS Rank FROM BillCoSponsors) SELECT BillName, CoSponsorCount FROM RankedBills WHERE Rank <= 5;",The query counts the number of co-sponsors for each legislative bill in the last 10 years by joining the LegislativeBills and CoSponsors tables. It then ranks the bills based on the number of co-sponsors and selects the top 5 bills.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 3 regions with the highest average citizen satisfaction scores over the past decade.,"CREATE TABLE CitizenSatisfaction (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, SatisfactionScore DECIMAL); INSERT INTO CitizenSatisfaction (RegionID, RegionName, Year, SatisfactionScore) VALUES (1, 'Northeast', 2015, 7.8), (2, 'Midwest', 2018, 6.5), (3, 'South', 2020, 8.2);","WITH AvgSatisfaction AS (SELECT RegionName, AVG(SatisfactionScore) AS AvgScore FROM CitizenSatisfaction WHERE Year BETWEEN 2011 AND 2021 GROUP BY RegionName), RankedRegions AS (SELECT RegionName, AvgScore, ROW_NUMBER() OVER (ORDER BY AvgScore DESC) AS Rank FROM AvgSatisfaction) SELECT RegionName, AvgScore FROM RankedRegions WHERE Rank <= 3;",The query calculates the average citizen satisfaction score for each region over the past decade. It then ranks the regions based on these average scores and selects the top 3 regions.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,List the top 5 government programs with the highest funding increases year-over-year in the last 5 years.,"CREATE TABLE GovernmentPrograms (ProgramID INT PRIMARY KEY, ProgramName VARCHAR(100), Year INT, Funding DECIMAL); INSERT INTO GovernmentPrograms (ProgramID, ProgramName, Year, Funding) VALUES (1, 'Healthcare', 2016, 500000000), (1, 'Healthcare', 2017, 550000000), (2, 'Education', 2018, 300000000), (2, 'Education', 2019, 350000000);","WITH FundingIncreases AS (SELECT ProgramName, Year, Funding - LAG(Funding) OVER (PARTITION BY ProgramID ORDER BY Year) AS FundingIncrease FROM GovernmentPrograms WHERE Year BETWEEN 2016 AND 2021), RankedPrograms AS (SELECT ProgramName, FundingIncrease, ROW_NUMBER() OVER (ORDER BY FundingIncrease DESC) AS Rank FROM FundingIncreases) SELECT ProgramName, FundingIncrease FROM RankedPrograms WHERE Rank <= 5;",The query calculates the year-over-year funding increase for each government program over the last 5 years using the LAG window function. It then ranks the programs based on these funding increases and selects the top 5 programs.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Determine the top 3 demographic groups with the highest average income in the last 5 years.,"CREATE TABLE Demographics (GroupID INT PRIMARY KEY, GroupName VARCHAR(50), Year INT, AvgIncome DECIMAL); INSERT INTO Demographics (GroupID, GroupName, Year, AvgIncome) VALUES (1, 'Group A', 2017, 55000), (2, 'Group B', 2018, 60000), (3, 'Group C', 2019, 65000);","WITH AvgIncomeGroups AS (SELECT GroupName, AVG(AvgIncome) AS AvgIncome FROM Demographics WHERE Year BETWEEN 2016 AND 2021 GROUP BY GroupName), RankedGroups AS (SELECT GroupName, AvgIncome, ROW_NUMBER() OVER (ORDER BY AvgIncome DESC) AS Rank FROM AvgIncomeGroups) SELECT GroupName, AvgIncome FROM RankedGroups WHERE Rank <= 3;",The query calculates the average income for each demographic group over the last 5 years. It then ranks the groups based on these average incomes and selects the top 3 groups.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Show the list of customers who have stayed in both luxury and budget hotels.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50)); CREATE TABLE Stays (StayID INT PRIMARY KEY, CustomerID INT, HotelType VARCHAR(20), StayDate DATE); INSERT INTO Customers (CustomerID, CustomerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); INSERT INTO Stays (StayID, CustomerID, HotelType, StayDate) VALUES (1, 1, 'Luxury', '2023-01-01'), (2, 1, 'Budget', '2023-02-01'), (3, 2, 'Luxury', '2023-01-15'), (4, 3, 'Budget', '2023-03-01');",SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Stays WHERE HotelType = 'Luxury') INTERSECT SELECT CustomerID FROM Stays WHERE HotelType = 'Budget';,The query retrieves the names of customers who have stayed in both luxury and budget hotels by using the INTERSECT set operation on the CustomerID from the Stays table.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find the regions where no customers have stayed in budget hotels.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50)); CREATE TABLE Stays (StayID INT PRIMARY KEY, CustomerID INT, HotelType VARCHAR(20), StayDate DATE, Region VARCHAR(50)); INSERT INTO Customers (CustomerID, CustomerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); INSERT INTO Stays (StayID, CustomerID, HotelType, StayDate, Region) VALUES (1, 1, 'Luxury', '2023-01-01', 'North America'), (2, 1, 'Budget', '2023-02-01', 'Europe'), (3, 2, 'Luxury', '2023-01-15', 'Asia'), (4, 3, 'Budget', '2023-03-01', 'Europe');",SELECT DISTINCT Region FROM Stays WHERE Region NOT IN (SELECT DISTINCT Region FROM Stays WHERE HotelType = 'Budget');,The query finds regions where no customers have stayed in budget hotels by using the EXCEPT set operation to exclude regions with budget hotel stays.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a list of all unique hotel types that customers have stayed in.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50)); CREATE TABLE Stays (StayID INT PRIMARY KEY, CustomerID INT, HotelType VARCHAR(20), StayDate DATE); INSERT INTO Customers (CustomerID, CustomerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); INSERT INTO Stays (StayID, CustomerID, HotelType, StayDate) VALUES (1, 1, 'Luxury', '2023-01-01'), (2, 1, 'Budget', '2023-02-01'), (3, 2, 'Luxury', '2023-01-15'), (4, 3, 'Budget', '2023-03-01');",SELECT DISTINCT HotelType FROM Stays;,The query retrieves a list of all unique hotel types that customers have stayed in by selecting distinct values from the HotelType column in the Stays table.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Identify customers who have stayed in hotels in both Europe and Asia.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50)); CREATE TABLE Stays (StayID INT PRIMARY KEY, CustomerID INT, HotelType VARCHAR(20), StayDate DATE, Region VARCHAR(50)); INSERT INTO Customers (CustomerID, CustomerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); INSERT INTO Stays (StayID, CustomerID, HotelType, StayDate, Region) VALUES (1, 1, 'Luxury', '2023-01-01', 'Europe'), (2, 1, 'Budget', '2023-02-01', 'Asia'), (3, 2, 'Luxury', '2023-01-15', 'Asia'), (4, 3, 'Budget', '2023-03-01', 'Europe');",SELECT CustomerName FROM Customers WHERE CustomerID IN (SELECT CustomerID FROM Stays WHERE Region = 'Europe') INTERSECT SELECT CustomerID FROM Stays WHERE Region = 'Asia';,The query identifies customers who have stayed in hotels in both Europe and Asia by using the INTERSECT set operation on the CustomerID from the Stays table.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",List the names of customers who have never stayed in a luxury hotel.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50)); CREATE TABLE Stays (StayID INT PRIMARY KEY, CustomerID INT, HotelType VARCHAR(20), StayDate DATE); INSERT INTO Customers (CustomerID, CustomerName) VALUES (1, 'John Doe'), (2, 'Jane Smith'), (3, 'Alice Johnson'); INSERT INTO Stays (StayID, CustomerID, HotelType, StayDate) VALUES (1, 1, 'Luxury', '2023-01-01'), (2, 1, 'Budget', '2023-02-01'), (3, 2, 'Luxury', '2023-01-15'), (4, 3, 'Budget', '2023-03-01');",SELECT CustomerName FROM Customers WHERE CustomerID NOT IN (SELECT CustomerID FROM Stays WHERE HotelType = 'Luxury');,The query lists the names of customers who have never stayed in a luxury hotel by using the EXCEPT set operation to exclude customers with luxury hotel stays.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the names and ages of patients who have been prescribed a specific drug along with the drug name and dosage.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugID INT, Dosage VARCHAR(50)); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50));","SELECT Patients.Name, Patients.Age, Drugs.DrugName, Prescriptions.Dosage FROM Patients INNER JOIN Prescriptions ON Patients.PatientID = Prescriptions.PatientID INNER JOIN Drugs ON Prescriptions.DrugID = Drugs.DrugID;","The query retrieves the names and ages of patients along with the drug name and dosage they have been prescribed. It uses INNER JOIN to combine the Patients, Prescriptions, and Drugs tables based on matching PatientID and DrugID."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,List all patients along with their medical history details and the outcomes of their treatments.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50)); CREATE TABLE TreatmentOutcomes (OutcomeID INT PRIMARY KEY, HistoryID INT, Outcome VARCHAR(50));","SELECT Patients.Name, Patients.Age, MedicalHistory.Condition, MedicalHistory.Treatment, TreatmentOutcomes.Outcome FROM Patients INNER JOIN MedicalHistory ON Patients.PatientID = MedicalHistory.PatientID INNER JOIN TreatmentOutcomes ON MedicalHistory.HistoryID = TreatmentOutcomes.HistoryID;","The query lists all patients along with their medical history details and the outcomes of their treatments. It uses INNER JOIN to combine the Patients, MedicalHistory, and TreatmentOutcomes tables based on matching PatientID and HistoryID."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Fetch the demographic details of patients who have experienced side effects from a specific drug.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, DrugID INT, SideEffect VARCHAR(50)); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50));","SELECT Patients.Name, Patients.Age, Patients.Gender, Drugs.DrugName, SideEffects.SideEffect FROM Patients INNER JOIN SideEffects ON Patients.PatientID = SideEffects.PatientID INNER JOIN Drugs ON SideEffects.DrugID = Drugs.DrugID;","The query fetches the demographic details of patients who have experienced side effects from a specific drug. It uses INNER JOIN to combine the Patients, SideEffects, and Drugs tables based on matching PatientID and DrugID."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Get a list of all treatments and their outcomes for patients over a certain age.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50)); CREATE TABLE TreatmentOutcomes (OutcomeID INT PRIMARY KEY, HistoryID INT, Outcome VARCHAR(50));","SELECT Patients.Name, MedicalHistory.Treatment, TreatmentOutcomes.Outcome FROM Patients INNER JOIN MedicalHistory ON Patients.PatientID = MedicalHistory.PatientID INNER JOIN TreatmentOutcomes ON MedicalHistory.HistoryID = TreatmentOutcomes.HistoryID WHERE Patients.Age > 50;","The query gets a list of all treatments and their outcomes for patients over the age of 50. It uses INNER JOIN to combine the Patients, MedicalHistory, and TreatmentOutcomes tables based on matching PatientID and HistoryID, and filters the results for patients older than 50."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average age of patients who have been treated for a specific condition and the outcomes of those treatments.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), Treatment VARCHAR(50)); CREATE TABLE TreatmentOutcomes (OutcomeID INT PRIMARY KEY, HistoryID INT, Outcome VARCHAR(50));","SELECT AVG(Patients.Age) AS AverageAge, TreatmentOutcomes.Outcome FROM Patients INNER JOIN MedicalHistory ON Patients.PatientID = MedicalHistory.PatientID INNER JOIN TreatmentOutcomes ON MedicalHistory.HistoryID = TreatmentOutcomes.HistoryID WHERE MedicalHistory.Condition = 'Diabetes' GROUP BY TreatmentOutcomes.Outcome;","The query finds the average age of patients who have been treated for diabetes and the outcomes of those treatments. It uses INNER JOIN to combine the Patients, MedicalHistory, and TreatmentOutcomes tables based on matching PatientID and HistoryID, filters for the condition 'Diabetes', and groups the results by treatment outcome."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total revenue generated from ticket sales for each sports event, along with the number of tickets sold and the average ticket price. Include only events that have sold more than 1000 tickets.","CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE); CREATE TABLE Tickets (TicketID INT PRIMARY KEY, EventID INT, TicketPrice DECIMAL, SaleDate DATE, FOREIGN KEY (EventID) REFERENCES Events(EventID)); CREATE TABLE Sales (SaleID INT PRIMARY KEY, TicketID INT, Quantity INT, FOREIGN KEY (TicketID) REFERENCES Tickets(TicketID));","SELECT E.EventName, SUM(S.Quantity * T.TicketPrice) AS TotalRevenue, SUM(S.Quantity) AS TicketsSold, AVG(T.TicketPrice) AS AvgTicketPrice FROM Events E INNER JOIN Tickets T ON E.EventID = T.EventID INNER JOIN Sales S ON T.TicketID = S.TicketID GROUP BY E.EventName HAVING SUM(S.Quantity) > 1000;","The query joins the Events, Tickets, and Sales tables to calculate the total revenue, total tickets sold, and average ticket price for each event. It filters the results to include only those events that have sold more than 1000 tickets."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Create a dashboard that displays the top 5 athletes with the highest average performance score in the last year, along with their respective teams and the number of events they participated in.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100), TeamID INT, FOREIGN KEY (TeamID) REFERENCES Teams(TeamID)); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(100)); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, EventID INT, Score DECIMAL, PerformanceDate DATE, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE);","WITH RecentPerformance AS (SELECT A.AthleteName, T.TeamName, P.Score FROM Athletes A INNER JOIN Teams T ON A.TeamID = T.TeamID INNER JOIN Performance P ON A.AthleteID = P.AthleteID WHERE P.PerformanceDate > DATEADD(YEAR, -1, GETDATE())), AthleteStats AS (SELECT AthleteName, TeamName, AVG(Score) AS AvgScore, COUNT(*) AS EventCount FROM RecentPerformance GROUP BY AthleteName, TeamName) SELECT AthleteName, TeamName, AvgScore, EventCount FROM AthleteStats ORDER BY AvgScore DESC LIMIT 5;","The query first creates a common table expression (CTE) to filter performance data from the last year. It then calculates the average score and event count for each athlete, and finally selects the top 5 athletes with the highest average scores."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a detailed report on fan engagement metrics for different sports teams, including the total number of social media interactions, average interactions per post, and the number of posts made in the last month.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(100)); CREATE TABLE SocialMediaPosts (PostID INT PRIMARY KEY, TeamID INT, PostDate DATE, InteractionCount INT, FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","SELECT T.TeamName, SUM(S.InteractionCount) AS TotalInteractions, AVG(S.InteractionCount) AS AvgInteractionsPerPost, COUNT(S.PostID) AS NumberOfPosts FROM Teams T INNER JOIN SocialMediaPosts S ON T.TeamID = S.TeamID WHERE S.PostDate > DATEADD(MONTH, -1, GETDATE()) GROUP BY T.TeamName;","The query joins the Teams and SocialMediaPosts tables to calculate total interactions, average interactions per post, and the number of posts for each team in the last month."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Analyze the economic impact of sports events by generating a report that shows the total revenue, average revenue per event, and the number of events held in each region.","CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), RegionID INT, EventDate DATE, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, EventID INT, Amount DECIMAL, FOREIGN KEY (EventID) REFERENCES Events(EventID));","SELECT R.RegionName, SUM(Re.Amount) AS TotalRevenue, AVG(Re.Amount) AS AvgRevenuePerEvent, COUNT(E.EventID) AS NumberOfEvents FROM Regions R INNER JOIN Events E ON R.RegionID = E.RegionID INNER JOIN Revenue Re ON E.EventID = Re.EventID GROUP BY R.RegionName;","The query joins the Regions, Events, and Revenue tables to calculate the total revenue, average revenue per event, and the number of events for each region."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a comprehensive report on the global sports market trends, including the total market value, average market value per region, and the number of regions analyzed.","CREATE TABLE Markets (MarketID INT PRIMARY KEY, MarketName VARCHAR(100), MarketValue DECIMAL); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE MarketRegions (MarketRegionID INT PRIMARY KEY, MarketID INT, RegionID INT, FOREIGN KEY (MarketID) REFERENCES Markets(MarketID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","SELECT SUM(M.MarketValue) AS TotalMarketValue, AVG(M.MarketValue) AS AvgMarketValuePerRegion, COUNT(DISTINCT R.RegionID) AS NumberOfRegions FROM Markets M INNER JOIN MarketRegions MR ON M.MarketID = MR.MarketID INNER JOIN Regions R ON MR.RegionID = R.RegionID;","The query joins the Markets, MarketRegions, and Regions tables to calculate the total market value, average market value per region, and the number of regions analyzed."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store patient demographics and then retrieve all patients who are over 60 years old.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Age INT, Gender VARCHAR(10));",SELECT * FROM Patients WHERE Age > 60;,The query selects all columns from the Patients table where the Age column is greater than 60.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store medical histories and then find all patients who have been diagnosed with diabetes.,"CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), DiagnosisDate DATE);",SELECT * FROM MedicalHistory WHERE Diagnosis = 'Diabetes';,The query selects all columns from the MedicalHistory table where the Diagnosis column is equal to 'Diabetes'.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store treatment protocols and then list all protocols for chemotherapy.,"CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, ProtocolName VARCHAR(100), TreatmentType VARCHAR(50));",SELECT * FROM TreatmentProtocols WHERE TreatmentType = 'Chemotherapy';,The query selects all columns from the TreatmentProtocols table where the TreatmentType column is equal to 'Chemotherapy'.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store drug efficacy studies and then find all studies related to the drug 'Aspirin'.,"CREATE TABLE DrugEfficacy (StudyID INT PRIMARY KEY, DrugName VARCHAR(50), EfficacyRate DECIMAL, SideEffects VARCHAR(255));",SELECT * FROM DrugEfficacy WHERE DrugName = 'Aspirin';,The query selects all columns from the DrugEfficacy table where the DrugName column is equal to 'Aspirin'.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store patient outcomes and then retrieve all outcomes for patients who have recovered.,"CREATE TABLE PatientOutcomes (OutcomeID INT PRIMARY KEY, PatientID INT, Outcome VARCHAR(50), OutcomeDate DATE);",SELECT * FROM PatientOutcomes WHERE Outcome = 'Recovered';,The query selects all columns from the PatientOutcomes table where the Outcome column is equal to 'Recovered'.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Begin a transaction to update the sales data for electric vehicles, and if any error occurs, roll back the transaction.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), SaleDate DATE, SaleAmount DECIMAL, VehicleType VARCHAR(50)); CREATE TABLE ElectricVehicleSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), SaleDate DATE, SaleAmount DECIMAL);","BEGIN TRANSACTION; INSERT INTO ElectricVehicleSales (SaleID, VehicleModel, SaleDate, SaleAmount) SELECT SaleID, VehicleModel, SaleDate, SaleAmount FROM VehicleSales WHERE VehicleType = 'Electric'; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query begins a transaction to insert sales data of electric vehicles from the VehicleSales table into the ElectricVehicleSales table. If an error occurs during the insertion, the transaction is rolled back; otherwise, it is committed."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Start a transaction to update the vehicle technology details and commit the changes if successful.,"CREATE TABLE VehicleTechnology (TechID INT PRIMARY KEY, VehicleModel VARCHAR(50), Technology VARCHAR(50), UpdateDate DATE); CREATE TABLE UpdatedTechnology (TechID INT PRIMARY KEY, VehicleModel VARCHAR(50), Technology VARCHAR(50), UpdateDate DATE);","BEGIN TRANSACTION; INSERT INTO UpdatedTechnology (TechID, VehicleModel, Technology, UpdateDate) SELECT TechID, VehicleModel, Technology, UpdateDate FROM VehicleTechnology; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query initiates a transaction to insert data from the VehicleTechnology table into the UpdatedTechnology table. If an error occurs, the transaction is rolled back; otherwise, it is committed."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Initiate a transaction to transfer data about sustainable transportation initiatives and roll back if any error occurs.,"CREATE TABLE SustainableInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(50), StartDate DATE, EndDate DATE, Impact DECIMAL); CREATE TABLE TransferredInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(50), StartDate DATE, EndDate DATE, Impact DECIMAL);","BEGIN TRANSACTION; INSERT INTO TransferredInitiatives (InitiativeID, InitiativeName, StartDate, EndDate, Impact) SELECT InitiativeID, InitiativeName, StartDate, EndDate, Impact FROM SustainableInitiatives; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query starts a transaction to insert data from the SustainableInitiatives table into the TransferredInitiatives table. If an error occurs during the insertion, the transaction is rolled back; otherwise, it is committed."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Begin a transaction to update global automotive market analysis data and commit if no errors occur.,"CREATE TABLE MarketAnalysis (AnalysisID INT PRIMARY KEY, Region VARCHAR(50), MarketShare DECIMAL, AnalysisDate DATE); CREATE TABLE UpdatedMarketAnalysis (AnalysisID INT PRIMARY KEY, Region VARCHAR(50), MarketShare DECIMAL, AnalysisDate DATE);","BEGIN TRANSACTION; INSERT INTO UpdatedMarketAnalysis (AnalysisID, Region, MarketShare, AnalysisDate) SELECT AnalysisID, Region, MarketShare, AnalysisDate FROM MarketAnalysis; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query initiates a transaction to insert data from the MarketAnalysis table into the UpdatedMarketAnalysis table. If an error occurs, the transaction is rolled back; otherwise, it is committed."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Start a transaction to update detailed vehicle sales data and roll back if any error occurs.,"CREATE TABLE DetailedSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), SaleDate DATE, SaleAmount DECIMAL, Region VARCHAR(50)); CREATE TABLE UpdatedSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), SaleDate DATE, SaleAmount DECIMAL, Region VARCHAR(50));","BEGIN TRANSACTION; INSERT INTO UpdatedSales (SaleID, VehicleModel, SaleDate, SaleAmount, Region) SELECT SaleID, VehicleModel, SaleDate, SaleAmount, Region FROM DetailedSales; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query starts a transaction to insert data from the DetailedSales table into the UpdatedSales table. If an error occurs during the insertion, the transaction is rolled back; otherwise, it is committed."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert new data on the number of endangered species in various regions and then retrieve the updated list of regions with their respective counts of endangered species.,"CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), Region VARCHAR(100), EndangeredLevel VARCHAR(50)); INSERT INTO EndangeredSpecies (SpeciesID, SpeciesName, Region, EndangeredLevel) VALUES (1, 'Tiger', 'Asia', 'Critically Endangered'), (2, 'Panda', 'Asia', 'Vulnerable'), (3, 'Polar Bear', 'Arctic', 'Vulnerable'), (4, 'Elephant', 'Africa', 'Endangered');","INSERT INTO EndangeredSpecies (SpeciesID, SpeciesName, Region, EndangeredLevel) VALUES (5, 'Rhino', 'Africa', 'Critically Endangered'), (6, 'Blue Whale', 'Oceans', 'Endangered'); SELECT Region, COUNT(SpeciesID) AS EndangeredCount FROM EndangeredSpecies GROUP BY Region;",The query first inserts new records for 'Rhino' and 'Blue Whale' into the EndangeredSpecies table. It then retrieves the updated count of endangered species for each region by grouping the records by the 'Region' column and counting the number of species in each region.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the renewable energy production data for a specific country and then display the total renewable energy production for all countries.,"CREATE TABLE RenewableEnergy (CountryID INT PRIMARY KEY, CountryName VARCHAR(100), EnergyProduced DECIMAL); INSERT INTO RenewableEnergy (CountryID, CountryName, EnergyProduced) VALUES (1, 'USA', 1000.5), (2, 'Germany', 800.0), (3, 'China', 1500.0), (4, 'India', 700.0);",UPDATE RenewableEnergy SET EnergyProduced = 1200.0 WHERE CountryName = 'USA'; SELECT SUM(EnergyProduced) AS TotalEnergyProduced FROM RenewableEnergy;,The query first updates the 'EnergyProduced' value for the USA in the RenewableEnergy table to 1200.0. It then calculates the total renewable energy produced by summing the 'EnergyProduced' values for all countries.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Delete records of deforestation activities that occurred before the year 2000 and then list the remaining records.,"CREATE TABLE Deforestation (ActivityID INT PRIMARY KEY, Region VARCHAR(100), Year INT, AreaAffected DECIMAL); INSERT INTO Deforestation (ActivityID, Region, Year, AreaAffected) VALUES (1, 'Amazon', 1995, 500.0), (2, 'Congo', 2001, 300.0), (3, 'Southeast Asia', 1998, 450.0), (4, 'Australia', 2005, 200.0);",DELETE FROM Deforestation WHERE Year < 2000; SELECT * FROM Deforestation;,The query first deletes records from the Deforestation table where the 'Year' is before 2000. It then selects and lists all remaining records in the table.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert new data on water quality measurements in different rivers and then display the average water quality index for each river.,"CREATE TABLE WaterQuality (MeasurementID INT PRIMARY KEY, RiverName VARCHAR(100), QualityIndex DECIMAL, MeasurementDate DATE); INSERT INTO WaterQuality (MeasurementID, RiverName, QualityIndex, MeasurementDate) VALUES (1, 'Nile', 75.0, '2023-01-01'), (2, 'Amazon', 80.0, '2023-01-02'), (3, 'Ganges', 65.0, '2023-01-03'), (4, 'Yangtze', 70.0, '2023-01-04');","INSERT INTO WaterQuality (MeasurementID, RiverName, QualityIndex, MeasurementDate) VALUES (5, 'Nile', 78.0, '2023-01-05'), (6, 'Amazon', 82.0, '2023-01-06'); SELECT RiverName, AVG(QualityIndex) AS AvgQualityIndex FROM WaterQuality GROUP BY RiverName;",The query first inserts new records for water quality measurements in the Nile and Amazon rivers into the WaterQuality table. It then calculates the average water quality index for each river by grouping the records by the 'RiverName' column and averaging the 'QualityIndex' values.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the carbon emission data for a specific industry and then display the total carbon emissions for all industries.,"CREATE TABLE CarbonEmissions (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(100), Emissions DECIMAL); INSERT INTO CarbonEmissions (IndustryID, IndustryName, Emissions) VALUES (1, 'Manufacturing', 500.0), (2, 'Transportation', 700.0), (3, 'Energy', 1200.0), (4, 'Agriculture', 300.0);",UPDATE CarbonEmissions SET Emissions = 600.0 WHERE IndustryName = 'Manufacturing'; SELECT SUM(Emissions) AS TotalEmissions FROM CarbonEmissions;,The query first updates the 'Emissions' value for the Manufacturing industry in the CarbonEmissions table to 600.0. It then calculates the total carbon emissions by summing the 'Emissions' values for all industries.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Find patients who have been prescribed a medication but have no recorded side effects.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(100)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, DatePrescribed DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, MedicationID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));","SELECT p.Name, p.Age, p.Gender, m.MedicationName FROM Patients p JOIN Prescriptions pr ON p.PatientID = pr.PatientID JOIN Medications m ON pr.MedicationID = m.MedicationID LEFT JOIN SideEffects s ON p.PatientID = s.PatientID AND m.MedicationID = s.MedicationID WHERE s.SideEffectID IS NULL;","The query joins the Patients, Prescriptions, and Medications tables to get the list of patients and their prescribed medications. It then performs a LEFT JOIN with the SideEffects table to find patients who do not have any recorded side effects for the prescribed medications. The WHERE clause filters out patients who have side effects, leaving only those without any recorded side effects."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",List patients who have been prescribed medications that have known side effects but have not experienced any themselves.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(100)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, DatePrescribed DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)); CREATE TABLE KnownSideEffects (SideEffectID INT PRIMARY KEY, MedicationID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PatientID INT, MedicationID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));","SELECT p.Name, p.Age, p.Gender, m.MedicationName FROM Patients p JOIN Prescriptions pr ON p.PatientID = pr.PatientID JOIN Medications m ON pr.MedicationID = m.MedicationID JOIN KnownSideEffects kse ON m.MedicationID = kse.MedicationID LEFT JOIN SideEffects se ON p.PatientID = se.PatientID AND m.MedicationID = se.MedicationID WHERE se.SideEffectID IS NULL;","The query joins the Patients, Prescriptions, Medications, and KnownSideEffects tables to get the list of patients and their prescribed medications that have known side effects. It then performs a LEFT JOIN with the SideEffects table to find patients who have not experienced any side effects. The WHERE clause filters out patients who have experienced side effects, leaving only those without any recorded side effects."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Update the treatment protocol for patients over 60 years old who have been prescribed a specific medication.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(100)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, DatePrescribed DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, PatientID INT, MedicationID INT, ProtocolDescription VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));",UPDATE TreatmentProtocols SET ProtocolDescription = 'Updated Protocol' WHERE PatientID IN (SELECT p.PatientID FROM Patients p JOIN Prescriptions pr ON p.PatientID = pr.PatientID WHERE p.Age > 60 AND pr.MedicationID = (SELECT MedicationID FROM Medications WHERE MedicationName = 'Specific Medication'));,The query updates the TreatmentProtocols table to set a new protocol description for patients over 60 years old who have been prescribed a specific medication. It uses a subquery to find the PatientIDs of those who meet the criteria and updates the ProtocolDescription for those patients.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Delete records of patients who have not had any prescriptions in the last year.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, DatePrescribed DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));","DELETE FROM Patients WHERE PatientID NOT IN (SELECT DISTINCT PatientID FROM Prescriptions WHERE DatePrescribed >= DATEADD(YEAR, -1, GETDATE()));",The query deletes records from the Patients table for patients who have not had any prescriptions in the last year. It uses a subquery to find the PatientIDs of those who have had prescriptions in the last year and deletes the records of patients not in this list.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert new patient records and their initial treatment protocols.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, PatientID INT, MedicationID INT, ProtocolDescription VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(100));","INSERT INTO Patients (PatientID, Name, Age, Gender) VALUES (1, 'John Doe', 45, 'Male'), (2, 'Jane Smith', 50, 'Female'); INSERT INTO TreatmentProtocols (ProtocolID, PatientID, MedicationID, ProtocolDescription) VALUES (1, 1, 1, 'Initial Protocol for John Doe'), (2, 2, 2, 'Initial Protocol for Jane Smith');","The query inserts new records into the Patients table for two new patients, John Doe and Jane Smith. It then inserts corresponding initial treatment protocols for these patients into the TreatmentProtocols table, linking each patient to a specific medication and protocol description."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 emerging technologies by market growth in the last quarter and ensure the transaction is committed only if the data is accurate.,"CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(50), Category VARCHAR(50)); CREATE TABLE MarketGrowth (GrowthID INT PRIMARY KEY, TechID INT, Quarter VARCHAR(10), GrowthPercentage DECIMAL, FOREIGN KEY (TechID) REFERENCES Technologies(TechID));","BEGIN TRANSACTION; WITH RankedTech AS (SELECT t.TechName, m.GrowthPercentage, DENSE_RANK() OVER (ORDER BY m.GrowthPercentage DESC) AS Rank FROM Technologies t INNER JOIN MarketGrowth m ON t.TechID = m.TechID WHERE m.Quarter = 'Q4') SELECT TechName, GrowthPercentage FROM RankedTech WHERE Rank <= 3; COMMIT;",The query starts a transaction and creates a common table expression (CTE) to rank technologies based on their market growth percentage in the last quarter. It then selects the top 3 technologies by growth percentage and commits the transaction if the data is accurate.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the latest innovation trends in AI and ensure the transaction is rolled back if any error occurs.,"CREATE TABLE Innovations (InnovationID INT PRIMARY KEY, InnovationName VARCHAR(50), Category VARCHAR(50), Date DATE); CREATE TABLE Trends (TrendID INT PRIMARY KEY, InnovationID INT, TrendDescription VARCHAR(255), FOREIGN KEY (InnovationID) REFERENCES Innovations(InnovationID));","BEGIN TRANSACTION; SELECT i.InnovationName, t.TrendDescription FROM Innovations i INNER JOIN Trends t ON i.InnovationID = t.InnovationID WHERE i.Category = 'AI' ORDER BY i.Date DESC; ROLLBACK;",The query starts a transaction and retrieves the latest innovation trends in AI by joining the Innovations and Trends tables. It orders the results by the date of the innovation in descending order and rolls back the transaction if any error occurs.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the top 5 companies investing in blockchain technology and ensure the transaction is committed only if the data is accurate.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50)); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, CompanyID INT, TechID INT, InvestmentAmount DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID), FOREIGN KEY (TechID) REFERENCES Technologies(TechID));","BEGIN TRANSACTION; WITH RankedCompanies AS (SELECT c.CompanyName, SUM(i.InvestmentAmount) AS TotalInvestment, DENSE_RANK() OVER (ORDER BY SUM(i.InvestmentAmount) DESC) AS Rank FROM Companies c INNER JOIN Investments i ON c.CompanyID = i.CompanyID INNER JOIN Technologies t ON i.TechID = t.TechID WHERE t.TechName = 'Blockchain' GROUP BY c.CompanyName) SELECT CompanyName, TotalInvestment FROM RankedCompanies WHERE Rank <= 5; COMMIT;",The query starts a transaction and creates a common table expression (CTE) to rank companies based on their total investment in blockchain technology. It then selects the top 5 companies by total investment and commits the transaction if the data is accurate.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the most disruptive innovations in the healthcare sector and ensure the transaction is rolled back if any error occurs.,"CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(50)); CREATE TABLE Disruptions (DisruptionID INT PRIMARY KEY, InnovationID INT, SectorID INT, ImpactScore DECIMAL, FOREIGN KEY (InnovationID) REFERENCES Innovations(InnovationID), FOREIGN KEY (SectorID) REFERENCES Sectors(SectorID));","BEGIN TRANSACTION; SELECT i.InnovationName, d.ImpactScore FROM Innovations i INNER JOIN Disruptions d ON i.InnovationID = d.InnovationID INNER JOIN Sectors s ON d.SectorID = s.SectorID WHERE s.SectorName = 'Healthcare' ORDER BY d.ImpactScore DESC; ROLLBACK;","The query starts a transaction and retrieves the most disruptive innovations in the healthcare sector by joining the Innovations, Disruptions, and Sectors tables. It orders the results by the impact score in descending order and rolls back the transaction if any error occurs."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Get the quarterly investment trends in renewable energy and ensure the transaction is committed only if the data is accurate.,"CREATE TABLE EnergyInvestments (InvestmentID INT PRIMARY KEY, CompanyID INT, TechID INT, Quarter VARCHAR(10), InvestmentAmount DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID), FOREIGN KEY (TechID) REFERENCES Technologies(TechID));","BEGIN TRANSACTION; SELECT e.Quarter, SUM(e.InvestmentAmount) AS TotalInvestment FROM EnergyInvestments e INNER JOIN Technologies t ON e.TechID = t.TechID WHERE t.TechName = 'Renewable Energy' GROUP BY e.Quarter ORDER BY e.Quarter; COMMIT;","The query starts a transaction and retrieves the quarterly investment trends in renewable energy by joining the EnergyInvestments and Technologies tables. It groups the results by quarter, sums the investment amounts, orders the results by quarter, and commits the transaction if the data is accurate."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average occupancy rates for different hotels across various cities, and then display the top 3 cities with the highest average occupancy rates.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50), OccupancyRate DECIMAL); INSERT INTO Hotels (HotelID, HotelName, City, OccupancyRate) VALUES (1, 'Hotel A', 'New York', 85.5), (2, 'Hotel B', 'Los Angeles', 78.0), (3, 'Hotel C', 'Chicago', 82.0), (4, 'Hotel D', 'New York', 88.7), (5, 'Hotel E', 'Los Angeles', 90.0);","WITH CityOccupancy AS (SELECT City, AVG(OccupancyRate) AS AvgOccupancy FROM Hotels GROUP BY City), RankedCities AS (SELECT City, AvgOccupancy, DENSE_RANK() OVER (ORDER BY AvgOccupancy DESC) AS Rank FROM CityOccupancy) SELECT City, AvgOccupancy FROM RankedCities WHERE Rank <= 3;","The query first creates a common table expression (CTE) to calculate the average occupancy rate for each city. It then ranks these cities based on their average occupancy rates in descending order using the DENSE_RANK function. Finally, it selects the top 3 cities with the highest average occupancy rates."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average customer ratings for different tour packages across various countries, and then display the top 5 tour packages with the highest average ratings.","CREATE TABLE TourPackages (PackageID INT PRIMARY KEY, PackageName VARCHAR(50), Country VARCHAR(50), AvgRating DECIMAL); INSERT INTO TourPackages (PackageID, PackageName, Country, AvgRating) VALUES (1, 'Package A', 'USA', 4.5), (2, 'Package B', 'France', 4.8), (3, 'Package C', 'Italy', 4.7), (4, 'Package D', 'Spain', 4.6), (5, 'Package E', 'Germany', 4.9);","WITH RankedPackages AS (SELECT PackageName, AvgRating, DENSE_RANK() OVER (ORDER BY AvgRating DESC) AS Rank FROM TourPackages) SELECT PackageName, AvgRating FROM RankedPackages WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank tour packages based on their average customer ratings in descending order. It then selects the top 5 tour packages with the highest average ratings using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue generated by different airlines across various regions, and then display the top 3 airlines with the highest total revenue.","CREATE TABLE AirlineRevenue (AirlineID INT PRIMARY KEY, AirlineName VARCHAR(50), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO AirlineRevenue (AirlineID, AirlineName, Region, TotalRevenue) VALUES (1, 'Airline A', 'North America', 5000000), (2, 'Airline B', 'Europe', 4500000), (3, 'Airline C', 'Asia', 6000000), (4, 'Airline D', 'North America', 5500000), (5, 'Airline E', 'Europe', 4700000);","WITH RankedAirlines AS (SELECT AirlineName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM AirlineRevenue) SELECT AirlineName, TotalRevenue FROM RankedAirlines WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank airlines based on their total revenue in descending order. It then selects the top 3 airlines with the highest total revenue using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average customer satisfaction scores for different restaurants across various cities, and then display the top 5 cities with the highest average satisfaction scores.","CREATE TABLE RestaurantSatisfaction (RestaurantID INT PRIMARY KEY, RestaurantName VARCHAR(50), City VARCHAR(50), SatisfactionScore DECIMAL); INSERT INTO RestaurantSatisfaction (RestaurantID, RestaurantName, City, SatisfactionScore) VALUES (1, 'Restaurant A', 'New York', 4.5), (2, 'Restaurant B', 'Los Angeles', 4.8), (3, 'Restaurant C', 'Chicago', 4.7), (4, 'Restaurant D', 'New York', 4.6), (5, 'Restaurant E', 'Los Angeles', 4.9);","WITH CitySatisfaction AS (SELECT City, AVG(SatisfactionScore) AS AvgSatisfaction FROM RestaurantSatisfaction GROUP BY City), RankedCities AS (SELECT City, AvgSatisfaction, DENSE_RANK() OVER (ORDER BY AvgSatisfaction DESC) AS Rank FROM CitySatisfaction) SELECT City, AvgSatisfaction FROM RankedCities WHERE Rank <= 5;","The query first creates a common table expression (CTE) to calculate the average customer satisfaction score for each city. It then ranks these cities based on their average satisfaction scores in descending order using the DENSE_RANK function. Finally, it selects the top 5 cities with the highest average satisfaction scores."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of bookings for different travel agencies across various countries, and then display the top 3 travel agencies with the highest number of bookings.","CREATE TABLE TravelAgencyBookings (AgencyID INT PRIMARY KEY, AgencyName VARCHAR(50), Country VARCHAR(50), NumberOfBookings INT); INSERT INTO TravelAgencyBookings (AgencyID, AgencyName, Country, NumberOfBookings) VALUES (1, 'Agency A', 'USA', 1500), (2, 'Agency B', 'France', 1800), (3, 'Agency C', 'Italy', 1700), (4, 'Agency D', 'Spain', 1600), (5, 'Agency E', 'Germany', 1900);","WITH RankedAgencies AS (SELECT AgencyName, NumberOfBookings, DENSE_RANK() OVER (ORDER BY NumberOfBookings DESC) AS Rank FROM TravelAgencyBookings) SELECT AgencyName, NumberOfBookings FROM RankedAgencies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank travel agencies based on the number of bookings in descending order. It then selects the top 3 travel agencies with the highest number of bookings using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Show the total number of movies watched by each user in the last month.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50)); CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100)); CREATE TABLE WatchHistory (WatchID INT PRIMARY KEY, UserID INT, MovieID INT, WatchDate DATE);","SELECT Users.UserName, COUNT(WatchHistory.MovieID) AS TotalMoviesWatched FROM Users JOIN WatchHistory ON Users.UserID = WatchHistory.UserID WHERE WatchHistory.WatchDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY Users.UserName;",The query joins the Users and WatchHistory tables to count the number of movies each user has watched in the last month. It filters the WatchHistory records to include only those watched in the last month and groups the results by UserName.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find the average rating for each genre of movies.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, MovieID INT, Rating DECIMAL);","SELECT Genre, AVG(Rating) AS AverageRating FROM Movies JOIN Ratings ON Movies.MovieID = Ratings.MovieID GROUP BY Genre;",The query joins the Movies and Ratings tables to calculate the average rating for each genre. It groups the results by Genre and uses the AVG function to find the average rating.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 most popular TV shows based on the number of views.,"CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100)); CREATE TABLE Views (ViewID INT PRIMARY KEY, ShowID INT, ViewDate DATE);","SELECT TVShows.Title, COUNT(Views.ViewID) AS TotalViews FROM TVShows JOIN Views ON TVShows.ShowID = Views.ShowID GROUP BY TVShows.Title ORDER BY TotalViews DESC LIMIT 5;","The query joins the TVShows and Views tables to count the number of views for each TV show. It groups the results by Title, orders them by TotalViews in descending order, and limits the output to the top 5 shows."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Calculate the total revenue generated from movie rentals in the last year.,"CREATE TABLE Rentals (RentalID INT PRIMARY KEY, MovieID INT, RentalDate DATE, RentalFee DECIMAL);","SELECT SUM(RentalFee) AS TotalRevenue FROM Rentals WHERE RentalDate >= DATEADD(YEAR, -1, GETDATE());",The query calculates the total revenue generated from movie rentals in the last year by summing the RentalFee column. It filters the Rentals records to include only those rented in the last year.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find the number of unique users who have watched each genre of movies.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50)); CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE WatchHistory (WatchID INT PRIMARY KEY, UserID INT, MovieID INT, WatchDate DATE);","SELECT Genre, COUNT(DISTINCT WatchHistory.UserID) AS UniqueUsers FROM Movies JOIN WatchHistory ON Movies.MovieID = WatchHistory.MovieID GROUP BY Genre;",The query joins the Movies and WatchHistory tables to count the number of unique users who have watched each genre. It groups the results by Genre and uses the COUNT(DISTINCT UserID) function to find the number of unique users.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the total number of goals scored by each player in the current season.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, HomeTeamID INT, AwayTeamID INT); CREATE TABLE Goals (GoalID INT PRIMARY KEY, PlayerID INT, MatchID INT, GoalTime TIME);",UPDATE Players SET TotalGoals = (SELECT COUNT(*) FROM Goals WHERE Goals.PlayerID = Players.PlayerID);,"The query updates the TotalGoals column in the Players table by counting the number of goals each player has scored, using a subquery to count the goals from the Goals table for each player."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert a new match result and update the win/loss record for the involved teams.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Wins INT, Losses INT); CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, HomeTeamID INT, AwayTeamID INT, HomeTeamScore INT, AwayTeamScore INT);","INSERT INTO Matches (MatchID, MatchDate, HomeTeamID, AwayTeamID, HomeTeamScore, AwayTeamScore) VALUES (101, '2023-10-01', 1, 2, 3, 2); UPDATE Teams SET Wins = Wins + 1 WHERE TeamID = 1; UPDATE Teams SET Losses = Losses + 1 WHERE TeamID = 2;","The query first inserts a new match result into the Matches table. Then, it updates the Wins column for the home team and the Losses column for the away team based on the match result."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete all records of players who have not scored any goals this season.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Goals (GoalID INT PRIMARY KEY, PlayerID INT, MatchID INT, GoalTime TIME);",DELETE FROM Players WHERE PlayerID NOT IN (SELECT DISTINCT PlayerID FROM Goals);,"The query deletes all records from the Players table for players who do not have any corresponding entries in the Goals table, indicating they have not scored any goals this season."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert new fan engagement data and calculate the average engagement per match.,"CREATE TABLE Fans (FanID INT PRIMARY KEY, FanName VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE); CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, FanID INT, MatchID INT, EngagementScore INT);","INSERT INTO FanEngagement (EngagementID, FanID, MatchID, EngagementScore) VALUES (201, 1, 101, 85), (202, 2, 101, 90); SELECT MatchID, AVG(EngagementScore) AS AvgEngagement FROM FanEngagement GROUP BY MatchID;","The query first inserts new fan engagement data into the FanEngagement table. Then, it calculates the average engagement score per match by grouping the data by MatchID and using the AVG function."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the sponsorship revenue for each team based on new contracts signed.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), SponsorshipRevenue DECIMAL); CREATE TABLE Sponsorships (SponsorshipID INT PRIMARY KEY, TeamID INT, ContractValue DECIMAL);",UPDATE Teams SET SponsorshipRevenue = (SELECT SUM(ContractValue) FROM Sponsorships WHERE Sponsorships.TeamID = Teams.TeamID);,"The query updates the SponsorshipRevenue column in the Teams table by summing up the ContractValue from the Sponsorships table for each team, using a subquery to calculate the total sponsorship revenue for each team."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new public policy record and then retrieve all policies related to healthcare.,"CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), PolicyType VARCHAR(50), EffectiveDate DATE); CREATE TABLE PolicyDetails (DetailID INT PRIMARY KEY, PolicyID INT, Description TEXT, FOREIGN KEY (PolicyID) REFERENCES PublicPolicy(PolicyID));","INSERT INTO PublicPolicy (PolicyID, PolicyName, PolicyType, EffectiveDate) VALUES (101, 'Universal Healthcare', 'Healthcare', '2023-01-01'); SELECT * FROM PublicPolicy WHERE PolicyType = 'Healthcare';",The query first inserts a new record into the PublicPolicy table with details about a healthcare policy. It then retrieves all records from the PublicPolicy table where the PolicyType is 'Healthcare'.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the budget allocation for a specific government project and then list all projects with their updated budgets.,"CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Budget DECIMAL); CREATE TABLE ProjectUpdates (UpdateID INT PRIMARY KEY, ProjectID INT, UpdateDate DATE, NewBudget DECIMAL, FOREIGN KEY (ProjectID) REFERENCES GovernmentProjects(ProjectID));","UPDATE GovernmentProjects SET Budget = 500000 WHERE ProjectID = 1; SELECT ProjectName, Budget FROM GovernmentProjects;","The query updates the budget for the project with ProjectID 1 in the GovernmentProjects table to 500,000. It then retrieves the names and budgets of all projects from the GovernmentProjects table."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Delete a legislative record and then show all remaining records in the legislative table.,"CREATE TABLE LegislativeRecords (RecordID INT PRIMARY KEY, BillName VARCHAR(100), Status VARCHAR(50), DatePassed DATE);",DELETE FROM LegislativeRecords WHERE RecordID = 5; SELECT * FROM LegislativeRecords;,The query deletes the record with RecordID 5 from the LegislativeRecords table. It then retrieves all remaining records from the LegislativeRecords table.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new citizen demographic record and then display all records for citizens aged above 65.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10), City VARCHAR(50));","INSERT INTO CitizenDemographics (CitizenID, Name, Age, Gender, City) VALUES (201, 'John Doe', 70, 'Male', 'New York'); SELECT * FROM CitizenDemographics WHERE Age > 65;",The query inserts a new record into the CitizenDemographics table with details about a citizen aged 70. It then retrieves all records from the CitizenDemographics table where the age is above 65.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the effectiveness rating of a governance initiative and then list all initiatives with their updated ratings.,"CREATE TABLE GovernanceInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(100), EffectivenessRating DECIMAL); CREATE TABLE InitiativeUpdates (UpdateID INT PRIMARY KEY, InitiativeID INT, UpdateDate DATE, NewRating DECIMAL, FOREIGN KEY (InitiativeID) REFERENCES GovernanceInitiatives(InitiativeID));","UPDATE GovernanceInitiatives SET EffectivenessRating = 4.5 WHERE InitiativeID = 3; SELECT InitiativeName, EffectivenessRating FROM GovernanceInitiatives;",The query updates the effectiveness rating of the initiative with InitiativeID 3 in the GovernanceInitiatives table to 4.5. It then retrieves the names and effectiveness ratings of all initiatives from the GovernanceInitiatives table.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert new sales data for electric vehicles in the European market and then display the total sales for each model.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, UnitsSold INT); CREATE TABLE ElectricVehicles (EV_ID INT PRIMARY KEY, ModelName VARCHAR(50), BatteryCapacity DECIMAL, RangePerCharge DECIMAL);","INSERT INTO VehicleSales (SaleID, ModelName, Region, SaleDate, UnitsSold) VALUES (101, 'Model X', 'Europe', '2023-01-15', 50), (102, 'Model Y', 'Europe', '2023-01-20', 30); SELECT ModelName, SUM(UnitsSold) AS TotalSales FROM VehicleSales WHERE Region = 'Europe' GROUP BY ModelName;","The query first inserts new sales data for electric vehicles into the VehicleSales table. Then, it selects the total units sold for each model in the European market by summing the UnitsSold column and grouping by ModelName."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the battery capacity for a specific electric vehicle model and display the updated details.,"CREATE TABLE ElectricVehicles (EV_ID INT PRIMARY KEY, ModelName VARCHAR(50), BatteryCapacity DECIMAL, RangePerCharge DECIMAL);",UPDATE ElectricVehicles SET BatteryCapacity = 85.0 WHERE ModelName = 'Model S'; SELECT * FROM ElectricVehicles WHERE ModelName = 'Model S';,The query updates the BatteryCapacity for the electric vehicle model 'Model S' to 85.0 in the ElectricVehicles table. It then selects and displays the updated details for 'Model S'.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Delete sales records for a specific vehicle model in the North American market and then show the remaining sales records.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, UnitsSold INT);",DELETE FROM VehicleSales WHERE ModelName = 'Model 3' AND Region = 'North America'; SELECT * FROM VehicleSales;,The query deletes all sales records for the vehicle model 'Model 3' in the North American market from the VehicleSales table. It then selects and displays the remaining sales records.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert new data for hybrid vehicles and then display the average fuel efficiency for each model.,"CREATE TABLE HybridVehicles (HV_ID INT PRIMARY KEY, ModelName VARCHAR(50), FuelEfficiency DECIMAL, ElectricRange DECIMAL);","INSERT INTO HybridVehicles (HV_ID, ModelName, FuelEfficiency, ElectricRange) VALUES (201, 'Prius', 50.0, 25.0), (202, 'Volt', 45.0, 30.0); SELECT ModelName, AVG(FuelEfficiency) AS AvgFuelEfficiency FROM HybridVehicles GROUP BY ModelName;",The query inserts new data for hybrid vehicles into the HybridVehicles table. It then calculates and displays the average fuel efficiency for each model by averaging the FuelEfficiency column and grouping by ModelName.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the range per charge for electric vehicles and display the models with a range greater than 300 miles.,"CREATE TABLE ElectricVehicles (EV_ID INT PRIMARY KEY, ModelName VARCHAR(50), BatteryCapacity DECIMAL, RangePerCharge DECIMAL);","UPDATE ElectricVehicles SET RangePerCharge = 320.0 WHERE ModelName = 'Model X'; SELECT ModelName, RangePerCharge FROM ElectricVehicles WHERE RangePerCharge > 300;",The query updates the RangePerCharge for the electric vehicle model 'Model X' to 320.0 in the ElectricVehicles table. It then selects and displays the models with a range per charge greater than 300 miles.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new record of a movie's revenue and update the total revenue for the production company.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseYear INT, ProductionCompanyID INT, Revenue DECIMAL); CREATE TABLE ProductionCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), TotalRevenue DECIMAL); INSERT INTO ProductionCompanies (CompanyID, CompanyName, TotalRevenue) VALUES (1, 'Universal Pictures', 5000000000), (2, 'Warner Bros.', 4500000000);","INSERT INTO Movies (MovieID, Title, ReleaseYear, ProductionCompanyID, Revenue) VALUES (1, 'Inception', 2010, 2, 830000000); UPDATE ProductionCompanies SET TotalRevenue = TotalRevenue + 830000000 WHERE CompanyID = 2;","The query first inserts a new movie record into the Movies table. Then, it updates the TotalRevenue field in the ProductionCompanies table by adding the revenue of the newly inserted movie to the total revenue of the corresponding production company."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Delete a user's media consumption record and update the total watch time for the user.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50), TotalWatchTime INT); CREATE TABLE MediaConsumption (ConsumptionID INT PRIMARY KEY, UserID INT, MediaID INT, WatchTime INT); INSERT INTO Users (UserID, UserName, TotalWatchTime) VALUES (1, 'Alice', 120), (2, 'Bob', 200); INSERT INTO MediaConsumption (ConsumptionID, UserID, MediaID, WatchTime) VALUES (1, 1, 101, 60), (2, 2, 102, 100);",DELETE FROM MediaConsumption WHERE ConsumptionID = 1; UPDATE Users SET TotalWatchTime = TotalWatchTime - 60 WHERE UserID = 1;,"The query first deletes a specific media consumption record from the MediaConsumption table. Then, it updates the TotalWatchTime field in the Users table by subtracting the watch time of the deleted record from the total watch time of the corresponding user."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the engagement metrics for a specific piece of content and reflect the changes in the overall engagement statistics.,"CREATE TABLE Content (ContentID INT PRIMARY KEY, Title VARCHAR(100), EngagementScore DECIMAL); CREATE TABLE EngagementMetrics (MetricID INT PRIMARY KEY, ContentID INT, Likes INT, Shares INT, Comments INT); INSERT INTO Content (ContentID, Title, EngagementScore) VALUES (1, 'Breaking Bad', 85.5), (2, 'Game of Thrones', 90.0); INSERT INTO EngagementMetrics (MetricID, ContentID, Likes, Shares, Comments) VALUES (1, 1, 1000, 500, 300), (2, 2, 1500, 700, 400);","UPDATE EngagementMetrics SET Likes = Likes + 100, Shares = Shares + 50, Comments = Comments + 20 WHERE MetricID = 1; UPDATE Content SET EngagementScore = (SELECT (Likes + Shares + Comments) / 3.0 FROM EngagementMetrics WHERE MetricID = 1) WHERE ContentID = 1;","The query first updates the engagement metrics (likes, shares, comments) for a specific piece of content in the EngagementMetrics table. Then, it updates the EngagementScore in the Content table by recalculating it based on the updated metrics."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new artist's record and update the total number of artists for the record label.,"CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(100), RecordLabelID INT); CREATE TABLE RecordLabels (LabelID INT PRIMARY KEY, LabelName VARCHAR(100), TotalArtists INT); INSERT INTO RecordLabels (LabelID, LabelName, TotalArtists) VALUES (1, 'Sony Music', 50), (2, 'Universal Music', 60);","INSERT INTO Artists (ArtistID, ArtistName, RecordLabelID) VALUES (1, 'Adele', 1); UPDATE RecordLabels SET TotalArtists = TotalArtists + 1 WHERE LabelID = 1;","The query first inserts a new artist record into the Artists table. Then, it updates the TotalArtists field in the RecordLabels table by incrementing the total number of artists for the corresponding record label."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Delete a specific episode's view count and update the total views for the series.,"CREATE TABLE Series (SeriesID INT PRIMARY KEY, SeriesName VARCHAR(100), TotalViews INT); CREATE TABLE Episodes (EpisodeID INT PRIMARY KEY, SeriesID INT, EpisodeTitle VARCHAR(100), ViewCount INT); INSERT INTO Series (SeriesID, SeriesName, TotalViews) VALUES (1, 'Stranger Things', 1000000), (2, 'The Witcher', 800000); INSERT INTO Episodes (EpisodeID, SeriesID, EpisodeTitle, ViewCount) VALUES (1, 1, 'Chapter One', 500000), (2, 2, 'The End\'s Beginning', 400000);",DELETE FROM Episodes WHERE EpisodeID = 1; UPDATE Series SET TotalViews = TotalViews - 500000 WHERE SeriesID = 1;,"The query first deletes a specific episode's view count from the Episodes table. Then, it updates the TotalViews field in the Series table by subtracting the view count of the deleted episode from the total views of the corresponding series."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the average age of patients who have been prescribed a specific drug and have reported side effects.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PrescriptionID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (PrescriptionID) REFERENCES Prescriptions(PrescriptionID));",SELECT AVG(P.Age) AS AvgAge FROM Patients P JOIN Prescriptions PR ON P.PatientID = PR.PatientID JOIN SideEffects SE ON PR.PrescriptionID = SE.PrescriptionID WHERE PR.DrugName = 'DrugX';,"The query calculates the average age of patients who have been prescribed 'DrugX' and have reported side effects. It joins the Patients, Prescriptions, and SideEffects tables to filter the relevant data."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,List the top 3 drugs with the highest number of reported side effects.,"CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(100)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugID INT, FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PrescriptionID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (PrescriptionID) REFERENCES Prescriptions(PrescriptionID));","SELECT D.DrugName, COUNT(SE.SideEffectID) AS SideEffectCount FROM Drugs D JOIN Prescriptions PR ON D.DrugID = PR.DrugID JOIN SideEffects SE ON PR.PrescriptionID = SE.PrescriptionID GROUP BY D.DrugName ORDER BY SideEffectCount DESC LIMIT 3;","The query lists the top 3 drugs with the highest number of reported side effects. It joins the Drugs, Prescriptions, and SideEffects tables and uses COUNT to aggregate the number of side effects per drug, ordering the results in descending order and limiting to the top 3."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Retrieve the total number of patients treated in each department and having successful outcomes.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, Department VARCHAR(100), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT Department, COUNT(PatientID) AS TotalPatients FROM Treatments WHERE Outcome = 'Successful' GROUP BY Department;",The query retrieves the total number of patients treated in each department who have had successful outcomes. It groups the data by department and counts the number of patients with a successful outcome.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the maximum and minimum duration of treatments for patients over 60 years old.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, Duration INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT MAX(T.Duration) AS MaxDuration, MIN(T.Duration) AS MinDuration FROM Patients P JOIN Treatments T ON P.PatientID = T.PatientID WHERE P.Age > 60;",The query finds the maximum and minimum duration of treatments for patients over 60 years old. It joins the Patients and Treatments tables and uses the MAX and MIN functions to get the required durations.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Get the average number of side effects reported per drug.,"CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(100)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugID INT, FOREIGN KEY (DrugID) REFERENCES Drugs(DrugID)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, PrescriptionID INT, SideEffectDescription VARCHAR(255), FOREIGN KEY (PrescriptionID) REFERENCES Prescriptions(PrescriptionID));","SELECT D.DrugName, AVG(SECount.SideEffectCount) AS AvgSideEffects FROM Drugs D JOIN (SELECT PR.DrugID, COUNT(SE.SideEffectID) AS SideEffectCount FROM Prescriptions PR JOIN SideEffects SE ON PR.PrescriptionID = SE.PrescriptionID GROUP BY PR.DrugID) SECount ON D.DrugID = SECount.DrugID GROUP BY D.DrugName;",The query calculates the average number of side effects reported per drug. It first counts the side effects per drug in a subquery and then calculates the average number of side effects for each drug in the main query.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total sales and average price of electric vehicles by region, and then display regions with total sales greater than 1000 units.","CREATE TABLE ElectricVehicleSales (Region VARCHAR(50), ModelID INT, UnitsSold INT, Price DECIMAL); INSERT INTO ElectricVehicleSales (Region, ModelID, UnitsSold, Price) VALUES ('North America', 1, 500, 35000), ('Europe', 2, 800, 32000), ('Asia', 3, 1200, 30000), ('North America', 4, 700, 33000), ('Europe', 5, 900, 31000);","CREATE TABLE RegionSales (Region VARCHAR(50), TotalSales INT, AvgPrice DECIMAL); INSERT INTO RegionSales (Region, TotalSales, AvgPrice) SELECT Region, SUM(UnitsSold) AS TotalSales, AVG(Price) AS AvgPrice FROM ElectricVehicleSales GROUP BY Region HAVING SUM(UnitsSold) > 1000;","The query creates a new table to store the total sales and average price of electric vehicles by region. It then inserts data into this table by aggregating the total units sold and average price for each region, filtering out regions with total sales less than or equal to 1000 units."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the maximum and minimum prices of hybrid vehicles by model, and then display models with a maximum price greater than $40,000.","CREATE TABLE HybridVehiclePrices (ModelID INT, ModelName VARCHAR(50), Price DECIMAL); INSERT INTO HybridVehiclePrices (ModelID, ModelName, Price) VALUES (1, 'Model X', 45000), (2, 'Model Y', 38000), (3, 'Model Z', 42000), (4, 'Model A', 39000), (5, 'Model B', 41000);","CREATE TABLE ModelPriceRange (ModelID INT, ModelName VARCHAR(50), MaxPrice DECIMAL, MinPrice DECIMAL); INSERT INTO ModelPriceRange (ModelID, ModelName, MaxPrice, MinPrice) SELECT ModelID, ModelName, MAX(Price) AS MaxPrice, MIN(Price) AS MinPrice FROM HybridVehiclePrices GROUP BY ModelID, ModelName HAVING MAX(Price) > 40000;","The query creates a new table to store the maximum and minimum prices of hybrid vehicles by model. It then inserts data into this table by aggregating the maximum and minimum prices for each model, filtering out models with a maximum price less than or equal to $40,000."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average CO2 emissions for different vehicle types by manufacturer, and then display manufacturers with average CO2 emissions less than 100 g/km.","CREATE TABLE VehicleEmissions (Manufacturer VARCHAR(50), VehicleType VARCHAR(50), CO2Emissions DECIMAL); INSERT INTO VehicleEmissions (Manufacturer, VehicleType, CO2Emissions) VALUES ('Toyota', 'Sedan', 95), ('Ford', 'SUV', 120), ('Tesla', 'Electric', 0), ('BMW', 'Sedan', 105), ('Nissan', 'SUV', 110);","CREATE TABLE ManufacturerEmissions (Manufacturer VARCHAR(50), AvgCO2Emissions DECIMAL); INSERT INTO ManufacturerEmissions (Manufacturer, AvgCO2Emissions) SELECT Manufacturer, AVG(CO2Emissions) AS AvgCO2Emissions FROM VehicleEmissions GROUP BY Manufacturer HAVING AVG(CO2Emissions) < 100;","The query creates a new table to store the average CO2 emissions for different vehicle types by manufacturer. It then inserts data into this table by aggregating the average CO2 emissions for each manufacturer, filtering out manufacturers with average CO2 emissions greater than or equal to 100 g/km."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue and average revenue per unit for different vehicle models, and then display models with total revenue greater than $10 million.","CREATE TABLE VehicleSales (ModelID INT, ModelName VARCHAR(50), UnitsSold INT, Revenue DECIMAL); INSERT INTO VehicleSales (ModelID, ModelName, UnitsSold, Revenue) VALUES (1, 'Model S', 200, 15000000), (2, 'Model 3', 300, 12000000), (3, 'Model X', 100, 8000000), (4, 'Model Y', 250, 10000000), (5, 'Model Z', 150, 9000000);","CREATE TABLE ModelRevenue (ModelID INT, ModelName VARCHAR(50), TotalRevenue DECIMAL, AvgRevenuePerUnit DECIMAL); INSERT INTO ModelRevenue (ModelID, ModelName, TotalRevenue, AvgRevenuePerUnit) SELECT ModelID, ModelName, SUM(Revenue) AS TotalRevenue, AVG(Revenue/UnitsSold) AS AvgRevenuePerUnit FROM VehicleSales GROUP BY ModelID, ModelName HAVING SUM(Revenue) > 10000000;","The query creates a new table to store the total revenue and average revenue per unit for different vehicle models. It then inserts data into this table by aggregating the total revenue and average revenue per unit for each model, filtering out models with total revenue less than or equal to $10 million."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of units sold and the average selling price for different vehicle models by year, and then display models with an average selling price greater than $30,000.","CREATE TABLE AnnualVehicleSales (Year INT, ModelID INT, ModelName VARCHAR(50), UnitsSold INT, SellingPrice DECIMAL); INSERT INTO AnnualVehicleSales (Year, ModelID, ModelName, UnitsSold, SellingPrice) VALUES (2020, 1, 'Model S', 500, 35000), (2020, 2, 'Model 3', 600, 32000), (2021, 1, 'Model S', 700, 34000), (2021, 2, 'Model 3', 800, 31000), (2021, 3, 'Model X', 300, 45000);","CREATE TABLE ModelYearlySales (Year INT, ModelID INT, ModelName VARCHAR(50), TotalUnitsSold INT, AvgSellingPrice DECIMAL); INSERT INTO ModelYearlySales (Year, ModelID, ModelName, TotalUnitsSold, AvgSellingPrice) SELECT Year, ModelID, ModelName, SUM(UnitsSold) AS TotalUnitsSold, AVG(SellingPrice) AS AvgSellingPrice FROM AnnualVehicleSales GROUP BY Year, ModelID, ModelName HAVING AVG(SellingPrice) > 30000;","The query creates a new table to store the number of units sold and the average selling price for different vehicle models by year. It then inserts data into this table by aggregating the total units sold and average selling price for each model by year, filtering out models with an average selling price less than or equal to $30,000."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert a new public policy record and then retrieve the top 3 most recent policies by their enactment date.,"CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), EnactmentDate DATE, Description TEXT); CREATE TABLE LegislativeProcess (ProcessID INT PRIMARY KEY, PolicyID INT, Stage VARCHAR(50), Date DATE, FOREIGN KEY (PolicyID) REFERENCES PublicPolicy(PolicyID));","INSERT INTO PublicPolicy (PolicyID, PolicyName, EnactmentDate, Description) VALUES (101, 'New Healthcare Policy', '2023-10-01', 'A policy to improve healthcare services.'); WITH RecentPolicies AS (SELECT PolicyName, EnactmentDate, ROW_NUMBER() OVER (ORDER BY EnactmentDate DESC) AS RowNum FROM PublicPolicy) SELECT PolicyName, EnactmentDate FROM RecentPolicies WHERE RowNum <= 3;","The query first inserts a new record into the PublicPolicy table. Then, it uses a common table expression (CTE) to rank policies by their enactment date in descending order. Finally, it selects the top 3 most recent policies using the ROW_NUMBER function."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the description of a specific legislative process and then list all processes for a given policy ordered by date.,"CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), EnactmentDate DATE, Description TEXT); CREATE TABLE LegislativeProcess (ProcessID INT PRIMARY KEY, PolicyID INT, Stage VARCHAR(50), Date DATE, Description TEXT, FOREIGN KEY (PolicyID) REFERENCES PublicPolicy(PolicyID));","UPDATE LegislativeProcess SET Description = 'Updated description for the legislative process.' WHERE ProcessID = 202; SELECT Stage, Date, Description FROM LegislativeProcess WHERE PolicyID = 101 ORDER BY Date;","The query first updates the description of a specific legislative process identified by ProcessID. Then, it retrieves all legislative processes associated with a given policy, ordered by the date of the process."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete a citizen demographic record and then count the remaining records by age group.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10), Income DECIMAL);","DELETE FROM CitizenDemographics WHERE CitizenID = 303; SELECT Age, COUNT(*) AS Count FROM CitizenDemographics GROUP BY Age;","The query first deletes a specific citizen demographic record identified by CitizenID. Then, it counts the remaining records grouped by age."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert a new government spending record and then calculate the total spending by category.,"CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, Category VARCHAR(50), Amount DECIMAL, Date DATE);","INSERT INTO GovernmentSpending (SpendingID, Category, Amount, Date) VALUES (404, 'Education', 500000, '2023-10-01'); SELECT Category, SUM(Amount) AS TotalSpending FROM GovernmentSpending GROUP BY Category;","The query first inserts a new government spending record into the GovernmentSpending table. Then, it calculates the total spending grouped by category using the SUM function."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the governance effectiveness score for a region and then list all regions with their scores in descending order.,"CREATE TABLE GovernanceEffectiveness (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), EffectivenessScore DECIMAL);","UPDATE GovernanceEffectiveness SET EffectivenessScore = 85.5 WHERE RegionID = 505; SELECT RegionName, EffectivenessScore FROM GovernanceEffectiveness ORDER BY EffectivenessScore DESC;","The query first updates the governance effectiveness score for a specific region identified by RegionID. Then, it retrieves all regions with their effectiveness scores, ordered in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Record the total ticket sales for each sports event and then display the top 3 events with the highest sales.,"CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, EventID INT, SaleAmount DECIMAL, SaleDate DATE, FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN TRANSACTION; WITH TotalSales AS (SELECT E.EventName, SUM(TS.SaleAmount) AS TotalSale FROM Events E INNER JOIN TicketSales TS ON E.EventID = TS.EventID GROUP BY E.EventName) SELECT EventName, TotalSale FROM TotalSales ORDER BY TotalSale DESC LIMIT 3; COMMIT;",The query begins a transaction and calculates the total ticket sales for each event by joining the Events and TicketSales tables. It then selects the top 3 events with the highest sales and commits the transaction.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average points scored by each player in basketball games and display the top 5 players.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(100)); CREATE TABLE Games (GameID INT PRIMARY KEY, GameDate DATE); CREATE TABLE PlayerStats (StatID INT PRIMARY KEY, PlayerID INT, GameID INT, PointsScored INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (GameID) REFERENCES Games(GameID));","BEGIN TRANSACTION; WITH AvgPoints AS (SELECT P.PlayerName, AVG(PS.PointsScored) AS AvgPoints FROM Players P INNER JOIN PlayerStats PS ON P.PlayerID = PS.PlayerID GROUP BY P.PlayerName) SELECT PlayerName, AvgPoints FROM AvgPoints ORDER BY AvgPoints DESC LIMIT 5; COMMIT;",The query begins a transaction and calculates the average points scored by each player by joining the Players and PlayerStats tables. It then selects the top 5 players with the highest average points and commits the transaction.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total revenue generated by each sports team from merchandise sales and display the top 3 teams.,"CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(100)); CREATE TABLE MerchandiseSales (SaleID INT PRIMARY KEY, TeamID INT, SaleAmount DECIMAL, SaleDate DATE, FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","BEGIN TRANSACTION; WITH TotalRevenue AS (SELECT T.TeamName, SUM(MS.SaleAmount) AS TotalRevenue FROM Teams T INNER JOIN MerchandiseSales MS ON T.TeamID = MS.TeamID GROUP BY T.TeamName) SELECT TeamName, TotalRevenue FROM TotalRevenue ORDER BY TotalRevenue DESC LIMIT 3; COMMIT;",The query begins a transaction and calculates the total revenue generated by each team from merchandise sales by joining the Teams and MerchandiseSales tables. It then selects the top 3 teams with the highest revenue and commits the transaction.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Determine the average attendance for each sports event and display the top 5 events with the highest attendance.,"CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, EventID INT, Attendees INT, FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN TRANSACTION; WITH AvgAttendance AS (SELECT E.EventName, AVG(A.Attendees) AS AvgAttendees FROM Events E INNER JOIN Attendance A ON E.EventID = A.EventID GROUP BY E.EventName) SELECT EventName, AvgAttendees FROM AvgAttendance ORDER BY AvgAttendees DESC LIMIT 5; COMMIT;",The query begins a transaction and calculates the average attendance for each event by joining the Events and Attendance tables. It then selects the top 5 events with the highest average attendance and commits the transaction.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total sponsorship revenue for each sports league and display the top 3 leagues.,"CREATE TABLE Leagues (LeagueID INT PRIMARY KEY, LeagueName VARCHAR(100)); CREATE TABLE Sponsorships (SponsorshipID INT PRIMARY KEY, LeagueID INT, Revenue DECIMAL, SponsorshipDate DATE, FOREIGN KEY (LeagueID) REFERENCES Leagues(LeagueID));","BEGIN TRANSACTION; WITH TotalSponsorship AS (SELECT L.LeagueName, SUM(S.Revenue) AS TotalRevenue FROM Leagues L INNER JOIN Sponsorships S ON L.LeagueID = S.LeagueID GROUP BY L.LeagueName) SELECT LeagueName, TotalRevenue FROM TotalSponsorship ORDER BY TotalRevenue DESC LIMIT 3; COMMIT;",The query begins a transaction and calculates the total sponsorship revenue for each league by joining the Leagues and Sponsorships tables. It then selects the top 3 leagues with the highest revenue and commits the transaction.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average carbon emissions per country, categorized by industry sector, and include the total emissions for each country.","CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50)); CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(50)); CREATE TABLE Emissions (EmissionID INT PRIMARY KEY, CountryID INT, SectorID INT, EmissionValue DECIMAL, EmissionYear INT, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID), FOREIGN KEY (SectorID) REFERENCES Sectors(SectorID));","SELECT c.CountryName, s.SectorName, AVG(e.EmissionValue) AS AvgEmission, SUM(e.EmissionValue) AS TotalEmission FROM Emissions e INNER JOIN Countries c ON e.CountryID = c.CountryID INNER JOIN Sectors s ON e.SectorID = s.SectorID GROUP BY c.CountryName, s.SectorName;","The query joins the Emissions table with the Countries and Sectors tables using INNER JOINs. It then groups the results by country and sector, calculating the average and total emissions for each group."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",List the top 10 countries with the highest deforestation rates over the past decade.,"CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50)); CREATE TABLE Deforestation (DeforestationID INT PRIMARY KEY, CountryID INT, DeforestationRate DECIMAL, Year INT, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));","SELECT c.CountryName, SUM(d.DeforestationRate) AS TotalDeforestation FROM Deforestation d INNER JOIN Countries c ON d.CountryID = c.CountryID WHERE d.Year BETWEEN YEAR(CURDATE())-10 AND YEAR(CURDATE()) GROUP BY c.CountryName ORDER BY TotalDeforestation DESC LIMIT 10;","The query joins the Deforestation table with the Countries table using an INNER JOIN. It filters the data for the past decade, groups the results by country, and calculates the total deforestation rate for each country. Finally, it orders the results in descending order and limits the output to the top 10 countries."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard showing the average temperature changes per decade for each continent.,"CREATE TABLE Continents (ContinentID INT PRIMARY KEY, ContinentName VARCHAR(50)); CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), ContinentID INT, FOREIGN KEY (ContinentID) REFERENCES Continents(ContinentID)); CREATE TABLE TemperatureChanges (TempChangeID INT PRIMARY KEY, CountryID INT, TemperatureChange DECIMAL, Year INT, FOREIGN KEY (CountryID) REFERENCES Countries(CountryID));","SELECT co.ContinentName, FLOOR(tc.Year/10)*10 AS Decade, AVG(tc.TemperatureChange) AS AvgTempChange FROM TemperatureChanges tc INNER JOIN Countries c ON tc.CountryID = c.CountryID INNER JOIN Continents co ON c.ContinentID = co.ContinentID GROUP BY co.ContinentName, FLOOR(tc.Year/10);","The query joins the TemperatureChanges table with the Countries and Continents tables using INNER JOINs. It groups the results by continent and decade, calculating the average temperature change for each group."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 renewable energy projects by capacity in each region.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE Projects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), Capacity DECIMAL, RegionID INT, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH RankedProjects AS (SELECT p.ProjectName, p.Capacity, r.RegionName, ROW_NUMBER() OVER (PARTITION BY r.RegionName ORDER BY p.Capacity DESC) AS Rank FROM Projects p INNER JOIN Regions r ON p.RegionID = r.RegionID) SELECT ProjectName, Capacity, RegionName FROM RankedProjects WHERE Rank <= 5;",The query uses a common table expression (CTE) to rank renewable energy projects by capacity within each region using the ROW_NUMBER() function. It then selects the top 5 projects for each region.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a summary report of the biodiversity index for different ecosystems, including the average index and the number of species recorded.","CREATE TABLE Ecosystems (EcosystemID INT PRIMARY KEY, EcosystemName VARCHAR(50)); CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), EcosystemID INT, BiodiversityIndex DECIMAL, FOREIGN KEY (EcosystemID) REFERENCES Ecosystems(EcosystemID));","SELECT e.EcosystemName, AVG(s.BiodiversityIndex) AS AvgBiodiversityIndex, COUNT(s.SpeciesID) AS SpeciesCount FROM Species s INNER JOIN Ecosystems e ON s.EcosystemID = e.EcosystemID GROUP BY e.EcosystemName;","The query joins the Species table with the Ecosystems table using an INNER JOIN. It groups the results by ecosystem, calculating the average biodiversity index and the number of species recorded for each ecosystem."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 most innovative companies based on their R&D expenditure in the last year.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Industry VARCHAR(50)); CREATE TABLE RnDExpenditure (ExpenditureID INT PRIMARY KEY, CompanyID INT, Year INT, Expenditure DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); INSERT INTO Companies (CompanyID, CompanyName, Industry) VALUES (1, 'Tech Innovators Inc.', 'Technology'), (2, 'Future Solutions Ltd.', 'Technology'), (3, 'Green Energy Corp.', 'Energy'), (4, 'HealthTech Partners', 'Healthcare'), (5, 'AutoDrive Inc.', 'Automotive'); INSERT INTO RnDExpenditure (ExpenditureID, CompanyID, Year, Expenditure) VALUES (1, 1, 2022, 5000000), (2, 2, 2022, 4500000), (3, 3, 2022, 3000000), (4, 4, 2022, 3500000), (5, 5, 2022, 4000000);","WITH RankedCompanies AS (SELECT c.CompanyName, r.Expenditure, DENSE_RANK() OVER (ORDER BY r.Expenditure DESC) AS Rank FROM Companies c JOIN RnDExpenditure r ON c.CompanyID = r.CompanyID WHERE r.Year = 2022) SELECT CompanyName, Expenditure FROM RankedCompanies WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank companies based on their R&D expenditure in descending order for the year 2022. It then selects the top 5 companies using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",List the top 5 regions with the highest adoption rates of electric vehicles in the past year.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE EVAdoption (AdoptionID INT PRIMARY KEY, RegionID INT, Year INT, AdoptionRate DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'), (4, 'South America'), (5, 'Africa'); INSERT INTO EVAdoption (AdoptionID, RegionID, Year, AdoptionRate) VALUES (1, 1, 2022, 25.5), (2, 2, 2022, 30.0), (3, 3, 2022, 20.0), (4, 4, 2022, 15.0), (5, 5, 2022, 10.0);","WITH RankedRegions AS (SELECT r.RegionName, e.AdoptionRate, DENSE_RANK() OVER (ORDER BY e.AdoptionRate DESC) AS Rank FROM Regions r JOIN EVAdoption e ON r.RegionID = e.RegionID WHERE e.Year = 2022) SELECT RegionName, AdoptionRate FROM RankedRegions WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank regions based on their electric vehicle adoption rates in descending order for the year 2022. It then selects the top 5 regions using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 industries with the highest number of patents filed in the last year.,"CREATE TABLE Industries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, IndustryID INT, Year INT, NumberOfPatents INT, FOREIGN KEY (IndustryID) REFERENCES Industries(IndustryID)); INSERT INTO Industries (IndustryID, IndustryName) VALUES (1, 'Technology'), (2, 'Healthcare'), (3, 'Energy'), (4, 'Automotive'), (5, 'Finance'); INSERT INTO Patents (PatentID, IndustryID, Year, NumberOfPatents) VALUES (1, 1, 2022, 150), (2, 2, 2022, 120), (3, 3, 2022, 100), (4, 4, 2022, 80), (5, 5, 2022, 60);","WITH RankedIndustries AS (SELECT i.IndustryName, p.NumberOfPatents, DENSE_RANK() OVER (ORDER BY p.NumberOfPatents DESC) AS Rank FROM Industries i JOIN Patents p ON i.IndustryID = p.IndustryID WHERE p.Year = 2022) SELECT IndustryName, NumberOfPatents FROM RankedIndustries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank industries based on the number of patents filed in descending order for the year 2022. It then selects the top 5 industries using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Show the top 5 companies with the highest market share in the renewable energy sector.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50)); CREATE TABLE MarketShare (ShareID INT PRIMARY KEY, CompanyID INT, Year INT, MarketShare DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); INSERT INTO Companies (CompanyID, CompanyName, Sector) VALUES (1, 'Green Energy Corp.', 'Renewable Energy'), (2, 'Solar Solutions Ltd.', 'Renewable Energy'), (3, 'Wind Power Inc.', 'Renewable Energy'), (4, 'EcoWave Technologies', 'Renewable Energy'), (5, 'BioFuel Innovations', 'Renewable Energy'); INSERT INTO MarketShare (ShareID, CompanyID, Year, MarketShare) VALUES (1, 1, 2022, 20.5), (2, 2, 2022, 18.0), (3, 3, 2022, 15.0), (4, 4, 2022, 12.5), (5, 5, 2022, 10.0);","WITH RankedCompanies AS (SELECT c.CompanyName, m.MarketShare, DENSE_RANK() OVER (ORDER BY m.MarketShare DESC) AS Rank FROM Companies c JOIN MarketShare m ON c.CompanyID = m.CompanyID WHERE c.Sector = 'Renewable Energy' AND m.Year = 2022) SELECT CompanyName, MarketShare FROM RankedCompanies WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank companies in the renewable energy sector based on their market share in descending order for the year 2022. It then selects the top 5 companies using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 most popular programming languages based on the number of job postings in the last year.,"CREATE TABLE ProgrammingLanguages (LanguageID INT PRIMARY KEY, LanguageName VARCHAR(50)); CREATE TABLE JobPostings (PostingID INT PRIMARY KEY, LanguageID INT, Year INT, NumberOfPostings INT, FOREIGN KEY (LanguageID) REFERENCES ProgrammingLanguages(LanguageID)); INSERT INTO ProgrammingLanguages (LanguageID, LanguageName) VALUES (1, 'Python'), (2, 'JavaScript'), (3, 'Java'), (4, 'C#'), (5, 'Ruby'); INSERT INTO JobPostings (PostingID, LanguageID, Year, NumberOfPostings) VALUES (1, 1, 2022, 5000), (2, 2, 2022, 4500), (3, 3, 2022, 4000), (4, 4, 2022, 3500), (5, 5, 2022, 3000);","WITH RankedLanguages AS (SELECT l.LanguageName, j.NumberOfPostings, DENSE_RANK() OVER (ORDER BY j.NumberOfPostings DESC) AS Rank FROM ProgrammingLanguages l JOIN JobPostings j ON l.LanguageID = j.LanguageID WHERE j.Year = 2022) SELECT LanguageName, NumberOfPostings FROM RankedLanguages WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank programming languages based on the number of job postings in descending order for the year 2022. It then selects the top 5 languages using the DENSE_RANK function.
