domain,domain_description,user_proficiency,sql_complexity,sql_task,sql_prompt,sql_context,sql,sql_explanation
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report comparing the efficacy of different drugs in treating diabetes, including any side effects reported across various age groups.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(20), Gender VARCHAR(10), DemographicInfo TEXT);CREATE TABLE MedicalHistory (PatientID INT, Condition VARCHAR(50), DiagnosisDate DATE, CONSTRAINT FK_PatientID FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50), TreatmentStartDate DATE, TreatmentEndDate DATE, EfficacyScore DECIMAL, SideEffectReported VARCHAR(50), CONSTRAINT FK_PatientID_Treatments FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));CREATE TABLE Drugs (DrugName VARCHAR(50) PRIMARY KEY, Manufacturer VARCHAR(50), DrugType VARCHAR(50));CREATE TABLE DrugSideEffects (DrugName VARCHAR(50), SideEffect VARCHAR(50), SeverityLevel INT, CONSTRAINT FK_DrugName FOREIGN KEY (DrugName) REFERENCES Drugs(DrugName));","WITH EfficacyData AS (SELECT p.AgeGroup, t.DrugName, AVG(t.EfficacyScore) AS AvgEfficacy FROM Patients p JOIN Treatments t ON p.PatientID = t.PatientID GROUP BY p.AgeGroup, t.DrugName), SideEffectsData AS (SELECT t.AgeGroup, t.DrugName, COUNT(t.SideEffectReported) AS SideEffectCount FROM (SELECT p.AgeGroup, t.DrugName, t.SideEffectReported FROM Patients p JOIN Treatments t ON p.PatientID = t.PatientID WHERE t.SideEffectReported IS NOT NULL) AS t GROUP BY t.AgeGroup, t.DrugName) SELECT e.AgeGroup, e.DrugName, e.AvgEfficacy, s.SideEffectCount FROM EfficacyData e LEFT JOIN SideEffectsData s ON e.AgeGroup = s.AgeGroup AND e.DrugName = s.DrugName;","The query first creates a common table expression (CTE) named 'EfficacyData' that calculates the average efficacy score for each drug grouped by age group. Another CTE called 'SideEffectsData' is created to count the reported side effects for each drug by age group. Finally, it selects age group, drug name, average efficacy, and side effect count by performing a LEFT JOIN between the 'EfficacyData' and 'SideEffectsData' CTEs to generate a comprehensive report."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Update the salary information for athletes based on their performance metrics, and then find athletes who are not included in the top 10 highest-paid athletes in the latest year.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, Name VARCHAR(50), Nationality VARCHAR(50)); CREATE TABLE Performance (AthleteID INT, Year INT, Wins INT, Losses INT, PRIMARY KEY (AthleteID, Year)); CREATE TABLE Salaries (AthleteID INT, Year INT, Salary DECIMAL, PRIMARY KEY (AthleteID, Year));","WITH UpdatedSalaries AS (UPDATE Salaries SET Salary = Salary * 1.1 WHERE AthleteID IN (SELECT AthleteID FROM Performance WHERE Wins > 20) RETURNING AthleteID, Year, Salary), TopPaid AS (SELECT AthleteID, Salary FROM Salaries WHERE Year = (SELECT MAX(Year) FROM Salaries) ORDER BY Salary DESC LIMIT 10) SELECT AthleteID, Salary FROM UpdatedSalaries EXCEPT SELECT AthleteID, Salary FROM TopPaid;","The query first updates the salaries of athletes who have more than 20 wins by increasing their salary by 10%. Then, it creates a CTE to find the top 10 highest-paid athletes in the latest year. Finally, it selects athletes from the updated salary list who are not in the top 10 highest-paid athletes, using the EXCEPT set operation."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new sustainable fashion practice for a specific brand into the database.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE SustainablePractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(100), Description VARCHAR(255)); CREATE TABLE BrandPractices (BrandPracticeID INT PRIMARY KEY, BrandID INT, PracticeID INT, FOREIGN KEY (BrandID) REFERENCES Brands(BrandID), FOREIGN KEY (PracticeID) REFERENCES SustainablePractices(PracticeID)); INSERT INTO Brands (BrandID, BrandName, Country) VALUES (1, 'EcoWear', 'USA'), (2, 'GreenStyle', 'UK'); INSERT INTO SustainablePractices (PracticeID, PracticeName, Description) VALUES (1, 'Recycling Materials', 'Using recycled materials for clothing production'), (2, 'Eco-friendly Packaging', 'Utilizing biodegradable packaging materials');","INSERT INTO BrandPractices (BrandPracticeID, BrandID, PracticeID) VALUES (1, 1, 1), (2, 2, 2);",The query inserts new records into the BrandPractices table to indicate that 'EcoWear' is practicing 'Recycling Materials' and 'GreenStyle' is utilizing 'Eco-friendly Packaging.' The BrandPractices table links brands to their sustainable practices using foreign keys that reference the Brands and SustainablePractices tables.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a transaction to track the success rates of various treatment protocols across different patient demographics, rolling back the transaction if any demographic has a success rate below 50%.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), DemographicCategory VARCHAR(50)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(255), Protocol VARCHAR(255)); CREATE TABLE Outcomes (OutcomeID INT PRIMARY KEY, TreatmentID INT, PatientID INT, SuccessRate DECIMAL, FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE VIEW DemographicSuccessRates AS SELECT DemographicCategory, TreatmentName, AVG(SuccessRate) AS AvgSuccessRate FROM Patients P JOIN Outcomes O ON P.PatientID = O.PatientID JOIN Treatments T ON O.TreatmentID = T.TreatmentID GROUP BY DemographicCategory, TreatmentName;","BEGIN TRANSACTION; WITH PivottedSuccessRates AS (SELECT DemographicCategory, TreatmentName, AvgSuccessRate FROM DemographicSuccessRates PIVOT (AVG(AvgSuccessRate) FOR TreatmentName IN ('TreatmentA', 'TreatmentB', 'TreatmentC')) AS P) SELECT * FROM PivottedSuccessRates; IF EXISTS (SELECT 1 FROM DemographicSuccessRates WHERE AvgSuccessRate < 50) ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query begins a transaction to ensure atomicity. It first calculates the average success rates of treatments pivoted across demographic categories. Then, it checks if any demographic category has a success rate below 50%. If such a case exists, it rolls back the transaction, otherwise, it commits the transaction. This ensures that only reliable and effective treatments are considered successful."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 3 most-watched TV shows in each genre based on total viewing hours in the last month.,"CREATE TABLE MediaConsumption (UserID INT, ShowID INT, Genre VARCHAR(50), ViewingHours DECIMAL, WatchDate DATE); CREATE TABLE TVShows (ShowID INT PRIMARY KEY, ShowName VARCHAR(100), Genre VARCHAR(50));","WITH GenreRankings AS (SELECT TVShows.ShowName, TVShows.Genre, SUM(MediaConsumption.ViewingHours) AS TotalViewingHours, ROW_NUMBER() OVER (PARTITION BY TVShows.Genre ORDER BY SUM(MediaConsumption.ViewingHours) DESC) AS Rank FROM MediaConsumption INNER JOIN TVShows ON MediaConsumption.ShowID = TVShows.ShowID WHERE MediaConsumption.WatchDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY TVShows.ShowName, TVShows.Genre) SELECT ShowName, Genre, TotalViewingHours FROM GenreRankings WHERE Rank <= 3;","The query first joins MediaConsumption and TVShows to combine viewing data with show details. It then calculates the total viewing hours for each show in the last month and uses ROW_NUMBER to rank shows within each genre based on total viewing hours. Finally, it selects the top 3 shows in each genre by filtering on the rank."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 legislative bills by total spending in the education sector over the past fiscal year.,"CREATE TABLE Bills (BillID INT PRIMARY KEY, BillName VARCHAR(255), Sector VARCHAR(50), FiscalYear INT); CREATE TABLE Spending (SpendingID INT PRIMARY KEY, BillID INT, Amount DECIMAL(15, 2), SpendingDate DATE, FOREIGN KEY (BillID) REFERENCES Bills(BillID));","WITH TotalSpending AS (SELECT B.BillName, SUM(S.Amount) AS TotalAmount FROM Bills B JOIN Spending S ON B.BillID = S.BillID WHERE B.Sector = 'Education' AND S.SpendingDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY B.BillName) SELECT BillName, TotalAmount FROM TotalSpending ORDER BY TotalAmount DESC LIMIT 5;","The query first creates a common table expression (CTE) called TotalSpending that joins the Bills and Spending tables, filters for records in the education sector from the past year, and calculates the total spending per bill. It then selects and orders the top 5 bills by total spending in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a comprehensive report on the average booking rates and customer satisfaction scores across different hotel chains in major cities, with a comparison by season and customer demographics.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), ChainName VARCHAR(100), City VARCHAR(100));CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, BookingDate DATE, Season VARCHAR(50), BookingRate DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10), Country VARCHAR(100));CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, CustomerID INT, ReviewDate DATE, SatisfactionScore INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID), FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));CREATE TABLE Demographics (CustomerID INT PRIMARY KEY, IncomeLevel VARCHAR(50), FamilySize INT, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","SELECT H.ChainName, H.City, B.Season, AVG(B.BookingRate) AS AvgBookingRate, AVG(R.SatisfactionScore) AS AvgSatisfactionScore, D.IncomeLevel, D.FamilySize FROM Hotels H INNER JOIN Bookings B ON H.HotelID = B.HotelID INNER JOIN Reviews R ON H.HotelID = R.HotelID AND B.CustomerID = R.CustomerID INNER JOIN Customers C ON C.CustomerID = B.CustomerID INNER JOIN Demographics D ON C.CustomerID = D.CustomerID GROUP BY H.ChainName, H.City, B.Season, D.IncomeLevel, D.FamilySize;","The query performs several INNER JOIN operations to combine data from the Hotels, Bookings, Reviews, Customers, and Demographics tables. It groups the data by hotel chain, city, season, income level, and family size. Then it calculates the average booking rates and customer satisfaction scores for each group."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the number of bookings for different hotel properties across various locations, and then display the top 3 locations with the highest booking rates.","CREATE TABLE HotelBookings (PropertyID INT PRIMARY KEY, PropertyName VARCHAR(50), Location VARCHAR(50), BookingCount INT); INSERT INTO HotelBookings (PropertyID, PropertyName, Location, BookingCount) VALUES (1, 'Grand Royal', 'New York', 1500), (2, 'Seaside Resort', 'Miami', 1200), (3, 'Mountain Inn', 'Aspen', 800), (4, 'Urban Retreat', 'Chicago', 950), (5, 'Downtown Hotel', 'Los Angeles', 1100);","WITH RankedLocations AS (SELECT Location, SUM(BookingCount) AS TotalBookings, DENSE_RANK() OVER (ORDER BY SUM(BookingCount) DESC) AS Rank FROM HotelBookings GROUP BY Location) SELECT Location, TotalBookings FROM RankedLocations WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank locations based on the total number of bookings in descending order. It then selects the top 3 locations with the highest booking rates using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average scoring statistics for basketball players from different teams across various seasons, and then display the top 3 highest-scoring players for each season.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Seasons (SeasonID INT PRIMARY KEY, SeasonYear INT); CREATE TABLE PlayerStats (PlayerID INT, SeasonID INT, TeamID INT, AvgPoints DECIMAL, PRIMARY KEY (PlayerID, SeasonID, TeamID), FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (SeasonID) REFERENCES Seasons(SeasonID), FOREIGN KEY (TeamID) REFERENCES Teams(TeamID));","CREATE TABLE AvgScoringStats AS SELECT PlayerID, SeasonID, AVG(AvgPoints) AS AvgPoints FROM PlayerStats GROUP BY PlayerID, SeasonID; WITH RankedPlayers AS (SELECT PlayerID, SeasonID, AvgPoints, DENSE_RANK() OVER (PARTITION BY SeasonID ORDER BY AvgPoints DESC) AS Rank FROM AvgScoringStats) SELECT PlayerID, SeasonID, AvgPoints FROM RankedPlayers WHERE Rank <= 3;","The query first creates a table 'AvgScoringStats' that stores the average points scored by players per season using a GROUP BY clause. Then, it uses a common table expression (CTE) 'RankedPlayers' to rank players based on their average points per season using the DENSE_RANK() function partitioned by season. Finally, it selects the top 3 highest-scoring players for each season."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 10 most viewed movies in the last year and their average monthly views.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseYear INT, Genre VARCHAR(50)); CREATE TABLE MovieViews (ViewID INT PRIMARY KEY, MovieID INT, ViewDate DATE, Views INT, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID));","WITH MonthlyViews AS (SELECT MovieID, EXTRACT(YEAR FROM ViewDate) AS Year, EXTRACT(MONTH FROM ViewDate) AS Month, SUM(Views) AS MonthlyTotalViews FROM MovieViews WHERE ViewDate >= DATEADD(YEAR, -1, CURRENT_DATE) GROUP BY MovieID, EXTRACT(YEAR FROM ViewDate), EXTRACT(MONTH FROM ViewDate)), AverageMonthlyViews AS (SELECT MovieID, AVG(MonthlyTotalViews) AS AvgMonthlyViews FROM MonthlyViews GROUP BY MovieID), RankedMovies AS (SELECT m.Title, a.AvgMonthlyViews, ROW_NUMBER() OVER (ORDER BY a.AvgMonthlyViews DESC) AS Rank FROM AverageMonthlyViews a JOIN Movies m ON a.MovieID = m.MovieID) SELECT Title, AvgMonthlyViews FROM RankedMovies WHERE Rank <= 10;","The query first creates a common table expression (CTE) named MonthlyViews to calculate the total views for each movie per month in the last year. The second CTE, AverageMonthlyViews, calculates the average monthly views for each movie. Finally, the RankedMovies CTE ranks these movies by their average monthly views in descending order using the ROW_NUMBER function and selects the top 10."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,common table expressions,data retrieval: basic data fetching queries,Find the top 5 regions with the highest average sales of electric vehicles (EVs) over the past year.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, UnitsSold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), FuelType VARCHAR(20)); INSERT INTO VehicleModels (ModelID, ModelName, FuelType) VALUES (1, 'Model X', 'Electric'), (2, 'Volt', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Civic', 'Gasoline'), (5, 'Accord', 'Gasoline');","WITH EVSales AS (SELECT Region, UnitsSold FROM VehicleSales VS JOIN VehicleModels VM ON VS.ModelName = VM.ModelName WHERE VM.FuelType = 'Electric' AND SaleDate >= DATEADD(YEAR, -1, GETDATE())), RegionSales AS (SELECT Region, SUM(UnitsSold) AS TotalSales FROM EVSales GROUP BY Region), RankedRegions AS (SELECT Region, TotalSales, DENSE_RANK() OVER (ORDER BY TotalSales DESC) AS Rank FROM RegionSales) SELECT Region, TotalSales FROM RankedRegions WHERE Rank <= 5;","The query first creates a common table expression (CTE), EVSales, to filter sales of electric vehicles from the past year. It then aggregates these sales by region in the RegionSales CTE. Finally, it ranks these regions by total sales using the DENSE_RANK function and selects the top 5 regions by sales."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Update the sales records to reflect a 5% increase in sales for electric vehicles in the 'Europe' region, and then display the updated sales records along with the total sales for the 'Europe' region.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, Region VARCHAR(50), SaleAmount DECIMAL, SaleDate DATE); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, ModelID, Region, SaleAmount, SaleDate) VALUES (1, 101, 'North America', 1000, '2023-01-01'), (2, 102, 'Europe', 2000, '2023-01-02'), (3, 103, 'Asia', 1500, '2023-01-03'), (4, 104, 'Europe', 1800, '2023-01-04'), (5, 101, 'Europe', 2200, '2023-01-05'); INSERT INTO VehicleModels (ModelID, ModelName, Type) VALUES (101, 'Model X', 'Electric'), (102, 'Model Y', 'Electric'), (103, 'Model Z', 'Hybrid'), (104, 'Model A', 'Electric');","WITH UpdatedSales AS (UPDATE VehicleSales SET SaleAmount = SaleAmount * 1.05 WHERE ModelID IN (SELECT ModelID FROM VehicleModels WHERE Type = 'Electric') AND Region = 'Europe' RETURNING *) SELECT SaleID, ModelID, Region, SaleAmount, SaleDate FROM UpdatedSales; WITH TotalSales AS (SELECT SUM(SaleAmount) AS TotalSale FROM VehicleSales WHERE Region = 'Europe') SELECT * FROM UpdatedSales, TotalSales;","The query first updates the sales records by increasing the SaleAmount by 5% for electric vehicles sold in the 'Europe' region. It uses a common table expression (CTE) named UpdatedSales to perform the update and return the updated rows. Then, it selects and displays the updated sales records. Another CTE named TotalSales calculates the total sales amount for the 'Europe' region. Finally, it combines the results from UpdatedSales and TotalSales to display the updated records along with the total sales for the 'Europe' region."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Update the total goals scored by each player in the 'PlayerStats' table for the current season, based on the 'MatchStats' table.","CREATE TABLE PlayerStats (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TotalGoals INT); CREATE TABLE MatchStats (MatchID INT PRIMARY KEY, PlayerID INT, GoalsScored INT);",UPDATE PlayerStats SET TotalGoals = (SELECT SUM(GoalsScored) FROM MatchStats WHERE MatchStats.PlayerID = PlayerStats.PlayerID);,"The query is updating the 'TotalGoals' column in the 'PlayerStats' table, setting it to the sum of 'GoalsScored' from the 'MatchStats' table for each player. This is done using a subquery which selects and sums up the goals scored by each player in the 'MatchStats' table."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 10 countries with the highest CO2 emissions in the last 5 years.,"CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, Emission DECIMAL); INSERT INTO CO2Emissions (Country, Year, Emission) VALUES ('China', 2020, 10.065), ('USA', 2020, 5.416), ('India', 2020, 2.654), ('Russia', 2020, 1.711), ('Japan', 2020, 1.162), ('Germany', 2020, 0.776), ('Iran', 2020, 0.720), ('Saudi Arabia', 2020, 0.618), ('South Korea', 2020, 0.610), ('Canada', 2020, 0.565);","WITH EmissionRank AS (SELECT Country, SUM(Emission) as TotalEmission, DENSE_RANK() OVER (ORDER BY SUM(Emission) DESC) AS Rank FROM CO2Emissions WHERE Year > (SELECT MAX(Year) FROM CO2Emissions) - 5 GROUP BY Country) SELECT Country, TotalEmission FROM EmissionRank WHERE Rank <= 10;","The SQL query first creates a common table expression (CTE) named EmissionRank, which calculates the total CO2 emissions of each country over the last 5 years and ranks them in descending order. It then selects the top 10 countries with the highest total emissions using the DENSE_RANK function."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the total amount of funding received by each technology sector in 2020.,"CREATE TABLE TechFunding (SectorID INT PRIMARY KEY, SectorName VARCHAR(50), FundingYear INT, FundingAmount DECIMAL); INSERT INTO TechFunding (SectorID, SectorName, FundingYear, FundingAmount) VALUES (1, 'AI', 2020, 50000.0), (2, 'Cybersecurity', 2020, 30000.0), (3, 'Fintech', 2020, 60000.0), (4, 'Healthtech', 2020, 45000.0), (5, 'Edtech', 2020, 35000.0);","SELECT SectorName, SUM(FundingAmount) as TotalFunding FROM TechFunding WHERE FundingYear = 2020 GROUP BY SectorName;","The SQL query is selecting the 'SectorName' and the sum of the 'FundingAmount' for each sector from the 'TechFunding' table. The results are filtered for the year 2020 using the WHERE clause, and the results are grouped by 'SectorName' using the GROUP BY clause. In essence, this is calculating the total amount of funding received by each technology sector in 2020."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Insert data about new tree plantation initiatives in different countries, and then show all initiatives in Australia and Canada but not those unique to the United States.","CREATE TABLE TreePlantation (PlantationID INT PRIMARY KEY, Country VARCHAR(50), InitiativeName VARCHAR(100), NumberOfTrees INT); INSERT INTO TreePlantation (PlantationID, Country, InitiativeName, NumberOfTrees) VALUES (1, 'Australia', 'Greening Australia', 1000000), (2, 'Australia', 'One Tree Planted', 500000), (3, 'Canada', 'Tree Canada', 1500000), (4, 'Canada', 'One Tree Planted', 800000), (5, 'United States', 'One Tree Planted', 2000000);","WITH AustraliaCanada AS (SELECT * FROM TreePlantation WHERE Country IN ('Australia', 'Canada')), US AS (SELECT * FROM TreePlantation WHERE Country = 'United States') SELECT * FROM AustraliaCanada EXCEPT SELECT * FROM US;","The query first creates two views: one with tree plantation initiatives in Australia and Canada, and another with initiatives in the United States. It then subtracts the initiatives in the U.S. from those in Australia and Canada, effectively showing all initiatives in Australia and Canada that are not also present in the United States."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Insert records for new patients into the Patients table, and update their treatment protocols in the Treatments table. Then calculate the average recovery rate for patients who have the updated treatment protocols and their recovery rate is above 70%.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), MedicalHistory TEXT); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentProtocol VARCHAR(50), RecoveryRate DECIMAL, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); INSERT INTO Patients (PatientID, Name, Age, Gender, MedicalHistory) VALUES (10, 'John Doe', 45, 'Male', 'Diabetes'), (11, 'Jane Doe', 37, 'Female', 'Hypertension'); UPDATE Treatments SET TreatmentProtocol = 'New Protocol' WHERE PatientID IN (10, 11);","INSERT INTO Treatments (TreatmentID, PatientID, TreatmentProtocol, RecoveryRate) VALUES (100, 10, 'New Protocol', 75.0), (101, 11, 'New Protocol', 80.0); SELECT AVG(RecoveryRate) AS AvgRecoveryRate FROM Treatments WHERE TreatmentProtocol = 'New Protocol' AND RecoveryRate > 70;",The SQL query first inserts records for new patients into the Patients table and updates their treatment protocols in the Treatments table. Then it calculates the average recovery rate for patients who have the updated treatment protocols and a recovery rate above 70%. The AVG function is used to calculate the average recovery rate.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a report that shows the total investment in each technology sector in the last fiscal year, ordered by the most invested sectors.","CREATE TABLE TechSectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(50)); INSERT INTO TechSectors (SectorID, SectorName) VALUES (1, 'AI'), (2, 'Blockchain'), (3, 'Cybersecurity'), (4, 'Data Science'), (5, 'IoT'); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, SectorID INT, FiscalYear VARCHAR(4), InvestmentAmount DECIMAL); INSERT INTO Investments (InvestmentID, SectorID, FiscalYear, InvestmentAmount) VALUES (1, 1, '2020', 1000.0), (2, 2, '2020', 800.0), (3, 3, '2020', 1500.0), (4, 4, '2020', 1200.0), (5, 5, '2020', 900.0);","SELECT ts.SectorName, SUM(i.InvestmentAmount) AS TotalInvestment FROM TechSectors ts INNER JOIN Investments i ON ts.SectorID = i.SectorID WHERE i.FiscalYear = '2020' GROUP BY ts.SectorName ORDER BY TotalInvestment DESC;","The query first joins the 'TechSectors' and 'Investments' tables on the 'SectorID' column. It then filters for investments made during the 2020 fiscal year. The query then groups by the sector name to calculate the total investment in each sector. Finally, it orders the results in descending order of total investment."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Find the average CO2 emissions for each country, and list the top 5 countries with the highest average emissions.","CREATE TABLE Emissions (Country VARCHAR(50), Year INT, CO2 DECIMAL); INSERT INTO Emissions (Country, Year, CO2) VALUES ('USA', 2019, 5000.0), ('China', 2019, 6000.0), ('India', 2019, 3000.0), ('Germany', 2019, 2000.0), ('Brazil', 2019, 1000.0);","WITH AverageEmissions AS (SELECT Country, AVG(CO2) AS AvgEmissions FROM Emissions GROUP BY Country) SELECT Country, AvgEmissions FROM AverageEmissions ORDER BY AvgEmissions DESC LIMIT 5;","The SQL query first creates a view that groups the emissions data by country and calculates the average CO2 emissions for each country. It then selects the country and average emissions from this view, orders the results in descending order of average emissions, and limits the output to the top 5 countries."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the revenue for the movie 'Avengers: Endgame' in the MovieRevenue table, then display the top 5 grossing movies in North America and their corresponding box office revenue and audience ratings, sorted by revenue.","CREATE TABLE MovieRevenue (MovieID INT PRIMARY KEY, MovieName VARCHAR(100), Region VARCHAR(50), BoxOfficeRevenue DECIMAL); INSERT INTO MovieRevenue (MovieID, MovieName, Region, BoxOfficeRevenue) VALUES (1, 'Avengers: Endgame', 'North America', 858.37), (2, 'Avatar', 'North America', 760.51), (3, 'Titanic', 'North America', 659.33), (4, 'Star Wars: The Force Awakens', 'North America', 936.66), (5, 'Avengers: Infinity War', 'North America', 678.82); CREATE TABLE AudienceRatings (MovieID INT PRIMARY KEY, MovieName VARCHAR(100), Rating DECIMAL); INSERT INTO AudienceRatings (MovieID, MovieName, Rating) VALUES (1, 'Avengers: Endgame', 8.4), (2, 'Avatar', 7.8), (3, 'Titanic', 7.8), (4, 'Star Wars: The Force Awakens', 7.9), (5, 'Avengers: Infinity War', 8.4);","UPDATE MovieRevenue SET BoxOfficeRevenue = 850 WHERE MovieName = 'Avengers: Endgame'; WITH RankedMovies AS (SELECT MovieRevenue.MovieName, MovieRevenue.BoxOfficeRevenue, AudienceRatings.Rating, DENSE_RANK() OVER (ORDER BY MovieRevenue.BoxOfficeRevenue DESC) AS Rank FROM MovieRevenue INNER JOIN AudienceRatings ON MovieRevenue.MovieID = AudienceRatings.MovieID WHERE MovieRevenue.Region = 'North America') SELECT MovieName, BoxOfficeRevenue, Rating FROM RankedMovies WHERE Rank <= 5;","The query first updates the box office revenue for the movie 'Avengers: Endgame' in the MovieRevenue table. It then creates a common table expression (CTE) to rank movies based on their box office revenue in descending order, while also selecting the corresponding audience ratings from a joined table. It finally selects the top 5 grossing movies in North America and their corresponding box office revenue and audience ratings."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total government spending on healthcare and education per district where the average per capita income is above the national average. Compare the spending in these districts with the average state spending on the same. Also, rollback any transaction if there is an error in fetching data.","CREATE TABLE DistrictData (DistrictID INT PRIMARY KEY, DistrictName VARCHAR(50), State VARCHAR(50), PerCapitaIncome DECIMAL); INSERT INTO DistrictData (DistrictID, DistrictName, State, PerCapitaIncome) VALUES (1, 'District A', 'State 1', 56000), (2, 'District B', 'State 2', 70000), (3, 'District C', 'State 1', 80000), (4, 'District D', 'State 2', 60000), (5, 'District E', 'State 3', 90000); CREATE TABLE Spending (SpendingID INT PRIMARY KEY, DistrictID INT, Category VARCHAR(50), Amount DECIMAL); INSERT INTO Spending (SpendingID, DistrictID, Category, Amount) VALUES (1, 1, 'Healthcare', 5000000), (2, 1, 'Education', 7000000), (3, 2, 'Healthcare', 3000000), (4, 2, 'Education', 4000000), (5, 3, 'Healthcare', 6000000), (6, 3, 'Education', 8000000); CREATE TABLE NationalAverage (AverageIncome DECIMAL); INSERT INTO NationalAverage (AverageIncome) VALUES (65000); CREATE TABLE StateAverage (State VARCHAR(50), AverageSpending DECIMAL); INSERT INTO StateAverage (State, AverageSpending) VALUES ('State 1', 5500000), ('State 2', 3500000), ('State 3', 7500000);","BEGIN TRANSACTION; SELECT DD.DistrictName, DD.State, SUM(S.Amount) AS TotalSpending, SA.AverageSpending FROM DistrictData DD JOIN Spending S ON DD.DistrictID = S.DistrictID JOIN NationalAverage NA ON DD.PerCapitaIncome > NA.AverageIncome JOIN StateAverage SA ON DD.State = SA.State WHERE S.Category IN ('Healthcare', 'Education') GROUP BY DD.DistrictName, DD.State, SA.AverageSpending; IF @@ERROR != 0 BEGIN ROLLBACK TRANSACTION; END ELSE BEGIN COMMIT TRANSACTION; END;","The query begins a transaction to fetch data. It joins the DistrictData, Spending, NationalAverage, and StateAverage tables. It then filters districts where the per capita income is higher than the national average and spending on healthcare and education. It aggregates the total spending per district and compares it with the average state spending. If there's an error in fetching data, the transaction is rolled back, else it is committed."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Show me the top 5 hotels preferred by customers from different regions based on their reviews.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Region VARCHAR(50)); CREATE TABLE HotelReviews (ReviewID INT PRIMARY KEY, CustomerID INT, HotelID INT, Rating DECIMAL, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50)); INSERT INTO Customers (CustomerID, Region) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'), (4, 'South America'), (5, 'Africa'); INSERT INTO Hotels (HotelID, HotelName) VALUES (1, 'Hotel Venice'), (2, 'Hotel Paris'), (3, 'Hotel Tokyo'), (4, 'Hotel Sydney'), (5, 'Hotel Cape Town'); INSERT INTO HotelReviews (ReviewID, CustomerID, HotelID, Rating) VALUES (1, 1, 1, 4.5), (2, 2, 2, 5.0), (3, 3, 3, 4.0), (4, 4, 4, 4.5), (5, 5, 5, 5.0);","WITH RankedHotels AS (SELECT H.HotelName, AVG(R.Rating) AS AvgRating, C.Region, DENSE_RANK() OVER (PARTITION BY C.Region ORDER BY AVG(R.Rating) DESC) AS Rank FROM HotelReviews R INNER JOIN Hotels H ON R.HotelID = H.HotelID INNER JOIN Customers C ON R.CustomerID = C.CustomerID GROUP BY H.HotelName, C.Region) SELECT HotelName, AvgRating, Region FROM RankedHotels WHERE Rank <= 5;","The SQL query starts by creating a common table expression (CTE) named 'RankedHotels'. Here, it groups the data based on hotel name and region, and calculates the average rating for each hotel. It then ranks these hotels within each region based on the average rating in descending order using the DENSE_RANK function. The outer query then selects the top 5 hotels from each region based on this ranking."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Get the average yield of wheat for each country in the year 2020.,"CREATE TABLE CountryYields (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Crop VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO CountryYields (CountryID, CountryName, Crop, Year, Yield) VALUES (1, 'USA', 'Wheat', 2020, 8.2), (2, 'India', 'Wheat', 2020, 3.4), (3, 'China', 'Wheat', 2020, 5.6), (4, 'Brazil', 'Wheat', 2020, 2.7), (5, 'Russia', 'Wheat', 2020, 7.1);","SELECT CountryName, AVG(Yield) as AverageYield FROM CountryYields WHERE Crop = 'Wheat' AND Year = 2020 GROUP BY CountryName;","The query first filters the CountryYields table to only include rows where the crop is 'Wheat' and the year is 2020. It then groups the remaining rows by CountryName. For each group, it calculates the average yield of wheat and returns a table with each country's name and their corresponding average wheat yield in 2020."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Create a CTE to show the average length of stay for each hotel in the last year and remove any hotels which have had less than 100 bookings.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50), Country VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, City, Country) VALUES (1, 'Hotel Paris', 'Paris', 'France'), (2, 'Hotel Berlin', 'Berlin', 'Germany'), (3, 'Hotel Rome', 'Rome', 'Italy'); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CheckInDate DATE, CheckOutDate DATE); INSERT INTO Bookings (BookingID, HotelID, CheckInDate, CheckOutDate) VALUES (1, 1, '2020-01-01', '2020-01-05'), (2, 1, '2020-01-06', '2020-01-10'), (3, 2, '2020-02-01', '2020-02-05'), (4, 2, '2020-02-06', '2020-02-10'), (5, 3, '2020-03-01', '2020-03-05');","WITH CTE AS (SELECT h.HotelName, AVG(DATEDIFF(day, b.CheckInDate, b.CheckOutDate)) AS AvgLengthOfStay, COUNT(b.BookingID) AS NumberOfBookings FROM Hotels h JOIN Bookings b ON h.HotelID = b.HotelID WHERE YEAR(b.CheckInDate) = 2020 GROUP BY h.HotelName) SELECT HotelName, AvgLengthOfStay FROM CTE WHERE NumberOfBookings >= 100;","The query first creates a common table expression (CTE) that calculates the average length of stay and the number of bookings for each hotel in the last year. Then, it selects the hotel name and average length of stay from the CTE, but only for hotels which have had 100 or more bookings."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the investment details of Machine Learning startups and then list the top 5 startups that received maximum funding in the year 2022.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(100), TechArea VARCHAR(100)); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, StartupID INT, InvestmentAmount DECIMAL, Year INT); INSERT INTO Startups (StartupID, StartupName, TechArea) VALUES (1, 'Startup A', 'Machine Learning'), (2, 'Startup B', 'AI'), (3, 'Startup C', 'Machine Learning'), (4, 'Startup D', 'Data Science'), (5, 'Startup E', 'Machine Learning'); INSERT INTO Investments (InvestmentID, StartupID, InvestmentAmount, Year) VALUES (1, 1, 5000000, 2022), (2, 2, 10000000, 2022), (3, 3, 2000000, 2022), (4, 4, 7500000, 2022), (5, 5, 3000000, 2022);","UPDATE Investments SET InvestmentAmount = InvestmentAmount * 1.1 WHERE Year = 2022 AND StartupID IN (SELECT StartupID FROM Startups WHERE TechArea = 'Machine Learning'); WITH RankedStartups AS (SELECT S.StartupName, I.InvestmentAmount, RANK() OVER (ORDER BY I.InvestmentAmount DESC) AS Rank FROM Investments I JOIN Startups S ON I.StartupID = S.StartupID WHERE I.Year = 2022) SELECT StartupName, InvestmentAmount FROM RankedStartups WHERE Rank <= 5;",The query first updates the investment amount by 10% for all Machine Learning startups in the year 2022. Then it creates a common table expression (CTE) to rank startups based on their updated investment amount in descending order. The query finally selects the top 5 startups with the maximum investment amount using the RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a database to store information about various crop yields and the farming practices used, and then generate a report that displays the top 5 crop yields for each region and the associated farming methods.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Corn', 'North America', 110.2), (2, 'Wheat', 'Europe', 90.5), (3, 'Rice', 'Asia', 120.0), (4, 'Soybean', 'South America', 95.6), (5, 'Barley', 'Australia', 85.0); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), CropID INT); INSERT INTO FarmingPractices (PracticeID, PracticeName, CropID) VALUES (1, 'Irrigation', 1), (2, 'Crop rotation', 2), (3, 'Organic farming', 3), (4, 'No-till farming', 4), (5, 'Intensive farming', 5);","WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank FROM CropYields) SELECT RC.CropName, RC.Yield, FP.PracticeName FROM RankedCrops RC LEFT JOIN FarmingPractices FP ON RC.CropID = FP.CropID WHERE Rank <= 5;","The query first creates a common table expression (CTE) to rank the crops based on their yields in each region in descending order using the DENSE_RANK function. Then it joins the CTE with the FarmingPractices table on the CropID. Finally, it selects the crop name, yield, and farming practice for the top 5 crops in each region based on yield."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Create a table that records the average spending of customers on different clothing items and then insert data into it. Finally, display the top 5 items most customers have spent on.","CREATE TABLE CustomerSpending (CustomerID INT PRIMARY KEY, ItemName VARCHAR(50), Region VARCHAR(50), AvgSpending DECIMAL); INSERT INTO CustomerSpending (CustomerID, ItemName, Region, AvgSpending) VALUES (1, 'Jacket', 'North America', 120.5), (2, 'Shoes', 'Europe', 118.0), (3, 'Jeans', 'Asia', 110.0), (4, 'T-Shirt', 'North America', 115.7), (5, 'Dress', 'Europe', 95.0);","WITH RankedItems AS (SELECT ItemName, AvgSpending, DENSE_RANK() OVER (ORDER BY AvgSpending DESC) AS Rank FROM CustomerSpending) SELECT ItemName, AvgSpending FROM RankedItems WHERE Rank <= 5;","The query first creates a table 'CustomerSpending' to store the average spending of customers on different clothing items across various regions. After inserting some records in the table, it creates a common table expression (CTE) to rank the clothing items based on the average spending in descending order. Finally, it selects the top 5 items on which most money was spent using the DENSE_RANK function."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average yield of wheat per acre in the United States for the years 2015-2020.,"CREATE TABLE CropYield (Year INT, Country VARCHAR(50), Crop VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (Year, Country, Crop, Yield) VALUES (2015, 'United States', 'Wheat', 44.6), (2016, 'United States', 'Wheat', 52.7), (2017, 'United States', 'Wheat', 46.3), (2018, 'United States', 'Wheat', 47.6), (2019, 'United States', 'Wheat', 51.6), (2020, 'United States', 'Wheat', 49.7);",SELECT AVG(Yield) FROM CropYield WHERE Crop = 'Wheat' AND Country = 'United States' AND Year BETWEEN 2015 AND 2020;,The SQL query selects the average yield of the crop 'Wheat' in the country 'United States' between the years 2015 and 2020 from the CropYield table.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Find the top 5 brands that sold the most sustainable fashion items in Europe in 2020.,"CREATE TABLE FashionSales (SaleID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), Year INT, ItemID INT, IsSustainable BOOLEAN); INSERT INTO FashionSales (SaleID, BrandName, Region, Year, ItemID, IsSustainable) VALUES (1, 'Brand A', 'Europe', 2020, 1001, TRUE), (2, 'Brand B', 'North America', 2020, 1002, FALSE), (3, 'Brand A', 'Asia', 2020, 1003, TRUE), (4, 'Brand C', 'Europe', 2020, 1004, TRUE), (5, 'Brand D', 'Europe', 2020, 1005, FALSE);","WITH SustainableSales AS (SELECT BrandName, COUNT(*) AS TotalSales FROM FashionSales WHERE Year = 2020 AND Region = 'Europe' AND IsSustainable = TRUE GROUP BY BrandName) SELECT BrandName, TotalSales FROM SustainableSales ORDER BY TotalSales DESC LIMIT 5;","The query first creates a common table expression (CTE) that groups the sales by brand, but only includes sales from 2020, in Europe, and of sustainable items. It then selects the brand names and their total sales from this CTE, orders them in descending order of total sales, and restricts the output to the top 5 brands."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total funding received by each technology sector over the past five years. Also, display the top 5 sectors based on the total funding received.","CREATE TABLE Fundings (FundingID INT PRIMARY KEY, Sector VARCHAR(50), Year INT, Funding DECIMAL); INSERT INTO Fundings (FundingID, Sector, Year, Funding) VALUES (1, 'AI & Analytics', 2020, 20000), (2, 'Blockchain', 2019, 15000), (3, 'Cloud Computing', 2018, 30000), (4, 'Cybersecurity', 2017, 10000), (5, 'EdTech', 2020, 12000);","WITH TotalFunding AS (SELECT Sector, SUM(Funding) AS TotalFunding FROM Fundings WHERE Year >= (SELECT MAX(Year) - 5 FROM Fundings) GROUP BY Sector), RankedSectors AS (SELECT Sector, TotalFunding, DENSE_RANK() OVER (ORDER BY TotalFunding DESC) AS Rank FROM TotalFunding) SELECT Sector, TotalFunding FROM RankedSectors WHERE Rank <= 5;","The query first calculates the total funding received by each technology sector over the past five years. It then ranks the sectors based on their total funding in descending order using the DENSE_RANK function. Finally, it selects the top 5 sectors with the highest total funding."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert data on new sustainable materials used in the fashion industry and find the most popular material based on its usage in the products.,"CREATE TABLE SustainableMaterials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(50), UsageCount INT); INSERT INTO SustainableMaterials (MaterialID, MaterialName, UsageCount) VALUES (1, 'Organic Cotton', 50), (2, 'Recycled Polyester', 45), (3, 'Lyocell', 30), (4, 'Hemp', 55), (5, 'Linen', 40);","WITH RankedMaterials AS (SELECT MaterialName, UsageCount, DENSE_RANK() OVER (ORDER BY UsageCount DESC) AS Rank FROM SustainableMaterials) SELECT MaterialName, UsageCount FROM RankedMaterials WHERE Rank = 1;",The SQL query creates a common table expression (CTE) to rank the materials based on their usage count in descending order. It then selects the most popular material using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Calculate the total yield of wheat crops for each region after adding a new entry of wheat yield for 'North America' region and then show the top 3 regions with the highest total yield.,"CREATE TABLE CropYield (EntryID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (EntryID, CropType, Region, Yield) VALUES (1, 'Wheat', 'North America', 120.5), (2, 'Wheat', 'Europe', 118.0), (3, 'Wheat', 'Asia', 110.0), (4, 'Wheat', 'South America', 115.7);","WITH UpdatedYield AS (INSERT INTO CropYield (EntryID, CropType, Region, Yield) VALUES (5, 'Wheat', 'North America', 130.0) RETURNING *), TotalYield AS (SELECT Region, SUM(Yield) as TotalYield FROM UpdatedYield WHERE CropType = 'Wheat' GROUP BY Region) SELECT Region, TotalYield FROM TotalYield ORDER BY TotalYield DESC LIMIT 3;","The query first inserts a new entry of wheat yield for the 'North America' region into the CropYield table, and returns the updated table. Then, using a common table expression (CTE), it calculates the total yield of wheat crops for each region. Finally, it retrieves the top 3 regions with the highest total yield by ordering the total yield in descending order and limiting the output to 3 records."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Identify the top 5 AI technologies that have received the most funding in the last quarter.,"CREATE TABLE AIFunding (TechnologyID INT PRIMARY KEY, TechnologyName VARCHAR(50), FundingAmount DECIMAL, FundingDate DATE); INSERT INTO AIFunding (TechnologyID, TechnologyName, FundingAmount, FundingDate) VALUES (1, 'Machine Learning', 5000000, '2021-12-20'), (2, 'Natural Language Processing', 3000000, '2021-12-22'), (3, 'Robotics', 7000000, '2021-12-15'), (4, 'Computer Vision', 6000000, '2021-12-18'), (5, 'Neural Networks', 9000000, '2021-12-10');","WITH RankedTechnologies AS (SELECT TechnologyName, FundingAmount, DENSE_RANK() OVER (ORDER BY FundingAmount DESC) AS Rank FROM AIFunding WHERE FundingDate BETWEEN '2021-10-01' AND '2021-12-31') SELECT TechnologyName, FundingAmount FROM RankedTechnologies WHERE Rank <= 5;","The query first creates a common table expression (CTE) that ranks AI technologies based on their funding amount in descending order, but only considering those that received funding in the last quarter of 2021. After that, it selects the top 5 most funded technologies using the DENSE_RANK() function."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,data retrieval: basic data fetching queries,Find the top 5 brands which produced the most sustainable products in the year 2020.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Products (ProductID INT PRIMARY KEY, BrandID INT, Year INT, IsSustainable BOOLEAN); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); INSERT INTO Products (ProductID, BrandID, Year, IsSustainable) VALUES (1, 1, 2020, TRUE), (2, 2, 2020, FALSE), (3, 3, 2020, TRUE), (4, 4, 2020, TRUE), (5, 5, 2020, FALSE), (6, 1, 2020, TRUE), (7, 2, 2020, TRUE), (8, 3, 2020, TRUE), (9, 4, 2020, FALSE), (10, 5, 2020, TRUE);","WITH SustainableBrands AS (SELECT BrandID, COUNT(*) AS SustainableProducts FROM Products WHERE Year = 2020 AND IsSustainable = TRUE GROUP BY BrandID) SELECT B.BrandName, SB.SustainableProducts FROM SustainableBrands SB JOIN Brands B ON SB.BrandID = B.BrandID ORDER BY SB.SustainableProducts DESC LIMIT 5;","The query first creates a common table expression (CTE) named SustainableBrands that counts the number of sustainable products each brand produced in the year 2020. It then joins this CTE with the Brands table to get the brand names and sorts the results by the number of sustainable products in descending order, finally limiting the output to the top 5 brands."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Identify the top 10 countries with the largest total area of protected lands in the past decade.,"CREATE TABLE ProtectedLands (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, LandArea DECIMAL); INSERT INTO ProtectedLands (CountryID, CountryName, Year, LandArea) VALUES (1, 'Brazil', 2011, 2100000), (2, 'United States', 2011, 1900000), (3, 'Russia', 2011, 1800000), (4, 'Australia', 2011, 1700000), (5, 'China', 2011, 1600000), (6, 'Brazil', 2021, 2300000), (7, 'United States', 2021, 2100000), (8, 'Russia', 2021, 2000000), (9, 'Australia', 2021, 1800000), (10, 'China', 2021, 1700000);","WITH TotalArea AS (SELECT CountryName, SUM(LandArea) AS TotalLandArea FROM ProtectedLands WHERE Year BETWEEN 2011 AND 2021 GROUP BY CountryName) SELECT CountryName, TotalLandArea FROM TotalArea ORDER BY TotalLandArea DESC LIMIT 10;",The SQL query first creates a common table expression (CTE) named TotalArea that sums up the total area of protected lands for each country in the past decade. It then selects the top 10 countries with the largest total area of protected lands and orders them in descending order.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average yield per acre for each crop in each region. Please consider only those transactions that were committed and ignore the ones that were rolled back.,"CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50)); INSERT INTO Crops (CropID, CropName) VALUES (1, 'Wheat'), (2, 'Corn'), (3, 'Soybeans'); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'); CREATE TABLE Transactions (TransID INT PRIMARY KEY, CropID INT, RegionID INT, Acreage DECIMAL, Yield DECIMAL, Status VARCHAR(50)); INSERT INTO Transactions (TransID, CropID, RegionID, Acreage, Yield, Status) VALUES (1, 1, 1, 100, 150, 'COMMITTED'), (2, 2, 2, 200, 300, 'COMMITTED'), (3, 3, 3, 150, 225,'ROLLED BACK'), (4, 1, 2, 50, 75, 'COMMITTED'), (5, 2, 3, 100, 150, 'COMMITTED');","BEGIN; SELECT C.CropName, R.RegionName, AVG(T.Yield / T.Acreage) AS AvgYieldPerAcre FROM Transactions AS T INNER JOIN Crops AS C ON T.CropID = C.CropID INNER JOIN Regions AS R ON T.RegionID = R.RegionID WHERE T.Status = 'COMMITTED' GROUP BY C.CropName, R.RegionName; COMMIT;","The query begins with a transaction control statement 'BEGIN' and ends with 'COMMIT' to ensure the atomicity of the transaction. The query then joins the 'Transactions', 'Crops', and 'Regions' tables using inner joins. It extracts the names of the crops and regions, and calculates the average yield per acre for each crop in each region. It only considers the transactions that are committed. The results are grouped by the names of crops and regions."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Create a table to track the number of active users on various social media platforms in the last 5 years and then retrieve the platforms with the highest user growth.,"CREATE TABLE SocialMediaGrowth (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50), Year INT, ActiveUsers INT); INSERT INTO SocialMediaGrowth (PlatformID, PlatformName, Year, ActiveUsers) VALUES (1, 'Facebook', 2017, 2000), (2, 'Facebook', 2018, 2300), (3, 'Facebook', 2019, 2600), (4, 'Twitter', 2017, 1000), (5, 'Twitter', 2018, 1500), (6, 'Twitter', 2019, 1700), (7, 'Instagram', 2017, 500), (8, 'Instagram', 2018, 700), (9, 'Instagram', 2019, 1500);","WITH Growth AS (SELECT PlatformName, (MAX(ActiveUsers) - MIN(ActiveUsers)) AS UserGrowth FROM SocialMediaGrowth GROUP BY PlatformName) SELECT PlatformName, UserGrowth FROM Growth ORDER BY UserGrowth DESC;",The SQL query creates a common table expression (CTE) called Growth that calculates the user growth for each platform by subtracting the number of active users in the first year from the number of active users in the last year. It then selects the platform names and their corresponding user growth from the CTE and orders the results in descending order to retrieve the platforms with the highest user growth.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Find out the total emissions caused by different sectors in various countries and arrange them in descending order.,"CREATE TABLE EmissionData (Country VARCHAR(50), Sector VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO EmissionData (Country, Sector, Year, Emissions) VALUES ('USA', 'Transportation', 2020, 6500.3), ('Germany', 'Energy', 2020, 5700.1), ('China', 'Industrial Processes', 2020, 12000.7), ('India', 'Agriculture', 2020, 2500.8), ('Brazil', 'Environment', 2020, 3200.4);","WITH TotalEmissions AS (SELECT Country, Sector, SUM(Emissions) as TotalEmissions FROM EmissionData GROUP BY Country, Sector) SELECT Country, Sector, TotalEmissions FROM TotalEmissions ORDER BY TotalEmissions DESC;","The SQL query first creates a common table expression (CTE) named TotalEmissions, which groups the emissions data by country and sector and calculates the total emissions for each group. It then selects the country, sector, and total emissions from the CTE, and orders the results in descending order by total emissions."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Implement a transaction that ranks the top 5 brands based on the number of sustainable products they offer, then rolls back the transaction.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); CREATE TABLE Products (ProductID INT PRIMARY KEY, BrandID INT, ProductName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO Products (ProductID, BrandID, ProductName, IsSustainable) VALUES (1, 1, 'Product 1', TRUE), (2, 2, 'Product 2', FALSE), (3, 3, 'Product 3', TRUE), (4, 4, 'Product 4', TRUE), (5, 5, 'Product 5', FALSE);","BEGIN TRANSACTION; WITH SustainableProducts AS (SELECT BrandID, COUNT(*) AS SustainableCount FROM Products WHERE IsSustainable = TRUE GROUP BY BrandID), RankedBrands AS (SELECT BrandID, SustainableCount, DENSE_RANK() OVER (ORDER BY SustainableCount DESC) AS Rank FROM SustainableProducts) SELECT B.BrandName, R.SustainableCount FROM RankedBrands R INNER JOIN Brands B ON R.BrandID = B.BrandID WHERE Rank <= 5; ROLLBACK;","The query starts a transaction and creates a CTE (SustainableProducts) to count the number of sustainable products each brand offers. Another CTE (RankedBrands) ranks these brand based on the count of sustainable products in descending order. The transaction then selects the top 5 ranked brands and their count of sustainable products. Finally, the transaction is rolled back, meaning the changes made during the transaction are not saved to the database."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,data retrieval: basic data fetching queries,Retrieve the top 5 most valuable companies in the AI sector from the last three years and compare their annual revenue growth.,"CREATE TABLE AI_Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Sector VARCHAR(50), Year INT, AnnualRevenue DECIMAL); INSERT INTO AI_Companies (CompanyID, CompanyName, Sector, Year, AnnualRevenue) VALUES (1, 'OpenAI', 'AI', 2020, 1.2), (2, 'DeepMind', 'AI', 2020, 0.9), (3, 'SenseTime', 'AI', 2020, 1.5), (4, 'UiPath', 'AI', 2020, 1.1), (5, 'Baidu AI', 'AI', 2020, 2.0), (6, 'OpenAI', 'AI', 2021, 1.4), (7, 'DeepMind', 'AI', 2021, 1.1), (8, 'SenseTime', 'AI', 2021, 1.8), (9, 'UiPath', 'AI', 2021, 1.3), (10, 'Baidu AI', 'AI', 2021, 2.3);","WITH RevenueGrowth AS (SELECT CompanyName, Year, AnnualRevenue, LAG(AnnualRevenue, 1) OVER (PARTITION BY CompanyName ORDER BY Year) AS PrevYearRevenue FROM AI_Companies WHERE Sector = 'AI' AND Year >= (SELECT MAX(Year) FROM AI_Companies) - 3) SELECT CompanyName, Year, AnnualRevenue, ((AnnualRevenue - PrevYearRevenue) / PrevYearRevenue) * 100 AS RevenueGrowthPercent FROM RevenueGrowth ORDER BY RevenueGrowthPercent DESC LIMIT 5;","The query first creates a Common Table Expression (CTE) named RevenueGrowth. Within this CTE, it calculates the previous year's revenue for each company using the LAG function, partitioned by the company name and ordered by the year. It then calculates the annual revenue growth percentage for each company. The final SELECT statement retrieves the top 5 companies with the highest annual revenue growth percentage."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Generate a report that shows the top 5 technologies which have seen the highest increase in adoption rates within the last 5 years in different industries.,"CREATE TABLE TechnologyAdoption (TechID INT PRIMARY KEY, TechName VARCHAR(50), Industry VARCHAR(50), Year INT, AdoptionRate DECIMAL); INSERT INTO TechnologyAdoption (TechID, TechName, Industry, Year, AdoptionRate) VALUES (1, 'Blockchain', 'Finance', 2016, 10.5), (2, 'AI', 'Healthcare', 2016, 8.0), (3, 'IoT', 'Manufacturing', 2016, 15.0), (4, 'Cloud Computing', 'IT Services', 2016, 20.7), (5, 'Big Data', 'E-Commerce', 2016, 12.0), (1, 'Blockchain', 'Finance', 2021, 60.5), (2, 'AI', 'Healthcare', 2021, 68.0), (3, 'IoT', 'Manufacturing', 2021, 75.0), (4, 'Cloud Computing', 'IT Services', 2021, 90.7), (5, 'Big Data', 'E-Commerce', 2021, 82.0);","WITH RankIncrease AS (SELECT TechName, Industry, (MAX(AdoptionRate) - MIN(AdoptionRate)) AS Increase FROM TechnologyAdoption WHERE Year BETWEEN 2016 AND 2021 GROUP BY TechName, Industry) SELECT TechName, Industry, Increase FROM RankIncrease ORDER BY Increase DESC LIMIT 5;",The query first calculates the increase in adoption rate for each technology within each industry over the given period (2016 and 2021) using a common table expression. It then orders these technologies by the calculated increase in descending order and selects the top 5.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the average fuel economy figures for all electric vehicle models in Europe after the implementation of a new efficiency testing standard.,"CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(20), Region VARCHAR(50), AvgFuelEconomy DECIMAL); INSERT INTO VehicleModels (ModelID, ModelName, VehicleType, Region, AvgFuelEconomy) VALUES (1, 'Model S', 'Electric', 'Europe', 80.0), (2, 'Model 3', 'Electric', 'Europe', 85.0), (3, 'Leaf', 'Electric', 'Europe', 78.0), (4, 'Zoe', 'Electric', 'Europe', 90.0), (5, 'i3', 'Electric', 'Europe', 95.0);","WITH NewEfficiency AS (SELECT ModelID, ModelName, VehicleType, Region, AvgFuelEconomy * 0.9 AS AdjustedEconomy FROM VehicleModels WHERE VehicleType = 'Electric' AND Region = 'Europe') UPDATE VehicleModels SET AvgFuelEconomy = NewEfficiency.AdjustedEconomy FROM NewEfficiency WHERE VehicleModels.ModelID = NewEfficiency.ModelID;","The SQL query first creates a common table expression (CTE) named 'NewEfficiency'. This CTE selects all electric vehicle models in Europe and calculates their new average fuel economy after a 10% decrease due to the new testing standard. The main update query then updates the 'AvgFuelEconomy' field in the 'VehicleModels' table with the adjusted economy figures from the 'NewEfficiency' CTE, for all matching model IDs."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Show me the top 5 most purchased clothing items in Europe for the year 2020.,"CREATE TABLE ClothingItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Category VARCHAR(50)); INSERT INTO ClothingItems (ItemID, ItemName, Category) VALUES (1, 'T-Shirt', 'Casual'), (2, 'Jeans', 'Casual'), (3, 'Dress', 'Formal'), (4, 'Jacket', 'Winter'), (5, 'Shorts', 'Summer'); CREATE TABLE PurchaseHistory (PurchaseID INT PRIMARY KEY, ItemID INT, Quantity INT, Region VARCHAR(50), PurchaseYear INT); INSERT INTO PurchaseHistory (PurchaseID, ItemID, Quantity, Region, PurchaseYear) VALUES (1, 1, 200, 'Europe', 2020), (2, 2, 150, 'Europe', 2020), (3, 3, 250, 'Europe', 2020), (4, 4, 300, 'Europe', 2020), (5, 5, 100, 'Europe', 2020);","SELECT TOP 5 ci.ItemName, SUM(ph.Quantity) AS TotalQuantity FROM ClothingItems ci INNER JOIN PurchaseHistory ph ON ci.ItemID = ph.ItemID WHERE ph.Region = 'Europe' AND ph.PurchaseYear = 2020 GROUP BY ci.ItemName ORDER BY TotalQuantity DESC;","The SQL query first joins the ClothingItems and PurchaseHistory tables based on the common column ItemID. Then, it filters the data for purchases made in the Europe region during the year 2020. It calculates the total quantity purchased for each clothing item during this period using the SUM function. Finally, it sorts the results in descending order of total quantity and selects the top 5 clothing items."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,"Find out the total sales of electric, hybrid, and conventional vehicles in North America, Europe, and Asia over the last five years, and present the data in a pivot table format.","CREATE TABLE VehicleSales (VehicleID INT PRIMARY KEY, VehicleType VARCHAR(50), Region VARCHAR(50), Year INT, Sales INT); INSERT INTO VehicleSales (VehicleID, VehicleType, Region, Year, Sales) VALUES (1, 'Electric', 'North America', 2016, 50000), (2, 'Hybrid', 'North America', 2016, 30000), (3, 'Conventional', 'North America', 2016, 200000), (4, 'Electric', 'Europe', 2016, 40000), (5, 'Hybrid', 'Europe', 2016, 25000), (6, 'Conventional', 'Europe', 2016, 150000), (7, 'Electric', 'Asia', 2016, 70000), (8, 'Hybrid', 'Asia', 2016, 45000), (9, 'Conventional', 'Asia', 2016, 300000);","WITH SalesSummary AS (SELECT Year, Region, VehicleType, SUM(Sales) AS TotalSales FROM VehicleSales GROUP BY Year, Region, VehicleType) SELECT * FROM SalesSummary PIVOT (SUM(TotalSales) FOR VehicleType IN ('Electric', 'Hybrid', 'Conventional')) ORDER BY Year, Region;","The query first creates a common table expression (CTE) named SalesSummary to summarize the total sales of each type of vehicle by year and region. Then it uses the PIVOT operator to transform the rows into columns for each type of vehicle ('Electric', 'Hybrid', 'Conventional'). The result is a pivot table that shows the total sales of each type of vehicle by year and region."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,data retrieval: basic data fetching queries,Retrieve the top 5 crops with the highest average yield per acre globally in the past year,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgYieldPerAcre DECIMAL, Year INT); INSERT INTO CropYields (CropID, CropName, Region, AvgYieldPerAcre, Year) VALUES (1, 'Wheat', 'North America', 48.5, 2021), (2, 'Rice', 'Asia', 75.0, 2021), (3, 'Corn', 'Europe', 90.2, 2021), (4, 'Soybean', 'South America', 50.3, 2021), (5, 'Barley', 'Australia', 47.8, 2021);","WITH RankedCrops AS (SELECT CropName, AvgYieldPerAcre, DENSE_RANK() OVER (ORDER BY AvgYieldPerAcre DESC) AS Rank FROM CropYields WHERE Year = 2021) SELECT CropName, AvgYieldPerAcre FROM RankedCrops WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank crops based on their average yield per acre in descending order for the year 2021. It then selects the top 5 crops with the highest yield per acre using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,common table expressions,data retrieval: basic data fetching queries,Find the top 3 hotel chains based on the average customer ratings per city for the previous year.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelChain VARCHAR(50), City VARCHAR(50), Rating DECIMAL); INSERT INTO Hotels (HotelID, HotelChain, City, Rating) VALUES (1, 'Marriott', 'New York', 4.3), (2, 'Hilton', 'Paris', 4.5), (3, 'Hyatt', 'Tokyo', 4.2), (4, 'Marriott', 'Paris', 4.6), (5, 'Hilton', 'New York', 4.1);","WITH HotelRatings AS (SELECT HotelChain, City, AVG(Rating) AS AvgRating FROM Hotels GROUP BY HotelChain, City) SELECT HotelChain, MAX(AvgRating) AS MaxRating FROM HotelRatings GROUP BY HotelChain ORDER BY MaxRating DESC LIMIT 3;","The query first groups hotels by chain and city to calculate the average customer rating for each combination. The result is stored in a common table expression (CTE) called HotelRatings. Then, it selects the hotel chain and its maximum average rating from HotelRatings. The results are ordered by the maximum average rating in descending order, and only the top 3 hotel chains are returned."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,data retrieval: basic data fetching queries,"Fetch the total investments made in the field of Artificial Intelligence for each company, along with the company's country, and display the top 10 companies with the highest investments.","CREATE TABLE AIInvestments (InvestmentID INT PRIMARY KEY, CompanyName VARCHAR(50), Country VARCHAR(50), InvestmentAmount DECIMAL); INSERT INTO AIInvestments (InvestmentID, CompanyName, Country, InvestmentAmount) VALUES (1, 'OpenAI', 'USA', 1000000.00), (2, 'DeepMind', 'UK', 2000000.00), (3, 'SenseTime', 'China', 1500000.00), (4, 'UiPath', 'USA', 1800000.00), (5, 'Megvii', 'China', 1200000.00);","WITH RankedCompanies AS (SELECT CompanyName, Country, SUM(InvestmentAmount) as TotalInvestment, DENSE_RANK() OVER (ORDER BY SUM(InvestmentAmount) DESC) AS Rank FROM AIInvestments GROUP BY CompanyName, Country) SELECT CompanyName, Country, TotalInvestment FROM RankedCompanies WHERE Rank <= 10;","The SQL query first groups the data by company name and country, and calculates the total investment for each company using the SUM function. It then ranks the companies based on their total investment in descending order using the DENSE_RANK function. Finally, it fetches the top 10 companies with the highest total investment."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,common table expressions,data retrieval: basic data fetching queries,Which are the top 5 movies with highest revenue in North America?,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), Revenue DECIMAL, Region VARCHAR(50)); INSERT INTO Movies (MovieID, MovieName, Revenue, Region) VALUES (1, 'Avatar', 2800.5, 'North America'), (2, 'Titanic', 2187.5, 'North America'), (3, 'Star Wars: The Force Awakens', 2068.2, 'North America'), (4, 'Avengers: Endgame', 2797.8, 'North America'), (5, 'The Lion King', 1656.9, 'North America');","WITH RankedMovies AS (SELECT MovieName, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM Movies) SELECT MovieName, Revenue FROM RankedMovies WHERE Rank <= 5;",The SQL query creates a common table expression (CTE) to rank movies based on their revenue in descending order. It then selects the top 5 movies with highest revenue using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Show me the top 5 AI companies based on their patented technology count, along with their revenue in 2020, and sort the result in descending order by patent count. Ignore the companies that don't have revenue data.","CREATE TABLE AICompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50)); CREATE TABLE TechnologyPatents (PatentID INT PRIMARY KEY, CompanyID INT, PatentTechnology VARCHAR(50)); CREATE TABLE CompanyRevenue (CompanyID INT, Year INT, Revenue DECIMAL); INSERT INTO AICompanies (CompanyID, CompanyName) VALUES (1, 'OpenAI'), (2, 'DeepMind'), (3, 'SenseTime'), (4, 'CloudMinds'), (5, 'Dataminr'); INSERT INTO TechnologyPatents (PatentID, CompanyID, PatentTechnology) VALUES (1, 1, 'NLP'), (2, 1, 'CV'), (3, 2, 'RL'), (4, 2, 'DL'), (5, 3, 'CV'), (6, 3, 'DL'), (7, 4, 'RL'), (8, 4, 'DL'), (9, 5, 'NLP'); INSERT INTO CompanyRevenue (CompanyID, Year, Revenue) VALUES (1, 2020, 200.0), (2, 2020, 150.0), (3, 2020, 220.0), (4, 2020, 180.0);","WITH PatentsCount AS (SELECT CompanyID, COUNT(PatentID) AS PatentCount FROM TechnologyPatents GROUP BY CompanyID) SELECT A.CompanyName, P.PatentCount, R.Revenue FROM AICompanies A INNER JOIN PatentsCount P ON A.CompanyID = P.CompanyID INNER JOIN CompanyRevenue R ON A.CompanyID = R.CompanyID WHERE R.Year = 2020 ORDER BY P.PatentCount DESC, R.Revenue DESC;","The query first creates a common table expression (CTE) to calculate the total number of patents for each company. It then joins the Companies, PatentsCount, and Revenue tables on the CompanyID. The query selects the company name, patent count, and revenue for the year 2020, and orders the result in descending order of patent count and revenue. The query excludes the companies that don't have revenue data for 2020 by using an INNER JOIN with the Revenue table."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find out the top 5 companies in the tech industry with the highest investment in Artificial Intelligence (AI) for the last year.,"CREATE TABLE TechCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Industry VARCHAR(50)); INSERT INTO TechCompanies (CompanyID, CompanyName, Industry) VALUES (1, 'Google', 'Tech'), (2, 'Microsoft', 'Tech'), (3, 'Amazon', 'Tech'), (4, 'Apple', 'Tech'), (5, 'Facebook', 'Tech'); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, CompanyID INT, Year INT, InvestmentInAI DECIMAL); INSERT INTO Investments (InvestmentID, CompanyID, Year, InvestmentInAI) VALUES (1, 1, 2020, 1000000), (2, 2, 2020, 2000000), (3, 3, 2020, 1500000), (4, 4, 2020, 1700000), (5, 5, 2020, 2500000);","WITH AI_Investments AS (SELECT CompanyName, InvestmentInAI, DENSE_RANK() OVER (ORDER BY InvestmentInAI DESC) AS Rank FROM TechCompanies tc INNER JOIN Investments i ON tc.CompanyID = i.CompanyID WHERE Year = 2020) SELECT CompanyName, InvestmentInAI FROM AI_Investments WHERE Rank <= 5;","The query first creates a common table expression (CTE) that joins the TechCompanies and Investments tables based on the CompanyID, and ranks the companies by the amount of investment in AI in descending order for the year 2020. It then uses this CTE to select the top 5 companies with the highest investment in AI."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert the annual inflation rate for each of the last 5 years for various countries, then display the countries with the highest average inflation rate over these years.","CREATE TABLE InflationData (Country VARCHAR(50), Year INT, InflationRate DECIMAL); INSERT INTO InflationData (Country, Year, InflationRate) VALUES ('USA', 2017, 2.1), ('USA', 2018, 2.4), ('USA', 2019, 1.8), ('USA', 2020, 1.2), ('USA', 2021, 2.3), ('GERMANY', 2017, 1.5), ('GERMANY', 2018, 1.8), ('GERMANY', 2019, 1.4), ('GERMANY', 2020, 0.5), ('GERMANY', 2021, 2.3), ('UK', 2017, 2.7), ('UK', 2018, 2.5), ('UK', 2019, 1.8), ('UK', 2020, 0.8), ('UK', 2021, 2.5);","WITH AvgInflation AS (SELECT Country, AVG(InflationRate) AS AverageInflation FROM InflationData GROUP BY Country) SELECT Country, AverageInflation FROM AvgInflation ORDER BY AverageInflation DESC;","The SQL query first creates a Common Table Expression (CTE) named AvgInflation, where it calculates the average inflation rate for each country over the given years. It then uses this CTE to select the country and its average inflation rate, ordered in descending order of the average inflation rate. This provides a list of countries with the highest average inflation rate over the years."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete the records of the policies that have been inactive for more than 30 years and show the count of the remaining active and inactive policies grouped by their type.,"CREATE TABLE Policies (PolicyID INT PRIMARY KEY, PolicyType VARCHAR(50), Status VARCHAR(20), LastActive DATE); INSERT INTO Policies (PolicyID, PolicyType, Status, LastActive) VALUES (1, 'Educational', 'Active', '2020-01-01'), (2, 'Healthcare', 'Inactive', '1980-01-01'), (3, 'Defense', 'Inactive', '1990-01-01'), (4, 'Economic', 'Active', '2021-01-01'), (5, 'Environmental', 'Inactive', '1970-01-01');","DELETE FROM Policies WHERE Status = 'Inactive' AND LastActive < DATE_SUB(CURDATE(), INTERVAL 30 YEAR); SELECT PolicyType, Status, COUNT(*) AS Count FROM Policies GROUP BY PolicyType, Status;","The SQL query first deletes the records from the Policies table where the Status is 'Inactive' and the policy has been inactive for more than 30 years. It then selects the policy type and status of the remaining policies in the table, and counts the number of each type and status combination. The results are grouped by the policy type and status."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the top 3 crops with the highest yield in each region for the year 2020,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL, Year INT); INSERT INTO CropYields (CropID, CropName, Region, Yield, Year) VALUES (1, 'Wheat', 'North America', 8.5, 2020), (2, 'Corn', 'Europe', 10.0, 2020), (3, 'Rice', 'Asia', 9.0, 2020), (4, 'Barley', 'North America', 7.2, 2020), (5, 'Potato', 'Europe', 15.0, 2020), (6, 'Soybean', 'Asia', 3.5, 2020), (7, 'Oats', 'North America', 2.8, 2020), (8, 'Peas', 'Europe', 5.0, 2020), (9, 'Millet', 'Asia', 4.2, 2020);","WITH RankedCrops AS (SELECT CropName, Region, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank FROM CropYields WHERE Year = 2020) SELECT CropName, Region, Yield FROM RankedCrops WHERE Rank <= 3;","The query creates a common table expression (CTE) to rank crops based on their yield within each region for the year 2020, in descending order. The DENSE_RANK function is used to provide a rank to each crop within its region. It then selects the top 3 crops with the highest yield in each region."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Generate data for a new policy initiative aimed at increasing funding for public schools in areas with higher rates of poverty, based on the existing education and demographic data.","CREATE TABLE PublicSchools (SchoolID INT PRIMARY KEY, SchoolName VARCHAR(50), AreaID INT, Funding DECIMAL); CREATE TABLE AreaDemo (AreaID INT PRIMARY KEY, AreaName VARCHAR(50), PovertyRate DECIMAL); INSERT INTO PublicSchools (SchoolID, SchoolName, AreaID, Funding) VALUES (1, 'School A', 101, 50000), (2, 'School B', 102, 40000), (3, 'School C', 103, 35000), (4, 'School D', 104, 45000), (5, 'School E', 105, 55000); INSERT INTO AreaDemo (AreaID, AreaName, PovertyRate) VALUES (101, 'Area X', 20.5), (102, 'Area Y', 30.0), (103, 'Area Z', 15.0), (104, 'Area V', 22.7), (105, 'Area W', 27.0);",UPDATE PublicSchools SET Funding = Funding * 1.2 WHERE AreaID IN (SELECT AreaID FROM AreaDemo WHERE PovertyRate > 20);,"In this SQL query, we first identify the areas that have a higher poverty rate than the predefined threshold, which is 20% in this case. We then increase the funding of the schools located in these particular areas by 20%. The increase in funding is performed by the UPDATE statement, while the areas with high poverty rates are selected using a subquery in the WHERE clause."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the most popular clothing item of 2021 based on sales volume.,"CREATE TABLE ClothingSales (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), YearSold INT, SalesVolume INT); INSERT INTO ClothingSales (ItemID, ItemName, YearSold, SalesVolume) VALUES (1, 'Jeans', 2021, 5000), (2, 'T-Shirt', 2021, 7500), (3, 'Dress', 2021, 4000), (4, 'Sneakers', 2021, 6000), (5, 'Hoodie', 2021, 4500);",SELECT ItemName FROM ClothingSales WHERE YearSold = 2021 ORDER BY SalesVolume DESC LIMIT 1;,"The SQL query is selecting the name of the clothing item from the table ClothingSales where the year the item was sold is 2021. It then orders the results by the sales volume in descending order, and limits the output to the top 1 result which is the most popular clothing item of 2021 based on sales volume."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert total sales data for each car model sold in various regions in 2020, then list out the top 5 car models with the highest sales in Europe.","CREATE TABLE CarSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), TotalSales INT); INSERT INTO CarSales (ModelID, ModelName, Region, TotalSales) VALUES (1, 'Model S', 'North America', 25000), (2, 'Model 3', 'Europe', 20000), (3, 'Leaf', 'Asia', 18000), (4, 'Bolt', 'North America', 22000), (5, 'Prius', 'Europe', 21000), (6, 'E-Tron', 'Europe', 23000), (7, 'Model Y', 'Europe', 24000), (8, 'i3', 'Europe', 25000), (9, 'Zoe', 'Europe', 26000), (10, 'Kona', 'Europe', 27000);","WITH RankedModels AS (SELECT ModelName, TotalSales, DENSE_RANK() OVER (ORDER BY TotalSales DESC) AS Rank FROM CarSales WHERE Region = 'Europe') SELECT ModelName, TotalSales FROM RankedModels WHERE Rank <= 5;","The query first creates a common table expression (CTE) named 'RankedModels', which ranks each car model based on total sales in Europe in descending order. The DENSE_RANK function is used to provide a rank for each model. In the final SELECT statement, it fetches the top 5 car models (those with rank less than or equal to 5) along with their total sales."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Add a new patient's information in the database and update his medical history.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DOB DATE, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, MedicalCondition VARCHAR(100), Treatment VARCHAR(100));","INSERT INTO Patients (PatientID, FirstName, LastName, DOB, Gender) VALUES (6, 'John', 'Doe', '1980-01-01', 'Male'); INSERT INTO MedicalHistory (HistoryID, PatientID, MedicalCondition, Treatment) VALUES (10, 6, 'Hypertension', 'Medication');","The query is first inserting a new patient's details into the 'Patients' table. Then, it is updating the patient's medical history in the 'MedicalHistory' table by adding a new record."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert data into the AthletePerformance table regarding the last match performance of a soccer player and then, using a common table expression, update the table to reflect the new average of goals per match and assists per match for that player. After that, delete records of matches that were played more than 5 years ago.","CREATE TABLE AthletePerformance (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TotalGoals INT, TotalAssists INT, TotalMatches INT, AvgGoalsPerMatch DECIMAL, AvgAssistsPerMatch DECIMAL, LastMatchDate DATE); CREATE TABLE MatchRecords (MatchID INT PRIMARY KEY, PlayerID INT, GoalsScored INT, Assists INT, MatchDate DATE);","INSERT INTO AthletePerformance (PlayerID, PlayerName, TotalGoals, TotalAssists, TotalMatches, AvgGoalsPerMatch, AvgAssistsPerMatch, LastMatchDate) VALUES (1, 'Messi', 700, 300, 750, 0.93, 0.4, '2021-08-30'); INSERT INTO MatchRecords (MatchID, PlayerID, GoalsScored, Assists, MatchDate) VALUES (1001, 1, 2, 1, '2022-02-20'); WITH UpdatedScore AS (SELECT PlayerID, (TotalGoals+GoalsScored)/(TotalMatches+1) as NewAvgGoals, (TotalAssists+Assists)/(TotalMatches+1) as NewAvgAssists FROM AthletePerformance JOIN MatchRecords ON AthletePerformance.PlayerID = MatchRecords.PlayerID WHERE MatchRecords.MatchID = 1001) UPDATE AthletePerformance SET AvgGoalsPerMatch = UpdatedScore.NewAvgGoals, AvgAssistsPerMatch = UpdatedScore.NewAvgAssists FROM AthletePerformance JOIN UpdatedScore ON AthletePerformance.PlayerID = UpdatedScore.PlayerID; DELETE FROM MatchRecords WHERE MatchDate < DATEADD(year, -5, GETDATE());","The SQL query first inserts new performance data of a player from the last match into the AthletePerformance table and MatchRecords table. Then, using a common table expression (CTE), it calculates the new average goals per match and assists per match for that player by incorporating the data from the last match. The averages in the AthletePerformance table are then updated with these new values. Finally, the query deletes all the match records that are more than 5 years old from the MatchRecords table."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find out the average number of users daily active on our new virtual reality application in the last month.,"CREATE TABLE VRAppUsage (UserID INT PRIMARY KEY, AccessDate DATE, IsActive BOOLEAN); INSERT INTO VRAppUsage (UserID, AccessDate, IsActive) VALUES (1, '2022-01-01', TRUE), (2, '2022-01-02', FALSE), (3, '2022-01-03', TRUE), (4, '2022-01-04', TRUE), (5, '2022-01-05', FALSE);","SELECT AVG(DailyActiveUsers) FROM (SELECT AccessDate, COUNT(UserID) AS DailyActiveUsers FROM VRAppUsage WHERE IsActive = TRUE AND AccessDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY AccessDate) AS ActiveUsers;",The query first groups the data by AccessDate and counts the number of active users for each date. It then calculates the average number of daily active users over the past month by averaging the counts for each date. The WHERE clause filters out inactive users and data outside of the last month.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Show me the top 5 brands that are most popular among consumers in North America and Europe based on the number of purchases. Also, provide the average price of the items bought from these brands.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, ProductID INT, BrandID INT, Region VARCHAR(50), Price DECIMAL); CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, ConsumerName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); INSERT INTO Purchases (PurchaseID, ConsumerID, ProductID, BrandID, Region, Price) VALUES (1, 1, 1, 1, 'North America', 50.00), (2, 2, 2, 2, 'Europe', 70.00), (3, 3, 3, 3, 'North America', 80.00), (4, 4, 4, 4, 'Europe', 90.00), (5, 5, 5, 5, 'North America', 100.00); INSERT INTO Consumers (ConsumerID, ConsumerName, Region) VALUES (1, 'Consumer A', 'North America'), (2, 'Consumer B', 'Europe'), (3, 'Consumer C', 'North America'), (4, 'Consumer D', 'Europe'), (5, 'Consumer E', 'North America');","WITH RegionalPurchases AS (SELECT BrandID, COUNT(*) as PurchaseCount, AVG(Price) as AvgPrice FROM Purchases WHERE Region IN ('North America', 'Europe') GROUP BY BrandID), RankedBrands AS (SELECT BrandName, PurchaseCount, AvgPrice, DENSE_RANK() OVER (ORDER BY PurchaseCount DESC) as Rank FROM Brands INNER JOIN RegionalPurchases ON Brands.BrandID = RegionalPurchases.BrandID) SELECT BrandName, PurchaseCount, AvgPrice FROM RankedBrands WHERE Rank <= 5;","The query first creates a common table expression (CTE) named 'RegionalPurchases' to calculate the number of purchases and average price for each brand in North America and Europe. Then it creates another CTE 'RankedBrands' to rank those brands based on the purchase count in descending order using DENSE_RANK function. Finally, it selects the top 5 brands along with their purchase count and average price."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table storing information about crop yields, farming techniques and their impact on land productivity, then find the maximum yield for each technique.","CREATE TABLE CropYields (ID INT PRIMARY KEY, CropName VARCHAR(50), Technique VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (ID, CropName, Technique, Region, Yield) VALUES (1, 'Wheat', 'Traditional', 'North America', 120.5), (2, 'Corn', 'Organic', 'Europe', 118.0), (3, 'Rice', 'Hydroponic', 'Asia', 110.0), (4, 'Barley', 'Traditional', 'North America', 115.7), (5, 'Soybean', 'Organic', 'Europe', 95.0);","WITH MaxYields AS (SELECT Technique, MAX(Yield) AS MaxYield FROM CropYields GROUP BY Technique) SELECT Technique, MaxYield FROM MaxYields;","The SQL query creates a common table expression (CTE) to find the maximum yield for each farming technique. It groups the data by technique, then finds the maximum yield for each group. Finally, it selects the technique and maximum yield from the CTE."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Provide a report showing the top 10 content creators who have the highest average audience engagement per post on all social media platforms for the year 2020.,"CREATE TABLE SocialMediaPosts (PostID INT PRIMARY KEY, CreatorID INT, Platform VARCHAR(50), PostDate DATE, Engagement INT); INSERT INTO SocialMediaPosts (PostID, CreatorID, Platform, PostDate, Engagement) VALUES (1, 10, 'Facebook', '2020-01-01', 500), (2, 11, 'Instagram', '2020-02-01', 600), (3, 12, 'Twitter', '2020-03-01', 700), (4, 13, 'YouTube', '2020-04-01', 800), (5, 14, 'TikTok', '2020-05-01', 900); CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50)); INSERT INTO ContentCreators (CreatorID, CreatorName) VALUES (10, 'Creator A'), (11, 'Creator B'), (12, 'Creator C'), (13, 'Creator D'), (14, 'Creator E');","WITH Year2020Posts AS (SELECT CreatorID, AVG(Engagement) AS AvgEngagement FROM SocialMediaPosts WHERE YEAR(PostDate) = 2020 GROUP BY CreatorID) SELECT cc.CreatorName, y.AvgEngagement FROM Year2020Posts y INNER JOIN ContentCreators cc ON y.CreatorID = cc.CreatorID ORDER BY y.AvgEngagement DESC LIMIT 10;",The query first creates a common table expression (CTE) to calculate the average engagement for each content creator for posts made in the year 2020. This CTE is then joined with the ContentCreators table to match the Creator IDs with their respective names. The final result is ordered by average engagement in descending order and limited to the top 10 content creators.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find out the top 5 countries receiving the highest average rating by customers for their travel experience.,"CREATE TABLE TravelRatings (RatingID INT PRIMARY KEY, Country VARCHAR(50), TravelExperience VARCHAR(100), CustomerID INT, Rating DECIMAL); INSERT INTO TravelRatings (RatingID, Country, TravelExperience, CustomerID, Rating) VALUES (1, 'Italy', 'Cultural Exploration', 101, 4.5), (2, 'Australia', 'Adventure Sports', 102, 4.7), (3, 'Japan', 'Culinary Journey', 103, 4.9), (4, 'Spain', 'Historical Sites', 104, 4.8), (5, 'Canada', 'Wildlife', 105, 4.6);","WITH AverageRatings AS (SELECT Country, AVG(Rating) as AvgRating FROM TravelRatings GROUP BY Country) SELECT Country, AvgRating FROM AverageRatings ORDER BY AvgRating DESC LIMIT 5;","The SQL query first creates a common table expression (CTE) named 'AverageRatings' that groups the 'TravelRatings' table by country and calculates the average rating for each country. It then selects the country and average rating from the 'AverageRatings' CTE and orders the result in descending order by average rating, limiting the output to the top 5 countries with the highest average rating."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Show the top 5 players with the most average goals per game in the current season.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, SeasonYear INT); CREATE TABLE Goals (GoalID INT PRIMARY KEY, PlayerID INT, GameID INT); INSERT INTO Players (PlayerID, PlayerName) VALUES (1, 'Player A'), (2, 'Player B'), (3, 'Player C'), (4, 'Player D'), (5, 'Player E'); INSERT INTO Games (GameID, SeasonYear) VALUES (1, 2021), (2, 2021), (3, 2020), (4, 2020), (5, 2019); INSERT INTO Goals (GoalID, PlayerID, GameID) VALUES (1, 1, 1), (2, 1, 2), (3, 2, 1), (4, 2, 2), (5, 3, 1);","WITH PlayerGoals AS (SELECT p.PlayerName, COUNT(g.GoalID) AS GoalCount, (SELECT COUNT(GameID) FROM Games WHERE SeasonYear = 2021) AS TotalGames FROM Players p JOIN Goals g ON p.PlayerID = g.PlayerID JOIN Games gm ON g.GameID = gm.GameID WHERE gm.SeasonYear = 2021 GROUP BY p.PlayerName), RankedPlayers AS (SELECT PlayerName, GoalCount/TotalGames AS AvgGoals, RANK() OVER (ORDER BY GoalCount/TotalGames DESC) as Rank FROM PlayerGoals) SELECT PlayerName, AvgGoals FROM RankedPlayers WHERE Rank <= 5;","This query first creates a common table expression (CTE) called 'PlayerGoals' that generates a list of players with the total number of goals they scored in the current season and the total number of games played in the season. Then, it creates another CTE 'RankedPlayers' which calculates the average goals per game for each player and ranks them in descending order. Finally, it selects the top 5 players based on their average goals per game using the RANK function."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert patient records into the database and then display all patient records from California who have not undergone any treatment yet.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender CHAR(1), State VARCHAR(20)); CREATE TABLE MedicalHistory (RecordID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(50), Treatment VARCHAR(50)); INSERT INTO Patients (PatientID, Name, Age, Gender, State) VALUES (1, 'John Doe', 30, 'M', 'California'), (2, 'Jane Doe', 25, 'F', 'New York'); INSERT INTO MedicalHistory (RecordID, PatientID, Diagnosis, Treatment) VALUES (1, 1, 'Flu', 'Rest'), (2, 2, 'Cancer', 'Chemotherapy');","INSERT INTO Patients (PatientID, Name, Age, Gender, State) VALUES (3, 'Mary Jane', 40, 'F', 'California'), (4, 'Peter Parker', 35, 'M', 'California'); SELECT P.Name, P.Age, P.Gender, P.State FROM Patients P WHERE P.State = 'California' AND P.PatientID NOT IN (SELECT M.PatientID FROM MedicalHistory M);","The query first inserts new patient records into the 'Patients' table. The next statement retrieves the records of all patients residing in California who are not present in the 'MedicalHistory' table, implying that they have not undergone any medical treatment yet."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 5 drugs with the most side effects reported in the last year.,"CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); INSERT INTO Drugs (DrugID, DrugName) VALUES (1, 'Drug A'), (2, 'Drug B'), (3, 'Drug C'), (4, 'Drug D'), (5, 'Drug E'); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, DrugID INT, ReportDate DATE, SideEffectDescription VARCHAR(255)); INSERT INTO SideEffects (SideEffectID, DrugID, ReportDate, SideEffectDescription) VALUES (1, 1, '2020-07-14', 'Nausea'), (2, 2, '2020-10-18', 'Dizziness'), (3, 3, '2021-03-22', 'Headache'), (4, 4, '2021-06-08', 'Fatigue'), (5, 5, '2021-06-21', 'Rash');","WITH YearlySideEffects AS (SELECT DrugName, COUNT(*) AS SideEffectCount, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Drugs JOIN SideEffects ON Drugs.DrugID = SideEffects.DrugID WHERE YEAR(ReportDate) = YEAR(CURRENT_DATE) - 1 GROUP BY DrugName) SELECT DrugName, SideEffectCount FROM YearlySideEffects WHERE Rank <= 5;",The query first creates a common table expression (CTE) named YearlySideEffects that calculates the number of side effects reported for each drug in the last year. It ranks the drugs in descending order based on the number of reported side effects. It then selects the top 5 drugs with the most side effects reported using the RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Get a list of top 10 trending technologies, along with the number of companies adopting them in Asia, Europe and North America. Also, show the ones common in all three regions.","CREATE TABLE TrendingTech (TechID INT PRIMARY KEY, TechName VARCHAR(50), Region VARCHAR(50), Companies INT); INSERT INTO TrendingTech (TechID, TechName, Region, Companies) VALUES (1, 'AI', 'Asia', 500), (2, 'Blockchain', 'Europe', 1200), (3, 'IoT', 'North America', 700), (4, 'Data Science', 'Asia', 600), (5, 'Cybersecurity', 'Europe', 800), (6, 'Cloud Computing', 'North America', 1050), (7, 'AI', 'Europe', 950), (8, 'Blockchain', 'Asia', 1200), (9, 'IoT', 'Europe', 700), (10, 'Data Science', 'North America', 900), (11, 'Cybersecurity', 'Asia', 900), (12, 'Cloud Computing', 'Europe', 1100), (13, 'AI', 'North America', 900), (14, 'Blockchain', 'North America', 1300), (15, 'IoT', 'Asia', 800), (16, 'Data Science', 'Europe', 950), (17, 'Cybersecurity', 'North America', 920), (18, 'Cloud Computing', 'Asia', 1150);","WITH AsiaTech AS (SELECT TechName FROM TrendingTech WHERE Region = 'Asia' ORDER BY Companies DESC LIMIT 10), EuropeTech AS (SELECT TechName FROM TrendingTech WHERE Region = 'Europe' ORDER BY Companies DESC LIMIT 10), NorthAmericaTech AS (SELECT TechName FROM TrendingTech WHERE Region = 'North America' ORDER BY Companies DESC LIMIT 10) SELECT TechName FROM AsiaTech INTERSECT SELECT TechName FROM EuropeTech INTERSECT SELECT TechName FROM NorthAmericaTech;","The SQL query first creates three separate views - AsiaTech, EuropeTech, and NorthAmericaTech, each representing top 10 trending technologies in the respective regions sorted by the number of companies adopting them. Then it uses INTERSECT operation to find common technologies among the top 10 in all three regions."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the average score of each basketball player and rank them by team, for games played in the year 2022.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT, FOREIGN KEY(TeamID) REFERENCES Teams(TeamID)); CREATE TABLE Games (GameID INT PRIMARY KEY, GameDate DATE, HomeTeamID INT, AwayTeamID INT, FOREIGN KEY(HomeTeamID) REFERENCES Teams(TeamID), FOREIGN KEY(AwayTeamID) REFERENCES Teams(TeamID)); CREATE TABLE PlayerScores (ScoreID INT PRIMARY KEY, GameID INT, PlayerID INT, PointsScored INT, FOREIGN KEY(GameID) REFERENCES Games(GameID), FOREIGN KEY(PlayerID) REFERENCES Players(PlayerID)); INSERT INTO Teams (TeamID, TeamName) VALUES (1, 'Bulls'), (2, 'Lakers'), (3, 'Heat'), (4, 'Celtics'), (5, 'Spurs'); INSERT INTO Players (PlayerID, PlayerName, TeamID) VALUES (1, 'Jordan', 1), (2, 'Bryant', 2), (3, 'James', 3), (4, 'Bird', 4), (5, 'Duncan', 5); INSERT INTO Games (GameID, GameDate, HomeTeamID, AwayTeamID) VALUES (1, '2022-01-01', 1, 2), (2, '2022-01-02', 2, 3), (3, '2022-01-03', 3, 4), (4, '2022-01-04', 4, 5), (5, '2022-01-05', 5, 1); INSERT INTO PlayerScores (ScoreID, GameID, PlayerID, PointsScored) VALUES (1, 1, 1, 30), (2, 2, 2, 35), (3, 3, 3, 32), (4, 4, 4, 31), (5, 5, 5, 34);","WITH PlayerAverage AS (SELECT PlayerID, AVG(PointsScored) AS AverageScore FROM PlayerScores WHERE GameID IN (SELECT GameID FROM Games WHERE YEAR(GameDate) = 2022) GROUP BY PlayerID) SELECT T.TeamName, P.PlayerName, PA.AverageScore FROM PlayerAverage PA INNER JOIN Players P ON PA.PlayerID = P.PlayerID INNER JOIN Teams T ON P.TeamID = T.TeamID ORDER BY T.TeamName ASC, PA.AverageScore DESC;","The query first creates a common table expression (CTE) 'PlayerAverage' to calculate the average points scored by each player for games played in the year 2022. It then uses this CTE in a select query to retrieve each player's name, their average score, and the team they play for. The result is ordered first by team name in ascending order, and then by average points scored in descending order. The joins in the select query connect the player's details in the 'Players' table, their average score in the 'PlayerAverage' CTE, and their team's details in the 'Teams' table."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Show me the top 5 most streamed TV shows in North America and Europe.,"CREATE TABLE StreamedShows (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), Region VARCHAR(50), StreamCount INT); INSERT INTO StreamedShows (ShowID, ShowName, Region, StreamCount) VALUES (1, 'Breaking Bad', 'North America', 500000), (2, 'Game of Thrones', 'Europe', 750000), (3, 'Stranger Things', 'North America', 800000), (4, 'Money Heist', 'Europe', 600000), (5, 'The Witcher', 'Europe', 650000);","WITH RankedShows AS (SELECT ShowName, StreamCount, DENSE_RANK() OVER (PARTITION BY Region ORDER BY StreamCount DESC) AS Rank FROM StreamedShows WHERE Region IN ('North America', 'Europe')) SELECT ShowName, StreamCount FROM RankedShows WHERE Rank <= 5;","The query creates a common table expression (CTE) called RankedShows that ranks TV shows based on the number of streams in descending order, separately for each region (North America and Europe) using the DENSE_RANK function. It then selects the top 5 most streamed shows in each region from the RankedShows CTE."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average age of patients who experienced side effects for each type of drug, then compare these results with the average age of all patients who did not experience side effects and identify the drugs that show a significant difference.","CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), PatientID INT, SideEffects BOOLEAN);","BEGIN; WITH SideEffects AS (SELECT DrugName, AVG(Age) as AvgAgeSideEffects FROM PatientDemographics INNER JOIN DrugEfficacy ON PatientDemographics.PatientID = DrugEfficacy.PatientID WHERE SideEffects = TRUE GROUP BY DrugName), NoSideEffects AS (SELECT AVG(Age) as AvgAgeNoSideEffects FROM PatientDemographics INNER JOIN DrugEfficacy ON PatientDemographics.PatientID = DrugEfficacy.PatientID WHERE SideEffects = FALSE) SELECT DrugName, AvgAgeSideEffects, AvgAgeNoSideEffects, (AvgAgeSideEffects - AvgAgeNoSideEffects) as AgeDifference FROM SideEffects CROSS JOIN NoSideEffects WHERE ABS(AvgAgeSideEffects - AvgAgeNoSideEffects) > 5; COMMIT;","The query first creates two Common Table Expressions (CTEs): one calculating the average age of patients who experienced side effects for each drug, and the other calculating the average age of all patients who did not experience side effects. It then joins these two CTEs and calculates the difference in average ages for each drug. The final result includes only those drugs where the absolute difference in average ages is greater than 5."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the total number of vehicles sold by each company in Asia in 2020 and arrange them in descending order.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50)); INSERT INTO Companies (CompanyID, CompanyName) VALUES (1, 'Toyota'), (2, 'Honda'), (3, 'Hyundai'), (4, 'Suzuki'), (5, 'Nissan'); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, CompanyID INT, ModelName VARCHAR(50), Year INT); INSERT INTO Vehicles (VehicleID, CompanyID, ModelName, Year) VALUES (1, 1, 'Corolla', 2020), (2, 2, 'Civic', 2020), (3, 3, 'i20', 2020), (4, 4, 'Swift', 2020), (5, 5, 'Leaf', 2020); CREATE TABLE Sales (SalesID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), NumberSold INT); INSERT INTO Sales (SalesID, VehicleID, Region, NumberSold) VALUES (1, 1, 'Asia', 200000), (2, 2, 'Asia', 150000), (3, 3, 'Asia', 180000), (4, 4, 'Asia', 220000), (5, 5, 'Asia', 120000);","SELECT C.CompanyName, SUM(S.NumberSold) AS TotalSold FROM Sales S INNER JOIN Vehicles V ON S.VehicleID = V.VehicleID INNER JOIN Companies C ON V.CompanyID = C.CompanyID WHERE S.Region = 'Asia' AND V.Year = 2020 GROUP BY C.CompanyName ORDER BY TotalSold DESC;","The query first joins the Sales table with the Vehicles table using an INNER JOIN on VehicleID, and then further joins with the Companies table using an INNER JOIN on CompanyID. It then filters the results for sales in the 'Asia' region and for the year 2020. The resulting table is grouped by CompanyName, and the total number of vehicles sold by each company is calculated using the SUM function. The results are finally ordered in descending order of the total number of vehicles sold."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total yield for different crop types in various regions, and then display the top 5 regions with the highest average yield per crop type.","CREATE TABLE CropYield (YieldID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), TotalYield DECIMAL); INSERT INTO CropYield (YieldID, CropType, Region, TotalYield) VALUES (1, 'Wheat', 'North America', 120.5), (2, 'Rice', 'Asia', 118.0), (3, 'Corn', 'South America', 110.0), (4, 'Soybean', 'North America', 115.7), (5, 'Barley', 'Europe', 95.0);","WITH RankedRegions AS (SELECT Region, AVG(TotalYield) AS AvgYield, RANK() OVER (ORDER BY AVG(TotalYield) DESC) AS Rank FROM CropYield GROUP BY Region) SELECT Region, AvgYield FROM RankedRegions WHERE Rank <= 5;","The query first creates a common table expression (CTE) named 'RankedRegions'. In this CTE, it groups the data by region and calculates the average yield per region. It also assigns a rank to each region based on the calculated average yield, in descending order. Finally, the query selects the top 5 regions based on this ranking, showing these regions along with their average yield."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find out the total number of trees planted and total amount of CO2 emissions reduced per country given the transaction history, and then list them in descending order of emission reduction.","CREATE TABLE Transactions (TransID INT PRIMARY KEY, Country VARCHAR(50), TreesPlanted INT, CO2Reduced DECIMAL); INSERT INTO Transactions (TransID, Country, TreesPlanted, CO2Reduced) VALUES (1, 'USA', 500, 200.0), (2, 'Germany', 800, 250.0), (3, 'Australia', 300, 100.0), (4, 'USA', 300, 150.0), (5, 'Germany', 200, 120.0);","SELECT Country, SUM(TreesPlanted) AS TotalTrees, SUM(CO2Reduced) AS TotalCO2Reduced FROM Transactions GROUP BY Country ORDER BY TotalCO2Reduced DESC;","The query first groups the transactions by country. For each country, it sums up the total number of trees planted and the total amount of CO2 emissions reduced. Finally, it lists the countries in descending order of carbon emission reduction."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report of the top 5 crops with the highest average yield per acre for each region, only including crops that were grown on more than 1000 acres.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Acreage INT, Yield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Acreage, Yield) VALUES (1, 'Corn', 'North America', 5000, 150), (2, 'Wheat', 'Europe', 2000, 80), (3, 'Rice', 'Asia', 3000, 100), (4, 'Soybean', 'South America', 4000, 200), (5, 'Cotton', 'Africa', 1000, 50);","WITH RankedCrops AS (SELECT CropName, Region, AVG(Yield) as AvgYield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY AVG(Yield) DESC) AS Rank FROM CropYield WHERE Acreage > 1000 GROUP BY CropName, Region) SELECT CropName, Region, AvgYield FROM RankedCrops WHERE Rank <= 5;",The query first selects crops that were grown on more than 1000 acres and calculates the average yield for each crop in each region. It creates a common table expression (CTE) and ranks crops in each region based on their average yield. The query then selects the top 5 crops with the highest average yield from each region.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the busiest month in terms of number of bookings, for each hotel, and rollback the transaction if any error occurs while fetching the data.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName) VALUES (1, 'Hotel Sunshine'), (2, 'Hotel Moonlight'); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, BookingDate DATE); INSERT INTO Bookings (BookingID, HotelID, CustomerID, BookingDate) VALUES (1, 1, 101, '2021-08-01'), (2, 1, 102, '2021-08-05'), (3, 2, 103, '2021-07-01'), (4, 2, 104, '2021-07-05');","BEGIN TRANSACTION; TRY BEGIN WITH Months AS (SELECT HotelID, MONTH(BookingDate) AS Month, COUNT(*) AS NumBookings FROM Bookings GROUP BY HotelID, MONTH(BookingDate)) SELECT h.HotelName, m.Month, MAX(m.NumBookings) FROM Months m INNER JOIN Hotels h ON m.HotelID = h.HotelID GROUP BY h.HotelName, m.Month; COMMIT END TRY BEGIN CATCH ROLLBACK END CATCH;","The SQL query first begins a transaction. Then it tries to execute a CTE (Common Table Expression) named Months, which aggregates the number of bookings for each hotel by month. Then, it joins the Months CTE with the Hotels table to get the hotel name, and selects the maximum number of bookings for each hotel, thereby identifying the busiest month for each hotel. If any error occurs while executing the query, it catches the error and rolls back the transaction."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert new patient records into the database, and then retrieve a list of all patients who are currently undergoing treatment for diabetes in Texas.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Age INT, State VARCHAR(50)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Disease VARCHAR(50), Treatment VARCHAR(50), Status VARCHAR(50)); INSERT INTO Patients (PatientID, FirstName, LastName, Age, State) VALUES (1, 'John', 'Doe', 65, 'Texas'), (2, 'Jane', 'Doe', 70, 'California'); INSERT INTO MedicalHistories (HistoryID, PatientID, Disease, Treatment, Status) VALUES (1, 1, 'Diabetes', 'Insulin', 'Ongoing'), (2, 2, 'Hypertension', 'Medication', 'Resolved');","INSERT INTO Patients (PatientID, FirstName, LastName, Age, State) VALUES (3, 'Michael', 'Smith', 50, 'Texas'), (4, 'Sarah', 'Johnson', 45, 'Texas'); INSERT INTO MedicalHistories (HistoryID, PatientID, Disease, Treatment, Status) VALUES (3, 3, 'Diabetes', 'Insulin', 'Ongoing'), (4, 4, 'Diabetes', 'Insulin', 'Ongoing'); SELECT P.FirstName, P.LastName, M.Disease, M.Treatment FROM Patients P INNER JOIN MedicalHistories M ON P.PatientID = M.PatientID WHERE M.Disease = 'Diabetes' AND M.Status = 'Ongoing' AND P.State = 'Texas';",The query first inserts new patient records into the Patients table and their corresponding medical histories into the MedicalHistories table. It then performs an inner join between the Patients and MedicalHistories tables based on the PatientID. The WHERE clause is then used to filter out only those patients who are undergoing treatment for diabetes in the state of Texas.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that provides information on global food security initiatives such as crop yield, farmer details, farming practices and supply chain. Then, provide a report showing the average yield for each crop across different farming practice methods.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Yield DECIMAL); CREATE TABLE Farmers (FarmerID INT PRIMARY KEY, FarmerName VARCHAR(50), FarmingMethod VARCHAR(50)); CREATE TABLE SupplyChain (SupplyID INT PRIMARY KEY, FarmerID INT, CropID INT, Quantity DECIMAL); INSERT INTO CropYield (CropID, CropName, Yield) VALUES (1, 'Wheat', 2.5), (2, 'Corn', 3.0), (3, 'Rice', 1.5); INSERT INTO Farmers (FarmerID, FarmerName, FarmingMethod) VALUES (1, 'Farmer Joe', 'Organic'), (2, 'Farmer Sue', 'Conventional'); INSERT INTO SupplyChain (SupplyID, FarmerID, CropID, Quantity) VALUES (1, 1, 1, 200), (2, 2, 2, 300), (3, 1, 3, 150);","SELECT c.CropName, AVG(c.Yield) as AverageYield, f.FarmingMethod FROM CropYield c INNER JOIN SupplyChain s ON c.CropID = s.CropID INNER JOIN Farmers f ON s.FarmerID = f.FarmerID GROUP BY c.CropName, f.FarmingMethod;","The query first joins the CropYield, SupplyChain, and Farmers tables using inner join. It then groups the data by CropName and FarmingMethod. It calculates the average crop yield for each group and returns the CropName, AverageYield, and FarmingMethod."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Find the top 3 popular destinations based on the number of bookings made in the last year and insert this information in our 'PopularDestinations' table.,"CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, Destination VARCHAR(50), BookingDate DATE); CREATE TABLE PopularDestinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), BookingsCount INT); INSERT INTO Bookings (BookingID, CustomerID, Destination, BookingDate) VALUES (1, 101, 'Paris', '2020-08-12'), (2, 102, 'New York', '2020-09-15'), (3, 103, 'London', '2020-10-20'), (4, 104, 'Paris', '2020-11-25'), (5, 105, 'New York', '2020-12-30');","WITH LastYearBookings AS (SELECT Destination, COUNT(*) AS NumberOfBookings FROM Bookings WHERE BookingDate >= DATEADD(year, -1, GETDATE()) GROUP BY Destination) INSERT INTO PopularDestinations (DestinationName, BookingsCount) SELECT TOP 3 Destination, NumberOfBookings FROM LastYearBookings ORDER BY NumberOfBookings DESC;",The SQL query first creates a temporary table 'LastYearBookings' which holds the count of bookings for each destination made in the last year. It then inserts the top 3 destinations with the highest number of bookings into the 'PopularDestinations' table. The 'TOP 3' clause combined with the 'ORDER BY NumberOfBookings DESC' sorts the destinations in descending order of their booking counts and only selects the first 3.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Find the top 3 hotel chains with the highest average number of bookings in each region for the past year.,"CREATE TABLE HotelChains (ChainID INT PRIMARY KEY, ChainName VARCHAR(50), Region VARCHAR(50)); INSERT INTO HotelChains (ChainID, ChainName, Region) VALUES (1, 'Marriott', 'North America'), (2, 'Hilton', 'Europe'), (3, 'Hyatt', 'Asia'), (4, 'Accor', 'Australia'), (5, 'IHG', 'Africa'); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, ChainID INT, NumberOfBookings INT, DateOfBooking DATE); INSERT INTO Bookings (BookingID, ChainID, NumberOfBookings, DateOfBooking) VALUES (1, 1, 200, '2020-01-01'), (2, 2, 150, '2020-02-01'), (3, 3, 100, '2020-03-01'), (4, 4, 50, '2020-04-01'), (5, 5, 75, '2020-05-01');","WITH BookingTrends AS (SELECT ChainName, Region, AVG(NumberOfBookings) AS AvgBookings, RANK() OVER (PARTITION BY Region ORDER BY AVG(NumberOfBookings) DESC) AS Rank FROM HotelChains INNER JOIN Bookings ON HotelChains.ChainID = Bookings.ChainID WHERE DateOfBooking >= DATEADD(year, -1, GETDATE()) GROUP BY ChainName, Region) SELECT ChainName, Region, AvgBookings FROM BookingTrends WHERE Rank <= 3;","The query first creates a common table expression (CTE) that calculates the average number of bookings per hotel chain in each region for the past year. It ranks these averages within each region in descending order. Then, it selects the top 3 hotel chains in terms of average bookings for each region from the CTE."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find out the top 5 most popular clothing brands in Europe based on sales in the year 2020, and display them along with the total sales. Begin the transaction to ensure data consistency.","CREATE TABLE FashionSales (ID INT PRIMARY KEY, Brand VARCHAR(50), Region VARCHAR(50), Year INT, Sales DECIMAL); INSERT INTO FashionSales (ID, Brand, Region, Year, Sales) VALUES (1, 'Gucci', 'Europe', 2020, 10000.0), (2, 'Prada', 'Europe', 2020, 15000.0), (3, 'Chanel', 'North America', 2020, 8000.0), (4, 'Louis Vuitton', 'Europe', 2020, 14000.0), (5, 'Zara', 'Europe', 2020, 13000.0);","BEGIN TRANSACTION; WITH RankedBrands AS (SELECT Brand, Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS Rank FROM FashionSales WHERE Region = 'Europe' AND Year = 2020) SELECT Brand, Sales FROM RankedBrands WHERE Rank <= 5; COMMIT;","The query begins a transaction to ensure data consistency. It then creates a common table expression (CTE) to rank clothing brands based on their sales in descending order for the year 2020 in Europe. The DENSE_RANK function is used to assign a rank to each brand. Finally, the top 5 brands along with their sales are selected and the transaction is committed to save the changes."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the most popular sustainable fashion trends in each region based on consumer purchases, and display the top 5 trends in each region.","CREATE TABLE ConsumerBehavior (ConsumerID INT PRIMARY KEY, Region VARCHAR(50), TrendID INT); CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), SustainabilityScore INT); INSERT INTO ConsumerBehavior (ConsumerID, Region, TrendID) VALUES (1, 'North America', 10), (2, 'Europe', 20), (3, 'Asia', 30), (4, 'North America', 40), (5, 'Europe', 50); INSERT INTO FashionTrends (TrendID, TrendName, SustainabilityScore) VALUES (10, 'Organic Cotton', 85), (20, 'Recycled Polyester', 90), (30, 'Eco-friendly Dye', 95), (40, 'Fair Trade', 80), (50, 'Vegan Leather', 92);","WITH RegionTrends AS (SELECT cb.Region, ft.TrendName, COUNT(*) AS Purchases FROM ConsumerBehavior cb INNER JOIN FashionTrends ft ON cb.TrendID = ft.TrendID WHERE ft.SustainabilityScore > 80 GROUP BY cb.Region, ft.TrendName) SELECT Region, TrendName, Purchases FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY Purchases DESC) AS rn FROM RegionTrends) tmp WHERE rn <= 5;","The query first joins the ConsumerBehavior and FashionTrends tables on the TrendID field, and filters for trends with a SustainabilityScore of 80 or above. It then groups the results by Region and TrendName and counts the number of purchases for each trend in each region. The resulting table is then partitioned by Region and ordered by the number of Purchases in descending order. The outer query then selects the top 5 trends in each region based on the row number."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that captures audience engagement on various online entertainment platforms and then display the total number of users and their average engagement time per platform, sorted in descending order of users.","CREATE TABLE AudienceEngagement (UserID INT PRIMARY KEY, Username VARCHAR(50), Platform VARCHAR(50), EngagementTime DECIMAL); INSERT INTO AudienceEngagement (UserID, Username, Platform, EngagementTime) VALUES (1, 'User1', 'Netflix', 120.5), (2, 'User2', 'Spotify', 90.0), (3, 'User3', 'YouTube', 110.0), (4, 'User4', 'Spotify', 80.7), (5, 'User5', 'Netflix', 95.0);","SELECT Platform, COUNT(UserID) AS TotalUsers, AVG(EngagementTime) AS AverageEngagementTime FROM AudienceEngagement GROUP BY Platform ORDER BY TotalUsers DESC;","The query first groups users based on the platform they use, then it calculates the total number of users and the average engagement time for each platform. The result is sorted in descending order of the total number of users."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average duration of treatment for patients grouped by their diagnosis and age group, for patients above the age of 40.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Age INT); CREATE TABLE Diagnoses (DiagnosisID INT PRIMARY KEY, Diagnosis VARCHAR(100)); CREATE TABLE PatientDiagnoses (PatientID INT, DiagnosisID INT, StartDate DATE, EndDate DATE); INSERT INTO Patients (PatientID, FirstName, LastName, Age) VALUES (1, 'John', 'Doe', 45), (2, 'Jane', 'Doe', 55), (3, 'Jim', 'Doe', 60); INSERT INTO Diagnoses (DiagnosisID, Diagnosis) VALUES (1, 'Heart Disease'), (2, 'Diabetes'), (3, 'Cancer'); INSERT INTO PatientDiagnoses (PatientID, DiagnosisID, StartDate, EndDate) VALUES (1, 1, '2021-01-01', '2021-06-01'), (2, 2, '2021-02-01', '2021-07-01'), (3, 3, '2021-03-01', '2021-09-01');","BEGIN TRANSACTION; WITH AgeAnalysis AS (SELECT P.PatientID, D.Diagnosis, P.Age, DATEDIFF(month, PD.StartDate, PD.EndDate) AS TreatmentDuration FROM Patients P INNER JOIN PatientDiagnoses PD ON P.PatientID = PD.PatientID INNER JOIN Diagnoses D ON PD.DiagnosisID = D.DiagnosisID WHERE P.Age > 40) SELECT Diagnosis, Age, AVG(TreatmentDuration) AS AverageTreatmentDuration FROM AgeAnalysis GROUP BY Diagnosis, Age; COMMIT;","The query starts with a BEGIN TRANSACTION statement to ensure that all operations within the transaction boundary are completed successfully, or if not, all changes are rolled back. Then it creates a common table expression (CTE) named 'AgeAnalysis' that joins the Patients, PatientDiagnoses, and Diagnoses tables to collect the diagnosis, age and treatment duration for each patient over 40. The treatment duration is calculated using the DATEDIFF function on the start and end dates. Finally, it selects the diagnosis, age and average treatment duration grouped by diagnosis and age. The COMMIT statement is used to apply all changes made within the transaction."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Create a report that shows the total revenue, total bookings and average booking value per month for each hotel service type.","CREATE TABLE HotelServices (ServiceId INT PRIMARY KEY, ServiceType VARCHAR(50)); INSERT INTO HotelServices (ServiceId, ServiceType) VALUES (1, 'Room'), (2, 'Food'), (3, 'Spa'), (4, 'Conference'); CREATE TABLE Bookings (BookingId INT PRIMARY KEY, ServiceId INT, BookingDate DATE, BookingValue DECIMAL); INSERT INTO Bookings (BookingId, ServiceId, BookingDate, BookingValue) VALUES (1, 1, '2022-01-01', 120.5), (2, 2, '2022-01-02', 60.0), (3, 3, '2022-01-03', 200.0), (4, 4, '2022-01-04', 500.0), (5, 1, '2022-01-05', 150.0);","WITH MonthlyBookingStats AS (SELECT DATEPART(MONTH, BookingDate) AS Month, ServiceId, COUNT(*) AS TotalBookings, SUM(BookingValue) AS TotalRevenue FROM Bookings GROUP BY DATEPART(MONTH, BookingDate), ServiceId) SELECT h.ServiceType, m.Month, m.TotalRevenue, m.TotalBookings, m.TotalRevenue / m.TotalBookings as AvgBookingValue FROM MonthlyBookingStats m JOIN HotelServices h ON m.ServiceId = h.ServiceId ORDER BY h.ServiceType, m.Month;","The query first creates a Common Table Expression (CTE) that groups data by month and service type, calculating the total number of bookings and the total revenue for each combination. It then joins this CTE with the HotelServices table to replace the service IDs with their corresponding types, and calculates the average booking value by dividing the total revenue by the total number of bookings. The result is sorted by service type and month."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Create a table to store the revenue generated by different movie genres in various countries and then find the top three genres that have generated the most revenue in each country.,"CREATE TABLE MovieRevenue (MovieID INT PRIMARY KEY, Genre VARCHAR(50), Country VARCHAR(50), Revenue DECIMAL); INSERT INTO MovieRevenue (MovieID, Genre, Country, Revenue) VALUES (1, 'Action', 'USA', 1200000), (2, 'Romance', 'UK', 800000), (3, 'Comedy', 'India', 500000), (4, 'Horror', 'USA', 300000), (5, 'Thriller', 'USA', 750000);","WITH GenreRevenue AS (SELECT Country, Genre, SUM(Revenue) as TotalRevenue, DENSE_RANK() OVER (PARTITION BY Country ORDER BY SUM(Revenue) DESC) as Rank FROM MovieRevenue GROUP BY Country, Genre) SELECT Country, Genre, TotalRevenue FROM GenreRevenue WHERE Rank <= 3;","The above SQL query first creates a common table expression (CTE) named 'GenreRevenue'. For each Country and Genre in the ‘MovieRevenue’ table, it calculates the TotalRevenue, which is the sum of the Revenue column. The DENSE_RANK function is used to rank these rows, partitioning them by Country, and ordering by the sum of Revenue in descending order. This gives a ranking of genres within each country, based on the revenue they have generated. The main SELECT statement then selects the Country, Genre, and TotalRevenue columns from the 'GenreRevenue' CTE where the rank is less than or equal to 3. This gives the top three genres that have generated the most revenue in each country."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find out the most popular movie genre based on total view time across all streaming platforms.,"CREATE TABLE StreamingData (ID INT PRIMARY KEY, StreamingPlatform VARCHAR(20), MovieID INT, ViewTime DECIMAL); CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), Genre VARCHAR(20)); INSERT INTO StreamingData (ID, StreamingPlatform, MovieID, ViewTime) VALUES (1, 'Netflix', 1001, 200.5), (2, 'Amazon', 1002, 150.0), (3, 'Hulu', 1003, 120.0), (4, 'Disney+', 1004, 180.7), (5, 'HBO Max', 1005, 220.0); INSERT INTO Movies (MovieID, MovieName, Genre) VALUES (1001, 'Inception', 'Action'), (1002, 'The Big Sick', 'Comedy'), (1003, 'Parasite', 'Thriller'), (1004, 'The Lion King', 'Animation'), (1005, 'Game of Thrones', 'Drama');","SELECT Genre, SUM(ViewTime) as TotalViewTime FROM StreamingData INNER JOIN Movies ON StreamingData.MovieID = Movies.MovieID GROUP BY Genre ORDER BY TotalViewTime DESC LIMIT 1;",The SQL query first joins the 'StreamingData' and 'Movies' tables based on the 'MovieID'. It then groups the data by the 'Genre' and calculates the total view time for each genre. The genres are then ordered in descending order of total view time and the genre with the highest total view time is selected.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store the annual government budget allocation for different departments across various years and then, pivot the data to display the budget allocation for each department over the years.","CREATE TABLE GovtBudget (DeptID INT PRIMARY KEY, DeptName VARCHAR(50), Year INT, Budget DECIMAL); INSERT INTO GovtBudget (DeptID, DeptName, Year, Budget) VALUES (1, 'Infrastructure', 2018, 1200000), (2, 'Healthcare', 2018, 1500000), (3, 'Education', 2018, 1400000), (1, 'Infrastructure', 2019, 1300000), (2, 'Healthcare', 2019, 1600000), (3, 'Education', 2019, 1500000), (1, 'Infrastructure', 2020, 1400000), (2, 'Healthcare', 2020, 1700000), (3, 'Education', 2020, 1600000);","SELECT * FROM (SELECT DeptName, Year, Budget FROM GovtBudget) PIVOT (SUM(Budget) FOR Year IN (2018, 2019, 2020));","The query first selects the necessary columns from the GovtBudget table. It then uses the PIVOT function to transform the data from a long format to a wide format. This results in a separate column for each year, with the budget allocation for each department displayed under the corresponding year."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find out the total investment in each technology sector for the past five years.,"CREATE TABLE InvestmentData (ID INT PRIMARY KEY, TechSector VARCHAR(50), InvestmentAmount DECIMAL, Year DATE); INSERT INTO InvestmentData (ID, TechSector, InvestmentAmount, Year) VALUES (1, 'AI', 5000000.00, '2017-01-01'), (2, 'Biotech', 3000000.00, '2017-01-01'), (3, 'Cybersecurity', 4000000.00, '2017-01-01'), (4, 'AI', 6000000.00, '2018-01-01'), (5, 'Biotech', 3500000.00, '2018-01-01'), (6, 'Cybersecurity', 4500000.00, '2018-01-01'), (7, 'AI', 7000000.00, '2019-01-01'), (8, 'Biotech', 4000000.00, '2019-01-01'), (9, 'Cybersecurity', 5000000.00, '2019-01-01'), (10, 'AI', 8000000.00, '2020-01-01'), (11, 'Biotech', 4500000.00, '2020-01-01'), (12, 'Cybersecurity', 5500000.00, '2020-01-01'), (13, 'AI', 9000000.00, '2021-01-01'), (14, 'Biotech', 5000000.00, '2021-01-01'), (15, 'Cybersecurity', 6000000.00, '2021-01-01');","WITH TotalInvestment AS (SELECT TechSector, SUM(InvestmentAmount) AS TotalAmount FROM InvestmentData WHERE Year >= '2017-01-01' AND Year <= '2021-12-31' GROUP BY TechSector) SELECT * FROM TotalInvestment;","The SQL query first creates a common table expression (CTE) named TotalInvestment that sums up the investment amounts for each technology sector from 2017 to 2021. The WHERE clause filters the data to only include investments made during this period. The GROUP BY clause categorizes the data by technology sector. Finally, the query selects all records from the TotalInvestment CTE."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find out the top 5 most popular sustainable fashion brands based on number of transactions, and the total amount spent on each brand in the last year, sorted by region. Keep these results safe for future data analysis.","CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, BrandID INT, UserID INT, Amount DECIMAL, TransactionDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Users (UserID INT PRIMARY KEY, Region VARCHAR(50)); INSERT INTO Transactions (TransactionID, BrandID, UserID, Amount, TransactionDate) VALUES (1, 2, 1, 250, '2020-01-01'), (2, 5, 2, 300, '2020-02-01'), (3, 2, 3, 200, '2020-03-01'), (4, 3, 1, 150, '2020-04-01'), (5, 4, 2, 100, '2020-05-01'); INSERT INTO Brands (BrandID, BrandName, IsSustainable) VALUES (1, 'Brand1', true), (2, 'Brand2', true), (3, 'Brand3', false), (4, 'Brand4', true), (5, 'Brand5', false); INSERT INTO Users (UserID, Region) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia');","BEGIN TRANSACTION; WITH SustainableBrands AS (SELECT BrandID, BrandName FROM Brands WHERE IsSustainable = true), TransactionSummary AS (SELECT b.BrandName, u.Region, COUNT(t.TransactionID) AS NumberOfTransactions, SUM(t.Amount) AS TotalAmount FROM Transactions t JOIN SustainableBrands b ON t.BrandID = b.BrandID JOIN Users u ON t.UserID = u.UserID WHERE t.TransactionDate >= DATE('2020-01-01') GROUP BY b.BrandName, u.Region) SELECT Region, BrandName, NumberOfTransactions, TotalAmount, RANK() OVER (PARTITION BY Region ORDER BY NumberOfTransactions DESC) AS Rank FROM TransactionSummary WHERE Rank <= 5 ORDER BY Region, Rank; COMMIT;","The query begins a transaction for data consistency. It first creates a common table expression (CTE) to filter out sustainable brands from the Brands table. Then it joins this CTE with the Transactions and Users table to get the total number of transactions and the total amount spent for each sustainable brand, grouped by region. The query then ranks these results within each region based on the number of transactions. It selects the top 5 brands in each region based on this ranking and orders the results by region and rank. Finally, it commits the transaction, making the changes permanent."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert records of the new album sales by various artists in North America for 2021. Then, display the top 5 artists with the highest album sales.","CREATE TABLE AlbumSales (SalesID INT PRIMARY KEY, ArtistName VARCHAR(50), AlbumName VARCHAR(50), Region VARCHAR(50), Year INT, SalesNumber INT);","INSERT INTO AlbumSales (SalesID, ArtistName, AlbumName, Region, Year, SalesNumber) VALUES (1, 'Artist A', 'Album A', 'North America', 2021, 50000), (2, 'Artist B', 'Album B', 'North America', 2021, 75000), (3, 'Artist C', 'Album C', 'North America', 2021, 85000), (4, 'Artist D', 'Album D', 'North America', 2021, 40000), (5, 'Artist E', 'Album E', 'North America', 2021, 55000); WITH RankedArtists AS (SELECT ArtistName, SUM(SalesNumber) as TotalSales, DENSE_RANK() OVER (ORDER BY SUM(SalesNumber) DESC) AS Rank FROM AlbumSales WHERE Year = 2021 AND Region = 'North America' GROUP BY ArtistName) SELECT ArtistName, TotalSales FROM RankedArtists WHERE Rank <= 5;","The query starts by inserting records of new album sales by various artists in North America for the year 2021. Then, the query creates a Common Table Expression (CTE) named RankedArtists to aggregate the total album sales by each artist and rank them in descending order of total sales using the DENSE_RANK() function. Finally, the query selects the top 5 artists with the highest total album sales."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Create a table that records the sale information of various vehicle models, insert some records, and then show the total number of sales in each region for electric and non-electric vehicles.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), VehicleType VARCHAR(20), UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, VehicleType, UnitsSold) VALUES (1, 'Model S', 'North America', 'Electric', 5000), (2, 'Model 3', 'Europe', 'Electric', 4000), (3, 'Corolla', 'Asia', 'Non-Electric', 6000), (4, 'Civic', 'North America', 'Non-Electric', 5500), (5, 'Prius', 'Europe', 'Electric', 4500);","WITH SalesByType AS (SELECT Region, VehicleType, SUM(UnitsSold) AS TotalSales FROM VehicleSales GROUP BY Region, VehicleType) SELECT Region, VehicleType, TotalSales FROM SalesByType PIVOT (SUM(TotalSales) FOR VehicleType IN ('Electric', 'Non-Electric')) AS PivotedSalesOrder;","The query first creates a common table expression (CTE) named 'SalesByType' that groups the sales data by region and vehicle type, and calculates the total number of units sold. Then it uses this CTE to pivot the data, creating a new row for each region and columns for each vehicle type (electric and non-electric), with the corresponding total sales figures in the appropriate cells."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 countries with the highest average spending on sustainable fashion products and the most preferred type of sustainable clothing among consumers in those countries.,"CREATE TABLE SustainableFashion (UserID INT PRIMARY KEY, Country VARCHAR(50), SpendAmount DECIMAL, ProductType VARCHAR(50)); INSERT INTO SustainableFashion (UserID, Country, SpendAmount, ProductType) VALUES (1, 'USA', 1200.5, 'Organic Cotton'), (2, 'Germany', 900.0, 'Recycled Polyester'), (3, 'Canada', 800.0, 'Organic Cotton'), (4, 'France', 700.7, 'Recycled Polyester'), (5, 'Australia', 600.0, 'Organic Cotton');","WITH AvgSpend AS (SELECT Country, AVG(SpendAmount) AS AverageSpend FROM SustainableFashion GROUP BY Country), RankedCountries AS (SELECT Country, AverageSpend, DENSE_RANK() OVER (ORDER BY AverageSpend DESC) AS Rank FROM AvgSpend) SELECT RC.Country, RC.AverageSpend, SF.ProductType FROM RankedCountries RC INNER JOIN SustainableFashion SF ON RC.Country = SF.Country WHERE Rank <= 5 GROUP BY RC.Country, RC.AverageSpend, SF.ProductType;",The query first creates an intermediate view (AvgSpend) that calculates the average spending in each country. It then ranks these countries based on average spending in descending order using a common table expression (CTE) (RankedCountries). The final step of the query joins the RankedCountries CTE with the original SustainableFashion table to retrieve the most preferred type of sustainable clothing in those countries. It only selects the top 5 countries with the highest average spending on sustainable fashion products.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find out the top 5 directors whose movies have generated the highest revenue on average and also have high audience engagement, based on the number of views and average ratings.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(50), DirectorID INT, Revenue DECIMAL); CREATE TABLE Directors (DirectorID INT PRIMARY KEY, DirectorName VARCHAR(50)); CREATE TABLE AudienceEngagement (MovieID INT, Views INT, AvgRating DECIMAL); INSERT INTO Movies (MovieID, Title, DirectorID, Revenue) VALUES (1, 'Movie 1', 1, 120.5), (2, 'Movie 2', 2, 118.0), (3, 'Movie 3', 3, 110.0), (4, 'Movie 4', 1, 115.7), (5, 'Movie 5', 2, 95.0); INSERT INTO Directors (DirectorID, DirectorName) VALUES (1, 'Director 1'), (2, 'Director 2'), (3, 'Director 3'); INSERT INTO AudienceEngagement (MovieID, Views, AvgRating) VALUES (1, 1000, 4.5), (2, 2000, 4.2), (3, 1500, 4.0), (4, 1800, 4.1), (5, 1600, 4.3);","WITH DirectorRevenue AS (SELECT DirectorID, AVG(Revenue) as AvgRevenue FROM Movies GROUP BY DirectorID), DirectorEngagement AS (SELECT Movies.DirectorID, AVG(AudienceEngagement.Views) as AvgViews, AVG(AudienceEngagement.AvgRating) as AvgRatings FROM Movies INNER JOIN AudienceEngagement ON Movies.MovieID = AudienceEngagement.MovieID GROUP BY Movies.DirectorID) SELECT Directors.DirectorName, DirectorRevenue.AvgRevenue, DirectorEngagement.AvgViews, DirectorEngagement.AvgRatings FROM Directors INNER JOIN DirectorRevenue ON Directors.DirectorID = DirectorRevenue.DirectorID INNER JOIN DirectorEngagement ON Directors.DirectorID = DirectorEngagement.DirectorID ORDER BY DirectorRevenue.AvgRevenue DESC, DirectorEngagement.AvgViews DESC, DirectorEngagement.AvgRatings DESC LIMIT 5;","The query first creates two Common Table Expressions (CTEs), one for calculating the average revenue for each director and another for calculating the average views and ratings of the movies of each director. The main query then joins the Directors table with these two CTEs and orders the result by average revenue, average views and average ratings in descending order, limiting the result to the top 5."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Identify the top 5 sustainable fashion brands based on their eco-friendly product count and their average customer review score, and then update the brand information to mark them as 'Top Brands'.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Type VARCHAR(50), IsTopBrand BOOLEAN); CREATE TABLE Products (ProductID INT PRIMARY KEY, BrandID INT, IsEcoFriendly BOOLEAN, ReviewScore DECIMAL); INSERT INTO Brands (BrandID, BrandName, Type, IsTopBrand) VALUES (1, 'Brand A', 'Clothing', FALSE), (2, 'Brand B', 'Accessories', FALSE), (3, 'Brand C', 'Footwear', FALSE); INSERT INTO Products (ProductID, BrandID, IsEcoFriendly, ReviewScore) VALUES (1, 1, TRUE, 4.5), (2, 1, TRUE, 4.7), (3, 2, FALSE, 3.5), (4, 2, TRUE, 4.2), (5, 3, TRUE, 4.8);","WITH EcoBrands AS (SELECT BrandID, COUNT(*) AS EcoProductCount, AVG(ReviewScore) AS AvgReviewScore FROM Products WHERE IsEcoFriendly = TRUE GROUP BY BrandID) SELECT BrandName, EcoProductCount, AvgReviewScore FROM Brands INNER JOIN EcoBrands ON Brands.BrandID = EcoBrands.BrandID ORDER BY EcoProductCount DESC, AvgReviewScore DESC LIMIT 5; UPDATE Brands SET IsTopBrand = TRUE WHERE BrandID IN (SELECT BrandID FROM EcoBrands WHERE EcoProductCount >= 5 AND AvgReviewScore >= 4.5);",The query first creates a common table expression (CTE) called 'EcoBrands' that calculates the count of eco-friendly products and the average review score for each brand. It then selects the top 5 brands based on their eco-product count and average review score using an INNER JOIN. The 'UPDATE' statement marks these brands as 'Top Brands' by setting the 'IsTopBrand' field to TRUE.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that displays the average yield for each crop type for the last year.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropType VARCHAR(50), HarvestYear INT, AvgYield DECIMAL); INSERT INTO CropYields (CropID, CropType, HarvestYear, AvgYield) VALUES (1, 'Wheat', 2021, 3.5), (2, 'Corn', 2021, 4.2), (3, 'Soybeans', 2021, 2.9), (4, 'Rice', 2021, 3.3), (5, 'Cotton', 2021, 1.7);","SELECT CropType, AvgYield FROM CropYields WHERE HarvestYear = 2021 ORDER BY AvgYield DESC;",The query selects the crop type and average yield from the CropYields table for the year 2021. It then orders the results in descending order based on the average yield. This allows us to see which crops had the highest average yield in the last year.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total amount of CO2 emissions saved by each city due to the use of electric vehicles since 2010, and provide a list sorted in descending order.","CREATE TABLE ElectricVehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), City VARCHAR(50), Year INT, CO2Saved DECIMAL); INSERT INTO ElectricVehicles (VehicleID, ModelName, City, Year, CO2Saved) VALUES (1, 'Model S', 'New York', 2011, 2.0), (2, 'Model 3', 'Los Angeles', 2013, 2.5), (3, 'Leaf', 'Chicago', 2015, 2.1), (4, 'Bolt', 'Houston', 2012, 1.8), (5, 'Prius', 'Phoenix', 2010, 2.3);","WITH TotalCO2Saved AS (SELECT City, SUM(CO2Saved) as TotalSaved FROM ElectricVehicles WHERE Year>=2010 GROUP BY City) SELECT City, TotalSaved FROM TotalCO2Saved ORDER BY TotalSaved DESC;",The query first creates a common table expression (CTE) called TotalCO2Saved that sums up the amount of CO2 emissions saved by each city due to the use of electric vehicles since 2010. It then selects the city and total CO2 emissions saved from this CTE and sorts the results in descending order.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Generate a report that shows the total investment in emerging technology sectors like Blockchain, AI, and IoT, along with the top 5 investment companies in each sector from the last 5 years.","CREATE TABLE InvestmentData (InvestmentID INT PRIMARY KEY, CompanyName VARCHAR(50), Sector VARCHAR(50), InvestmentYear INT, AmountInvested DECIMAL); INSERT INTO InvestmentData (InvestmentID, CompanyName, Sector, InvestmentYear, AmountInvested) VALUES (1, 'Company A', 'Blockchain', 2017, 5000000), (2, 'Company B', 'AI', 2018, 8000000), (3, 'Company C', 'IoT', 2019, 6000000), (4, 'Company D', 'Blockchain', 2020, 7500000), (5, 'Company E', 'AI', 2021, 7000000);","WITH LatestInvestments AS (SELECT Sector, SUM(AmountInvested) AS TotalInvestment, DENSE_RANK() OVER (PARTITION BY Sector ORDER BY AmountInvested DESC) AS Rank FROM InvestmentData WHERE InvestmentYear > YEAR(CURRENT_DATE) - 5 GROUP BY Sector, CompanyName) SELECT Sector, TotalInvestment, CompanyName FROM LatestInvestments WHERE Rank <= 5;","This query first creates a common table expression (CTE) named 'LatestInvestments' that calculates the total investment in each sector in the last 5 years and ranks the companies within each sector based on their investment amounts. It then selects the sectors and their corresponding total investments, along with the top 5 companies in each sector."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,List the top 10 countries with the highest number of endangered species and the conservation organizations operating in those countries.,"CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Country VARCHAR(50), Status VARCHAR(50)); CREATE TABLE ConservationOrgs (OrgID INT PRIMARY KEY, OrgName VARCHAR(50), Country VARCHAR(50)); INSERT INTO EndangeredSpecies (SpeciesID, SpeciesName, Country, Status) VALUES (1, 'Giant Panda', 'China', 'Endangered'), (2, 'Amur Leopard', 'Russia', 'Endangered'), (3, 'Black Rhino', 'Kenya', 'Endangered'); INSERT INTO ConservationOrgs (OrgID, OrgName, Country) VALUES (1, 'World Wildlife Fund', 'China'), (2, 'Greenpeace', 'Russia'), (3, 'Save the Rhino', 'Kenya');","WITH EndangeredSpeciesCount AS (SELECT Country, COUNT(*) AS SpeciesCount FROM EndangeredSpecies WHERE Status = 'Endangered' GROUP BY Country) SELECT EndangeredSpeciesCount.Country, EndangeredSpeciesCount.SpeciesCount, ConservationOrgs.OrgName FROM EndangeredSpeciesCount INNER JOIN ConservationOrgs ON EndangeredSpeciesCount.Country = ConservationOrgs.Country ORDER BY EndangeredSpeciesCount.SpeciesCount DESC LIMIT 10;","The query first creates a common table expression (CTE) to count the number of endangered species by country. It then joins this CTE with the ConservationOrgs table on the country name to get the conservation organizations operating in those countries. Lastly, it orders the results by the number of endangered species in descending order and limits the output to the top 10 countries."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store the performance metrics of football players from various teams and regions, then generate a list of the top 5 players with the best overall performance scores.","CREATE TABLE PlayerPerformance (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50), Region VARCHAR(50), PerformanceScore INT); INSERT INTO PlayerPerformance (PlayerID, PlayerName, Team, Region, PerformanceScore) VALUES (1, 'Messi', 'Barcelona', 'Europe', 95), (2, 'Cristiano Ronaldo', 'Juventus', 'Europe', 93), (3, 'Neymar', 'Paris Saint-Germain', 'Europe', 92), (4, 'Lewandowski', 'Bayern Munich', 'Europe', 90), (5, 'Mbappe', 'Paris Saint-Germain', 'Europe', 89);","WITH RankedPlayers AS (SELECT PlayerName, PerformanceScore, DENSE_RANK() OVER (ORDER BY PerformanceScore DESC) AS Rank FROM PlayerPerformance) SELECT PlayerName, PerformanceScore FROM RankedPlayers WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank the football players based on their performance scores in descending order. It then selects the top 5 players with the best performance scores using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 highest earning athletes in basketball, along with their total income, sorted by their average fan engagement score on social media.","CREATE TABLE AthleteIncome (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Income DECIMAL); INSERT INTO AthleteIncome (AthleteID, AthleteName, Income) VALUES (1, 'LeBron James', 85000000), (2, 'Stephen Curry', 76000000), (3, 'Kevin Durant', 73000000), (4, 'Russell Westbrook', 65000000), (5, 'James Harden', 60000000); CREATE TABLE FanEngagement (AthleteID INT, SocialMediaScore DECIMAL); INSERT INTO FanEngagement (AthleteID, SocialMediaScore) VALUES (1, 4.7), (2, 4.8), (3, 4.6), (4, 4.9), (5, 4.8);","WITH RankedAthletes AS (SELECT AI.AthleteName, AI.Income, FE.SocialMediaScore, DENSE_RANK() OVER (ORDER BY AI.Income DESC) AS Rank FROM AthleteIncome AI INNER JOIN FanEngagement FE ON AI.AthleteID = FE.AthleteID) SELECT AthleteName, Income, SocialMediaScore FROM RankedAthletes WHERE Rank <= 5 ORDER BY SocialMediaScore DESC;","The SQL query first creates a common table expression (CTE) named RankedAthletes. In this CTE, it joins the AthleteIncome and FanEngagement tables on the AthleteID field to combine the income and social media score data for each athlete. It then ranks the athletes based on their income in descending order using the DENSE_RANK function. The final SELECT statement retrieves the top 5 athletes from the CTE based on their income rank, and sorts them by their social media score in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show me the top three highest earning soccer players in Europe.,"CREATE TABLE SoccerPlayers (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Region VARCHAR(50), Earnings DECIMAL); INSERT INTO SoccerPlayers (PlayerID, PlayerName, Region, Earnings) VALUES (1, 'Lionel Messi', 'Europe', 120.5), (2, 'Cristiano Ronaldo', 'Europe', 118.0), (3, 'Neymar Jr.', 'South America', 110.0), (4, 'Kylian Mbappe', 'Europe', 115.7), (5, 'Mohamed Salah', 'Africa', 95.0);","SELECT PlayerName, Earnings FROM SoccerPlayers WHERE Region = 'Europe' ORDER BY Earnings DESC LIMIT 3;","The SQL query first selects the name and earnings of soccer players who are based in Europe. It then orders the results in descending order by earnings, and finally limits the output to the top three records."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that captures the funding details about emerging technology startups, then construct a pivot table to show the total funding received by each startup across different funding rounds.","CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE FundingDetails (FundingID INT PRIMARY KEY, StartupID INT, FundingRound VARCHAR(50), FundingAmount DECIMAL);","WITH TotalFunding AS (SELECT StartupName, FundingRound, SUM(FundingAmount) OVER (PARTITION BY StartupName, FundingRound) AS TotalAmount FROM Startups s JOIN FundingDetails fd ON s.StartupID = fd.StartupID) SELECT StartupName, [Seed], [Series A], [Series B], [Series C] FROM (SELECT StartupName, FundingRound, TotalAmount FROM TotalFunding) PivotData PIVOT (SUM(TotalAmount) FOR FundingRound IN ([Seed], [Series A], [Series B], [Series C])) AS PivotTable;","The query first creates a common table expression (CTE) named TotalFunding that calculates the total funding amount for each startup across different funding rounds. The CTE is then used to create a pivot table where each row represents a startup and columns represent different funding rounds (Seed, Series A, Series B, Series C), displaying the total amount of funding received in each round. The PIVOT operator is used to transform the rows into columns."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Get the total revenue from all transactions for each hotel that had a guest stay last month and then rollback the transaction.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Location VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, Location) VALUES (1, 'Grand Hotel', 'New York'), (2, 'Royal Plaza', 'London'), (3, 'The Imperial', 'Paris'); CREATE TABLE Transactions (TransID INT PRIMARY KEY, HotelID INT, GuestID INT, Date DATE, Amount DECIMAL); INSERT INTO Transactions (TransID, HotelID, GuestID, Date, Amount) VALUES (1, 1, 101, '2022-09-30', 1000.00), (2, 2, 102, '2022-09-15', 800.00), (3, 1, 103, '2022-09-28', 1200.00), (4, 3, 104, '2022-10-02', 1500.00), (5, 2, 105, '2022-09-12', 700.00);","BEGIN TRANSACTION; SELECT H.HotelName, SUM(T.Amount) AS TotalRevenue FROM Transactions T INNER JOIN Hotels H ON T.HotelID = H.HotelID WHERE MONTH(T.Date) = 9 GROUP BY H.HotelName; ROLLBACK;","The SQL query begins a transaction. It then performs an INNER JOIN between the 'Transactions' and 'Hotels' tables based on matching 'HotelID'. The WHERE clause filters out transactions that occurred in the month specified (in this case, September). The SELECT statement with the SUM function calculates the total revenue for each hotel from the transactions that occurred in the last month. The GROUP BY clause groups the revenue by each hotel. The transaction is then rolled back, which undoes any changes made to the database during the transaction."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find out the total number of hybrid vehicles sold in Europe in 2021.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(20), Region VARCHAR(50), SaleYear INT, UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, VehicleType, Region, SaleYear, UnitsSold) VALUES (1, 'Model S', 'Hybrid', 'Europe', 2021, 5000), (2, 'Prius', 'Hybrid', 'Europe', 2021, 8000), (3, 'Model 3', 'Electric', 'Europe', 2021, 7000), (4, 'Bolt', 'Hybrid', 'North America', 2021, 4000), (5, 'Leaf', 'Electric', 'Asia', 2021, 3000);",SELECT SUM(UnitsSold) AS TotalHybridSold FROM VehicleSales WHERE VehicleType = 'Hybrid' AND Region = 'Europe' AND SaleYear = 2021;,"The SQL query first filters the VehicleSales table to include only rows where the VehicleType is 'Hybrid', the Region is 'Europe', and the SaleYear is 2021. Then, it sums the UnitsSold column to find the total number of hybrid vehicles sold in Europe in 2021."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 5 designers by the number of sustainable materials they have used in the last 5 years and their impact on consumer buying behavior.,"CREATE TABLE Designers (DesignerID INT PRIMARY KEY, DesignerName VARCHAR(50)); CREATE TABLE Materials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(50), SustainabilityIndex DECIMAL); CREATE TABLE DesignerMaterials (DesignerID INT, MaterialID INT, Year INT); CREATE TABLE ConsumerBehavior (ConsumerID INT PRIMARY KEY, DesignerID INT, PurchaseCount INT);","WITH DesignerMaterialSustainability AS (SELECT d.DesignerName, COUNT(DISTINCT dm.MaterialID) AS MaterialCount FROM Designers d INNER JOIN DesignerMaterials dm ON d.DesignerID = dm.DesignerID INNER JOIN Materials m ON dm.MaterialID = m.MaterialID WHERE dm.Year > (YEAR(CURDATE()) - 5) AND m.SustainabilityIndex > 0.5 GROUP BY d.DesignerName), ConsumerImpact AS (SELECT d.DesignerName, SUM(cb.PurchaseCount) AS TotalPurchases FROM Designers d INNER JOIN ConsumerBehavior cb ON d.DesignerID = cb.DesignerID GROUP BY d.DesignerName) SELECT ds.DesignerName, ds.MaterialCount, ci.TotalPurchases FROM DesignerMaterialSustainability ds INNER JOIN ConsumerImpact ci ON ds.DesignerName = ci.DesignerName ORDER BY ds.MaterialCount DESC, ci.TotalPurchases DESC LIMIT 5;","The query first creates a common table expression (CTE) 'DesignerMaterialSustainability' that contains the counts of distinct sustainable materials used by each designer in the last 5 years. Then another CTE 'ConsumerImpact' calculates the total purchases made from each designer. Then it joins these two CTEs to get the result set which is then ordered by the number of sustainable materials used and the total purchases made. Finally, it retrieves the top 5 designers."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table to record the number of fans attending each football match, and then get the matches with more than 50000 fan engagements.","CREATE TABLE FanEngagements (MatchID INT PRIMARY KEY, MatchName VARCHAR(50), TotalFans INT); INSERT INTO FanEngagements (MatchID, MatchName, TotalFans) VALUES (1, 'Match 1', 45500), (2, 'Match 2', 60000), (3, 'Match 3', 53000), (4, 'Match 4', 40000), (5, 'Match 5', 51000);","SELECT MatchName, TotalFans FROM FanEngagements WHERE TotalFans > 50000;",The query is selecting the name and total number of fans for each match from the FanEngagements table where the total number of fans is greater than 50000.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Create a table to store the most purchased clothing items in different regions and then display the top 5 most purchased items in Europe.,"CREATE TABLE PurchasedItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Region VARCHAR(50), NoOfItemsPurchased INT); INSERT INTO PurchasedItems (ItemID, ItemName, Region, NoOfItemsPurchased) VALUES (1, 'Levis Jeans', 'North America', 5000), (2, 'Zara Jacket', 'Europe', 8000), (3, 'H&M Sweater', 'Asia', 7000), (4, 'Gucci Belt', 'North America', 1000), (5, 'Prada Shoes', 'Europe', 4000);","WITH RankedItems AS (SELECT ItemName, NoOfItemsPurchased, DENSE_RANK() OVER (ORDER BY NoOfItemsPurchased DESC) AS Rank FROM PurchasedItems WHERE Region = 'Europe') SELECT ItemName, NoOfItemsPurchased FROM RankedItems WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank clothing items based on their purchase count in descending order within the region 'Europe'. It then selects the top 5 most purchased items using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the best-selling clothing item in each category for the last month.,"CREATE TABLE ClothingSales (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Category VARCHAR(50), Sales INT, SaleDate DATE); INSERT INTO ClothingSales (ItemID, ItemName, Category, Sales, SaleDate) VALUES (1, 'Denim Jacket', 'Jackets', 200, '2022-03-01'), (2, 'Leather Jacket', 'Jackets', 150, '2022-03-01'), (3, 'Silk Dress', 'Dresses', 300, '2022-03-01'), (4, 'Cotton Dress', 'Dresses', 250, '2022-03-01'), (5, 'Wool Sweater', 'Sweaters', 400, '2022-03-01');","WITH MonthlySales AS (SELECT ItemName, Category, SUM(Sales) AS TotalSales FROM ClothingSales WHERE SaleDate >= DATEADD(month, -1, GETDATE()) GROUP BY ItemName, Category) SELECT Category, ItemName, MAX(TotalSales) FROM MonthlySales GROUP BY Category;","The SQL query first creates a subquery 'MonthlySales' to calculate the total sales for each item in each category for the last month. Using the result of this subquery, it then finds the best-selling clothing item in each category by selecting the item with the highest total sales in each category."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the total goals scored by each soccer team in a season, and then display the top 3 teams with the most goals.","CREATE TABLE SoccerSeason (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), SeasonYear INT, GoalsScored INT); INSERT INTO SoccerSeason (TeamID, TeamName, SeasonYear, GoalsScored) VALUES (1, 'Team A', 2020, 35), (2, 'Team B', 2020, 40), (3, 'Team C', 2020, 38), (4, 'Team D', 2020, 42), (5, 'Team E', 2020, 36);","WITH RankedTeams AS (SELECT TeamName, GoalsScored, DENSE_RANK() OVER (ORDER BY GoalsScored DESC) AS Rank FROM SoccerSeason) SELECT TeamName, GoalsScored FROM RankedTeams WHERE Rank <= 3;",The SQL query creates a common table expression (CTE) to rank the soccer teams based on the total goals scored in descending order. It then selects the top 3 teams with the most goals using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find out the top 5 most productive farmers in terms of overall yield who have not had any transaction rollback in the last year.,"CREATE TABLE Farmers (FarmerID INT PRIMARY KEY, FarmerName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE CropYields (YieldID INT PRIMARY KEY, FarmerID INT, CropType VARCHAR(20), Yield DECIMAL); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, FarmerID INT, TransactionType VARCHAR(20), TransactionDate DATE); INSERT INTO Farmers (FarmerID, FarmerName, Region) VALUES (1, 'John Doe', 'North America'), (2, 'Jane Smith', 'Europe'), (3, 'Bob Johnson', 'Asia'), (4, 'Alice Williams', 'North America'), (5, 'Charlie Brown', 'Europe'); INSERT INTO CropYields (YieldID, FarmerID, CropType, Yield) VALUES (1, 1, 'Wheat', 120.5), (2, 2, 'Corn', 118.0), (3, 3, 'Rice', 110.0), (4, 4, 'Soy', 115.7), (5, 5, 'Barley', 95.0); INSERT INTO Transactions (TransactionID, FarmerID, TransactionType, TransactionDate) VALUES (1, 1, 'COMMIT', '2021-05-01'), (2, 2, 'COMMIT', '2021-06-01'), (3, 3, 'ROLLBACK', '2021-07-01'), (4, 4, 'COMMIT', '2021-08-01'), (5, 5, 'COMMIT', '2021-09-01');","WITH YieldTotals AS (SELECT FarmerID, SUM(Yield) AS TotalYield FROM CropYields GROUP BY FarmerID), NoRollbacks AS (SELECT FarmerID FROM Transactions WHERE TransactionType = 'ROLLBACK' AND TransactionDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) SELECT f.FarmerName, yt.TotalYield FROM YieldTotals yt JOIN Farmers f ON yt.FarmerID = f.FarmerID LEFT JOIN NoRollbacks nr ON yt.FarmerID = nr.FarmerID WHERE nr.FarmerID IS NULL ORDER BY yt.TotalYield DESC LIMIT 5;","The query first calculates the total yield for each farmer by grouping the CropYields table by FarmerID and summing the yield. This result is stored in a common table expression (CTE) named 'YieldTotals'. The second CTE, 'NoRollbacks', finds all farmers who had a transaction rollback in the last year. The main query then joins the 'YieldTotals' and 'Farmers' table on the FarmerID, and performs a left join with 'NoRollbacks' to exclude those farmers. The query then sorts the result by the total yield in descending order and limits the result to the top 5."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Retrieve the top 5 crops with the highest yield per region, considering only those crops that are grown in more than one region.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 3.2), (2, 'Rice', 'Asia', 5.0), (3, 'Corn', 'South America', 2.7), (4, 'Wheat', 'Europe', 3.5), (5, 'Rice', 'North America', 4.2), (6, 'Corn', 'Asia', 3.1), (7, 'Wheat', 'Asia', 4.0), (8, 'Rice', 'South America', 4.8);","WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank, COUNT(DISTINCT Region) OVER (PARTITION BY CropName) AS RegionCount FROM CropYields) SELECT CropName, Yield FROM RankedCrops WHERE Rank <= 5 AND RegionCount > 1;","The query first creates a common table expression (CTE) called RankedCrops. Using a window function, it assigns a rank to each crop within each region, ordered by yield in descending order. It also counts the distinct number of regions each crop appears in. The final SELECT statement retrieves the top 5 crops by yield for each region, but only if the crop is grown in more than one region."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report detailing the top 5 regions with the highest average crop yield for wheat in the last 5 years, including details on the farming practices used in those regions.","CREATE TABLE CropYield (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropType VARCHAR(50), Yield DECIMAL, Year INT); INSERT INTO CropYield (RegionID, RegionName, CropType, Yield, Year) VALUES (1, 'Region 1', 'Wheat', 25000.0, 2017), (2, 'Region 2', 'Wheat', 24000.0, 2018), (3, 'Region 3', 'Wheat', 23000.0, 2019), (4, 'Region 4', 'Wheat', 22000.0, 2020), (5, 'Region 5', 'Wheat', 21000.0, 2021); CREATE TABLE FarmingPractices (RegionID INT, Practice VARCHAR(100), Benefit VARCHAR(100)); INSERT INTO FarmingPractices (RegionID, Practice, Benefit) VALUES (1, 'Crop Rotation', 'Prevents Soil Erosion'), (2, 'Contour Plowing', 'Conserves Water'), (3, 'Organic Farming', 'Improves Soil Health'), (4, 'Permaculture', 'Promotes Biodiversity'), (5, 'Hydroponics', 'Allows Year-Round Farming');","WITH Last5Years AS (SELECT RegionID, AVG(Yield) as AvgYield FROM CropYield WHERE Year >= (SELECT MAX(Year) - 5 FROM CropYield) AND CropType = 'Wheat' GROUP BY RegionID), RankedRegions AS (SELECT RegionID, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM Last5Years) SELECT RR.RegionID, CY.RegionName, RR.AvgYield, FP.Practice, FP.Benefit FROM RankedRegions RR INNER JOIN CropYield CY ON RR.RegionID = CY.RegionID INNER JOIN FarmingPractices FP ON RR.RegionID = FP.RegionID WHERE RR.Rank <= 5;",The query first defines a common table expression (CTE) 'Last5Years' to calculate the average yield for wheat for each region in the last 5 years. Another CTE 'RankedRegions' is then used to rank these regions based on their average yield in descending order. The query then joins these CTEs with the 'CropYield' and 'FarmingPractices' tables to return the top 5 regions along with their average yield and farming practices.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the total CO2 emission data for each European country in 2020, sorted by the descending order of the emissions.","CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, Emission DECIMAL); INSERT INTO CO2Emissions (Country, Year, Emission) VALUES ('Germany', 2020, 754.2), ('France', 2020, 391.6), ('Italy', 2020, 352.6), ('UK', 2020, 415.9), ('Spain', 2020, 278.5);","SELECT Country, Emission FROM CO2Emissions WHERE Year = 2020 ORDER BY Emission DESC;",The SQL query first filters the records by the year 2020. It then sorts the remaining records by the 'Emission' column in descending order and selects the 'Country' and 'Emission' columns for the final output.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert a new AI startup into the database, then rank all AI startups by the amount of funding received and display the top 10 startups.","CREATE TABLE AI_Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), AreaOfFocus VARCHAR(50), FundingInMillions DECIMAL); INSERT INTO AI_Startups (StartupID, StartupName, AreaOfFocus, FundingInMillions) VALUES (1, 'OpenAI', 'Artificial General Intelligence', 1000), (2, 'DeepMind', 'Artificial General Intelligence', 500), (3, 'SenseTime', 'Computer Vision', 2000), (4, 'UiPath', 'Robotic Process Automation', 7000), (5, 'Zymergen', 'Biotechnology', 400);","INSERT INTO AI_Startups (StartupID, StartupName, AreaOfFocus, FundingInMillions) VALUES (6, 'New Startup', 'Natural Language Processing', 200); WITH RankedStartups AS (SELECT StartupName, FundingInMillions, DENSE_RANK() OVER (ORDER BY FundingInMillions DESC) AS Rank FROM AI_Startups) SELECT StartupName, FundingInMillions FROM RankedStartups WHERE Rank <= 10;","The query first inserts a new AI startup into the AI_Startups table. It then creates a common table expression (CTE) to rank the startups based on their funding in descending order. Finally, it selects the top 10 startups with the highest funding."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert the total gross revenue for the latest Marvel movies into a table and then provide the top 5 movies with the highest grossing revenue.,"CREATE TABLE MarvelMovies (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), ReleaseYear INT, GrossRevenue DECIMAL); INSERT INTO MarvelMovies (MovieID, MovieName, ReleaseYear, GrossRevenue) VALUES (1, 'Avengers: Endgame', 2019, 2797800564), (2, 'Avengers: Infinity War', 2018, 2048359754), (3, 'Black Panther', 2018, 1346913161), (4, 'Spider-Man: No Way Home', 2021, 1742587557), (5, 'Captain Marvel', 2019, 1128274794);","WITH RankedMovies AS (SELECT MovieName, GrossRevenue, DENSE_RANK() OVER (ORDER BY GrossRevenue DESC) AS Rank FROM MarvelMovies) SELECT MovieName, GrossRevenue FROM RankedMovies WHERE Rank <= 5;",The SQL query creates a common table expression (CTE) to rank movies based on their gross revenue in descending order. It then selects the top 5 highest grossing movies using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the top 5 programming languages with the highest average salary across different industries and filter out those with less than 100 entries.,"CREATE TABLE TechSalary (ID INT PRIMARY KEY, Language VARCHAR(50), Industry VARCHAR(50), Salary DECIMAL); INSERT INTO TechSalary (ID, Language, Industry, Salary) VALUES (1, 'Python', 'Software', 75000), (2, 'C++', 'Hardware', 80000), (3, 'Java', 'Finance', 90000), (4, 'Python', 'Data Science', 95000), (5, 'Java', 'Software', 85000);","WITH SalaryRank AS (SELECT Language, AVG(Salary) AS AvgSalary, COUNT(*) AS Count FROM TechSalary GROUP BY Language HAVING COUNT(*) > 100) SELECT Language, AvgSalary FROM SalaryRank ORDER BY AvgSalary DESC LIMIT 5;",The query first creates a common table expression (CTE) to calculate the average salary for each programming language and filter out those with less than 100 entries. It then orders the languages by average salary in descending order and limits the result to top 5.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that ranks countries based on the total revenue generated from their patented innovations in the technology sector, and also provide the top 3 sectors contributing to each country's revenue.","CREATE TABLE TechnologyPatents (PatentID INT PRIMARY KEY, Country VARCHAR(50), Sector VARCHAR(50), Revenue DECIMAL); INSERT INTO TechnologyPatents (PatentID, Country, Sector, Revenue) VALUES (1, 'USA', 'AI', 500000), (2, 'China', 'Blockchain', 300000), (3, 'Germany', 'IoT', 200000), (4, 'USA', 'AI', 400000), (5, 'India', 'AI', 100000); CREATE TABLE CountryRevenue (CountryID INT PRIMARY KEY, Country VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO CountryRevenue (CountryID, Country, TotalRevenue) VALUES (1, 'USA', 5000000), (2, 'China', 4000000), (3, 'Germany', 3000000), (4, 'India', 2000000);","WITH CountryRanking AS (SELECT Country, SUM(Revenue) AS TotalRevenue, RANK() OVER (ORDER BY SUM(Revenue) DESC) AS Rank FROM TechnologyPatents GROUP BY Country), SectorContributions AS (SELECT Country, Sector, SUM(Revenue) AS Revenue FROM TechnologyPatents GROUP BY Country, Sector) SELECT CR.Rank, CR.Country, CR.TotalRevenue, SC.Sector, SC.Revenue FROM CountryRanking CR JOIN SectorContributions SC ON CR.Country = SC.Country WHERE CR.Rank <= 5 AND SC.Revenue IN (SELECT MAX(Revenue) FROM SectorContributions GROUP BY Country) ORDER BY CR.Rank, SC.Revenue DESC;","The query first creates a common table expression (CTE) named 'CountryRanking' to calculate the total revenue for each country from their patented innovations and ranks them in descending order. It then creates another CTE 'SectorContributions' to calculate the total revenue per sector for each country. The main query then joins these two CTEs on the 'Country' column and selects the rank, country name, total revenue, sector, and sector revenue. This result set is filtered to only include the top 5 countries and the top 3 sectors per country based on their revenue. The results are ordered by the country rank and sector revenue in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Update the sports event data to correct the inconsistencies and errors in the athletes' performance records, then find the top 3 athletes with the most improved performance over the past year.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Age INT, Sport VARCHAR(50)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE, AthleteID INT, Performance FLOAT); CREATE TABLE PerformanceRecord (RecordID INT PRIMARY KEY, AthleteID INT, EventID INT, Performance FLOAT, RecordDate DATE); INSERT INTO Athletes (AthleteID, AthleteName, Age, Sport) VALUES (1, 'John Doe', 25, 'Swimming'), (2, 'Jane Doe', 23, 'Basketball'), (3, 'Jim Doe', 28, 'Soccer'); INSERT INTO Events (EventID, EventName, EventDate, AthleteID, Performance) VALUES (1, 'Swimming Championship', '2021-05-15', 1, 50.5), (2, 'Basketball League', '2021-06-20', 2, 120.0), (3, 'Soccer World Cup', '2021-07-05', 3, 2.0); INSERT INTO PerformanceRecord (RecordID, AthleteID, EventID, Performance, RecordDate) VALUES (1, 1, 1, 48.0, '2022-05-15'), (2, 2, 2, 125.0, '2022-06-20'), (3, 3, 3, 4.0, '2022-07-05');","UPDATE PerformanceRecord SET Performance = Performance + 5 WHERE AthleteID IN (SELECT AthleteID FROM Athletes WHERE Age < 25); WITH PerfImprovement AS (SELECT AthleteID, MAX(Performance) - MIN(Performance) AS Improvement FROM PerformanceRecord GROUP BY AthleteID) SELECT AthleteName, Sport, Improvement FROM Athletes INNER JOIN PerfImprovement ON Athletes.AthleteID = PerfImprovement.AthleteID ORDER BY Improvement DESC LIMIT 3;","The query first updates the performance records of athletes who are younger than 25 years old by improving their performance by 5 units. Then, it creates a temporary table 'PerfImprovement' to calculate the performance improvement for each athlete over the past year. It does this by subtracting the minimum performance (indicating performance at the beginning of the year) from the maximum performance (indicating performance at the end of the year). The main query then joins the 'Athletes' table and 'PerfImprovement' table on 'AthleteID' to get the athlete names and their sports. It orders the result by the improvement in descending order and limits the result to the top 3 athletes with the highest improvement in performance."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert a new record into the TVShows table for a show that just premiered and has yet to gather any viewership data, then update the viewer ratings for 'The Crown' in the UK region.","CREATE TABLE TVShows (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), Region VARCHAR(50), ViewerRatings DECIMAL); INSERT INTO TVShows (ShowID, ShowName, Region, ViewerRatings) VALUES (1, 'Friends', 'USA', 8.5), (2, 'Breaking Bad', 'USA', 9.5), (3, 'The Crown', 'UK', 8.0);","INSERT INTO TVShows (ShowID, ShowName, Region, ViewerRatings) VALUES (4, 'New Show', 'USA', NULL); UPDATE TVShows SET ViewerRatings = 8.7 WHERE ShowName = 'The Crown' AND Region = 'UK';","The first SQL statement inserts a new record into the TVShows table, setting the ShowID as 4, the ShowName as 'New Show', the Region as 'USA', and the ViewerRatings as NULL since the show just premiered and does not have any viewership data yet. The second SQL statement updates the ViewerRatings for the show named 'The Crown' in the UK region to 8.7."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the total annual expenditure per department from 2015 to 2020, and then provide a list of departments whose total expenditure has increased each year during this period.","CREATE TABLE DepartmentBudget (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), Year INT, Expenditure DECIMAL); INSERT INTO DepartmentBudget (DepartmentID, DepartmentName, Year, Expenditure) VALUES (1, 'Education', 2015, 1000000), (1, 'Education', 2016, 1100000), (1, 'Education', 2017, 1150000), (1, 'Education', 2018, 1200000), (1, 'Education', 2019, 1250000), (1, 'Education', 2020, 1300000), (2, 'Health', 2015, 1500000), (2, 'Health', 2016, 1400000), (2, 'Health', 2017, 1450000), (2, 'Health', 2018, 1550000), (2, 'Health', 2019, 1600000), (2, 'Health', 2020, 1650000), (3, 'Defense', 2015, 2000000), (3, 'Defense', 2016, 2100000), (3, 'Defense', 2017, 2200000), (3, 'Defense', 2018, 2300000), (3, 'Defense', 2019, 2400000), (3, 'Defense', 2020, 2500000);","WITH TotalExpenditure AS (SELECT DepartmentName, SUM(Expenditure) AS TotalExpenditure FROM DepartmentBudget GROUP BY DepartmentName), IncreasingExpenditure AS (SELECT DepartmentName FROM DepartmentBudget WHERE Year = 2016 AND Expenditure > (SELECT Expenditure FROM DepartmentBudget WHERE Year = 2015) INTERSECT SELECT DepartmentName FROM DepartmentBudget WHERE Year = 2017 AND Expenditure > (SELECT Expenditure FROM DepartmentBudget WHERE Year = 2016) INTERSECT SELECT DepartmentName FROM DepartmentBudget WHERE Year = 2018 AND Expenditure > (SELECT Expenditure FROM DepartmentBudget WHERE Year = 2017) INTERSECT SELECT DepartmentName FROM DepartmentBudget WHERE Year = 2019 AND Expenditure > (SELECT Expenditure FROM DepartmentBudget WHERE Year = 2018) INTERSECT SELECT DepartmentName FROM DepartmentBudget WHERE Year = 2020 AND Expenditure > (SELECT Expenditure FROM DepartmentBudget WHERE Year = 2019)) SELECT * FROM TotalExpenditure UNION SELECT * FROM IncreasingExpenditure;","The query first calculates the total annual expenditure per department from 2015 to 2020 using a common table expression (CTE). Then, it uses another CTE to find departments whose expenditure has increased each year during this period using the INTERSECT set operation to find the common departments that meet this criterion for each year-to-year comparison. Finally, it combines the results from both CTEs using UNION to provide a complete report."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert a new record for a YouTube video titled 'Summer Hits 2022' with 5000000 views and 2500000 likes, and get the top 5 videos with most likes.","CREATE TABLE YouTubeVideos (VideoID INT PRIMARY KEY, VideoTitle VARCHAR(100), Views INT, Likes INT); INSERT INTO YouTubeVideos (VideoID, VideoTitle, Views, Likes) VALUES (1, 'Winter Wonderland', 2000000, 800000), (2, 'Spring Fling', 3000000, 1000000), (3, 'Autumn Leaves', 2500000, 700000), (4, 'Summer Vibes', 4000000, 1500000);","INSERT INTO YouTubeVideos (VideoID, VideoTitle, Views, Likes) VALUES (5, 'Summer Hits 2022', 5000000, 2500000); WITH RankedVideos AS (SELECT VideoTitle, Likes, DENSE_RANK() OVER (ORDER BY Likes DESC) AS Rank FROM YouTubeVideos) SELECT VideoTitle, Likes FROM RankedVideos WHERE Rank <= 5;","The query first inserts a new record into the YouTubeVideos table, representing the video 'Summer Hits 2022' with 5000000 views and 2500000 likes. It then creates a common table expression (CTE) to rank videos based on their likes in descending order. Following this, it selects the top 5 most liked videos using the DENSE_RANK function."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Provide a report showing the top 5 destinations preferred by customers from each country in the last three years.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, DestinationID INT, BookingDate DATE); INSERT INTO Destinations (DestinationID, DestinationName, Country) VALUES (1, 'Paris', 'France'), (2, 'London', 'UK'), (3, 'New York', 'USA'), (4, 'Tokyo', 'Japan'), (5, 'Sydney', 'Australia'); INSERT INTO Customers (CustomerID, Name, Country) VALUES (1, 'John Doe', 'USA'), (2, 'Jane Doe', 'UK'), (3, 'Robert Smith', 'Australia'), (4, 'Emily Johnson', 'Japan'), (5, 'William Brown', 'France'); INSERT INTO Bookings (BookingID, CustomerID, DestinationID, BookingDate) VALUES (1, 1, 2, '2020-01-01'), (2, 2, 1, '2020-02-01'), (3, 3, 4, '2020-03-01'), (4, 4, 5, '2020-04-01'), (5, 5, 3, '2020-05-01');","WITH RankedDest AS (SELECT C.Country, D.DestinationName, COUNT(B.BookingID) AS NumBookings, RANK() OVER (PARTITION BY C.Country ORDER BY COUNT(B.BookingID) DESC) AS Rank FROM Customers C JOIN Bookings B ON B.CustomerID = C.CustomerID JOIN Destinations D ON D.DestinationID = B.DestinationID WHERE B.BookingDate >= DATEADD(YEAR, -3, GETDATE()) GROUP BY C.Country, D.DestinationName) SELECT Country, DestinationName, NumBookings FROM RankedDest WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank the destinations based on the number of bookings from customers from each country in the last three years. The RANK() function is used to rank the destinations for each country. It then selects the top 5 destinations for each country using the rank. The final result shows the top 5 preferred destinations by customers from each country in the last three years.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store the performance details of athletes in different sports events and then display the top 5 athletes who have the highest average scores in descending order.,"CREATE TABLE AthletesPerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), EventName VARCHAR(50), Score DECIMAL); INSERT INTO AthletesPerformance (AthleteID, AthleteName, Sport, EventName, Score) VALUES (1, 'John Doe', 'Basketball', '3-Point Shootout', 85.5), (2, 'Jane Smith', 'Gymnastics', 'Balance Beam', 96.0), (3, 'Tom Johnson', 'Swimming', '100m Butterfly', 98.0), (4, 'Emily Davis', 'Athletics', 'Long Jump', 95.7), (5, 'Mike Brown', 'Football', 'Penalty Shootout', 90.0);","WITH RankedAthletes AS (SELECT AthleteName, AVG(Score) as AvgScore, DENSE_RANK() OVER (ORDER BY AVG(Score) DESC) AS Rank FROM AthletesPerformance GROUP BY AthleteName) SELECT AthleteName, AvgScore FROM RankedAthletes WHERE Rank <= 5;",The SQL query creates a common table expression (CTE) named 'RankedAthletes' to calculate the average score of each athlete and rank them in descending order based on their average score using the DENSE_RANK function. It then selects the top 5 athletes with the highest average scores.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report comparing the annual revenue and market share trends of leading electric vehicle manufacturing companies in Europe and Asia over the last five years.,"CREATE TABLE EVManufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50), Region VARCHAR(50)); INSERT INTO EVManufacturers (ManufacturerID, ManufacturerName, Region) VALUES (1, 'Tesla', 'Europe'), (2, 'Nissan', 'Asia'), (3, 'Volkswagen', 'Europe'), (4, 'BYD', 'Asia'), (5, 'BMW', 'Europe'); CREATE TABLE RevenueData (ManufacturerID INT, Year INT, AnnualRevenue DECIMAL); INSERT INTO RevenueData (ManufacturerID, Year, AnnualRevenue) VALUES (1, 2016, 2450.0), (1, 2017, 3200.0), (1, 2018, 4200.0), (1, 2019, 5300.0), (1, 2020, 6200.0), (2, 2016, 800.0), (2, 2017, 1200.0), (2, 2018, 2200.0), (2, 2019, 2900.0), (2, 2020, 3500.0), (3, 2016, 1100.0), (3, 2017, 2000.0), (3, 2018, 3300.0), (3, 2019, 4000.0), (3, 2020, 5000.0), (4, 2016, 500.0), (4, 2017, 800.0), (4, 2018, 1400.0), (4, 2019, 2000.0), (4, 2020, 2500.0), (5, 2016, 1500.0), (5, 2017, 2400.0), (5, 2018, 3500.0), (5, 2019, 4500.0), (5, 2020, 5700.0); CREATE TABLE MarketShareData (ManufacturerID INT, Year INT, MarketShare DECIMAL); INSERT INTO MarketShareData (ManufacturerID, Year, MarketShare) VALUES (1, 2016, 20.0), (1, 2017, 25.0), (1, 2018, 30.0), (1, 2019, 35.0), (1, 2020, 40.0), (2, 2016, 10.0), (2, 2017, 15.0), (2, 2018, 20.0), (2, 2019, 25.0), (2, 2020, 30.0), (3, 2016, 15.0), (3, 2017, 20.0), (3, 2018, 25.0), (3, 2019, 30.0), (3, 2020, 35.0), (4, 2016, 5.0), (4, 2017, 10.0), (4, 2018, 15.0), (4, 2019, 20.0), (4, 2020, 25.0), (5, 2016, 20.0), (5, 2017, 25.0), (5, 2018, 30.0), (5, 2019, 35.0), (5, 2020, 40.0);","WITH Revenue AS (SELECT Year, ManufacturerName, AnnualRevenue FROM EVManufacturers INNER JOIN RevenueData ON EVManufacturers.ManufacturerID = RevenueData.ManufacturerID), MarketShare AS (SELECT Year, ManufacturerName, MarketShare FROM EVManufacturers INNER JOIN MarketShareData ON EVManufacturers.ManufacturerID = MarketShareData.ManufacturerID) SELECT Revenue.Year, Revenue.ManufacturerName, AnnualRevenue, MarketShare FROM Revenue JOIN MarketShare ON Revenue.Year = MarketShare.Year AND Revenue.ManufacturerName = MarketShare.ManufacturerName ORDER BY Revenue.Year, Revenue.ManufacturerName;","The SQL query starts by generating two common table expressions (CTEs): 'Revenue' and 'MarketShare'. The 'Revenue' CTE joins the 'EVManufacturers' and 'RevenueData' tables based on the 'ManufacturerID' and selects the year, manufacturer name, and annual revenue. The 'MarketShare' CTE performs a similar operation, but selects the market share instead of the annual revenue. The main part of the query then joins these two CTEs on both the year and the manufacturer name, and selects the year, manufacturer name, annual revenue, and market share for each row. The results are ordered by year and manufacturer name."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store the sales data of different fashion brands in various regions. We are interested in finding the top 5 brands which have brought the most revenue in the last quarter.,"CREATE TABLE FashionSales (SaleID INT PRIMARY KEY, Brand VARCHAR(50), Region VARCHAR(50), Revenue DECIMAL, Quarter INT); INSERT INTO FashionSales (SaleID, Brand, Region, Revenue, Quarter) VALUES (1, 'Zara', 'North America', 250000, 2), (2, 'H&M', 'Europe', 300000, 2), (3, 'Gucci', 'Asia', 500000, 2), (4, 'Prada', 'North America', 350000, 2), (5, 'Louis Vuitton', 'Europe', 400000, 2);","WITH RankedBrands AS (SELECT Brand, SUM(Revenue) AS TotalRevenue, DENSE_RANK() OVER (ORDER BY SUM(Revenue) DESC) AS Rank FROM FashionSales WHERE Quarter = 2 GROUP BY Brand) SELECT Brand, TotalRevenue FROM RankedBrands WHERE Rank <= 5;","The SQL query creates a common table expression (CTE) to rank the fashion brands based on their total revenue for the last quarter in descending order. It uses the DENSE_RANK function to assign a rank to each brand. Then, it selects the top 5 brands with the highest revenue."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,"Identify the top 10 hotels with the highest average daily room rate (ADR) for each month in 2020, considering only hotels with more than 100 rooms.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), NoOfRooms INT); INSERT INTO Hotels (HotelID, HotelName, NoOfRooms) VALUES (1, 'Hotel ABC', 150), (2, 'Hotel XYZ', 120), (3, 'Hotel PQR', 180); CREATE TABLE RoomRates (RecordID INT PRIMARY KEY, HotelID INT, Day DATE, DailyRate DECIMAL); INSERT INTO RoomRates (RecordID, HotelID, Day, DailyRate) VALUES (1, 1, '2020-01-01', 200.5), (2, 2, '2020-02-01', 210.0), (3, 3, '2020-03-01', 220.0), (4, 1, '2020-04-01', 230.0), (5, 2, '2020-05-01', 240.0);","WITH MonthlyAvg AS (SELECT DATE_PART('month', Day) AS Month, Hotels.HotelName, AVG(RoomRates.DailyRate) AS AvgRate, COUNT(RoomRates.DailyRate) OVER (PARTITION BY Hotels.HotelID, DATE_PART('month', Day)) AS Count FROM RoomRates JOIN Hotels on RoomRates.HotelID = Hotels.HotelID WHERE DATE_PART('year', Day) = 2020 AND Hotels.NoOfRooms > 100 GROUP BY DATE_PART('month', Day), Hotels.HotelID, Hotels.HotelName ORDER BY AvgRate DESC) SELECT Month, HotelName, AvgRate FROM MonthlyAvg WHERE Count <= 10;","This query first creates a common table expression (CTE) to calculate the average daily rate for each hotel for each month of 2020, considering only hotels with more than 100 rooms. The query then uses the ROW_NUMBER() function to rank the average daily rates within each month. The final SELECT statement retrieves the top 10 hotels for each month."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 industries that have had the most significant technological disruption based on the cumulative investment in emerging technology startups over the last 5 years.,"CREATE TABLE TechDisruption (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50), Year INT, TotalInvestment DECIMAL); INSERT INTO TechDisruption (IndustryID, IndustryName, Year, TotalInvestment) VALUES (1, 'Healthcare', 2017, 4500.0), (2, 'Finance', 2018, 5000.0), (3, 'Retail', 2019, 6000.0), (4, 'Energy', 2020, 5500.0), (5, 'Real Estate', 2021, 4800.0);","WITH RankedIndustries AS (SELECT IndustryName, SUM(TotalInvestment) as CumulativeInvestment, RANK() OVER (ORDER BY SUM(TotalInvestment) DESC) AS Rank FROM TechDisruption WHERE Year BETWEEN 2017 AND 2021 GROUP BY IndustryName) SELECT IndustryName, CumulativeInvestment FROM RankedIndustries WHERE Rank <= 5;","The SQL query first groups the investments by industry for the last 5 years (2017-2021), then ranks these industries based on the total investment in descending order. Finally, it selects the top 5 industries with the highest cumulative investment."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the top 5 countries with the highest average crop yield per acre for each type of crop in the last 5 years.,"CREATE TABLE CropYield (RecordID INT PRIMARY KEY, Country VARCHAR(50), CropType VARCHAR(50), Year INT, YieldPerAcre DECIMAL); INSERT INTO CropYield (RecordID, Country, CropType, Year, YieldPerAcre) VALUES (1, 'USA', 'Corn', 2017, 175.0), (2, 'China', 'Rice', 2017, 145.0), (3, 'India', 'Wheat', 2017, 130.0), (4, 'Russia', 'Barley', 2017, 110.7), (5, 'Brazil', 'Soybean', 2017, 95.0);","WITH RankedYields AS (SELECT Country, CropType, AVG(YieldPerAcre) AS AvgYield, DENSE_RANK() OVER (PARTITION BY CropType ORDER BY AVG(YieldPerAcre) DESC) AS Rank FROM CropYield WHERE Year > DATEPART(year, GETDATE()) - 5 GROUP BY Country, CropType) SELECT Country, CropType, AvgYield FROM RankedYields WHERE Rank <= 5;","The query first creates a common table expression (CTE) to calculate the average yield per acre for each type of crop in each country over the last 5 years. It also ranks the countries based on this average yield, separately for each type of crop (this is achieved by the PARTITION BY clause in the DENSE_RANK function). The query then selects the top 5 countries for each crop type, based on this ranking."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Create a report showing the top 5 programming languages used in AI development with their popularity percentage in various regions.,"CREATE TABLE AIProgrammingLanguages (ID INT PRIMARY KEY, Language VARCHAR(50), Region VARCHAR(50), Popularity DECIMAL); INSERT INTO AIProgrammingLanguages (ID, Language, Region, Popularity) VALUES (1, 'Python', 'North America', 55.6), (2, 'Java', 'Asia', 33.2), (3, 'JavaScript', 'Europe', 28.9), (4, 'R', 'North America', 21.8), (5, 'C++', 'Africa', 17.8);","WITH RankedLanguages AS (SELECT Language, Popularity, DENSE_RANK() OVER (ORDER BY Popularity DESC) AS Rank FROM AIProgrammingLanguages) SELECT Language, Popularity FROM RankedLanguages WHERE Rank <= 5;",This SQL query creates a common table expression (CTE) to rank programming languages based on their popularity percentages in descending order. It then selects the top 5 languages using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that will store the vehicle production data for different manufacturers and models, including the production year and quantity. Then, pivot this data to display the total production quantity for each manufacturer for the years 2010 through 2020.","CREATE TABLE VehicleProduction (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50), ModelName VARCHAR(50), ProductionYear INT, Quantity INT); INSERT INTO VehicleProduction (ManufacturerID, ManufacturerName, ModelName, ProductionYear, Quantity) VALUES (1, 'Tesla', 'Model 3', 2020, 500000), (2, 'General Motors', 'Bolt', 2019, 200000), (3, 'Nissan', 'Leaf', 2018, 300000), (4, 'Toyota', 'Prius', 2017, 400000), (5, 'Honda', 'Civic Hybrid', 2016, 350000);","SELECT ManufacturerName, SUM(CASE WHEN ProductionYear BETWEEN 2010 AND 2020 THEN Quantity ELSE 0 END) AS TotalQuantity FROM VehicleProduction GROUP BY ManufacturerName;",The query first applies a conditional statement in the SUM function to only consider rows where the production year is between 2010 and 2020. It then groups the data by manufacturer and calculates the total production quantity for each group.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Provide a monthly breakdown of the average room rates and customer satisfaction scores for the top 3 hotels in Europe based on revenue for the year 2020.,"CREATE TABLE HotelStatistics (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50), Month VARCHAR(50), Year INT, AvgRoomRate DECIMAL, CustomerSatisfactionScore DECIMAL, Revenue DECIMAL); INSERT INTO HotelStatistics (HotelID, HotelName, Region, Month, Year, AvgRoomRate, CustomerSatisfactionScore, Revenue) VALUES (1, 'Hotel Europa', 'Europe', 'January', 2020, 100.5, 4.5, 50000), (2, 'Hotel Panorama', 'Europe', 'January', 2020, 90.0, 4.2, 45000), (3, 'Hotel Vista', 'Europe', 'January', 2020, 110.0, 4.7, 55000);","WITH RankedHotels AS (SELECT HotelName, SUM(Revenue) OVER (PARTITION BY HotelName) AS TotalRevenue FROM HotelStatistics WHERE Year = 2020 AND Region = 'Europe' ORDER BY TotalRevenue DESC) SELECT Top3Hotels.HotelName, HS.Month, HS.AvgRoomRate, HS.CustomerSatisfactionScore FROM (SELECT HotelName FROM RankedHotels LIMIT 3) AS Top3Hotels JOIN HotelStatistics HS ON Top3Hotels.HotelName = HS.HotelName WHERE HS.Year = 2020 AND HS.Region = 'Europe' ORDER BY HS.Month;",The query first creates a common table expression (CTE) which ranks hotels in Europe based on their total revenue in 2020. It then fetches the top 3 hotels from this CTE. The main part of the query then joins this list of top 3 hotels with the original HotelStatistics table to retrieve the average room rate and customer satisfaction score for each of these hotels for each month of the year 2020. The results are ordered by month.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the top 5 actors who have appeared in the most number of movies in the last 5 years and display the number of their movie appearances.,"CREATE TABLE Actors (ActorID INT PRIMARY KEY, ActorName VARCHAR(100)); CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(100), ReleaseDate DATE, ActorID INT); INSERT INTO Actors (ActorID, ActorName) VALUES (1, 'Robert Downey Jr.'), (2, 'Chris Evans'), (3, 'Scarlett Johansson'), (4, 'Chris Hemsworth'), (5, 'Mark Ruffalo'); INSERT INTO Movies (MovieID, MovieName, ReleaseDate, ActorID) VALUES (1, 'Avengers: Endgame', '2019-04-26', 1), (2, 'Avengers: Infinity War', '2018-04-27', 1), (3, 'Captain America: Civil War', '2016-05-06', 2), (4, 'Thor: Ragnarok', '2017-11-03', 4), (5, 'Avengers: Age of Ultron', '2015-05-01', 5);","WITH MovieAppearances AS (SELECT ActorID, COUNT(*) AS NumAppearances FROM Movies WHERE ReleaseDate > DATEADD(year, -5, GETDATE()) GROUP BY ActorID) SELECT A.ActorName, MA.NumAppearances FROM MovieAppearances MA JOIN Actors A ON A.ActorID = MA.ActorID ORDER BY MA.NumAppearances DESC LIMIT 5;",The query first creates a common table expression (CTE) called MovieAppearances that counts the number of movie appearances by each actor in the last 5 years. It then joins this CTE with the Actors table to get the names of the actors and orders the result by the number of appearances in descending order. The LIMIT clause is used to restrict the result to the top 5 actors.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Find out the top 3 popular travel destinations based on the number of hotel bookings, and insert the information into a new table called 'TopDestinations'.","CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, CustomerID INT, Destination VARCHAR(50), HotelID INT); INSERT INTO HotelBookings (BookingID, CustomerID, Destination, HotelID) VALUES (1, 100, 'Paris', 200), (2, 101, 'New York', 201), (3, 102, 'London', 202), (4, 103, 'Paris', 203), (5, 104, 'New York', 204);","CREATE TABLE TopDestinations (Destination VARCHAR(50), BookingCount INT); INSERT INTO TopDestinations (Destination, BookingCount) SELECT Destination, COUNT(*) AS BookingCount FROM HotelBookings GROUP BY Destination ORDER BY BookingCount DESC LIMIT 3;","The SQL query first creates a new table 'TopDestinations' with two columns: 'Destination' and 'BookingCount'. It then inserts into this new table the top 3 travel destinations along with their corresponding number of bookings. The destinations are selected and ordered by the total number of bookings in descending order, so the top destinations come first. The entire operation is limited to 3 rows, so only the top 3 destinations are considered."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert data about new crop yields for various farms and calculate the average yield per crop variety, across different regions over the past year.","CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50)); CREATE TABLE FarmCrops (FarmID INT, CropID INT, YearYear INT, Yield DECIMAL, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID), FOREIGN KEY (CropID) REFERENCES Crops(CropID)); INSERT INTO Farms (FarmID, FarmName, Region) VALUES (1, 'Farm1', 'North America'), (2, 'Farm2', 'Europe'), (3, 'Farm3', 'Asia'); INSERT INTO Crops (CropID, CropName) VALUES (1, 'Corn'), (2, 'Wheat'), (3, 'Soybeans'); INSERT INTO FarmCrops (FarmID, CropID, YearYear, Yield) VALUES (1, 1, 2020, 150.0), (2, 2, 2020, 180.0), (3, 3, 2020, 200.0), (1, 2, 2020, 175.0), (2, 3, 2020, 190.0), (3, 1, 2020, 205.0);","WITH AvgYield AS (SELECT C.CropName, F.Region, AVG(Yield) AS AvgYieldPerCropRegion FROM FarmCrops FC INNER JOIN Farms F ON FC.FarmID = F.FarmID INNER JOIN Crops C ON FC.CropID = C.CropID WHERE YearYear = 2020 GROUP BY C.CropName, F.Region) SELECT * FROM AvgYield;","The query first creates a common table expression (CTE) named 'AvgYield' that calculates the average yield for each crop variety per region, for the year 2020, by joining the 'Farms', 'Crops', and 'FarmCrops' tables. Then, it selects all records from the 'AvgYield' CTE."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find out the top 5 medications that have caused the most severe side effects in female patients aged between 45 and 60 in the region of California.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Gender VARCHAR(6), Age INT, Region VARCHAR(50)); INSERT INTO PatientDemographics (PatientID, Gender, Age, Region) VALUES (1, 'Female', 50, 'California'), (2, 'Male', 45, 'Texas'), (3, 'Female', 55, 'California'), (4, 'Male', 60, 'Florida'), (5, 'Female', 45, 'California'); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, PatientID INT, Medication VARCHAR(50), SideEffectSeverity INT); INSERT INTO TreatmentProtocols (ProtocolID, PatientID, Medication, SideEffectSeverity) VALUES (1, 1, 'MedA', 2), (2, 2, 'MedB', 3), (3, 1, 'MedC', 5), (4, 3, 'MedA', 4), (5, 5, 'MedD', 5);","WITH SevereEffects AS (SELECT Medication, AVG(SideEffectSeverity) AS AvgSeverity FROM TreatmentProtocols WHERE PatientID IN (SELECT PatientID FROM PatientDemographics WHERE Gender='Female' AND Age BETWEEN 45 AND 60 AND Region='California') GROUP BY Medication) SELECT Medication FROM SevereEffects ORDER BY AvgSeverity DESC LIMIT 5;","The SQL query begins by creating a common table expression (CTE) called SevereEffects. This stores the average severity of side effects for each medication used for female patients aged between 45 and 60 in California. Then, it selects the top 5 medications from the CTE, ordered by average severity in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Create a new player in the Players table with ID 101, Name 'John Doe', Team 'Lakers' and Position 'PG'. Then, unpivot the performance data in the SportsEvents table to have a separate row for each metric (Points, Assists, Rebounds) for each player. Finally, calculate the average of each metric for the new player.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50), Position VARCHAR(50)); INSERT INTO Players (PlayerID, PlayerName, Team, Position) VALUES (101, 'John Doe', 'Lakers', 'PG'); CREATE TABLE SportsEvents (PlayerID INT, GameID INT, Points INT, Assists INT, Rebounds INT);","INSERT INTO Players (PlayerID, PlayerName, Team, Position) VALUES (101, 'John Doe', 'Lakers', 'PG'); WITH UnpivotedData AS (SELECT PlayerID, GameID, Metric, Value FROM SportsEvents UNPIVOT (Value FOR Metric IN (Points, Assists, Rebounds)) AS UnpivotTable) SELECT PlayerID, Metric, AVG(Value) AS AverageValue FROM UnpivotedData WHERE PlayerID = 101 GROUP BY PlayerID, Metric;","The query first inserts a new player into the Players table. It then unpivots the SportsEvents table into a format where each row represents a player's performance in a specific metric for a game. Finally, it filters for the new player and calculates the average of each metric across all games."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Update the average yield per acre for corn in the Midwest region to reflect a 10% increase due to adoption of new farming practices, and list the top 5 regions with the most improved corn yields.","CREATE TABLE CropYield (Region VARCHAR(50) PRIMARY KEY, CropName VARCHAR(50), AvgYieldPerAcre DECIMAL); INSERT INTO CropYield (Region, CropName, AvgYieldPerAcre) VALUES ('Midwest', 'Corn', 150.0), ('Southwest', 'Corn', 180.0), ('Northeast', 'Corn', 170.0), ('Southeast', 'Corn', 160.0), ('West', 'Corn', 140.0);","UPDATE CropYield SET AvgYieldPerAcre = AvgYieldPerAcre * 1.1 WHERE Region = 'Midwest' AND CropName = 'Corn'; WITH RankedRegions AS (SELECT Region, AvgYieldPerAcre, DENSE_RANK() OVER (ORDER BY AvgYieldPerAcre DESC) AS Rank FROM CropYield WHERE CropName = 'Corn') SELECT Region, AvgYieldPerAcre FROM RankedRegions WHERE Rank <= 5;","The query first updates the average yield per acre for corn in the Midwest region to reflect a 10% increase. It then creates a common table expression (CTE) to rank regions based on their average corn yield in descending order. Finally, it selects the top 5 regions with the highest average corn yield using the DENSE_RANK function."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Can you provide a list of athletes who've improved their performance the most compared to the previous season in basketball, sorted by improvement percentage in descending order?","CREATE TABLE PlayerPerformance (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), SeasonYear INT, PointsPerGame DECIMAL); INSERT INTO PlayerPerformance (PlayerID, PlayerName, SeasonYear, PointsPerGame) VALUES (1, 'Stephen Curry', 2019, 23.5), (1, 'Stephen Curry', 2020, 32.0), (2, 'LeBron James', 2019, 25.3), (2, 'LeBron James', 2020, 25.0), (3, 'Kevin Durant', 2019, 26.0), (3, 'Kevin Durant', 2020, 27.1);","WITH PerformanceIncrease AS (SELECT PP1.PlayerName, (PP1.PointsPerGame - PP2.PointsPerGame)/PP2.PointsPerGame*100 AS ImprovementPercentage FROM PlayerPerformance PP1 INNER JOIN PlayerPerformance PP2 ON PP1.PlayerID = PP2.PlayerID AND PP1.SeasonYear = PP2.SeasonYear+1) SELECT PlayerName, ImprovementPercentage FROM PerformanceIncrease ORDER BY ImprovementPercentage DESC;","The query first creates a common table expression (CTE) named PerformanceIncrease, which calculates the increase in points per game for each player compared to the previous season. It then selects the players and their respective improvement percentages from this CTE, ordered by the improvement percentage in descending order."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,Show the top 3 technology companies in each continent based on their total patent filings and highlight if there's been an increase or decrease compared to the previous year.,"CREATE TABLE TechCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Continent VARCHAR(50), Year INT, PatentFilings INT); INSERT INTO TechCompanies (CompanyID, CompanyName, Continent, Year, PatentFilings) VALUES (1, 'Apple', 'North America', 2020, 3178), (2, 'Microsoft', 'North America', 2020, 2987), (3, 'IBM', 'North America', 2020, 9219), (4, 'Samsung', 'Asia', 2020, 8821), (5, 'Sony', 'Asia', 2020, 3897), (6, 'Huawei', 'Asia', 2020, 5400), (7, 'Siemens', 'Europe', 2020, 2901), (8, 'Ericsson', 'Europe', 2020, 1420), (9, 'SAP', 'Europe', 2020, 956), (1, 'Apple', 'North America', 2019, 3185), (2, 'Microsoft', 'North America', 2019, 2988), (3, 'IBM', 'North America', 2019, 9200), (4, 'Samsung', 'Asia', 2019, 8811), (5, 'Sony', 'Asia', 2019, 3890), (6, 'Huawei', 'Asia', 2019, 5390), (7, 'Siemens', 'Europe', 2019, 2900), (8, 'Ericsson', 'Europe', 2019, 1425), (9, 'SAP', 'Europe', 2019, 950);","WITH RankedCompanies AS (SELECT CompanyName, Continent, Year, PatentFilings, LAG(PatentFilings) OVER (PARTITION BY CompanyID ORDER BY Year) as PreviousYearPatentFilings, DENSE_RANK() OVER (PARTITION BY Continent ORDER BY PatentFilings DESC) AS Rank FROM TechCompanies) SELECT CompanyName, Continent, Year, PatentFilings, (CASE WHEN PatentFilings > PreviousYearPatentFilings THEN 'Increase' WHEN PatentFilings < PreviousYearPatentFilings THEN 'Decrease' ELSE 'Stable' END) as Trend FROM RankedCompanies WHERE Rank <= 3;","This query creates a common table expression (CTE) to rank technology companies in each continent based on their patent filings in descending order, and calculates the patent filings of the previous year for each company using the LAG function. It then selects the top 3 companies in each continent, their year, patent filings and a trend column that compares current year patent filings with the previous year. The trend column is calculated using a CASE statement which checks if the current year's patent filings is greater than, less than or equal to the previous year's patent filings."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Find the total carbon emissions and energy consumption of each country, along with their biodiversity index and sustainable development initiatives rating. Display this information for the top 5 countries with the highest sustainable development initiatives rating.","CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, CO2Emissions DECIMAL); CREATE TABLE EnergyConsumption (Country VARCHAR(50), Year INT, TotalEnergyConsumption DECIMAL); CREATE TABLE BiodiversityIndex (Country VARCHAR(50), BiodiversityIndex DECIMAL); CREATE TABLE SustainableDev (Country VARCHAR(50), SDIRating DECIMAL);","SELECT ce.Country, TotalCO2, TotalEnergy, BiodiversityIndex, SDIRating FROM (SELECT Country, SUM(CO2Emissions) as TotalCO2 FROM CarbonEmissions GROUP BY Country) as ce INNER JOIN (SELECT Country, SUM(TotalEnergyConsumption) as TotalEnergy FROM EnergyConsumption GROUP BY Country) as ec ON ce.Country = ec.Country INNER JOIN BiodiversityIndex bi ON bi.Country = ce.Country INNER JOIN SustainableDev sd ON sd.Country = ce.Country ORDER BY sd.SDIRating DESC LIMIT 5;","The SQL query first creates subqueries to summarize the total CO2 emissions and total energy consumption by each country. It then uses inner joins to combine this data with the biodiversity index and sustainable development initiatives rating for each country. The result is ordered by the sustainable development initiatives rating in descending order, and limited to the top 5 countries."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Find the total spent on education budget by each state from 2010 to 2020, and then display the states whose total spending exceeded $500 million.","CREATE TABLE StateEducationBudget (StateID INT PRIMARY KEY, StateName VARCHAR(50), Year INT, Budget DECIMAL); INSERT INTO StateEducationBudget (StateID, StateName, Year, Budget) VALUES (1, 'California', 2010, 50.0), (1, 'California', 2011, 52.5), (1, 'California', 2012, 55.0), (2, 'Texas', 2010, 40.0), (2, 'Texas', 2011, 42.5), (2, 'Texas', 2012, 45.0), (3, 'New York', 2010, 60.0), (3, 'New York', 2011, 62.5), (3, 'New York', 2012, 65.0);","WITH TotalSpending AS (SELECT StateName, SUM(Budget) AS TotalBudget FROM StateEducationBudget WHERE Year BETWEEN 2010 AND 2020 GROUP BY StateName) SELECT StateName, TotalBudget FROM TotalSpending WHERE TotalBudget > 500;",The query first creates a common table expression (CTE) that aggregates the total budget for each state from 2010 to 2020. It then selects the states whose total spending exceeded $500 million using the WHERE clause.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert data into the CropYields table for the recent harvest, then update the total yield for the Wheat crop across all regions, and finally delete records of crop failure i.e., where yield was 0. Show me the top 5 regions with the highest total yield for Wheat.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); CREATE TABLE CropFailure (FailureID INT PRIMARY KEY, CropID INT, FailureReason VARCHAR(100)); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 200.5), (2, 'Corn', 'Europe', 300.0), (3, 'Soy', 'Asia', 400.0), (4, 'Wheat', 'South America', 150.0), (5, 'Corn', 'North America', 180.0);","INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (6, 'Wheat', 'Africa', 210.0); UPDATE CropYields SET Yield = Yield + 210.0 WHERE CropName = 'Wheat'; DELETE FROM CropYields WHERE Yield = 0; WITH RankedRegions AS (SELECT Region, SUM(Yield) AS TotalYield, DENSE_RANK() OVER (ORDER BY SUM(Yield) DESC) AS Rank FROM CropYields WHERE CropName = 'Wheat' GROUP BY Region) SELECT Region, TotalYield FROM RankedRegions WHERE Rank <= 5;","First, the query is inserting a new record of Wheat yield in Africa into the CropYields table. Next, it's updating the total yield of Wheat by adding the newly inserted yield to existing yields across all regions. Then, it's deleting records from the CropYields table where the yield was 0, indicating a crop failure. Finally, it's creating a common table expression (CTE) to rank regions based on their total wheat yield in descending order and then selecting the top 5 regions with the highest total yield of Wheat using the DENSE_RANK function."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the top 5 fastest evolving programming languages in the past year based on the number of new projects started.,"CREATE TABLE ProgrammingLanguages (LanguageID INT PRIMARY KEY, LanguageName VARCHAR(50)); INSERT INTO ProgrammingLanguages (LanguageID, LanguageName) VALUES (1, 'Java'), (2, 'Python'), (3, 'JavaScript'), (4, 'C++'), (5, 'Rust'); CREATE TABLE Projects (ProjectID INT PRIMARY KEY, LanguageID INT, StartDate DATE, FOREIGN KEY(LanguageID) REFERENCES ProgrammingLanguages(LanguageID)); INSERT INTO Projects (ProjectID, LanguageID, StartDate) VALUES (1, 1, '2020-01-01'), (2, 2, '2020-03-01'), (3, 3, '2020-05-01'), (4, 4, '2020-07-01'), (5, 5, '2020-09-01');","WITH YearlyProjects AS (SELECT LanguageName, COUNT(ProjectID) AS NewProjects FROM Projects INNER JOIN ProgrammingLanguages ON ProgrammingLanguages.LanguageID = Projects.LanguageID WHERE YEAR(StartDate) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 YEAR)) GROUP BY LanguageName) SELECT LanguageName, NewProjects FROM YearlyProjects ORDER BY NewProjects DESC LIMIT 5;",The query first creates a common table expression that aggregates the number of new projects by language for the last year. It then orders the results by the count of new projects in descending order and selects the top 5 languages.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,List the top 10 countries that have the highest average CO2 emissions from 2010 to 2020 and compare with their reforestation efforts in the same period.,"CREATE TABLE CO2_Emissions (Country VARCHAR(50), Year INT, AvgCO2Emissions DECIMAL); INSERT INTO CO2_Emissions (Country, Year, AvgCO2Emissions) VALUES ('China', 2010, 10.2), ('USA', 2010, 9.5), ('India', 2010, 8.8), ('Russia', 2010, 7.6), ('Japan', 2010, 6.9), ('Germany', 2010, 5.4), ('Iran', 2010, 5.1), ('Saudi Arabia', 2010, 4.6), ('South Korea', 2010, 4.3), ('Canada', 2010, 4.0); CREATE TABLE Reforestation (Country VARCHAR(50), Year INT, ReforestedArea DECIMAL); INSERT INTO Reforestation (Country, Year, ReforestedArea) VALUES ('China', 2010, 12.2), ('USA', 2010, 11.5), ('India', 2010, 10.8), ('Russia', 2010, 9.6), ('Japan', 2010, 8.9), ('Germany', 2010, 7.4), ('Iran', 2010, 7.1), ('Saudi Arabia', 2010, 6.6), ('South Korea', 2010, 6.3), ('Canada', 2010, 6.0);","WITH RankedCountries AS (SELECT Country, AVG(AvgCO2Emissions) as AvgEmissions, DENSE_RANK() OVER (ORDER BY AVG(AvgCO2Emissions) DESC) AS Rank FROM CO2_Emissions WHERE Year BETWEEN 2010 and 2020 GROUP BY Country) SELECT RC.Country, RC.AvgEmissions, R.ReforestedArea FROM RankedCountries RC INNER JOIN Reforestation R ON RC.Country = R.Country AND R.Year BETWEEN 2010 and 2020 WHERE Rank <= 10;","The query first creates a common table expression (CTE) to rank countries based on their average CO2 emissions between 2010 and 2020 in descending order. AVG function is used to calculate the average CO2 emissions and DENSE_RANK function is used to rank the countries. It then joins the CO2 emissions data with the reforestation efforts data on the country name, and selects the top 10 countries with the highest CO2 emissions along with the corresponding reforestation efforts. The JOIN condition also ensures to consider the reforestation efforts between the same period of 2010 and 2020."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Calculate the total amount of grants approved by each agency for projects in education and health sectors. Then, find the top 5 agencies that approved the highest total grant amount in these sectors.","CREATE TABLE GovernmentGrants (GrantID INT PRIMARY KEY, Agency VARCHAR(50), Sector VARCHAR(50), ProjectName VARCHAR(100), GrantAmount DECIMAL); INSERT INTO GovernmentGrants (GrantID, Agency, Sector, ProjectName, GrantAmount) VALUES (1, 'Education Department', 'Education', 'Project A', 1000000), (2, 'Health Department', 'Health', 'Project B', 2000000), (3, 'Education Department', 'Education', 'Project C', 1500000), (4, 'Health Department', 'Health', 'Project D', 3000000), (5, 'Social Services Department', 'Education', 'Project E', 500000);","WITH TotalGrants AS (SELECT Agency, SUM(GrantAmount) AS TotalGrantAmount FROM GovernmentGrants WHERE Sector IN ('Education', 'Health') GROUP BY Agency) SELECT Agency, TotalGrantAmount FROM TotalGrants ORDER BY TotalGrantAmount DESC LIMIT 5;",The SQL query first creates a Common Table Expression (CTE) that calculates the total grant amount approved by each agency in the education and health sectors. It then selects the top 5 agencies that approved the highest total grant amount in these sectors by ordering the agencies in descending order of total grant amount and limiting the output to 5.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store biodiversity data per region, then use this data to find the average, minimum, and maximum species count for each conservation status, and display the results in a pivoted format.","CREATE TABLE Biodiversity (Region VARCHAR(50), ConservationStatus VARCHAR(50), SpeciesCount INT); INSERT INTO Biodiversity (Region, ConservationStatus, SpeciesCount) VALUES ('Africa', 'Endangered', 120), ('Asia', 'Endangered', 80), ('Europe', 'Vulnerable', 90), ('North America', 'Least Concern', 200), ('South America', 'Endangered', 150);","WITH PivotedData AS (SELECT ConservationStatus, AVG(SpeciesCount) AS Average, MIN(SpeciesCount) AS Minimum, MAX(SpeciesCount) AS Maximum FROM Biodiversity GROUP BY ConservationStatus) SELECT * FROM PivotedData PIVOT (SUM(Average) FOR ConservationStatus IN ('Endangered', 'Vulnerable', 'Least Concern'));","The query first creates a common table expression (CTE) called PivotedData, which gets the average, minimum, and maximum species count for each conservation status from the Biodiversity table. Then it pivots the data in the CTE to create a new table where each conservation status is a column and the corresponding values are the average species count."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table for storing data on the adoption of different emerging technologies in various industries. Then, create a pivoted view that shows the rate of adoption for each technology in each industry.","CREATE TABLE TechAdoption (IndustryID INT PRIMARY KEY, Industry VARCHAR(50), TechID INT, Technology VARCHAR(50), AdoptionRate DECIMAL); INSERT INTO TechAdoption (IndustryID, Industry, TechID, Technology, AdoptionRate) VALUES (1, 'Automotive', 1, 'AI', 45.5), (2, 'Healthcare', 2, 'Blockchain', 30.2), (3, 'Finance', 3, 'Cloud Computing', 75.0), (4, 'Retail', 4, 'VR', 35.7), (5, 'Education', 5, 'EdTech', 55.0);","CREATE VIEW PivotedAdoption AS SELECT * FROM (SELECT Industry, Technology, AdoptionRate FROM TechAdoption) PIVOT (AVG(AdoptionRate) FOR Technology IN ('AI', 'Blockchain', 'Cloud Computing', 'VR', 'EdTech'));","The query creates a view that pivots the original TechAdoption table. The PIVOT operation transforms each unique value in the 'Technology' column into its own column in the output, and fills the values for these columns using the average 'AdoptionRate' for each technology in each industry."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average yield for each crop type and sort the results in descending order, starting a new transaction for each insert operation.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropType VARCHAR(50), Yield DECIMAL, TransactionID INT); INSERT INTO CropYields (CropID, CropType, Yield, TransactionID) VALUES (1, 'Corn', 120.5, 101), (2, 'Wheat', 118.0, 102), (3, 'Rice', 110.0, 103), (4, 'Barley', 115.7, 104), (5, 'Soybean', 95.0, 105);","BEGIN TRANSACTION; WITH AverageYields AS (SELECT CropType, AVG(Yield) AS AvgYield FROM CropYields GROUP BY CropType) SELECT CropType, AvgYield FROM AverageYields ORDER BY AvgYield DESC; COMMIT;","The query starts a new transaction and creates a common table expression (CTE) to calculate the average yield for each type of crop. It then selects the crop type and average yield from the CTE and sorts the result in descending order of average yield. Finally, it commits the transaction."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Create a table to store vehicle sales data, then insert some records and show the total sales for each model in Europe.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, UnitsSold) VALUES (1, 'Model S', 'Europe', 5000), (2, 'Model 3', 'Europe', 7000), (3, 'Leaf', 'Europe', 6000), (4, 'Bolt', 'North America', 4000), (5, 'Prius', 'North America', 5500);","SELECT ModelName, SUM(UnitsSold) as TotalSales FROM VehicleSales WHERE Region = 'Europe' GROUP BY ModelName;","The SQL query first filters the records for the region 'Europe'. Then, it groups the data by 'ModelName' and calculates the total number of units sold for each model. This gives us the total sales for each vehicle model in Europe."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that compares the annual carbon emissions from different industries in various countries, focusing on the top 5 industries with the highest emissions.","CREATE TABLE CarbonEmissions (Country VARCHAR(50), Industry VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CarbonEmissions (Country, Industry, Year, Emissions) VALUES ('USA', 'Transportation', 2020, 1500.7), ('USA', 'Energy', 2020, 1200.3), ('Germany', 'Manufacturing', 2020, 1000.5), ('China', 'Transportation', 2020, 1800.1), ('China', 'Energy', 2020, 2200.0), ('India', 'Agriculture', 2020, 900.2);","WITH RankedIndustries AS (SELECT Country, Industry, SUM(Emissions) AS TotalEmissions, DENSE_RANK() OVER (PARTITION BY Country ORDER BY SUM(Emissions) DESC) AS Rank FROM CarbonEmissions GROUP BY Country, Industry) SELECT Country, Industry, TotalEmissions FROM RankedIndustries WHERE Rank <= 5;","The query first groups the data by country and industry, calculating the total emissions for each combination. It then ranks these groups within each country according to the total emissions in descending order, with the DENSE_RANK function ensuring that industries with equal emissions get the same rank. Finally, it selects the top 5 industries in each country based on this ranking."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the highest selling innovative products in each region for the year 2020.,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Category VARCHAR(50), IsInnovative BIT); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, Region VARCHAR(50), UnitsSold INT, Year INT); INSERT INTO Products (ProductID, ProductName, Category, IsInnovative) VALUES (1, 'Smart Watch', 'Electronics', 1), (2, 'VR Headset', 'Gaming', 1), (3, 'Electric Car', 'Automotive', 1), (4, 'AI Assistant', 'Software', 1), (5, 'Drone', 'Electronics', 1); INSERT INTO Sales (SaleID, ProductID, Region, UnitsSold, Year) VALUES (1, 1, 'North America', 5000, 2020), (2, 2, 'Europe', 6000, 2020), (3, 3, 'Asia', 7000, 2020), (4, 4, 'North America', 8000, 2020), (5, 5, 'Europe', 9000, 2020);","WITH InnovativeSales AS (SELECT P.ProductName, S.Region, SUM(S.UnitsSold) AS TotalSold FROM Products P INNER JOIN Sales S ON P.ProductID = S.ProductID WHERE P.IsInnovative = 1 AND S.Year = 2020 GROUP BY P.ProductName, S.Region), MaxSales AS (SELECT Region, MAX(TotalSold) AS HighestSold FROM InnovativeSales GROUP BY Region) SELECT IS.ProductName, IS.Region, IS.TotalSold FROM InnovativeSales IS INNER JOIN MaxSales MS ON IS.Region = MS.Region AND IS.TotalSold = MS.HighestSold;","This query first creates a common table expression (CTE) named InnovativeSales that calculates the total units sold for each innovative product in each region for the year 2020. Then, it creates another CTE named MaxSales that determines the highest selling innovative product in each region. Finally, it joins the two CTEs to generate a report showing the highest selling innovative product in each region for the year 2020."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores comprehensive data on patients like their demographics, medical histories, treatment protocols, and outcomes, and then display the top 5 patients with the most effective drug treatments based on their recovery speed.","CREATE TABLE PatientData (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), MedicalHistory VARCHAR(1000), TreatmentProtocol VARCHAR(1000), OutcomeSpeed DECIMAL); INSERT INTO PatientData (PatientID, Name, Age, Gender, MedicalHistory, TreatmentProtocol, OutcomeSpeed) VALUES (1, 'John Doe', 45, 'Male', 'Diabetes, Hypertension', 'Insulin, Antihypertensives', 7.5), (2, 'Jane Smith', 50, 'Female', 'Asthma', 'Corticosteroids', 8.0), (3, 'Bob Brown', 30, 'Male', 'Migraine', 'Triptans', 6.0), (4, 'Alice Green', 35, 'Female', 'Hyperthyroidism', 'Antithyroid Drugs', 9.5), (5, 'Charlie Blue', 40, 'Male', 'Gout', 'Nonsteroidal Anti-Inflammatory Drugs', 7.0);","WITH RankedPatients AS (SELECT Name, OutcomeSpeed, DENSE_RANK() OVER (ORDER BY OutcomeSpeed DESC) AS Rank FROM PatientData) SELECT Name, OutcomeSpeed FROM RankedPatients WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank patients based on their recovery speed in descending order. It then selects the top 5 patients who had the most effective drug treatments based on their recovery speed using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Delete the records of all inactive users from the database and then find the top 5 genres of content that active users spend the most time consuming.,"CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(100), IsActive BOOLEAN); INSERT INTO Users (UserID, UserName, IsActive) VALUES (1, 'John', TRUE), (2, 'Henry', FALSE), (3, 'Anna', TRUE), (4, 'Lisa', FALSE), (5, 'Mike', TRUE); CREATE TABLE UserMediaConsumption (UserID INT, GenreID INT, HoursConsumed DECIMAL); INSERT INTO UserMediaConsumption (UserID, GenreID, HoursConsumed) VALUES (1, 1, 50.0), (2, 2, 40.0), (3, 3, 60.0), (4, 4, 70.0), (5, 5, 80.0); CREATE TABLE Genres (GenreID INT PRIMARY KEY, GenreName VARCHAR(50)); INSERT INTO Genres (GenreID, GenreName) VALUES (1, 'Drama'), (2, 'Action'), (3, 'Comedy'), (4, 'Horror'), (5, 'Sci-fi');","WITH ActiveUsers AS (SELECT UserID FROM Users WHERE IsActive = TRUE), DeletedUsers AS (DELETE FROM Users WHERE IsActive = FALSE), ActiveConsumption AS (SELECT GenreID, SUM(HoursConsumed) AS TotalHours FROM UserMediaConsumption WHERE UserID IN (SELECT UserID FROM ActiveUsers) GROUP BY GenreID) SELECT g.GenreName, ac.TotalHours FROM ActiveConsumption ac JOIN Genres g ON ac.GenreID = g.GenreID ORDER BY ac.TotalHours DESC LIMIT 5;","This query first selects all active users and deletes all inactive users from the Users table. It then calculates the total hours of content consumed per genre by these active users. Finally, it joins the Genres table to get the genre names and orders the genres by the total hours consumed in descending order, returning the top 5."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records","Create a table that tracks the growth of different AI technologies over the years, and display the trend of each technology's growth over the last five years.","CREATE TABLE AITechnologyGrowth (TechID INT PRIMARY KEY, TechName VARCHAR(50), Year INT, GrowthRate DECIMAL); INSERT INTO AITechnologyGrowth (TechID, TechName, Year, GrowthRate) VALUES (1, 'Machine Learning', 2018, 12.5), (2, 'Deep Learning', 2018, 15.2), (3, 'Natural Language Processing', 2018, 10.3), (4, 'Robotics', 2018, 9.7), (5, 'Computer Vision', 2018, 14.2);","WITH TechGrowth AS (SELECT TechName, GrowthRate, RANK() OVER (PARTITION BY TechName ORDER BY Year DESC) AS RecentYear FROM AITechnologyGrowth) SELECT TechName, GrowthRate FROM TechGrowth WHERE RecentYear <= 5;","The query creates a common table expression (CTE) to rank the growth of each AI technology over the years. It uses the RANK() function partitioned by technology to handle each technology's growth separately, ordering by year in descending order to get the most recent years first. It then selects the growth rate of each technology for the last five years using the result of the RANK() as a filter."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that displays the top 5 sustainable fashion brands based on the percentage of sustainable materials they use, average consumer rating, and their global market share.","CREATE TABLE SustainableBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), PctSustainableMaterials DECIMAL, AvgConsumerRating DECIMAL, GlobalMarketShare DECIMAL); INSERT INTO SustainableBrands (BrandID, BrandName, PctSustainableMaterials, AvgConsumerRating, GlobalMarketShare) VALUES (1, 'Brand A', 80.0, 4.5, 15.0), (2, 'Brand B', 75.0, 4.7, 10.0), (3, 'Brand C', 85.0, 4.2, 8.0), (4, 'Brand D', 90.0, 4.1, 12.0), (5, 'Brand E', 70.0, 4.8, 14.0);","WITH RankedBrands AS (SELECT BrandName, PctSustainableMaterials, AvgConsumerRating, GlobalMarketShare, RANK() OVER (ORDER BY PctSustainableMaterials DESC, AvgConsumerRating DESC, GlobalMarketShare DESC) AS Rank FROM SustainableBrands) SELECT BrandName, PctSustainableMaterials, AvgConsumerRating, GlobalMarketShare FROM RankedBrands WHERE Rank <= 5;","The query first creates a common table expression (CTE) that ranks each fashion brand based on the percentage of sustainable materials they use, their average consumer rating, and their global market share in descending order. It then selects the top 5 brands based on this ranking."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the yield of different crop types in various regions for different years, and then list the top 3 years with the highest average yield for each crop in each region.","CREATE TABLE CropYields (YieldID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO CropYields (YieldID, CropType, Region, Year, Yield) VALUES (1, 'Wheat', 'North America', 2000, 1.2), (2, 'Wheat', 'North America', 2001, 1.3), (3, 'Wheat', 'North America', 2002, 1.5), (4, 'Rice', 'Asia', 2000, 2.5), (5, 'Rice', 'Asia', 2001, 2.6);","WITH RankedYears AS (SELECT CropType, Region, Year, Yield, RANK() OVER (PARTITION BY CropType, Region ORDER BY Yield DESC) AS Rank FROM CropYields) SELECT CropType, Region, Year, Yield FROM RankedYears WHERE Rank <= 3;","The SQL query first creates a common table expression (CTE) named 'RankedYears' which ranks the years within each crop type and region based on the yield in descending order using the RANK() window function. It then selects the crop type, region, year and yield from this CTE for the top 3 ranked years (i.e., the years with the highest yield) for each combination of crop type and region."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 technologies that had the highest growth in patent applications over the last 5 years.,"CREATE TABLE PatentGrowth (TechID INT PRIMARY KEY, TechName VARCHAR(50), Year INT, PatentApplications INT); INSERT INTO PatentGrowth (TechID, TechName, Year, PatentApplications) VALUES (1, 'AI', 2015, 1000), (1, 'AI', 2016, 2000), (1, 'AI', 2017, 3000), (1, 'AI', 2018, 5000), (1, 'AI', 2019, 7000), (2, 'Blockchain', 2015, 500), (2, 'Blockchain', 2016, 1000), (2, 'Blockchain', 2017, 1500), (2, 'Blockchain', 2018, 2000), (2, 'Blockchain', 2019, 2500), (3, 'VR', 2015, 700), (3, 'VR', 2016, 1300), (3, 'VR', 2017, 1900), (3, 'VR', 2018, 2500), (3, 'VR', 2019, 3100);","WITH Growth AS (SELECT TechName, (MAX(PatentApplications) - MIN(PatentApplications)) AS Growth FROM PatentGrowth GROUP BY TechName) SELECT TechName, Growth FROM Growth ORDER BY Growth DESC LIMIT 5;",The query first creates a common table expression (CTE) to calculate the growth in patent applications for each technology over the last 5 years. The growth is calculated as the difference between the maximum and minimum number of patent applications. The query then selects the top 5 technologies with the highest growth and orders them in descending order of growth.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 crops with highest yield per hectare in the region with highest average rainfall.,"CREATE TABLE Rainfall (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), AvgRainfall DECIMAL); INSERT INTO Rainfall (RegionID, RegionName, AvgRainfall) VALUES (1, 'Region A', 250.5), (2, 'Region B', 210.0), (3, 'Region C', 180.0); CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), RegionID INT, YieldPerHectare DECIMAL); INSERT INTO CropYield (CropID, CropName, RegionID, YieldPerHectare) VALUES (1, 'Wheat', 1, 8.5), (2, 'Rice', 1, 7.0), (3, 'Corn', 2, 6.0), (4, 'Soybean', 3, 5.7), (5, 'Barley', 2, 6.0);","WITH RankedRegions AS (SELECT RegionID, AvgRainfall, DENSE_RANK() OVER (ORDER BY AvgRainfall DESC) AS Rank FROM Rainfall) SELECT CropName, YieldPerHectare FROM CropYield WHERE RegionID IN (SELECT RegionID FROM RankedRegions WHERE Rank = 1) ORDER BY YieldPerHectare DESC LIMIT 5;",The query first creates a common table expression (CTE) to rank regions based on their average rainfall in descending order. It then selects the crops from the region with the highest average rainfall and orders them by yield per hectare in descending order. The result is the top 5 crops with the highest yield per hectare in the region with the highest average rainfall.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Provide a list of the top 10 countries with the highest average wheat yield over the last 5 years, along with the main farming practice used in each of these countries.","CREATE TABLE CountryYield (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, WheatYield DECIMAL); INSERT INTO CountryYield (CountryID, CountryName, Year, WheatYield) VALUES (1, 'USA', 2017, 800.5), (2, 'USA', 2018, 820.0), (3, 'USA', 2019, 850.0), (4, 'USA', 2020, 870.0), (5, 'USA', 2021, 900.0), (6, 'Canada', 2017, 750.0), (7, 'Canada', 2018, 770.0), (8, 'Canada', 2019, 790.0), (9, 'Canada', 2020, 810.0), (10, 'Canada', 2021, 830.0); CREATE TABLE FarmingPractice (CountryID INT PRIMARY KEY, FarmingPractice VARCHAR(50)); INSERT INTO FarmingPractice (CountryID, FarmingPractice) VALUES (1, 'Conventional'), (6, 'Organic');","WITH AverageYield AS (SELECT CountryID, AVG(WheatYield) AS AvgYield FROM CountryYield WHERE Year >= (SELECT MAX(Year) - 5 FROM CountryYield) GROUP BY CountryID) SELECT cy.CountryName, fp.FarmingPractice, ay.AvgYield FROM AverageYield ay JOIN CountryYield cy ON ay.CountryID = cy.CountryID JOIN FarmingPractice fp ON cy.CountryID = fp.CountryID ORDER BY ay.AvgYield DESC LIMIT 10;","The query first creates a subquery (AverageYield) to calculate the average wheat yield for each country over the last 5 years. It then joins this subquery with the CountryYield and FarmingPractice tables in the main query to return the country name, farming practice, and average yield. The results are ordered by average yield in descending order and limited to the top 10 countries."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert a new patient record, update the treatment protocol for an existing patient, and then identify the top 5 medications with the highest average side effects score among patients aged 65 and over.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MedicalHistory VARCHAR(200)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, Protocol VARCHAR(100)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, Name VARCHAR(50), SideEffectScore DECIMAL); CREATE TABLE TreatmentMedications (TreatmentID INT, MedicationID INT); INSERT INTO Patients (PatientID, Age, Gender, MedicalHistory) VALUES (1, 70, 'Male', 'Hypertension'), (2, 65, 'Female', 'Diabetes'); INSERT INTO Treatments (TreatmentID, PatientID, Protocol) VALUES (1, 1, 'Protocol A'), (2, 2, 'Protocol B'); INSERT INTO Medications (MedicationID, Name, SideEffectScore) VALUES (1, 'Med A', 2.5), (2, 'Med B', 3.0); INSERT INTO TreatmentMedications (TreatmentID, MedicationID) VALUES (1, 1), (2, 2);","INSERT INTO Patients (PatientID, Age, Gender, MedicalHistory) VALUES (3, 75, 'Female', 'Heart Disease'); UPDATE Treatments SET Protocol = 'Protocol C' WHERE PatientID = 1; WITH SeniorPatients AS (SELECT tm.TreatmentID, m.Name, m.SideEffectScore FROM Patients p JOIN Treatments t ON p.PatientID = t.PatientID JOIN TreatmentMedications tm ON t.TreatmentID = tm.TreatmentID JOIN Medications m ON tm.MedicationID = m.MedicationID WHERE p.Age >= 65), RankedMeds AS (SELECT Name, AVG(SideEffectScore) AS AverageScore, ROW_NUMBER() OVER (ORDER BY AVG(SideEffectScore) DESC) as Rank FROM SeniorPatients GROUP BY Name) SELECT Name, AverageScore FROM RankedMeds WHERE Rank <= 5;","The SQL first inserts a new patient into the Patients table with given details. Then, it updates the treatment protocol for the patient with PatientID 1 in the Treatments table. Afterwards, it creates a common table expression (CTE) to select the necessary data from Patients, Treatments, TreatmentMedications, and Medications tables where the patient's age is 65 or over. The next CTE, RankedMeds, calculates the average side effect score for each medication and ranks them in descending order. Finally, it selects the top 5 medications with the highest average side effect score."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report showing the yearly growth rate of IoT devices across various industries from 2015 to 2020, where growth rate is defined as the percentage increase in the number of devices compared to the previous year.","CREATE TABLE IoTDevices (Year INT, Industry VARCHAR(50), NumberOfDevices INT); INSERT INTO IoTDevices (Year, Industry, NumberOfDevices) VALUES (2015, 'Healthcare', 1000), (2016, 'Healthcare', 1500), (2017, 'Healthcare', 2000), (2018, 'Healthcare', 2500), (2019, 'Healthcare', 3000), (2020, 'Healthcare', 4000), (2015, 'Manufacturing', 2000), (2016, 'Manufacturing', 2500), (2017, 'Manufacturing', 3000), (2018, 'Manufacturing', 3500), (2019, 'Manufacturing', 4000), (2020, 'Manufacturing', 5000);","WITH YearlyGrowth AS (SELECT Year, Industry, NumberOfDevices, LAG(NumberOfDevices) OVER (PARTITION BY Industry ORDER BY Year) as PreviousYearDevices FROM IoTDevices), GrowthRate AS (SELECT Year, Industry, (NumberOfDevices - PreviousYearDevices) * 100.0 / PreviousYearDevices as GrowthRate FROM YearlyGrowth) SELECT * FROM GrowthRate;","The SQL query first creates a subquery named 'YearlyGrowth', which adds a column 'PreviousYearDevices' to each row in the 'IoTDevices' table using the LAG function. This column represents the number of devices in the previous year for the same industry. Then, a second subquery named 'GrowthRate' is created, which calculates the growth rate for each year and industry as the percentage increase in the number of devices compared to the previous year. Finally, the result of the 'GrowthRate' subquery is returned."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a database to store information about different crops, their yield in different regions, and the farming practices used. Then, pivot this information to view the average yield for each farming practice per region.","CREATE TABLE CropInfo (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), FarmingPractice VARCHAR(50), Yield DECIMAL); INSERT INTO CropInfo (CropID, CropName, Region, FarmingPractice, Yield) VALUES (1, 'Wheat', 'North America', 'Organic', 28.5), (2, 'Corn', 'Europe', 'Conventional', 118.0), (3, 'Soy', 'Asia', 'Organic', 50.0), (4, 'Rice', 'North America', 'Conventional', 95.7), (5, 'Barley', 'Europe', 'Organic', 75.0);","SELECT FarmingPractice, [North America], [Europe], [Asia] FROM (SELECT FarmingPractice, Region, AVG(Yield) as AvgYield FROM CropInfo GROUP BY FarmingPractice, Region) as SourceTable PIVOT (AVG(AvgYield) FOR Region IN ([North America], [Europe], [Asia])) as PivotTable;","This query first groups the data based on farming practice and region, calculating the average yield for each group. Then, it pivots the data based on the region, displaying the average yield for each farming practice in each region."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a new table that stores the annual crop yield per region. Then generate a report that shows the top 5 crops with the highest yield for each region over the last 5 years, sorted by the total yield in descending order.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL, Year INT); INSERT INTO CropYield (CropID, CropName, Region, Yield, Year) VALUES (1, 'Wheat', 'North America', 120.5, 2020), (2, 'Rice', 'Asia', 118.0, 2020), (3, 'Corn', 'Europe', 110.0, 2020), (4, 'Soybean', 'North America', 115.7, 2020), (5, 'Barley', 'Australia', 95.0, 2020); CREATE TABLE Region (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); INSERT INTO Region (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'), (4, 'Australia');","WITH RankedCrops AS (SELECT CropName, Region, SUM(Yield) AS TotalYield, RANK() OVER (PARTITION BY Region ORDER BY SUM(Yield) DESC) AS Rank FROM CropYield WHERE Year >= (SELECT MAX(Year) - 5 FROM CropYield) GROUP BY CropName, Region) SELECT CropName, Region, TotalYield FROM RankedCrops WHERE Rank <= 5 ORDER BY TotalYield DESC;",The query first calculates the total yield for each crop by region over the last 5 years using a GROUP BY clause. It then ranks these totals within each region using the RANK() function. The outer query then filters for only the top 5 crops by yield within each region. The results are finally ordered by the total yield in descending order.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the top 3 most preferred room types in each city for the last 3 years based on the bookings table.,"CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, RoomType VARCHAR(50), City VARCHAR(50), BookingDate DATE); INSERT INTO Bookings (BookingID, CustomerID, RoomType, City, BookingDate) VALUES (1, 123, 'Single', 'New York', '2020-04-20'), (2, 456, 'Double', 'London', '2019-06-15'), (3, 789, 'Suite', 'Paris', '2018-11-30'), (4, 321, 'Double', 'New York', '2019-01-10'), (5, 654, 'Suite', 'London', '2020-08-05');","WITH BookingsLast3Years AS (SELECT RoomType, City, COUNT(*) AS NumberOfBookings FROM Bookings WHERE BookingDate >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) GROUP BY RoomType, City), RankedBookings AS (SELECT RoomType, City, NumberOfBookings, DENSE_RANK() OVER (PARTITION BY City ORDER BY NumberOfBookings DESC) AS Rank FROM BookingsLast3Years) SELECT RoomType, City, NumberOfBookings FROM RankedBookings WHERE Rank <= 3;","The query first creates a common table expression (CTE) to count the number of bookings for each room type in each city for the last 3 years. It then ranks these bookings within each city based on the number of bookings in descending order using the DENSE_RANK function. Finally, it selects the room type, city, and number of bookings for the top 3 ranked bookings in each city."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert data into the CropYield table for the last harvesting season and then display the top 5 regions with the highest average crop yield per hectare.,"CREATE TABLE CropYield (HarvestID INT PRIMARY KEY, Region VARCHAR(50), CropName VARCHAR(50), Season VARCHAR(50), YieldPerHectare DECIMAL); INSERT INTO CropYield (HarvestID, Region, CropName, Season, YieldPerHectare) VALUES (1, 'Region A', 'Wheat', 'Summer', 1.5), (2, 'Region B', 'Corn', 'Winter', 2.0), (3, 'Region C', 'Soybean', 'Autumn', 2.5), (4, 'Region D', 'Rice', 'Spring', 3.0), (5, 'Region E', 'Barley', 'Winter', 2.5);","WITH RankedRegions AS (SELECT Region, AVG(YieldPerHectare) AS AvgYield, DENSE_RANK() OVER (ORDER BY AVG(YieldPerHectare) DESC) AS Rank FROM CropYield GROUP BY Region) SELECT Region, AvgYield FROM RankedRegions WHERE Rank <= 5;","The query first inserts data into the CropYield table for the different regions, crops, and seasons. After that, it creates a common table expression (CTE) to calculate the average yield per hectare for each region and ranks them in descending order. It then selects the top 5 regions with the highest average yield per hectare using the DENSE_RANK function."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show the top 3 countries with the highest average hotel ratings for the year 2020.,"CREATE TABLE HotelRatings (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Country VARCHAR(50), Year INT, Rating DECIMAL); INSERT INTO HotelRatings (HotelID, HotelName, Country, Year, Rating) VALUES (1, 'Hotel Alpha', 'USA', 2020, 8.5), (2, 'Hotel Beta', 'France', 2020, 9.0), (3, 'Hotel Gamma', 'Spain', 2020, 7.5), (4, 'Hotel Delta', 'USA', 2020, 9.2), (5, 'Hotel Epsilon', 'France', 2020, 8.8);","WITH AvgRatings AS (SELECT Country, AVG(Rating) AS AvgRating FROM HotelRatings WHERE Year = 2020 GROUP BY Country) SELECT Country, AvgRating FROM AvgRatings ORDER BY AvgRating DESC LIMIT 3;","The query first creates a common table expression (CTE) to calculate the average rating for each country for the year 2020. It then selects the top 3 countries with the highest average ratings, ordered in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Find the top three hotels that have the highest average customer rating in each city, also show their occupancy rates, but only for hotels that have been updated in the database in the last year.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50), LastUpdate DATE); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, CustomerRating DECIMAL); CREATE TABLE Occupancy (HotelID INT, Date DATE, OccupancyRate DECIMAL); INSERT INTO Hotels VALUES (1, 'Hotel A', 'City 1', '2020-06-12'), (2, 'Hotel B', 'City 2', '2021-04-18'), (3, 'Hotel C', 'City 3', '2019-09-10'), (4, 'Hotel D', 'City 1', '2021-02-25'), (5, 'Hotel E', 'City 2', '2018-07-30'); INSERT INTO Reviews VALUES (1, 1, 8.9), (2, 2, 8.7), (3, 3, 9.0), (4, 4, 9.2), (5, 5, 7.6); INSERT INTO Occupancy VALUES (1, '2021-04-18', 80.0), (2, '2021-04-18', 85.0), (3, '2021-04-18', 70.0), (4, '2021-04-18', 90.0), (5, '2021-04-18', 75.0);","WITH AvgRatings AS (SELECT R.HotelID, AVG(R.CustomerRating) AS AvgRating FROM Reviews R WHERE EXISTS (SELECT 1 FROM Hotels H WHERE H.HotelID = R.HotelID AND H.LastUpdate >= DATEADD(year, -1, GETDATE())) GROUP BY R.HotelID), RankedHotels AS (SELECT H.HotelName, H.City, AR.AvgRating, O.OccupancyRate, DENSE_RANK() OVER (PARTITION BY H.City ORDER BY AR.AvgRating DESC) AS Rank FROM Hotels H INNER JOIN AvgRatings AR ON H.HotelID = AR.HotelID INNER JOIN Occupancy O ON H.HotelID = O.HotelID) SELECT HotelName, City, AvgRating, OccupancyRate FROM RankedHotels WHERE Rank <= 3;","The query first calculates the average customer rating for each hotel that has been updated in the last year using a subquery. It then ranks these hotels within each city based on their average rating using the DENSE_RANK function in a common table expression (CTE). After that, it joins the hotels table, the average ratings, and the occupancy rates together based on the hotel ID. Finally, it selects the hotel name, city, average rating, and occupancy rate for the top three hotels in each city."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,data retrieval: basic data fetching queries,Show the top 5 players in the NBA in terms of average points per game for the latest season,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50), Position VARCHAR(50)); CREATE TABLE PlayerStats (StatID INT PRIMARY KEY, PlayerID INT, SeasonYear INT, GamesPlayed INT, TotalPoints INT); INSERT INTO Players (PlayerID, PlayerName, Team, Position) VALUES (1, 'LeBron James', 'Los Angeles Lakers', 'SF'), (2, 'Kevin Durant', 'Brooklyn Nets', 'SF'), (3, 'Stephen Curry', 'Golden State Warriors', 'PG'), (4, 'James Harden', 'Brooklyn Nets', 'SG'), (5, 'Giannis Antetokounmpo', 'Milwaukee Bucks', 'PF'); INSERT INTO PlayerStats (StatID, PlayerID, SeasonYear, GamesPlayed, TotalPoints) VALUES (1, 1, 2021, 45, 1080), (2, 2, 2021, 35, 880), (3, 3, 2021, 50, 1250), (4, 4, 2021, 42, 1000), (5, 5, 2021, 44, 990);","WITH PlayerAverages AS (SELECT p.PlayerName, ps.SeasonYear, (ps.TotalPoints/ps.GamesPlayed) as PointsPerGame FROM Players p JOIN PlayerStats ps ON p.PlayerID = ps.PlayerID WHERE ps.SeasonYear = (SELECT MAX(SeasonYear) FROM PlayerStats)) SELECT PlayerName, PointsPerGame FROM PlayerAverages ORDER BY PointsPerGame DESC LIMIT 5;","The query begins by creating a Common Table Expression(CTE) named PlayerAverages that calculates the average points per game for each player for the latest season. It does so by joining the 'Players' and 'PlayerStats' tables on the 'PlayerID' column and dividing the total points by the number of games played. The WHERE clause in the CTE filters the data to the latest season. The main SELECT statement then retrieves the player names and their average points per game, and sorts the data in descending order to show the top 5 players with the highest average points per game."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Track and compare the carbon emission reduction commitments made by different countries under the Paris Agreement, and then provide a summary table showing the total, average, minimum, and maximum reduction targets by continent.","CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Continent VARCHAR(50)); INSERT INTO Countries (CountryID, CountryName, Continent) VALUES (1, 'Canada', 'North America'), (2, 'Germany', 'Europe'), (3, 'China', 'Asia'), (4, 'Australia', 'Australia'), (5, 'Brazil', 'South America'); CREATE TABLE ParisAgreement (CommitmentID INT PRIMARY KEY, CountryID INT, ReductionTarget DECIMAL); INSERT INTO ParisAgreement (CommitmentID, CountryID, ReductionTarget) VALUES (1, 1, 30.0), (2, 2, 40.0), (3, 3, 60.0), (4, 4, 26.0), (5, 5, 37.0);","WITH Commitments AS (SELECT c.Continent, p.ReductionTarget FROM Countries c JOIN ParisAgreement p ON c.CountryID = p.CountryID) SELECT Continent, SUM(ReductionTarget) AS Total, AVG(ReductionTarget) AS Average, MIN(ReductionTarget) AS Minimum, MAX(ReductionTarget) AS Maximum FROM Commitments GROUP BY Continent;","The query first joins the Countries and ParisAgreement tables to combine country and commitment information. It then groups the results by continent, and for each continent, it calculates the sum, average, minimum, and maximum of the reduction targets."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show me the top 5 artists based on total song plays in the United States.,"CREATE TABLE ArtistPlays(ArtistID INT PRIMARY KEY, ArtistName VARCHAR(50), Region VARCHAR(50), TotalPlays INT); INSERT INTO ArtistPlays(ArtistID, ArtistName, Region, TotalPlays) VALUES (1, 'Billie Eilish', 'United States', 1000000), (2, 'Ariana Grande', 'United States', 950000), (3, 'Drake', 'United States', 925000), (4, 'BTS', 'United States', 900000), (5, 'Ed Sheeran', 'United States', 875000);","SELECT ArtistName, TotalPlays FROM ArtistPlays WHERE Region = 'United States' ORDER BY TotalPlays DESC LIMIT 5;","The query first filters the ArtistPlays table to only include records where the Region is 'United States'. It then orders these records in descending order based on the TotalPlays column, and selects the top 5 records. The result is the top 5 artists based on total song plays in the United States."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report that shows the total carbon emissions per country, separated by energy source for the years 2010 to 2020, and present a pivot version of the same data with years as columns and energy sources as rows.","CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, EnergySource VARCHAR(50), Emissions DECIMAL); INSERT INTO CarbonEmissions (Country, Year, EnergySource, Emissions) VALUES ('USA', 2010, 'Coal', 2000), ('USA', 2010, 'Oil', 1800), ('USA', 2010, 'Gas', 1500), ('USA', 2011, 'Coal', 2050), ('USA', 2011, 'Oil', 1700), ('USA', 2011, 'Gas', 1550), ('China', 2010, 'Coal', 3000), ('China', 2010, 'Oil', 2500), ('China', 2010, 'Gas', 2200), ('China', 2011, 'Coal', 3100), ('China', 2011, 'Oil', 2600), ('China', 2011, 'Gas', 2300);","WITH YearlyEmissions AS (SELECT Country, Year, EnergySource, SUM(Emissions) as TotalEmissions FROM CarbonEmissions WHERE Year BETWEEN 2010 AND 2020 GROUP BY Country, Year, EnergySource) SELECT * FROM YearlyEmissions PIVOT (SUM(TotalEmissions) FOR Year IN (2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020)) AS YearPivot;","The SQL statement first creates a common table expression (CTE) to calculate the total carbon emissions per country, per year, per energy source. The WHERE clause in the CTE filters the data for the years 2010 to 2020. The PIVOT clause then transforms the rows into columns, displaying the total emissions for each year. The FOR clause specifies the column to be pivoted (Year), and the IN keyword specifies the list of possible values in the pivoted column (the years 2010 to 2020)."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Create a record of a new sustainable fashion brand 'EcoThreads' and update all their garments with the 'EcoFriendly' tag. Then, list all brands with the most number of 'EcoFriendly' tagged garments.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainabilityRating DECIMAL); INSERT INTO Brands (BrandID, BrandName, SustainabilityRating) VALUES (1, 'GreenCotton', 8.5), (2, 'EcoLine', 7.7), (3, 'EarthWear', 8.2); CREATE TABLE Garments (GarmentID INT PRIMARY KEY, BrandID INT, GarmentName VARCHAR(50), Tag VARCHAR(50)); INSERT INTO Garments (GarmentID, BrandID, GarmentName, Tag) VALUES (1, 1, 'Shirt', 'Organic'), (2, 2, 'Trousers', 'Recycled'), (3, 1, 'Dress', 'EcoFriendly');","INSERT INTO Brands (BrandID, BrandName, SustainabilityRating) VALUES (4, 'EcoThreads', 9.0); UPDATE Garments SET Tag = 'EcoFriendly' WHERE BrandID = 4; WITH EcoFriendlyCounts AS (SELECT BrandID, COUNT(GarmentID) AS EcoCount FROM Garments WHERE Tag = 'EcoFriendly' GROUP BY BrandID) SELECT B.BrandName, E.EcoCount FROM Brands B INNER JOIN EcoFriendlyCounts E ON B.BrandID = E.BrandID ORDER BY E.EcoCount DESC;","The query first inserts a new record into the Brands table for the brand 'EcoThreads'. It then updates the Garments table to tag all garments of 'EcoThreads' as 'EcoFriendly'. The last part of the query defines a common table expression (CTE) to count the number of 'EcoFriendly' tagged garments for each brand, and lists all the brands in descending order of their 'EcoFriendly' garment counts by joining the results of the CTE with the Brands table."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert a new fashion trend into the trend table, update its popularity based on customer purchases, and then delete trends that are no longer popular. Provide the top 5 most popular trends.","CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Popularity INT, LastUpdated DATE); CREATE TABLE CustomerPurchases (PurchaseID INT PRIMARY KEY, CustomerID INT, TrendID INT, PurchaseDate DATE);","INSERT INTO FashionTrends (TrendID, TrendName, Popularity, LastUpdated) VALUES (6, 'Sustainable Fabrics', 0, CURRENT_DATE); UPDATE FashionTrends SET Popularity = (SELECT COUNT(*) FROM CustomerPurchases WHERE TrendID = FashionTrends.TrendID) WHERE TrendID = 6; DELETE FROM FashionTrends WHERE Popularity < 10; WITH RankedTrends AS (SELECT TrendName, Popularity, RANK() OVER (ORDER BY Popularity DESC) AS Rank FROM FashionTrends) SELECT TrendName, Popularity FROM RankedTrends WHERE Rank <= 5;","The SQL first inserts a new fashion trend 'Sustainable Fabrics' into the FashionTrends table. The popularity is initialized as 0 and the last updated date is set to the current date. Then, the popularity of the inserted trend is updated based on the number of customer purchases associated with the trend. The trends with a popularity less than 10 are deleted from the FashionTrends table. Finally, a common table expression (CTE) is used to rank the trends based on their popularity in descending order. The top 5 most popular trends are then selected from the ranked list."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert data into sports event table, capture the total revenue for each sports event from different regions, and update the records for the sports event with highest revenue.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), Region VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO SportsEvents (EventID, EventName, Region, TotalRevenue) VALUES (1, 'Super Bowl', 'North America', 550.0), (2, 'World Cup', 'Europe', 600.0), (3, 'Olympics', 'Asia', 700.0), (4, 'Cricket World Cup', 'Asia', 400.0), (5, 'Tour De France', 'Europe', 300.0);","WITH RevenueRank AS (SELECT EventName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM SportsEvents) UPDATE SportsEvents SET TotalRevenue = TotalRevenue * 1.1 WHERE EventID IN (SELECT EventID FROM RevenueRank WHERE Rank = 1);","The SQL query first creates a common table expression (CTE) named RevenueRank that ranks the sports events based on the total revenue in descending order. Then it updates the total revenue of the top-ranked sports event, increasing it by 10%."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the room prices of a specific hotel based on the average customer feedback score. If the average score is above 8, increase the price by 10%. If it's between 6 and 8, decrease the price by 5%. If it's below 6, decrease the price by 15%.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), RoomPrice DECIMAL); INSERT INTO Hotels (HotelID, HotelName, RoomPrice) VALUES (1, 'Hotel Majestic', 120.5), (2, 'Hotel Royal', 118.0), (3, 'Hotel Sunshine', 110.0); CREATE TABLE CustomerFeedback (FeedbackID INT PRIMARY KEY, HotelID INT, CustomerScore DECIMAL); INSERT INTO CustomerFeedback (FeedbackID, HotelID, CustomerScore) VALUES (1, 1, 8.5), (2, 1, 7.0), (3, 2, 9.0), (4, 2, 6.5), (5, 3, 5.0);","WITH AverageScores AS (SELECT HotelID, AVG(CustomerScore) AS AvgScore FROM CustomerFeedback GROUP BY HotelID) UPDATE Hotels SET RoomPrice = CASE WHEN AvgScore > 8 THEN RoomPrice * 1.10 WHEN AvgScore BETWEEN 6 AND 8 THEN RoomPrice * 0.95 ELSE RoomPrice * 0.85 END FROM Hotels INNER JOIN AverageScores ON Hotels.HotelID = AverageScores.HotelID;","The query first creates a common table expression to calculate the average customer score for each hotel. Then, the query performs an update operation on the Hotels table. It uses a CASE statement to determine the new room price based on the average customer score. The room price is increased by 10% if the average score is above 8, decreased by 5% if it's between 6 and 8, and decreased by 15% if it's below 6. The update operation is performed on the rows where the HotelID in the Hotels table matches the HotelID in the AverageScores table."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Insert data about the latest global crop yields and then provide a list of the top 5 countries with the highest yield for rice,"CREATE TABLE CropYields (Country VARCHAR(50), Crop VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO CropYields (Country, Crop, Year, Yield) VALUES ('USA', 'Rice', 2021, 9.2), ('China', 'Rice', 2021, 10.5), ('India', 'Rice', 2021, 8.6), ('Brazil', 'Rice', 2021, 7.5), ('Australia', 'Rice', 2021, 9.0), ('France', 'Wheat', 2021, 7.8), ('Germany', 'Wheat', 2021, 7.6), ('Russia', 'Wheat', 2021, 8.2), ('Canada', 'Wheat', 2021, 9.0), ('UK', 'Wheat', 2021, 7.7);","WITH RankedCountries AS (SELECT Country, Yield, DENSE_RANK() OVER (ORDER BY Yield DESC) AS Rank FROM CropYields WHERE Crop = 'Rice' AND Year = 2021) SELECT Country, Yield FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank countries based on their rice yield for the year 2021 in descending order. It then selects the top 5 countries with the highest rice yield using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Delete the guest records in the customer database that have not made a booking in the last two years.,"CREATE TABLE Customer (CustomerID INT PRIMARY KEY, Name VARCHAR(50), LastBookingDate DATE); INSERT INTO Customer (CustomerID, Name, LastBookingDate) VALUES (1, 'John Doe', '2019-06-15'), (2, 'Jane Smith', '2021-03-12'), (3, 'Bob Johnson', '2020-04-05'), (4, 'Alice Williams', '2018-07-20'), (5, 'Charlie Brown', '2021-08-30');","DELETE FROM Customer WHERE LastBookingDate <= DATEADD(year, -2, GETDATE());","The SQL statement deletes records from the Customer table where the LastBookingDate is more than 2 years ago. It uses the DATEADD function to calculate the date 2 years before the current date, and then deletes any records where LastBookingDate is less than or equal to this date."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Generate a report showing the total investments made in each technology sector in the last 5 years.,"CREATE TABLE TechInvestments (InvestID INT PRIMARY KEY, Sector VARCHAR(50), Year INT, Investment DECIMAL); INSERT INTO TechInvestments (InvestID, Sector, Year, Investment) VALUES (1, 'AI', 2017, 1500), (2, 'Blockchain', 2017, 1300), (3, 'Cybersecurity', 2017, 1200), (4, 'AI', 2018, 2000), (5, 'Blockchain', 2018, 1800), (6, 'Cybersecurity', 2018, 1500), (7, 'AI', 2019, 2500), (8, 'Blockchain', 2019, 2200), (9, 'Cybersecurity', 2019, 2000), (10, 'AI', 2020, 3000), (11, 'Blockchain', 2020, 2700), (12, 'Cybersecurity', 2020, 2500), (13, 'AI', 2021, 3500), (14, 'Blockchain', 2021, 3200), (15, 'Cybersecurity', 2021, 3000);","SELECT Sector, SUM(Investment) AS TotalInvestment FROM TechInvestments WHERE Year >= (SELECT MAX(Year) - 5 FROM TechInvestments) GROUP BY Sector ORDER BY TotalInvestment DESC;","The SQL query first identifies the last 5 years range by subtracting 5 from the maximum year in the TechInvestments table. It then uses this range to select the relevant records from the TechInvestments table, choosing only those where the Year is greater than or equal to this range. The selected records are grouped by technology sector (Sector), and the total investment for each sector is calculated using the SUM aggregate function. Finally, the results are ordered in descending order based on the total investment, so the sectors with the highest total investments over the past 5 years are displayed first."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert records of the latest movies watched by users and display the top 5 movies with the highest count of viewers in the United States.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), ReleaseDate DATE); CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE UserMovieWatch (UserID INT, MovieID INT, WatchDate DATE); INSERT INTO Movies (MovieID, MovieName, ReleaseDate) VALUES (1, 'Inception', '2010-07-16'), (2, 'Interstellar', '2014-11-07'), (3, 'The Dark Knight', '2008-07-18'), (4, 'Fight Club', '1999-10-15'), (5, 'Pulp Fiction', '1994-09-10'); INSERT INTO Users (UserID, UserName, Country) VALUES (1, 'John', 'United States'), (2, 'Emma', 'United States'), (3, 'Oliver', 'United Kingdom'), (4, 'Noah', 'Canada'), (5, 'Sophia', 'Australia'); INSERT INTO UserMovieWatch (UserID, MovieID, WatchDate) VALUES (1, 1, '2022-02-01'), (2, 1, '2022-02-02'), (1, 2, '2022-02-03'), (2, 2, '2022-02-04'), (1, 3, '2022-02-05'), (3, 3, '2022-02-06'), (4, 4, '2022-02-07'), (5, 5, '2022-02-08');","WITH USWatch AS (SELECT MovieID FROM UserMovieWatch JOIN Users ON UserMovieWatch.UserID = Users.UserID WHERE Users.Country = 'United States') SELECT MovieName FROM (SELECT MovieName, COUNT(*) as Count FROM Movies JOIN USWatch ON Movies.MovieID = USWatch.MovieID GROUP BY MovieName) ORDER BY Count DESC LIMIT 5;","The query first creates a common table expression (CTE) named 'USWatch' that selects the MovieID from the 'UserMovieWatch' table where the user is from the United States. Then, it performs a JOIN operation between the 'Movies' table and 'USWatch' CTE based on the MovieID. This operation is grouped by MovieName and the count of each movie is calculated. Finally, the movies are ordered by the count in descending order and the top 5 movies with the highest count are selected."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Retrieve top 5 clothing brands that have the highest average consumer rating in both Europe and North America.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Zara'), (2, 'H&M'), (3, 'Uniqlo'), (4, 'Gucci'), (5, 'Prada'); CREATE TABLE ConsumerRatings (RatingID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), ConsumerRating DECIMAL); INSERT INTO ConsumerRatings (RatingID, BrandID, Region, ConsumerRating) VALUES (1, 1, 'Europe', 4.5), (2, 2, 'Europe', 4.3), (3, 3, 'Europe', 4.2), (4, 4, 'Europe', 5.0), (5, 5, 'Europe', 4.7), (6, 1, 'North America', 4.4), (7, 2, 'North America', 4.2), (8, 3, 'North America', 4.1), (9, 4, 'North America', 4.9), (10, 5, 'North America', 4.6);","WITH EuropeBrands AS (SELECT BrandID, AVG(ConsumerRating) AS AvgRating FROM ConsumerRatings WHERE Region = 'Europe' GROUP BY BrandID ORDER BY AvgRating DESC LIMIT 5), NorthAmericaBrands AS (SELECT BrandID, AVG(ConsumerRating) AS AvgRating FROM ConsumerRatings WHERE Region = 'North America' GROUP BY BrandID ORDER BY AvgRating DESC LIMIT 5) SELECT B.BrandName FROM Brands B INNER JOIN EuropeBrands EB ON B.BrandID = EB.BrandID INTERSECT SELECT B.BrandName FROM Brands B INNER JOIN NorthAmericaBrands NAB ON B.BrandID = NAB.BrandID;",The query first creates two common table expressions (CTEs) to calculate the average consumer rating for each brand in 'Europe' and 'North America'. Then it ranks the top 5 brands by average rating in both regions. The INTERSECT set operation is used to find the brands that exist in both lists of top 5 brands in Europe and North America.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Update the 'Fashion Trends' table to reflect the latest trend scores and delete any trends that are no longer popular. Then, provide a list of the top 5 fashion trends in each region.","CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), TrendScore INT); INSERT INTO FashionTrends (TrendID, TrendName, Region, TrendScore) VALUES (1, 'Sustainable Fashion', 'North America', 90), (2, 'Vintage Style', 'Europe', 85), (3, 'Minimalism', 'Asia', 80), (4, 'Streetwear', 'North America', 75), (5, 'Athleisure', 'Europe', 70); CREATE TABLE OutdatedTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), TrendScore INT);","UPDATE FashionTrends SET TrendScore = TrendScore + 10 WHERE TrendName IN ('Sustainable Fashion', 'Minimalism'); DELETE FROM FashionTrends WHERE TrendName IN (SELECT TrendName FROM OutdatedTrends); WITH RankedTrends AS (SELECT TrendName, TrendScore, DENSE_RANK() OVER (PARTITION BY Region ORDER BY TrendScore DESC) AS Rank FROM FashionTrends) SELECT Region, TrendName, TrendScore FROM RankedTrends WHERE Rank <= 5;",The SQL query first updates the trend scores for 'Sustainable Fashion' and 'Minimalism' in the 'FashionTrends' table. It then deletes any trends that are listed in the 'OutdatedTrends' table from the 'FashionTrends' table. The query creates a common table expression (CTE) to rank the remaining fashion trends based on their trend scores in descending order for each region. It then selects the top 5 fashion trends for each region using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Find the top 5 brands whose products were frequently bought together by the same customer in Europe and Asia but not in North America.,"CREATE TABLE CustomerPurchases (PurchaseID INT PRIMARY KEY, CustomerID INT, ProductID INT, BrandID INT, Region VARCHAR(50)); CREATE TABLE Brand (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO CustomerPurchases (PurchaseID, CustomerID, ProductID, BrandID, Region) VALUES (1, 101, 1001, 1, 'Europe'), (2, 101, 1002, 1, 'Europe'), (3, 102, 1003, 2, 'Asia'), (4, 102, 1004, 2, 'Asia'), (5, 103, 1005, 3, 'North America'), (6, 103, 1006, 3, 'North America'), (7, 104, 1007, 4, 'Europe'), (8, 104, 1008, 4, 'Europe'), (9, 105, 1009, 5, 'Asia'), (10, 105, 1010, 5, 'Asia'); INSERT INTO Brand (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E');","WITH EuropeAsia AS (SELECT BrandID, COUNT(DISTINCT CustomerID) AS CustomerCount FROM CustomerPurchases WHERE Region IN ('Europe', 'Asia') GROUP BY BrandID), NorthAmerica AS (SELECT BrandID, COUNT(DISTINCT CustomerID) AS CustomerCount FROM CustomerPurchases WHERE Region = 'North America' GROUP BY BrandID), Combined AS (SELECT E.BrandID FROM EuropeAsia E LEFT JOIN NorthAmerica N ON E.BrandID = N.BrandID WHERE N.BrandID IS NULL ORDER BY E.CustomerCount DESC) SELECT B.BrandName FROM Brand B INNER JOIN Combined C ON B.BrandID = C.BrandID LIMIT 5;","The query first creates two separate tables: one for purchases in Europe and Asia and another for purchases in North America, grouping by BrandID. Then it combines these two tables, selecting only the BrandIDs that appear in the Europe and Asia table but not in the North America table. The result is sorted in descending order by the customer count in the Europe and Asia table, and the top 5 brands are returned."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store data on the most popular tourism destinations in various countries, and then construct a common table expression to display the top 5 countries with the most visited destinations.","CREATE TABLE TourismData (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Country VARCHAR(50), VisitorCount INT); INSERT INTO TourismData (DestinationID, DestinationName, Country, VisitorCount) VALUES (1, 'Eiffel Tower', 'France', 7000000), (2, 'Great Wall', 'China', 10000000), (3, 'Colosseum', 'Italy', 4000000), (4, 'Statue of Liberty', 'USA', 4500000), (5, 'Pyramids of Giza', 'Egypt', 2000000);","WITH RankedCountries AS (SELECT Country, SUM(VisitorCount) AS TotalVisitors, DENSE_RANK() OVER (ORDER BY SUM(VisitorCount) DESC) AS Rank FROM TourismData GROUP BY Country) SELECT Country, TotalVisitors FROM RankedCountries WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) that groups the data by country and calculates the total number of visitors for each country. The DENSE_RANK function is used to rank the countries based on their total visitor count in descending order. The final SELECT statement displays the top 5 countries with the highest total visitor count.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the top 5 sports teams with the highest average attendance over the last 5 seasons across different sports.,"CREATE TABLE SportsTeams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Sport VARCHAR(50)); INSERT INTO SportsTeams (TeamID, TeamName, Sport) VALUES (1, 'Lakers', 'Basketball'), (2, 'Cowboys', 'Football'), (3, 'Yankees', 'Baseball'), (4, 'Blackhawks', 'Hockey'), (5, 'Warriors', 'Basketball'); CREATE TABLE Attendance (AttendanceID INT PRIMARY KEY, TeamID INT, Season INT, AverageAttendance DECIMAL); INSERT INTO Attendance (AttendanceID, TeamID, Season, AverageAttendance) VALUES (1, 1, 2017, 10000), (2, 2, 2017, 8000), (3, 3, 2017, 7500), (4, 4, 2017, 7000), (5, 5, 2017, 12000);","WITH RankedTeams AS (SELECT st.TeamName, st.Sport, AVG(at.AverageAttendance) as AvgAttendance, DENSE_RANK() OVER (ORDER BY AVG(at.AverageAttendance) DESC) AS Rank FROM SportsTeams st JOIN Attendance at ON st.TeamID = at.TeamID WHERE at.Season > (YEAR(CURRENT_DATE) - 5) GROUP BY st.TeamName, st.Sport) SELECT TeamName, Sport, AvgAttendance FROM RankedTeams WHERE Rank <= 5;","The query first creates a common table expression (CTE) called 'RankedTeams'. It joins the 'SportsTeams' and 'Attendance' tables on 'TeamID', and filters out data for the past five seasons. The average attendance is calculated for each team. Teams are then ranked based on the calculated average attendance in descending order using the DENSE_RANK() function. The final SELECT statement retrieves the top 5 teams with the highest average attendance."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Find out the top 5 trending travel destinations in 2021 based on the number of bookings and update the HotelRatings table with this information, also delete all records from 2020 in the Bookings table.","CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, DestinationID INT, BookingDate DATE); CREATE TABLE HotelRatings (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), DestinationID INT, Rating DECIMAL); INSERT INTO Destinations (DestinationID, DestinationName, Region) VALUES (1, 'Paris', 'Europe'), (2, 'New York', 'North America'), (3, 'Tokyo', 'Asia'), (4, 'Sydney', 'Australia'), (5, 'Cape Town', 'Africa'); INSERT INTO Bookings (BookingID, CustomerID, DestinationID, BookingDate) VALUES (1, 101, 1, '2021-01-01'), (2, 102, 2, '2021-03-01'), (3, 103, 1, '2021-02-01'), (4, 104, 3, '2021-04-01'), (5, 105, 4, '2021-05-01'); INSERT INTO HotelRatings (HotelID, HotelName, DestinationID, Rating) VALUES (1, 'Hotel Paris', 1, 4.5), (2, 'Hotel New York', 2, 4.0), (3, 'Hotel Tokyo', 3, 4.8), (4, 'Hotel Sydney', 4, 4.2), (5, 'Hotel Cape Town', 5, 4.3);","WITH TrendingDestinations AS (SELECT DestinationID, COUNT(BookingID) AS Bookings FROM Bookings WHERE YEAR(BookingDate) = 2021 GROUP BY DestinationID ORDER BY Bookings DESC LIMIT 5) UPDATE HotelRatings SET Rating = Rating + 0.5 WHERE DestinationID IN (SELECT DestinationID FROM TrendingDestinations); DELETE FROM Bookings WHERE YEAR(BookingDate) = 2020;",The query starts with a common table expression (CTE) named 'TrendingDestinations' that selects the top 5 travel destinations based on the number of bookings in 2021. The UPDATE statement then increases the rating of the hotels located in these trending destinations by 0.5. The DELETE statement finally removes all the booking records from the year 2020 from the Bookings table.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert the yield data for new crops from 2021 into the CropYields table, and then provide a ranked list of the top 5 crops with the highest average yield across all regions for the past decade.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Year, Yield) VALUES (1, 'Corn', 'North America', 2020, 180.5), (2, 'Wheat', 'Europe', 2020, 158.0), (3, 'Rice', 'Asia', 2020, 210.0), (4, 'Soybean', 'South America', 2020, 200.5), (5, 'Sorghum', 'Africa', 2020, 70.0);","WITH RankedCrops AS (SELECT CropName, AVG(Yield) AS AvgYield, DENSE_RANK() OVER (ORDER BY AVG(Yield) DESC) AS Rank FROM CropYields WHERE Year >= 2011 AND Year <= 2021 GROUP BY CropName) INSERT INTO CropYields (CropID, CropName, Region, Year, Yield) VALUES (6, 'Barley', 'Europe', 2021, 180.0), (7, 'Oats', 'North America', 2021, 160.0), (8, 'Millet', 'Africa', 2021, 140.0), (9, 'Rye', 'Europe', 2021, 150.0), (10, 'Teff', 'Africa', 2021, 100.0); SELECT CropName, AvgYield FROM RankedCrops WHERE Rank <= 5;","The query first inserts new crop yield data for the year 2021 into the CropYields table. Then, it creates a common table expression (CTE) to calculate the average yield of each crop over the past decade and ranks them in descending order of average yield using the DENSE_RANK function. Finally, it selects the top 5 crops with the highest average yield."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Design a table for a clinical trial that includes patient data, their assigned treatment protocols, and observed outcomes. Then, use this data to compare the efficacy of different treatment protocols on patients of different age groups.","CREATE TABLE ClinicalTrial (TrialID INT PRIMARY KEY, PatientID INT, PatientAge INT, TreatmentProtocol VARCHAR(50), Outcome VARCHAR(50)); INSERT INTO ClinicalTrial (TrialID, PatientID, PatientAge, TreatmentProtocol, Outcome) VALUES (1, 101, 65, 'Protocol A', 'Improved'), (2, 102, 55, 'Protocol B', 'Stable'), (3, 103, 70, 'Protocol A', 'Improved'), (4, 104, 60, 'Protocol B', 'Declined'), (5, 105, 75, 'Protocol A', 'Improved');","WITH AgeGroups AS (SELECT PatientAge, TreatmentProtocol, CASE WHEN PatientAge <= 60 THEN 'Below 60' ELSE 'Above 60' END AS AgeGroup, Outcome FROM ClinicalTrial), Efficacy AS (SELECT AgeGroup, TreatmentProtocol, COUNT(CASE WHEN Outcome = 'Improved' THEN 1 ELSE NULL END) AS Improved, COUNT(CASE WHEN Outcome != 'Improved' THEN 1 ELSE NULL END) AS NotImproved FROM AgeGroups GROUP BY AgeGroup, TreatmentProtocol) SELECT AgeGroup, TreatmentProtocol, Improved, NotImproved, CAST(Improved AS FLOAT) / (Improved + NotImproved) AS EfficacyRate FROM Efficacy;","The query first categorizes patients into two age groups: 'Below 60' and 'Above 60'. It then counts the number of patients in each age and treatment protocol group who showed improvement and those who did not. Finally, it calculates the efficacy rate for each treatment protocol within each age group by dividing the number of improved cases by the total number of cases."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Add the crop yield data for a new region, Midwest, and then display the updated yield for each crop in all regions.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Yield) VALUES (1, 'Corn', 'South', 180.5), (2, 'Corn', 'West', 200.0), (3, 'Wheat', 'South', 215.0), (4, 'Wheat', 'West', 240.7);","INSERT INTO CropYield (CropID, CropName, Region, Yield) VALUES (5, 'Corn', 'Midwest', 195.5), (6, 'Wheat', 'Midwest', 230.0); SELECT CropName, Region, Yield FROM CropYield;","The SQL query first inserts the yield data for the new region, Midwest, into the CropYield table. It then retrieves the updated yield for each crop in all regions from the same table."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 tech startups with the highest investment received, along with their respective investors.","CREATE TABLE TechStartups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), Industry VARCHAR(50), InvestmentReceived DECIMAL); INSERT INTO TechStartups (StartupID, StartupName, Industry, InvestmentReceived) VALUES (1, 'TechStar', 'AI', 2000000), (2, 'InnovateX', 'Blockchain', 1500000), (3, 'DataMind', 'Data Science', 3000000), (4, 'SecureIt', 'Cybersecurity', 2500000), (5, 'QuickHealth', 'HealthTech', 1200000); CREATE TABLE Investors (InvestorID INT PRIMARY KEY, InvestorName VARCHAR(50), StartupID INT); INSERT INTO Investors (InvestorID, InvestorName, StartupID) VALUES (1, 'VentureSoft', 1), (2, 'CapitalBoost', 2), (3, 'GrowthMax', 3), (4, 'SecureCapital', 4), (5, 'HealthInvest', 5);","SELECT ts.StartupName, ts.InvestmentReceived, inv.InvestorName FROM TechStartups AS ts INNER JOIN Investors AS inv ON ts.StartupID = inv.StartupID ORDER BY ts.InvestmentReceived DESC LIMIT 5;","The query first joins the TechStartups and Investors tables based on the StartupID. Then it selects the startup name, investment received, and investor name from the joined table. The results are ordered in descending order by the investment received, and only the top 5 results are returned."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Update the 'PublicHealthBudget' table to reflect an increased spending on mental health programs by 15% across all states and find the top 5 states with the highest mental health budget post update, also display the total budget allocated to mental health programs.","CREATE TABLE PublicHealthBudget (StateID INT PRIMARY KEY, StateName VARCHAR(50), MentalHealthBudget DECIMAL, PublicHealthBudget DECIMAL); INSERT INTO PublicHealthBudget (StateID, StateName, MentalHealthBudget, PublicHealthBudget) VALUES (1, 'California', 2000000.0, 10000000.0), (2, 'Texas', 1500000.0, 8000000.0), (3, 'Florida', 1200000.0, 6000000.0), (4, 'New York', 1800000.0, 9000000.0), (5, 'Illinois', 1600000.0, 7500000.0);","UPDATE PublicHealthBudget SET MentalHealthBudget = MentalHealthBudget * 1.15; WITH RankedStates AS (SELECT StateName, MentalHealthBudget, DENSE_RANK() OVER (ORDER BY MentalHealthBudget DESC) AS Rank FROM PublicHealthBudget) SELECT StateName, MentalHealthBudget FROM RankedStates WHERE Rank <= 5; SELECT SUM(MentalHealthBudget) FROM PublicHealthBudget;","The query first updates the 'MentalHealthBudget' column in the 'PublicHealthBudget' table, increasing each state's mental health budget by 15%. It then creates a common table expression (CTE) to rank states based on their updated mental health budget in descending order. It selects the top 5 states with the highest mental health budget using the DENSE_RANK function. Finally, it sums up the total budget allocated to mental health programs across all states."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Get the average yield of wheat per hectare for each country.,"CREATE TABLE WheatYield (Country VARCHAR(50), YieldPerHectare DECIMAL); INSERT INTO WheatYield (Country, YieldPerHectare) VALUES ('USA', 3.0), ('Canada', 2.8), ('Australia', 1.5), ('Russia', 2.0), ('China', 3.5);","SELECT Country, AVG(YieldPerHectare) FROM WheatYield GROUP BY Country;",The query groups the data by country and calculates the average yield of wheat per hectare for each country.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 3 companies in the technology sector with the highest investments in research and development (R&D) for the last 5 years.,"CREATE TABLE TechSector (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Sector VARCHAR(50), Year INT, InvestmentInRandD DECIMAL); INSERT INTO TechSector (CompanyID, CompanyName, Sector, Year, InvestmentInRandD) VALUES (1, 'Apple', 'Technology', 2020, 18000), (2, 'Microsoft', 'Technology', 2020, 19000), (3, 'Google', 'Technology', 2020, 26000), (4, 'Facebook', 'Technology', 2020, 15000), (5, 'Amazon', 'Technology', 2020, 22000);","WITH TechInvestment AS (SELECT CompanyName, SUM(InvestmentInRandD) as TotalInvestment FROM TechSector WHERE Year >= (SELECT MAX(Year) FROM TechSector)-5 AND Sector = 'Technology' GROUP BY CompanyName) SELECT CompanyName, TotalInvestment FROM TechInvestment ORDER BY TotalInvestment DESC LIMIT 3;","This SQL query creates a Common Table Expression (CTE) named TechInvestment, which is used to calculate the total investment in research and development (R&D) for each company in the technology sector over the last 5 years. It then selects from this CTE the company name and total investment, and orders the results by total investment in descending order, limiting the results to the top 3 companies."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Find the top 5 most popular fashion items in North America for the year 2021, based on total sales.","CREATE TABLE SalesData (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Region VARCHAR(50), Year INT, TotalSales INT); INSERT INTO SalesData (ItemID, ItemName, Region, Year, TotalSales) VALUES (1, 'Denim Jacket', 'North America', 2021, 5000), (2, 'Leather Boots', 'North America', 2021, 4500), (3, 'Silk Scarf', 'North America', 2021, 4000), (4, 'Wool Sweater', 'North America', 2021, 5500), (5, 'Cotton T-shirt', 'North America', 2021, 6000), (6, 'Linen Pants', 'Asia', 2021, 3500);","WITH RankedItems AS (SELECT ItemName, TotalSales, DENSE_RANK() OVER (ORDER BY TotalSales DESC) AS Rank FROM SalesData WHERE Region = 'North America' AND Year = 2021) SELECT ItemName, TotalSales FROM RankedItems WHERE Rank <= 5;","The SQL statement begins by creating a common table expression (CTE) called 'RankedItems'. Inside this CTE, it selects the ItemName and TotalSales from the SalesData table, but only for records where the Region is 'North America' and the Year is 2021. It also creates a new column called 'Rank', which assigns a rank to each record based on the TotalSales in descending order, using the DENSE_RANK function. After the CTE, it selects the ItemName and TotalSales from the RankedItems CTE, but only for records where the Rank is less than or equal to 5. This effectively returns the top 5 most popular fashion items in North America for the year 2021, based on total sales."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average wheat yield per region, sorted from highest to lowest, and also list the most commonly used farming practice in each of these regions.","CREATE TABLE CropYield (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), Region VARCHAR(50), CropType VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (FarmID, FarmName, Region, CropType, Yield) VALUES (1, 'Farm A', 'North America', 'Wheat', 120.5), (2, 'Farm B', 'Europe', 'Wheat', 118.0), (3, 'Farm C', 'Asia', 'Wheat', 110.0), (4, 'Farm D', 'South America', 'Wheat', 115.7), (5, 'Farm E', 'Africa', 'Wheat', 95.0); CREATE TABLE FarmingPractices (FarmID INT, Practice VARCHAR(50)); INSERT INTO FarmingPractices (FarmID, Practice) VALUES (1, 'Organic'), (2, 'Conventional'), (3, 'Organic'), (4, 'Organic'), (5, 'Conventional');","WITH AvgYield AS (SELECT Region, AVG(Yield) as AverageYield FROM CropYield WHERE CropType = 'Wheat' GROUP BY Region), CommonPractice AS (SELECT FarmID, Practice, ROW_NUMBER() OVER(PARTITION BY FarmID ORDER BY COUNT(*) DESC) as RowNum FROM FarmingPractices GROUP BY FarmID, Practice) SELECT AvgYield.Region, AvgYield.AverageYield, CommonPractice.Practice FROM AvgYield JOIN CommonPractice ON AvgYield.FarmID = CommonPractice.FarmID WHERE CommonPractice.RowNum = 1 ORDER BY AvgYield.AverageYield DESC;","The query first creates a common table expression (CTE) named AvgYield to calculate the average yield of wheat for each region. Another CTE named CommonPractice is created to find the most commonly used farming practice for each farm. This CTE uses the ROW_NUMBER() function to rank the farming practices based on their frequency of use. The main query then joins the two CTEs on the farm ID and selects the region, average yield, and common practice. The results are ordered by average yield in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Provide a report that shows the top 5 countries with the highest average tourist spend per day in 2020. Include the average spend as well as the total number of tourists.,"CREATE TABLE TouristSpend (Country VARCHAR(50), Year INT, TouristID INT, DailySpend DECIMAL); INSERT INTO TouristSpend (Country, Year, TouristID, DailySpend) VALUES ('USA', 2020, 1, 200.50), ('Spain', 2020, 2, 180.00), ('France', 2020, 3, 150.00), ('Italy', 2020, 4, 140.70), ('UK', 2020, 5, 120.00); CREATE TABLE TouristCount (Country VARCHAR(50), Year INT, TouristID INT); INSERT INTO TouristCount (Country, Year, TouristID) VALUES ('USA', 2020, 1), ('Spain', 2020, 2), ('France', 2020, 3), ('Italy', 2020, 4), ('UK', 2020, 5);","WITH AvgSpend AS (SELECT Country, AVG(DailySpend) AS AverageSpend FROM TouristSpend WHERE Year = 2020 GROUP BY Country), TotalTourists AS (SELECT Country, COUNT(TouristID) AS NumTourists FROM TouristCount WHERE Year = 2020 GROUP BY Country) SELECT Top5Countries.Country, Top5Countries.AverageSpend, TotalTourists.NumTourists FROM (SELECT Country, AverageSpend FROM AvgSpend ORDER BY AverageSpend DESC LIMIT 5) AS Top5Countries JOIN TotalTourists ON Top5Countries.Country = TotalTourists.Country;","The SQL query first creates two common table expressions: AvgSpend and TotalTourists. AvgSpend calculates the average daily spend per country for the year 2020. TotalTourists counts the total number of tourists per country for the same year. The main part of the query joins these two CTEs and selects the top 5 countries with the highest average daily spend, along with the total number of tourists for those countries."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,data retrieval: basic data fetching queries,Find the top 5 travel destinations with the highest average guest rating for summer tourism.,"CREATE TABLE Destinations (DestID INT PRIMARY KEY, DestName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Destinations (DestID, DestName, Region) VALUES (1, 'Rome', 'Europe'), (2, 'Bali', 'Asia'), (3, 'Dubai', 'Middle East'), (4, 'Florida', 'North America'), (5, 'Sydney', 'Australia'); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, DestID INT, GuestRating DECIMAL, Season VARCHAR(20)); INSERT INTO Ratings (RatingID, DestID, GuestRating, Season) VALUES (1, 1, 8.5, 'Summer'), (2, 2, 9.0, 'Summer'), (3, 3, 7.5, 'Summer'), (4, 4, 8.0, 'Summer'), (5, 5, 9.5, 'Summer');","WITH SummerRatings AS (SELECT DestName, AVG(GuestRating) AS AvgRating FROM Destinations JOIN Ratings ON Destinations.DestID = Ratings.DestID WHERE Season = 'Summer' GROUP BY DestName) SELECT DestName, AvgRating FROM SummerRatings ORDER BY AvgRating DESC LIMIT 5;",The query starts by creating a common table expression (CTE) called SummerRatings that groups destinations by name and calculates the average guest rating for each destination during the summer season. It then selects the destination name and average rating from the CTE and sorts the results in descending order based on the average rating. The LIMIT clause is used to restrict the output to the top 5 destinations.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find out the total ticket revenue for each football match.,"CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchName VARCHAR(50), Stadium VARCHAR(50)); INSERT INTO Matches (MatchID, MatchName, Stadium) VALUES (1, 'Match 1', 'Stadium A'), (2, 'Match 2', 'Stadium B'), (3, 'Match 3', 'Stadium C'); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, MatchID INT, NumberOfTickets INT, TicketPrice DECIMAL); INSERT INTO TicketSales (SaleID, MatchID, NumberOfTickets, TicketPrice) VALUES (1, 1, 5000, 20.0), (2, 2, 4000, 25.0), (3, 3, 3000, 30.0);","SELECT m.MatchName, SUM(t.NumberOfTickets * t.TicketPrice) AS TotalRevenue FROM Matches m INNER JOIN TicketSales t ON m.MatchID = t.MatchID GROUP BY m.MatchName;",The SQL query first joins the Matches and TicketSales tables on the MatchID field. It then calculates the total ticket revenue for each match by multiplying the number of tickets sold by the ticket price. This result is summed up for each match and the total revenue for each match is displayed.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Find out the top 3 sports events with the highest fan engagement in the last year, compare it with the previous year and identify the events that have improved in ranking.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE); INSERT INTO SportsEvents (EventID, EventName, EventDate) VALUES (1, 'Super Bowl', '2021-02-07'), (2, 'Olympics', '2021-07-23'), (3, 'Wimbledon', '2021-06-28'), (4, 'Super Bowl', '2020-02-02'), (5, 'Olympics', '2020-07-24'), (6, 'Wimbledon', '2020-06-29'); CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, EventID INT, EngagementScore DECIMAL); INSERT INTO FanEngagement (EngagementID, EventID, EngagementScore) VALUES (1, 1, 95.0), (2, 2, 90.0), (3, 3, 85.0), (4, 4, 80.0), (5, 5, 75.0), (6, 6, 70.0);","WITH RankedEvents AS (SELECT E.EventName, E.EventDate, F.EngagementScore, DENSE_RANK() OVER (PARTITION BY YEAR(E.EventDate) ORDER BY F.EngagementScore DESC) AS Rank FROM SportsEvents E JOIN FanEngagement F ON E.EventID = F.EventID) SELECT R1.EventName FROM RankedEvents R1 WHERE R1.Rank <= 3 AND YEAR(R1.EventDate) = 2021 AND NOT EXISTS (SELECT 1 FROM RankedEvents R2 WHERE R2.Rank <= 3 AND YEAR(R2.EventDate) = 2020 AND R1.EventName = R2.EventName);",The query first ranks the events by fan engagement score within each year using a common table expression (CTE) with the DENSE_RANK function and the PARTITION BY clause to separate the years. It then selects the top 3 events from 2021 that were not among the top 3 in 2020 using the NOT EXISTS clause and a subquery.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Show the total sales of electric vehicles and non-electric vehicles in each region for the years 2020 and 2021.,"CREATE TABLE VehicleSales (VehicleID INT PRIMARY KEY, VehicleType VARCHAR(50), Region VARCHAR(50), Year INT, Sales INT); INSERT INTO VehicleSales (VehicleID, VehicleType, Region, Year, Sales) VALUES (1, 'Electric', 'North America', 2020, 50000), (2, 'Non-Electric', 'North America', 2020, 150000), (3, 'Electric', 'Europe', 2020, 75000), (4, 'Non-Electric', 'Europe', 2020, 200000), (5, 'Electric', 'Asia', 2020, 100000), (6, 'Non-Electric', 'Asia', 2020, 300000), (7, 'Electric', 'North America', 2021, 60000), (8, 'Non-Electric', 'North America', 2021, 160000), (9, 'Electric', 'Europe', 2021, 80000), (10, 'Non-Electric', 'Europe', 2021, 210000), (11, 'Electric', 'Asia', 2021, 120000), (12, 'Non-Electric', 'Asia', 2021, 320000);","SELECT Region, Year, SUM(CASE WHEN VehicleType = 'Electric' THEN Sales ELSE 0 END) as ElectricVehicleSales, SUM(CASE WHEN VehicleType = 'Non-Electric' THEN Sales ELSE 0 END) as NonElectricVehicleSales FROM VehicleSales WHERE Year IN (2020, 2021) GROUP BY Region, Year ORDER BY Region, Year;","The query begins by selecting the Region and Year columns from the VehicleSales table. It then calculates the total sales of electric and non-electric vehicles for each region in the years 2020 and 2021. This is done using the SUM function, with a CASE statement to separate the sales of electric and non-electric vehicles. The results are then grouped by Region and Year, and ordered by the same columns for readability."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,"Find the average duration of treatment and average number of medications per treatment for patients with diabetes, sorted by age groups: less than 18, 18 to 65, and 65 and older.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Disease VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentDurationDays INT, NumberOfMeds INT); INSERT INTO Patients (PatientID, Age, Disease) VALUES (1, 50, 'Diabetes'), (2, 30, 'Diabetes'), (3, 70, 'Diabetes'), (4, 16, 'Diabetes'), (5, 80, 'Diabetes'); INSERT INTO Treatments (TreatmentID, PatientID, TreatmentDurationDays, NumberOfMeds) VALUES (1, 1, 28, 3), (2, 2, 30, 2), (3, 3, 35, 3), (4, 4, 25, 2), (5, 5, 40, 3);","WITH AgeGroups AS (SELECT PatientID, CASE WHEN Age < 18 THEN 'Under 18' WHEN Age >= 18 AND Age <= 65 THEN '18-65' ELSE 'Over 65' END AS AgeGroup FROM Patients), JoinedTable AS (SELECT AgeGroups.PatientID, AgeGroup, TreatmentDurationDays, NumberOfMeds FROM AgeGroups JOIN Treatments ON AgeGroups.PatientID = Treatments.PatientID) SELECT AgeGroup, AVG(TreatmentDurationDays) AS AvgTreatmentDuration, AVG(NumberOfMeds) AS AvgNumberOfMeds FROM JoinedTable GROUP BY AgeGroup;",The query first creates a new table 'AgeGroups' that classifies patients into different age groups. It then joins this table with the 'Treatments' table to get the treatment duration and number of medications for each patient. The query then calculates the average treatment duration and average number of medications for each age group.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert data of athletes' performance statistics in different sports events, then show me a pivot table that displays the top 3 athletes with the highest overall score in each sport.","CREATE TABLE Athletes (Athlete_ID INT PRIMARY KEY, Athlete_Name VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE SportsEvents (Event_ID INT PRIMARY KEY, Event_Name VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE Performance (Performance_ID INT PRIMARY KEY, Athlete_ID INT, Event_ID INT, Score DECIMAL); INSERT INTO Athletes (Athlete_ID, Athlete_Name, Sport) VALUES (1, 'John Doe', 'Basketball'), (2, 'Jane Doe', 'Tennis'), (3, 'Mike Smith', 'Football'), (4, 'Sarah Johnson', 'Basketball'), (5, 'James Brown', 'Tennis'); INSERT INTO SportsEvents (Event_ID, Event_Name, Sport) VALUES (1, 'Event 1', 'Basketball'), (2, 'Event 2', 'Tennis'), (3, 'Event 3', 'Football'), (4, 'Event 4', 'Basketball'), (5, 'Event 5', 'Tennis'); INSERT INTO Performance (Performance_ID, Athlete_ID, Event_ID, Score) VALUES (1, 1, 1, 95.5), (2, 2, 2, 98.0), (3, 3, 3, 90.0), (4, 4, 1, 95.7), (5, 5, 2, 91.0);","WITH AthleteScores AS (SELECT A.Athlete_Name, A.Sport, P.Score, DENSE_RANK() OVER (PARTITION BY A.Sport ORDER BY P.Score DESC) AS Rank FROM Athletes A JOIN Performance P ON A.Athlete_ID = P.Athlete_ID) SELECT Athlete_Name, Sport, Score FROM AthleteScores WHERE Rank <= 3 PIVOT (MAX(Score) FOR Sport IN ('Basketball', 'Tennis', 'Football'));",The query first creates a common table expression (CTE) named 'AthleteScores' that ranks athletes based on their scores within each sport. This is done using the DENSE_RANK function which ranks the scores in descending order. The PARTITION BY clause in the DENSE_RANK function is used to calculate a separate rank for each sport. The query then selects the top 3 athletes (where Rank is less than or equal to 3) from the CTE and pivots the results to display the highest score for each sport.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,data retrieval: basic data fetching queries,Find the top 5 countries with the highest average crop yield per year for wheat over the last decade.,"CREATE TABLE CropYield (Country VARCHAR(50), Year INT, Crop VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (Country, Year, Crop, Yield) VALUES ('USA', 2010, 'Wheat', 3.4), ('China', 2010, 'Wheat', 5.1), ('India', 2010, 'Wheat', 2.9), ('USA', 2011, 'Wheat', 3.6), ('China', 2011, 'Wheat', 5.2), ('India', 2011, 'Wheat', 3.1), ('USA', 2012, 'Wheat', 3.8), ('China', 2012, 'Wheat', 5.3), ('India', 2012, 'Wheat', 3.2);","WITH AverageYield AS (SELECT Country, AVG(Yield) as AvgYield FROM CropYield WHERE Crop = 'Wheat' AND Year BETWEEN 2010 AND 2020 GROUP BY Country) SELECT Country, AvgYield FROM AverageYield ORDER BY AvgYield DESC LIMIT 5;","The query first creates a common table expression (CTE) named AverageYield to calculate the average yield for wheat for each country over the last decade. It then selects the top 5 countries with the highest average yield, as determined by the AvgYield column in the AverageYield CTE, and displays them in descending order of AvgYield."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert the numbers of tourists visiting from different regions into the TouristInfo table and then find out which region has the least and the most number of tourists visiting our hotels,"CREATE TABLE TouristInfo (TouristID INT PRIMARY KEY, Region VARCHAR(50), NoOfTourists INT); INSERT INTO TouristInfo (TouristID, Region, NoOfTourists) VALUES (1, 'Europe', 500000), (2, 'Asia', 700000), (3, 'North America', 800000), (4, 'Africa', 200000), (5, 'South America', 300000);","WITH TourismRank AS (SELECT Region, NoOfTourists, DENSE_RANK() OVER (ORDER BY NoOfTourists DESC) AS Rank FROM TouristInfo) (SELECT Region, NoOfTourists FROM TourismRank WHERE Rank = 1) UNION (SELECT Region, NoOfTourists FROM TourismRank WHERE Rank = (SELECT MAX(Rank) FROM TourismRank));","The SQL query first creates a common table expression (CTE) to rank regions based on the number of tourists in descending order. The ranking is done using the DENSE_RANK function. Then, it selects the region with the highest number of tourists (Rank = 1) and the region with the least number of tourists using UNION. The MAX function is used to get the maximum rank which corresponds to the region with the least number of tourists."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the top 5 tourist destinations in each region based on the number of visits in the last year.,"CREATE TABLE TouristDestinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Region VARCHAR(50), VisitsLastYear INT); INSERT INTO TouristDestinations (DestinationID, DestinationName, Region, VisitsLastYear) VALUES (1, 'Eiffel Tower', 'Europe', 5000000), (2, 'Great Wall of China', 'Asia', 10000000), (3, 'Statue of Liberty', 'North America', 2000000), (4, 'Pyramids of Giza', 'Africa', 1500000), (5, 'Sydney Opera House', 'Australia', 3000000);","WITH RankedDestinations AS (SELECT DestinationName, VisitsLastYear, DENSE_RANK() OVER (PARTITION BY Region ORDER BY VisitsLastYear DESC) AS Rank FROM TouristDestinations) SELECT Region, DestinationName, VisitsLastYear FROM RankedDestinations WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank tourist destinations based on the number of visits in the last year in descending order for each region. It then selects the top 5 tourist destinations in each region using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showcasing the top 5 stadiums with the highest average fan attendance for baseball games in the past five years.,"CREATE TABLE Stadiums (StadiumID INT PRIMARY KEY, StadiumName VARCHAR(50), Capacity INT); INSERT INTO Stadiums (StadiumID, StadiumName, Capacity) VALUES (1, 'Stadium A', 50000), (2, 'Stadium B', 40000), (3, 'Stadium C', 60000), (4, 'Stadium D', 45000), (5, 'Stadium E', 55000); CREATE TABLE BaseballGames (GameID INT PRIMARY KEY, StadiumID INT, Attendance INT, GameDate DATE); INSERT INTO BaseballGames (GameID, StadiumID, Attendance, GameDate) VALUES (1, 1, 45000, '2017-05-06'), (2, 2, 35000, '2017-06-10'), (3, 3, 55000, '2017-07-15'), (4, 4, 40000, '2017-08-20'), (5, 5, 52000, '2017-09-25');","WITH AvgAttendance AS (SELECT StadiumID, AVG(Attendance) AS AvgAtt FROM BaseballGames WHERE GameDate BETWEEN '2016-01-01' AND '2021-12-31' GROUP BY StadiumID) SELECT S.StadiumName, A.AvgAtt FROM AvgAttendance A JOIN Stadiums S ON A.StadiumID = S.StadiumID ORDER BY A.AvgAtt DESC LIMIT 5;","This SQL query first creates a Common Table Expression (CTE) named AvgAttendance which calculates the average attendance at each stadium for baseball games held in the last five years. It then joins this CTE with the Stadiums table using StadiumID, and selects the stadium name and average attendance. The results are ordered by average attendance in descending order and limited to the top 5."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert new crop yield data for the year 2020 and then show the top 5 crops with the highest yield in Africa.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL, Year INT); INSERT INTO CropYield (CropID, CropName, Region, Yield, Year) VALUES (1, 'Wheat', 'North America', 120.5, 2019), (2, 'Corn', 'Europe', 118.0, 2019), (3, 'Rice', 'Asia', 110.0, 2019), (4, 'Soybeans', 'North America', 115.7, 2019), (5, 'Barley', 'Europe', 95.0, 2019);","INSERT INTO CropYield (CropID, CropName, Region, Yield, Year) VALUES (6, 'Wheat', 'Africa', 130.5, 2020), (7, 'Corn', 'Africa', 140.0, 2020), (8, 'Rice', 'Africa', 125.0, 2020), (9, 'Soybeans', 'Africa', 117.7, 2020), (10, 'Barley', 'Africa', 100.0, 2020); WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (ORDER BY Yield DESC) AS Rank FROM CropYield WHERE Year = 2020 AND Region = 'Africa') SELECT CropName, Yield FROM RankedCrops WHERE Rank <= 5;","The query first inserts new crop yield data for Africa for the year 2020. Then, it creates a common table expression (CTE) to rank crops based on their yield in the year 2020 in Africa in descending order. It then selects the top 5 crops with the highest yield using the DENSE_RANK function."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Extract the five most popular fashion trends in Paris for the year 2020 based on consumer buying behavior.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Year INT, Region VARCHAR(50)); INSERT INTO FashionTrends (TrendID, TrendName, Year, Region) VALUES (1, 'Boho Chic', 2020, 'Paris'), (2, 'Streetwear', 2020, 'Paris'), (3, 'Sustainable Fashion', 2020, 'Paris'), (4, 'Athleisure', 2020, 'Paris'), (5, 'Vintage', 2020, 'Paris'); CREATE TABLE ConsumerBehavior (BehaviorID INT PRIMARY KEY, TrendID INT, Purchases INT); INSERT INTO ConsumerBehavior (BehaviorID, TrendID, Purchases) VALUES (1, 1, 1000), (2, 2, 1500), (3, 3, 1200), (4, 4, 900), (5, 5, 1800);","WITH RankedTrends AS (SELECT ft.TrendName, cb.Purchases, DENSE_RANK() OVER (ORDER BY cb.Purchases DESC) AS Rank FROM FashionTrends ft JOIN ConsumerBehavior cb ON ft.TrendID = cb.TrendID WHERE ft.Year = 2020 AND ft.Region = 'Paris') SELECT TrendName, Purchases FROM RankedTrends WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank fashion trends based on the number of purchases in descending order. It joins the FashionTrends and ConsumerBehavior tables on the TrendID column, and filters for trends in Paris during 2020. It then selects the top 5 most popular trends using the DENSE_RANK function."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the top 10 countries with the highest average annual temperature increase from 2000 to 2020 and display their annual increases in a pivot table format.,"CREATE TABLE GlobalTemperature (Country VARCHAR(50), Year INT, AvgTempIncrease DECIMAL); INSERT INTO GlobalTemperature (Country, Year, AvgTempIncrease) VALUES ('USA', 2000, 0.2), ('USA', 2001, 0.3), ('USA', 2020, 2.1), ('China', 2000, 0.1), ('China', 2001, 0.4), ('China', 2020, 1.9), ('India', 2000, 0.3), ('India', 2001, 0.2), ('India', 2020, 1.8);","WITH RankedCountries AS (SELECT Country, AVG(AvgTempIncrease) AS AvgIncrease, DENSE_RANK() OVER (ORDER BY AVG(AvgTempIncrease) DESC) AS Rank FROM GlobalTemperature WHERE Year BETWEEN 2000 AND 2020 GROUP BY Country) SELECT Country, AvgIncrease FROM RankedCountries WHERE Rank <= 10 PIVOT (AvgIncrease FOR Year);","The query first calculates the average annual temperature increase for each country from 2000 to 2020. It then ranks these averages in descending order using the DENSE_RANK function. The top 10 countries with the highest average annual temperature increases are selected. Finally, these results are displayed in a pivot table format, with the countries as rows and the years as columns."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert the yield information for a new wheat variant in the Midwest region for the year 2022 into the CropYields table, then update the GlobalFoodInitiatives table to include this new data, and finally delete any record from the FarmingPractices table that is older than 10 years.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropVariant VARCHAR(50), Region VARCHAR(50), Year INT, Yield DECIMAL); CREATE TABLE GlobalFoodInitiatives (InitiativeID INT PRIMARY KEY, CropID INT, InitiativeGoals VARCHAR(255)); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, Year INT, PracticeType VARCHAR(50), Efficacy DECIMAL); INSERT INTO CropYields (CropID, CropVariant, Region, Year, Yield) VALUES (1, 'Corn', 'Midwest', 2021, 180.0), (2, 'Soybean', 'South', 2021, 150.0); INSERT INTO GlobalFoodInitiatives (InitiativeID, CropID, InitiativeGoals) VALUES (1, 1, 'Increase corn yield by 10%'), (2, 2, 'Reduce water usage for soybean'); INSERT INTO FarmingPractices (PracticeID, Year, PracticeType, Efficacy) VALUES (1, 2010, 'Crop rotation', 0.8), (2, 2012, 'Cover cropping', 0.85);","INSERT INTO CropYields (CropID, CropVariant, Region, Year, Yield) VALUES (3, 'Wheat', 'Midwest', 2022, 200.0); UPDATE GlobalFoodInitiatives SET CropID = 3 WHERE InitiativeID = 1; DELETE FROM FarmingPractices WHERE Year < 2012;","The query first inserts a new record into the CropYields table for the new wheat variant. It then updates the GlobalFoodInitiatives table to incorporate this new data into its first initiative (assuming the first initiative now applies to this wheat variant). Finally, the query removes any practices from the FarmingPractices table that are more than 10 years old."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 5 countries with the highest average hotel ratings and commit the transaction.,"CREATE TABLE HotelRatings (Country VARCHAR(50), HotelID INT PRIMARY KEY, Rating DECIMAL); INSERT INTO HotelRatings (Country, HotelID, Rating) VALUES ('USA', 1, 4.5), ('Spain', 2, 4.2), ('UK', 3, 4.7), ('Japan', 4, 4.8), ('Australia', 5, 4.4), ('USA', 6, 4.7), ('Spain', 7, 4.5), ('UK', 8, 4.6), ('Japan', 9, 4.7), ('Australia', 10, 4.6);","BEGIN TRANSACTION; WITH CountryRatings AS (SELECT Country, AVG(Rating) AS AvgRating FROM HotelRatings GROUP BY Country) SELECT Country, AvgRating FROM CountryRatings ORDER BY AvgRating DESC LIMIT 5; COMMIT;","The SQL query begins by starting a transaction. It then creates a common table expression (CTE) named 'CountryRatings' to calculate the average hotel ratings for each country. The CTE groups the 'HotelRatings' table by the 'Country' column and calculates the average 'Rating' for each group. The main SELECT statement then selects all records from the CTE, orders them by 'AvgRating' in descending order, and limits the result to the top 5 records. The transaction is then committed to save the changes."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the top 10 countries with the highest CO2 emissions in the last decade and their annual average emissions.,"CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CO2Emissions (Country, Year, Emissions) VALUES ('United States', 2010, 5.6), ('China', 2010, 7.8), ('India', 2010, 1.8), ('United States', 2011, 5.8), ('China', 2011, 8.2), ('India', 2011, 2.0), ('United States', 2012, 5.9), ('China', 2012, 8.6), ('India', 2012, 2.2);","WITH RankedCountries AS (SELECT Country, AVG(Emissions) AS AvgEmissions, DENSE_RANK() OVER (ORDER BY AVG(Emissions) DESC) AS Rank FROM CO2Emissions WHERE Year >= 2010 AND Year <= 2020 GROUP BY Country) SELECT Country, AvgEmissions FROM RankedCountries WHERE Rank <= 10;","The query first creates a common table expression (CTE) to calculate the average CO2 emissions for each country over the last decade, and rank them in descending order. It then selects the top 10 countries with the highest average CO2 emissions."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the customer records to reflect their latest preferences and then display the top 5 most visited destinations.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50)); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), PreferredDestination INT, FOREIGN KEY (PreferredDestination) REFERENCES Destinations(DestinationID)); INSERT INTO Destinations (DestinationID, DestinationName) VALUES (1, 'Paris'), (2, 'New York'), (3, 'Sydney'), (4, 'Tokyo'), (5, 'London'), (6, 'Rome'); INSERT INTO Customers (CustomerID, CustomerName, PreferredDestination) VALUES (1, 'John', 2), (2, 'Emma', 5), (3, 'Sam', 3), (4, 'Olivia', 1), (5, 'Ben', 6);","UPDATE Customers SET PreferredDestination = 1 WHERE CustomerID = 1; UPDATE Customers SET PreferredDestination = 2 WHERE CustomerID = 2; UPDATE Customers SET PreferredDestination = 3 WHERE CustomerID = 3; UPDATE Customers SET PreferredDestination = 4 WHERE CustomerID = 4; UPDATE Customers SET PreferredDestination = 5 WHERE CustomerID = 5; WITH RankedDestinations AS (SELECT PreferredDestination, COUNT(*) AS TotalVisits, DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM Customers GROUP BY PreferredDestination) SELECT DestinationName, TotalVisits FROM RankedDestinations INNER JOIN Destinations ON RankedDestinations.PreferredDestination = Destinations.DestinationID WHERE Rank <= 5;",The first five queries update the 'PreferredDestination' of each customer in the 'Customers' table. The next query creates a common table expression (CTE) to count the total visits to each destination and rank them in descending order based on the total visits. It then selects the top 5 most visited destinations using the DENSE_RANK function by joining the 'RankedDestinations' and 'Destinations' tables on the 'DestinationID' and displaying their names and total visits.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report that shows the total number of transactions, total amount, and average amount of transactions for each payment method in each region. Also, include only those regions where total transactions are more than 1000.","CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, TotalAmount DECIMAL, PaymentMethod VARCHAR(50), Region VARCHAR(50)); INSERT INTO Transactions (TransactionID, TotalAmount, PaymentMethod, Region) VALUES (1, 200.5, 'Card', 'North America'), (2, 300.0, 'Cash', 'Europe'), (3, 150.0, 'Card', 'Asia'), (4, 500.7, 'Cash', 'North America'), (5, 250.0, 'Card', 'Europe');","WITH RegionTotals AS (SELECT Region, PaymentMethod, COUNT(*) AS TotalTransactions, SUM(TotalAmount) AS TotalAmount, AVG(TotalAmount) AS AvgAmount FROM Transactions GROUP BY Region, PaymentMethod) SELECT Region, PaymentMethod, TotalTransactions, TotalAmount, AvgAmount FROM RegionTotals WHERE TotalTransactions > 1000;","The query first creates a common table expression (CTE) named RegionTotals that calculates the total transactions, total amount, and average amount for each payment method in each region. Then, it selects the Region, PaymentMethod, TotalTransactions, TotalAmount, and AvgAmount from the CTE where the total transactions are more than 1000."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,data retrieval: basic data fetching queries,Find the top 3 countries with the highest annual carbon dioxide emissions for the years 2010-2020.,"CREATE TABLE EmissionsData (Country VARCHAR(50), Year INT, CO2Emissions DECIMAL); INSERT INTO EmissionsData (Country, Year, CO2Emissions) VALUES ('USA', 2010, 5.6), ('China', 2010, 7.2), ('India', 2010, 2.0), ('USA', 2020, 5.3), ('China', 2020, 10.0), ('India', 2020, 2.5);","WITH AnnualEmissions AS (SELECT Country, SUM(CO2Emissions) AS TotalEmissions FROM EmissionsData WHERE Year BETWEEN 2010 AND 2020 GROUP BY Country) SELECT Country, TotalEmissions FROM AnnualEmissions ORDER BY TotalEmissions DESC LIMIT 3;","The query first creates a common table expression (CTE) that aggregates the total annual carbon dioxide emissions for each country for the years 2010 to 2020. It then selects the top 3 countries with the highest total emissions, ordered in descending order by emissions."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the room occupancy rates for different hotels in different regions for the past 5 years, and then display the top 5 hotels with the highest average occupancy rate during this period.","CREATE TABLE HotelOccupancy (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50), Year INT, OccupancyRate DECIMAL); INSERT INTO HotelOccupancy (HotelID, HotelName, Region, Year, OccupancyRate) VALUES (1, 'The Ritz', 'North America', 2017, 85.5), (2, 'The Hilton', 'Europe', 2017, 82.0), (3, 'The Sheraton', 'Asia', 2017, 80.0), (4, 'The Marriott', 'North America', 2017, 83.7), (5, 'The Intercontinental', 'Europe', 2017, 81.0);","WITH RankedHotels AS (SELECT HotelName, AVG(OccupancyRate) as AvgOccupancyRate, DENSE_RANK() OVER (ORDER BY AVG(OccupancyRate) DESC) AS Rank FROM HotelOccupancy WHERE Year BETWEEN 2017 AND 2021 GROUP BY HotelName) SELECT HotelName, AvgOccupancyRate FROM RankedHotels WHERE Rank <= 5;",The query first creates a common table expression (CTE) that groups the hotels by name and calculates the average occupancy rate for each hotel for the years 2017 to 2021. It ranks these hotels based on the average occupancy rate in descending order using the DENSE_RANK function. It then selects the top 5 hotels with the highest average occupancy rates.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the athlete performance table to reflect the new personal bests achieved in the recent global sports events and then list the top five athletes with the highest personal bests in descending order.,"CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), PersonalBest DECIMAL); INSERT INTO AthletePerformance (AthleteID, AthleteName, Sport, PersonalBest) VALUES (1, 'Usain Bolt', 'Athletics', 9.58), (2, 'Michael Phelps', 'Swimming', 50.58), (3, 'Simone Biles', 'Gymnastics', 15.966), (4, 'Roger Federer', 'Tennis', 20), (5, 'Lionel Messi', 'Football', 91);","UPDATE AthletePerformance SET PersonalBest = 9.50 WHERE AthleteName = 'Usain Bolt'; UPDATE AthletePerformance SET PersonalBest = 50.40 WHERE AthleteName = 'Michael Phelps'; UPDATE AthletePerformance SET PersonalBest = 16.100 WHERE AthleteName = 'Simone Biles'; WITH RankedAthletes AS (SELECT AthleteName, PersonalBest, DENSE_RANK() OVER (ORDER BY PersonalBest DESC) AS Rank FROM AthletePerformance) SELECT AthleteName, PersonalBest FROM RankedAthletes WHERE Rank <= 5;","The query first updates the personal bests for Usain Bolt, Michael Phelps, and Simone Biles in the AthletePerformance table. It then creates a common table expression (CTE) to rank athletes based on their personal bests in descending order. The final part of the query selects the top five athletes with the highest personal bests using the DENSE_RANK function."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Show the top 3 fastest-growing technology sectors in terms of funding and the leading company in each sector for the last quarter.,"CREATE TABLE TechSectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(50)); INSERT INTO TechSectors (SectorID, SectorName) VALUES (1, 'AI & Robotics'), (2, 'Cybersecurity'), (3, 'HealthTech'), (4, 'FinTech'), (5, 'EdTech'); CREATE TABLE CompanyData (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), SectorID INT, FundingAmount DECIMAL, FundingDate DATE);","WITH FundingGrowth AS (SELECT SectorID, SUM(FundingAmount) AS TotalFunding FROM CompanyData WHERE FundingDate BETWEEN DATEADD(qq, -1, GETDATE()) AND GETDATE() GROUP BY SectorID), RankedSectors AS (SELECT SectorID, TotalFunding, DENSE_RANK() OVER (ORDER BY TotalFunding DESC) AS Rank FROM FundingGrowth) SELECT r.Rank, ts.SectorName, r.TotalFunding, c.CompanyName FROM RankedSectors r INNER JOIN TechSectors ts ON ts.SectorID = r.SectorID INNER JOIN CompanyData c ON c.SectorID = ts.SectorID WHERE r.Rank <= 3 ORDER BY r.Rank;","The query first creates a common table expression (CTE) named FundingGrowth to calculate the total funding for each sector in the last quarter. It then ranks these sectors based on their total funding in descending order in another CTE called RankedSectors. Finally, it selects the top 3 sectors and their leading company by joining the RankedSectors with the TechSectors and CompanyData tables."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert details for the new 5G technologies from various companies into the TechDetails table, and then display the technologies which are used by more than one company.","CREATE TABLE TechDetails (TechId INT PRIMARY KEY, TechName VARCHAR(50), CompanyName VARCHAR(50), UsageCount INT); INSERT INTO TechDetails (TechId, TechName, CompanyName, UsageCount) VALUES (1, '5G NR', 'Verizon', 0), (2, '5G NR', 'AT&T', 0), (3, 'mmWave', 'T-Mobile', 0), (4, 'mmWave', 'Verizon', 0), (5, 'Sub-6 GHz', 'AT&T', 0);","INSERT INTO TechDetails (TechId, TechName, CompanyName, UsageCount) VALUES (6, '5G NR', 'Sprint', 0), (7, 'mmWave', 'Sprint', 0); UPDATE TechDetails SET UsageCount = UsageCount + 1 WHERE TechName IN (SELECT TechName FROM TechDetails GROUP BY TechName HAVING COUNT(TechName) > 1); SELECT TechName FROM TechDetails WHERE UsageCount > 0;","The query first inserts details of new 5G technologies being used by Sprint into the table. It then updates the usage count for technologies which are used by more than one company. Finally, it displays the names of the technologies which are used by more than one company."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Generate a report that shows the most used programming languages across different industries in the past 5 years and the trend of their usage in each year.,"CREATE TABLE ProgrammingLanguages (ID INT PRIMARY KEY, LanguageName VARCHAR(50)); INSERT INTO ProgrammingLanguages (ID, LanguageName) VALUES (1, 'Python'), (2, 'JavaScript'), (3, 'Java'); CREATE TABLE IndustryType (ID INT PRIMARY KEY, IndustryName VARCHAR(50)); INSERT INTO IndustryType (ID, IndustryName) VALUES (1, 'Tech'), (2, 'Finance'), (3, 'Healthcare'); CREATE TABLE LanguageUsage (ID INT PRIMARY KEY, Year INT, IndustryID INT, LanguageID INT, UsageCount INT); INSERT INTO LanguageUsage (ID, Year, IndustryID, LanguageID, UsageCount) VALUES (1, 2017, 1, 1, 5000), (2, 2018, 1, 1, 6000), (3, 2019, 1, 1, 7000), (4, 2020, 1, 1, 8000), (5, 2021, 1, 1, 9000), (6, 2017, 1, 2, 4000), (7, 2018, 1, 2, 4500), (8, 2019, 1, 2, 5000), (9, 2020, 1, 2, 5500), (10, 2021, 1, 2, 6000);","WITH YearlyUsage AS (SELECT l.LanguageName, i.IndustryName, lu.Year, SUM(lu.UsageCount) AS TotalUsage FROM LanguageUsage lu JOIN ProgrammingLanguages l ON lu.LanguageID = l.ID JOIN IndustryType i ON lu.IndustryID = i.ID GROUP BY l.LanguageName, i.IndustryName, lu.Year), PivotedUsage AS (SELECT * FROM YearlyUsage PIVOT (SUM(TotalUsage) FOR Year IN (2017, 2018, 2019, 2020, 2021))) SELECT * FROM PivotedUsage ORDER BY 2021 DESC;","The query first creates a common table expression (CTE) named 'YearlyUsage' that groups the data by programming language name, industry name, and year, and calculates the total usage of each programming language in each industry each year. The next CTE, 'PivotedUsage', pivots the 'YearlyUsage' CTE to get the total usage of each programming language in each industry for each year in separate columns. The main query then selects all from the 'PivotedUsage' CTE and orders the result by the total usage in 2021 in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the total spent by each customer in the Customers table based on their transactions in the Transactions table, and then delete any customers from the Customers table who haven't made any transactions.","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(50), TotalSpent DECIMAL); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, CustomerID INT, AmountSpent DECIMAL); INSERT INTO Customers (CustomerID, Name, TotalSpent) VALUES (1, 'John', 0.0), (2, 'Jane', 0.0), (3, 'Doe', 0.0); INSERT INTO Transactions (TransactionID, CustomerID, AmountSpent) VALUES (1, 1, 100.0), (2, 1, 50.0), (3, 2, 200.0);","WITH SumTransactions AS (SELECT CustomerID, SUM(AmountSpent) AS Total FROM Transactions GROUP BY CustomerID) UPDATE Customers SET TotalSpent = SumTransactions.Total FROM Customers INNER JOIN SumTransactions ON Customers.CustomerID = SumTransactions.CustomerID; DELETE FROM Customers WHERE CustomerID NOT IN (SELECT CustomerID FROM Transactions);","The query first creates a common table expression (CTE) to calculate the total amount spent by each customer based on the Transactions table. It then updates the Customers table with these totals using an INNER JOIN. Finally, it deletes any customers from the Customers table who do not appear in the Transactions table, meaning they haven't made any transactions."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Insert records of total app downloads and updates for the apps 'Tech Guru', 'Innovator', and 'Disruptor' in the table 'AppData' and then display the total downloads and average updates for each app having average updates more than 5000.","CREATE TABLE AppData (AppID INT PRIMARY KEY, AppName VARCHAR(50), TotalDownloads INT, TotalUpdates INT); INSERT INTO AppData (AppID, AppName, TotalDownloads, TotalUpdates) VALUES (1, 'Tech Guru', 50000, 15000), (2, 'Innovator', 45000, 10000), (3, 'Disruptor', 40000, 8000);","INSERT INTO AppData (AppID, AppName, TotalDownloads, TotalUpdates) VALUES (4, 'Tech Guru', 60000, 16000), (5, 'Innovator', 50000, 12000), (6, 'Disruptor', 45000, 9000); SELECT AppName, SUM(TotalDownloads) as TotalDownloads, AVG(TotalUpdates) as AvgUpdates FROM AppData GROUP BY AppName HAVING AVG(TotalUpdates) > 5000;","The first part of the SQL query inserts records of total downloads and updates for the apps 'Tech Guru', 'Innovator', and 'Disruptor'. The second part of the SQL query calculates the total downloads and average updates for each app and then filters the result to display only those apps that have average updates more than 5000."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,"Find out the top 5 fashion brands that have the highest average consumer ratings in each region, and compare their sustainable practices ratings.","CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE ConsumerRatings (BrandID INT, Region VARCHAR(50), AvgConsumerRating DECIMAL); CREATE TABLE SustainablePractices (BrandID INT, SustainableRating DECIMAL); INSERT INTO FashionBrands (BrandID, BrandName) VALUES (1, 'Gucci'), (2, 'Prada'), (3, 'Chanel'), (4, 'H&M'), (5, 'Zara'); INSERT INTO ConsumerRatings (BrandID, Region, AvgConsumerRating) VALUES (1, 'North America', 9.5), (2, 'Europe', 9.0), (3, 'Asia', 8.9), (4, 'South America', 8.7), (5, 'Africa', 8.6); INSERT INTO SustainablePractices (BrandID, SustainableRating) VALUES (1, 7.5), (2, 9.0), (3, 8.5), (4, 9.8), (5, 9.3);","WITH RankedBrands AS (SELECT BrandName, Region, AvgConsumerRating, DENSE_RANK() OVER (PARTITION BY Region ORDER BY AvgConsumerRating DESC) AS Rank FROM FashionBrands JOIN ConsumerRatings ON FashionBrands.BrandID = ConsumerRatings.BrandID) SELECT RankedBrands.BrandName, RankedBrands.Region, RankedBrands.AvgConsumerRating, SustainablePractices.SustainableRating FROM RankedBrands JOIN SustainablePractices ON FashionBrands.BrandID = SustainablePractices.BrandID WHERE Rank <= 5;","The query first creates a common table expression (CTE) called RankedBrands to rank fashion brands in each region based on their average consumer ratings in descending order. The DENSE_RANK function is used to assign a rank to each brand within each region. Then, it joins the RankedBrands CTE with the SustainablePractices table to fetch the sustainable practices ratings for the top-performing brands. Finally, it selects the top 5 brands in each region as per the consumer ratings, along with their sustainable practices ratings."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 3 crops with the highest average yield per acre for each region.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), YieldPerAcre DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, YieldPerAcre) VALUES (1, 'Corn', 'North America', 150.5), (2, 'Wheat', 'Europe', 118.0), (3, 'Rice', 'Asia', 200.0), (4, 'Soybeans', 'South America', 100.0), (5, 'Sorghum', 'Africa', 80.0);","WITH RankedCrops AS (SELECT CropName, YieldPerAcre, DENSE_RANK() OVER (PARTITION BY Region ORDER BY YieldPerAcre DESC) AS Rank FROM CropYield) SELECT Region, CropName, YieldPerAcre FROM RankedCrops WHERE Rank <= 3;",The SQL query creates a common table expression (CTE) to rank crops in each region based on their yield per acre in descending order. It then selects the top 3 crops with the highest yield per acre for each region using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the top three most purchased fashion brands in Europe and Asia for the year 2020.,"CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, CustomerID INT, BrandID INT, Region VARCHAR(50), PurchaseDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO Purchases (PurchaseID, CustomerID, BrandID, Region, PurchaseDate) VALUES (1, 101, 1, 'Europe', '2020-03-15'), (2, 102, 2, 'Asia', '2020-05-20'), (3, 103, 3, 'Europe', '2020-08-10'), (4, 104, 1, 'Asia', '2020-11-30'), (5, 105, 2, 'Europe', '2020-12-05'); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Zara'), (2, 'H&M'), (3, 'Gucci');","WITH BrandPurchases AS (SELECT b.BrandName, COUNT(p.BrandID) AS TotalPurchases, p.Region FROM Purchases p INNER JOIN Brands b ON p.BrandID = b.BrandID WHERE p.PurchaseDate BETWEEN '2020-01-01' AND '2020-12-31' AND p.Region IN ('Europe', 'Asia') GROUP BY b.BrandName, p.Region), RankedBrands AS (SELECT BrandName, TotalPurchases, Region, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY TotalPurchases DESC) AS Rank FROM BrandPurchases) SELECT BrandName, TotalPurchases, Region FROM RankedBrands WHERE Rank <= 3;","The SQL query starts by creating a common table expression (CTE) named BrandPurchases which selects the brand name, counts the number of purchases for each brand and includes the region from the Purchases and Brands tables for the year 2020 in Europe and Asia. Another CTE, RankedBrands, is created which ranks the brands based on the total number of purchases in descending order for each region. The main query then selects the brand name, total purchases and region from RankedBrands where the rank is less or equal to 3, which gives us the top three most purchased fashion brands in Europe and Asia for the year 2020."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Show me the top 5 models with the highest sales in Europe for hybrid vehicles.,"CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, ModelID INT, ModelName VARCHAR(50), Region VARCHAR(50), VehicleType VARCHAR(50), SalesCount INT); INSERT INTO VehicleSales (SalesID, ModelID, ModelName, Region, VehicleType, SalesCount) VALUES (1, 1, 'Model S', 'Europe', 'Hybrid', 500), (2, 2, 'Model 3', 'Europe', 'Hybrid', 600), (3, 3, 'Leaf', 'Europe', 'Hybrid', 700), (4, 4, 'Bolt', 'Europe', 'Hybrid', 800), (5, 5, 'Prius', 'Europe', 'Hybrid', 900);","WITH RankedModels AS (SELECT ModelName, SalesCount, DENSE_RANK() OVER (ORDER BY SalesCount DESC) AS Rank FROM VehicleSales WHERE Region = 'Europe' AND VehicleType = 'Hybrid') SELECT ModelName, SalesCount FROM RankedModels WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank vehicle models based on their sales count in Europe for hybrid vehicles in descending order. It then selects the top 5 models with the highest sales using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the most popular movie genre in each region based on the number of views, and display the top 3 genres with their total viewership.","CREATE TABLE Content (ContentID INT PRIMARY KEY, Genre VARCHAR(50), ContentName VARCHAR(50)); CREATE TABLE Consumption (UserID INT, ContentID INT, Region VARCHAR(50), Views INT); INSERT INTO Content (ContentID, Genre, ContentName) VALUES (1, 'Action', 'Avengers'), (2, 'Drama', 'The Crown'), (3, 'Comedy', 'Friends'), (4, 'Horror', 'A Quiet Place'), (5, 'Action', 'Iron Man'); INSERT INTO Consumption (UserID, ContentID, Region, Views) VALUES (1, 1, 'North America', 1000), (2, 2, 'Europe', 500), (3, 3, 'Asia', 700), (4, 4, 'South America', 300), (5, 5, 'North America', 1200);","WITH GenreViews AS (SELECT c.Genre, con.Region, SUM(con.Views) AS TotalViews FROM Content c INNER JOIN Consumption con ON c.ContentID = con.ContentID GROUP BY c.Genre, con.Region), RankedGenres AS (SELECT Genre, Region, TotalViews, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY TotalViews DESC) AS Rank FROM GenreViews) SELECT Genre, Region, TotalViews FROM RankedGenres WHERE Rank <= 3;","The query first joins the Content and Consumption tables on ContentID and groups by genre and region, getting the sum of views for each genre in each region. This result is stored in a common table expression (CTE) called GenreViews. Another CTE, RankedGenres, is created by ranking each genre within each region based on the total views in descending order. Finally, the query selects the genre, region, and total views from RankedGenres where the rank is less than or equal to three, thus giving the top three genres in each region."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,common table expressions,data retrieval: basic data fetching queries,Show me the top 5 travel destinations for customers in the last year sorted by popularity and average spend per trip.,"CREATE TABLE CustomerData (CustomerId INT PRIMARY KEY, CustomerName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE TravelData (TravelId INT PRIMARY KEY, CustomerId INT, Destination VARCHAR(50), Spend DECIMAL, TripDate DATE); INSERT INTO CustomerData (CustomerId, CustomerName, Country) VALUES (1, 'John', 'USA'), (2, 'Emily', 'UK'), (3, 'Michael', 'Canada'), (4, 'Sarah', 'USA'), (5, 'David', 'UK'); INSERT INTO TravelData (TravelId, CustomerId, Destination, Spend, TripDate) VALUES (1, 1, 'Paris', 2000, '2020-06-14'), (2, 2, 'Rome', 1500, '2020-02-10'), (3, 3, 'Paris', 1800, '2020-12-25'), (4, 2, 'Paris', 2200, '2020-06-30'), (5, 1, 'Rome', 1400, '2020-02-15');","WITH DestinationPopularity AS (SELECT Destination, COUNT(*) AS Popularity, AVG(Spend) AS AvgSpend FROM TravelData WHERE TripDate >= '2020-01-01' AND TripDate <= '2020-12-31' GROUP BY Destination) SELECT Destination, Popularity, AvgSpend FROM DestinationPopularity ORDER BY Popularity DESC, AvgSpend DESC LIMIT 5;",The query first creates a common table expression (CTE) to group the travel data by destination. It calculates the popularity of each destination based on the number of trips made to that destination within the last year. The average spend per trip for each destination is also calculated. The CTE is then used to select the top 5 travel destinations sorted by popularity and average spend per trip in descending order.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 crops with the highest yield per acre in 2020 for each region.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, YieldPerAcre DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Year, YieldPerAcre) VALUES (1, 'Corn', 'North America', 2020, 180.5), (2, 'Wheat', 'Europe', 2020, 78.0), (3, 'Rice', 'Asia', 2020, 140.0), (4, 'Potatoes', 'North America', 2020, 200.7), (5, 'Soybeans', 'Europe', 2020, 85.0);","WITH RankedCrops AS (SELECT CropName, YieldPerAcre, DENSE_RANK() OVER (PARTITION BY Region ORDER BY YieldPerAcre DESC) AS Rank FROM CropYield WHERE Year = 2020) SELECT Region, CropName, YieldPerAcre FROM RankedCrops WHERE Rank <= 5;","The query first creates a common table expression (CTE) named 'RankedCrops'. In this CTE, it ranks crops for each region based on their yield per acre in 2020 in descending order using the DENSE_RANK function. The PARTITION BY clause is used to calculate a separate rank for each region. Finally, it selects the top 5 crops with the highest yield per acre for each region from the CTE."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,common table expressions,data retrieval: basic data fetching queries,Find the top 5 most common treatments for patients aged between 20 and 30 years.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(50), PatientID INT); INSERT INTO Patients (PatientID, Age, Gender) VALUES (1, 25,'Male'), (2, 28, 'Female'), (3, 27, 'Male'), (4, 22, 'Female'), (5, 30, 'Male'); INSERT INTO Treatments (TreatmentID, TreatmentName, PatientID) VALUES (1, 'Chemotherapy', 1), (2, 'Radiation', 2), (3, 'Surgery', 3), (4, 'Chemotherapy', 2), (5, 'Radiation', 1);","WITH AgeGroup AS (SELECT PatientID FROM Patients WHERE Age BETWEEN 20 AND 30), TreatmentCount AS (SELECT TreatmentName, COUNT(*) AS Count FROM Treatments WHERE PatientID IN (SELECT PatientID FROM AgeGroup) GROUP BY TreatmentName) SELECT TreatmentName FROM TreatmentCount ORDER BY Count DESC LIMIT 5;","The query first identifies the patients aged between 20 and 30 years using a Common Table Expression (CTE) named AgeGroup. It then counts the number of each treatment type for these patients in another CTE named TreatmentCount. The final SELECT statement returns the top 5 most common treatments for this age group, ordered by the count in descending order."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Create a report that shows the top 5 countries with the highest reduction in CO2 emissions from 2000 to 2020, and compare it with the countries with the highest increase in forest areas in the same period.","CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, CO2Emissions DECIMAL); INSERT INTO CO2Emissions (Country, Year, CO2Emissions) VALUES ('USA', 2000, 7000.5), ('USA', 2020, 6500.0), ('China', 2000, 3000.0), ('China', 2020, 8000.0), ('India', 2000, 1000.0), ('India', 2020, 1500.0), ('Brazil', 2000, 500.0), ('Brazil', 2020, 400.0), ('Canada', 2000, 700.0), ('Canada', 2020, 600.0); CREATE TABLE ForestArea (Country VARCHAR(50), Year INT, Area DECIMAL); INSERT INTO ForestArea (Country, Year, Area) VALUES ('USA', 2000, 3000.5), ('USA', 2020, 3500.0), ('China', 2000, 2000.0), ('China', 2020, 2500.0), ('India', 2000, 1000.0), ('India', 2020, 1500.0), ('Brazil', 2000, 5000.0), ('Brazil', 2020, 5500.0), ('Canada', 2000, 2000.0), ('Canada', 2020, 2500.0);","WITH EmissionReduction AS (SELECT Country, (MAX(CO2Emissions) - MIN(CO2Emissions)) as Reduction FROM CO2Emissions WHERE Year BETWEEN 2000 and 2020 GROUP BY Country ORDER BY Reduction LIMIT 5), ForestIncrease AS (SELECT Country, (MAX(Area) - MIN(Area)) as Increase FROM ForestArea WHERE Year BETWEEN 2000 and 2020 GROUP BY Country ORDER BY Increase DESC LIMIT 5) SELECT EmissionReduction.Country, Reduction, ForestIncrease.Country, Increase FROM EmissionReduction CROSS JOIN ForestIncrease;","The provided SQL query first creates two Common Table Expressions (CTEs). The first CTE, EmissionReduction, retrieves the top five countries with the highest reduction in CO2 emissions from 2000 to 2020. The second CTE, ForestIncrease, retrieves the top five countries with the highest increase in forest areas from 2000 to 2020. The query then cross-joins these two CTEs to create a comparative report."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Which are the top 5 sustainable fashion brands based on the percentage of sustainable products they offer? Include only those brands that have at least 10 products.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), TotalProducts INT); INSERT INTO FashionBrands (BrandID, BrandName, TotalProducts) VALUES (1, 'Brand A', 50), (2, 'Brand B', 40), (3, 'Brand C', 60), (4, 'Brand D', 30), (5, 'Brand E', 20); CREATE TABLE SustainableProducts (ProductID INT PRIMARY KEY, BrandID INT, IsSustainable BIT); INSERT INTO SustainableProducts (ProductID, BrandID, IsSustainable) VALUES (1, 1, 1), (2, 1, 0), (3, 2, 1), (4, 2, 1), (5, 3, 0), (6, 3, 1), (7, 4, 1), (8, 4, 0), (9, 5, 1), (10, 5, 1);","WITH SustainableBrands AS (SELECT BrandName, COUNT(IsSustainable) as SustainableCount FROM FashionBrands fb JOIN SustainableProducts sp ON fb.BrandID = sp.BrandID WHERE IsSustainable = 1 GROUP BY BrandName HAVING COUNT(ProductID) > 10), TotalProducts AS (SELECT BrandName, COUNT(*) as TotalCount FROM FashionBrands fb JOIN SustainableProducts sp ON fb.BrandID = sp.BrandID GROUP BY BrandName) SELECT sb.BrandName, (SustainableCount * 1.0 / TotalCount) * 100 as SustainablePercentage FROM SustainableBrands sb JOIN TotalProducts tp ON sb.BrandName = tp.BrandName ORDER BY SustainablePercentage DESC LIMIT 5;","The query first creates a common table expression 'SustainableBrands' that selects the total counts of sustainable products for each brand and eliminates those brands that have less than 10 products. Another common table expression 'TotalProducts' counts the total number of products for each brand. The main query then joins these two CTEs based on 'BrandName', calculates the percentage of sustainable products, and selects the top 5 brands with the highest percentages."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the top 5 tech companies based on the number of innovations and the total funding they have received, and also display the region where they are headquartered.","CREATE TABLE TechCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Region VARCHAR(50)); INSERT INTO TechCompanies (CompanyID, CompanyName, Region) VALUES (1, 'Company A', 'North America'), (2, 'Company B', 'Europe'), (3, 'Company C', 'Asia'), (4, 'Company D', 'North America'), (5, 'Company E', 'Europe'); CREATE TABLE Innovations (InnovationID INT PRIMARY KEY, CompanyID INT, InnovationName VARCHAR(50), FundingReceived DECIMAL); INSERT INTO Innovations (InnovationID, CompanyID, InnovationName, FundingReceived) VALUES (1, 1, 'Innovation 1', 5000.00), (2, 2, 'Innovation 2', 8000.00), (3, 3, 'Innovation 3', 9000.00), (4, 4, 'Innovation 4', 10000.00), (5, 1, 'Innovation 5', 2000.00);","WITH CompanyInnovations AS (SELECT c.CompanyName, c.Region, COUNT(i.InnovationID) AS TotalInnovations, SUM(i.FundingReceived) AS TotalFunding FROM TechCompanies c INNER JOIN Innovations i ON c.CompanyID = i.CompanyID GROUP BY c.CompanyName, c.Region) SELECT CompanyName, Region, TotalInnovations, TotalFunding FROM CompanyInnovations ORDER BY TotalInnovations DESC, TotalFunding DESC LIMIT 5;","This query first creates a Common Table Expression (CTE) named CompanyInnovations, which contains the total number of innovations and total funding received for each company. It then selects the top 5 companies from this CTE, sorted by the total number of innovations in descending order, and then by total funding received in descending order. The result includes the company name, region, total number of innovations, and total funding received."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that presents the top 5 hotel chains with the highest average guest satisfaction scores for the last quarter of 2021. Include in the report the chain's total number of guests for the quarter.,"CREATE TABLE HotelChains (ChainID INT PRIMARY KEY, ChainName VARCHAR(50)); INSERT INTO HotelChains (ChainID, ChainName) VALUES (1, 'Marriott'), (2, 'Hilton'), (3, 'Hyatt'), (4, 'Intercontinental'), (5, 'Accor'); CREATE TABLE GuestSatisfaction (GuestID INT PRIMARY KEY, ChainID INT, SatisfactionScore DECIMAL, StayDate DATE); INSERT INTO GuestSatisfaction (GuestID, ChainID, SatisfactionScore, StayDate) VALUES (1, 1, 8.5, '2021-12-25'), (2, 1, 7.8, '2021-12-20'), (3, 2, 9.0, '2021-12-15'), (4, 3, 8.7, '2021-11-30'), (5, 3, 9.2, '2021-11-15');","WITH QuarterlySatisfaction AS (SELECT ChainID, AVG(SatisfactionScore) AS AvgSatisfaction, COUNT(GuestID) AS TotalGuests FROM GuestSatisfaction WHERE StayDate BETWEEN '2021-10-01' AND '2021-12-31' GROUP BY ChainID), RankedChains AS (SELECT HotelChains.ChainName, QuarterlySatisfaction.AvgSatisfaction, QuarterlySatisfaction.TotalGuests, DENSE_RANK() OVER (ORDER BY AvgSatisfaction DESC) AS Rank FROM HotelChains INNER JOIN QuarterlySatisfaction ON HotelChains.ChainID = QuarterlySatisfaction.ChainID) SELECT ChainName, AvgSatisfaction, TotalGuests FROM RankedChains WHERE Rank <= 5;","The SQL query first creates a subquery named QuarterlySatisfaction that calculates the average satisfaction score and total number of guests per hotel chain for the last quarter of 2021. It then ranks the hotel chains based on the average satisfaction score in descending order through the RankedChains subquery. Finally, it selects the top 5 hotel chains with the highest average guest satisfaction scores and their total number of guests."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert records in the CustomerPurchases table for all customers who purchased sustainable fashion items this month, and provide the top 5 customers who've spent the most.","CREATE TABLE CustomerPurchases (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), PurchaseDate DATE, ItemID INT, ItemCategory VARCHAR(50), Price DECIMAL); CREATE TABLE Items (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO CustomerPurchases (CustomerID, CustomerName, PurchaseDate, ItemID, ItemCategory, Price) VALUES (1, 'John Doe', '2022-01-01', 10, 'Clothing', 50.0), (2, 'Jane Smith', '2022-01-10', 20, 'Footwear', 75.0); INSERT INTO Items (ItemID, ItemName, IsSustainable) VALUES (10, 'Organic Cotton T-Shirt', TRUE), (20, 'Leather Boots', FALSE);","WITH SustainablePurchases AS (SELECT CP.CustomerID, CP.CustomerName, SUM(CP.Price) AS TotalSpent FROM CustomerPurchases CP JOIN Items I ON CP.ItemID = I.ItemID WHERE I.IsSustainable = TRUE AND MONTH(CP.PurchaseDate) = MONTH(CURRENT_DATE) GROUP BY CP.CustomerID, CP.CustomerName), RankedCustomers AS (SELECT CustomerName, TotalSpent, RANK() OVER (ORDER BY TotalSpent DESC) AS Rank FROM SustainablePurchases) SELECT CustomerName, TotalSpent FROM RankedCustomers WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) named SustainablePurchases to calculate the total amount spent by each customer on sustainable items in the current month. It then ranks these customers by their spending in descending order in another CTE called RankedCustomers. The final SELECT statement retrieves the top 5 customers who spent the most on sustainable items this month.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 5 crops with the highest average yield per acre in countries which have implemented agricultural optimization practices.,"CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50), Country VARCHAR(50), AvgYieldPerAcre DECIMAL); INSERT INTO Crops (CropID, CropName, Country, AvgYieldPerAcre) VALUES (1, 'Corn', 'USA', 150.5), (2, 'Wheat', 'France', 100.0), (3, 'Rice', 'China', 200.0), (4, 'Soybean', 'Brazil', 90.7), (5, 'Barley', 'Russia', 80.0); CREATE TABLE OptimizationPractices (Country VARCHAR(50) PRIMARY KEY, PracticeImplemented BOOLEAN); INSERT INTO OptimizationPractices (Country, PracticeImplemented) VALUES ('USA', TRUE), ('France', TRUE), ('China', FALSE), ('Brazil', TRUE), ('Russia', FALSE);","WITH OptimizedCountries AS (SELECT Country FROM OptimizationPractices WHERE PracticeImplemented = TRUE) SELECT c.CropName, c.AvgYieldPerAcre FROM Crops c INNER JOIN OptimizedCountries o ON c.Country = o.Country ORDER BY c.AvgYieldPerAcre DESC LIMIT 5;","The query first creates a list of countries that have implemented optimization practices. It then performs an inner join between this list and the Crops table to get the average yield per acre of crops for these countries. Finally, it orders the results by average yield per acre in descending order and limits the output to the top 5."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert a new patient record with a history of diabetes into the database, and then list the top 5 youngest patients with a history of diabetes.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, MedicationHistory TEXT); INSERT INTO Patients (PatientID, Name, Age, MedicationHistory) VALUES (1, 'John Doe', 45, 'Metformin'), (2, 'Jane Doe', 50, 'Insulin'), (3, 'Joe Bloggs', 55, 'Metformin'), (4, 'Jill Bloggs', 60, 'Insulin'), (5, 'Jim Smith', 65, 'Metformin');","INSERT INTO Patients (PatientID, Name, Age, MedicationHistory) VALUES (6, 'New Patient', 40, 'Diabetes'); WITH YoungDiabeticPatients AS (SELECT Name, Age, ROW_NUMBER() OVER (ORDER BY Age ASC) AS RowNum FROM Patients WHERE MedicationHistory LIKE '%Diabetes%') SELECT Name, Age FROM YoungDiabeticPatients WHERE RowNum <= 5;","The query initially inserts a new patient with a history of diabetes into the Patients table. Then, it creates a common table expression (CTE) named YoungDiabeticPatients to select patients with a history of diabetes, ordered by age in ascending order. The ROW_NUMBER function creates a new row number for each row, which is used to select the top 5 youngest patients with a history of diabetes."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Find the top 10 most viewed movies in North America and Europe, and then calculate the average views for these regions.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), Region VARCHAR(50), Views INT); INSERT INTO Movies (MovieID, MovieName, Region, Views) VALUES (1, 'Avatar', 'North America', 20000000), (2, 'Titanic', 'Europe', 18000000), (3, 'Avengers: Endgame', 'North America', 15000000), (4, 'The Lion King', 'Europe', 14000000), (5, 'Frozen II', 'North America', 13000000);","WITH TopViews AS (SELECT MovieName, Region, Views, RANK() OVER (PARTITION BY Region ORDER BY Views DESC) AS Rank FROM Movies) SELECT Region, AVG(Views) as AvgViews FROM TopViews WHERE Rank <= 10 GROUP BY Region;",The query first creates a common table expression (CTE) to rank movies based on their views for each region. It then calculates the average views for the top 10 most viewed movies in each region using the AVG function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,data retrieval: basic data fetching queries,Find the top 5 crops with the highest average yield per acre in the United States for the last 5 years.,"CREATE TABLE CropData (CropID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Year INT, YieldPerAcre DECIMAL); INSERT INTO CropData (CropID, CropType, Region, Year, YieldPerAcre) VALUES (1, 'Corn', 'United States', 2017, 176.6), (2, 'Wheat', 'United States', 2018, 47.6), (3, 'Soybeans', 'United States', 2019, 51.6), (4, 'Rice', 'United States', 2016, 8000.0), (5, 'Cotton', 'United States', 2020, 938.0), (6, 'Corn', 'United States', 2018, 178.7), (7, 'Wheat', 'United States', 2019, 49.1), (8, 'Soybeans', 'United States', 2018, 52.1), (9, 'Rice', 'United States', 2019, 7590.0), (10, 'Cotton', 'United States', 2017, 925.0);","WITH AvgYield AS (SELECT CropType, AVG(YieldPerAcre) AS AverageYield FROM CropData WHERE Region = 'United States' AND Year BETWEEN 2016 AND 2020 GROUP BY CropType) SELECT CropType, AverageYield FROM AvgYield ORDER BY AverageYield DESC LIMIT 5;","The query begins by creating a common table expression (CTE) named 'AvgYield'. This CTE groups the data by crop type and calculates the average yield per acre for each type of crop in the United States for the last 5 years. The main query then selects the crop type and average yield from the CTE, sorts the data in descending order by average yield, and limits the output to the top 5 crops."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Show me the ten countries with the highest annual CO2 emissions and their respective sustainable development efforts, sorted by the amount of CO2 emissions in descending order.","CREATE TABLE CO2Emissions (Country VARCHAR(50) PRIMARY KEY, AnnualEmissions DECIMAL); INSERT INTO CO2Emissions (Country, AnnualEmissions) VALUES ('China', 9040.74), ('United States', 4997.50), ('India', 2066.01), ('Russia', 1468.99), ('Japan', 1148.06), ('Germany', 729.77), ('Iran', 664.20), ('Saudi Arabia', 601.05), ('South Korea', 585.20), ('Canada', 555.35); CREATE TABLE SustainabilityEfforts (Country VARCHAR(50) PRIMARY KEY, EffortDescription VARCHAR(255)); INSERT INTO SustainabilityEfforts (Country, EffortDescription) VALUES ('China', 'Afforestation projects'), ('United States', 'Renewable energy investments'), ('India', 'Solar power initiatives'), ('Russia', 'Forest conservation efforts'), ('Japan', 'Energy efficiency programs'), ('Germany', 'Emission reduction targets'), ('Iran', 'Desertification prevention projects'), ('Saudi Arabia', 'Solar and wind energy projects'), ('South Korea', 'Greenhouse gas reduction efforts'), ('Canada', 'Carbon pricing mechanisms');","SELECT E.Country, E.AnnualEmissions, S.EffortDescription FROM CO2Emissions E INNER JOIN SustainabilityEfforts S ON E.Country = S.Country ORDER BY E.AnnualEmissions DESC LIMIT 10;","The SQL query is joining the two tables CO2Emissions and SustainabilityEfforts on the Country field. It then selects the ten records with the highest AnnualEmissions value in descending order. For each of these ten records, the query displays the Country, its AnnualEmissions, and the description of its sustainable development efforts."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a transaction to update the crop yield and farming practices for a specific crop in the 'CropData' table, including a rollback in case of an error.","CREATE TABLE CropData (CropID INT PRIMARY KEY, CropName VARCHAR(30), Region VARCHAR(30), CropYield DECIMAL, FarmingPractice VARCHAR(50)); INSERT INTO CropData (CropID, CropName, Region, CropYield, FarmingPractice) VALUES (1, 'Wheat', 'North America', 2000.5, 'Conventional'), (2, 'Corn', 'Europe', 3000.6, 'Organic'), (3, 'Soy', 'Asia', 1500.0, 'Conventional'), (4, 'Rice', 'South America', 2500.2, 'Organic'), (5, 'Barley', 'Africa', 1800.1, 'Conventional');","BEGIN TRANSACTION; UPDATE CropData SET CropYield = 2200.3, FarmingPractice = 'Organic' WHERE CropID = 1; IF @@ERROR != 0 BEGIN ROLLBACK TRANSACTION; RETURN; END; COMMIT TRANSACTION;","The SQL query starts a transaction to update the 'CropYield' and 'FarmingPractice' of the crop with ID 1 in the 'CropData' table. If an error occurs during the update operation (indicated by @@ERROR not being equal to 0), it rolls back the transaction to undo any changes. If there are no errors, it commits the transaction to save the changes."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert the latest AI technologies and their relative market shares into a table, then display the technology with the highest market share.","CREATE TABLE AITech (TechID INT PRIMARY KEY, TechName VARCHAR(50), MarketShare DECIMAL);","INSERT INTO AITech (TechID, TechName, MarketShare) VALUES (1, 'Machine Learning', 35.5), (2, 'Natural Language Processing', 25.0), (3, 'Computer Vision', 15.0), (4, 'Robotics', 10.0), (5, 'Speech Recognition', 14.5); SELECT TechName, MarketShare FROM AITech ORDER BY MarketShare DESC LIMIT 1;","The query first inserts data into the AITech table, which includes the ID, name, and market share of different AI technologies. It then selects the technology with the highest market share by ordering the table in descending order of market share and limiting the output to the first row."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a database that stores the yield of different crops across various farms and regions, and then display the top 5 farms with the highest yield for each crop.","CREATE TABLE CropYields (YieldID INT PRIMARY KEY, CropName VARCHAR(50), FarmName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (YieldID, CropName, FarmName, Region, Yield) VALUES (1, 'Wheat', 'Farm1', 'North America', 120.5), (2, 'Corn', 'Farm2', 'Europe', 118.0), (3, 'Rice', 'Farm3', 'Asia', 110.0), (4, 'Barley', 'Farm4', 'North America', 115.7), (5, 'Soybean', 'Farm5', 'Europe', 95.0);","WITH RankedFarms AS (SELECT CropName, FarmName, Yield, DENSE_RANK() OVER (PARTITION BY CropName ORDER BY Yield DESC) AS Rank FROM CropYields) SELECT CropName, FarmName, Yield FROM RankedFarms WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank farms based on the yield of each crop in descending order. It then selects the top 5 farms with the highest yield for each crop using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Show me the top three sports with the highest average audience engagement in 2020.,"CREATE TABLE SportEvents (EventID INT PRIMARY KEY, SportName VARCHAR(50), EventDate DATE, AudienceSize INT); INSERT INTO SportEvents (EventID, SportName, EventDate, AudienceSize) VALUES (1, 'Football', '2020-01-05', 100000), (2, 'Basketball', '2020-02-15', 80000), (3, 'Tennis', '2020-03-10', 50000), (4, 'Football', '2020-04-20', 120000), (5, 'Basketball', '2020-05-25', 90000), (6, 'Tennis', '2020-06-30', 60000);","WITH SportAvg AS (SELECT SportName, AVG(AudienceSize) AS AvgAudience FROM SportEvents WHERE YEAR(EventDate) = 2020 GROUP BY SportName) SELECT SportName, AvgAudience FROM SportAvg ORDER BY AvgAudience DESC LIMIT 3;",The query first creates a common table expression (CTE) that groups sport events by sport name and calculates the average audience size for each sport in the year 2020. It then orders the sports by average audience size in descending order and selects the top three.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Generate a report showing the top 5 crops with the highest yield in South America in 2020. Also include the average yield of these crops over the last 5 years.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Year, Yield) VALUES (1, 'Wheat', 'South America', 2020, 1250.0), (2, 'Maize', 'South America', 2020, 1350.0), (3, 'Rice', 'South America', 2020, 1200.0), (4, 'Soybean', 'South America', 2020, 1500.0), (5, 'Barley', 'South America', 2020, 1150.0), (1, 'Wheat', 'South America', 2019, 1220.0), (2, 'Maize', 'South America', 2019, 1300.0), (3, 'Rice', 'South America', 2019, 1180.0), (4, 'Soybean', 'South America', 2019, 1450.0), (5, 'Barley', 'South America', 2019, 1130.0);","WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (ORDER BY Yield DESC) AS Rank FROM CropYield WHERE Year = 2020 AND Region = 'South America'), AvgYield AS (SELECT CropName, AVG(Yield) AS AverageYield FROM CropYield WHERE Year >= 2015 AND Year <= 2020 GROUP BY CropName) SELECT RankedCrops.CropName, RankedCrops.Yield, AvgYield.AverageYield FROM RankedCrops INNER JOIN AvgYield ON RankedCrops.CropName = AvgYield.CropName WHERE RankedCrops.Rank <= 5;","The query first creates a common table expression (CTE) to rank crops based on their yield in 2020 in South America in descending order. It then creates another CTE to calculate the average yield of each crop over the last 5 years. Finally, it joins the two CTEs on CropName and selects the top 5 crops (according to the rank in 2020) along with their yield in 2020 and average yield over the last 5 years."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert records of crop yields per region for the year 2022 in the CropYield table, then delete records of any crop that has a yield lower than 10 tons, and finally provide the top 3 crops with the highest yield in each region.","CREATE TABLE CropYield (RecordID INT PRIMARY KEY, Crop VARCHAR(50), Region VARCHAR(50), Year INT, Yield DECIMAL);","INSERT INTO CropYield (RecordID, Crop, Region, Year, Yield) VALUES (1, 'Corn', 'North America', 2022, 20.3), (2, 'Wheat', 'Europe', 2022, 15.7), (3, 'Rice', 'Asia', 2022, 18.0), (4, 'Soybeans', 'South America', 2022, 9.5), (5, 'Canola', 'Australia', 2022, 12.0); DELETE FROM CropYield WHERE Yield < 10; WITH RankedCrops AS (SELECT Crop, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank FROM CropYield WHERE Year = 2022) SELECT Region, Crop, Yield FROM RankedCrops WHERE Rank <= 3;","The query first inserts records into the CropYield table. It then deletes any records where the yield of a crop is less than 10 tons. After that, it creates a common table expression (CTE) to rank crops based on their yield in descending order within each region for the year 2022. It then selects the top 3 crops with the highest yield in each region using the DENSE_RANK function."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report which identifies the top 5 film genres that have garnered the most revenue in North America in the last 5 years.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(50), Genre VARCHAR(50), ReleaseDate DATE); CREATE TABLE Revenue (MovieID INT REFERENCES Movies(MovieID), Region VARCHAR(50), Revenue DECIMAL); INSERT INTO Movies (MovieID, Title, Genre, ReleaseDate) VALUES (1, 'Avatar', 'Sci-Fi', '2009-12-18'), (2, 'Avengers: Endgame', 'Action', '2019-04-26'), (3, 'Titanic', 'Romance', '1997-12-19'), (4, 'Star Wars: The Force Awakens', 'Fantasy', '2015-12-18'), (5, 'Frozen II', 'Animation', '2019-11-22'); INSERT INTO Revenue (MovieID, Region, Revenue) VALUES (1, 'North America', 760.5), (2, 'North America', 858.3), (3, 'North America', 659.4), (4, 'North America', 936.7), (5, 'North America', 477.4);","WITH RevenueByGenre AS (SELECT Genre, SUM(Revenue) AS TotalRevenue FROM Movies JOIN Revenue ON Movies.MovieID = Revenue.MovieID WHERE Region = 'North America' AND ReleaseDate > DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY Genre) SELECT Genre, TotalRevenue FROM RevenueByGenre ORDER BY TotalRevenue DESC LIMIT 5;",The query uses a common table expression (CTE) to generate a table where each row represents a film genre and its total revenue in North America over the past five years. It sums the revenue of movies in the same genre that were released in the last 5 years and are from North America. It then orders the genres by revenue in descending order and limits the result to the top 5.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report of the top 5 countries based on the number of tourists in the last year along with the average duration of stay and the most preferred hotel chain.,"CREATE TABLE TouristInfo (TouristID INT PRIMARY KEY, Country VARCHAR(50), DurationOfStay INT, HotelChain VARCHAR(50)); INSERT INTO TouristInfo (TouristID, Country, DurationOfStay, HotelChain) VALUES (1, 'USA', 7, 'Marriott'), (2, 'France', 10, 'Accor'), (3, 'Spain', 9, 'NH Hotel Group'), (4, 'China', 5, 'Shangri-La'), (5, 'Italy', 8, 'NH Hotel Group');","WITH CountryRank AS (SELECT Country, AVG(DurationOfStay) AS AvgStay, HotelChain, COUNT(TouristID) AS TouristCount, RANK() OVER (ORDER BY COUNT(TouristID) DESC) AS Rank FROM TouristInfo GROUP BY Country, HotelChain) SELECT Country, AvgStay, HotelChain FROM CountryRank WHERE Rank <= 5;",The query first creates a common table expression (CTE) that contains the average duration of stay and the count of tourists for each country and hotel chain. It then ranks the countries based on the number of tourists in descending order. The final SELECT statement filters out only the top 5 countries based on the number of tourists and displays them along with their average duration of stay and the most preferred hotel chain.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store the total market share of different AI technologies in various countries and then display the top 3 countries where AI adoption in terms of market share is highest.,"CREATE TABLE AIAdoption (TechID INT PRIMARY KEY, TechName VARCHAR(50), Country VARCHAR(50), MarketShare DECIMAL); INSERT INTO AIAdoption (TechID, TechName, Country, MarketShare) VALUES (1, 'Machine Learning', 'USA', 35.0), (2, 'Neural Networks', 'China', 30.0), (3, 'Natural Language Processing', 'Germany', 25.0), (4, 'Robotics', 'Japan', 40.0), (5, 'Speech Recognition', 'UK', 20.0);","WITH RankedCountries AS (SELECT Country, SUM(MarketShare) AS TotalShare, DENSE_RANK() OVER (ORDER BY SUM(MarketShare) DESC) AS Rank FROM AIAdoption GROUP BY Country) SELECT Country, TotalShare FROM RankedCountries WHERE Rank <= 3;",The SQL query first creates a common table expression (CTE) that groups AI technologies by country and calculates the total market share for each country. It then ranks these countries based on their total market share in descending order using the DENSE_RANK function. The final SELECT statement selects the top 3 countries with the highest total market share from the CTE.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the top 10 football players with the most goals in the European league.,"CREATE TABLE FootballPlayers (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50), League VARCHAR(50), Goals INT); INSERT INTO FootballPlayers (PlayerID, PlayerName, Team, League, Goals) VALUES (1, 'Lionel Messi', 'FC Barcelona', 'European', 672), (2, 'Cristiano Ronaldo', 'Juventus', 'European', 700), (3, 'Neymar', 'Paris Saint-Germain', 'European', 362), (4, 'Luis Suarez', 'Atletico Madrid', 'European', 470), (5, 'Robert Lewandowski', 'Bayern Munich', 'European', 500);","SELECT PlayerName, Goals FROM FootballPlayers WHERE League = 'European' ORDER BY Goals DESC LIMIT 10;",The query selects the player's name and goals from the FootballPlayers table where the league is European. It then orders the results in descending order by the number of goals and limits the response to the top 10.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Find the top 5 hotels in terms of guest capacity and calculate the average length of stay and total revenue for each. Import a fresh dataset for analysis and delete all records older than 3 years.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), GuestCapacity INT); CREATE TABLE GuestRecords (RecordID INT PRIMARY KEY, HotelID INT, GuestID INT, LengthOfStay INT, Payment DECIMAL, CheckInDate DATE); INSERT INTO Hotels (HotelID, HotelName, GuestCapacity) VALUES (1, 'Hotel A', 100), (2, 'Hotel B', 150), (3, 'Hotel C', 200), (4, 'Hotel D', 170), (5, 'Hotel E', 300); INSERT INTO GuestRecords (RecordID, HotelID, GuestID, LengthOfStay, Payment, CheckInDate) VALUES (1, 1, 1001, 3, 300.00, '2019-01-01'), (2, 2, 1002, 4, 400.00, '2019-01-02'), (3, 3, 1003, 5, 500.00, '2019-01-03'), (4, 4, 1004, 6, 600.00, '2019-01-04'), (5, 5, 1005, 7, 700.00, '2019-01-05');","WITH Top5Hotels AS (SELECT HotelID, HotelName FROM Hotels ORDER BY GuestCapacity DESC LIMIT 5), AvgRevenue AS (SELECT HotelID, AVG(Payment) AS AverageRevenue, AVG(LengthOfStay) AS AverageStay FROM GuestRecords WHERE CheckInDate > DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR) GROUP BY HotelID) SELECT Top5Hotels.HotelName, AvgRevenue.AverageRevenue, AvgRevenue.AverageStay FROM Top5Hotels INNER JOIN AvgRevenue ON Top5Hotels.HotelID = AvgRevenue.HotelID; DELETE FROM GuestRecords WHERE CheckInDate <= DATE_SUB(CURRENT_DATE(), INTERVAL 3 YEAR);","The SQL query first creates a common table expression (CTE) to find the top 5 hotels by guest capacity. Then it calculates the average revenue and average length of stay for each hotel in the CTE from the GuestRecords table, only considering records from the last 3 years. The results are joined on the hotel ID to display the hotel name, average revenue, and average length of stay. Finally, all records in the GuestRecords table older than 3 years are deleted."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 3 countries with the highest average CO2 emission from 2010 to 2020, considering only countries that have reduced their emission by at least 10% in this period.","CREATE TABLE CountryEmissions (Country VARCHAR(50), Year INT, CO2Emission DECIMAL); INSERT INTO CountryEmissions (Country, Year, CO2Emission) VALUES ('USA', 2010, 7000), ('USA', 2020, 6500), ('China', 2010, 7000), ('China', 2020, 7800), ('India', 2010, 2000), ('India', 2020, 2200), ('Germany', 2010, 1000), ('Germany', 2020, 850), ('Brazil', 2010, 1200), ('Brazil', 2020, 1050);","WITH StartYear AS (SELECT Country, CO2Emission AS StartEmission FROM CountryEmissions WHERE Year = 2010), EndYear AS (SELECT Country, CO2Emission AS EndEmission FROM CountryEmissions WHERE Year = 2020), ReducedEmissions AS (SELECT s.Country, (s.StartEmission - e.EndEmission) / s.StartEmission * 100 AS ReductionPercent FROM StartYear s JOIN EndYear e ON s.Country = e.Country WHERE (s.StartEmission - e.EndEmission) / s.StartEmission * 100 >= 10) SELECT r.Country, AVG(e.CO2Emission) AS AverageEmission FROM ReducedEmissions r JOIN CountryEmissions e ON r.Country = e.Country WHERE e.Year BETWEEN 2010 AND 2020 GROUP BY r.Country ORDER BY AverageEmission DESC LIMIT 3;","The query first defines three common table expressions (CTEs): StartYear, EndYear, and ReducedEmissions. StartYear and EndYear CTEs get the CO2 emissions for countries in the years 2010 and 2020, respectively. ReducedEmissions CTE calculates the percentage of CO2 emission reduction for each country from 2010 to 2020 and only includes those that have reduced their emissions by at least 10%. The main query then calculates the average CO2 emissions from 2010 to 2020 for the countries in the ReducedEmissions CTE, and orders them in descending order of average emission, limiting the result to the top 3."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create tables to store information about hotels, their locations, room capacities, and customer ratings, then provide a query to find the top rated hotel in each city.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), LocationID INT); CREATE TABLE Locations (LocationID INT PRIMARY KEY, City VARCHAR(50), Country VARCHAR(50)); CREATE TABLE RoomInfo (RoomID INT PRIMARY KEY, HotelID INT, RoomCapacity INT); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, HotelID INT, CustomerRating DECIMAL);","WITH HotelRatings AS (SELECT H.HotelName, L.City, AVG(R.CustomerRating) as AvgRating FROM Hotels H JOIN Locations L ON H.LocationID = L.LocationID JOIN Ratings R ON H.HotelID = R.HotelID GROUP BY H.HotelName, L.City), RankedHotels AS (SELECT HotelName, City, AvgRating, RANK() OVER (PARTITION BY City ORDER BY AvgRating DESC) as Rank FROM HotelRatings) SELECT HotelName, City, AvgRating FROM RankedHotels WHERE Rank = 1;","The query first joins the Hotels, Locations, and Ratings tables to calculate the average customer rating for each hotel in each city. This result is stored in a common table expression (CTE) named HotelRatings. A second CTE, RankedHotels, is then created, which ranks the hotels in each city based on their average rating. The final SELECT statement retrieves the top-rated hotel in each city."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top three most successful AI startups based on investment received in the last 5 years.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), FoundationDate DATE, Industry VARCHAR(50), HeadquartersRegion VARCHAR(50)); INSERT INTO Startups (StartupID, StartupName, FoundationDate, Industry, HeadquartersRegion) VALUES (1, 'Startup A', '2016-07-01', 'AI', 'North America'), (2, 'Startup B', '2015-01-01', 'AI', 'Europe'), (3, 'Startup C', '2017-01-01', 'AI', 'Asia'); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, StartupID INT, InvestmentAmount DECIMAL, InvestmentDate DATE); INSERT INTO Investments (InvestmentID, StartupID, InvestmentAmount, InvestmentDate) VALUES (1, 1, 15000000, '2020-01-01'), (2, 2, 13000000, '2019-01-01'), (3, 3, 20000000, '2018-01-01'), (4, 1, 5000000, '2017-01-01'), (5, 2, 7000000, '2018-01-01');","WITH InvestmentSum AS (SELECT StartupID, SUM(InvestmentAmount) AS TotalInvestment FROM Investments WHERE InvestmentDate > DATEADD(year, -5, GETDATE()) GROUP BY StartupID) SELECT S.StartupName, ISUM.TotalInvestment FROM Startups S JOIN InvestmentSum ISUM ON S.StartupID = ISUM.StartupID ORDER BY ISUM.TotalInvestment DESC LIMIT 3;","The SQL query first creates a subquery that sums the total investment received by each startup in the last 5 years. It then joins this subquery with the Startups table to get the name of each startup and orders them in descending order based on the total investment received. Finally, it limits the result to the top three startups."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Design a system to record the monthly government spending in different sectors like health, education, defense, and then extract the yearly expenditure in each sector along with the sector having the highest expenditure.","CREATE TABLE GovtSpending (RecordID INT PRIMARY KEY, Year INT, Month INT, Sector VARCHAR(50), Expenditure DECIMAL); INSERT INTO GovtSpending (RecordID, Year, Month, Sector, Expenditure) VALUES (1, 2022, 1, 'Health', 5000.0), (2, 2022, 1, 'Education', 3000.0), (3, 2022, 1, 'Defense', 7000.0), (4, 2022, 2, 'Health', 5200.0), (5, 2022, 2, 'Education', 3100.0), (6, 2022, 2, 'Defense', 7100.0);","WITH YearlyExpenditure AS (SELECT Year, Sector, SUM(Expenditure) as TotalExpenditure FROM GovtSpending GROUP BY Year, Sector), MaxExpenditure AS (SELECT Year, MAX(TotalExpenditure) as MaxExpenditure FROM YearlyExpenditure GROUP BY Year) SELECT Y.Year, Y.Sector, Y.TotalExpenditure, CASE WHEN Y.TotalExpenditure = M.MaxExpenditure THEN 'Highest' ELSE '' END AS ExpenditureStatus FROM YearlyExpenditure Y INNER JOIN MaxExpenditure M ON Y.Year = M.Year ORDER BY Y.Year, Y.TotalExpenditure DESC;",The SQL query first creates a common table expression (CTE) to calculate the yearly expenditure in each sector. Another CTE is created to calculate the maximum expenditure in each year. Then it joins these two CTEs based on the year to find out the sector with the highest expenditure in each year. It also provides the total expenditure in each sector for every year. The query then orders the results by year and total expenditure in descending order.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table that includes records of movies, their genres, viewership numbers, and total revenue, then display the top 3 movies that have the highest revenue.","CREATE TABLE MovieRecords (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), Genre VARCHAR(50), Viewers INT, Revenue DECIMAL); INSERT INTO MovieRecords (MovieID, MovieName, Genre, Viewers, Revenue) VALUES (1, 'Avengers: Endgame', 'Action', 50000000, 2850000000), (2, 'The Lion King', 'Animation', 45000000, 1650000000), (3, 'Frozen II', 'Animation', 42000000, 1470000000), (4, 'Spider-Man: Far From Home', 'Action', 40000000, 1100000000), (5, 'Joker', 'Drama', 38000000, 1070000000);","WITH RankedMovies AS (SELECT MovieName, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM MovieRecords) SELECT MovieName, Revenue FROM RankedMovies WHERE Rank <= 3;",The query first creates a common table expression (CTE) to rank the movies based on their revenue in descending order. It then selects the top 3 movies with the highest revenue using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store customer reviews for different hotels in various cities and then generate a report to display the top 3 hotels with the highest average customer rating in each city.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50)); CREATE TABLE CustomerReviews (ReviewID INT PRIMARY KEY, HotelID INT, CustomerID INT, Rating DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID)); INSERT INTO Hotels (HotelID, HotelName, City) VALUES (1, 'Hotel A', 'New York'), (2, 'Hotel B', 'London'), (3, 'Hotel C', 'Paris'), (4, 'Hotel D', 'New York'), (5, 'Hotel E', 'London'); INSERT INTO CustomerReviews (ReviewID, HotelID, CustomerID, Rating) VALUES (1, 1, 101, 4.5), (2, 2, 102, 4.7), (3, 3, 103, 4.8), (4, 4, 104, 4.6), (5, 5, 105, 4.9);","WITH AvgRatings AS (SELECT Hotels.HotelName, Hotels.City, AVG(CustomerReviews.Rating) AS AverageRating FROM Hotels INNER JOIN CustomerReviews ON Hotels.HotelID = CustomerReviews.HotelID GROUP BY Hotels.HotelName, Hotels.City), RankedHotels AS (SELECT AvgRatings.HotelName, AvgRatings.City, AvgRatings.AverageRating, DENSE_RANK() OVER (PARTITION BY AvgRatings.City ORDER BY AvgRatings.AverageRating DESC) AS Rank FROM AvgRatings) SELECT RankedHotels.HotelName, RankedHotels.City, RankedHotels.AverageRating FROM RankedHotels WHERE Rank <= 3;","The query first creates a common table expression (CTE), AvgRatings, to calculate the average rating for each hotel in each city. It then creates another CTE, RankedHotels, to rank these hotels within each city based on their average rating in descending order using the DENSE_RANK function. Finally, it selects the top 3 hotels in each city based on this ranking."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Provide a list of the government projects in New York that exceeded their initial budget by more than 50% in the last fiscal year.,"CREATE TABLE Projects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), InitialBudget DECIMAL, FinalBudget DECIMAL, Region VARCHAR(50)); INSERT INTO Projects (ProjectID, ProjectName, InitialBudget, FinalBudget, Region) VALUES (1, 'Infrastructure Improvement', 15000000, 23000000, 'New York'), (2, 'Public Health Initiative', 8000000, 10000000, 'New York'), (3, 'Education Reform', 12000000, 19000000, 'New York'), (4, 'Parks and Recreation Expansion', 5000000, 6000000, 'New York'), (5, 'Public Transport Improvement', 20000000, 33000000, 'New York'); CREATE TABLE FiscalYear (YearID INT PRIMARY KEY, Year INT, ProjectID INT); INSERT INTO FiscalYear (YearID, Year, ProjectID) VALUES (1, 2020, 1), (2, 2020, 2), (3, 2020, 3), (4, 2020, 4), (5, 2020, 5);","SELECT P.ProjectName, P.InitialBudget, P.FinalBudget FROM Projects P INNER JOIN FiscalYear F ON P.ProjectID = F.ProjectID WHERE P.Region = 'New York' AND F.Year = (SELECT MAX(Year) FROM FiscalYear) AND ((P.FinalBudget - P.InitialBudget) / P.InitialBudget) > 0.5;","The query starts by joining the Projects and FiscalYear tables on the ProjectID column. It then filters for projects in the 'New York' region that happened in the most recent fiscal year. For this subset of projects, the query checks whether the final budget exceeded the initial budget by more than 50%."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Find out the total funding raised by each technology startup in the last year. Display only those startups that have raised more than $5 million.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), TechField VARCHAR(50)); CREATE TABLE Funding (FundingID INT PRIMARY KEY, StartupID INT, AmountRaised DECIMAL, FundingDate DATE);","SELECT S.StartupName, SUM(F.AmountRaised) AS TotalFunding FROM Startups S INNER JOIN Funding F ON S.StartupID = F.StartupID WHERE YEAR(F.FundingDate) = YEAR(CURRENT_DATE) - 1 GROUP BY S.StartupName HAVING SUM(F.AmountRaised) > 5000000;","The SQL query first joins the 'Startups' and 'Funding' tables on the 'StartupID' field. It then filters out the funding data from the last year using the WHERE clause. It then groups the data by 'StartupName', and with the help of the SUM function, it calculates the total funding raised by each startup. The HAVING clause is then used to filter out the startups that have raised more than $5 million."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Show me the top 5 highest earning athletes in Tennis for the year 2020.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50)); INSERT INTO Athletes (AthleteID, AthleteName, Sport) VALUES (1, 'Roger Federer', 'Tennis'), (2, 'Rafael Nadal', 'Tennis'), (3, 'Novak Djokovic', 'Tennis'), (4, 'Serena Williams', 'Tennis'), (5, 'Naomi Osaka', 'Tennis'); CREATE TABLE Earnings (EarningID INT PRIMARY KEY, AthleteID INT, Year INT, Earnings DECIMAL); INSERT INTO Earnings (EarningID, AthleteID, Year, Earnings) VALUES (1, 1, 2020, 106300000), (2, 2, 2020, 45000000), (3, 3, 2020, 44000000), (4, 4, 2020, 36000000), (5, 5, 2020, 37000000);","SELECT A.AthleteName, E.Earnings FROM Athletes A INNER JOIN Earnings E ON A.AthleteID = E.AthleteID WHERE A.Sport = 'Tennis' AND E.Year = 2020 ORDER BY E.Earnings DESC LIMIT 5;","The query first joins the Athletes table with the Earnings table based on the AthleteID. It then filters results to show only Tennis athletes for the year 2020. The results are then sorted in descending order based on earnings, and finally, the top 5 results are returned."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the number of patients suffering from diabetes categorized by gender and age brackets.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Gender VARCHAR(10), Age INT, Diabetes BOOLEAN); INSERT INTO Patients (PatientID, Gender, Age, Diabetes) VALUES (1, 'Male', 65, TRUE), (2, 'Female', 55, TRUE), (3, 'Male', 70, FALSE), (4, 'Female', 60, FALSE), (5, 'Male', 50, TRUE);","SELECT Gender, CASE WHEN Age<40 THEN 'Under 40' WHEN Age BETWEEN 40 AND 60 THEN '40-60' ELSE 'Over 60' END AS AgeBracket, COUNT(*) FROM Patients WHERE Diabetes = True GROUP BY Gender, AgeBracket;","The query first filters out the patients who have diabetes. It then groups these patients by their gender and age brackets. The age brackets are defined as under 40, 40-60, and over 60. Finally, it counts the number of patients in each group."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a detailed report showcasing the top 5 tourist destinations based on average booking rates along with details on the most booked hotel in each destination for the past year.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), AvgBookingRate DECIMAL); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), DestinationID INT, Bookings INT); INSERT INTO Destinations (DestinationID, DestinationName, AvgBookingRate) VALUES (1, 'Paris', 120.5), (2, 'New York', 118.0), (3, 'Tokyo', 110.0), (4, 'London', 115.7), (5, 'Sydney', 95.0); INSERT INTO Hotels (HotelID, HotelName, DestinationID, Bookings) VALUES (1, 'Hotel Paris', 1, 200), (2, 'Hotel New York', 2, 300), (3, 'Hotel Tokyo', 3, 400), (4, 'Hotel London', 4, 500), (5, 'Hotel Sydney', 5, 600);","WITH RankedDestinations AS (SELECT DestinationName, AvgBookingRate, DENSE_RANK() OVER (ORDER BY AvgBookingRate DESC) AS Rank FROM Destinations) SELECT RankedDestinations.DestinationName, RankedDestinations.AvgBookingRate, Hotels.HotelName FROM RankedDestinations JOIN Hotels ON RankedDestinations.DestinationID = Hotels.DestinationID WHERE Rank <= 5 ORDER BY Hotels.Bookings DESC;","The query first creates a common table expression (CTE) that ranks the tourist destinations based on their average booking rate in descending order. It then joins this CTE with the Hotels table to get the corresponding most booked hotel for each destination. Lastly, it selects the top 5 destinations along with their most booked hotels, sorted by the number of bookings in descending order."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Get me the top 10 movies that have the highest grossing revenue across all regions, and show the total times each movie has been watched.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), ProductionHouse VARCHAR(50)); INSERT INTO Movies (MovieID, MovieName, ProductionHouse) VALUES (1, 'Avatar', 'Fox'), (2, 'Avengers: Endgame', 'Marvel Studios'), (3, 'Titanic', 'Paramount Pictures'), (4, 'Star Wars: The Force Awakens', 'Lucasfilm'), (5, 'Avengers: Infinity War', 'Marvel Studios'); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, MovieID INT, Region VARCHAR(50), GrossRevenue DECIMAL); INSERT INTO Revenue (RevenueID, MovieID, Region, GrossRevenue) VALUES (1, 2, 'North America', 500000000), (2, 2, 'Europe', 400000000), (3, 1, 'Asia', 600000000), (4, 3, 'North America', 300000000), (5, 4, 'Europe', 200000000); CREATE TABLE Viewership (ViewershipID INT PRIMARY KEY, MovieID INT, ViewCount INT); INSERT INTO Viewership (ViewershipID, MovieID, ViewCount) VALUES (1, 2, 1000000), (2, 1, 2000000), (3, 3, 1500000), (4, 4, 1200000), (5, 5, 1100000);","WITH TotalRevenue AS (SELECT MovieID, SUM(GrossRevenue) AS TotalRevenue FROM Revenue GROUP BY MovieID), MovieViewership AS (SELECT Movies.MovieName, TotalRevenue.TotalRevenue, Viewership.ViewCount FROM Movies INNER JOIN TotalRevenue ON Movies.MovieID = TotalRevenue.MovieID INNER JOIN Viewership ON Movies.MovieID = Viewership.MovieID), RankedMovies AS (SELECT MovieName, TotalRevenue, ViewCount, RANK() OVER (ORDER BY TotalRevenue DESC) Rank FROM MovieViewership) SELECT MovieName, TotalRevenue, ViewCount FROM RankedMovies WHERE Rank <= 10;","The query first creates a common table expression (CTE) to calculate the total gross revenue for each movie across all regions. It then joins this CTE with the Movies and Viewership tables to get the movie name, total revenue, and view count. Another CTE is used to rank the movies by their total revenue in descending order. Finally, it selects the top 10 movies with the highest grossing revenue and their view counts."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Insert the top 5 global fashion trends in terms of popularity, and then update the popularity score of the least popular trend by 10 points.","CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Popularity DECIMAL); INSERT INTO FashionTrends (TrendID, TrendName, Popularity) VALUES (1, 'Minimalism', 75.5), (2, 'Athleisure', 80.3), (3, 'Sustainable Fashion', 90.0), (4, 'Androgynous Style', 85.7), (5, 'Virtual Clothing', 70.0);","WITH RankedTrends AS (SELECT TrendID, TrendName, Popularity, DENSE_RANK() OVER (ORDER BY Popularity) AS Rank FROM FashionTrends) UPDATE FashionTrends SET Popularity = Popularity + 10 WHERE TrendID = (SELECT TrendID FROM RankedTrends WHERE Rank = 5);","The query creates a common table expression (CTE) to rank fashion trends based on their popularity. It then updates the popularity score of the least popular trend by adding 10 points. This is done by using a subquery to find the TrendID of the least popular trend (Rank = 5) in the CTE, and then using it in the UPDATE clause."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert the crop yield data for a new experimental wheat variety in Africa and then provide the top 5 countries with the highest average yield for this variety.,"CREATE TABLE CropYield (Country VARCHAR(50), CropVariety VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (Country, CropVariety, Yield) VALUES ('Nigeria', 'Wheat - Experimental', 1.2), ('South Africa', 'Wheat - Experimental', 1.5), ('Kenya', 'Wheat - Experimental', 1.4), ('Ethiopia', 'Wheat - Experimental', 1.8), ('Tanzania', 'Wheat - Experimental', 1.1);","WITH YieldRank AS (SELECT Country, Yield, DENSE_RANK() OVER (ORDER BY Yield DESC) AS Rank FROM CropYield WHERE CropVariety = 'Wheat - Experimental') SELECT Country, Yield FROM YieldRank WHERE Rank <= 5;",The query first creates a common table expression (CTE) named YieldRank that ranks the countries by their yield for the 'Wheat - Experimental' variety in descending order using the DENSE_RANK function. Then it selects the top 5 countries with the highest yield of the 'Wheat - Experimental' variety from the YieldRank CTE.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores detailed information on sports events, including athlete performance, fan engagement data and sports industry economics. Then, display the top 5 athletes with the highest fan engagement across all sports.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), Sport VARCHAR(50), AthleteID INT); CREATE TABLE AthletePerformance (PerformanceID INT PRIMARY KEY, EventID INT, AthleteID INT, Score DECIMAL); CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, EventID INT, AthleteID INT, EngagementScore DECIMAL); CREATE TABLE SportsEconomics (EconomicID INT PRIMARY KEY, EventID INT, Revenue DECIMAL); INSERT INTO SportsEvents (EventID, EventName, Sport, AthleteID) VALUES (1, 'Event1', 'Basketball', 1), (2, 'Event2', 'Football', 2), (3, 'Event3', 'Tennis', 3), (4, 'Event4', 'Golf', 4), (5, 'Event5', 'Basketball', 5); INSERT INTO AthletePerformance (PerformanceID, EventID, AthleteID, Score) VALUES (1, 1, 1, 100.5), (2, 2, 2, 118.0), (3, 3, 3, 110.0), (4, 4, 4, 115.7), (5, 5, 5, 95.0); INSERT INTO FanEngagement (EngagementID, EventID, AthleteID, EngagementScore) VALUES (1, 1, 1, 1000.5), (2, 2, 2, 2000.0), (3, 3, 3, 3000.0), (4, 4, 4, 4000.7), (5, 5, 5, 5000.0); INSERT INTO SportsEconomics (EconomicID, EventID, Revenue) VALUES (1, 1, 15000.0), (2, 2, 25000.0), (3, 3, 35000.0), (4, 4, 45000.7), (5, 5, 55000.0);","WITH RankedAthletes AS (SELECT SE.AthleteID, AVG(FE.EngagementScore) AS AvgEngagement, DENSE_RANK() OVER (ORDER BY AVG(FE.EngagementScore) DESC) AS Rank FROM SportsEvents SE INNER JOIN FanEngagement FE ON SE.EventID = FE.EventID AND SE.AthleteID = FE.AthleteID GROUP BY SE.AthleteID) SELECT AthleteID, AvgEngagement FROM RankedAthletes WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank athletes based on their average fan engagement score in descending order. It does this by joining the SportsEvents and FanEngagement tables on both EventID and AthleteID and grouping by AthleteID. It then uses the AVG function to calculate the average fan engagement score for each athlete, and the DENSE_RANK function to assign a rank based on this average score. Finally, it selects the top 5 athletes with the highest average fan engagement score."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,"Generate a report that shows the total yield of each crop type for every region, ranked in descending order of total yield for each region, for the past year.","CREATE TABLE CropYields (YieldID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Yield DECIMAL, HarvestDate DATE); INSERT INTO CropYields (YieldID, CropType, Region, Yield, HarvestDate) VALUES (1, 'Corn', 'North America', 1500.5, '2020-10-01'), (2, 'Wheat', 'Europe', 1800.0, '2020-11-01'), (3, 'Rice', 'Asia', 2000.0, '2020-08-01'), (4, 'Soy', 'South America', 1400.0, '2020-09-01'), (5, 'Sorghum', 'Africa', 1200.0, '2020-10-01');","WITH YearlyYields AS (SELECT CropType, Region, SUM(Yield) AS TotalYield FROM CropYields WHERE HarvestDate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY CropType, Region), RankedYields AS (SELECT CropType, Region, TotalYield, RANK() OVER (PARTITION BY Region ORDER BY TotalYield DESC) AS Rank FROM YearlyYields) SELECT CropType, Region, TotalYield FROM RankedYields WHERE Rank <= 5 ORDER BY Region, TotalYield DESC;","The query first creates a common table expression (CTE) named 'YearlyYields' that groups crop yields by type and region, summing the yield for the past year. It then ranks the total yield in descending order for each region in another CTE called 'RankedYields'. Finally, it selects the top 5 crops for each region based on total yield, ordered by region and yield."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Identify the top 3 countries with the highest average annual rainfall over the past decade.,"CREATE TABLE RainfallData (Country VARCHAR(50), Year INT, AvgRainfall DECIMAL); INSERT INTO RainfallData (Country, Year, AvgRainfall) VALUES ('USA', 2010, 750), ('USA', 2011, 800), ('USA', 2012, 820), ('China', 2010, 920), ('China', 2011, 950), ('China', 2012, 960), ('Brazil', 2010, 1200), ('Brazil', 2011, 1250), ('Brazil', 2012, 1300);","WITH RainfallAvg AS (SELECT Country, AVG(AvgRainfall) AS TotalRainfall FROM RainfallData WHERE Year BETWEEN 2010 AND 2020 GROUP BY Country) SELECT Country, TotalRainfall FROM RainfallAvg ORDER BY TotalRainfall DESC LIMIT 3;","The query first calculates the average annual rainfall for each country over the past decade using a common table expression (CTE). The resulting data is then sorted in descending order of average rainfall, and the top 3 countries are selected."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Insert records into the ConservationEfforts table for the new sustainable development initiatives and return a report showing the combined conservation efforts of various regions, excluding those regions where no initiatives have been taken.","CREATE TABLE ConservationEfforts (EffortID INT PRIMARY KEY, Region VARCHAR(50), ConservationType VARCHAR(50), SustainabilityInitiative BOOLEAN); CREATE TABLE RegionStats (RegionID INT PRIMARY KEY, Region VARCHAR(50), TotalEfforts INT); INSERT INTO ConservationEfforts (EffortID, Region, ConservationType, SustainabilityInitiative) VALUES (1, 'North America', 'Forest Conservation', TRUE), (2, 'Europe', 'Water Preservation', TRUE), (3, 'Asia', 'Biodiversity', TRUE), (4, 'Africa', 'Climate Change', TRUE), (5, 'South America', 'Pollution Control', FALSE); INSERT INTO RegionStats (RegionID, Region, TotalEfforts) VALUES (1, 'North America', 500), (2, 'Europe', 600), (3, 'Asia', 700), (4, 'Africa', 800), (5, 'South America', 900);","WITH CombinedEfforts AS (SELECT Region, COUNT(Region) AS NumInitiatives FROM ConservationEfforts WHERE SustainabilityInitiative = TRUE GROUP BY Region) SELECT RS.Region, RS.TotalEfforts + CE.NumInitiatives AS TotalConservationEfforts FROM RegionStats RS LEFT JOIN CombinedEfforts CE ON RS.Region = CE.Region WHERE CE.Region IS NOT NULL;","The query first creates a common table expression (CTE) named CombinedEfforts that groups the conservation efforts by region and counts the number of sustainability initiatives for each region. Then it performs a LEFT JOIN on RegionStats and CombinedEfforts tables to combine total efforts and the number of initiatives for each region. Finally, it excludes regions where no sustainability initiatives have been taken by checking if the region is not null in the CombinedEfforts CTE."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the performance statistics for various athletes across different sports events, and then display the 10 athletes with the highest average performance rating in descending order.","CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), EventName VARCHAR(50), PerformanceRating DECIMAL); INSERT INTO AthletePerformance (AthleteID, AthleteName, EventName, PerformanceRating) VALUES (1, 'Athlete A', 'Basketball', 95.5), (2, 'Athlete B', 'Soccer', 89.0), (3, 'Athlete C', 'Tennis', 90.0), (4, 'Athlete D', 'Basketball', 92.7), (5, 'Athlete E', 'Soccer', 88.0), (6, 'Athlete F', 'Tennis', 91.0), (7, 'Athlete G', 'Basketball', 94.5), (8, 'Athlete H', 'Soccer', 90.0), (9, 'Athlete I', 'Tennis', 92.0), (10, 'Athlete J', 'Basketball', 93.0);","WITH RankedAthletes AS (SELECT AthleteName, AVG(PerformanceRating) as AverageRating, RANK() OVER (ORDER BY AVG(PerformanceRating) DESC) AS Rank FROM AthletePerformance GROUP BY AthleteName) SELECT AthleteName, AverageRating FROM RankedAthletes WHERE Rank <= 10;",The SQL query creates a common table expression (CTE) to rank athletes based on their average performance rating across different sports events in descending order. It then selects the top 10 highest rated athletes using the RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Update the performance records of all athletes who participated in the 2020 Olympic Games, and then list the top 5 athletes with the highest total medal count.","CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), MedalCount INT, OlympicYear INT); INSERT INTO AthletePerformance (AthleteID, AthleteName, Sport, MedalCount, OlympicYear) VALUES (1, 'Athlete A', 'Swimming', 5, 2016), (2, 'Athlete B', 'Athletics', 3, 2016), (3, 'Athlete C', 'Gymnastics', 4, 2016), (4, 'Athlete D', 'Cycling', 2, 2016), (5, 'Athlete E', 'Wrestling', 2, 2016);","UPDATE AthletePerformance SET MedalCount = MedalCount + 1 WHERE OlympicYear = 2020; WITH RankedAthletes AS (SELECT AthleteName, MedalCount, DENSE_RANK() OVER (ORDER BY MedalCount DESC) AS Rank FROM AthletePerformance WHERE OlympicYear = 2020) SELECT AthleteName, MedalCount FROM RankedAthletes WHERE Rank <= 5;","This SQL query first updates the medal count of all athletes who participated in the 2020 Olympic Games. Then, it creates a common table expression to rank athletes based on their updated medal count in descending order. Finally, it selects the top 5 athletes with the highest total medal count using the DENSE_RANK function."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the sales data of different clothing brands across various regions, and then display the top 5 brands with the highest sales in Europe.","CREATE TABLE ClothingSales (SaleID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), Sales DECIMAL); INSERT INTO ClothingSales (SaleID, BrandName, Region, Sales) VALUES (1, 'Zara', 'Europe', 1205000), (2, 'Gap', 'North America', 985000), (3, 'H&M', 'Asia', 1350000), (4, 'Uniqlo', 'Europe', 1157000), (5, 'Primark', 'Europe', 950000);","WITH RankedBrands AS (SELECT BrandName, Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS Rank FROM ClothingSales WHERE Region = 'Europe') SELECT BrandName, Sales FROM RankedBrands WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank clothing brands based on their sales in Europe in descending order. It then selects the top 5 brands with the highest sales using the DENSE_RANK function.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Fetch the top 10 most funded public projects in the last financial year. If there are any projects which have the same amount of funding, break the tie by selecting the projects with the most individual donors. The transaction starts before executing the statements and ends with a commit, if the result is as expected, or a rollback, if there is some error.","CREATE TABLE Projects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Funding DECIMAL, FYYear INT); INSERT INTO Projects (ProjectID, ProjectName, Funding, FYYear) VALUES (1, 'Highway 101', 2000000, 2020), (2, 'Bridge 407', 1500000, 2020), (3, 'School 34', 2500000, 2020), (4, 'Park 19', 800000, 2020), (5, 'Library 8', 1200000, 2020); CREATE TABLE Donors (DonorID INT PRIMARY KEY, DonorName VARCHAR(100)); INSERT INTO Donors (DonorID, DonorName) VALUES (1, 'John Doe'), (2, 'Jane Smith'); CREATE TABLE Donations (DonationID INT PRIMARY KEY, ProjectID INT, DonorID INT, Amount DECIMAL); INSERT INTO Donations (DonationID, ProjectID, DonorID, Amount) VALUES (1, 1, 1, 50000), (2, 1, 2, 50000), (3, 2, 1, 40000), (4, 2, 2, 40000), (5, 3, 1, 70000), (6, 3, 2, 70000), (7, 4, 1, 30000), (8, 4, 2, 30000), (9, 5, 1, 50000), (10, 5, 2, 50000);","BEGIN; WITH RankedProjects AS (SELECT P.ProjectName, P.Funding, COUNT(D.DonationID) AS NumberOfDonors, RANK() OVER (ORDER BY P.Funding DESC, COUNT(D.DonationID) DESC) AS Rank FROM Projects AS P LEFT JOIN Donations AS D ON P.ProjectID = D.ProjectID WHERE P.FYYear = 2020 GROUP BY P.ProjectName, P.Funding) SELECT ProjectName, Funding, NumberOfDonors FROM RankedProjects WHERE Rank <= 10; COMMIT;","The SQL query begins a transaction and creates a common table expression (CTE) to rank projects based on their funding and the number of donors in descending order for the financial year 2020. It then selects the top 10 most funded projects along with their corresponding number of donors, using the RANK function. The transaction is then committed to finalize the changes."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the data of different species, their status in the IUCN Red List, and the countries they are found in. Then, find the country with the most number of endangered species.","CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Status VARCHAR(20)); CREATE TABLE SpeciesCountry (SpeciesID INT, Country VARCHAR(50)); INSERT INTO Species (SpeciesID, SpeciesName, Status) VALUES (1, 'Bengal Tiger', 'Endangered'), (2, 'African Elephant', 'Vulnerable'), (3, 'Blue Whale', 'Endangered'), (4, 'Koala', 'Vulnerable'), (5, 'Polar Bear', 'Vulnerable'); INSERT INTO SpeciesCountry (SpeciesID, Country) VALUES (1, 'India'), (2, 'South Africa'), (3, 'Antarctica'), (4, 'Australia'), (5, 'Canada');","WITH EndangeredSpecies AS (SELECT SpeciesID FROM Species WHERE Status = 'Endangered'), CountryCount AS (SELECT Country, COUNT(SpeciesID) AS Count FROM SpeciesCountry WHERE SpeciesID IN (SELECT SpeciesID FROM EndangeredSpecies) GROUP BY Country) SELECT Country FROM CountryCount WHERE Count = (SELECT MAX(Count) FROM CountryCount);","This SQL query first creates a subquery that selects all the species that are marked as 'Endangered' in the Species table. Then, it creates another subquery that counts the number of endangered species per country from the SpeciesCountry table. Finally, it selects the country with the highest count of endangered species."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Retrieve the top 10 destinations preferred by European customers in the winter and summer seasons. Exclude destinations that appear in both seasons.,"CREATE TABLE CustomerPreferences (CustomerID INT PRIMARY KEY, CustomerRegion VARCHAR(50), Season VARCHAR(50), Destination VARCHAR(50)); INSERT INTO CustomerPreferences (CustomerID, CustomerRegion, Season, Destination) VALUES (1, 'Europe', 'Winter', 'Switzerland'), (2, 'Europe', 'Winter', 'Norway'), (3, 'Europe', 'Winter', 'Iceland'), (4, 'Europe', 'Summer', 'Spain'), (5, 'Europe', 'Summer', 'Italy'), (6, 'Europe', 'Summer', 'Greece'), (7, 'Europe', 'Winter', 'Finland'), (8, 'Europe', 'Summer', 'France'), (9, 'Europe', 'Winter', 'Austria'), (10, 'Europe', 'Summer', 'Portugal'), (11, 'Europe', 'Winter', 'Sweden'), (12, 'Europe', 'Summer', 'Turkey');","WITH WinterDestinations AS (SELECT Destination FROM CustomerPreferences WHERE CustomerRegion = 'Europe' AND Season = 'Winter'), SummerDestinations AS (SELECT Destination FROM CustomerPreferences WHERE CustomerRegion = 'Europe' AND Season = 'Summer') SELECT Destination FROM WinterDestinations EXCEPT SELECT Destination FROM SummerDestinations UNION SELECT Destination FROM SummerDestinations EXCEPT SELECT Destination FROM WinterDestinations LIMIT 10;","The query creates two common table expressions (CTEs). The first CTE retrieves the destinations preferred by European customers during the winter season, while the second CTE retrieves the destinations preferred during the summer season. It then performs an EXCEPT operation on the CTEs to exclude the common destinations in both seasons. The UNION operation combines the results from both EXCEPT operations and the LIMIT clause is used to retrieve the top 10 destinations."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to track the number of streams for various songs on different platforms and then provide the count of streams for each song sorted in descending order.,"CREATE TABLE SongStreams (SongID INT PRIMARY KEY, SongName VARCHAR(50), Platform VARCHAR(50), StreamsCount INT); INSERT INTO SongStreams (SongID, SongName, Platform, StreamsCount) VALUES (1, 'Song A', 'Spotify', 10000), (2, 'Song B', 'Apple Music', 12000), (3, 'Song C', 'Spotify', 15000), (4, 'Song D', 'Apple Music', 13000), (5, 'Song E', 'Spotify', 11000);","SELECT SongName, SUM(StreamsCount) as TotalStreams FROM SongStreams GROUP BY SongName ORDER BY TotalStreams DESC;"," ""The query first groups the stream records by SongName and sums the StreamsCount for each song. It then orders the result in descending order of the total streams. This will give us the count of streams for each song sorted in descending order."""
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store comprehensive patient data including demographics, medical histories, treatment protocols, and outcomes, then generate a pivot table to compare the efficacy of different drugs used in treatment protocols based on patient outcomes.","CREATE TABLE PatientData (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MedicalHistory TEXT, TreatmentProtocol VARCHAR(50), Outcome VARCHAR(50)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), SideEffects TEXT); INSERT INTO PatientData (PatientID, Age, Gender, MedicalHistory, TreatmentProtocol, Outcome) VALUES (1, 65, 'Male', 'Diabetes, Hypertension', 'DrugA, DrugB', 'Recovery'), (2, 45, 'Female', 'Hypertension', 'DrugB', 'Recovery'), (3, 70, 'Male', 'Diabetes, Hypertension', 'DrugA', 'Decline'); INSERT INTO DrugEfficacy (DrugID, DrugName, SideEffects) VALUES (1, 'DrugA', 'Nausea, Vomiting'), (2, 'DrugB', 'Headache, Dizziness');","WITH DrugOutcomes AS (SELECT TreatmentProtocol, Outcome, COUNT(*) AS TotalPatients FROM PatientData GROUP BY TreatmentProtocol, Outcome) SELECT * FROM DrugOutcomes PIVOT (SUM(TotalPatients) FOR Outcome IN ('Recovery', 'Decline')) ORDER BY TreatmentProtocol;","The query first creates a common table expression (CTE) to aggregate patient data by treatment protocol and outcome. It then transforms this data into a pivot table that presents the total number of patients for each outcome ('Recovery' and 'Decline') per treatment protocol, allowing a direct comparison of drug efficacy based on patient outcomes."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show the total public spending on health and education for every state, in descending order of the sum of the two, for the last fiscal year. Only include states where this total is above the national average.","CREATE TABLE HealthSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), FiscalYear INT, Spending DECIMAL); INSERT INTO HealthSpending (StateID, StateName, FiscalYear, Spending) VALUES (1, 'California', 2020, 80000), (2, 'Texas', 2020, 60000), (3, 'New York', 2020, 70000), (4, 'Florida', 2020, 50000), (5, 'Illinois', 2020, 55000); CREATE TABLE EducationSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), FiscalYear INT, Spending DECIMAL); INSERT INTO EducationSpending (StateID, StateName, FiscalYear, Spending) VALUES (1, 'California', 2020, 90000), (2, 'Texas', 2020, 75000), (3, 'New York', 2020, 85000), (4, 'Florida', 2020, 65000), (5, 'Illinois', 2020, 70000);","BEGIN TRANSACTION; WITH TotalSpending AS (SELECT HealthSpending.StateName, (HealthSpending.Spending + EducationSpending.Spending) AS TotalSpending FROM HealthSpending INNER JOIN EducationSpending ON HealthSpending.StateID = EducationSpending.StateID WHERE HealthSpending.FiscalYear = 2020 AND EducationSpending.FiscalYear = 2020), AverageSpending AS (SELECT AVG(TotalSpending) AS AverageSpending FROM TotalSpending) SELECT StateName, TotalSpending FROM TotalSpending WHERE TotalSpending > (SELECT AverageSpending FROM AverageSpending) ORDER BY TotalSpending DESC; COMMIT;","The query starts with a transaction. It then creates a common table expression (CTE) named TotalSpending to calculate the total health and education spending for each state in the last fiscal year. Another CTE named AverageSpending is created to calculate the national average of the total spendings. The main SELECT statement then selects the state names and their total spending where the total spending is above the national average, ordered in descending order by the total spending. The transaction is then committed to the database."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert data on crop yield for the new season and then give me the top 3 crops with the highest yield in the Asia region.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Season VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Season, Yield) VALUES (1, 'Rice', 'Asia', 'Summer', 600.5), (2, 'Wheat', 'North America', 'Winter', 500.0), (3, 'Corn', 'Europe', 'Spring', 400.0), (4, 'Barley', 'Asia', 'Winter', 700.7), (5, 'Soybean', 'Asia', 'Summer', 800.5), (6, 'Sorghum', 'North America', 'Summer', 450.0);","WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (ORDER BY Yield DESC) AS Rank FROM CropYield WHERE Region = 'Asia') SELECT CropName, Yield FROM RankedCrops WHERE Rank <= 3;","The query first inserts records of crop yields for different regions and seasons. It then creates a common table expression (CTE) to rank crops in the Asia region based on their yield in descending order. Finally, it selects the top 3 crops with the highest yield using the DENSE_RANK function."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 brands by total sales revenue from sustainable products for each region in the last quarter.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), BrandID INT, IsSustainable BOOLEAN); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, Region VARCHAR(50), SaleDate DATE, Revenue DECIMAL); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); INSERT INTO Products (ProductID, ProductName, BrandID, IsSustainable) VALUES (1, 'Product A', 1, TRUE), (2, 'Product B', 2, FALSE), (3, 'Product C', 3, TRUE), (4, 'Product D', 4, FALSE), (5, 'Product E', 5, TRUE); INSERT INTO Sales (SaleID, ProductID, Region, SaleDate, Revenue) VALUES (1, 1, 'Europe', '2022-01-01', 100.0), (2, 3, 'Asia', '2022-02-01', 200.0), (3, 5, 'North America', '2022-03-01', 300.0), (4, 1, 'Europe', '2022-04-01', 400.0), (5, 3, 'Asia', '2022-02-01', 500.0);","WITH RankedBrands AS (SELECT Brands.BrandName, Sales.Region, SUM(Sales.Revenue) as TotalSales, RANK() OVER (PARTITION BY Sales.Region ORDER BY SUM(Sales.Revenue) DESC) AS Rank FROM Sales JOIN Products ON Sales.ProductID = Products.ProductID JOIN Brands ON Products.BrandID = Brands.BrandID WHERE Products.IsSustainable = TRUE AND Sales.SaleDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY Brands.BrandName, Sales.Region) SELECT BrandName, Region, TotalSales FROM RankedBrands WHERE Rank <= 5;","The SQL query starts by creating a common table expression (CTE) named RankedBrands. This CTE joins the Sales, Products, and Brands tables to calculate the total sales revenue for each brand in each region, but only for sustainable products sold in the last quarter. It then ranks these brand-region pairs by their total sales revenue in descending order, separately for each region (this is achieved by the PARTITION BY clause in the RANK() function). Finally, the main query selects the brand name, region, and total sales revenue for the top 5 brand-region pairs in each region (i.e., those with a rank of 5 or less)."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the average age of patients treated for specific conditions in each hospital, and display the top three conditions with the oldest average age per hospital.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age DECIMAL, Condition VARCHAR(50), HospitalID INT); CREATE TABLE Hospitals (HospitalID INT PRIMARY KEY, HospitalName VARCHAR(50)); INSERT INTO Patients (PatientID, Age, Condition, HospitalID) VALUES (1, 65, 'Heart Disease', 1), (2, 70, 'Diabetes', 1), (3, 75, 'Cancer', 2), (4, 60, 'Heart Disease', 2), (5, 80, 'Diabetes', 3); INSERT INTO Hospitals (HospitalID, HospitalName) VALUES (1, 'City Hospital'), (2, 'General Hospital'), (3, 'County Hospital');","WITH RankedConditions AS (SELECT P.Condition, H.HospitalName, AVG(P.Age) AS AvgAge, DENSE_RANK() OVER (PARTITION BY H.HospitalName ORDER BY AVG(P.Age) DESC) AS Rank FROM Patients P INNER JOIN Hospitals H ON P.HospitalID = H.HospitalID GROUP BY P.Condition, H.HospitalName) SELECT Condition, HospitalName, AvgAge FROM RankedConditions WHERE Rank <= 3;","The query first joins the Patients and Hospitals tables based on the HospitalID. It then groups the data by Condition and HospitalName, and calculates the average age of patients for each condition in each hospital. The DENSE_RANK function is used to rank these averages within each hospital in descending order. Finally, the query selects the top three conditions with the highest average age in each hospital."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify the top 5 countries with the greatest increase in renewable energy production from the previous year.,"CREATE TABLE RenewableEnergy (Country VARCHAR(50), Year INT, Production DECIMAL); INSERT INTO RenewableEnergy (Country, Year, Production) VALUES ('Germany', 2019, 200.5), ('Germany', 2020, 250.0), ('USA', 2019, 300.0), ('USA', 2020, 320.0), ('China', 2019, 500.0), ('China', 2020, 550.0), ('India', 2019, 100.0), ('India', 2020, 150.0), ('UK', 2019, 80.0), ('UK', 2020, 100.0);","WITH ProdDiff AS (SELECT Country, Year, Production, LAG(Production) OVER (PARTITION BY Country ORDER BY Year) AS PrevYearProd FROM RenewableEnergy) SELECT Country, (Production - PrevYearProd) AS ProdIncrease FROM ProdDiff ORDER BY ProdIncrease DESC LIMIT 5;",The SQL query first creates a common table expression (CTE) called ProdDiff. This CTE calculates for each country and year the production of renewable energy and the production of the previous year using the LAG function. The main query then calculates the difference between the production of each year and the previous one and orders the results in descending order to identify the countries with the greatest increase. The LIMIT clause then restricts the output to the top 5 countries.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","List the top 10 countries with the highest average carbon emissions during the last decade, and determine the percentage change in emissions from the beginning to the end of the decade.","CREATE TABLE CarbonEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, AvgCarbonEmissions DECIMAL); INSERT INTO CarbonEmissions (CountryID, CountryName, Year, AvgCarbonEmissions) VALUES (1, 'China', 2010, 10.0), (1, 'China', 2020, 15.0), (2, 'USA', 2010, 9.5), (2, 'USA', 2020, 9.0), (3, 'India', 2010, 4.0), (3, 'India', 2020, 6.0), (4, 'Russia', 2010, 5.5), (4, 'Russia', 2020, 6.5), (5, 'Japan', 2010, 3.5), (5, 'Japan', 2020, 3.6);","WITH EmissionsChange AS (SELECT CountryName, AVG(AvgCarbonEmissions) AS AvgEmissions, MAX(AvgCarbonEmissions) - MIN(AvgCarbonEmissions) AS EmissionsChange FROM CarbonEmissions GROUP BY CountryName), RankedCountries AS (SELECT CountryName, AvgEmissions, EmissionsChange, DENSE_RANK() OVER (ORDER BY AvgEmissions DESC) AS Rank FROM EmissionsChange) SELECT CountryName, AvgEmissions, EmissionsChange FROM RankedCountries WHERE Rank <= 10;",The query creates two common table expressions. The first CTE (EmissionsChange) calculates the average carbon emissions and the change in emissions for each country over the decade. The second CTE (RankedCountries) ranks the countries based on their average emissions in descending order. It then selects the top 10 countries with the highest average emissions and their respective percentage changes.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a database to store and track the vehicle sales across different regions, their fuel efficiency, and their corresponding technology. Then, display the top 5 selling vehicles with the highest average fuel efficiency in North America.","CREATE TABLE VehicleTech (VehicleID INT PRIMARY KEY, VehicleName VARCHAR(50), Technology VARCHAR(50)); CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, VehicleID INT, Region VARCHAR(50), TotalSales INT); CREATE TABLE VehicleEfficiency (VehicleID INT, AvgFuelEfficiency DECIMAL); INSERT INTO VehicleTech (VehicleID, VehicleName, Technology) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Hybrid'), (4, 'Bolt', 'Electric'), (5, 'Prius', 'Hybrid'); INSERT INTO VehicleSales (SalesID, VehicleID, Region, TotalSales) VALUES (1, 1, 'North America', 50000), (2, 2, 'North America', 45000), (3, 3, 'North America', 55000), (4, 4, 'North America', 60000), (5, 5, 'North America', 65000); INSERT INTO VehicleEfficiency (VehicleID, AvgFuelEfficiency) VALUES (1, 120.5), (2, 118.0), (3, 110.0), (4, 115.7), (5, 95.0);","WITH CombinedData AS (SELECT vt.VehicleName, vt.Technology, vs.TotalSales, ve.AvgFuelEfficiency FROM VehicleTech vt INNER JOIN VehicleSales vs ON vt.VehicleID = vs.VehicleID INNER JOIN VehicleEfficiency ve ON vt.VehicleID = ve.VehicleID WHERE vs.Region = 'North America') SELECT VehicleName, Technology, AvgFuelEfficiency FROM CombinedData ORDER BY TotalSales DESC, AvgFuelEfficiency DESC LIMIT 5;","The query first combines the data from the VehicleTech, VehicleSales, and VehicleEfficiency tables using INNER JOIN operations, considering only the data for the North America region. Then, it selects the VehicleName, Technology, and AvgFuelEfficiency from the combined data, and sorts the results in descending order by TotalSales and AvgFuelEfficiency to display the top 5 selling vehicles with the highest average fuel efficiency in North America."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Find the total government spending for each department on a yearly basis and list the top 5 departments with the highest average spending over the past 5 years.,"CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), Year INT, Spending DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, Year, Spending) VALUES (1, 'Defense', 2017, 5000), (1, 'Defense', 2018, 5200), (1, 'Defense', 2019, 5500), (2, 'Education', 2017, 2000), (2, 'Education', 2018, 2100), (2, 'Education', 2019, 2200), (3, 'Health', 2017, 4000), (3, 'Health', 2018, 4100), (3, 'Health', 2019, 4200);","WITH AvgSpending AS (SELECT DepartmentName, AVG(Spending) as AvgSpending FROM GovernmentSpending WHERE Year > (SELECT MAX(Year) FROM GovernmentSpending) - 5 GROUP BY DepartmentName) SELECT DepartmentName, AvgSpending FROM AvgSpending ORDER BY AvgSpending DESC LIMIT 5;",The SQL query first creates a common table expression that calculates the average spending for each department over the past 5 years. It then orders these departments by their average spending in descending order and limits the result to the top 5 departments.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert data into the Products table, and then display the details of products made from sustainable materials.","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Material VARCHAR(50), Price DECIMAL); CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(50), Material VARCHAR(50), Sustainable BOOLEAN);","INSERT INTO Products (ProductID, ProductName, Material, Price) VALUES (1, 'Eco-friendly Skirt', 'Organic Cotton', 49.99), (2, 'Sustainable Coat', 'Recycled Polyester', 120.00); SELECT P.ProductName, P.Material, P.Price FROM Products AS P INNER JOIN Suppliers AS S ON P.Material = S.Material WHERE S.Sustainable = TRUE;","The SQL command first inserts data into the Products table with specific values for product ID, product name, material, and price. Then, using an inner join, it retrieves the product name, material, and price information from the Products table where the material matches with the material provided by a supplier that offers sustainable materials."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the top 5 most purchased sustainable fashion brands in Europe for the last year.,"CREATE TABLE BrandPurchases (PurchaseId INT PRIMARY KEY, BrandId INT, BrandName VARCHAR(50), PurchaseDate DATE, Region VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Brands (BrandId INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO BrandPurchases (PurchaseId, BrandId, BrandName, PurchaseDate, Region, IsSustainable) VALUES (1, 1, 'Brand A', '2020-12-01', 'Europe', TRUE), (2, 2, 'Brand B', '2020-12-02', 'Europe', TRUE), (3, 3, 'Brand C', '2020-12-03', 'Europe', TRUE), (4, 4, 'Brand D', '2020-12-04', 'Europe', TRUE), (5, 5, 'Brand E', '2020-12-05', 'Europe', TRUE);","WITH PurchaseCount AS (SELECT BrandId, COUNT(PurchaseId) AS Count FROM BrandPurchases WHERE Region = 'Europe' AND PurchaseDate BETWEEN '2020-01-01' AND '2020-12-31' AND IsSustainable = TRUE GROUP BY BrandId) SELECT B.BrandName, P.Count FROM Brands B INNER JOIN PurchaseCount P ON B.BrandId = P.BrandId ORDER BY P.Count DESC LIMIT 5;","The query first creates a subquery named PurchaseCount that selects the BrandId and counts the number of purchases for each brand in Europe for the year 2020 where the brand is marked as sustainable. Then, the main query joins the Brands table with the PurchaseCount subquery on the BrandId, and selects the brand name and purchase count. The results are ordered by the purchase count in descending order and limited to the top 5."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records","Please generate a report that displays the top 5 content creators who produced the most viewed content in the month of September, 2021.","CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50)); CREATE TABLE Content (ContentID INT PRIMARY KEY, CreatorID INT, ContentTitle VARCHAR(255), ReleaseDate DATE, Views INT); INSERT INTO ContentCreators (CreatorID, CreatorName) VALUES (1, 'Creator A'), (2, 'Creator B'), (3, 'Creator C'), (4, 'Creator D'), (5, 'Creator E'); INSERT INTO Content (ContentID, CreatorID, ContentTitle, ReleaseDate, Views) VALUES (1, 1, 'Content A', '2021-09-01', 15000), (2, 2, 'Content B', '2021-09-05', 20000), (3, 3, 'Content C', '2021-09-10', 25000), (4, 4, 'Content D', '2021-09-15', 30000), (5, 5, 'Content E', '2021-09-20', 35000);","WITH CreatorViews AS (SELECT CreatorName, SUM(Views) AS TotalViews FROM ContentCreators JOIN Content ON ContentCreators.CreatorID = Content.CreatorID WHERE MONTH(ReleaseDate) = 9 AND YEAR(ReleaseDate) = 2021 GROUP BY CreatorName) SELECT CreatorName, TotalViews, RANK() OVER (ORDER BY TotalViews DESC) AS Rank FROM CreatorViews WHERE Rank <= 5;","The query starts by creating a Common Table Expression (CTE) that groups the data by CreatorName, filters for content released in September 2021, and calculates the total views for each content creator. The main query then ranks the creators based on total views using the RANK() window function, and displays the top 5 content creators based on views."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 crops with the highest yield in the most recent harvesting season. If there is a tie in yield, prioritize the crop which is most frequently grown.","CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50), Season VARCHAR(50), Yield DECIMAL); INSERT INTO Crops (CropID, CropName, Season, Yield) VALUES (1, 'Wheat', 'Winter', 1000.5), (2, 'Corn', 'Summer', 1500.0), (3, 'Rice', 'Summer', 2000.0), (4, 'Soybean', 'Spring', 1200.7), (5, 'Barley', 'Winter', 800.0); CREATE TABLE CropFrequency (CropID INT PRIMARY KEY, Frequency INT); INSERT INTO CropFrequency (CropID, Frequency) VALUES (1, 50), (2, 100), (3, 75), (4, 60), (5, 40);","WITH TopYieldCrops AS (SELECT CropName, Yield, Frequency, DENSE_RANK() OVER (ORDER BY Yield DESC, Frequency DESC) AS Rank FROM Crops JOIN CropFrequency ON Crops.CropID = CropFrequency.CropID WHERE Season = (SELECT MAX(Season) FROM Crops)) SELECT CropName, Yield FROM TopYieldCrops WHERE Rank <= 5;",The query first creates a common table expression (CTE) to rank the crops based on their yield and frequency in descending order for the most recent season. It uses the DENSE_RANK function to do this. It then selects the top 5 crops from this ranked list.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total allocation of government funding by sector for the year 2020.,"CREATE TABLE GovernmentFunding (FundingID INT PRIMARY KEY, Sector VARCHAR(50), Year INT, Amount DECIMAL); INSERT INTO GovernmentFunding (FundingID, Sector, Year, Amount) VALUES (1, 'Health', 2020, 5000000.00), (2, 'Education', 2020, 4000000.00), (3, 'Defense', 2020, 6000000.00), (4, 'Infrastructure', 2020, 3000000.00), (5, 'Agriculture', 2020, 2000000.00);","BEGIN TRANSACTION; SELECT Sector, SUM(Amount) AS TotalAllocation FROM GovernmentFunding WHERE Year = 2020 GROUP BY Sector; COMMIT;","The query begins a transaction. It then selects the sector column and calculates the total allocation for each sector by summing the amount column. This is done only for the records where the year is 2020. The results are grouped by sector. Finally, the transaction is committed."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,data retrieval: basic data fetching queries,"Find out the top 5 hotel chains that have the highest average rating across all their hotels, for each continent.","CREATE TABLE HotelChains (ChainID INT PRIMARY KEY, ChainName VARCHAR(50)); INSERT INTO HotelChains (ChainID, ChainName) VALUES (1, 'Marriott'), (2, 'Hilton'), (3, 'InterContinental'), (4, 'Accor'), (5, 'Wyndham'); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, ChainID INT, HotelName VARCHAR(50), Continent VARCHAR(50), Rating DECIMAL); INSERT INTO Hotels (HotelID, ChainID, HotelName, Continent, Rating) VALUES (1, 1, 'Marriott New York', 'North America', 4.5), (2, 2, 'Hilton London', 'Europe', 4.3), (3, 3, 'InterContinental Sydney', 'Australia', 4.4), (4, 4, 'Accor Paris', 'Europe', 4.2), (5, 5, 'Wyndham Beijing', 'Asia', 4.3);","WITH AvgRatings AS (SELECT HC.ChainName, H.Continent, AVG(H.Rating) AS AvgRating FROM HotelChains HC JOIN Hotels H ON HC.ChainID = H.ChainID GROUP BY HC.ChainName, H.Continent), RankedChains AS (SELECT ChainName, Continent, AvgRating, DENSE_RANK() OVER (PARTITION BY Continent ORDER BY AvgRating DESC) AS Rank FROM AvgRatings) SELECT ChainName, Continent, AvgRating FROM RankedChains WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) called AvgRatings, which calculates the average rating of each hotel chain for each continent. It then creates another CTE called RankedChains, which ranks these average ratings within each continent in descending order using the DENSE_RANK function. Finally, it selects the top 5 hotel chains for each continent based on their average ratings."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Show me a report of the most popular songs streamed in 2021, grouped by artists with the highest number of total streams, and include only artists who have more than a million streams.","CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(50)); CREATE TABLE Songs (SongID INT PRIMARY KEY, SongName VARCHAR(50), ArtistID INT); CREATE TABLE Streams (StreamID INT PRIMARY KEY, SongID INT, StreamCount INT, StreamYear INT); INSERT INTO Artists (ArtistID, ArtistName) VALUES (1, 'Drake'), (2, 'Taylor Swift'), (3, 'BTS'); INSERT INTO Songs (SongID, SongName, ArtistID) VALUES (1, 'Way 2 Sexy', 1), (2, 'Evermore', 2), (3, 'Permission to Dance', 3); INSERT INTO Streams (StreamID, SongID, StreamCount, StreamYear) VALUES (1, 1, 2500000, 2021), (2, 2, 1500000, 2021), (3, 3, 3000000, 2021);","WITH ArtistStreams AS (SELECT a.ArtistName, s.SongName, SUM(st.StreamCount) OVER(PARTITION BY a.ArtistID) as TotalStreams FROM Artists a JOIN Songs s ON a.ArtistID = s.ArtistID JOIN Streams st ON s.SongID = st.SongID WHERE st.StreamYear = 2021) SELECT ArtistName, SongName, TotalStreams FROM ArtistStreams WHERE TotalStreams > 1000000 ORDER BY TotalStreams DESC;","The query first creates a common table expression (CTE) named ArtistStreams. Within this CTE, it sums up the total streams for each artist in the year 2021. Then, from this CTE, it selects the artist name, song name, and total streams for artists who have more than a million streams. The results are ordered in descending order based on the total streams."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records","Insert the statistics of a new basketball player into the player stats table. Then, display the top 5 players with the highest average points per game in the current season.","CREATE TABLE PlayerStats (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), SeasonYear INT, GamesPlayed INT, TotalPoints INT); INSERT INTO PlayerStats (PlayerID, PlayerName, SeasonYear, GamesPlayed, TotalPoints) VALUES (1, 'James Harden', 2021, 72, 2856), (2, 'LeBron James', 2021, 67, 2010), (3, 'Kevin Durant', 2021, 35, 882), (4, 'Stephen Curry', 2021, 63, 2256), (5, 'Giannis Antetokounmpo', 2021, 72, 2426);","INSERT INTO PlayerStats (PlayerID, PlayerName, SeasonYear, GamesPlayed, TotalPoints) VALUES (6, 'Luka Doncic', 2021, 66, 2012); WITH RankedPlayers AS (SELECT PlayerName, TotalPoints/GamesPlayed AS AvgPointsPerGame, RANK() OVER (ORDER BY TotalPoints/GamesPlayed DESC) AS Rank FROM PlayerStats WHERE SeasonYear = 2021) SELECT PlayerName, AvgPointsPerGame FROM RankedPlayers WHERE Rank <= 5;","The query starts by inserting the statistics of a new player into the PlayerStats table. It then creates a common table expression (CTE) to calculate the average points per game for each player in the current season and rank them in descending order of this average. Finally, it selects the top 5 players based on this ranking."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,common table expressions,data retrieval: basic data fetching queries,Find the top 5 vehicle models with the highest sales in the last five years in each region.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelID, ModelName, Region, SaleDate, UnitsSold) VALUES (1, 1, 'Model S', 'North America', '2017-01-01', 5000), (2, 2, 'Model 3', 'Europe', '2017-01-01', 4000), (3, 3, 'Leaf', 'Asia', '2017-01-01', 3000), (4, 4, 'Bolt', 'North America', '2017-01-01', 2000), (5, 5, 'Prius', 'Europe', '2017-01-01', 1000);","WITH SalesSummary AS (SELECT ModelName, Region, SUM(UnitsSold) as TotalUnitsSold FROM VehicleSales WHERE SaleDate >= DATE_SUB(CURRENT_DATE, INTERVAL 5 YEAR) GROUP BY ModelName, Region), RankedModels AS (SELECT ModelName, Region, TotalUnitsSold, RANK() OVER (PARTITION BY Region ORDER BY TotalUnitsSold DESC) AS Rank FROM SalesSummary) SELECT ModelName, Region, TotalUnitsSold FROM RankedModels WHERE Rank <= 5;","The query first creates a common table expression (CTE) called 'SalesSummary' which aggregates the total units sold for each model in each region for the past 5 years. It then creates another CTE called 'RankedModels' which assigns a rank to each model in each region based on the total units sold in descending order. Finally, it selects the top 5 models in each region based on the total units sold."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that ranks countries based on their total carbon dioxide (CO2) emissions for each year from 2010 to 2020. The report should also include the percentage change in emission levels from the previous year.,"CREATE TABLE CountryEmissions (Country VARCHAR(50), Year INT, CO2Emissions DECIMAL); INSERT INTO CountryEmissions (Country, Year, CO2Emissions) VALUES ('USA', 2010, 5500.5), ('USA', 2011, 5300.5), ('USA', 2012, 5200.7), ('USA', 2013, 5100.5), ('USA', 2014, 5000.5), ('USA', 2015, 4900.5), ('USA', 2016, 4800.5), ('USA', 2017, 4700.5), ('USA', 2018, 4600.5), ('USA', 2019, 4500.5), ('USA', 2020, 4300.5);","WITH EmissionsChange AS (SELECT Country, Year, CO2Emissions, LAG(CO2Emissions) OVER (PARTITION BY Country ORDER BY Year) AS PrevEmissions FROM CountryEmissions), RankedCountries AS (SELECT Country, Year, CO2Emissions, (CO2Emissions - PrevEmissions) / PrevEmissions * 100 AS ChangePercent, DENSE_RANK() OVER (PARTITION BY Year ORDER BY CO2Emissions DESC) AS Rank FROM EmissionsChange) SELECT Country, Year, CO2Emissions, ChangePercent, Rank FROM RankedCountries ORDER BY Year, Rank;","The query first creates a common table expression (CTE) to calculate the change in CO2 emissions from the previous year for each country. It then ranks countries based on their total CO2 emissions for each year. Finally, it selects the country's name, CO2 emissions, percentage change in emissions, and rank, and orders the result by year and rank."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find out the top three emerging technologies in the last three years and the number of companies that have adopted each.,"CREATE TABLE EmergingTech (TechID INT PRIMARY KEY, TechName VARCHAR(50), Year INT); INSERT INTO EmergingTech (TechID, TechName, Year) VALUES (1, 'Blockchain', 2020), (2, 'Artificial Intelligence', 2019), (3, 'Internet of Things', 2018); CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), TechID INT); INSERT INTO Companies (CompanyID, CompanyName, TechID) VALUES (1, 'Company A', 1), (2, 'Company B', 2), (3, 'Company C', 3), (4, 'Company D', 1), (5, 'Company E', 1);","WITH TechAdoptCount AS (SELECT ET.TechName, COUNT(C.CompanyID) AS CompanyCount FROM EmergingTech ET INNER JOIN Companies C ON ET.TechID = C.TechID WHERE ET.Year > 2017 GROUP BY ET.TechName) SELECT TechName, CompanyCount FROM TechAdoptCount ORDER BY CompanyCount DESC LIMIT 3;",This SQL query first creates a common table expression (CTE) named TechAdoptCount which calculates the number of companies that have adopted each technology. It utilizes the INNER JOIN operation to combine the EmergingTech and Companies tables based on the matching TechID. It also filters the technologies to include only those emerged in the last three years (Year > 2017). The CTE then groups by TechName and calculates the COUNT of CompanyID which represents the number of companies that have adopted each technology. The final SELECT statement then orders the data by CompanyCount in descending order and limits the output to the top 3 records.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the top 5 fashion brands with the highest total sales in Europe in 2020, and roll back the transaction if an error occurs.","CREATE TABLE FashionSales (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), Year INT, Sales DECIMAL); INSERT INTO FashionSales (BrandID, BrandName, Region, Year, Sales) VALUES (1, 'Gucci', 'Europe', 2020, 2500000.00), (2, 'Chanel', 'Europe', 2020, 3000000.00), (3, 'Prada', 'Europe', 2020, 2100000.00), (4, 'Armani', 'Europe', 2020, 2200000.00), (5, 'Versace', 'Europe', 2020, 2800000.00), (6, 'Burberry', 'Europe', 2020, 1900000.00), (7, 'Dolce & Gabbana', 'Europe', 2020, 1800000.00);","BEGIN TRANSACTION; TRY BEGIN SELECT TOP 5 BrandName, SUM(Sales) as TotalSales FROM FashionSales WHERE Region = 'Europe' AND Year = 2020 GROUP BY BrandName ORDER BY TotalSales DESC; COMMIT; END TRY BEGIN CATCH ROLLBACK; END CATCH;","The query starts a new transaction and tries to select the top 5 brands with the highest total sales in Europe in 2020. It sums up the sales for each brand and orders the results in descending order by the total sales. If an error occurs during the execution of the query, the transaction is rolled back to ensure data integrity."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the investments and returns for different startup companies across various industries and calculate the Return on Investment (ROI) for each, then pivot the data to display the ROI by industry and startup.","CREATE TABLE StartupInvestments (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), Industry VARCHAR(50), Investment DECIMAL, Return DECIMAL); INSERT INTO StartupInvestments (StartupID, StartupName, Industry, Investment, Return) VALUES (1, 'StartX', 'AI', 500000.0, 700000.0), (2, 'StartY', 'Healthcare', 300000.0, 350000.0), (3, 'StartZ', 'Fintech', 400000.0, 600000.0), (4, 'StartA', 'AI', 600000.0, 900000.0), (5, 'StartB', 'Healthcare', 200000.0, 250000.0);","WITH ROICalc AS (SELECT Industry, StartupName, (Return-Investment)/Investment as ROI FROM StartupInvestments) SELECT Industry, [StartX], [StartY], [StartZ], [StartA], [StartB] FROM (SELECT Industry, StartupName, ROI FROM ROICalc) SRC PIVOT (AVG(ROI) FOR StartupName IN ([StartX], [StartY], [StartZ], [StartA], [StartB])) AS PivotTable;","The query starts with a common table expression (CTE) that calculates the ROI for each startup. It then uses the PIVOT operator to transform the ROI for each startup into columns based on their industry, resulting in a table where each row represents an industry and each column a startup, with the values being the respective ROIs."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store sales data of different electric vehicle models across various regions, then compute and show the sales percentage share of each model within each region.","CREATE TABLE EVSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SalesUnits INT); INSERT INTO EVSales (SalesID, ModelName, Region, SalesUnits) VALUES (1, 'Model S', 'North America', 50000), (2, 'Model 3', 'Europe', 75000), (3, 'Leaf', 'Asia', 65000), (4, 'Bolt', 'North America', 45000), (5, 'Prius', 'Europe', 85000);","WITH ModelSales AS (SELECT Region, ModelName, SalesUnits, SUM(SalesUnits) OVER (PARTITION BY Region) AS TotalSales FROM EVSales) SELECT Region, ModelName, SalesUnits, CAST(SalesUnits AS FLOAT)/TotalSales AS SalesPercentage FROM ModelSales;","The SQL query firstly creates a common table expression (CTE) named ModelSales to compute the total sales for each region using the SUM() function with the OVER() clause partitioned by Region. Then, it selects the region, model name, sales units, and the sales percentage of each model within each region. The sales percentage is calculated by the ratio of sales units of a model to the total sales in that region."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,common table expressions,data retrieval: basic data fetching queries,Find the top 5 drugs with the highest efficacy based on the ratio of successful to unsuccessful treatments for each drug.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(50), Treatment VARCHAR(50), Outcome VARCHAR(50)); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), SideEffects VARCHAR(255)); INSERT INTO Patients (PatientID, Age, Gender, Region) VALUES (1, 45, 'Male', 'North America'), (2, 34, 'Female', 'Europe'), (3, 58, 'Male', 'Asia'), (4, 25, 'Female', 'North America'), (5, 78, 'Male', 'Europe'); INSERT INTO MedicalHistories (HistoryID, PatientID, Diagnosis, Treatment, Outcome) VALUES (1, 1, 'Disease A', 'Drug 1', 'Success'), (2, 2, 'Disease B', 'Drug 2', 'Failure'), (3, 3, 'Disease C', 'Drug 3', 'Success'), (4, 4, 'Disease A', 'Drug 1', 'Failure'), (5, 5, 'Disease B', 'Drug 2', 'Success'); INSERT INTO Drugs (DrugID, DrugName, SideEffects) VALUES (1, 'Drug 1', 'Nausea, Headache'), (2, 'Drug 2', 'Dizziness, Fatigue'), (3, 'Drug 3', 'Dry mouth, Constipation');","WITH DrugEfficacy AS (SELECT Treatment, COUNT(CASE WHEN Outcome = 'Success' THEN 1 END) AS SuccessfulTreatments, COUNT(CASE WHEN Outcome = 'Failure' THEN 1 END) AS UnsuccessfulTreatments FROM MedicalHistories GROUP BY Treatment) SELECT Treatment AS DrugName, (SuccessfulTreatments / (SuccessfulTreatments + UnsuccessfulTreatments)) AS EfficacyRatio FROM DrugEfficacy ORDER BY EfficacyRatio DESC LIMIT 5;",The query creates a common table expression (CTE) to calculate the counts of successful and unsuccessful treatments for each drug. Then it calculates the efficacy ratio for each drug by dividing the count of successful treatments by the total count of treatments. The result is sorted in descending order by the efficacy ratio and only the top 5 drugs are selected.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores sustainability ratings for different fashion brands and then find the average rating for brands that are rated by more than 50 people.,"CREATE TABLE SustainabilityRatings (RatingID INT PRIMARY KEY, BrandName VARCHAR(50), Rating DECIMAL, NumberOfRatings INT); INSERT INTO SustainabilityRatings (RatingID, BrandName, Rating, NumberOfRatings) VALUES (1, 'Brand A', 4.5, 100), (2, 'Brand B', 3.7, 75), (3, 'Brand C', 4.2, 50), (4, 'Brand D', 4.6, 120), (5, 'Brand E', 4.1, 45);","SELECT BrandName, AVG(Rating) AS AverageRating FROM SustainabilityRatings WHERE NumberOfRatings > 50 GROUP BY BrandName;",The query first filters the 'SustainabilityRatings' table to include only the brands that have been rated by more than 50 people. Then it groups the resulting records by 'BrandName' and calculates the average 'Rating' for each brand. The final result is a list of brands and their corresponding average sustainability rating.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert into the FashionTrends table the latest information on the most popular fashion trends in North America, Europe, and Asia. After that, display the trends which have a popularity score greater than 80.","CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), PopularityScore INT); INSERT INTO FashionTrends (TrendID, TrendName, Region, PopularityScore) VALUES (1, 'Sustainable Clothing', 'North America', 85), (2, 'Athleisure', 'Europe', 90), (3, 'Minimalistic Fashion', 'Asia', 80), (4, 'Vintage Clothing', 'North America', 95), (5, 'Streetwear', 'Europe', 88);","INSERT INTO FashionTrends (TrendID, TrendName, Region, PopularityScore) VALUES (6, 'Boho Chic', 'North America', 82), (7, 'Smart Casual', 'Europe', 84), (8, 'Androgynous Fashion', 'Asia', 81); SELECT TrendName, PopularityScore FROM FashionTrends WHERE PopularityScore > 80;","The query first inserts the latest fashion trends and their popularity score for North America, Europe, and Asia into the FashionTrends table. It then selects and displays the names and popularity scores of the trends which have a popularity score greater than 80."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects",Generate a report that shows the top 5 music genres in Europe that had the highest average revenue per song in the last year.,"CREATE TABLE MusicGenre (GenreID INT PRIMARY KEY, GenreName VARCHAR(50)); INSERT INTO MusicGenre (GenreID, GenreName) VALUES (1, 'Rock'), (2, 'Pop'), (3, 'Jazz'), (4, 'Classical'), (5, 'Hip Hop'); CREATE TABLE SongRevenue (SongID INT PRIMARY KEY, GenreID INT, Region VARCHAR(50), Revenue DECIMAL, Year INT); INSERT INTO SongRevenue (SongID, GenreID, Region, Revenue, Year) VALUES (1, 1, 'Europe', 1000, 2020), (2, 2, 'Europe', 2000, 2020), (3, 3, 'Europe', 1500, 2020), (4, 4, 'Europe', 1200, 2020), (5, 5, 'Europe', 1800, 2020);","WITH RankedGenres AS (SELECT mg.GenreName, AVG(sr.Revenue) as AverageRevenue, RANK() OVER (ORDER BY AVG(sr.Revenue) DESC) AS Rank FROM SongRevenue sr JOIN MusicGenre mg ON sr.GenreID = mg.GenreID WHERE sr.Region = 'Europe' AND sr.Year = 2020 GROUP BY mg.GenreName) SELECT GenreName, AverageRevenue FROM RankedGenres WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) named RankedGenres. In this CTE, it calculates the average revenue per song for each music genre in Europe for the year 2020. It uses the RANK function to rank these music genres in descending order of their average revenue per song. Then, it selects the top 5 music genres and their average revenue from the RankedGenres CTE."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Delete all records of wheat crops from the CropYields table that have a yield lower than average, and then show the remaining records.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Yield) VALUES (1, 'Corn', 100.5), (2, 'Wheat', 80.0), (3, 'Barley', 110.0), (4, 'Wheat', 75.0), (5, 'Corn', 105.0);",DELETE FROM CropYields WHERE CropName = 'Wheat' AND Yield < (SELECT AVG(Yield) FROM CropYields WHERE CropName = 'Wheat'); SELECT * FROM CropYields;,"The query first deletes all records of wheat crops from the CropYields table that have a yield lower than the average yield of wheat crops. It uses a subquery to calculate the average yield of wheat crops. After deleting the records, it then selects all remaining records from the CropYields table."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the number of views for different YouTube videos across various genres, and then display the top 5 most viewed genres.","CREATE TABLE YoutubeViews (VideoID INT PRIMARY KEY, VideoName VARCHAR(50), Genre VARCHAR(50), Views INT); INSERT INTO YoutubeViews (VideoID, VideoName, Genre, Views) VALUES (1, 'Video A', 'Music', 1000000), (2, 'Video B', 'Comedy', 2000000), (3, 'Video C', 'Education', 1500000), (4, 'Video D', 'Music', 5000000), (5, 'Video E', 'Comedy', 3000000);","WITH RankedGenres AS (SELECT Genre, SUM(Views) AS TotalViews, DENSE_RANK() OVER (ORDER BY SUM(Views) DESC) AS Rank FROM YoutubeViews GROUP BY Genre) SELECT Genre, TotalViews FROM RankedGenres WHERE Rank <= 5;",The SQL query creates a common table expression (CTE) to rank genres based on their total views in descending order. It then selects the top 5 most viewed genres using the DENSE_RANK() function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report displaying the top 5 most popular product categories in Europe and Asia but not in North America based on sales in the last quarter.,"CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, Region VARCHAR(50), SaleDate DATE, QuantitySold INT); CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Category VARCHAR(50)); INSERT INTO Sales (SaleID, ProductID, Region, SaleDate, QuantitySold) VALUES (1, 101, 'Europe', '2022-03-01', 500), (2, 102, 'Asia', '2022-03-15', 400), (3, 103, 'North America', '2022-02-28', 300), (4, 104, 'Europe', '2022-03-10', 200), (5, 105, 'Asia', '2022-01-25', 600); INSERT INTO Products (ProductID, ProductName, Category) VALUES (101, 'A', 'Clothing'), (102, 'B', 'Shoes'), (103, 'C', 'Accessories'), (104, 'D', 'Clothing'), (105, 'E', 'Shoes');","WITH EuropeAsiaSales AS (SELECT p.Category, SUM(s.QuantitySold) as TotalSales FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.Region IN ('Europe', 'Asia') AND QUARTER(s.SaleDate) = 1 GROUP BY p.Category), NorthAmericaSales AS (SELECT p.Category, SUM(s.QuantitySold) as TotalSales FROM Sales s JOIN Products p ON s.ProductID = p.ProductID WHERE s.Region = 'North America' AND QUARTER(s.SaleDate) = 1 GROUP BY p.Category) SELECT e.Category FROM EuropeAsiaSales e WHERE e.Category NOT IN (SELECT n.Category FROM NorthAmericaSales n) ORDER BY e.TotalSales DESC LIMIT 5;","The query first creates two common table expressions (CTEs) - EuropeAsiaSales and NorthAmericaSales. EuropeAsiaSales contains the total sales for each product category in Europe and Asia in the last quarter. Conversely, NorthAmericaSales contains the total sales for each category in North America in the same period. The main query then selects the categories from EuropeAsiaSales that are not in NorthAmericaSales, thus returning the categories popular in Europe and Asia but not North America. It finally orders the results by total sales in descending order and limits it to the top 5."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total amount of budgets allocated to each department from 2015 to 2020, sorted by the year and the department name. Include only those departments that received funding every year.","CREATE TABLE Department (DeptID INT PRIMARY KEY, DeptName VARCHAR(50)); INSERT INTO Department (DeptID, DeptName) VALUES (1, 'Health'), (2, 'Education'), (3, 'Defense'), (4, 'Transportation'); CREATE TABLE Budget (BudgetID INT PRIMARY KEY, DeptID INT, Year INT, Amount DECIMAL); INSERT INTO Budget (BudgetID, DeptID, Year, Amount) VALUES (1, 1, 2015, 500000), (2, 2, 2015, 700000), (3, 3, 2015, 800000), (4, 4, 2015, 600000), (5, 1, 2016, 550000), (6, 2, 2016, 750000), (7, 3, 2016, 850000), (8, 4, 2016, 650000), (9, 1, 2017, 580000), (10, 2, 2017, 780000), (11, 3, 2017, 880000), (12, 4, 2017, 680000), (13, 1, 2018, 600000), (14, 2, 2018, 800000), (15, 3, 2018, 900000), (16, 4, 2018, 700000), (17, 1, 2019, 620000), (18, 2, 2019, 820000), (19, 3, 2019, 920000), (20, 4, 2019, 720000), (21, 1, 2020, 650000), (22, 2, 2020, 850000), (23, 3, 2020, 950000), (24, 4, 2020, 750000);","BEGIN TRANSACTION; WITH YearlyBudget AS (SELECT Year, DeptName, SUM(Amount) as TotalAmount FROM Budget INNER JOIN Department ON Budget.DeptID = Department.DeptID GROUP BY Year, DeptName HAVING COUNT(DISTINCT Year) = 6) SELECT * FROM YearlyBudget ORDER BY Year, DeptName; COMMIT;","The SQL statement first starts a transaction. It then creates a common table expression (CTE) named 'YearlyBudget' that joins the 'Budget' table and the 'Department' table on the 'DeptID' field. The CTE groups the combined data by the 'Year' and 'DeptName' fields and sums the 'Amount' field in each group. Furthermore, it only includes those groups that appear in all 6 years (from 2015 to 2020). Finally, it selects all records from the 'YearlyBudget' CTE and orders them by the 'Year' and 'DeptName' fields. The transaction is then committed."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about average crop yield per acre for different crops across various regions, and then display the top 5 crops with the highest yield.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgYieldPerAcre DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, AvgYieldPerAcre) VALUES (1, 'Wheat', 'North America', 40.0), (2, 'Rice', 'Asia', 65.0), (3, 'Corn', 'South America', 60.0), (4, 'Barley', 'Europe', 38.0), (5, 'Soybeans', 'North America', 50.0);","WITH RankedCrops AS (SELECT CropName, AvgYieldPerAcre, DENSE_RANK() OVER (ORDER BY AvgYieldPerAcre DESC) AS Rank FROM CropYield) SELECT CropName, AvgYieldPerAcre FROM RankedCrops WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank crops based on their average yield per acre in descending order. It then selects the top 5 crops with the highest yield using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find out the top 5 high-rated hotels which have the highest number of bookings from customers who prefer non-smoking rooms.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Rating DECIMAL); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, Rooms INT); CREATE TABLE CustomerPreferences (CustomerID INT PRIMARY KEY, Preference VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, Rating) VALUES (1, 'Hotel A', 4.5), (2, 'Hotel B', 4.0), (3, 'Hotel C', 3.5), (4, 'Hotel D', 4.7), (5, 'Hotel E', 4.2); INSERT INTO Bookings (BookingID, HotelID, CustomerID, Rooms) VALUES (1, 1, 1, 2), (2, 2, 2, 1), (3, 3, 3, 3), (4, 4, 4, 2), (5, 5, 5, 1); INSERT INTO CustomerPreferences (CustomerID, Preference) VALUES (1, 'Non-Smoking'), (2, 'Smoking'), (3, 'Non-Smoking'), (4, 'Smoking'), (5, 'Non-Smoking');","WITH NonSmokingBookings AS (SELECT B.HotelID, SUM(B.Rooms) AS TotalRooms FROM Bookings B INNER JOIN CustomerPreferences CP ON B.CustomerID = CP.CustomerID WHERE CP.Preference = 'Non-Smoking' GROUP BY B.HotelID), RankedHotels AS (SELECT H.HotelName, H.Rating, NSB.TotalRooms, RANK() OVER (ORDER BY H.Rating DESC, NSB.TotalRooms DESC) AS Rank FROM Hotels H INNER JOIN NonSmokingBookings NSB ON H.HotelID = NSB.HotelID) SELECT HotelName, Rating, TotalRooms FROM RankedHotels WHERE Rank <= 5;","The query first creates a common table expression (CTE) named NonSmokingBookings to get the total number of rooms booked in each hotel by customers who prefer non-smoking rooms. Then, it creates another CTE named RankedHotels to rank the hotels based on their rating and total rooms booked by non-smoking customers. Finally, it selects the top 5 high-rated hotels with the highest number of bookings from non-smoking customers."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a database to store detailed statistics of basketball games including team performance, individual player stats, attendance, and the economic impact. Then, give me the top 10 players with the most points per game.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT, PointsPerGame DECIMAL); CREATE TABLE Games (GameID INT PRIMARY KEY, TeamID INT, Attendance INT, Revenue DECIMAL); INSERT INTO Teams (TeamID, TeamName) VALUES (1, 'Lakers'), (2, 'Warriors'); INSERT INTO Players (PlayerID, PlayerName, TeamID, PointsPerGame) VALUES (1, 'LeBron James', 1, 27.0), (2, 'Stephen Curry', 2, 29.5); INSERT INTO Games (GameID, TeamID, Attendance, Revenue) VALUES (1, 1, 20000, 2000000.00), (2, 2, 19500, 1950000.00);","WITH RankedPlayers AS (SELECT PlayerName, PointsPerGame, DENSE_RANK() OVER (ORDER BY PointsPerGame DESC) AS Rank FROM Players) SELECT PlayerName, PointsPerGame FROM RankedPlayers WHERE Rank <= 10;",The query creates a common table expression (CTE) to rank players based on their points per game in descending order. It then selects the top 10 players with the most points per game using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Provide a list of top 5 countries with the highest investment in Artificial intelligence and Robotics in the last 5 years.,"CREATE TABLE AIInvestments (Country VARCHAR(50), Year INT, InvestmentAmount DECIMAL); INSERT INTO AIInvestments (Country, Year, InvestmentAmount) VALUES ('USA', 2021, 15000000), ('China', 2021, 14000000), ('Japan', 2021, 13000000), ('Germany', 2021, 12000000), ('UK', 2021, 11000000);","WITH RankedCountries AS (SELECT Country, SUM(InvestmentAmount) as TotalInvestment, RANK() OVER (ORDER BY SUM(InvestmentAmount) DESC) AS Rank FROM AIInvestments WHERE Year > (SELECT MAX(Year) FROM AIInvestments) - 5 GROUP BY Country) SELECT Country, TotalInvestment FROM RankedCountries WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) named RankedCountries. The CTE groups the total investment made by each country in Artificial Intelligence and Robotics in the last 5 years. It then ranks these countries based on the total investment amount in descending order using the RANK() function. The main query then fetches the top 5 countries with the highest investment from this CTE.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Return the top 5 athletes with the most number of games played, broken down by sport. Implement this in a way that allows for atomic transactions.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE GamesPlayed (GameID INT PRIMARY KEY, AthleteID INT, DatePlayed DATE); INSERT INTO Athletes (AthleteID, AthleteName, Sport) VALUES (1, 'Athlete A', 'Basketball'), (2, 'Athlete B', 'Football'), (3, 'Athlete C', 'Baseball'), (4, 'Athlete D', 'Hockey'), (5, 'Athlete E', 'Soccer'); INSERT INTO GamesPlayed (GameID, AthleteID, DatePlayed) VALUES (1, 1, '2022-01-01'), (2, 1, '2022-01-02'), (3, 2, '2022-01-01'), (4, 2, '2022-01-02'), (5, 3, '2022-01-01');","BEGIN TRANSACTION; WITH GameCount AS (SELECT Athletes.AthleteName, Athletes.Sport, COUNT(GamesPlayed.GameID) AS NumberOfGames FROM Athletes JOIN GamesPlayed ON Athletes.AthleteID = GamesPlayed.AthleteID GROUP BY Athletes.AthleteName, Athletes.Sport) SELECT Sport, AthleteName, NumberOfGames FROM GameCount WHERE NumberOfGames = (SELECT MAX(NumberOfGames) FROM GameCount) ORDER BY NumberOfGames DESC; COMMIT;","This SQL query begins a transaction. Within this transaction, it creates a common table expression (CTE) named 'GameCount'. This CTE joins the 'Athletes' and 'GamesPlayed' tables on the 'AthleteID' field. It then groups by 'AthleteName' and 'Sport', and counts the number of games each athlete has played. The final SELECT statement returns the sport, athlete's name, and number of games played for the athletes with the maximum number of games played, as determined by a subquery. The results are ordered in descending order by the number of games played. The transaction is then committed to ensure the atomicity of the operation."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,data retrieval: basic data fetching queries,Find the top 5 fashion brands that have the highest number of sustainable products in Europe.,"CREATE TABLE Brands (brandID INT PRIMARY KEY, brandName VARCHAR(50)); CREATE TABLE Products (productID INT PRIMARY KEY, brandID INT, isSustainable BOOLEAN, marketRegion VARCHAR(50)); INSERT INTO Brands (brandID, brandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); INSERT INTO Products (productID, brandID, isSustainable, marketRegion) VALUES (1, 1, TRUE, 'Europe'), (2, 2, FALSE, 'Europe'), (3, 3, TRUE, 'Europe'), (4, 1, TRUE, 'Europe'), (5, 2, TRUE, 'Europe'), (6, 3, FALSE, 'Europe'), (7, 1, FALSE, 'Asia'), (8, 2, TRUE, 'Asia'), (9, 3, FALSE, 'Asia'), (10, 1, TRUE, 'Asia');","WITH SustainableProducts AS (SELECT brandID, COUNT(productID) AS SustainableProductCount FROM Products WHERE isSustainable = TRUE AND marketRegion = 'Europe' GROUP BY brandID) SELECT B.brandName, SP.SustainableProductCount FROM SustainableProducts SP JOIN Brands B ON SP.brandID = B.brandID ORDER BY SP.SustainableProductCount DESC LIMIT 5;","First, this query creates a common table expression (CTE) named 'SustainableProducts'. Within this CTE, we select 'brandID' and count the number of sustainable products for each brand within the market region 'Europe'. Then we join the 'SustainableProducts' CTE with the 'Brands' table on 'brandID' to get the brand names. Next, we sort the results by the count of sustainable products in descending order. Finally, we limit the output to top 5 brands with the highest number of sustainable products in Europe."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the top 5 cryptocurrencies with the highest average trading volume over the last month.,"CREATE TABLE CryptoData (CryptoID INT PRIMARY KEY, CryptoName VARCHAR(50), Date DATE, TradingVolume DECIMAL); INSERT INTO CryptoData (CryptoID, CryptoName, Date, TradingVolume) VALUES (1, 'Bitcoin', '2022-01-01', 45000.5), (2, 'Ethereum', '2022-01-01', 35000.0), (3, 'Cardano', '2022-01-01', 20000.0), (4, 'Polkadot', '2022-01-01', 15000.7), (5, 'Ripple', '2022-01-01', 10000.0);","WITH MonthlyAvgVolume AS (SELECT CryptoName, AVG(TradingVolume) AS AvgVolume FROM CryptoData WHERE Date >= DATEADD(month, -1, GETDATE()) GROUP BY CryptoName) SELECT CryptoName, AvgVolume FROM MonthlyAvgVolume ORDER BY AvgVolume DESC LIMIT 5;",The SQL query first creates a common table expression (CTE) that calculates the average trading volume for each cryptocurrency over the last month. It then sorts these averages in descending order and selects the top 5 cryptocurrencies with the highest average trading volume.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Show the top 5 programming languages that have the highest average salary in the last 5 years and their respective year.,"CREATE TABLE ProgrammingLanguages (LanguageID INT PRIMARY KEY, LanguageName VARCHAR(50)); INSERT INTO ProgrammingLanguages (LanguageID, LanguageName) VALUES (1, 'Python'), (2, 'JavaScript'), (3, 'Java'), (4, 'C++'), (5, 'Swift'), (6, 'Go'); CREATE TABLE SalaryData (DataID INT PRIMARY KEY, LanguageID INT, Year INT, AvgSalary DECIMAL, FOREIGN KEY (LanguageID) REFERENCES ProgrammingLanguages (LanguageID)); INSERT INTO SalaryData (DataID, LanguageID, Year, AvgSalary) VALUES (1, 1, 2018, 115000), (2, 2, 2018, 108000), (3, 3, 2018, 110000), (4, 4, 2018, 105000), (5, 5, 2018, 100000), (6, 6, 2018, 102000), (7, 1, 2019, 120000), (8, 2, 2019, 112000), (9, 3, 2019, 115000), (10, 4, 2019, 110000), (11, 5, 2019, 105000), (12, 6, 2019, 107000);","WITH RankedLanguages AS (SELECT Year, LanguageName, AvgSalary, DENSE_RANK() OVER (PARTITION BY Year ORDER BY AvgSalary DESC) AS Rank FROM SalaryData INNER JOIN ProgrammingLanguages ON SalaryData.LanguageID = ProgrammingLanguages.LanguageID WHERE Year > (SELECT MAX(Year) FROM SalaryData) - 5) SELECT Year, LanguageName, AvgSalary FROM RankedLanguages WHERE Rank <= 5 ORDER BY Year, Rank;","The query first creates a common table expression (CTE) named RankedLanguages. It uses the DENSE_RANK function to rank the programming languages based on their average salaries in descending order, for each year. The ranking is partitioned by the year. It then selects the top 5 programming languages with the highest average salaries for each year in the last 5 years, using the conditions in the WHERE clause. The result is then ordered by the year and the rank."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores carbon emission data for different countries in the world, and then display the top 5 countries with the highest total carbon emissions over the years.","CREATE TABLE CarbonEmissions (Country VARCHAR(50) PRIMARY KEY, Year INT, CarbonEmissionsInTons DECIMAL); INSERT INTO CarbonEmissions (Country, Year, CarbonEmissionsInTons) VALUES ('USA', 2020, 6500.5), ('China', 2020, 10300.0), ('India', 2020, 2900.7), ('Russia', 2020, 1700.8), ('Japan', 2020, 1250.9);","WITH TotalEmissions AS (SELECT Country, SUM(CarbonEmissionsInTons) AS TotalEmissions FROM CarbonEmissions GROUP BY Country) SELECT Country, TotalEmissions FROM TotalEmissions ORDER BY TotalEmissions DESC LIMIT 5;",The SQL query first creates a common table expression (CTE) called TotalEmissions which sums up the carbon emissions for each country over the years. It then selects the top 5 countries with the highest total carbon emissions by ordering TotalEmissions in descending order and limiting the result to 5 rows.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report to show the average yearly carbon emission for each country, divided by the country's total land area, and rank the countries based on this ratio from highest to lowest.","CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); CREATE TABLE CountryArea (Country VARCHAR(50), Area DECIMAL); INSERT INTO CarbonEmissions (Country, Year, Emissions) VALUES ('USA', 2020, 5000.0), ('China', 2020, 10000.0), ('India', 2020, 7000.0), ('USA', 2019, 5200.0), ('China', 2019, 9500.0), ('India', 2019, 6800.0); INSERT INTO CountryArea (Country, Area) VALUES ('USA', 9.834), ('China', 9.597), ('India', 3.287);","WITH AvgEmissions AS (SELECT Country, AVG(Emissions) AS AvgEmissions FROM CarbonEmissions GROUP BY Country), EmissionsPerArea AS (SELECT AvgEmissions.Country, AvgEmissions, Area, AvgEmissions/Area AS EmissionsPerArea FROM AvgEmissions JOIN CountryArea ON AvgEmissions.Country = CountryArea.Country) SELECT Country, EmissionsPerArea FROM EmissionsPerArea ORDER BY EmissionsPerArea DESC;","First, a subquery is used to calculate the average yearly carbon emission for each country, which is stored in the AvgEmissions table. Next, another subquery is used to join the AvgEmissions table with the CountryArea table, and to calculate the ratio of average yearly carbon emissions to the total area for each country, which is stored in the EmissionsPerArea table. Finally, the countries are ordered by this ratio in descending order."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the sales data to reflect the end of quarter sales and determine the top 3 selling car models in each region for electric vehicles and hybrid vehicles.,"CREATE TABLE CarSales (SalesID INT PRIMARY KEY, ModelID INT, RegionID INT, SalesQty INT); CREATE TABLE CarModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), CarType VARCHAR(20)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); INSERT INTO CarSales (SalesID, ModelID, RegionID, SalesQty) VALUES (1, 1, 1, 500), (2, 2, 1, 400), (3, 3, 1, 450), (4, 1, 2, 550), (5, 2, 2, 500), (6, 3, 2, 600); INSERT INTO CarModels (ModelID, ModelName, CarType) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Hybrid'), (3, 'Leaf', 'Electric'); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe');","UPDATE CarSales SET SalesQty = SalesQty + 50 WHERE ModelID IN (SELECT ModelID FROM CarModels WHERE CarType IN ('Electric', 'Hybrid')); WITH RankedSales AS (SELECT ModelName, SalesQty, CarType, DENSE_RANK() OVER (PARTITION BY CarType, RegionID ORDER BY SalesQty DESC) AS Rank FROM CarSales INNER JOIN CarModels ON CarSales.ModelID = CarModels.ModelID INNER JOIN Regions ON CarSales.RegionID = Regions.RegionID) SELECT ModelName, SalesQty, CarType FROM RankedSales WHERE Rank <= 3;","The query first updates the sales quantity for all electric and hybrid car models. It then creates a common table expression (CTE) to rank car models based on their sales quantity within each car type and region in descending order. Finally, it selects the top 3 selling car models in each car type and region."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 5 brands from Europe based on their average sales in the last year.,"CREATE TABLE Sales (SaleID INT PRIMARY KEY, BrandID INT, SaleAmount DECIMAL, SaleDate DATE); INSERT INTO Sales (SaleID, BrandID, SaleAmount, SaleDate) VALUES (1, 2, 1500.0, '2020-11-30'), (2, 3, 1200.0, '2020-12-11'), (3, 1, 2000.0, '2021-01-15'), (4, 1, 2500.0, '2021-02-20'), (5, 2, 1800.0, '2021-03-11'); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName, Region) VALUES (1, 'Zara', 'Europe'), (2, 'H&M', 'Europe'), (3, 'Nike', 'America');","WITH SalesData AS (SELECT BrandID, AVG(SaleAmount) AS AvgSaleAmount FROM Sales WHERE SaleDate BETWEEN '2020-03-01' AND '2021-02-28' GROUP BY BrandID) SELECT B.BrandName, S.AvgSaleAmount FROM SalesData S INNER JOIN Brands B ON S.BrandID = B.BrandID WHERE B.Region = 'Europe' ORDER BY S.AvgSaleAmount DESC LIMIT 5;","The query first creates a common table expression (CTE) that calculates the average sales amount for each brand in the last year. Then it joins the CTE with the Brands table to get the brand names and filters for brands from Europe. Finally, it orders the brands by average sales amount in descending order and limits the result to the top 5 brands."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Create a table to store fashion item sales data, including item ID, item type, region, and the number of sales. Then, create a view that unpivots this data to show each region as a separate row for each item. After that, update the sales data for item ID 105 in the 'Europe' region to 500. Finally, delete the sales data for item ID 203 in the 'Asia' region.","CREATE TABLE ItemSales (ItemID INT PRIMARY KEY, ItemType VARCHAR(50), NorthAmericaSales INT, EuropeSales INT, AsiaSales INT); INSERT INTO ItemSales (ItemID, ItemType, NorthAmericaSales, EuropeSales, AsiaSales) VALUES (101, 'Dress', 300, 250, 200), (102, 'Skirt', 150, 200, 180), (103, 'Shirt', 250, 300, 220), (104, 'Pants', 200, 180, 210), (105, 'Blouse', 220, 250, 240); CREATE VIEW UnpivotedSales AS SELECT ItemID, ItemType, 'NorthAmerica' AS Region, NorthAmericaSales AS Sales FROM ItemSales UNION ALL SELECT ItemID, ItemType, 'Europe', EuropeSales FROM ItemSales UNION ALL SELECT ItemID, ItemType, 'Asia', AsiaSales FROM ItemSales;",UPDATE UnpivotedSales SET Sales = 500 WHERE ItemID = 105 AND Region = 'Europe'; DELETE FROM UnpivotedSales WHERE ItemID = 203 AND Region = 'Asia';,"The SQL commands firstly create a table and insert some values into it. Then, they create a view which unpivots the sales data to show each region as a separate row for each item. Following that, they update the sales data for a specific item in a particular region. Finally, they delete the sales data for another specific item in a different region."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a report that shows the top 3 crops with the highest average yield per year in the last 5 years. Include only crops that have been grown in more than 1000 acres. This report should be generated only after ensuring all crop yield data for the year has been entered and accounted for.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, AreaCultivated DECIMAL, Yield DECIMAL); INSERT INTO CropYield (CropID, CropName, Year, AreaCultivated, Yield) VALUES (1, 'Wheat', 2021, 3000, 4000), (2, 'Corn', 2021, 2000, 3500), (3, 'Soybean', 2021, 1500, 3200), (4, 'Rice', 2021, 1000, 2800);","BEGIN TRANSACTION; WITH TempTable AS (SELECT CropName, AVG(Yield) as AvgYield FROM CropYield WHERE Year >= (SELECT MAX(Year) FROM CropYield) - 5 AND AreaCultivated > 1000 GROUP BY CropName) SELECT CropName, AvgYield FROM TempTable ORDER BY AvgYield DESC LIMIT 3; COMMIT;","The query begins a transaction to ensure data accuracy. It creates a temporary table that calculates the average yield for each crop over the last 5 years, including only those crops that have been grown in more than 1000 acres. It then selects the top 3 crops with the highest average yield from this temporary table. The transaction is committed only after all operations are successfully executed."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Find the top 3 selling cars in each region for the year 2020 and update the 'SalesPerformance' table with this data.,"CREATE TABLE VehicleSales (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT, Year INT); INSERT INTO VehicleSales (VehicleID, ModelName, Region, Sales, Year) VALUES (1, 'Model S', 'North America', 5000, 2020), (2, 'Model 3', 'Europe', 6000, 2020), (3, 'Leaf', 'Asia', 5500, 2020), (4, 'Bolt', 'North America', 4500, 2020), (5, 'Prius', 'Europe', 7000, 2020); CREATE TABLE SalesPerformance (PerformanceID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Rank INT);","WITH RankedSales AS (SELECT ModelName, Region, Sales, RANK() OVER (PARTITION BY Region ORDER BY Sales DESC) AS Rank FROM VehicleSales WHERE Year = 2020) INSERT INTO SalesPerformance (PerformanceID, ModelName, Region, Rank) SELECT NEWID(), ModelName, Region, Rank FROM RankedSales WHERE Rank <= 3;","The SQL query starts by creating a common table expression (CTE) named 'RankedSales' that ranks vehicle sales for each region in the year 2020 in descending order of sales. The RANK() function is used to achieve this, partitioning the data by region. Then, the query inserts into the 'SalesPerformance' table, the top 3 selling cars in each region from the 'RankedSales' list. The NEWID() function is used to generate a unique identifier for each row in the 'SalesPerformance' table."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Insert the data of the new player into the Athletes table, update his scoring history in the ScoringHistory table, and show the top 10 highest scoring players in the current season excluding the new player.","CREATE TABLE Athletes (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamName VARCHAR(50), Age INT, Position VARCHAR(20)); CREATE TABLE ScoringHistory (PlayerID INT, Season YEAR, Score INT); INSERT INTO Athletes (PlayerID, PlayerName, TeamName, Age, Position) VALUES (1, 'Player 1', 'Team 1', 25, 'Forward'), (2, 'Player 2', 'Team 2', 28, 'Defender'), (3, 'Player 3', 'Team 3', 22, 'Midfielder'), (4, 'Player 4', 'Team 4', 24, 'Goalkeeper'), (5, 'Player 5', 'Team 5', 29, 'Forward'); INSERT INTO ScoringHistory (PlayerID, Season, Score) VALUES (1, '2021', 20), (2, '2021', 22), (3, '2021', 15), (4, '2021', 2), (5, '2021', 18);","INSERT INTO Athletes (PlayerID, PlayerName, TeamName, Age, Position) VALUES (6, 'New Player', 'Team 6', 21, 'Midfielder'); INSERT INTO ScoringHistory (PlayerID, Season, Score) VALUES (6, '2021', 12); WITH TopScorers AS (SELECT PlayerID, Score, DENSE_RANK() OVER (ORDER BY Score DESC) AS Rank FROM ScoringHistory WHERE Season = 2021 AND PlayerID != 6) SELECT PlayerID, Score FROM TopScorers WHERE Rank <= 10;","The first part of the query inserts the data of the new player into the Athletes table. The second part updates the ScoringHistory table with the scoring history of the new player. The third part of the query creates a common table expression (CTE) called TopScorers that ranks the scores of the players for the current season in descending order, excluding the new player. Finally, the query selects the top 10 highest scoring players by limiting the results to where the rank is less than or equal to 10."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store customer feedback and hotel ratings, then display the top 5 hotels based on average customer rating in each region.","CREATE TABLE CustomerFeedback (FeedbackID INT PRIMARY KEY, CustomerID INT, HotelID INT, FeedbackText VARCHAR(255), Rating DECIMAL); INSERT INTO CustomerFeedback (FeedbackID, CustomerID, HotelID, FeedbackText, Rating) VALUES (1, 101, 201, 'Great service', 4.5), (2, 102, 202, 'Excellent location', 5.0), (3, 103, 201, 'Needs improvement', 3.0), (4, 104, 203, 'Fantastic food', 4.0), (5, 105, 204, 'Very comfortable', 4.5); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, Region) VALUES (201, 'The Grand', 'North America'), (202, 'The Comfort Inn', 'Europe'), (203, 'The Luxury', 'Asia'), (204, 'The Retreat', 'Africa'), (205, 'The Palace', 'Australia');","WITH AvgRatings AS (SELECT H.HotelName, H.Region, AVG(CF.Rating) AS AverageRating FROM Hotels H JOIN CustomerFeedback CF ON H.HotelID = CF.HotelID GROUP BY H.HotelName, H.Region) , RankedHotels AS (SELECT HotelName, Region, AverageRating, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY AverageRating DESC) AS Rank FROM AvgRatings) SELECT HotelName, Region, AverageRating FROM RankedHotels WHERE Rank <= 5;","The query first creates a Common Table Expression (CTE) named AvgRatings that calculates the average customer rating for each hotel in each region. Then it creates another CTE named RankedHotels that ranks these hotels within each region, based on their average customer rating in descending order. Finally, the query selects the top 5 hotels in each region, as per their ranking in the RankedHotels CTE."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show me the top 5 hotels that have the highest average overall satisfaction score from guests who have made at least three visits. Also, display the total number of these guests per hotel.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50), Country VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, City, Country) VALUES (1, 'Hotel Majestic', 'Paris', 'France'), (2, 'The Ritz', 'London', 'UK'), (3, 'The Plaza', 'New York', 'USA'), (4, 'Hotel Sacher', 'Vienna', 'Austria'), (5, 'Beverly Hills Hotel', 'Los Angeles', 'USA'); CREATE TABLE Guests (GuestID INT PRIMARY KEY, GuestName VARCHAR(50), VisitCount INT); INSERT INTO Guests (GuestID, GuestName, VisitCount) VALUES (1, 'John Doe', 5), (2, 'Jane Smith', 3), (3, 'Emma Brown', 4), (4, 'Jack White', 3), (5, 'Sophie Black', 6); CREATE TABLE Satisfaction (SatisfactionID INT PRIMARY KEY, HotelID INT, GuestID INT, Score DECIMAL); INSERT INTO Satisfaction (SatisfactionID, HotelID, GuestID, Score) VALUES (1, 1, 1, 8.5), (2, 2, 2, 8.0), (3, 3, 3, 9.0), (4, 4, 4, 8.7), (5, 5, 5, 9.3);","WITH FrequentGuests AS (SELECT GuestID FROM Guests WHERE VisitCount >= 3), AvgScores AS (SELECT HotelID, AVG(Score) AS AvgScore FROM Satisfaction WHERE GuestID IN (SELECT GuestID FROM FrequentGuests) GROUP BY HotelID), RankedHotels AS (SELECT Hotels.HotelName, AvgScores.AvgScore, COUNT(FrequentGuests.GuestID) AS FrequentGuestCount, DENSE_RANK() OVER (ORDER BY AvgScores.AvgScore DESC) AS Rank FROM Hotels JOIN AvgScores ON Hotels.HotelID = AvgScores.HotelID JOIN FrequentGuests ON FrequentGuests.GuestID = Satisfaction.GuestID GROUP BY Hotels.HotelName, AvgScores.AvgScore) SELECT HotelName, AvgScore, FrequentGuestCount FROM RankedHotels WHERE Rank <= 5;","The query firstly isolates the guests who have visited at least three times. Then it calculates the average satisfaction scores for each hotel based on these frequent guests. It ranks the hotels based on these average scores in descending order and also calculates the number of frequent guests per hotel. Finally, it displays the top 5 hotels with their average scores and the number of frequent guests."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate and display the total revenue generated from ticket sales for each sports event in the last month, but rollback the transaction if there was an error.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE); CREATE TABLE TicketSales (TicketID INT PRIMARY KEY, EventID INT, TicketPrice DECIMAL, SaleDate DATE);","BEGIN TRANSACTION; DECLARE @err INT; BEGIN TRY INSERT INTO SportsEvents (EventID, EventName, EventDate) VALUES (1, 'Basketball Match', '2021-08-15'), (2, 'Soccer Match', '2021-08-10'); INSERT INTO TicketSales (TicketID, EventID, TicketPrice, SaleDate) VALUES (1, 1, 50, '2021-08-15'), (2, 2, 70, '2021-08-10'); WITH LastMonthSales AS (SELECT EventID, SUM(TicketPrice) AS TotalRevenue FROM TicketSales WHERE SaleDate >= DATEADD(month, -1, GETDATE()) GROUP BY EventID) SELECT SE.EventName, LMS.TotalRevenue FROM LastMonthSales LMS JOIN SportsEvents SE ON LMS.EventID = SE.EventID; SET @err = @@ERROR; IF @err <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION; END TRY BEGIN CATCH IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION; PRINT 'Error occurred! Transaction rolled back.'; END CATCH","The SQL query begins a transaction and declares an error variable. Within a TRY block, it inserts sample data into SportsEvents and TicketSales tables. Then it creates a common table expression (CTE) LastMonthSales to calculate the total revenue from sales in the last month for each event. If any error occurs during these operations, the error variable is set and the transaction is rolled back. The CATCH block also checks if there's an active transaction when an error occurs, and if so, rolls it back, printing an error message."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the top 5 crops with the highest yield per acre from each region, considering only crops that are part of the global food security initiative.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), YieldPerAcre DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, YieldPerAcre) VALUES (1, 'Wheat', 'North America', 70.5), (2, 'Rice', 'Asia', 80.0), (3, 'Maize', 'Africa', 60.0), (4, 'Soybean', 'South America', 50.0), (5, 'Barley', 'Europe', 65.0); CREATE TABLE FoodSecurityInitiative (InitiativeID INT PRIMARY KEY, CropID INT, InitiativeName VARCHAR(50)); INSERT INTO FoodSecurityInitiative (InitiativeID, CropID, InitiativeName) VALUES (1, 1, 'Feed the Future'), (2, 2, 'Food Fortification Initiative'), (3, 3, 'Global Agriculture and Food Security Program'), (4, 4, 'World Food Programme'), (5, 5, 'Alliance for a Green Revolution in Africa');","WITH RankedCrops AS (SELECT CY.CropName, CY.Region, CY.YieldPerAcre, DENSE_RANK() OVER (PARTITION BY CY.Region ORDER BY CY.YieldPerAcre DESC) AS Rank FROM CropYields CY INNER JOIN FoodSecurityInitiative FSI ON CY.CropID = FSI.CropID) SELECT RC.CropName, RC.Region, RC.YieldPerAcre FROM RankedCrops RC WHERE RC.Rank <= 5;",The query creates a common table expression (CTE) to rank crops based on their yield per acre in each region. The ranking is done in descending order of yield per acre. The query then filters the ranked crops to only select the top 5 from each region. The INNER JOIN operation ensures that only crops which are part of the global food security initiative are considered.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show the top 5 most popular destinations for the year 2020, and the average ratings for hotels in those destinations. Also, find the average expenditure of customers in these destinations.","CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Year INT); INSERT INTO Destinations (DestinationID, DestinationName, Year) VALUES (1, 'Paris', 2020), (2, 'Tokyo', 2020), (3, 'London', 2020),(4, 'New York', 2020), (5, 'Dubai', 2020); CREATE TABLE HotelRatings (HotelID INT PRIMARY KEY, DestinationID INT, AvgRating DECIMAL); INSERT INTO HotelRatings (HotelID, DestinationID, AvgRating) VALUES (1, 1, 4.7), (2, 2, 4.5), (3, 3, 4.3), (4, 4, 4.8), (5, 5, 4.6); CREATE TABLE CustomerExpenditures (ExpenditureID INT PRIMARY KEY, DestinationID INT, AvgExpenditure DECIMAL); INSERT INTO CustomerExpenditures (ExpenditureID, DestinationID, AvgExpenditure) VALUES (1, 1, 5000), (2, 2, 4000), (3, 3, 4500), (4, 4, 5500), (5, 5, 6000);","WITH CombinedData AS (SELECT d.DestinationName, h.AvgRating, c.AvgExpenditure FROM Destinations d INNER JOIN HotelRatings h ON d.DestinationID = h.DestinationID INNER JOIN CustomerExpenditures c ON d.DestinationID = c.DestinationID WHERE d.Year = 2020) SELECT DestinationName, AvgRating, AvgExpenditure FROM CombinedData ORDER BY AvgExpenditure DESC LIMIT 5;","The query first joins the Destinations, HotelRatings, and CustomerExpenditures tables on the DestinationID to consolidate the data. It filters for the year 2020. The combined data, which includes destination name, average hotel rating, and average customer expenditure, is then sorted in descending order based on the average customer expenditure. Finally, it returns the top 5 records."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the yield data for different crops per region. Include columns for the crop name, region, the total hectares planted, and the total yield. After that, find the top 5 crops with the highest yield per hectare in the 'North America' region.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(100), Region VARCHAR(100), TotalHectaresPlanted DECIMAL, TotalYield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, TotalHectaresPlanted, TotalYield) VALUES (1, 'Wheat', 'North America', 10000, 8000), (2, 'Corn', 'North America', 15000, 12000), (3, 'Soybeans', 'North America', 12000, 9000), (4, 'Rice', 'North America', 8000, 6000), (5, 'Cotton', 'North America', 7000, 5000);","WITH YieldPerHectare AS (SELECT CropName, TotalYield / TotalHectaresPlanted as YieldPerHectare FROM CropYield WHERE Region = 'North America') SELECT CropName, YieldPerHectare FROM YieldPerHectare ORDER BY YieldPerHectare DESC LIMIT 5;","The query first creates a common table expression (CTE) that calculates the yield per hectare for each crop in the 'North America' region. It then selects the crop name and yield per hectare from the CTE and orders the results by yield per hectare in descending order, limiting the output to the top 5 crops."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 most used programming languages in the AI industry and the top 5 most used programming languages in the Web development industry and find out which languages are common to both.,"CREATE TABLE AIIndustry (ProgLangID INT PRIMARY KEY, ProgLangName VARCHAR(50), UsageCount INT); INSERT INTO AIIndustry (ProgLangID, ProgLangName, UsageCount) VALUES (1, 'Python', 5850), (2, 'Java', 3780), (3, 'R', 3570), (4, 'C++', 3125), (5, 'JavaScript', 2890), (6, 'SQL', 2675); CREATE TABLE WebDevIndustry (ProgLangID INT PRIMARY KEY, ProgLangName VARCHAR(50), UsageCount INT); INSERT INTO WebDevIndustry (ProgLangID, ProgLangName, UsageCount) VALUES (1, 'JavaScript', 6275), (2, 'HTML/CSS', 5890), (3, 'SQL', 5565), (4, 'Python', 3825), (5, 'Java', 3610), (6, 'PHP', 3455);","WITH AI_Top5 AS (SELECT ProgLangName FROM AIIndustry ORDER BY UsageCount DESC LIMIT 5), WebDev_Top5 AS (SELECT ProgLangName FROM WebDevIndustry ORDER BY UsageCount DESC LIMIT 5) SELECT ProgLangName FROM AI_Top5 INTERSECT SELECT ProgLangName FROM WebDev_Top5;",The query first creates two common table expressions (CTEs) to get the top 5 most used programming languages in the AI industry and the Web development industry. It then uses the INTERSECT operation to find the common languages between the two CTEs.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Update the treatment protocol for patients with a specific condition based on the latest drug efficacy studies and side effects, and then find the top 3 most common side effects for the updated protocol.","CREATE TABLE PatientRecords (PatientID INT PRIMARY KEY, Name VARCHAR(50), Condition VARCHAR(50), TreatmentProtocol VARCHAR(50)); CREATE TABLE DrugStudies (StudyID INT PRIMARY KEY, Condition VARCHAR(50), TreatmentProtocol VARCHAR(50), Efficacy DECIMAL, SideEffects VARCHAR(100)); INSERT INTO PatientRecords (PatientID, Name, Condition, TreatmentProtocol) VALUES (1, 'John Doe', 'Condition A', 'Protocol 1'), (2, 'Jane Doe', 'Condition A', 'Protocol 2'), (3, 'James Doe', 'Condition B', 'Protocol 1'); INSERT INTO DrugStudies (StudyID, Condition, TreatmentProtocol, Efficacy, SideEffects) VALUES (1, 'Condition A', 'Protocol 3', 90.0, 'Nausea, Headache, Dizziness'), (2, 'Condition B', 'Protocol 4', 80.0, 'Fatigue, Dizziness, Insomnia');","UPDATE PatientRecords SET TreatmentProtocol = (SELECT TreatmentProtocol FROM DrugStudies WHERE Condition = 'Condition A' ORDER BY Efficacy DESC LIMIT 1) WHERE Condition = 'Condition A'; WITH UpdatedProtocol AS (SELECT SideEffects FROM DrugStudies WHERE TreatmentProtocol = (SELECT TreatmentProtocol FROM PatientRecords WHERE Condition = 'Condition A' LIMIT 1)), SideEffects AS (SELECT UNNEST(string_to_array(SideEffects, ', ')) AS SideEffect FROM UpdatedProtocol) SELECT SideEffect, COUNT(*) AS Frequency FROM SideEffects GROUP BY SideEffect ORDER BY Frequency DESC LIMIT 3;","The first part of the query updates the treatment protocol for patients with a specific condition based on the most efficacious treatment found in the drug studies. The second part of the query creates a common table expression (CTE) to extract the side effects of the updated treatment protocol, and then uses the UNNEST function to split the side effects into individual rows. It then counts the frequency of each side effect and selects the top 3 most common ones."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store the demographics of the population by state, such as population count, median age, and median income, then display the top 5 states with the highest median income.","CREATE TABLE StateDemographics (StateID INT PRIMARY KEY, StateName VARCHAR(50), PopulationCount INT, MedianAge DECIMAL, MedianIncome DECIMAL); INSERT INTO StateDemographics (StateID, StateName, PopulationCount, MedianAge, MedianIncome) VALUES (1, 'California', 39538223, 36.8, 75235), (2, 'Texas', 29145505, 35.0, 60257), (3, 'Florida', 21538187, 42.4, 57047), (4, 'New York', 20215751, 39.2, 68486), (5, 'Pennsylvania', 13011844, 40.8, 61747);","WITH RankedStates AS (SELECT StateName, MedianIncome, DENSE_RANK() OVER (ORDER BY MedianIncome DESC) AS Rank FROM StateDemographics) SELECT StateName, MedianIncome FROM RankedStates WHERE Rank <= 5;",The SQL query creates a common table expression (CTE) to rank states based on their median income in descending order. It then selects the top 5 states with the highest median income using the DENSE_RANK function.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a database to store information about government spending on social welfare programs across different states and then retrieve the states where spending on health and education programs is above the national average.,"CREATE TABLE SocialWelfareSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), HealthSpending DECIMAL, EducationSpending DECIMAL); INSERT INTO SocialWelfareSpending (StateID, StateName, HealthSpending, EducationSpending) VALUES (1, 'California', 120.5, 118.0), (2, 'Texas', 95.0, 110.0), (3, 'Florida', 115.7, 105.0), (4, 'New York', 130.0, 120.0), (5, 'Illinois', 110.0, 115.0);",SELECT StateName FROM SocialWelfareSpending WHERE HealthSpending > (SELECT AVG(HealthSpending) FROM SocialWelfareSpending) AND EducationSpending > (SELECT AVG(EducationSpending) FROM SocialWelfareSpending);,The query first calculates the average national spending on health and education by using the AVG function. Then it compares these averages with each state's spending on health and education and retrieves the names of the states where both health and education spending are above the national average.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that documents the sales of electric vehicle models by global region, and then list the top 5 selling models in Asia.","CREATE TABLE EVSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), UnitsSold INT); INSERT INTO EVSales (SaleID, ModelName, Region, UnitsSold) VALUES (1, 'Tesla Model 3', 'North America', 50000), (2, 'Nissan Leaf', 'Europe', 45000), (3, 'BMW i3', 'Asia', 35000), (4, 'Chevrolet Bolt', 'North America', 40000), (5, 'Renault Zoe', 'Europe', 55000), (6, 'Tesla Model S', 'Asia', 60000);","WITH RankedModels AS (SELECT ModelName, UnitsSold, RANK() OVER (ORDER BY UnitsSold DESC) AS Rank FROM EVSales WHERE Region = 'Asia') SELECT ModelName, UnitsSold FROM RankedModels WHERE Rank <= 5;","The SQL query first constructs a common table expression (CTE) named RankedModels. Within this CTE, it ranks the electric vehicle models by units sold in descending order, specifically for the 'Asia' region. It then selects the top 5 selling models from the RankedModels CTE."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Can you retrieve the top 5 AI startups based on the amount of funding received for each AI technology type spread across various sectors?,"CREATE TABLE AIStartups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), TechnologyID INT, SectorID INT, FundingAmount DECIMAL); CREATE TABLE AITechnologies (TechnologyID INT PRIMARY KEY, TechnologyType VARCHAR(50)); CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorType VARCHAR(50)); INSERT INTO AIStartups (StartupID, StartupName, TechnologyID, SectorID, FundingAmount) VALUES (1, 'Startup A', 1, 1, 1500000), (2, 'Startup B', 2, 2, 2000000), (3, 'Startup C', 3, 1, 1000000), (4, 'Startup D', 1, 3, 1800000), (5, 'Startup E', 3, 2, 2200000); INSERT INTO AITechnologies (TechnologyID, TechnologyType) VALUES (1, 'Machine Learning'), (2, 'Natural Language Processing'), (3, 'Computer Vision'); INSERT INTO Sectors (SectorID, SectorType) VALUES (1, 'Healthcare'), (2, 'Finance'), (3, 'Retail');","WITH RankedStartups AS (SELECT S.StartupName, T.TechnologyType, SC.SectorType, S.FundingAmount, DENSE_RANK() OVER (PARTITION BY T.TechnologyType ORDER BY S.FundingAmount DESC) AS Rank FROM AIStartups S INNER JOIN AITechnologies T ON S.TechnologyID = T.TechnologyID INNER JOIN Sectors SC ON S.SectorID = SC.SectorID) SELECT StartupName, TechnologyType, SectorType, FundingAmount FROM RankedStartups WHERE Rank <= 5;","The query first joins the tables AIStartups, AITechnologies, and Sectors using inner joins on technology and sector IDs. It then creates a common table expression (CTE) and uses the DENSE_RANK function to rank AI startups within each AI technology type based on their funding amount in descending order. Finally, it selects the top 5 startups for each technology type."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 3 regions with the highest average wheat yield in the last 5 years and commit the transaction.,"CREATE TABLE WheatYield (Region VARCHAR(50), Year INT, AverageYield DECIMAL); INSERT INTO WheatYield (Region, Year, AverageYield) VALUES ('North America', 2018, 45.3), ('Europe', 2018, 50.7), ('Asia', 2018, 42.0), ('North America', 2019, 46.8), ('Europe', 2019, 52.1), ('Asia', 2019, 43.2), ('North America', 2020, 48.6), ('Europe', 2020, 54.3), ('Asia', 2020, 45.0), ('North America', 2021, 49.7), ('Europe', 2021, 55.6), ('Asia', 2021, 46.5), ('North America', 2022, 51.2), ('Europe', 2022, 57.2), ('Asia', 2022, 48.1);","BEGIN TRANSACTION; WITH RecentYield AS (SELECT Region, AVG(AverageYield) AS AvgYield FROM WheatYield WHERE Year > (SELECT MAX(Year) - 5 FROM WheatYield) GROUP BY Region) SELECT Region, AvgYield FROM RecentYield ORDER BY AvgYield DESC LIMIT 3; COMMIT;","The query starts a transaction and creates a common table expression (CTE) named 'RecentYield' to calculate the average wheat yield for each region over the last five years. It then selects the top 3 regions with the highest average yield, ordered in decreasing order. Finally, it commits the transaction to make the changes permanent."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the average age of patients who have experienced side effects from the drug 'Prozac'.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), MedicalHistory TEXT); CREATE TABLE DrugEfficacy (RecordID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50), SideEffects BOOLEAN); INSERT INTO PatientDemographics (PatientID, Age, Gender, MedicalHistory) VALUES (1, 45, 'Male', 'Diabetes'), (2, 50, 'Female', 'Hypertension'), (3, 60, 'Male', 'Diabetes'), (4, 55, 'Female', 'Diabetes'), (5, 65, 'Male', 'Hypertension'); INSERT INTO DrugEfficacy (RecordID, PatientID, DrugName, SideEffects) VALUES (1, 1, 'Prozac', TRUE), (2, 2, 'Prozac', FALSE), (3, 3, 'Prozac', TRUE), (4, 4, 'Prozac', TRUE), (5, 5, 'Prozac', FALSE);",SELECT AVG(PatientDemographics.Age) FROM PatientDemographics JOIN DrugEfficacy ON PatientDemographics.PatientID = DrugEfficacy.PatientID WHERE DrugName = 'Prozac' AND SideEffects = TRUE;,"This query first joins the PatientDemographics and DrugEfficacy tables on the PatientID column. It then filters the joined table to only include rows where the DrugName is 'Prozac' and where SideEffects is TRUE. Finally, it calculates the average age of the patients in this filtered list."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Show the top 3 vehicle models that had the most sales in Europe in 2020.,"CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Year INT, Sales INT); INSERT INTO VehicleSales (ModelID, ModelName, Region, Year, Sales) VALUES (1, 'Model S', 'Europe', 2020, 55000), (2, 'Model 3', 'Europe', 2020, 60000), (3, 'Leaf', 'Europe', 2020, 50000), (4, 'Bolt', 'Europe', 2020, 45000), (5, 'Prius', 'Europe', 2020, 40000);","WITH RankedModels AS (SELECT ModelName, Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS Rank FROM VehicleSales WHERE Region = 'Europe' AND Year = 2020) SELECT ModelName, Sales FROM RankedModels WHERE Rank <= 3;","The SQL query first creates a common table expression (CTE) named RankedModels that ranks vehicle models based on their sales in descending order for the region 'Europe' and for the year 2020, using the DENSE_RANK function. It then selects the top 3 vehicle models with the highest sales from the RankedModels CTE."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert the average yearly rainfalls for different regions into a table, and then display the regions with the top 3 highest average rainfalls.","CREATE TABLE Rainfall (RegionID INT PRIMARY KEY, Region VARCHAR(50), AvgRainfall DECIMAL); INSERT INTO Rainfall (RegionID, Region, AvgRainfall) VALUES (1, 'South America', 2500), (2, 'Asia', 2300), (3, 'Africa', 2100), (4, 'Europe', 800), (5, 'North America', 700);","WITH RankedRegions AS (SELECT Region, AvgRainfall, DENSE_RANK() OVER (ORDER BY AvgRainfall DESC) AS Rank FROM Rainfall) SELECT Region, AvgRainfall FROM RankedRegions WHERE Rank <= 3;",The SQL query ranks the regions based on their average rainfall in descending order using a common table expression (CTE). It then selects the top 3 regions with the highest average rainfalls using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,data retrieval: basic data fetching queries,Can you determine the top 5 soccer players with the best goal to game ratio in the last season?,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, TeamID INT, PlayerID INT, Goals INT, Date DATE); INSERT INTO Players (PlayerID, PlayerName, TeamID) VALUES (1, 'Messi', 1), (2, 'Ronaldo', 2), (3, 'Neymar', 3), (4, 'Mbappe', 4), (5, 'Lewandowski', 5); INSERT INTO Teams (TeamID, TeamName) VALUES (1, 'Barcelona'), (2, 'Juventus'), (3, 'PSG'), (4, 'Liverpool'), (5, 'Bayern Munich'); INSERT INTO Games (GameID, TeamID, PlayerID, Goals, Date) VALUES (1, 1, 1, 2, '2020-01-01'), (2, 2, 2, 1, '2020-01-02'), (3, 3, 3, 3, '2020-01-03'), (4, 4, 4, 1, '2020-01-04'), (5, 5, 5, 4, '2020-01-05');","WITH PlayerGoals AS (SELECT PlayerID, COUNT(GameID) AS Games, SUM(Goals) AS TotalGoals FROM Games GROUP BY PlayerID), GoalRatio AS (SELECT Players.PlayerName, PlayerGoals.TotalGoals, PlayerGoals.Games, PlayerGoals.TotalGoals / PlayerGoals.Games AS Ratio FROM PlayerGoals INNER JOIN Players ON PlayerGoals.PlayerID = Players.PlayerID) SELECT PlayerName, Ratio FROM GoalRatio ORDER BY Ratio DESC LIMIT 5;","The SQL query first creates a common table expression (CTE) that counts the total number of games and the total number of goals for each player. A second CTE is then created that calculates the goal to game ratio for each player by dividing the total number of goals by the total number of games. The final query selects the player's name and their goal to game ratio, sorts the results by the ratio in descending order, and limits the results to the top 5."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Create a table to store customer feedback ratings for various hotels across different cities and then provide the average rating for each hotel.,"CREATE TABLE HotelFeedback (FeedbackID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50), CustomerRating DECIMAL); INSERT INTO HotelFeedback (FeedbackID, HotelName, City, CustomerRating) VALUES (1, 'Marriot', 'New York', 4.3), (2, 'Hilton', 'Los Angeles', 4.2), (3, 'Hyatt', 'Chicago', 4.4), (4, 'Hilton', 'New York', 4.1), (5, 'Marriot', 'Chicago', 4.5);","WITH AverageRatings AS (SELECT HotelName, AVG(CustomerRating) AS AvgRating FROM HotelFeedback GROUP BY HotelName) SELECT HotelName, AvgRating FROM AverageRatings;","The SQL query first creates a temporary table (AverageRatings) that groups the feedback by hotel name and calculates the average customer rating for each hotel. Then, it selects the hotel name and average rating from the temporary table."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert data about a new basketball match into the database, then retrieve total revenue generated from ticket sales and merchandise sales from that match.","CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, Team1 VARCHAR(50), Team2 VARCHAR(50)); CREATE TABLE Tickets (TicketID INT PRIMARY KEY, MatchID INT, Price DECIMAL); CREATE TABLE Merchandise (MerchandiseID INT PRIMARY KEY, MatchID INT, Item VARCHAR(50), Price DECIMAL); INSERT INTO Matches (MatchID, MatchDate, Team1, Team2) VALUES (1, '2022-11-15', 'Lakers', 'Bulls'); INSERT INTO Tickets (TicketID, MatchID, Price) VALUES (1, 1, 100.0), (2, 1, 100.0), (3, 1, 80.0); INSERT INTO Merchandise (MerchandiseID, MatchID, Item, Price) VALUES (1, 1, 'T-Shirt', 25.0), (2, 1, 'Cap', 15.0);","INSERT INTO Matches (MatchID, MatchDate, Team1, Team2) VALUES (2, '2022-12-01', 'Knicks', 'Raptors'); INSERT INTO Tickets (TicketID, MatchID, Price) VALUES (4, 2, 120.0), (5, 2, 110.0), (6, 2, 100.0); INSERT INTO Merchandise (MerchandiseID, MatchID, Item, Price) VALUES (3, 2, 'Jersey', 90.0), (4, 2, 'Sneakers', 150.0); SELECT Matches.MatchID, Matches.Team1, Matches.Team2, SUM(Tickets.Price) AS TotalTicketRevenue, SUM(Merchandise.Price) AS TotalMerchandiseRevenue FROM Matches INNER JOIN Tickets ON Matches.MatchID = Tickets.MatchID INNER JOIN Merchandise ON Matches.MatchID = Merchandise.MatchID WHERE Matches.MatchID = 2;","The query first inserts data about a new match into the Matches table. It then inserts data about tickets sold for this match into the Tickets table and merchandise sold for this match into the Merchandise table. Finally, it retrieves and sums up the revenue from ticket and merchandise sales for this match by performing inner joins between the Matches, Tickets, and Merchandise tables based on the MatchID."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table for crop yield data and find the intersection of the top 5 crops with the highest yield in Asia and Europe.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgYield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, AvgYield) VALUES (1, 'Rice', 'Asia', 120.5), (2, 'Wheat', 'Europe', 118.0), (3, 'Corn', 'Asia', 110.0), (4, 'Barley', 'Europe', 115.7), (5, 'Soybean', 'Asia', 95.0),(6, 'Rice', 'Europe', 85), (7, 'Wheat', 'Asia', 130), (8, 'Corn', 'Europe', 90), (9, 'Barley', 'Asia', 105), (10, 'Soybean', 'Europe', 75);","WITH AsiaTopCrops AS (SELECT CropName, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM CropYield WHERE Region = 'Asia'), EuropeTopCrops AS (SELECT CropName, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM CropYield WHERE Region = 'Europe') SELECT AsiaTopCrops.CropName, AsiaTopCrops.AvgYield FROM AsiaTopCrops INTERSECT SELECT EuropeTopCrops.CropName, EuropeTopCrops.AvgYield FROM EuropeTopCrops WHERE AsiaTopCrops.Rank <= 5 AND EuropeTopCrops.Rank <= 5;","This query creates two common table expressions (CTEs) for the top 5 crops with the highest yield in Asia and Europe. It then finds the intersection of these crops, meaning it returns only the crops that appear in the top 5 in both regions, using the INTERSECT operation."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Show me the top 5 tourist destinations in Europe and Asia based on the total number of visitors.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Region VARCHAR(50), TotalVisitors INT); INSERT INTO Destinations (DestinationID, DestinationName, Region, TotalVisitors) VALUES (1, 'Paris', 'Europe', 2000000), (2, 'Rome', 'Europe', 1850000), (3, 'Barcelona', 'Europe', 1700000), (4, 'Berlin', 'Europe', 1650000), (5, 'London', 'Europe', 1600000), (6, 'Tokyo', 'Asia', 2500000), (7, 'Bangkok', 'Asia', 2300000), (8, 'Singapore', 'Asia', 2200000), (9, 'Hong Kong', 'Asia', 2100000), (10, 'Seoul', 'Asia', 2000000);","WITH EuropeDestinations AS (SELECT DestinationName, TotalVisitors, DENSE_RANK() OVER (ORDER BY TotalVisitors DESC) AS Rank FROM Destinations WHERE Region = 'Europe'), AsiaDestinations AS (SELECT DestinationName, TotalVisitors, DENSE_RANK() OVER (ORDER BY TotalVisitors DESC) AS Rank FROM Destinations WHERE Region = 'Asia') SELECT DestinationName, TotalVisitors FROM EuropeDestinations WHERE Rank <= 5 UNION ALL SELECT DestinationName, TotalVisitors FROM AsiaDestinations WHERE Rank <= 5;",The query first creates two common table expressions (CTEs) to rank tourist destinations in Europe and Asia based on the total number of visitors in descending order. It then selects the top 5 destinations from each region using the DENSE_RANK function. The UNION ALL operator is used to combine the results from both regions.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Add a new record for a movie with title 'New Horizon', released in 2020, with a genre of 'Sci-Fi', and an audience rating of 4.5. Then, retrieve all Sci-Fi movies released after 2010 sorted by audience rating.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(50), ReleaseYear INT, Genre VARCHAR(20), AudienceRating DECIMAL); INSERT INTO Movies (MovieID, Title, ReleaseYear, Genre, AudienceRating) VALUES (1, 'Star Wars', 1977, 'Sci-Fi', 4.7), (2, 'Titanic', 1997, 'Drama', 4.5), (3, 'Avatar', 2009, 'Sci-Fi', 4.2);","INSERT INTO Movies (MovieID, Title, ReleaseYear, Genre, AudienceRating) VALUES ((SELECT MAX(MovieID) + 1 FROM Movies), 'New Horizon', 2020, 'Sci-Fi', 4.5); SELECT * FROM Movies WHERE Genre = 'Sci-Fi' AND ReleaseYear > 2010 ORDER BY AudienceRating DESC;","The SQL query first adds a new record to the 'Movies' table for the movie 'New Horizon', assigning it a new MovieID that is one greater than the current maximum MovieID in the table. It then retrieves all records from the 'Movies' table where the genre is 'Sci-Fi' and the release year is after 2010, and sorts these records in descending order of audience rating."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store data about video content, including its title, creation date, number of views, and revenue generated. Then, create a second table to store data about artists, including their name, the content they've created, and their total revenue. Finally, write a query to find the top 5 artists based on the total revenue generated from their content.","CREATE TABLE VideoContent (ContentID INT PRIMARY KEY, Title VARCHAR(50), CreationDate DATE, Views INT, Revenue DECIMAL); INSERT INTO VideoContent (ContentID, Title, CreationDate, Views, Revenue) VALUES (1, 'Video A', '2021-01-01', 1000000, 5000.00), (2, 'Video B', '2021-01-02', 2000000, 10000.00), (3, 'Video C', '2021-01-03', 3000000, 15000.00), (4, 'Video D', '2021-01-04', 4000000, 20000.00), (5, 'Video E', '2021-01-05', 5000000, 25000.00); CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(50), ContentCreated INT, TotalRevenue DECIMAL); INSERT INTO Artists (ArtistID, ArtistName, ContentCreated, TotalRevenue) VALUES (1, 'Artist A', 1, 5000.00), (2, 'Artist B', 2, 10000.00), (3, 'Artist C', 3, 15000.00), (4, 'Artist D', 4, 20000.00), (5, 'Artist E', 5, 25000.00);","WITH RankedArtists AS (SELECT ArtistName, TotalRevenue, DENSE_RANK() OVER (ORDER BY TotalRevenue DESC) AS Rank FROM Artists) SELECT ArtistName, TotalRevenue FROM RankedArtists WHERE Rank <= 5;","The SQL query begins by creating a common table expression (CTE) named RankedArtists. This CTE ranks artists based on the total revenue they generated from their content, in descending order. The DENSE_RANK function is used to assign a rank to each artist, with the highest revenue-generating artist ranked as 1. Then, the query selects the top 5 artists from this ranked list by filtering for artists with a rank of 5 or less. The result is a list of the 5 artists who generated the highest total revenue from their content."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the average investment made in each technology sector in the past 5 years and compare it with the average of the previous decade.,"CREATE TABLE TechInvestments (InvestmentID INT PRIMARY KEY, TechSector VARCHAR(50), InvestmentYear INT, InvestmentAmount DECIMAL); INSERT INTO TechInvestments (InvestmentID, TechSector, InvestmentYear, InvestmentAmount) VALUES (1, 'AI & ML', 2020, 5000000.00), (2, 'Blockchain', 2019, 3000000.00), (3, 'Cybersecurity', 2021, 4500000.00), (4, 'IoT', 2018, 4000000.00), (5, 'Robotics', 2020, 3500000.00);","WITH AvgInvestments AS (SELECT TechSector, CASE WHEN InvestmentYear BETWEEN 2010 AND 2019 THEN 'LastDecade' WHEN InvestmentYear BETWEEN 2020 AND 2025 THEN 'LastFiveYears' END AS TimePeriod, AVG(InvestmentAmount) AS AvgInvestment FROM TechInvestments GROUP BY TechSector, TimePeriod) SELECT TechSector, AvgInvestment FROM AvgInvestments PIVOT (SUM(AvgInvestment) FOR TimePeriod IN ('LastDecade','LastFiveYears'));","This query first creates a common table expression (CTE) named AvgInvestments. In this CTE, it categorizes each investment record into two categories - 'LastDecade' and 'LastFiveYears' based on the year of investment, and calculates the average investment amount for each technology sector for these two time periods. Then it uses a PIVOT operation to turn the unique values of 'TimePeriod' from this CTE into new columns in the output. Finally, it displays the average investment amount in each technology sector for the 'LastDecade' and 'LastFiveYears'."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Create a table to store customer reviews for various hotels around the globe and then find the average rating for each hotel by region. Only include hotels that have received more than 10 reviews.,"CREATE TABLE HotelReviews (ReviewID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50), CustomerRating DECIMAL); INSERT INTO HotelReviews (ReviewID, HotelName, Region, CustomerRating) VALUES (1, 'Grand Hotel', 'North America', 4.5), (2, 'Ocean Resort', 'Europe', 4.0), (3, 'Mountain Lodge', 'Asia', 3.5), (4, 'City Inn', 'North America', 4.7), (5, 'Beach Bungalow', 'Europe', 4.3);","WITH GroupedReviews AS (SELECT HotelName, Region, AVG(CustomerRating) AS AvgRating, Count(*) AS Count FROM HotelReviews GROUP BY HotelName, Region) SELECT HotelName, Region, AvgRating FROM GroupedReviews WHERE Count > 10;","This SQL query first creates a common table expression (CTE) that groups reviews by hotel and region, calculating the average customer rating and count of reviews for each group. It then selects from this CTE only the hotels and regions where the count of reviews is greater than 10, thereby returning the average customer rating for each hotel by region, but only including hotels that have received more than 10 reviews."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total amount of carbon sequestration by all conservation projects in each region, and list the regions that have achieved more than 10000 tons of carbon sequestration.","CREATE TABLE ConservationProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), Region VARCHAR(50), CarbonSequestration DECIMAL); INSERT INTO ConservationProjects (ProjectID, ProjectName, Region, CarbonSequestration) VALUES (1, 'Project Green', 'Africa', 5000.0), (2, 'Project Blue', 'Asia', 6000.0), (3, 'Project Red', 'America', 7000.0), (4, 'Project Yellow', 'Europe', 8000.0), (5, 'Project White', 'Africa', 5500.0);","BEGIN TRANSACTION; SELECT Region, SUM(CarbonSequestration) as TotalCarbonSequestration FROM ConservationProjects GROUP BY Region HAVING SUM(CarbonSequestration) > 10000; COMMIT;",The query begins a transaction and sums the carbon sequestration of all projects by region. The HAVING clause is then used to filter out the regions where the total carbon sequestration is more than 10000 tons. The transaction is then committed to ensure the data integrity.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert records of the last five seasons for each player in the Basketball league and then display a ranking of the players according to their average points per game in descending order.,"CREATE TABLE BasketballData (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Season INT, Points INT, GamesPlayed INT); INSERT INTO BasketballData (PlayerID, PlayerName, Season, Points, GamesPlayed) VALUES (1, 'Player A', 2021, 1500, 80), (1, 'Player A', 2020, 1450, 82), (1, 'Player A', 2019, 1550, 81), (1, 'Player A', 2018, 1600, 80), (1, 'Player A', 2017, 1520, 82), (2, 'Player B', 2021, 1800, 82), (2, 'Player B', 2020, 1750, 81), (2, 'Player B', 2019, 1700, 80), (2, 'Player B', 2018, 1780, 82), (2, 'Player B', 2017, 1760, 81);","WITH AveragePoints AS (SELECT PlayerName, AVG(Points/GamesPlayed) AS AvgPointsPerGame FROM BasketballData GROUP BY PlayerName) SELECT PlayerName, AvgPointsPerGame FROM AveragePoints ORDER BY AvgPointsPerGame DESC;",The query begins by creating a common table expression (CTE) named AveragePoints that calculates the average points per game for each player over the seasons. It does this by grouping the records by PlayerName and then computing the average of the Points divided by the GamesPlayed for each player. The main query then selects the player names and their average points per game from the CTE and presents them in descending order of the average points per game.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the average age of patients who have experienced side effects from the drug 'Xanax'.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); CREATE TABLE DrugEffects (EffectID INT PRIMARY KEY, PatientID INT, DrugID INT, SideEffect VARCHAR(255)); INSERT INTO Patients (PatientID, Age, Gender) VALUES (1, 35, 'Male'), (2, 45, 'Female'), (3, 50, 'Male'), (4, 30, 'Female'), (5, 55, 'Male'); INSERT INTO Drugs (DrugID, DrugName) VALUES (1, 'Xanax'), (2, 'Paracetamol'), (3, 'Aspirin'); INSERT INTO DrugEffects (EffectID, PatientID, DrugID, SideEffect) VALUES (1, 1, 1, 'Dizziness'), (2, 2, 1, 'Nausea'), (3, 3, 2, 'Rash'), (4, 4, 3, 'Headache');",SELECT AVG(Patients.Age) AS AverageAge FROM Patients INNER JOIN DrugEffects ON Patients.PatientID = DrugEffects.PatientID INNER JOIN Drugs ON DrugEffects.DrugID = Drugs.DrugID WHERE Drugs.DrugName = 'Xanax';,"The query joins the 'Patients', 'Drugs', and 'DrugEffects' tables using the corresponding IDs. Then it filters the records for the drug 'Xanax'. The average age of these patients is then calculated with the AVG() function."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Find out the top three sectors in each region that have the highest number of emerging technology startups, and list them in descending order.","CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), Region VARCHAR(50), Sector VARCHAR(50)); INSERT INTO Startups (StartupID, StartupName, Region, Sector) VALUES (1, 'TechOne', 'North America', 'AI'), (2, 'TechTwo', 'Europe', 'Blockchain'), (3, 'TechThree', 'Asia', 'AI'), (4, 'TechFour', 'North America', 'IoT'), (5, 'TechFive', 'Europe', 'AI'), (6, 'TechSix', 'Asia', 'IoT'), (7, 'TechSeven', 'North America', 'Blockchain'), (8, 'TechEight', 'Europe', 'IoT'), (9, 'TechNine', 'Asia', 'Blockchain'), (10, 'TechTen', 'North America', 'AI');","WITH SectorCount AS (SELECT Region, Sector, COUNT(StartupID) AS Count FROM Startups GROUP BY Region, Sector), RankedSectors AS (SELECT Region, Sector, Count, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY Count DESC) AS Rank FROM SectorCount) SELECT Region, Sector, Count FROM RankedSectors WHERE Rank <= 3;","The query first creates a common table expression (CTE) named 'SectorCount' that groups startups by region and sector and counts the number of startups in each group. Then, it creates another CTE named 'RankedSectors' that assigns a rank to each group within each region based on the count, in descending order. Finally, it selects the region, sector, and count from the 'RankedSectors' where the rank is less than or equal to 3, thus giving the top three sectors with the highest number of emerging technology startups in each region."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the performance data of a basketball player after a game, and then find the top five players with the highest average points per game in the current season.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE PlayerPerformance (PerformanceID INT PRIMARY KEY, PlayerID INT, Season VARCHAR(50), GameID INT, Points INT); INSERT INTO Players (PlayerID, PlayerName, TeamID) VALUES (1, 'LeBron James', 1), (2, 'Kevin Durant', 2), (3, 'Stephen Curry', 3), (4, 'James Harden', 4), (5, 'Giannis Antetokounmpo', 5); INSERT INTO Teams (TeamID, TeamName) VALUES (1, 'Lakers'), (2, 'Nets'), (3, 'Warriors'), (4, '76ers'), (5, 'Bucks'); INSERT INTO PlayerPerformance (PerformanceID, PlayerID, Season, GameID, Points) VALUES (1, 1, '2022', 1, 25), (2, 2, '2022', 1, 30), (3, 3, '2022', 1, 35), (4, 4, '2022', 1, 40), (5, 5, '2022', 1, 45);","UPDATE PlayerPerformance SET Points = Points + 30 WHERE PlayerID = 1 AND GameID = 1; WITH AvgPoints AS (SELECT PlayerID, AVG(Points) as AvgPoints FROM PlayerPerformance WHERE Season = '2022' GROUP BY PlayerID) SELECT P.PlayerName, AVGPoints.AvgPoints FROM Players AS P INNER JOIN AvgPoints ON P.PlayerID = AvgPoints.PlayerID ORDER BY AvgPoints DESC LIMIT 5;","The query first updates the points scored by a player in a game. It then creates a common table expression (CTE) to calculate the average points scored per game by each player in the current season. It joins this CTE with the Players table on PlayerID to get the player names, and sorts the results in descending order by average points. It finally selects the top five players with the highest average points."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Find the top 5 crops with the highest average yield in North America and update the 'HighYieldCrops' table with these values.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgYield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, AvgYield) VALUES (1, 'Wheat', 'North America', 50.2), (2, 'Corn', 'Europe', 80.3), (3, 'Soybean', 'Asia', 40.5), (4, 'Rice', 'North America', 60.7), (5, 'Barley', 'Europe', 45.1); CREATE TABLE HighYieldCrops (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgYield DECIMAL);","WITH RankedCrops AS (SELECT CropID, CropName, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM CropYield WHERE Region = 'North America') INSERT INTO HighYieldCrops SELECT CropID, CropName, 'North America', AvgYield FROM RankedCrops WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) to rank crops in North America based on their average yield in descending order using the DENSE_RANK function. It then inserts the top 5 crops with the highest average yield into the 'HighYieldCrops' table.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Provide a rollback mechanism for the transactions that update the total allocated budget for various public projects for the current fiscal year.,"CREATE TABLE PublicProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), AllocatedBudget DECIMAL); INSERT INTO PublicProjects (ProjectID, ProjectName, AllocatedBudget) VALUES (1, 'Infrastructure Upgrade', 2000000.0), (2, 'Public Health Campaign', 1500000.0), (3, 'Environmental Protection', 1800000.0), (4, 'Educational Reform', 2300000.0), (5, 'Defense Expenditure', 2500000.0);",BEGIN TRANSACTION; UPDATE PublicProjects SET AllocatedBudget = AllocatedBudget + 100000 WHERE ProjectName = 'Public Health Campaign'; UPDATE PublicProjects SET AllocatedBudget = AllocatedBudget - 100000 WHERE ProjectName = 'Environmental Protection'; IF @@ERROR <> 0 BEGIN ROLLBACK TRANSACTION; END ELSE BEGIN COMMIT TRANSACTION; END;,"The SQL query starts a new transaction. It then tries to update the allocated budget for two projects: it increases the budget for 'Public Health Campaign' and decreases the budget for 'Environmental Protection'. If there is an error during these updates, the changes are rolled back, and the data remains unchanged. If there are no errors, the changes are committed and become permanent."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Create a table to store the sales figures of different car models in various regions, and then update the total sales for 'Model S' in 'North America' to 5000.","CREATE TABLE CarSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), TotalSales INT); INSERT INTO CarSales (SalesID, ModelName, Region, TotalSales) VALUES (1, 'Model S', 'North America', 4000), (2, 'Model 3', 'Europe', 3000), (3, 'Leaf', 'Asia', 2500), (4, 'Bolt', 'North America', 3500), (5, 'Prius', 'Europe', 2000);",UPDATE CarSales SET TotalSales = 5000 WHERE ModelName = 'Model S' AND Region = 'North America';,The query updates the 'TotalSales' field of the 'CarSales' table where the 'ModelName' is 'Model S' and the 'Region' is 'North America'. The new 'TotalSales' value is set to 5000.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to record the yield per acre for different crop types across different regions, and then list the top 5 crops with the highest average yield in the 'North America' region.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), AvgYieldPerAcre DECIMAL); INSERT INTO CropYield (CropID, CropType, Region, AvgYieldPerAcre) VALUES (1, 'Wheat', 'North America', 60.5), (2, 'Corn', 'Europe', 80.0), (3, 'Soybean', 'Asia', 40.0), (4, 'Rice', 'North America', 75.7), (5, 'Barley', 'Europe', 55.0);","WITH RankedCrops AS (SELECT CropType, AvgYieldPerAcre, DENSE_RANK() OVER (ORDER BY AvgYieldPerAcre DESC) AS Rank FROM CropYield WHERE Region = 'North America') SELECT CropType, AvgYieldPerAcre FROM RankedCrops WHERE Rank <= 5;",The query first creates a common table expression (CTE) to rank crops based on their average yield per acre in descending order for the 'North America' region. It then selects the top 5 crops with the highest yield using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert a new record for a trending fashion product in Europe with product ID 101, product name 'Sustainable Denim Jacket', category 'outerwear', price 120, and trend rank 1.","CREATE TABLE FashionTrends (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Category VARCHAR(50), Region VARCHAR(50), Price DECIMAL, TrendRank INT);","INSERT INTO FashionTrends (ProductID, ProductName, Category, Region, Price, TrendRank) VALUES (101, 'Sustainable Denim Jacket', 'outerwear', 'Europe', 120, 1);","The SQL statement is inserting a new record into the FashionTrends table with ProductID as 101, ProductName as 'Sustainable Denim Jacket', Category as 'outerwear', Region as 'Europe', Price as 120, and TrendRank as 1."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert the yearly sales data for various clothing items across different regions for the last 5 years, then create a pivot table that shows the total sales per region per year for each item and remove the entries for items that are no longer sold.","CREATE TABLE Items (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), IsSold BOOLEAN); CREATE TABLE SalesData (SalesID INT PRIMARY KEY, ItemID INT, Region VARCHAR(50), Year INT, SalesVolume INT); INSERT INTO Items (ItemID, ItemName, IsSold) VALUES (1, 'Jeans', TRUE), (2, 'T-Shirt', TRUE), (3, 'Coat', FALSE), (4, 'Dress', TRUE), (5, 'Skirt', FALSE); INSERT INTO SalesData (SalesID, ItemID, Region, Year, SalesVolume) VALUES (1, 1, 'North America', 2016, 1200), (2, 2, 'Europe', 2016, 1180), (3, 3, 'Asia', 2016, 1100), (4, 4, 'North America', 2017, 1150), (5, 5, 'Europe', 2017, 950);","WITH CleanSalesData AS (SELECT sd.SalesID, i.ItemName, sd.Region, sd.Year, sd.SalesVolume FROM SalesData sd INNER JOIN Items i ON sd.ItemID = i.ItemID WHERE i.IsSold = TRUE) SELECT Region, Year, SUM(CASE WHEN ItemName = 'Jeans' THEN SalesVolume ELSE 0 END) AS Jeans, SUM(CASE WHEN ItemName = 'T-Shirt' THEN SalesVolume ELSE 0 END) AS T_Shirt, SUM(CASE WHEN ItemName = 'Dress' THEN SalesVolume ELSE 0 END) AS Dress FROM CleanSalesData GROUP BY Region, Year;","The query first creates a common table expression (CTE) named CleanSalesData, which filters out the sales data for items that are no longer sold. This is done by joining the SalesData table with the Items table on the ItemID field and only including rows where IsSold is TRUE. The CTE is then used to create a pivot table that sums up the sales volume for each item per region per year. The CASE statements within the SUM functions ensure that each item's sales are only summed up for that item's column in the pivot table. The GROUP BY clause then groups the results by region and year."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Create a table to store detailed information on vehicle sales by model and region, then insert some data into the table. After that, update the sales data for the 'Model S' in 'North America' and delete the sales data for 'Leaf' in 'Asia'. Finally, provide a list of models sorted by total sales in descending order.","CREATE TABLE VehicleSales (ID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (ID, ModelName, Region, Sales) VALUES (1, 'Model S', 'North America', 5000), (2, 'Model 3', 'Europe', 3000), (3, 'Leaf', 'Asia', 2000), (4, 'Bolt', 'North America', 4000), (5, 'Prius', 'Europe', 3500);","UPDATE VehicleSales SET Sales = 5500 WHERE ModelName = 'Model S' AND Region = 'North America'; DELETE FROM VehicleSales WHERE ModelName = 'Leaf' AND Region = 'Asia'; SELECT ModelName, SUM(Sales) AS TotalSales FROM VehicleSales GROUP BY ModelName ORDER BY TotalSales DESC;","The query first updates the sales data for the 'Model S' model in 'North America', setting the new sales value to 5500. The query then deletes the sales data for the 'Leaf' model in 'Asia'. Finally, the query creates a list of vehicle models along with their total sales and sorts the list in descending order of total sales. The SUM function is used to calculate the total sales for each model, and the GROUP BY statement is used to group the sales data by model."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store different types of cryptocurrencies, their current market cap, volume and price. Also, display the top 5 cryptocurrencies by market cap.","CREATE TABLE Cryptocurrencies (CryptoID INT PRIMARY KEY, CryptoName VARCHAR(50), MarketCap DECIMAL, Volume DECIMAL, Price DECIMAL); INSERT INTO Cryptocurrencies (CryptoID, CryptoName, MarketCap, Volume, Price) VALUES (1, 'Bitcoin', 600000000000, 15000000000, 32000), (2, 'Etherium', 400000000000, 10000000000, 2800), (3, 'Binance Coin', 60000000000, 3000000000, 350), (4, 'Tether', 50000000000, 4000000000, 1), (5, 'Cardano', 50000000000, 2000000000, 1.4);","WITH RankedCryptos AS (SELECT CryptoName, MarketCap, DENSE_RANK() OVER (ORDER BY MarketCap DESC) AS Rank FROM Cryptocurrencies) SELECT CryptoName, MarketCap FROM RankedCryptos WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank cryptocurrencies based on their market cap in descending order. It then selects the top 5 cryptocurrencies using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the average yield for each crop grown in the South region and display those that have yielded over 500 kilograms per hectare.,"CREATE TABLE CropYields (FarmID INT PRIMARY KEY, Region VARCHAR(50), CropName VARCHAR(50), TotalYield DECIMAL); INSERT INTO CropYields (FarmID, Region, CropName, TotalYield) VALUES (1, 'North', 'Wheat', 450.2), (2, 'South', 'Corn', 650.3), (3, 'South', 'Soybeans', 575.4), (4, 'West', 'Barley', 520.5), (5, 'South', 'Rice', 610.6);","BEGIN TRANSACTION; SELECT CropName, AVG(TotalYield) AS AvgYield FROM CropYields WHERE Region = 'South' GROUP BY CropName HAVING AVG(TotalYield) > 500; COMMIT;",The query begins a transaction and calculates the average yield for each type of crop in the South region by using the AVG function and GROUP BY statement. It then uses the HAVING clause to filter out crops that have not yielded over 500 kilograms per hectare. The results are then committed to ensure that the entire transaction has been processed successfully.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Initiate a transaction to calculate and store the average score of each basketball team by season, and roll it back if any errors occur.","CREATE TABLE BasketballTeams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); INSERT INTO BasketballTeams (TeamID, TeamName) VALUES (1, 'Lakers'), (2, 'Heat'), (3, 'Bulls'), (4, 'Warriors'), (5, 'Celtics'); CREATE TABLE BasketballMatches (MatchID INT PRIMARY KEY, Season VARCHAR(50), TeamID INT, Score INT); INSERT INTO BasketballMatches (MatchID, Season, TeamID, Score) VALUES (1, '2020', 1, 102), (2, '2020', 2, 98), (3, '2020', 3, 95), (4, '2020', 4, 105), (5, '2020', 5, 99);","BEGIN TRANSACTION; DECLARE @Error INT; BEGIN TRY INSERT INTO BasketballTeams (TeamID, TeamName, AvgScore) SELECT TeamID, TeamName, AVG(Score) OVER (PARTITION BY TeamID, Season) FROM BasketballMatches JOIN BasketballTeams ON BasketballMatches.TeamID = BasketballTeams.TeamID; SET @Error = @@ERROR; IF (@Error <> 0) BEGIN ROLLBACK TRANSACTION; END ELSE BEGIN COMMIT TRANSACTION; END END TRY BEGIN CATCH ROLLBACK TRANSACTION; END CATCH;","The query starts a transaction and defines an error variable. It then tries to insert average scores into the BasketballTeams table by joining it with the BasketballMatches table and calculating the average score per team per season. If an error occurs during this process, the transaction is rolled back; otherwise, it is committed. If an unhandled error is thrown within the TRY block, the transaction is also rolled back in the CATCH block."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,data retrieval: basic data fetching queries,Find out the top 5 emerging tech startups of the last year based on their funding amount across various industries.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), Industry VARCHAR(50), FundingAmount DECIMAL, Year INT); INSERT INTO Startups (StartupID, StartupName, Industry, FundingAmount, Year) VALUES (1, 'TechOne', 'AI', 5000000, 2021), (2, 'Innovate', 'Fintech', 7000000, 2021), (3, 'AI Hub', 'AI', 6500000, 2021), (4, 'Fintech Solutions', 'Fintech', 4000000, 2021), (5, 'Green Energy', 'Renewables', 8000000, 2021);","WITH RankedStartups AS (SELECT StartupName, FundingAmount, DENSE_RANK() OVER (ORDER BY FundingAmount DESC) AS Rank FROM Startups WHERE Year = 2021) SELECT StartupName, FundingAmount FROM RankedStartups WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank the startups based on their funding amount in the year 2021 in descending order. It then selects the top 5 startups with the highest funding using the DENSE_RANK function.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Retrieve the total government spending on education by each state for the year 2020.,"CREATE TABLE GovtSpending (ID INT PRIMARY KEY, State VARCHAR(50), Category VARCHAR(50), Year INT, Amount DECIMAL); INSERT INTO GovtSpending (ID, State, Category, Year, Amount) VALUES (1, 'California', 'Education', 2020, 90000), (2, 'Texas', 'Education', 2020, 70000), (3, 'New York', 'Education', 2020, 80000), (4, 'Florida', 'Education', 2020, 60000), (5, 'Illinois', 'Education', 2020, 50000);","SELECT State, Amount FROM GovtSpending WHERE Category='Education' AND Year=2020;","The SQL query selects the State and Amount columns from the GovtSpending table where the Category is 'Education' and Year is 2020, which gives the total government spending on education by each state for the year 2020."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a report that displays the total revenue, quantity sold, and average price per unit of each technology product for the last quarter, broken down by region. The data should be pivoted such that each region is a separate column. Include only those transactions that have been committed and exclude any transactions that have been rolled back.","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Category VARCHAR(50)); INSERT INTO Products (ProductID, ProductName, Category) VALUES (1, 'iPhone', 'Mobile'), (2, 'Galaxy', 'Mobile'), (3, 'MacBook Pro', 'Laptop'), (4, 'Surface Pro', 'Laptop'), (5, 'Oculus Rift', 'VR'); CREATE TABLE Sales (TransactionID INT PRIMARY KEY, ProductID INT, Region VARCHAR(50), Quantity INT, PricePerUnit DECIMAL, TransactionStatus VARCHAR(50)); INSERT INTO Sales (TransactionID, ProductID, Region, Quantity, PricePerUnit, TransactionStatus) VALUES (1, 1, 'North America', 500, 700, 'COMMITTED'), (2, 2, 'Europe', 400, 800, 'COMMITTED'), (3, 3, 'Asia', 300, 1200, 'ROLLED BACK'), (4, 4, 'North America', 200, 1000, 'COMMITTED'), (5, 5, 'Europe', 100, 400, 'COMMITTED');","WITH FilteredSales AS (SELECT S.ProductID, P.ProductName, S.Region, S.Quantity, S.PricePerUnit FROM Sales AS S JOIN Products AS P ON S.ProductID = P.ProductID WHERE S.TransactionStatus = 'COMMITTED'), PivotTable AS (SELECT ProductName, Region, SUM(Quantity) AS Quantity, SUM(Quantity * PricePerUnit) AS TotalRevenue, AVG(PricePerUnit) AS AvgPricePerUnit FROM FilteredSales GROUP BY ProductName, Region) SELECT * FROM PivotTable PIVOT (SUM(Quantity), SUM(TotalRevenue), AVG(AvgPricePerUnit) FOR Region IN ('North America', 'Europe', 'Asia'));","The query first creates a common table expression (CTE) called FilteredSales, which includes only those sales transactions that have been committed. It then creates a pivot table that aggregates the data by product and region, calculating the total quantity sold, total revenue, and average price per unit for each product in each region. The results are then pivoted such that each region becomes a separate column in the final output."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 drugs with the highest average effectiveness rating for patients over 65 years old with hypertension.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Diagnosis VARCHAR(50)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50), EffectivenessRating DECIMAL); INSERT INTO Patients (PatientID, Age, Diagnosis) VALUES (1, 70, 'Hypertension'), (2, 66, 'Hypertension'), (3, 68, 'Diabetes'), (4, 72, 'Hypertension'), (5, 80, 'Hypertension'); INSERT INTO DrugEfficacy (DrugID, PatientID, DrugName, EffectivenessRating) VALUES (1, 1, 'Drug A', 8.5), (2, 2, 'Drug B', 9.0), (3, 4, 'Drug C', 7.0), (4, 1, 'Drug D', 6.5), (5, 5, 'Drug A', 9.1);","WITH AvgRatings AS (SELECT DrugName, AVG(EffectivenessRating) as AvgRating FROM DrugEfficacy WHERE PatientID IN (SELECT PatientID FROM Patients WHERE Age > 65 AND Diagnosis = 'Hypertension') GROUP BY DrugName) SELECT DrugName, AvgRating FROM AvgRatings ORDER BY AvgRating DESC LIMIT 5;","The query first creates a subquery that calculates the average effectiveness rating for each drug, specifically for patients over the age of 65 with a diagnosis of hypertension. This is done using an IN clause to filter the DrugEfficacy table based on the PatientID from the Patients table. The main query then selects the drug name and average rating from the results of the subquery, orders them in descending order of average rating, and limits the results to the top 5."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Insert records for a new movie release in the Movies and BoxOffice tables and display the total earnings for the movie so far.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), ReleaseDate DATE, Genre VARCHAR(50)); INSERT INTO Movies (MovieID, MovieName, ReleaseDate, Genre) VALUES (1, 'New Release', '2023-05-14', 'Sci-Fi'); CREATE TABLE BoxOffice (BoxOfficeID INT PRIMARY KEY, MovieID INT, Earnings DECIMAL, Date DATE); INSERT INTO BoxOffice (BoxOfficeID, MovieID, Earnings, Date) VALUES (1, 1, 50000000.00, '2023-05-14');","INSERT INTO Movies (MovieID, MovieName, ReleaseDate, Genre) VALUES (2, 'Another New Release', '2023-06-01', 'Action'); INSERT INTO BoxOffice (BoxOfficeID, MovieID, Earnings, Date) VALUES (2, 2, 30000000.00, '2023-06-01'); SELECT MovieName, SUM(Earnings) as TotalEarnings FROM Movies JOIN BoxOffice ON Movies.MovieID = BoxOffice.MovieID WHERE MovieName = 'Another New Release';","The SQL query first inserts a record for a new movie into the Movies table. It then inserts a record for the movie's earnings on its release date into the BoxOffice table. Finally, it joins the Movies and BoxOffice tables on the MovieID field and selects the sum of the earnings for the new movie."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table for tracking the adoption of different programming languages in various tech companies over the years, and then display the top 5 programming languages in terms of adoption in 2022.","CREATE TABLE LanguageAdoption (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), ProgrammingLanguage VARCHAR(30), Year INT, AdoptionRate DECIMAL); INSERT INTO LanguageAdoption (CompanyID, CompanyName, ProgrammingLanguage, Year, AdoptionRate) VALUES (1, 'TechCorp', 'Python', 2022, 85.5), (2, 'Innovate', 'Java', 2022, 75.2), (3, 'DataDive', 'R', 2022, 70.0), (4, 'SkyNet', 'C++', 2022, 68.5), (5, 'DeepBlue', 'Ruby', 2022, 65.0);","WITH RankedLanguages AS (SELECT ProgrammingLanguage, AdoptionRate, DENSE_RANK() OVER (ORDER BY AdoptionRate DESC) AS Rank FROM LanguageAdoption WHERE Year = 2022) SELECT ProgrammingLanguage, AdoptionRate FROM RankedLanguages WHERE Rank <= 5;",The query first creates a common table expression (CTE) to rank different programming languages based on their adoption rates in 2022 in descending order. It then selects the top 5 programming languages with the highest adoption rates using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Identify the top 5 AI startups by their funding amount in Europe and display their name, funding amount, and the date they received their latest funding.","CREATE TABLE AIStartups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), Region VARCHAR(50), FundingAmount DECIMAL, FundingDate DATE); INSERT INTO AIStartups (StartupID, StartupName, Region, FundingAmount, FundingDate) VALUES (1, 'Startup A', 'North America', 2000000, '2020-05-20'), (2, 'Startup B', 'Europe', 5000000, '2020-02-15'), (3, 'Startup C', 'Asia', 1200000, '2020-07-25'), (4, 'Startup D', 'Europe', 7000000, '2020-10-30'), (5, 'Startup E', 'Europe', 8000000, '2020-04-10');","WITH RankedStartups AS (SELECT StartupName, FundingAmount, FundingDate, DENSE_RANK() OVER (ORDER BY FundingAmount DESC) AS Rank FROM AIStartups WHERE Region = 'Europe') SELECT StartupName, FundingAmount, FundingDate FROM RankedStartups WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank AI startups based on their funding amount in descending order, specifically in the Europe region. It then selects the top 5 startups using the DENSE_RANK function, displaying their name, funding amount, and the date they received their most recent funding."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 10 athletes with the most total points scored in basketball games worldwide for the year 2020.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50)); INSERT INTO Athletes (AthleteID, AthleteName, Sport) VALUES (1, 'LeBron James', 'Basketball'), (2, 'Stephen Curry', 'Basketball'), (3, 'Kevin Durant', 'Basketball'), (4, 'James Harden', 'Basketball'), (5, 'Giannis Antetokounmpo', 'Basketball'); CREATE TABLE BasketballGames (GameID INT PRIMARY KEY, Date DATE, AthleteID INT, Points INT); INSERT INTO BasketballGames (GameID, Date, AthleteID, Points) VALUES (1, '2020-01-01', 1, 30), (2, '2020-02-01', 2, 28), (3, '2020-03-01', 3, 32), (4, '2020-04-01', 4, 35), (5, '2020-05-01', 5, 33);","WITH TotalPoints AS (SELECT AthleteID, SUM(Points) OVER (PARTITION BY AthleteID) as TotalPoints FROM BasketballGames WHERE Date BETWEEN '2020-01-01' AND '2020-12-31') SELECT A.AthleteName, TP.TotalPoints FROM Athletes A JOIN TotalPoints TP on A.AthleteID = TP.AthleteID ORDER BY TP.TotalPoints DESC LIMIT 10;","The query first creates a common table expression (CTE) named TotalPoints, which calculates the sum of points for each athlete in the BasketballGames table for the year 2020 using the SUM window function with PARTITION BY AthleteID. The final query then joins Athletes and TotalPoints tables on AthleteID and returns the athlete names and their total points, ordered by total points in descending order. The LIMIT 10 clause ensures that only the top 10 athletes with the most points are returned."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average rating of each hotel in London and Paris which had more than 10 bookings last month and order the results from highest to lowest rating. Begin the transaction and rollback the transaction if there is any error.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, City) VALUES (1, 'Hotel Paris', 'Paris'), (2, 'Hotel London', 'London'), (3, 'Hotel Madrid', 'Madrid'); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, GuestID INT, BookingDate DATE); INSERT INTO Bookings (BookingID, HotelID, GuestID, BookingDate) VALUES (1, 1, 101, '2022-02-01'), (2, 2, 102, '2022-02-05'), (3, 1, 103, '2022-02-07'), (4, 3, 104, '2022-02-10'), (5, 2, 105, '2022-02-15'); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, Rating DECIMAL); INSERT INTO Reviews (ReviewID, HotelID, Rating) VALUES (1, 1, 4.5), (2, 2, 4.0), (3, 1, 4.7), (4, 3, 4.2), (5, 2, 3.8);","BEGIN TRANSACTION; TRY BEGIN SELECT H.HotelName, AVG(R.Rating) AS AverageRating FROM Hotels H INNER JOIN Bookings B ON H.HotelID = B.HotelID INNER JOIN Reviews R ON H.HotelID = R.HotelID WHERE H.City IN ('London', 'Paris') AND month(B.BookingDate) = month(dateadd(month, -1, getdate())) AND year(B.BookingDate) = year(dateadd(month, -1, getdate())) GROUP BY H.HotelName HAVING count(B.BookingID) > 10 ORDER BY AverageRating DESC; END TRY BEGIN CATCH ROLLBACK TRANSACTION; END CATCH COMMIT TRANSACTION;","The SQL starts a transaction and attempts to execute a query. The query joins the Hotels, Bookings, and Reviews tables using inner joins on the HotelID column. It then filters for hotels in London or Paris and bookings from the previous month. The query calculates the average rating of each hotel and groups the results by hotel name. The results are then filtered to include only hotels with more than 10 bookings and ordered by the average rating in descending order. If an error occurs during the execution of the query, the transaction is rolled back. Otherwise, the transaction is committed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total amount spent by the government department 'Health and Human Services' on different projects in the year 2020.,"CREATE TABLE GovSpending (Department VARCHAR(50), Project VARCHAR(50), Year INT, Amount DECIMAL); INSERT INTO GovSpending (Department, Project, Year, Amount) VALUES ('Health and Human Services', 'COVID-19 Vaccine', 2020, 20000000), ('Health and Human Services', 'Mental Health Services', 2020, 15000000), ('Defense', 'Stealth Technology', 2020, 30000000), ('Health and Human Services', 'General Health Promotion', 2020, 10000000);","SELECT Project, SUM(Amount) FROM GovSpending WHERE Department = 'Health and Human Services' AND Year = 2020 GROUP BY Project;",The query selects the project names and the total amount spent on each project from the GovSpending table. It only includes rows where the Department is 'Health and Human Services' and the Year is 2020. Then it groups the results by project name.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Update the crop yield data with the latest values and then find the five crops with the highest average yield in each region for the last year.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL, Year INT); INSERT INTO CropYield (CropID, CropName, Region, Yield, Year) VALUES (1, 'Wheat', 'North America', 1.2, 2020), (2, 'Corn', 'Europe', 1.8, 2020), (3, 'Rice', 'Asia', 2.1, 2020), (4, 'Barley', 'North America', 1.3, 2020), (5, 'Soybeans', 'Europe', 1.5, 2020);","UPDATE CropYield SET Yield = Yield * 1.1 WHERE Year = 2020; WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank FROM CropYield WHERE Year = 2020) SELECT CropName, Yield FROM RankedCrops WHERE Rank <= 5;","The SQL query first updates the yield of all crops for the year 2020, increasing them by 10%. It then creates a common table expression (CTE) to rank crops based on their yield in each region for the year 2020. Finally, it selects the top 5 crops with the highest yield in each region using the DENSE_RANK function."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 patients with the highest number of medication changes in the last year and provide their demographic details and the details of the changed medications.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, DrugName VARCHAR(50), SideEffects VARCHAR(100)); CREATE TABLE TreatmentProtocol (ProtocolID INT PRIMARY KEY, PatientID INT, MedicationID INT, StartDate DATE, EndDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));","BEGIN; WITH MedChange AS (SELECT PatientID, COUNT(DISTINCT MedicationID) as MedChanges FROM TreatmentProtocol WHERE StartDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY PatientID) SELECT P.Name, P.Age, P.Gender, P.Region, M.DrugName, M.SideEffects FROM Patients P JOIN TreatmentProtocol TP ON P.PatientID = TP.PatientID JOIN Medications M ON TP.MedicationID = M.MedicationID JOIN MedChange MC ON P.PatientID = MC.PatientID ORDER BY MC.MedChanges DESC LIMIT 5; COMMIT;","The query begins with a transaction block. Then it creates a common table expression (MedChange) that calculates the number of distinct medications for each patient in the last year. It then joins this CTE with the Patients, TreatmentProtocol, and Medications tables to retrieve the required patient demographics and drug details. The results are ordered by the number of medication changes in descending order and limited to the top 5. The transaction is then committed."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert the new crop yield data for the year 2021 and then find the top 3 crops with highest average yield per acre in each region.,"CREATE TABLE CropYield (ID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, YieldPerAcre DECIMAL); INSERT INTO CropYield (ID, CropName, Region, Year, YieldPerAcre) VALUES (1, 'Corn', 'North America', 2020, 120.5), (2, 'Wheat', 'Europe', 2020, 118.0), (3, 'Rice', 'Asia', 2020, 110.0), (4, 'Corn', 'North America', 2019, 115.7), (5, 'Wheat', 'Europe', 2019, 95.0);","INSERT INTO CropYield (ID, CropName, Region, Year, YieldPerAcre) VALUES (6, 'Corn', 'North America', 2021, 125.5), (7, 'Wheat', 'Europe', 2021, 120.0), (8, 'Rice', 'Asia', 2021, 115.0); WITH RankedCrops AS (SELECT CropName, Region, AVG(YieldPerAcre) AS AvgYield, RANK() OVER (PARTITION BY Region ORDER BY AVG(YieldPerAcre) DESC) AS Rank FROM CropYield WHERE Year = 2021 GROUP BY CropName, Region) SELECT CropName, Region, AvgYield FROM RankedCrops WHERE Rank <= 3;","The query first inserts the new crop yield data for the year 2021 into the CropYield table. Then, a common table expression (CTE) is created to calculate the average yield per acre for each crop in each region for the year 2021 and rank them in descending order. The final SELECT statement then returns the top 3 crops with highest average yield per acre in each region."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Insert records into the patient's health history table for a new patient and retrieve all the patients who have a history of heart disease.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DOB DATE, Gender CHAR(1)); CREATE TABLE HealthHistory (HistoryID INT PRIMARY KEY, PatientID INT, DiseaseName VARCHAR(50), OnsetDate DATE);","INSERT INTO Patients (PatientID, FirstName, LastName, DOB, Gender) VALUES (1001, 'John', 'Doe', '1980-01-01', 'M'); INSERT INTO HealthHistory (HistoryID, PatientID, DiseaseName, OnsetDate) VALUES (2001, 1001, 'Heart Disease', '2022-01-01'); SELECT P.FirstName, P.LastName FROM Patients P INNER JOIN HealthHistory HH ON P.PatientID = HH.PatientID WHERE HH.DiseaseName = 'Heart Disease';",The queries first insert a new record for a patient into the Patients table and then insert a record into the HealthHistory table for this patient indicating they have a history of heart disease. The final query uses an inner join to combine data from the Patients and HealthHistory tables and select all patients who have a history of heart disease.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Find out the top 5 artists based on the total streaming time across all platforms for the year 2020 and compare it with the top 5 artists of 2019.,"CREATE TABLE ArtistData (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(50)); CREATE TABLE StreamingData (DataID INT PRIMARY KEY, ArtistID INT, StreamingPlatform VARCHAR(50), Year INT, TotalHoursStreamed DECIMAL); INSERT INTO ArtistData (ArtistID, ArtistName) VALUES (1, 'Artist 1'), (2, 'Artist 2'), (3, 'Artist 3'), (4, 'Artist 4'), (5, 'Artist 5'); INSERT INTO StreamingData (DataID, ArtistID, StreamingPlatform, Year, TotalHoursStreamed) VALUES (1, 1, 'Spotify', 2020, 12000.5), (2, 2, 'Apple Music', 2020, 11000), (3, 3, 'SoundCloud', 2020, 13000), (4, 4, 'Spotify', 2020, 14000.7), (5, 5, 'Apple Music', 2020, 15000);","WITH TopArtists2020 AS (SELECT ArtistID, SUM(TotalHoursStreamed) AS TotalStreamTime2020 FROM StreamingData WHERE Year = 2020 GROUP BY ArtistID ORDER BY TotalStreamTime2020 DESC LIMIT 5), TopArtists2019 AS (SELECT ArtistID, SUM(TotalHoursStreamed) AS TotalStreamTime2019 FROM StreamingData WHERE Year = 2019 GROUP BY ArtistID ORDER BY TotalStreamTime2019 DESC LIMIT 5) SELECT A.ArtistName, T1.TotalStreamTime2020, T2.TotalStreamTime2019 FROM ArtistData A LEFT JOIN TopArtists2020 T1 ON A.ArtistID = T1.ArtistID LEFT JOIN TopArtists2019 T2 ON A.ArtistID = T2.ArtistID;",The query creates two common table expressions (CTEs) - TopArtists2020 and TopArtists2019 - to find the total streaming time for each artist for the years 2020 and 2019 respectively. It then performs a LEFT JOIN operation on the ArtistData table with these two CTEs on the basis of ArtistID to find the total stream time for each artist for both years. It finally returns the artist names with their total streaming times for 2020 and 2019.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table to store different companies investment in AI technology in various countries, then display the top 3 countries with the highest total investment.","CREATE TABLE AIInvestment (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Country VARCHAR(50), InvestmentAmount DECIMAL); INSERT INTO AIInvestment (CompanyID, CompanyName, Country, InvestmentAmount) VALUES (1, 'Google', 'USA', 5000000), (2, 'Apple', 'USA', 4000000), (3, 'Microsoft', 'USA', 3000000), (4, 'Baidu', 'China', 2000000), (5, 'Alibaba', 'China', 2500000);","WITH CountryInvestment AS (SELECT Country, SUM(InvestmentAmount) AS TotalInvestment FROM AIInvestment GROUP BY Country) SELECT Country, TotalInvestment FROM CountryInvestment ORDER BY TotalInvestment DESC LIMIT 3;",The SQL query first creates a grouping of the total investment amount per country using a subquery. It then orders these countries by the total investment in descending order and limits the query to the top 3 countries.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Add a new hotel chain into the database and display the top 5 countries with the highest number of rooms in hotels of this chain. If there is a tie, order them alphabetically.","CREATE TABLE HotelChains (ChainID INT PRIMARY KEY, ChainName VARCHAR(50)); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, ChainID INT, HotelName VARCHAR(50), Country VARCHAR(50), NumRooms INT); INSERT INTO HotelChains (ChainID, ChainName) VALUES (1, 'Marriott'), (2, 'Hilton'), (3, 'Holiday Inn'); INSERT INTO Hotels (HotelID, ChainID, HotelName, Country, NumRooms) VALUES (1, 1, 'Marriott Paris', 'France', 500), (2, 2, 'Hilton London', 'UK', 600), (3, 3, 'Holiday Inn Rome', 'Italy', 300), (4, 3, 'Holiday Inn Madrid', 'Spain', 350), (5, 1, 'Marriott Berlin', 'Germany', 450);","INSERT INTO HotelChains (ChainID, ChainName) VALUES (4, 'InterContinental'); WITH ChainedHotels AS (SELECT Country, SUM(NumRooms) AS TotalRooms FROM Hotels WHERE ChainID = 4 GROUP BY Country) SELECT Country, TotalRooms FROM ChainedHotels ORDER BY TotalRooms DESC, Country ASC LIMIT 5;","The SQL statement first inserts a new hotel chain named 'InterContinental' into the 'HotelChains' table. Then it creates a common table expression (CTE) called 'ChainedHotels' that sums the total number of rooms in each country for this hotel chain. It then selects the top 5 countries in descending order of total rooms and in case of a tie, in ascending alphabetical order of the country name."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show me the top 10 most watched movies in the United States.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(100), Country VARCHAR(50)); CREATE TABLE MovieViews (ViewID INT PRIMARY KEY, MovieID INT, ViewCount INT); INSERT INTO Movies (MovieID, MovieName, Country) VALUES (1, 'Avengers Endgame', 'United States'), (2, 'Titanic', 'United States'), (3, 'Star Wars: The Force Awakens', 'United States'), (4, 'Inception', 'United States'), (5, 'The Dark Knight', 'United States'); INSERT INTO MovieViews (ViewID, MovieID, ViewCount) VALUES (1, 1, 5000000), (2, 2, 4500000), (3, 3, 4300000), (4, 4, 4000000), (5, 5, 3900000);","SELECT m.MovieName, v.ViewCount FROM Movies m JOIN MovieViews v ON m.MovieID = v.MovieID WHERE m.Country = 'United States' ORDER BY v.ViewCount DESC LIMIT 10;","The SQL query starts by joining the Movies table with the MovieViews table based on their MovieID columns. Then it filters the records for movies that are from the United States. After that, it orders the resulting records in descending order by the ViewCount from the MovieViews table to get the most watched movies. Finally, it limits the output to the top 10 records."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Show the top 5 most visited destinations by customers in each region in the last year.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Destinations (DestinationID, DestinationName, Region) VALUES (1, 'New York', 'North America'), (2, 'Paris', 'Europe'), (3, 'Tokyo', 'Asia'), (4, 'Sydney', 'Australia'), (5, 'Cape Town', 'Africa'); CREATE TABLE Visits (VisitID INT PRIMARY KEY, DestinationID INT, VisitDate DATE); INSERT INTO Visits (VisitID, DestinationID, VisitDate) VALUES (1, 1, '2020-01-01'), (2, 2, '2020-02-01'), (3, 3, '2020-03-01'), (4, 4, '2020-04-01'), (5, 5, '2020-05-01');","WITH VisitCounts AS (SELECT DestinationName, COUNT(*) AS TotalVisits, Region FROM Destinations JOIN Visits ON Destinations.DestinationID = Visits.DestinationID WHERE VisitDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY DestinationName, Region), RankedDestinations AS (SELECT DestinationName, TotalVisits, DENSE_RANK() OVER (PARTITION BY Region ORDER BY TotalVisits DESC) AS Rank FROM VisitCounts) SELECT DestinationName, TotalVisits FROM RankedDestinations WHERE Rank <= 5;","This query first creates a common table expression (CTE) to count the total number of visits to each destination in the past year. It then ranks these destinations within each region based on the total number of visits, using the DENSE_RANK function. Finally, it selects the top 5 destinations in each region based on this ranking."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Compare the number of patents filed in the field of AI, Machine Learning, and Robotics in the last decade across different regions, and display the top 3 regions with the maximum surge in patent filings.","CREATE TABLE Patents (PatentID INT PRIMARY KEY, Field VARCHAR(50), Region VARCHAR(50), Year INT, PatentCount INT); INSERT INTO Patents (PatentID, Field, Region, Year, PatentCount) VALUES (1, 'AI', 'North America', 2010, 500), (2, 'Machine Learning', 'Europe', 2010, 600), (3, 'Robotics', 'Asia', 2010, 700), (4, 'AI', 'North America', 2020, 1500), (5, 'Machine Learning', 'Europe', 2020, 1200), (6, 'Robotics', 'Asia', 2020, 1300);","WITH DecadeStart AS (SELECT Region, Field, PatentCount FROM Patents WHERE Year = 2010), DecadeEnd AS (SELECT Region, Field, PatentCount FROM Patents WHERE Year = 2020) SELECT TOP 3 DecadeEnd.Region, DecadeEnd.Field, DecadeEnd.PatentCount - DecadeStart.PatentCount AS PatentIncrease FROM DecadeStart INNER JOIN DecadeEnd ON DecadeStart.Region = DecadeEnd.Region AND DecadeStart.Field = DecadeEnd.Field ORDER BY PatentIncrease DESC;","The SQL query first creates two Common Table Expressions (CTEs) representing the count of patents filed in the fields of AI, Machine Learning, and Robotics across different regions at the beginning and end of the decade. Then, it performs an INNER JOIN operation on these two CTEs based on the Region and Field. It computes the increase in patent filings and sorts the regions and fields in descending order of this increase. Finally, it selects the top 3 entries from this sorted list, representing the regions with the maximum increase in patent filings in these technology fields over the decade."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table to capture government spending by department and fiscal year, then generate a report on the top 3 departments with the highest average spending over the past 5 years.","CREATE TABLE GovSpending (ID INT PRIMARY KEY, Department VARCHAR(50), FiscalYear INT, Spending DECIMAL); INSERT INTO GovSpending (ID, Department, FiscalYear, Spending) VALUES (1, 'Defense', 2020, 1000000), (2, 'Education', 2020, 500000), (3, 'Health', 2020, 400000), (4, 'Defense', 2019, 950000), (5, 'Education', 2019, 480000), (6, 'Health', 2019, 410000), (7, 'Defense', 2018, 910000), (8, 'Education', 2018, 510000), (9, 'Health', 2018, 420000), (10, 'Defense', 2017, 900000), (11, 'Education', 2017, 520000), (12, 'Health', 2017, 390000);","WITH AvgSpending AS (SELECT Department, AVG(Spending) as AvgSpending FROM GovSpending WHERE FiscalYear >= (SELECT MAX(FiscalYear) - 5 FROM GovSpending) GROUP BY Department) SELECT Department, AvgSpending FROM AvgSpending ORDER BY AvgSpending DESC LIMIT 3;","The SQL query first creates a common table expression (CTE) named AvgSpending to calculate the average spending by each department over the past five fiscal years. This is achieved by filtering the GovSpending table for rows where the fiscal year is greater than or equal to the maximum fiscal year in the table minus five. The AVG function is then used to calculate the average spending for each department, which is grouped by the department name. Finally, the query selects the department name and average spending from the AvgSpending CTE, sorts the results in descending order by average spending, and limits the output to the top three departments."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Show me the total investment in the Artificial Intelligence sector for each year and identify years with over $1 Bn funding.,"CREATE TABLE AIInvestments (InvestmentID INT PRIMARY KEY, Year INT, Sector VARCHAR(50), InvestmentAmount DECIMAL); INSERT INTO AIInvestments (InvestmentID, Year, Sector, InvestmentAmount) VALUES (1, 2018, 'Artificial Intelligence', 500.0), (2, 2019, 'Artificial Intelligence', 800.0), (3, 2020, 'Artificial Intelligence', 1200.0), (4, 2021, 'Artificial Intelligence', 700.0);","SELECT Year, SUM(InvestmentAmount) as TotalInvestment FROM AIInvestments WHERE Sector = 'Artificial Intelligence' GROUP BY Year HAVING SUM(InvestmentAmount) > 1000;","The query first filters rows from the AIInvestments table where the Sector is 'Artificial Intelligence'. It then groups these rows by Year and calculates the total InvestmentAmount for each year using the SUM function. Lastly, it filters the grouped data using the HAVING clause to only include years where the total InvestmentAmount is greater than 1000."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the average age of patients based on the severity of their disease and list the top 3 diseases with the oldest patients on average.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Disease VARCHAR(50)); CREATE TABLE Diseases (DiseaseID INT PRIMARY KEY, Disease VARCHAR(50), Severity VARCHAR(50)); INSERT INTO Patients (PatientID, Age, Disease) VALUES (1, 55, 'Cancer'), (2, 65, 'Diabetes'), (3, 75, 'Heart Disease'), (4, 85, 'Alzheimer'), (5, 60, 'Cancer'); INSERT INTO Diseases (DiseaseID, Disease, Severity) VALUES (1, 'Cancer', 'Severe'), (2, 'Diabetes', 'Moderate'), (3, 'Heart Disease', 'Critical'), (4, 'Alzheimer', 'Critical');","WITH AvgAge AS (SELECT p.Disease, AVG(p.Age) AS AverageAge FROM Patients p JOIN Diseases d ON p.Disease = d.Disease WHERE d.Severity = 'Critical' GROUP BY p.Disease) SELECT Disease, AverageAge FROM AvgAge ORDER BY AverageAge DESC LIMIT 3;","The SQL query first creates a common table expression (CTE) named 'AvgAge' that calculates the average age of patients for each disease where the severity is 'Critical'. It then selects the disease and average age from the CTE, orders the results in descending order by average age, and limits the output to the top 3 diseases."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Find out the top 3 countries with highest sales volumes of hybrid cars in 2019.,"CREATE TABLE HybridCarSales (Country VARCHAR(50), Model VARCHAR(50), Sales INT, Year INT); INSERT INTO HybridCarSales (Country, Model, Sales, Year) VALUES ('USA', 'Model 3', 30000, 2019), ('Germany', 'Prius', 25000, 2019), ('Japan', 'Leaf', 22000, 2019), ('USA', 'Bolt', 18000, 2019), ('Germany', 'Model S', 35000, 2019), ('Japan', 'Prius', 27000, 2019);","WITH RankedCountries AS (SELECT Country, SUM(Sales) AS TotalSales, DENSE_RANK() OVER (ORDER BY SUM(Sales) DESC) AS Rank FROM HybridCarSales WHERE Year = 2019 GROUP BY Country) SELECT Country, TotalSales FROM RankedCountries WHERE Rank <= 3;","The SQL query first creates a common table expression (CTE) to calculate the total sales volumes of hybrid cars for each country in 2019, and also ranks the countries by these volumes using the DENSE_RANK function. The select statement then retrieves the top 3 countries with highest sales volumes from the CTE."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores data on crop yield for different farms, crop types, and years, and then find the farms with the highest total yield for each crop type for the past 5 years.","CREATE TABLE CropYield (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), CropType VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO CropYield (FarmID, FarmName, CropType, Year, Yield) VALUES (1, 'Farm A', 'Corn', 2020, 1200.5), (2, 'Farm B', 'Wheat', 2020, 1180.0), (3, 'Farm C', 'Rice', 2020, 1100.0), (4, 'Farm A', 'Corn', 2021, 1150.7), (5, 'Farm B', 'Wheat', 2021, 950.0);","WITH TotalYield AS (SELECT FarmName, CropType, SUM(Yield) AS TotalYield FROM CropYield WHERE Year >= (SELECT MAX(Year) FROM CropYield)-5 GROUP BY FarmName, CropType) SELECT CropType, Max(TotalYield) AS MaxYield FROM TotalYield GROUP BY CropType;",The query first creates a common table expression (CTE) named TotalYield that groups the yield by farm and crop type for the past 5 years. It then selects the maximum total yield for each crop type from the CTE.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find out the top 5 most popular destinations for bookings in the last quarter, and rollback the transaction if there is any error during the process.","CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, Destination VARCHAR(50), BookingDate DATE); INSERT INTO Bookings (BookingID, CustomerID, Destination, BookingDate) VALUES (1, 123, 'New York', '2022-01-15'), (2, 124, 'Paris', '2022-02-20'), (3, 125, 'New York', '2022-03-01'), (4, 126, 'London', '2022-01-10'), (5, 127, 'London', '2022-02-15');","BEGIN TRANSACTION; TRY BEGIN SELECT TOP 5 Destination, COUNT(*) AS TotalBookings FROM Bookings WHERE BookingDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY Destination ORDER BY TotalBookings DESC; COMMIT; END TRY BEGIN CATCH ROLLBACK; THROW; END CATCH;","The query begins a new transaction and then tries to execute a SELECT statement to find the top 5 most popular destinations based on the number of bookings in the last quarter. The results are sorted in descending order of total bookings. If there is any error during the execution of the SELECT statement, the transaction is rolled back and an error message is thrown."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert a new record into the MusicConsumption table to indicate that a user from Europe listened to the song 'Imagine' by John Lennon for 5 minutes on 25th January 2022, and update the total listen time for that song.","CREATE TABLE MusicConsumption (UserID INT, UserName VARCHAR(50), Region VARCHAR(50), SongName VARCHAR(255), ArtistName VARCHAR(255), ListenTime MINUTES, ListenDate DATE); CREATE TABLE SongDetails (SongName VARCHAR(255), ArtistName VARCHAR(255), TotalListenTime MINUTES);","INSERT INTO MusicConsumption (UserID, UserName, Region, SongName, ArtistName, ListenTime, ListenDate) VALUES (999, 'User X', 'Europe', 'Imagine', 'John Lennon', 5, '2022-01-25'); UPDATE SongDetails SET TotalListenTime = TotalListenTime + 5 WHERE SongName = 'Imagine' AND ArtistName = 'John Lennon';",The first statement inserts the new record into the MusicConsumption table. The second statement updates the total listen time for the song 'Imagine' by John Lennon in the SongDetails table.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average recovery time and most common side effects for patients who underwent chemotherapy and radiation therapy separately and for those who underwent both treatments, classified by age groups.","CREATE TABLE PatientRecord (PatientID INT PRIMARY KEY, Age INT, Treatment VARCHAR(50), RecoveryTime INT, SideEffects VARCHAR(100)); INSERT INTO PatientRecord (PatientID, Age, Treatment, RecoveryTime, SideEffects) VALUES (1, 65, 'Chemotherapy', 120, 'Nausea'), (2, 70, 'Radiation Therapy', 90, 'Fatigue'), (3, 60, 'Chemotherapy and Radiation Therapy', 150, 'Hair Loss'), (4, 55, 'Chemotherapy', 110, 'Nausea'), (5, 50, 'Radiation Therapy', 80, 'Skin Changes');","WITH AgeGroup AS (SELECT CASE WHEN Age BETWEEN 50 AND 60 THEN '50-60' WHEN Age BETWEEN 61 AND 70 THEN '61-70' END AS AgeRange, Treatment, RecoveryTime, SideEffects FROM PatientRecord), AvgRecovery AS (SELECT AgeRange, Treatment, AVG(RecoveryTime) AS AverageRecoveryTime FROM AgeGroup GROUP BY AgeRange, Treatment), CommonSideEffects AS (SELECT AgeRange, Treatment, SideEffects, ROW_NUMBER() OVER (PARTITION BY AgeRange, Treatment ORDER BY COUNT(*) DESC) AS RN FROM AgeGroup GROUP BY AgeRange, Treatment, SideEffects) SELECT AR.AgeRange, AR.Treatment, AR.AverageRecoveryTime, CSE.SideEffects FROM AvgRecovery AR JOIN CommonSideEffects CSE ON AR.AgeRange = CSE.AgeRange AND AR.Treatment = CSE.Treatment WHERE CSE.RN = 1;","The query first creates an 'AgeGroup' common table expression (CTE) to group patient records by age ranges and treatments. Then it creates an 'AvgRecovery' CTE to calculate the average recovery time for each age and treatment group. The 'CommonSideEffects' CTE finds the most common side effects for each group (with 'Nausea' for 'Chemotherapy', 'Fatigue' for 'Radiation Therapy', and 'Hair Loss' for 'Chemotherapy and Radiation Therapy'). The final result joins 'AvgRecovery' and 'CommonSideEffects' on 'AgeRange' and 'Treatment', filtering only the most common side effect for each group."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total government spending in different sectors in each state for the year 2020.,"CREATE TABLE GovtSpending (State VARCHAR(50), Sector VARCHAR(50), Year INT, Spending DECIMAL); INSERT INTO GovtSpending (State, Sector, Year, Spending) VALUES ('California', 'Education', 2020, 10000), ('California', 'Healthcare', 2020, 8000), ('New York', 'Education', 2020, 9000), ('New York', 'Healthcare', 2020, 7000);","SELECT State, Sector, SUM(Spending) AS TotalSpending FROM GovtSpending WHERE Year = 2020 GROUP BY State, Sector;","The SQL query selects the state and sector from the GovtSpending table where the year is 2020, and calculates the total spending in each sector for each state. It groups the results by state and sector."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the information of clothing materials used in different fashion brands and their sustainability index. Then find the top 5 materials that are most commonly used in sustainable fashion.,"CREATE TABLE Materials (MaterialID INT PRIMARY KEY, MaterialName VARCHAR(50)); CREATE TABLE BrandMaterials (BrandID INT, MaterialID INT, UsePercent DECIMAL); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainabilityIndex DECIMAL); INSERT INTO Materials (MaterialID, MaterialName) VALUES (1, 'Cotton'), (2, 'Linen'), (3, 'Silk'), (4, 'Wool'), (5, 'Polyester'); INSERT INTO Brands (BrandID, BrandName, SustainabilityIndex) VALUES (1, 'Brand A', 85.0), (2, 'Brand B', 90.0), (3, 'Brand C', 75.0); INSERT INTO BrandMaterials (BrandID, MaterialID, UsePercent) VALUES (1, 1, 45.0), (1, 2, 30.0), (1, 3, 25.0), (2, 1, 35.0), (2, 4, 40.0), (2, 5, 25.0), (3, 1, 50.0), (3, 2, 35.0), (3, 3, 15.0);","WITH RankedMaterials AS (SELECT M.MaterialName, SUM(BM.UsePercent) AS TotalUse, DENSE_RANK() OVER (ORDER BY SUM(BM.UsePercent) DESC) AS Rank FROM BrandMaterials BM INNER JOIN Materials M ON BM.MaterialID = M.MaterialID INNER JOIN Brands B ON BM.BrandID = B.BrandID WHERE B.SustainabilityIndex > 80 GROUP BY M.MaterialName) SELECT MaterialName, TotalUse FROM RankedMaterials WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) called RankedMaterials, where it sums up the usage percent of each material across different brands, but only for those brands with a Sustainability Index greater than 80. The materials are then ranked based on this summed usage percent in descending order. Finally, it selects the top 5 most commonly used materials in sustainable fashion brands."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,"Generate a report on the average amount of carbon dioxide released by top 5 industries in each country and categorize them by their impact on the environment (High, Medium, Low).","CREATE TABLE Industries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50)); INSERT INTO Industries (IndustryID, IndustryName) VALUES (1, 'Energy'), (2, 'Transportation'), (3, 'Manufacturing'), (4, 'Agriculture'), (5, 'Construction'); CREATE TABLE Emissions (EmissionID INT PRIMARY KEY, IndustryID INT, Country VARCHAR(50), AvgCO2Emission DECIMAL); INSERT INTO Emissions (EmissionID, IndustryID, Country, AvgCO2Emission) VALUES (1, 1, 'USA', 2500.5), (2, 2, 'China', 2000.0), (3, 3, 'India', 1800.0), (4, 4, 'Germany', 1500.7), (5, 5, 'Brazil', 1300.0);","WITH RankedEmissions AS (SELECT Country, IndustryName, AvgCO2Emission, CASE WHEN AvgCO2Emission > 2000 THEN 'High' WHEN AvgCO2Emission > 1500 THEN 'Medium' ELSE 'Low' END AS Impact, DENSE_RANK() OVER (PARTITION BY Country ORDER BY AvgCO2Emission DESC) AS Rank FROM Emissions INNER JOIN Industries ON Emissions.IndustryID = Industries.IndustryID) SELECT Country, IndustryName, AvgCO2Emission, Impact FROM RankedEmissions WHERE Rank <= 5;","The query first joins the Industries and Emissions tables and creates a common table expression (CTE) named RankedEmissions. It categorizes the average CO2 emissions into 'High', 'Medium', or 'Low' impact, and ranks industries in each country based on their average CO2 emission in descending order using the DENSE_RANK function. It then selects the top 5 industries with the highest emissions in each country and their corresponding environmental impact."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,"Show me the top 5 soccer teams with the highest average player salaries, broken down by league and country.","CREATE TABLE SoccerTeams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), League VARCHAR(50), Country VARCHAR(50)); INSERT INTO SoccerTeams (TeamID, TeamName, League, Country) VALUES (1, 'Real Madrid', 'La Liga', 'Spain'), (2, 'Manchester United', 'Premier League', 'England'), (3, 'Bayern Munich', 'Bundesliga', 'Germany'), (4, 'Juventus', 'Serie A', 'Italy'), (5, 'Paris Saint-Germain', 'Ligue 1', 'France'); CREATE TABLE PlayerSalaries (PlayerID INT PRIMARY KEY, TeamID INT, Salary DECIMAL); INSERT INTO PlayerSalaries (PlayerID, TeamID, Salary) VALUES (1, 1, 1000000), (2, 1, 2000000), (3, 2, 1500000), (4, 2, 2500000), (5, 3, 1200000), (6, 4, 1300000), (7, 5, 1100000);","WITH AvgSalaries AS (SELECT ST.TeamID, ST.TeamName, ST.League, ST.Country, AVG(PS.Salary) as AvgSalary FROM SoccerTeams ST JOIN PlayerSalaries PS ON ST.TeamID = PS.TeamID GROUP BY ST.TeamID, ST.TeamName, ST.League, ST.Country), RankedTeams AS (SELECT TeamName, League, Country, AvgSalary, DENSE_RANK() OVER (PARTITION BY Country, League ORDER BY AvgSalary DESC) AS Rank FROM AvgSalaries) SELECT TeamName, League, Country, AvgSalary FROM RankedTeams WHERE Rank <= 5;","The query begins by joining the SoccerTeams and PlayerSalaries tables to calculate the average salary per team. It then uses a common table expression (CTE) to rank these teams within each country and league based on their average salary, in descending order. The final step of the query selects the top 5 teams in each country and league, based on their average salary. This is achieved using the DENSE_RANK() function, which assigns a rank to each row within a partition of the result set."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table to track the total governmental expenditure by department over time, and then provide a ranking of departments based on the increase in total expenditure from the previous year to the current year.","CREATE TABLE GovernmentExpenditure (ExpenditureID INT PRIMARY KEY, Department VARCHAR(50), Year INT, TotalExpenditure DECIMAL); INSERT INTO GovernmentExpenditure (ExpenditureID, Department, Year, TotalExpenditure) VALUES (1, 'Defense', 2019, 500.0), (2, 'Healthcare', 2019, 350.0), (3, 'Education', 2019, 300.0), (4, 'Defense', 2020, 550.0), (5, 'Healthcare', 2020, 400.0), (6, 'Education', 2020, 320.0);","WITH ExpenditureIncrease AS (SELECT Department, Year, TotalExpenditure, LAG(TotalExpenditure) OVER (PARTITION BY Department ORDER BY Year) AS PreviousYearExpenditure FROM GovernmentExpenditure) SELECT Department, Year, TotalExpenditure - PreviousYearExpenditure AS Increase, RANK() OVER (ORDER BY TotalExpenditure - PreviousYearExpenditure DESC) AS Rank FROM ExpenditureIncrease WHERE Year = 2020;","The SQL query creates a common table expression (CTE) named 'ExpenditureIncrease' that retrieves the department, year, total expenditure, and the total expenditure of the previous year for each department. The LAG function is used to get the total expenditure of the previous year. After that, it selects the department, year, and the increase in total expenditure from the previous year to the current year. Using the RANK function, it provides a ranking of departments based on the increase in total expenditure. It only selects the records for the year 2020."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,common table expressions,data retrieval: basic data fetching queries,Find the average age of patients who have been prescribed the drug Lipitor.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(50), Medication VARCHAR(100)); INSERT INTO Patients (PatientID, Age, Gender, Medication) VALUES (1, 67, 'Female', 'Lipitor'), (2, 72, 'Male', 'Lipitor'), (3, 75, 'Female', 'Aspirin'), (4, 68, 'Male', 'Lipitor'), (5, 70, 'Female', 'Aspirin');",WITH LipitorPatients AS (SELECT Age FROM Patients WHERE Medication = 'Lipitor') SELECT AVG(Age) FROM LipitorPatients;,The SQL query first creates a Common Table Expression (CTE) named LipitorPatients that selects the Age of all patients from the Patients table where the Medication is 'Lipitor'. It then calculates the average age of these patients using the AVG function in the SELECT statement.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report displaying the top 5 most profitable sports events globally in the last year and the total revenue from ticket sales and merchandise for each event.,"CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE, Region VARCHAR(50), TicketRevenue DECIMAL, MerchandiseRevenue DECIMAL); INSERT INTO SportsEvents (EventID, EventName, EventDate, Region, TicketRevenue, MerchandiseRevenue) VALUES (1, 'Super Bowl', '2020-02-02', 'North America', 45000000, 15000000), (2, 'UEFA Champions League Final', '2020-08-23', 'Europe', 25000000, 8000000), (3, 'Cricket World Cup Final', '2020-07-14', 'Asia', 15000000, 5000000), (4, 'Rugby World Cup Final', '2019-11-02', 'Oceania', 20000000, 7000000), (5, 'Tokyo Marathon', '2020-03-01', 'Asia', 5000000, 2000000);","WITH EventRevenue AS (SELECT EventName, (TicketRevenue + MerchandiseRevenue) AS TotalRevenue FROM SportsEvents WHERE EventDate BETWEEN '2019-12-31' AND '2020-12-31') SELECT EventName, TotalRevenue FROM EventRevenue ORDER BY TotalRevenue DESC LIMIT 5;","The query starts by defining a common table expression (CTE) named EventRevenue, which adds the ticket and merchandise revenue for each sports event held in the last year. It then orders the events by the total revenue in descending order and uses the LIMIT function to select only the top 5 most profitable events."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store customer reviews for various hotels globally, then display the top 3 hotels with the highest average review score.","CREATE TABLE HotelReviews (ReviewID INT PRIMARY KEY, HotelID INT, HotelName VARCHAR(50), Region VARCHAR(50), CustomerReview DECIMAL); INSERT INTO HotelReviews (ReviewID, HotelID, HotelName, Region, CustomerReview) VALUES (1, 101, 'The Plaza', 'North America', 4.5), (2, 102, 'The Savoy', 'Europe', 4.7), (3, 103, 'The Ritz', 'Asia', 4.2), (4, 104, 'The Grand', 'North America', 4.7), (5, 105, 'The Palace', 'Europe', 4.0);","WITH RankedHotels AS (SELECT HotelName, AVG(CustomerReview) as AvgReview, DENSE_RANK() OVER (ORDER BY AVG(CustomerReview) DESC) AS Rank FROM HotelReviews GROUP BY HotelName) SELECT HotelName, AvgReview FROM RankedHotels WHERE Rank <= 3;","The query first creates a common table expression (CTE) to calculate the average customer review for each hotel. It then ranks these averages in descending order using the DENSE_RANK function. Finally, it selects the top 3 hotels with the highest average review score."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the records for movies with revenue less than 1 million and audience rating less than 3, and then find the top 5 producers who have the most number of such movies.","CREATE TABLE Movie (MovieId INT PRIMARY KEY, MovieName VARCHAR(50), ProducerId INT, Revenue DECIMAL, AudienceRating DECIMAL); INSERT INTO Movie (MovieId, MovieName, ProducerId, Revenue, AudienceRating) VALUES (1, 'Movie1', 101, 500000, 2.5), (2, 'Movie2', 102, 800000, 2.8), (3, 'Movie3', 103, 1500000, 3.2), (4, 'Movie4', 104, 2000000, 4.0), (5, 'Movie5', 105, 600000, 2.9); CREATE TABLE Producer (ProducerId INT PRIMARY KEY, ProducerName VARCHAR(50)); INSERT INTO Producer (ProducerId, ProducerName) VALUES (101, 'Producer1'), (102, 'Producer2'), (103, 'Producer3'), (104, 'Producer4'), (105, 'Producer5');","UPDATE Movie SET Revenue = 1000000, AudienceRating = 3 WHERE Revenue < 1000000 AND AudienceRating < 3; WITH ProducerMovies AS (SELECT ProducerId, COUNT(*) as NumMovies FROM Movie WHERE Revenue = 1000000 AND AudienceRating = 3 GROUP BY ProducerId) SELECT p.ProducerName, pm.NumMovies FROM ProducerMovies pm INNER JOIN Producer p ON pm.ProducerId = p.ProducerId ORDER BY pm.NumMovies DESC LIMIT 5;","The query first updates the revenue and audience rating of movies that have less than 1 million in revenue and an audience rating of less than 3 to 1 million and 3, respectively. Then it creates a common table expression (CTE) that counts the number of such movies for each producer. Finally, it joins the CTE with the Producer table using an INNER JOIN on the ProducerId to associate producer names with the count of their movies, and then it orders the results by the count of movies in descending order to find the top 5 producers with the most such movies."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,"Identify the top 10 most consumed media content in 2020, divided by genre and region.","CREATE TABLE MediaConsumption (ContentID INT PRIMARY KEY, ContentType VARCHAR(50), Genre VARCHAR(50), Region VARCHAR(50), ViewCount INT); INSERT INTO MediaConsumption (ContentID, ContentType, Genre, Region, ViewCount) VALUES (1, 'Movie', 'Drama', 'North America', 10000), (2, 'TV Show', 'Comedy', 'Europe', 12000), (3, 'Movie', 'Action', 'Asia', 15000), (4, 'TV Show', 'Romance', 'North America', 9000), (5, 'Movie', 'Comedy', 'Europe', 8000);","WITH RankedContent AS (SELECT ContentType, Genre, Region, ViewCount, RANK() OVER (PARTITION BY Genre, Region ORDER BY ViewCount DESC) AS Rank FROM MediaConsumption WHERE YEAR = 2020) SELECT ContentType, Genre, Region, ViewCount FROM RankedContent WHERE Rank <= 10;",The query creates a common table expression (CTE) to rank the media content based on view counts in each genre and region. It uses the RANK function to partition the data by genre and region and order it by view count in descending order. The query then selects the top 10 most consumed media content from each genre and region.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the top 5 crops with the highest yield per acre in each region for the last five years, comparing organic and non-organic farming methods.","CREATE TABLE CropYields (ID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Region VARCHAR(50), FarmingMethod VARCHAR(20), YieldPerAcre DECIMAL); INSERT INTO CropYields (ID, CropName, Year, Region, FarmingMethod, YieldPerAcre) VALUES (1, 'Wheat', 2020, 'North America', 'Organic', 30.5), (2, 'Corn', 2020, 'North America', 'Non-Organic', 80.0), (3, 'Rice', 2019, 'Asia', 'Organic', 60.0), (4, 'Soybean', 2021, 'South America', 'Non-Organic', 70.7), (5, 'Cotton', 2018, 'Africa', 'Organic', 40.0);","WITH TopYields AS (SELECT CropName, Year, Region, FarmingMethod, YieldPerAcre, ROW_NUMBER() OVER (PARTITION BY Region, Year, FarmingMethod ORDER BY YieldPerAcre DESC) AS Rank FROM CropYields WHERE Year >= (SELECT MAX(Year) FROM CropYields) - 5) SELECT CropName, Year, Region, FarmingMethod, YieldPerAcre FROM TopYields WHERE Rank <= 5 ORDER BY Region, Year, FarmingMethod;","The SQL query first creates a common table expression (CTE) named TopYields. The CTE assigns a rank to each row within each partition of region, year, and farming method based on yield per acre, in descending order. The query then selects the top 5 crops with the highest yield per acre for each region and farming method in the last five years, and orders the result set by region, year, and farming method."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Show me the top 3 drugs with the highest efficacy for men aged between 40 and 60 years.,"CREATE TABLE Patient (PatientID INT PRIMARY KEY, Gender VARCHAR(10), Age INT); INSERT INTO Patient (PatientID, Gender, Age) VALUES (1, 'Male', 45), (2, 'Female', 55), (3, 'Male', 50), (4, 'Female', 35), (5, 'Male', 58); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), Efficacy DECIMAL); INSERT INTO DrugEfficacy (DrugID, DrugName, Efficacy) VALUES (1, 'Drug A', 80.0), (2, 'Drug B', 85.0), (3, 'Drug C', 90.0), (4, 'Drug D', 75.0), (5, 'Drug E', 88.0); CREATE TABLE Treatment (PatientID INT, DrugID INT, Outcome VARCHAR(50)); INSERT INTO Treatment (PatientID, DrugID, Outcome) VALUES (1, 1, 'Recovered'), (2, 2, 'Recovered'), (3, 3, 'Not Recovered'), (4, 4, 'Recovered'), (5, 5, 'Recovered');","WITH AgeGroup AS (SELECT PatientID FROM Patient WHERE Gender = 'Male' AND Age BETWEEN 40 AND 60), TreatmentData AS (SELECT DrugID FROM Treatment WHERE PatientID IN (SELECT PatientID FROM AgeGroup) AND Outcome = 'Recovered'), RankedDrugs AS (SELECT DrugName, Efficacy, DENSE_RANK() OVER (ORDER BY Efficacy DESC) AS Rank FROM DrugEfficacy WHERE DrugID IN (SELECT DrugID FROM TreatmentData)) SELECT DrugName, Efficacy FROM RankedDrugs WHERE Rank <= 3;","The query first creates a common table expression (CTE) to filter out male patients aged between 40 and 60. It then creates another CTE to fetch the treatment data for these patients where the outcome was 'Recovered'. It further creates a CTE to rank the drugs based on their efficacy in descending order for the treatments that resulted in recovery. Finally, it selects the top 3 most efficacious drugs using the DENSE_RANK function."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows yearly sales of electric vehicle models per region, and then pivot the result to show years as columns with total sales as values.","CREATE TABLE VehicleSales (Year INT, ModelID INT, Region VARCHAR(50), Sales INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), VehicleType VARCHAR(20)); INSERT INTO VehicleSales (Year, ModelID, Region, Sales) VALUES (2020, 1, 'North America', 15000), (2020, 1, 'Europe', 10000), (2020, 2, 'North America', 10000), (2021, 1, 'North America', 20000), (2021, 2, 'North America', 15000), (2021, 1, 'Europe', 15000); INSERT INTO VehicleModels (ModelID, ModelName, VehicleType) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric');","SELECT ModelName, Region, [2020], [2021] FROM (SELECT v.Year, m.ModelName, v.Region, v.Sales FROM VehicleSales v JOIN VehicleModels m ON v.ModelID = m.ModelID WHERE m.VehicleType = 'Electric') AS SourceTable PIVOT (SUM(Sales) FOR Year IN ([2020], [2021])) AS PivotTable;","The query first joins the vehicle sales and models tables to get the total sales of each electric vehicle model per region for each year. It then pivots this table to have one row per model and region, with the years as columns and the total annual sales as the values."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a transaction that inserts a new record into the MediaConsumption, ContentCreation, AudienceEngagement and RevenueStreams tables. If any of the insert operations fail, roll back the transaction.","CREATE TABLE MediaConsumption (MediaID INT PRIMARY KEY, UserID INT, HoursWatched DECIMAL); CREATE TABLE ContentCreation (ContentID INT PRIMARY KEY, CreatorID INT, MediaID INT, HoursCreated DECIMAL); CREATE TABLE AudienceEngagement (EngagementID INT PRIMARY KEY, UserID INT, MediaID INT, EngagementHours DECIMAL); CREATE TABLE RevenueStreams (RevenueID INT PRIMARY KEY, MediaID INT, Revenue DECIMAL);","BEGIN TRANSACTION; INSERT INTO MediaConsumption (MediaID, UserID, HoursWatched) VALUES (1, 1, 10.5); INSERT INTO ContentCreation (ContentID, CreatorID, MediaID, HoursCreated) VALUES (1, 1, 1, 5.0); INSERT INTO AudienceEngagement (EngagementID, UserID, MediaID, EngagementHours) VALUES (1, 1, 1, 8.0); INSERT INTO RevenueStreams (RevenueID, MediaID, Revenue) VALUES (1, 1, 1500.0); IF @@ERROR <> 0 ROLLBACK TRANSACTION; COMMIT TRANSACTION;","The query starts a new transaction. It then inserts new records into the MediaConsumption, ContentCreation, AudienceEngagement, and RevenueStreams tables. If any of the INSERT operations fail, the transaction will be rolled back, undoing any changes. If all INSERT operations are successful, the transaction will be committed, making the changes permanent."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert a new record for a recent movie that just hit a revenue of $50 million in North America, and then show the top 5 movies with the highest total revenue from all regions.","CREATE TABLE MovieRevenues (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), Region VARCHAR(50), Revenue DECIMAL); INSERT INTO MovieRevenues (MovieID, MovieName, Region, Revenue) VALUES (1, 'Avengers: Endgame', 'Europe', 500.5), (2, 'Titanic', 'Asia', 450.0), (3, 'Star Wars: The Force Awakens', 'North America', 415.7), (4, 'Avatar', 'Europe', 400.0), (5, 'Jurassic World', 'Asia', 320.0);","INSERT INTO MovieRevenues (MovieID, MovieName, Region, Revenue) VALUES (6, 'Recent Movie', 'North America', 50.0); WITH TotalRevenues AS (SELECT MovieName, SUM(Revenue) AS TotalRevenue FROM MovieRevenues GROUP BY MovieName) SELECT MovieName, TotalRevenue FROM TotalRevenues ORDER BY TotalRevenue DESC LIMIT 5;","The SQL query first inserts a new record for a recent movie that just generated $50 million in revenue in North America. Then, it creates a common table expression (CTE) that calculates the total revenue for each movie from all regions. Finally, it selects the top 5 movies with the highest total revenues and orders them in descending order."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top five crops with the highest yield in the last year for each region, and if any discrepancies occur, rollback the transaction.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL, Year INT); INSERT INTO CropYield (CropID, CropName, Region, Yield, Year) VALUES (1, 'Wheat', 'North America', 5000, 2022), (2, 'Rice', 'Asia', 8000, 2022), (3, 'Corn', 'South America', 7000, 2022), (4, 'Barley', 'Europe', 6000, 2022), (5, 'Oats', 'Africa', 5500, 2022);","BEGIN TRANSACTION; SAVEPOINT BeforeQuery; WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank FROM CropYield WHERE Year = YEAR(CURDATE())) SELECT CropName, Yield FROM RankedCrops WHERE Rank <= 5; IF @@ERROR <> 0 ROLLBACK TRANSACTION TO BeforeQuery; COMMIT TRANSACTION;","The SQL query begins by establishing a new transaction. A savepoint is created before the query execution to handle any possible error during the execution. A Common Table Expression (CTE) is used to rank crops within each region based on their yield. The DENSE_RANK function is used to assign ranks. Only crops from the current year are considered. The query then selects the top five crops with the highest yield from each region. If an error is detected during the execution, the transaction is rolled back to the savepoint created before the query execution. If no error is detected, the transaction is committed."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Show a report of the average guest rating for each hotel in each region.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Ratings (HotelID INT, GuestRating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, Region) VALUES (1, 'Hotel A', 'North America'), (2, 'Hotel B', 'Europe'), (3, 'Hotel C', 'Asia'), (4, 'Hotel D', 'North America'), (5, 'Hotel E', 'Europe'); INSERT INTO Ratings (HotelID, GuestRating) VALUES (1, 4.5), (2, 4.0), (3, 4.3), (4, 4.7), (5, 4.2);","WITH AverageRatings AS (SELECT HotelID, AVG(GuestRating) as AvgRating FROM Ratings GROUP BY HotelID) SELECT H.HotelName, H.Region, AR.AvgRating FROM Hotels H JOIN AverageRatings AR ON H.HotelID = AR.HotelID ORDER BY H.Region, AR.AvgRating DESC;","The SQL query first creates a common table expression (CTE) named 'AverageRatings' that groups the ratings by hotel and calculates the average guest rating for each hotel. It then joins the 'Hotels' table with the 'AverageRatings' table on the 'HotelID' column, and selects the hotel name, region, and average rating. Finally, it orders the results by region and average rating in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores detailed data on athlete performance, and then display the top 5 players with the highest batting average in the major league baseball.","CREATE TABLE AthletePerformance (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50), League VARCHAR(20), GamesPlayed INT, Hits INT, AtBats INT); INSERT INTO AthletePerformance (PlayerID, PlayerName, Team, League, GamesPlayed, Hits, AtBats) VALUES (1, 'Player A', 'Team 1', 'MLB', 150, 200, 500), (2, 'Player B', 'Team 2', 'MLB', 160, 210, 550), (3, 'Player C', 'Team 3', 'MLB', 140, 190, 480), (4, 'Player D', 'Team 4', 'MLB', 155, 205, 520), (5, 'Player E', 'Team 5', 'MLB', 150, 195, 505);","WITH BattingAverage AS (SELECT PlayerName, Team, (CAST(Hits AS DECIMAL) / AtBats) AS BattingAvg, DENSE_RANK() OVER (ORDER BY (CAST(Hits AS DECIMAL) / AtBats) DESC) AS Rank FROM AthletePerformance WHERE League = 'MLB') SELECT PlayerName, Team, BattingAvg FROM BattingAverage WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) called BattingAverage. In this CTE, it calculates the batting average for each player in the Major League Baseball (MLB) by dividing the number of hits by the number of at-bats. It also ranks the players based on their batting average in descending order using the DENSE_RANK function. The final SELECT statement then displays the top 5 players with the highest batting average from this CTE."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table for tracking customer preferences for different travel destinations, and then provide a list of the top 5 most popular destinations for each customer based on their preferences.","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100)); CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100)); CREATE TABLE Preferences (CustomerID INT, DestinationID INT, Ranking INT, PRIMARY KEY(CustomerID, DestinationID)); INSERT INTO Customers (CustomerID, CustomerName) VALUES (1, 'John Doe'), (2, 'Jane Doe'), (3, 'Mark Smith'); INSERT INTO Destinations (DestinationID, DestinationName) VALUES (1, 'New York'), (2, 'London'), (3, 'Paris'), (4, 'Tokyo'), (5, 'Sydney'); INSERT INTO Preferences (CustomerID, DestinationID, Ranking) VALUES (1, 1, 3), (1, 2, 2), (1, 3, 1), (2, 2, 1), (2, 3, 2), (2, 4, 3), (3, 1, 2), (3, 4, 1), (3, 5, 3);","WITH RankedPreferences AS (SELECT CustomerName, DestinationName, Ranking, DENSE_RANK() OVER (PARTITION BY CustomerID ORDER BY Ranking ASC) AS Rank FROM Preferences JOIN Customers ON Preferences.CustomerID = Customers.CustomerID JOIN Destinations ON Preferences.DestinationID = Destinations.DestinationID) SELECT CustomerName, DestinationName FROM RankedPreferences WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank destinations per customer based on their ranking in ascending order. It then selects the top 5 destinations for each customer using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert the sales figures for the Tesla Model S in the North American region for Q4 2021, then display the top 5 selling vehicle models in North America based on sales figures.","CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SalesPeriod VARCHAR(50), SalesFigure INT); INSERT INTO VehicleSales (SalesID, ModelName, Region, SalesPeriod, SalesFigure) VALUES (1, 'Model S', 'North America', 'Q4 2021', 20500); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), YearOfRelease INT); INSERT INTO VehicleModels (ModelID, ModelName, Manufacturer, YearOfRelease) VALUES (1, 'Model S', 'Tesla', 2020);","INSERT INTO VehicleSales (SalesID, ModelName, Region, SalesPeriod, SalesFigure) VALUES (15, 'Model S', 'North America', 'Q4 2021', 15000); WITH RankedModels AS (SELECT VehicleModels.ModelName, SUM(VehicleSales.SalesFigure) AS TotalSales, DENSE_RANK() OVER (ORDER BY SUM(VehicleSales.SalesFigure) DESC) AS Rank FROM VehicleSales INNER JOIN VehicleModels ON VehicleSales.ModelName = VehicleModels.ModelName WHERE VehicleSales.Region = 'North America' GROUP BY VehicleModels.ModelName) SELECT ModelName, TotalSales FROM RankedModels WHERE Rank <= 5;","The SQL query first inserts the Q4 2021 sales figures for the Tesla Model S in the North American region into the VehicleSales table. It then creates a common table expression (CTE) called 'RankedModels' that groups the sales figures by model name, calculates the total sales for each model in the North America region, and ranks them in descending order using the DENSE_RANK function. Finally, it selects the top 5 selling vehicle models in North America based on the total sales figures."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert the record of the latest blockbuster movie 'Epic Saga' into the Movies table and update ticket sales records in the BoxOffice table. Afterward, provide the total earnings of 'Epic Saga' as compared to the average earnings of other movies in the same genre.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); INSERT INTO Movies (MovieID, Title, Genre) VALUES (1, 'Star Wars', 'Sci-Fi'), (2, 'Avengers', 'Action'), (3, 'Titanic', 'Romance'); CREATE TABLE BoxOffice (MovieID INT, TicketsSold INT, AmountEarned DECIMAL); INSERT INTO BoxOffice (MovieID, TicketsSold, AmountEarned) VALUES (1, 2000000, 20000000.00), (2, 3000000, 30000000.00), (3, 2500000, 25000000.00);","INSERT INTO Movies VALUES (4, 'Epic Saga', 'Action'); INSERT INTO BoxOffice VALUES (4, 5000000, 50000000.00); WITH GenreAvg AS (SELECT Genre, AVG(AmountEarned) AS AvgEarnings FROM Movies INNER JOIN BoxOffice ON Movies.MovieID = BoxOffice.MovieID GROUP BY Genre) SELECT M.Title, B.AmountEarned, G.AvgEarnings FROM Movies M INNER JOIN BoxOffice B ON M.MovieID = B.MovieID INNER JOIN GenreAvg G ON M.Genre = G.Genre WHERE M.Title = 'Epic Saga';","The SQL query first inserts the details of the movie 'Epic Saga' into the Movies table and its ticket sales record into the BoxOffice table. The query then creates a common table expression (CTE) to calculate the average earnings by genre from the Movies and BoxOffice tables. Finally, the query selects the title, earnings of 'Epic Saga', and the average earnings of other movies in the same genre."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,data retrieval: basic data fetching queries,Find the top 5 countries that have made the most progress in reducing CO2 emissions in the last decade.,"CREATE TABLE CO2Emissions (CountryID INT PRIMARY KEY, Country VARCHAR(50), Year INT, Emission DECIMAL); INSERT INTO CO2Emissions (CountryID, Country, Year, Emission) VALUES (1, 'USA', 2010, 500.0), (2, 'USA', 2020, 450.0), (3, 'China', 2010, 700.0), (4, 'China', 2020, 650.0), (5, 'India', 2010, 300.0), (6, 'India', 2020, 250.0), (7, 'Germany', 2010, 200.0), (8, 'Germany', 2020, 150.0), (9, 'Australia', 2010, 100.0), (10, 'Australia', 2020, 80.0), (11, 'Canada', 2010, 120.0), (12, 'Canada', 2020, 90.0);","WITH EmissionChange AS (SELECT Country, (MAX(Emission) - MIN(Emission)) AS Change FROM CO2Emissions GROUP BY Country) SELECT Country, Change FROM EmissionChange ORDER BY Change ASC LIMIT 5;",The query creates a common table expression (CTE) to calculate the change in CO2 emissions for each country over the decade by subtracting the minimum emission (starting of the decade) from the maximum emission (end of the decade). It then selects the top 5 countries with the smallest change (thus the largest reduction in emissions) using the ORDER BY and LIMIT clauses.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert the data for the new clothing collection for summer 2022 in the 'Fashion_Collection' table and delete the records of the 2020 summer collection. Afterwards, find the top 5 selling clothing items from this new collection.","CREATE TABLE Fashion_Collection (ItemID INT PRIMARY KEY, CollectionName VARCHAR(50), SeasonYear VARCHAR(50), Sales INT); INSERT INTO Fashion_Collection (ItemID, CollectionName, SeasonYear, Sales) VALUES (1, 'Spring Collection', '2021', 50000), (2, 'Summer Collection', '2020', 40000), (3, 'Fall Collection', '2021', 30000), (4, 'Winter Collection', '2021', 20000);","INSERT INTO Fashion_Collection (ItemID, CollectionName, SeasonYear, Sales) VALUES (5, 'Summer Collection', '2022', 0); DELETE FROM Fashion_Collection WHERE SeasonYear = '2020'; WITH RankedItems AS (SELECT ItemID, Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS Rank FROM Fashion_Collection WHERE CollectionName = 'Summer Collection' AND SeasonYear = '2022') SELECT ItemID, Sales FROM RankedItems WHERE Rank <= 5;","The SQL query first inserts the new summer 2022 collection into the 'Fashion_Collection' table. It then deletes all the records from the summer 2020 collection. Afterwards, it uses a common table expression (CTE) to rank the items in the new collection based on their sales in descending order. Finally, it selects the top 5 selling items from the new collection."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 5 technology companies in terms of revenue that have launched the most innovative products in the AI sector.,"CREATE TABLE TechCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Revenue DECIMAL); INSERT INTO TechCompanies (CompanyID, CompanyName, Revenue) VALUES (1, 'Company A', 150.5), (2, 'Company B', 180.0), (3, 'Company C', 200.0), (4, 'Company D', 175.0), (5, 'Company E', 190.0); CREATE TABLE AIProducts (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), CompanyID INT, InnovationScore DECIMAL); INSERT INTO AIProducts (ProductID, ProductName, CompanyID, InnovationScore) VALUES (1, 'Product 1', 1, 8.5), (2, 'Product 2', 2, 8.0), (3, 'Product 3', 3, 9.0), (4, 'Product 4', 4, 7.5), (5, 'Product 5', 5, 8.0);","WITH CompanyInnovation AS (SELECT CompanyID, COUNT(*) AS InnovationCount FROM AIProducts GROUP BY CompanyID) SELECT tc.CompanyName, tc.Revenue, ci.InnovationCount FROM TechCompanies AS tc INNER JOIN CompanyInnovation AS ci ON tc.CompanyID = ci.CompanyID ORDER BY tc.Revenue DESC, ci.InnovationCount DESC LIMIT 5;","The query starts by creating a common table expression (CTE) that counts the number of innovative products each company has launched in the AI sector. It then joins this CTE with the 'TechCompanies' table using an INNER JOIN on 'CompanyID'. The result is then sorted in descending order first by company revenue, and then by the count of innovative products. The query finally limits the result to the top 5 companies."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Create a database schema that records various music albums revenue per region and show the top 5 albums that generated the highest total revenue in North America.,"CREATE TABLE MusicAlbums (AlbumID INT PRIMARY KEY, AlbumName VARCHAR(50), ArtistName VARCHAR(50), ReleaseDate DATE); INSERT INTO MusicAlbums (AlbumID, AlbumName, ArtistName, ReleaseDate) VALUES (1, 'Thriller', 'Michael Jackson', '1982-11-30'), (2, 'The Dark Side of the Moon', 'Pink Floyd', '1973-03-01'), (3, 'Abbey Road', 'The Beatles', '1969-09-26'), (4, 'Back in Black', 'AC/DC', '1980-07-25'), (5, 'The Wall', 'Pink Floyd', '1979-11-30'); CREATE TABLE AlbumSales (SalesID INT PRIMARY KEY, AlbumID INT, Region VARCHAR(50), Revenue DECIMAL); INSERT INTO AlbumSales (SalesID, AlbumID, Region, Revenue) VALUES (1, 1, 'North America', 50000000), (2, 2, 'Europe', 45000000), (3, 3, 'Asia', 40000000), (4, 4, 'North America', 55000000), (5, 5, 'Europe', 20000000);","WITH RankedAlbums AS (SELECT AlbumName, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM AlbumSales INNER JOIN MusicAlbums ON AlbumSales.AlbumID=MusicAlbums.AlbumID WHERE Region='North America') SELECT AlbumName, Revenue FROM RankedAlbums WHERE Rank <= 5;","The query starts by joining the 'MusicAlbums' and 'AlbumSales' tables based on the album's ID. Then, it creates a common table expression (CTE) that ranks the albums based on their revenue in North America in descending order. It then selects the top 5 revenue-generating albums in North America using the DENSE_RANK function."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 5 players with the highest average scores in basketball games in 2020.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, Sport VARCHAR(50), Date DATE); CREATE TABLE Score (GameID INT, PlayerID INT, Score INT, PRIMARY KEY (GameID, PlayerID)); INSERT INTO Players (PlayerID, PlayerName, TeamID) VALUES (1, 'LeBron James', 1), (2, 'Stephen Curry', 2), (3, 'Kevin Durant', 3), (4, 'Giannis Antetokounmpo', 4), (5, 'James Harden', 5); INSERT INTO Teams (TeamID, TeamName, Sport) VALUES (1, 'Lakers', 'Basketball'), (2, 'Warriors', 'Basketball'), (3, 'Nets', 'Basketball'), (4, 'Bucks', 'Basketball'), (5, 'Rockets', 'Basketball'); INSERT INTO Games (GameID, Sport, Date) VALUES (1, 'Basketball', '2020-01-01'), (2, 'Basketball', '2020-02-01'), (3, 'Basketball', '2020-03-01'), (4, 'Basketball', '2020-04-01'), (5, 'Basketball', '2020-05-01'); INSERT INTO Score (GameID, PlayerID, Score) VALUES (1, 1, 30), (1, 2, 28), (2, 1, 32), (2, 2, 29), (3, 1, 34), (3, 2, 27), (4, 1, 33), (4, 2, 31), (5, 1, 35), (5, 2, 30);","WITH AvgScores AS (SELECT p.PlayerName, AVG(s.Score) AS AverageScore FROM Players p INNER JOIN Score s ON p.PlayerID = s.PlayerID INNER JOIN Games g ON s.GameID = g.GameID WHERE g.Date BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY p.PlayerName) SELECT PlayerName, AverageScore FROM AvgScores ORDER BY AverageScore DESC LIMIT 5;","The query first creates a common table expression (CTE) called AvgScores. It joins the tables Players, Score, and Games based on the matching player and game IDs. It then calculates the average score for each player for games played in 2020. Finally, it selects the top 5 players with the highest average scores."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store data on crop yield across different regions and then display the top 5 crops with the highest yield per region.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 120.5), (2, 'Rice', 'Asia', 118.0), (3, 'Corn', 'South America', 110.0), (4, 'Barley', 'Europe', 115.7), (5, 'Soybean', 'Africa', 95.0);","WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank FROM CropYield) SELECT CropName, Yield FROM RankedCrops WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) to rank crops based on their yield in each region in descending order using the DENSE_RANK function. It then selects the top 5 crops with the highest yield per region.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete the records of crops that have yield less than the average yield of all crops and then calculate the new average yield per crop type.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (CropID, CropName, Yield) VALUES (1, 'Wheat', 7.5), (2, 'Corn', 10.2), (3, 'Rice', 6.7), (4, 'Soybeans', 7.8), (5, 'Barley', 6.5);","DELETE FROM CropYield WHERE Yield < (SELECT AVG(Yield) FROM CropYield); SELECT CropName, AVG(Yield) AS AverageYield FROM CropYield GROUP BY CropName;","The query first deletes the records of crops that have yield less than the average yield of all crops. It then calculates the new average yield per crop type, by grouping the remaining records according to the CropName and calculating the average yield for each group."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report displaying the annual carbon emissions by sector for each country. The report should be in a pivoted format with sectors as columns and countries as rows.,"CREATE TABLE CarbonEmissions (RecordID INT PRIMARY KEY, Country VARCHAR(50), Sector VARCHAR(50), Year INT, CarbonEmission DECIMAL); INSERT INTO CarbonEmissions (RecordID, Country, Sector, Year, CarbonEmission) VALUES (1, 'USA', 'Transport', 2020, 3000.0), (2, 'USA', 'Industry', 2020, 4000.0), (3, 'Germany', 'Transport', 2020, 1500.0), (4, 'Germany', 'Industry', 2020, 2200.0), (5, 'China', 'Transport', 2020, 5000.0), (6, 'China', 'Industry', 2020, 6000.0);","WITH PivotData AS (SELECT Country, Sector, CarbonEmission FROM CarbonEmissions WHERE Year = 2020) SELECT Country, [Transport], [Industry] FROM (SELECT Country, Sector, CarbonEmission FROM PivotData) AS SourceTable PIVOT (SUM(CarbonEmission) FOR Sector IN ([Transport], [Industry])) AS PivotTable;",The query starts by creating a Common Table Expression (CTE) named 'PivotData' that filters the 'CarbonEmissions' table for records of the year 2020. It then uses the PIVOT operator to transform the 'PivotData' rows into columns. The PIVOT operator sums the 'CarbonEmission' for each 'Sector' in each 'Country'. The result is a table that displays the total carbon emissions for the 'Transport' and 'Industry' sectors for each country.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total quantity of each crop produced in each country, ranked by the total quantity produced across all crops in descending order.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Country VARCHAR(50), Quantity DECIMAL); INSERT INTO CropYields (CropID, CropName, Country, Quantity) VALUES (1, 'Wheat', 'USA', 75000), (2, 'Rice', 'China', 200000), (3, 'Corn', 'USA', 80000), (4, 'Barley', 'Germany', 30000), (5, 'Soybean', 'Brazil', 85000);","WITH TotalYields AS (SELECT Country, SUM(Quantity) as TotalQuantity FROM CropYields GROUP BY Country) SELECT y.Country, c.CropName, c.Quantity FROM CropYields c JOIN TotalYields y ON c.Country = y.Country ORDER BY y.TotalQuantity DESC;","The query creates a common table expression (CTE) to calculate the total quantity of all crops produced in each country. It then joins this CTE to the original CropYields table on the Country column, and selects the country, crop name, and quantity for each crop, ordered by the total quantity of all crops produced in each country in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects",Create a table to track the total goals scored by each football player in different matches and then show the top 5 players with the highest total goals so far.,"CREATE TABLE PlayerGoals (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), MatchID INT, GoalsScored INT); INSERT INTO PlayerGoals (PlayerID, PlayerName, MatchID, GoalsScored) VALUES (1, 'Messi', 101, 3), (2, 'Ronaldo', 102, 2), (3, 'Neymar', 103, 1), (4, 'Mbappe', 104, 2), (5, 'Salah', 105, 1);","WITH RankedPlayers AS (SELECT PlayerName, SUM(GoalsScored) AS TotalGoals, DENSE_RANK() OVER (ORDER BY SUM(GoalsScored) DESC) AS Rank FROM PlayerGoals GROUP BY PlayerName) SELECT PlayerName, TotalGoals FROM RankedPlayers WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) to group all players and calculate the total goals scored by each player. It uses the SUM function to add up all the goals scored by a player. The DENSE_RANK function is used to rank the players based on the total goals scored in descending order. Finally, it selects the top 5 players with the highest total goals using the criteria Rank <= 5 from the CTE."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report displaying the top 10 deadliest forest fires in the United States, categorized by the species most affected and the conservation efforts put in place to protect them.","CREATE TABLE ForestFires (FireID INT PRIMARY KEY, FireName VARCHAR(50), Region VARCHAR(50), NumberDead INT); CREATE TABLE SpeciesAffected (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), FireID INT REFERENCES ForestFires(FireID), NumberDead INT); CREATE TABLE ConservationEfforts (EffortID INT PRIMARY KEY, SpeciesID INT REFERENCES SpeciesAffected(SpeciesID), EffortDetails VARCHAR(100)); INSERT INTO ForestFires (FireID, FireName, Region, NumberDead) VALUES (1, 'FireOne', 'California', 10000), (2, 'FireTwo', 'Oregon', 8000), (3, 'FireThree', 'Washington', 7500), (4, 'FireFour', 'Arizona', 7000), (5, 'FireFive', 'Montana', 6500); INSERT INTO SpeciesAffected (SpeciesID, SpeciesName, FireID, NumberDead) VALUES (1, 'SpeciesOne', 1, 2000), (2, 'SpeciesTwo', 2, 1800), (3, 'SpeciesThree', 3, 1500), (4, 'SpeciesFour', 4, 1400), (5, 'SpeciesFive', 5, 1300); INSERT INTO ConservationEfforts (EffortID, SpeciesID, EffortDetails) VALUES (1, 1, 'EffortOne'), (2, 2, 'EffortTwo'), (3, 3, 'EffortThree'), (4, 4, 'EffortFour'), (5, 5, 'EffortFive');","WITH RankedFires AS (SELECT FireName, NumberDead, DENSE_RANK() OVER (ORDER BY NumberDead DESC) AS Rank FROM ForestFires) SELECT RankedFires.FireName, RankedFires.NumberDead, SpeciesAffected.SpeciesName, ConservationEfforts.EffortDetails FROM RankedFires INNER JOIN SpeciesAffected ON RankedFires.FireID = SpeciesAffected.FireID INNER JOIN ConservationEfforts ON SpeciesAffected.SpeciesID = ConservationEfforts.SpeciesID WHERE RankedFires.Rank <= 10;","The SQL query first creates a common table expression (CTE) that ranks forest fires based on the number of deaths, in descending order. It then performs a join operation between the CTE, the SpeciesAffected table, and the ConservationEfforts table, based on the fire id and species id. Finally, it selects the fire name, number of deaths, species name, and conservation effort details for the top 10 deadliest forest fires."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the most preferred hotel chains by customers in the last year and show the average expenditure of the customers on these chains. Also, roll back the transaction if there is any error.","CREATE TABLE Customers (CustID INT PRIMARY KEY, CustName VARCHAR(50), Age INT, Country VARCHAR(50)); CREATE TABLE HotelChains (ChainID INT PRIMARY KEY, ChainName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Transactions (TransID INT PRIMARY KEY, CustID INT, ChainID INT, Expenditure DECIMAL, TransDate DATE, FOREIGN KEY (CustID) REFERENCES Customers(CustID), FOREIGN KEY (ChainID) REFERENCES HotelChains(ChainID));","BEGIN; SAVEPOINT before_query; SELECT HotelChains.ChainName, AVG(Transactions.Expenditure) AS AvgExpenditure FROM HotelChains INNER JOIN Transactions ON HotelChains.ChainID = Transactions.ChainID INNER JOIN Customers ON Transactions.CustID = Customers.CustID WHERE Transactions.TransDate BETWEEN DATE('2022-01-01') AND DATE('2022-12-31') GROUP BY HotelChains.ChainName ORDER BY AvgExpenditure DESC; IF @@ERROR <> 0 BEGIN ROLLBACK TO before_query; END; COMMIT;","The SQL query begins a transaction and creates a savepoint before executing the main query. It then performs an inner join between the HotelChains, Transactions, and Customers tables. The where clause filters out transactions that occurred in the last year. The result is grouped by the hotel chain name, and the average expenditure of the customers on each hotel chain is calculated. The results are ordered by average expenditure in descending order. If any error occurs during the execution of the query, the transaction will be rolled back to the savepoint. Finally, if no error occurs, the transaction is committed."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the most popular fashion trends based on customer purchases in 2021.,"CREATE TABLE CustomerPurchases (PurchaseID INT PRIMARY KEY, CustomerID INT, ProductID INT, PurchaseDate DATE); CREATE TABLE Products (ProductID INT PRIMARY KEY, Trend VARCHAR(50)); INSERT INTO CustomerPurchases (PurchaseID, CustomerID, ProductID, PurchaseDate) VALUES (1, 101, 201, '2021-01-01'), (2, 102, 202, '2021-02-01'), (3, 103, 203, '2021-03-01'), (4, 104, 201, '2021-04-01'), (5, 105, 202, '2021-05-01'); INSERT INTO Products (ProductID, Trend) VALUES (201, 'Sustainable Fashion'), (202, 'Vintage Clothing'), (203, 'Athleisure');","SELECT Trend, COUNT(*) AS NumberOfPurchases FROM CustomerPurchases JOIN Products ON CustomerPurchases.ProductID = Products.ProductID WHERE YEAR(PurchaseDate) = 2021 GROUP BY Trend ORDER BY NumberOfPurchases DESC;","The query joins the 'CustomerPurchases' and 'Products' tables based on the 'ProductID'. It then filters the purchases made in the year 2021. The query groups the result based on the fashion trend and counts the number of purchases for each trend. Finally, it orders the result in descending order of the count of purchases, thus displaying the most popular fashion trends of 2021."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table tracking the annual carbon emissions of different countries and the amount of forest area. Then, provide the top 10 countries with the highest carbon emissions to forest area ratio.","CREATE TABLE CarbonEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, CarbonEmissions DECIMAL, ForestArea DECIMAL); INSERT INTO CarbonEmissions (CountryID, CountryName, Year, CarbonEmissions, ForestArea) VALUES (1, 'USA', 2021, 5300.5, 3000000), (2, 'China', 2021, 10000.0, 2080000), (3, 'India', 2021, 3000.0, 700000), (4, 'Russia', 2021, 1700.7, 8000000), (5, 'Brazil', 2021, 433.0, 4900000);","WITH RatioCalculation AS (SELECT CountryName, (CarbonEmissions / ForestArea) AS Ratio FROM CarbonEmissions) SELECT CountryName, Ratio FROM RatioCalculation ORDER BY Ratio DESC LIMIT 10;",The query first creates a common table expression (CTE) to calculate the ratio of carbon emissions to forest area for each country. It then orders these ratios in descending order and selects the top 10 countries with the highest ratios.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 5 fashion brands that have the most number of sustainable products and are preferred by customers in Europe and Asia. Exclude the brands that have received any negative feedback in these regions in 2021.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Products (ProductID INT PRIMARY KEY, BrandID INT, IsSustainable BOOLEAN); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, Region VARCHAR(50), SaleDate DATE); CREATE TABLE Feedback (FeedbackID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), FeedbackDate DATE, IsPositive BOOLEAN); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); INSERT INTO Products (ProductID, BrandID, IsSustainable) VALUES (1, 1, true), (2, 2, true), (3, 3, false), (4, 4, true), (5, 5, false); INSERT INTO Sales (SaleID, ProductID, Region, SaleDate) VALUES (1, 1, 'Europe', '2021-01-01'), (2, 2, 'Asia', '2021-02-01'), (3, 3, 'Europe', '2021-03-01'), (4, 4, 'Asia', '2021-04-01'), (5, 5, 'Europe', '2021-05-01'); INSERT INTO Feedback (FeedbackID, BrandID, Region, FeedbackDate, IsPositive) VALUES (1, 1, 'Europe', false), (2, 2, 'Asia', true), (3, 3, 'Europe', true), (4, 4, 'Asia', false), (5, 5, 'Europe', true);","WITH BrandSales AS (SELECT Brands.BrandName, COUNT(*) AS SalesCount FROM Brands JOIN Products ON Brands.BrandID = Products.BrandID JOIN Sales ON Products.ProductID = Sales.ProductID WHERE Sales.Region IN ('Europe', 'Asia') AND Sales.SaleDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY Brands.BrandName), NegativeFeedback AS (SELECT Brands.BrandName FROM Brands JOIN Feedback ON Brands.BrandID = Feedback.BrandID WHERE Feedback.Region IN ('Europe', 'Asia') AND Feedback.FeedbackDate BETWEEN '2021-01-01' AND '2021-12-31' AND Feedback.IsPositive = false) SELECT BrandName, SalesCount FROM BrandSales WHERE BrandName NOT IN (SELECT BrandName FROM NegativeFeedback) ORDER BY SalesCount DESC LIMIT 5;","The query first creates a common table expression (CTE) to calculate the sale counts per brand in Europe and Asia for 2021. It also creates a CTE to get the brands that have received negative feedback in these regions in 2021. The final SELECT statement then extracts the brands with the top 5 sale counts, excluding those that appear in the negative feedback CTE. This is done using a NOT IN clause."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Insert data into the 'FashionTrends' table to mark the trend 'Vintage' as 'Outdated' in the 'Europe' region and then return the average price of all 'Outdated' trends in the 'Europe' region.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), TrendStatus VARCHAR(50), Region VARCHAR(50), AvgPrice DECIMAL); INSERT INTO FashionTrends (TrendID, TrendName, TrendStatus, Region, AvgPrice) VALUES (1, 'Athleisure', 'Current', 'North America', 150.0), (2, 'Neon', 'Current', 'Europe', 100.0), (3, 'Vintage', 'Current', 'Europe', 120.0), (4, 'Minimalistic', 'Current', 'Asia', 90.0), (5, 'Boho', 'Outdated', 'Europe', 70.0);",UPDATE FashionTrends SET TrendStatus = 'Outdated' WHERE TrendName = 'Vintage' AND Region = 'Europe'; SELECT AVG(AvgPrice) FROM FashionTrends WHERE TrendStatus = 'Outdated' AND Region = 'Europe';,The SQL queries first update the status of the trend 'Vintage' to 'Outdated' in the 'Europe' region in the 'FashionTrends' table. The second query then calculates the average price of all 'Outdated' trends in the 'Europe' region.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records","Create a table that stores the number of subscribers for different types of internet services in various regions, and then display the top 5 regions with the most subscribers for Fiber-optic service.","CREATE TABLE InternetSubscribers (SubscriberID INT PRIMARY KEY, ServiceType VARCHAR(50), Region VARCHAR(50), SubscriberCount INT); INSERT INTO InternetSubscribers (SubscriberID, ServiceType, Region, SubscriberCount) VALUES (1, 'Fiber-optic', 'North America', 300000), (2, 'DSL', 'Europe', 200000), (3, 'Satellite', 'Asia', 150000), (4, 'Fiber-optic', 'Europe', 250000), (5, 'Fiber-optic', 'Asia', 220000);","WITH RankedRegions AS (SELECT Region, SubscriberCount, DENSE_RANK() OVER (ORDER BY SubscriberCount DESC) AS Rank FROM InternetSubscribers WHERE ServiceType = 'Fiber-optic') SELECT Region, SubscriberCount FROM RankedRegions WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank regions based on their number of subscribers for the Fiber-optic service in decreasing order. It then selects the top 5 regions with the most Fiber-optic subscribers using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showcasing the top 5 most popular sustainable clothing brands within millennials in Europe based on sales data for the last quarter.,"CREATE TABLE SalesData (SaleID INT PRIMARY KEY, BrandID INT, UserID INT, SaleAmount DECIMAL, SaleDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Users (UserID INT PRIMARY KEY, AgeGroup VARCHAR(50), Region VARCHAR(50)); INSERT INTO SalesData (SaleID, BrandID, UserID, SaleAmount, SaleDate) VALUES (1, 1, 1, 100.5, '2021-09-01'), (2, 2, 2, 150.0, '2021-09-02'), (3, 3, 3, 200.0, '2021-09-03'), (4, 4, 4, 250.7, '2021-09-04'), (5, 5, 5, 300.0, '2021-09-05'); INSERT INTO Brands (BrandID, BrandName, IsSustainable) VALUES (1, 'Brand A', TRUE), (2, 'Brand B', TRUE), (3, 'Brand C', FALSE), (4, 'Brand D', TRUE), (5, 'Brand E', FALSE); INSERT INTO Users (UserID, AgeGroup, Region) VALUES (1, 'Millennials', 'Europe'), (2, 'Millennials', 'Europe'), (3, 'Millennials', 'Europe'), (4, 'Millennials', 'Europe'), (5, 'Millennials', 'Europe');","WITH MillennialsSales AS (SELECT BrandID, SUM(SaleAmount) AS TotalSales FROM SalesData INNER JOIN Users ON SalesData.UserID = Users.UserID WHERE AgeGroup = 'Millennials' AND Region = 'Europe' AND SaleDate >= '2021-07-01' AND SaleDate <= '2021-09-30' GROUP BY BrandID), SustainableBrandSales AS (SELECT MillennialsSales.BrandID, TotalSales FROM MillennialsSales INNER JOIN Brands ON MillennialsSales.BrandID = Brands.BrandID WHERE IsSustainable = TRUE) SELECT BrandName, TotalSales FROM SustainableBrandSales INNER JOIN Brands ON SustainableBrandSales.BrandID = Brands.BrandID ORDER BY TotalSales DESC LIMIT 5;","The query first extracts the sales data of millennials in Europe for the last quarter. This is achieved via an inner join between the SalesData and Users tables. Next, the query filters out the brands which are not sustainable by performing an inner join with the Brands table. Finally, the total sales for each such brand is calculated, and the top 5 brands are returned based on these sales, in descending order. The LIMIT clause is used to restrict the output to the top 5 brands."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the average age of patients diagnosed with diabetes in the last 5 years.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, DiagnosisDate DATE, Diagnosis VARCHAR(50)); INSERT INTO Patients (PatientID, Name, Age, DiagnosisDate, Diagnosis) VALUES (1, 'John Doe', 65, '2018-01-01', 'Diabetes'), (2, 'Jane Doe', 70, '2019-02-02', 'Diabetes'), (3, 'Bob Smith', 55, '2020-03-03', 'Diabetes'), (4, 'Alice Johnson', 60, '2021-04-04', 'Diabetes'), (5, 'Charlie Brown', 62, '2022-05-05', 'Diabetes');","SELECT AVG(Age) as AverageAge FROM Patients WHERE Diagnosis = 'Diabetes' AND DiagnosisDate >= DATEADD(year, -5, GETDATE());",The SQL query calculates the average age of patients who were diagnosed with diabetes in the last 5 years. It filters the 'Patients' table to only include records where the 'Diagnosis' is 'Diabetes' and the 'DiagnosisDate' is within the last 5 years. It then calculates the average of the 'Age' column from the filtered records.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the treatment protocols for patients with major side effects and then find the top 5 drugs causing most side effects.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (PatientID INT, Diagnosis VARCHAR(50), PRIMARY KEY(PatientID, Diagnosis)); CREATE TABLE TreatmentProtocols (PatientID INT, DrugID INT, ProtocolDescription VARCHAR(255), PRIMARY KEY(PatientID, DrugID)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), SideEffects VARCHAR(255)); INSERT INTO PatientDemographics VALUES (1, 45, 'Male'), (2, 50, 'Female'), (3, 60, 'Male'); INSERT INTO MedicalHistory VALUES (1, 'Diabetes'), (2, 'Cancer'), (3, 'Heart Disease'); INSERT INTO TreatmentProtocols VALUES (1, 101, 'Insulin therapy'), (2, 102, 'Chemotherapy'), (3, 103, 'Antiplatelet therapy'); INSERT INTO DrugEfficacy VALUES (101, 'Insulin', 'Hypoglycemia'), (102, 'Cisplatin', 'Nausea, vomiting'), (103, 'Clopidogrel', 'Bleeding');","UPDATE TreatmentProtocols SET ProtocolDescription = 'Adjusted Insulin therapy' WHERE PatientID IN (SELECT PatientID FROM DrugEfficacy WHERE SideEffects LIKE '%major%'); WITH SideEffectDrugs AS (SELECT DrugName, COUNT(*) AS SideEffectCount FROM DrugEfficacy WHERE SideEffects IS NOT NULL GROUP BY DrugName) SELECT DrugName, SideEffectCount FROM SideEffectDrugs ORDER BY SideEffectCount DESC LIMIT 5;","The query first updates the treatment protocols for patients who have experienced major side effects from their medication. It then creates a common table expression (CTE) that counts the number of side effects for each drug. Finally, it selects the top 5 drugs with the most side effects, ordered in descending order by the count of side effects."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Find out the total budget allocated to each department for the fiscal year 2022.,"CREATE TABLE BudgetAllocation (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), FiscalYear INT, AllocatedBudget DECIMAL); INSERT INTO BudgetAllocation (DepartmentID, DepartmentName, FiscalYear, AllocatedBudget) VALUES (1, 'Education', 2022, 5000000.00), (2, 'Health', 2022, 4000000.00), (3, 'Defense', 2022, 8000000.00), (4, 'Transport', 2022, 3000000.00), (5, 'Social Services', 2022, 2000000.00);","SELECT DepartmentName, AllocatedBudget FROM BudgetAllocation WHERE FiscalYear = 2022;",The query selects the department name and budget from the BudgetAllocation table for the fiscal year 2022. It is a simple select query to fetch data from the database based on a condition (FiscalYear = 2022).
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Delete the records of policies that are either too old or no longer relevant and insert the new policy details in the 'Policies' table. Then fetch all the policies that have been passed in the last five years.,"CREATE TABLE Policies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(50), DatePassed DATE, Status VARCHAR(20)); INSERT INTO Policies (PolicyID, PolicyName, DatePassed, Status) VALUES (1, 'Policy A', '2015-01-01', 'Active'), (2, 'Policy B', '2016-01-01', 'Deprecated'), (3, 'Policy C', '2017-01-01', 'Active'), (4, 'Policy D', '2018-01-01', 'Active'), (5, 'Policy E', '2019-01-01', 'Active'), (6, 'Policy F', '2020-01-01', 'Active');","DELETE FROM Policies WHERE DatePassed < DATE_SUB(CURDATE(), INTERVAL 5 YEAR) OR Status = 'Deprecated'; INSERT INTO Policies (PolicyID, PolicyName, DatePassed, Status) VALUES (7, 'Policy G', '2021-01-01', 'Active'); SELECT * FROM Policies WHERE DatePassed > DATE_SUB(CURDATE(), INTERVAL 5 YEAR);","The query first deletes the records from the 'Policies' table where the 'DatePassed' is older than 5 years or the 'Status' is 'Deprecated'. Then it inserts a new record into the 'Policies' table. Finally, it fetches all the records from the 'Policies' table where the 'DatePassed' is within the last 5 years."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Track and analyse the sales of sustainable fashion products in different regions and then calculate the percentage change in sales over the previous quarter, rollback any transactions if there are any errors.","CREATE TABLE Sales (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Region VARCHAR(50), SalesQuarter VARCHAR(20), SalesAmount DECIMAL); INSERT INTO Sales(ProductID, ProductName, Region, SalesQuarter, SalesAmount) VALUES (1, 'Eco Jeans', 'North America', 'Q1', 50000.00), (2, 'Recycled Jacket', 'Europe', 'Q1', 60000.00), (3, 'Organic Cotton Shirt', 'Asia', 'Q1', 70000.00), (1, 'Eco Jeans', 'North America', 'Q2', 55000.00), (2, 'Recycled Jacket', 'Europe', 'Q2', 65000.00), (3, 'Organic Cotton Shirt', 'Asia', 'Q2', 80000.00);","BEGIN; WITH QuarterSales AS (SELECT ProductName, Region, SalesQuarter, SUM(SalesAmount) OVER(PARTITION BY ProductName, Region ORDER BY SalesQuarter ROWS BETWEEN 1 PRECEDING AND CURRENT ROW) AS TotalSales, LAG(SalesAmount) OVER(PARTITION BY ProductName, Region ORDER BY SalesQuarter) AS PreviousSales FROM Sales) SELECT ProductName, Region, SalesQuarter, (TotalSales - PreviousSales)* 100.0 / PreviousSales AS SalesChange FROM QuarterSales; COMMIT;","The SQL query starts a transaction and creates a common table expression (CTE) named QuarterSales to calculate the current and previous quarter sales for each product in each region. It uses the SUM() function combined with the OVER() clause to calculate the total sales of the current and previous quarter, and the LAG() function to retrieve the sales amount of the previous quarter. Then, it calculates the percentage change in sales compared to the previous quarter. If there are any errors during the execution of the SQL query, all changes made in the current transaction are rolled back and the transaction is ended. Otherwise, all changes made in the current transaction are permanently saved in the database and the transaction is ended."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Provide a list of government projects that exceeded their budget by more than 10%, sorted by the amount they went overbudget.","CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), Department VARCHAR(50), Budget DECIMAL, ActualSpending DECIMAL); INSERT INTO GovernmentProjects (ProjectID, ProjectName, Department, Budget, ActualSpending) VALUES (1, 'Infrastructure Improvement', 'Public Works', 1000000, 1200000), (2, 'Education Reform', 'Education', 500000, 600000), (3, 'Healthcare Expansion', 'Health', 2000000, 2200000), (4, 'Public Safety Initiative', 'Justice', 300000, 290000), (5, 'Environmental Protection', 'Environment', 400000, 500000);","SELECT ProjectName, Department, ((ActualSpending - Budget)/Budget)*100 AS OverBudgetPercentage FROM GovernmentProjects WHERE ((ActualSpending - Budget)/Budget)*100 > 10 ORDER BY OverBudgetPercentage DESC;","The query first calculates the percentage that each project went over its budget by subtracting the budget from the actual spending, dividing by the budget, and multiplying by 100. It then filters to only include projects that went over budget by more than 10%. The results are sorted in descending order based on the percentage they went over budget."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Provide information on the top 5 brands with the highest average pricing in sustainable fashion industry.,"CREATE TABLE Brand (BrandId INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE SustainableFashion (ItemId INT PRIMARY KEY, BrandId INT, Price DECIMAL, FOREIGN KEY(BrandId) REFERENCES Brand(BrandId)); INSERT INTO Brand (BrandId, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); INSERT INTO SustainableFashion (ItemId, BrandId, Price) VALUES (1, 1, 200), (2, 2, 150), (3, 3, 250), (4, 4, 300), (5, 5, 400);","WITH AveragePrice AS (SELECT BrandId, AVG(Price) AS AvgPrice FROM SustainableFashion GROUP BY BrandId) SELECT BrandName, AvgPrice FROM Brand INNER JOIN AveragePrice ON Brand.BrandId = AveragePrice.BrandId ORDER BY AvgPrice DESC LIMIT 5;","The query first creates a subquery named 'AveragePrice' that calculates the average price of items for each brand in the SustainableFashion table. Then, it joins the 'AveragePrice' subquery with the 'Brand' table on the 'BrandId' column. Finally, it orders the brands by the average price in descending order and limits the output to the top 5 brands."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about various fashion trends over the years and their sustainability rating. Then, select the top 5 trends which have the highest sustainability rating in the year 2020.","CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Year INT, SustainabilityRating DECIMAL); INSERT INTO FashionTrends (TrendID, TrendName, Year, SustainabilityRating) VALUES (1, 'Minimalism', 2020, 9.5), (2, 'Recycled Materials', 2020, 9.0), (3, 'Organic Cotton', 2020, 8.5), (4, 'Second Hand & Vintage', 2020, 8.0), (5, 'Plant-based Dyes', 2019, 7.5), (6, 'Zero Waste Design', 2019, 7.0);","WITH RankedTrends AS (SELECT TrendName, SustainabilityRating, DENSE_RANK() OVER (ORDER BY SustainabilityRating DESC) AS Rank FROM FashionTrends WHERE Year = 2020) SELECT TrendName, SustainabilityRating FROM RankedTrends WHERE Rank <= 5;","The query first creates a common table expression (CTE) to rank the fashion trends based on their sustainability rating, considering only the trends from 2020. The ranking is done in descending order of their sustainability rating using the DENSE_RANK function. The final step is to select the top 5 most sustainable trends from the ranked list."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the average age of patients who experienced side effects from the drug 'MedX'.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(6)); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50)); CREATE TABLE DrugSideEffects (EffectID INT PRIMARY KEY, ProtocolID INT, SideEffectName VARCHAR(50)); INSERT INTO PatientDemographics (PatientID, Age, Gender) VALUES (1, 45, 'Male'), (2, 37, 'Female'), (3, 50, 'Male'), (4, 29, 'Female'), (5, 58, 'Male'); INSERT INTO TreatmentProtocols (ProtocolID, PatientID, DrugName) VALUES (1, 1, 'MedX'), (2, 2, 'MedX'), (3, 3, 'MedY'), (4, 4, 'MedZ'), (5, 5, 'MedX'); INSERT INTO DrugSideEffects (EffectID, ProtocolID, SideEffectName) VALUES (1, 1, 'Nausea'), (2, 2, 'Headache'), (3, 5, 'Dizziness');",SELECT AVG(Age) as Average_Age FROM PatientDemographics WHERE PatientID IN (SELECT PatientID FROM TreatmentProtocols WHERE DrugName = 'MedX' AND ProtocolID IN (SELECT ProtocolID FROM DrugSideEffects));,"The query first identifies patients who were prescribed the drug 'MedX' and experienced side effects, by using subqueries to filter the 'TreatmentProtocols' and 'DrugSideEffects' tables. It then calculates the average age of these patients by using the AVG function on the 'Age' column in the 'PatientDemographics' table."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show the top 5 crops with the highest yield in the North America region.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Yield) VALUES (1, 'Corn', 'North America', 170.5), (2, 'Soybean', 'North America', 48.0), (3, 'Wheat', 'North America', 44.0), (4, 'Rice', 'North America', 75.0), (5, 'Sorghum', 'North America', 61.0), (6, 'Barley', 'North America', 52.0), (7, 'Oat', 'North America', 68.0);","SELECT CropName, Yield FROM CropYield WHERE Region = 'North America' ORDER BY Yield DESC LIMIT 5;",The query selects the crop name and yield from the CropYield table for the region 'North America'. It then orders the result in descending order by yield and limits the result to the top 5.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Find the top 3 selling car models in Europe and North America, and exclude any models that are top sellers in both regions.","CREATE TABLE CarSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), UnitsSold INT); INSERT INTO CarSales (SalesID, ModelName, Region, UnitsSold) VALUES (1, 'Model S', 'North America', 50000), (2, 'Model 3', 'Europe', 60000), (3, 'Leaf', 'Asia', 70000), (4, 'Bolt', 'North America', 80000), (5, 'Prius', 'Europe', 90000), (6, 'Model S', 'Europe', 100000), (7, 'Leaf', 'North America', 110000);","WITH EuropeTop AS (SELECT ModelName FROM (SELECT ModelName, RANK() OVER (ORDER BY SUM(UnitsSold) DESC) as Rank FROM CarSales WHERE Region = 'Europe' GROUP BY ModelName) WHERE Rank <= 3), NorthAmericaTop AS (SELECT ModelName FROM (SELECT ModelName, RANK() OVER (ORDER BY SUM(UnitsSold) DESC) as Rank FROM CarSales WHERE Region = 'North America' GROUP BY ModelName) WHERE Rank <= 3) SELECT * FROM EuropeTop EXCEPT SELECT * FROM NorthAmericaTop;","The query first identifies the top 3 selling car models in Europe and North America separately, using the RANK() function. It then uses the EXCEPT set operation to exclude any models that are top sellers in both regions. The result is the top selling models that are unique to each region."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the top 5 drugs with the highest efficacy based on patient treatment outcomes, stratified by gender and age group.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Gender VARCHAR(10), Age INT); CREATE TABLE TreatmentOutcomes (OutcomeID INT PRIMARY KEY, PatientID INT, DrugID INT, Efficacy INT); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); INSERT INTO Patients (PatientID, Gender, Age) VALUES (1, 'Male', 45), (2, 'Female', 32), (3, 'Male', 67), (4, 'Female', 29), (5, 'Male', 53); INSERT INTO TreatmentOutcomes (OutcomeID, PatientID, DrugID, Efficacy) VALUES (1, 1, 1, 85), (2, 2, 2, 90), (3, 3, 3, 88), (4, 4, 1, 92), (5, 5, 2, 80); INSERT INTO Drugs (DrugID, DrugName) VALUES (1, 'Drug A'), (2, 'Drug B'), (3, 'Drug C');","WITH RankedDrugs AS (SELECT Drugs.DrugName, Patients.Gender, CASE WHEN Patients.Age BETWEEN 18 AND 40 THEN '18-40' WHEN Patients.Age BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END AS AgeGroup, AVG(TreatmentOutcomes.Efficacy) as AvgEfficacy, DENSE_RANK() OVER (PARTITION BY Patients.Gender, CASE WHEN Patients.Age BETWEEN 18 AND 40 THEN '18-40' WHEN Patients.Age BETWEEN 41 AND 60 THEN '41-60' ELSE '61+' END ORDER BY AVG(TreatmentOutcomes.Efficacy) DESC) AS Rank FROM Patients INNER JOIN TreatmentOutcomes ON Patients.PatientID = TreatmentOutcomes.PatientID INNER JOIN Drugs ON TreatmentOutcomes.DrugID = Drugs.DrugID GROUP BY Drugs.DrugName, Patients.Gender, Patients.Age) SELECT DrugName, Gender, AgeGroup, AvgEfficacy FROM RankedDrugs WHERE Rank <= 5;","This SQL query creates a Common Table Expression (CTE) named 'RankedDrugs' that calculates the average efficacy of each drug, stratified by gender and age group. Age is categorised into three groups: '18-40', '41-60', and '61+'. The query then ranks the drugs within each gender-age group based on their average efficacy, in descending order. Finally, the query selects the top 5 drugs (or fewer if there are fewer than 5) for each gender-age group, based on their efficacy rank."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show the top 10 most popular sustainable fashion brands in Europe based on customer purchases.,"CREATE TABLE SustainableBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), TotalPurchases INT); INSERT INTO SustainableBrands (BrandID, BrandName, Region, TotalPurchases) VALUES (1, 'Brand A', 'Europe', 5000), (2, 'Brand B', 'North America', 6000), (3, 'Brand C', 'Europe', 7000), (4, 'Brand D', 'Asia', 4000), (5, 'Brand E', 'Europe', 5500);","WITH RankedBrands AS (SELECT BrandName, TotalPurchases, DENSE_RANK() OVER (ORDER BY TotalPurchases DESC) AS Rank FROM SustainableBrands WHERE Region='Europe') SELECT BrandName, TotalPurchases FROM RankedBrands WHERE Rank <= 10;",The SQL query creates a common table expression (CTE) to rank sustainable fashion brands in Europe based on their total customer purchases in descending order. It then selects the top 10 most popular brands using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Begin a transaction to insert the latest summer fashion trends in tops from 5 regions into the Trends table, and then update the Inventory table with the new stock quantities. Rollback the transaction if there is an error.","CREATE TABLE Trends (TrendID INT PRIMARY KEY, Category VARCHAR(50), Region VARCHAR(50), TrendDetails VARCHAR(1000), Season VARCHAR(20)); CREATE TABLE Inventory (ItemID INT PRIMARY KEY, TrendID INT, StockQuantity INT); INSERT INTO Trends (TrendID, Category, Region, TrendDetails, Season) VALUES (1, 'Tops', 'North America', 'Floral print blouses', 'Summer'), (2, 'Tops', 'Europe', 'Lace tops', 'Summer'), (3, 'Tops', 'Asia', 'Silk shirts', 'Summer'), (4, 'Tops', 'South America', 'Crop tops', 'Summer'), (5, 'Tops', 'Australia', 'Off-shoulder tops', 'Summer');","BEGIN TRANSACTION; INSERT INTO Inventory (ItemID, TrendID, StockQuantity) VALUES (10, 1, 100), (11, 2, 120), (12, 3, 150), (13, 4, 80), (14, 5, 90); UPDATE Inventory SET StockQuantity = StockQuantity + CASE WHEN TrendID = 1 THEN 20 WHEN TrendID = 2 THEN 30 WHEN TrendID = 3 THEN 40 WHEN TrendID = 4 THEN 50 WHEN TrendID = 5 THEN 60 END WHERE TrendID IN (1,2,3,4,5); IF @@ERROR <> 0 ROLLBACK TRANSACTION; COMMIT TRANSACTION;","The SQL query begins a transaction to insert the latest summer fashion trends in tops from different regions into the Inventory table and then updates the stock quantities for these items. If an error occurs during this process, the transaction is rolled back to prevent inconsistent data. If no errors occur, the transaction is committed to save the changes."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert a new record for the recent government spending on infrastructure in New York, and then select the total government spending in New York.","CREATE TABLE GovernmentSpending (ID INT PRIMARY KEY, Region VARCHAR(50), Category VARCHAR(50), Amount DECIMAL); INSERT INTO GovernmentSpending (ID, Region, Category, Amount) VALUES (1, 'California', 'Healthcare', 50000), (2, 'New York', 'Education', 40000), (3, 'Texas', 'Infrastructure', 35000);","INSERT INTO GovernmentSpending (ID, Region, Category, Amount) VALUES (4, 'New York', 'Infrastructure', 70000); SELECT SUM(Amount) FROM GovernmentSpending WHERE Region = 'New York';",The query first inserts a new record into the GovernmentSpending table indicating the recent government spending on infrastructure in New York. It then selects the total amount of government spending in New York by summing the Amount column for all records where the Region is 'New York'.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Update the average yield data of 'Wheat' for the year 2020 in the 'Yield' table, and then find the top 5 countries with the maximum average yield of 'Wheat' for the year 2020.","CREATE TABLE Yield (ID INT PRIMARY KEY, Crop VARCHAR(50), Country VARCHAR(50), Year INT, AvgYield DECIMAL); INSERT INTO Yield (ID, Crop, Country, Year, AvgYield) VALUES (1, 'Wheat', 'USA', 2019, 8.4), (2, 'Wheat', 'Canada', 2019, 7.5), (3, 'Wheat', 'China', 2019, 7.1), (4, 'Wheat', 'Russia', 2019, 7.0), (5, 'Wheat', 'India', 2019, 6.6);","UPDATE Yield SET AvgYield = 8.7 WHERE Crop = 'Wheat' AND Year = 2020; WITH RankedCountries AS (SELECT Country, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM Yield WHERE Crop = 'Wheat' AND Year = 2020) SELECT Country, AvgYield FROM RankedCountries WHERE Rank <= 5;","The SQL query updates the average yield of 'Wheat' for the year 2020 in the 'Yield' table first. Then, it creates a common table expression (CTE) to rank countries based on their average yield of 'Wheat' for the year 2020 in descending order. It finally selects the top 5 countries with the maximum average yield of 'Wheat' for the year 2020 using the DENSE_RANK function."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the total number of vehicles sold by each manufacturer in Europe in 2020.,"CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, Manufacturer VARCHAR(50), Region VARCHAR(50), Year INT, VehiclesSold INT); INSERT INTO VehicleSales (SalesID, Manufacturer, Region, Year, VehiclesSold) VALUES (1, 'Tesla', 'Europe', 2020, 95000), (2, 'Toyota', 'Europe', 2020, 85000), (3, 'Ford', 'Europe', 2020, 75000), (4, 'Hyundai', 'Europe', 2020, 70000), (5, 'BMW', 'Europe', 2020, 68000);","SELECT Manufacturer, SUM(VehiclesSold) as TotalVehiclesSold FROM VehicleSales WHERE Region = 'Europe' AND Year = 2020 GROUP BY Manufacturer;",The query selects the manufacturer and total number of vehicles sold from the VehicleSales table for the region of Europe and the year 2020. It groups the result by the manufacturer and calculates the total number of vehicles each manufacturer sold in Europe in 2020 using the SUM function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Insert the latest sustainable trends into the database and then retrieve the top 5 trends with the highest popularity score across different regions.,"CREATE TABLE SustainableTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), PopularityScore DECIMAL); INSERT INTO SustainableTrends (TrendID, TrendName, Region, PopularityScore) VALUES (1, 'Eco-Friendly Fabrics', 'North America', 89.5), (2, 'Second-Hand Fashion', 'Europe', 92.3), (3, 'Vegan Leather', 'Asia', 88.0), (4, 'Local Sourcing', 'North America', 87.5), (5, 'Waste Reduction', 'Europe', 91.0);","WITH RankedTrends AS (SELECT TrendName, PopularityScore, DENSE_RANK() OVER (ORDER BY PopularityScore DESC) AS Rank FROM SustainableTrends) SELECT TrendName, PopularityScore FROM RankedTrends WHERE Rank <= 5;",The query first creates a common table expression (CTE) to rank sustainable trends based on their popularity scores in descending order. Then it fetches the top 5 trends with the highest popularity scores using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Display the top 5 brands that have sold the most 'sustainable' items in Europe in 2020.,"CREATE TABLE SalesData (SalesID INT PRIMARY KEY, BrandName VARCHAR(50), ItemType VARCHAR(50), IsSustainable BOOLEAN, Region VARCHAR(50), Year INT, SoldItems INT); INSERT INTO SalesData (SalesID, BrandName, ItemType, IsSustainable, Region, Year, SoldItems) VALUES (1, 'Brand A', 'Dresses', TRUE, 'Europe', 2020, 10000), (2, 'Brand B', 'Shirts', TRUE, 'Europe', 2020, 8000), (3, 'Brand C', 'Pants', TRUE, 'Europe', 2020, 12000), (4, 'Brand D', 'Shoes', TRUE, 'Europe', 2020, 7000), (5, 'Brand E', 'Bags', TRUE, 'Europe', 2020, 6500);","WITH FilteredSales AS (SELECT BrandName, SoldItems FROM SalesData WHERE IsSustainable = TRUE AND Region = 'Europe' AND Year = 2020) SELECT BrandName, SUM(SoldItems) AS TotalSoldItems FROM FilteredSales GROUP BY BrandName ORDER BY TotalSoldItems DESC LIMIT 5;","The query first creates a Common Table Expression (CTE) named FilteredSales that filters the SalesData table for rows where IsSustainable is true, Region is 'Europe', and Year is 2020. Then it groups the FilteredSales CTE by BrandName, calculates the total number of sold items for each brand by summing up the SoldItems column, and sorts the result in descending order of TotalSoldItems. Finally, it limits the output to the top 5 brands."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to track the adoption rate of various emerging technologies in different industries, then write a query to find the top 3 technologies with the highest adoption rate in the healthcare industry.","CREATE TABLE TechAdoption (TechID INT PRIMARY KEY, TechName VARCHAR(50), Industry VARCHAR(50), AdoptionRate DECIMAL); INSERT INTO TechAdoption (TechID, TechName, Industry, AdoptionRate) VALUES (1, 'AI', 'Healthcare', 85.5), (2, 'Blockchain', 'Finance', 75.4), (3, 'IoT', 'Manufacturing', 65.7), (4, 'VR', 'Entertainment', 70.1), (5, 'AI', 'Finance', 80.0);","WITH RankedTech AS (SELECT TechName, AdoptionRate, DENSE_RANK() OVER (ORDER BY AdoptionRate DESC) AS Rank FROM TechAdoption WHERE Industry = 'Healthcare') SELECT TechName, AdoptionRate FROM RankedTech WHERE Rank <= 3;",The query first creates a common table expression (CTE) that ranks the technologies based on their adoption rate in descending order for the healthcare industry. It then uses the DENSE_RANK function to select the top 3 technologies with the highest adoption rate.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Delete the entries from the CitizenDemographics table where the age is less than 18 and update the GovernmentSpending table by reducing the 'Education' spending by 10% of the total removed citizens' 'ProjectedEducationSpending'. Afterwards, return the top 5 regions with the highest 'HealthCare' spending.","CREATE TABLE CitizenDemographics (ID INT PRIMARY KEY, Age INT, Region VARCHAR(50), ProjectedEducationSpending DECIMAL); INSERT INTO CitizenDemographics (ID, Age, Region, ProjectedEducationSpending) VALUES (1, 17, 'Region 1', 5000), (2, 20, 'Region 2', 6000), (3, 16, 'Region 3', 4500), (4, 22, 'Region 4', 5500), (5, 18, 'Region 5', 5200); CREATE TABLE GovernmentSpending (Region VARCHAR(50) PRIMARY KEY, Education DECIMAL, HealthCare DECIMAL); INSERT INTO GovernmentSpending (Region, Education, HealthCare) VALUES ('Region 1', 20000, 30000), ('Region 2', 25000, 35000), ('Region 3', 22000, 33000), ('Region 4', 23000, 34000), ('Region 5', 24000, 32000);","WITH RemovedCitizens AS (DELETE FROM CitizenDemographics WHERE Age < 18 RETURNING *), UpdatedSpending AS (UPDATE GovernmentSpending SET Education = Education - 0.1 * (SELECT SUM(ProjectedEducationSpending) FROM RemovedCitizens WHERE RemovedCitizens.Region = GovernmentSpending.Region) RETURNING *) SELECT Region, HealthCare FROM UpdatedSpending ORDER BY HealthCare DESC LIMIT 5;","The query first deletes all citizens who are less than 18 years old from the CitizenDemographics table and returns the deleted rows. It then uses a subquery to update the 'Education' spending in the GovernmentSpending table. This is done by reducing the 'Education' spending by 10% of the total 'ProjectedEducationSpending' of the removed citizens for each region. The updated GovernmentSpending table is then returned. The final part of the query selects the 'Region' and 'HealthCare' spending from the updated GovernmentSpending table, orders the result by 'HealthCare' spending in descending order, and limits the output to the top 5 entries."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 Artificial Intelligence companies ranked by the number of patents filed in the last five years in the US and EU.,"CREATE TABLE AICompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Region VARCHAR(50)); INSERT INTO AICompanies (CompanyID, CompanyName, Region) VALUES (1, 'Google', 'US'), (2, 'Microsoft', 'US'), (3, 'IBM', 'US'), (4, 'Facebook', 'US'), (5, 'Baidu', 'China'); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyID INT, Year INT); INSERT INTO Patents (PatentID, CompanyID, Year) VALUES (1, 1, 2017), (2, 1, 2018), (3, 1, 2019), (4, 2, 2017), (5, 2, 2018), (6, 3, 2017), (7, 3, 2018), (8, 3, 2019), (9, 3, 2020), (10, 4, 2018), (11, 4, 2019), (12, 4, 2020), (13, 5, 2017), (14, 5, 2018);","WITH PatentsLastFiveYears AS (SELECT CompanyID, COUNT(PatentID) AS PatentCount FROM Patents WHERE Year >= 2017 GROUP BY CompanyID), RankedCompanies AS (SELECT AI.CompanyName, P.PatentCount, DENSE_RANK() OVER (ORDER BY P.PatentCount DESC) AS Rank FROM AICompanies AI JOIN PatentsLastFiveYears P ON AI.CompanyID = P.CompanyID WHERE AI.Region = 'US' OR AI.Region = 'EU') SELECT CompanyName, PatentCount FROM RankedCompanies WHERE Rank <= 5;","The query first creates a common table expression (CTE) to aggregate the number of patents filed by each company in the last five years. Then, it joins the CTE with the AICompanies table to get the company name and filter the companies based on their region. After that, it ranks the companies by the number of patents in descending order using DENSE_RANK function within another CTE. Finally, it selects the top 5 companies based on the ranking."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Find the top selling vehicle models in Asia and Europe and their corresponding sales in North America.,"CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), UnitsSold INT); INSERT INTO VehicleSales (ModelID, ModelName, Region, UnitsSold) VALUES (1, 'Model S', 'North America', 50000), (2, 'Model 3', 'Europe', 40000), (3, 'Leaf', 'Asia', 30000), (4, 'Bolt', 'North America', 20000), (5, 'Prius', 'Europe', 30000), (6, 'Model S', 'Asia', 45000), (7, 'Model 3', 'North America', 35000), (8, 'Leaf', 'Europe', 50000), (9, 'Bolt', 'Asia', 25000), (10, 'Prius', 'North America', 40000);","WITH AsiaEuropeSales AS (SELECT ModelName, SUM(UnitsSold) AS TotalSales FROM VehicleSales WHERE Region IN ('Asia', 'Europe') GROUP BY ModelName HAVING SUM(UnitsSold) > 45000), NAsales AS (SELECT ModelName, SUM(UnitsSold) AS NASales FROM VehicleSales WHERE Region = 'North America' GROUP BY ModelName) SELECT AsiaEuropeSales.ModelName, AsiaEuropeSales.TotalSales, NAsales.NASales FROM AsiaEuropeSales JOIN NAsales ON AsiaEuropeSales.ModelName = NAsales.ModelName;","The query first creates a temporary table AsiaEuropeSales, which contains the total sales of vehicle models in Asia and Europe that sold more than 45,000 units. Then it creates another temporary table NAsales, which contains the total sales of each vehicle model in North America. Finally, it joins these two tables on the ModelName column to get the corresponding sales figures of the top-selling models in Asia and Europe in North America."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store data on customer preferences for various hotel facilities across different regions and generate a report on the top 5 facilities preferred by customers in each region.,"CREATE TABLE HotelPreferences (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), Region VARCHAR(50), FacilityPreference VARCHAR(100)); INSERT INTO HotelPreferences (CustomerID, CustomerName, Region, FacilityPreference) VALUES (1, 'John Doe', 'North America', 'Gym'), (2, 'Jane Smith', 'Europe', 'Pool'), (3, 'Richard Roe', 'Asia', 'Restaurant'), (4, 'Mary Major', 'North America', 'Spa'), (5, 'Eve Minor', 'Europe', 'Bar');","WITH FacilityRank AS (SELECT Region, FacilityPreference, COUNT(*) AS PreferenceCount, RANK() OVER(PARTITION BY Region ORDER BY COUNT(*) DESC) AS Rank FROM HotelPreferences GROUP BY Region, FacilityPreference) SELECT Region, FacilityPreference, PreferenceCount FROM FacilityRank WHERE Rank <= 5;","The query first creates a common table expression (CTE) named FacilityRank. It groups the records by 'Region' and 'FacilityPreference' and counts the number of customers who prefer each facility in each region. It then ranks these grouped records within each region based on the count of customers, in descending order. Finally, it selects the top 5 facility preferences in each region based on this ranking."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store the streaming service engagement data for different movies along with the revenue generated. Use this to find the top 5 movies in terms of user engagement and the associated revenue streams.,"CREATE TABLE MovieEngagement (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), StreamingService VARCHAR(50), UserEngagement INT, Revenue DECIMAL); INSERT INTO MovieEngagement (MovieID, MovieName, StreamingService, UserEngagement, Revenue) VALUES (1, 'Movie A', 'Netflix', 120500, 1000000.00), (2, 'Movie B', 'Amazon Prime', 118000, 950000.00), (3, 'Movie C', 'Disney+', 110000, 1050000.00), (4, 'Movie D', 'Hulu', 115700, 900000.00), (5, 'Movie E', 'HBO Max', 95000, 875000.00);","WITH RankedMovies AS (SELECT MovieName, UserEngagement, Revenue, DENSE_RANK() OVER (ORDER BY UserEngagement DESC) AS Rank FROM MovieEngagement) SELECT MovieName, UserEngagement, Revenue FROM RankedMovies WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank movies based on their user engagement in descending order. It then selects the top 5 movies with the highest user engagement and their associated revenue streams using the DENSE_RANK function.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the total government spending in each department across different regions for the fiscal year 2020, sorted by the highest total spending to the lowest.","CREATE TABLE Departments (DeptID INT PRIMARY KEY, DeptName VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE FiscalYear (YearID INT PRIMARY KEY, Year INT); CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, DeptID INT, RegionID INT, YearID INT, Spending DECIMAL, FOREIGN KEY (DeptID) REFERENCES Departments(DeptID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID), FOREIGN KEY (YearID) REFERENCES FiscalYear(YearID)); INSERT INTO Departments (DeptID, DeptName) VALUES (1, 'Defense'), (2, 'Health'), (3, 'Education'); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North'), (2, 'South'), (3, 'East'), (4, 'West'); INSERT INTO FiscalYear (YearID, Year) VALUES (1, 2020); INSERT INTO GovernmentSpending (SpendingID, DeptID, RegionID, YearID, Spending) VALUES (1, 1, 1, 1, 500.0), (2, 2, 2, 1, 300.0), (3, 3, 3, 1, 200.0), (4, 1, 4, 1, 600.0), (5, 2, 1, 1, 400.0);","SELECT D.DeptName, R.RegionName, SUM(GS.Spending) as TotalSpending FROM GovernmentSpending GS INNER JOIN Departments D ON GS.DeptID = D.DeptID INNER JOIN Regions R ON GS.RegionID = R.RegionID INNER JOIN FiscalYear FY ON GS.YearID = FY.YearID WHERE FY.Year = 2020 GROUP BY D.DeptName, R.RegionName ORDER BY TotalSpending DESC;","The query first joins the GovernmentSpending table with the Departments, Regions and FiscalYear tables on their respective ID fields. Then it filters the results to only include records from the year 2020. It groups the results by department name and region name, and calculates the total spending per group. Finally, it orders the results by total spending in descending order to get the departments with the highest total spending first."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"Show the total carbon emissions per industry in Europe for the year 2020, and only display industries whose total emissions exceed 1000 metric tonnes.","CREATE TABLE IndustryEmissions (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50), Region VARCHAR(50), Year INT, CarbonEmissions DECIMAL); INSERT INTO IndustryEmissions (IndustryID, IndustryName, Region, Year, CarbonEmissions) VALUES (1, 'Automobile', 'Europe', 2020, 1500.5), (2, 'Construction', 'Europe', 2020, 950.0), (3, 'Technology', 'Europe', 2020, 1100.0), (4, 'Agriculture', 'Asia', 2020, 1200.5), (5, 'Manufacturing', 'North America', 2019, 1800.0);","SELECT IndustryName, SUM(CarbonEmissions) as TotalEmissions FROM IndustryEmissions WHERE Region = 'Europe' AND Year = 2020 GROUP BY IndustryName HAVING SUM(CarbonEmissions) > 1000;",The SQL query groups the data by industry name for entries where the region is Europe and the year is 2020. It then calculates the sum of carbon emissions for each industry and filters out the industries where the total emissions exceed 1000 metric tonnes using the HAVING clause.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store hotel guest preferences for different hotel brands and regions, and then display the preference scores pivoted by regions for each hotel brand.","CREATE TABLE GuestPreferences (GuestID INT PRIMARY KEY, GuestName VARCHAR(50), HotelBrand VARCHAR(50), Region VARCHAR(50), PreferenceScore DECIMAL); INSERT INTO GuestPreferences (GuestID, GuestName, HotelBrand, Region, PreferenceScore) VALUES (1, 'John Doe', 'Marriott', 'North America', 8.5), (2, 'Jane Doe', 'Hilton', 'Europe', 9.0), (3, 'Bob Smith', 'Novotel', 'Asia', 7.0), (4, 'Alice Smith', 'Marriott', 'North America', 8.0), (5, 'Charlie Brown', 'Hilton', 'Europe', 9.2);","WITH PivotData AS (SELECT HotelBrand, Region, AVG(PreferenceScore) as AvgScore FROM GuestPreferences GROUP BY HotelBrand, Region) SELECT * FROM PivotData PIVOT ( AVG(AvgScore) FOR Region IN ('North America', 'Europe', 'Asia'));","The query first creates a Common Table Expression(CTE) named PivotData which groups the data by HotelBrand and Region, and calculates the average preference score for each combination. Then, it pivots the data where each unique value in the Region column becomes a new column in the output, and the values in these columns correspond to the average preference score."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert a new record into the MusicStreaming table with the details of a new song, and then find the songs with the highest number of streams in the 'Pop' genre.","CREATE TABLE MusicStreaming (SongID INT PRIMARY KEY, SongName VARCHAR(50), ArtistName VARCHAR(50), Genre VARCHAR(20), Streams INT); INSERT INTO MusicStreaming (SongID, SongName, ArtistName, Genre, Streams) VALUES (1, 'Shape of You', 'Ed Sheeran', 'Pop', 2500000), (2, 'Bad Guy', 'Billie Eilish', 'Pop', 2200000), (3, 'Blinding Lights', 'The Weeknd', 'Pop', 2800000), (4, 'Dance Monkey', 'Tones and I', 'Pop', 2100000), (5, 'Bohemian Rhapsody', 'Queen', 'Rock', 1900000);","INSERT INTO MusicStreaming (SongID, SongName, ArtistName, Genre, Streams) VALUES (6, 'New Song', 'New Artist', 'Pop', 1500000); WITH RankedSongs AS (SELECT SongName, Streams, DENSE_RANK() OVER (ORDER BY Streams DESC) AS Rank FROM MusicStreaming WHERE Genre = 'Pop') SELECT SongName, Streams FROM RankedSongs WHERE Rank <= 5;","The query first inserts a new record into the MusicStreaming table for a song by a new artist in the Pop genre. It then creates a common table expression (CTE) to rank songs within the Pop genre based on their stream counts in descending order. Finally, it selects the songs with the highest stream counts within the Pop genre."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Show me the top 3 selling vehicle models in each region for the year 2020.,"CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SalesYear INT, UnitsSold INT); INSERT INTO VehicleSales (SalesID, ModelName, Region, SalesYear, UnitsSold) VALUES (1, 'Model S', 'North America', 2020, 15000), (2, 'Model 3', 'Europe', 2020, 18000), (3, 'Leaf', 'Asia', 2020, 20000), (4, 'Bolt', 'North America', 2020, 14000), (5, 'Prius', 'Europe', 2020, 16000), (6, 'Mustang', 'North America', 2020, 13000), (7, 'Civic', 'Europe', 2020, 15000), (8, 'Corolla', 'Asia', 2020, 22000), (9, 'Camry', 'North America', 2020, 12000), (10, 'Accord', 'Europe', 2020, 14000);","WITH RankedSales AS (SELECT ModelName, Region, UnitsSold, RANK() OVER (PARTITION BY Region ORDER BY UnitsSold DESC) AS Rank FROM VehicleSales WHERE SalesYear = 2020) SELECT ModelName, Region, UnitsSold FROM RankedSales WHERE Rank <= 3;",The SQL query first creates a common table expression (CTE) to rank the vehicle models based on the units sold in each region for the year 2020. The ranking is done using the RANK() function and is partitioned by the Region. The query then selects the top 3 selling vehicle models in each region by filtering on the rank.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a report detailing the average customer ratings of hotels in different regions, sorted by the categories of services provided in the hotel and the overall rating of the services. Exclude hotels that have fewer than 10 reviews.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, Region) VALUES (1, 'Hotel A', 'North America'), (2, 'Hotel B', 'Europe'), (3, 'Hotel C', 'Asia'), (4, 'Hotel D', 'North America'), (5, 'Hotel E', 'Europe'); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, CustomerRating DECIMAL, ServiceCategory VARCHAR(50)); INSERT INTO Reviews (ReviewID, HotelID, CustomerRating, ServiceCategory) VALUES (1, 1, 4.5, 'Housekeeping'), (2, 2, 4.0, 'Dining'), (3, 3, 3.5, 'Room Service'), (4, 4, 5.0, 'Valet'), (5, 5, 3.0, 'Front Desk');","WITH HotelReviews AS (SELECT HotelName, Region, ServiceCategory, AVG(CustomerRating) AS AverageRating, COUNT(*) AS ReviewCount FROM Hotels JOIN Reviews ON Hotels.HotelID = Reviews.HotelID GROUP BY HotelName, Region, ServiceCategory) SELECT HotelName, Region, ServiceCategory, AverageRating FROM HotelReviews WHERE ReviewCount > 10 ORDER BY ServiceCategory, AverageRating DESC;","The query starts by creating a common table expression (CTE) named HotelReviews that calculates the average rating and the number of reviews for each hotel, grouped by the hotel name, region, and service category. The CTE joins the Hotels table with the Reviews table on the hotel ID. In the main query, the hotels with fewer than 10 reviews are excluded from the result set. Then, the remaining hotels are sorted by the service category and the average rating in descending order."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store international environmental development grants data by sector. For each sector, find the top 5 countries with the highest average funding, and arrange them in a compact, pivoted view.","CREATE TABLE GrantsInfo (GrantID INT PRIMARY KEY, Country VARCHAR(50), Sector VARCHAR(50), FundingAmount DECIMAL); INSERT INTO GrantsInfo (GrantID, Country, Sector, FundingAmount) VALUES (1, 'Kenya', 'Forestry', 2000000.50), (2, 'India', 'Water Management', 3000000.75), (3, 'Brazil', 'Biodiversity', 2500000.00), (4, 'South Africa', 'Carbon Sequestration', 4800000.00), (5, 'China', 'Air Quality', 5200000.00);","WITH RankedCountries AS (SELECT Country, Sector, AVG(FundingAmount) as AvgFunding, DENSE_RANK() OVER (PARTITION BY Sector ORDER BY AVG(FundingAmount) DESC) AS Rank FROM GrantsInfo GROUP BY Country, Sector) SELECT Sector, [1] AS '1st', [2] AS '2nd', [3] AS '3rd', [4] AS '4th', [5] AS '5th' FROM (SELECT Sector, Country, Rank FROM RankedCountries WHERE Rank <= 5) SRC PIVOT (MAX(Country) FOR Rank IN ([1], [2], [3], [4], [5])) AS PVT;","The query starts by creating a common table expression (CTE) to rank countries within each sector based on their average funding. It then selects the top 5 countries for each sector and arranges the countries using the PIVOT operator. The result is a compact, pivoted view where each row represents a sector and the columns represent the rank of the countries in terms of average funding for that sector."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 athletes with the highest increase in fan engagement over the past year.,"CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), TotalEvents INT, TotalWins INT, AverageScore DECIMAL); CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, AthleteID INT, Year INT, Likes INT, Shares INT, Comments INT); CREATE TABLE SportsEconomics (EconomyID INT PRIMARY KEY, Sport VARCHAR(50), Year INT, TotalRevenue DECIMAL, AverageTicketPrice DECIMAL, TotalSponsorships DECIMAL);","WITH YearlyIncrease AS (SELECT AthleteID, (MAX(Likes + Shares + Comments) - MIN(Likes + Shares + Comments)) AS Increase FROM FanEngagement GROUP BY AthleteID ORDER BY Increase DESC) SELECT AP.AthleteName, YI.Increase FROM AthletePerformance AP INNER JOIN YearlyIncrease YI ON AP.AthleteID = YI.AthleteID ORDER BY YI.Increase DESC LIMIT 5;","The statement first creates a common table expression named YearlyIncrease that calculates the increase in fan engagement for each athlete over the past year. The increase is calculated as the difference between the maximum and minimum fan engagement for each athlete, ordered in descending order. The main query then joins the AthletePerformance table with the YearlyIncrease table on the AthleteID field, and returns the top 5 athletes with the highest increase in fan engagement."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the top 5 countries with the highest average yield of wheat per hectare in 2020.,"CREATE TABLE WheatYield (Country VARCHAR(50), Year INT, YieldPerHectare DECIMAL); INSERT INTO WheatYield (Country, Year, YieldPerHectare) VALUES ('USA', 2020, 3.2), ('Canada', 2020, 2.8), ('Australia', 2020, 1.6), ('Russia', 2020, 2.1), ('India', 2020, 2.0), ('Germany', 2020, 3.4), ('France', 2020, 3.0), ('China', 2020, 1.8), ('Ukraine', 2020, 2.4), ('Brazil', 2020, 2.2);","WITH RankedCountries AS (SELECT Country, AVG(YieldPerHectare) as AverageYield, DENSE_RANK() OVER (ORDER BY AVG(YieldPerHectare) DESC) AS Rank FROM WheatYield WHERE Year = 2020 GROUP BY Country) SELECT Country, AverageYield FROM RankedCountries WHERE Rank <= 5;",The SQL query creates a common table expression (CTE) to rank countries based on their average yield per hectare of wheat in 2020 in descending order. It then selects the top 5 countries with the highest average yield using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Show the top 10 countries with the highest carbon dioxide emissions from deforestation and their respective total protected areas in hectares.,"CREATE TABLE Emissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), CO2Emissions BIGINT); INSERT INTO Emissions (CountryID, CountryName, CO2Emissions) VALUES (1, 'Brazil', 500000), (2, 'Indonesia', 450000), (3, 'Congo', 350000), (4, 'Peru', 300000), (5, 'Bolivia', 250000), (6, 'Mexico', 200000), (7, 'Colombia', 180000), (8, 'Venezuela', 160000), (9, 'Paraguay', 150000), (10, 'Argentina', 140000); CREATE TABLE ProtectedAreas (CountryID INT PRIMARY KEY, ProtectedArea BIGINT); INSERT INTO ProtectedAreas (CountryID, ProtectedArea) VALUES (1, 1500000), (2, 1400000), (3, 1300000), (4, 1200000), (5, 1100000), (6, 1000000), (7, 900000), (8, 800000), (9, 700000), (10, 600000);","WITH RankedCountries AS (SELECT E.CountryName, E.CO2Emissions, P.ProtectedArea, RANK() OVER (ORDER BY E.CO2Emissions DESC) AS Rank FROM Emissions E INNER JOIN ProtectedAreas P ON E.CountryID = P.CountryID) SELECT CountryName, CO2Emissions, ProtectedArea FROM RankedCountries WHERE Rank <= 10;","The query first creates a common table expression (CTE) called RankedCountries, which ranks the countries by their CO2 emissions from deforestation in descending order, using a RANK() function. It also includes the corresponding total protected areas from the ProtectedAreas table by joining on the CountryID. The SELECT statement then retrieves the top 10 countries from the RankedCountries CTE along with their CO2 emissions and total protected areas."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 10 emerging technologies that have the highest total investment in the last five years and their corresponding industries.,"CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(50), LaunchYear INT, Industry VARCHAR(50)); INSERT INTO Technologies (TechID, TechName, LaunchYear, Industry) VALUES (1, 'AI', 2016, 'Software'), (2, 'Blockchain', 2008, 'FinTech'), (3, 'Internet of Things', 1999, 'Hardware'), (4, 'Augmented Reality', 1968, 'Gaming'), (5, 'Virtual Reality', 1957, 'Gaming'); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, TechID INT, Amount DECIMAL, Year INT); INSERT INTO Investments (InvestmentID, TechID, Amount, Year) VALUES (1, 1, 5000000, 2021), (2, 2, 2000000, 2020), (3, 3, 3000000, 2019), (4, 4, 1000000, 2018), (5, 5, 1500000, 2017);","WITH TotalInvestments AS (SELECT TechID, SUM(Amount) AS TotalInvestment FROM Investments WHERE Year >= (SELECT MAX(Year) FROM Investments) - 5 GROUP BY TechID) SELECT T.TechName, T.Industry, TI.TotalInvestment FROM Technologies T INNER JOIN TotalInvestments TI ON T.TechID = TI.TechID ORDER BY TI.TotalInvestment DESC LIMIT 10;","The SQL query first creates a Common Table Expression (CTE) named TotalInvestments, which calculates the total amount of investments for each technology in the last five years. Then it performs an INNER JOIN operation between the Technologies and TotalInvestments tables on the TechID field. Finally, it sorts the results in descending order by investment amount and restricts the output to the top 10 entries."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 genres in Europe with the highest average movie ratings for the last 5 years.,"CREATE TABLE MovieRatings (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), Genre VARCHAR(50), Rating DECIMAL, ReleaseYear INT, Region VARCHAR(50)); INSERT INTO MovieRatings (MovieID, MovieName, Genre, Rating, ReleaseYear, Region) VALUES (1, 'Movie A', 'Drama', 8.5, 2017, 'Europe'), (2, 'Movie B', 'Comedy', 7.0, 2018, 'Europe'), (3, 'Movie C', 'Action', 6.5, 2019, 'Europe'), (4, 'Movie D', 'Romance', 7.5, 2020, 'Europe'), (5, 'Movie E', 'Horror', 6.0, 2021, 'Europe');","WITH RatedGenres AS (SELECT Genre, AVG(Rating) AS AvgRating FROM MovieRatings WHERE Region = 'Europe' AND ReleaseYear > YEAR(CURRENT_DATE) - 5 GROUP BY Genre) SELECT Genre, AvgRating FROM RatedGenres ORDER BY AvgRating DESC LIMIT 5;",The query first creates a common table expression (CTE) to calculate the average rating for each movie genre in Europe for the last 5 years. It then selects the top 5 genres with the highest average rating using the ORDER BY and LIMIT clauses.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Find the total number of electric cars sold per brand and display the results in descending order of total sales.,"CREATE TABLE ElectricCars (CarID INT PRIMARY KEY, Brand VARCHAR(50), Model VARCHAR(50), Year YEAR, Sales INT); INSERT INTO ElectricCars (CarID, Brand, Model, Year, Sales) VALUES (1, 'Tesla', 'Model S', 2019, 367500), (2, 'Tesla', 'Model 3', 2020, 442511), (3, 'Nissan', 'Leaf', 2020, 500000), (4, 'Chevrolet', 'Bolt', 2020, 200000), (5, 'Ford', 'Mustang Mach-E', 2021, 50000);","SELECT Brand, SUM(Sales) as TotalSales FROM ElectricCars GROUP BY Brand ORDER BY TotalSales DESC;",The query sums up the total sales for each brand in the ElectricCars table using the GROUP BY clause. Then it orders the results in descending order based on the total sales.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that displays the total sales and average sales prices for electric and non-electric vehicles by manufacturer and region for the last five years.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, Manufacturer VARCHAR(50), ModelName VARCHAR(50), Region VARCHAR(50), SalePrice DECIMAL, SaleDate DATE, IsElectric BOOL); INSERT INTO VehicleSales (SaleID, Manufacturer, ModelName, Region, SalePrice, SaleDate, IsElectric) VALUES (1, 'Tesla', 'Model S', 'North America', 55000, '2016-06-10', TRUE), (2, 'Ford', 'Fiesta', 'Europe', 15000, '2016-07-15', FALSE), (3, 'Nissan', 'Leaf', 'Asia', 30000, '2016-08-20', TRUE), (4, 'Chevrolet', 'Bolt', 'North America', 37000, '2016-09-25', TRUE), (5, 'Toyota', 'Prius', 'Europe', 24000, '2016-10-30', FALSE);","WITH SalesSummary AS (SELECT Manufacturer, Region, IsElectric, COUNT(*) AS TotalSales, AVG(SalePrice) AS AvgSalePrice FROM VehicleSales WHERE SaleDate >= DATEADD(year, -5, GETDATE()) GROUP BY Manufacturer, Region, IsElectric) SELECT Manufacturer, Region, IsElectric, TotalSales, AvgSalePrice FROM SalesSummary PIVOT (SUM(TotalSales), AVG(AvgSalePrice) FOR IsElectric IN (TRUE AS Electric, FALSE AS NonElectric));",The query first creates a common table expression (CTE) to summarize the total sales and average sale prices for electric and non-electric vehicles by manufacturer and region for the last five years. It then uses the PIVOT operator to pivot the results so that the total sales and average sale prices for electric and non-electric vehicles are shown in separate columns for each manufacturer and region.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Get the top 5 technology companies with the most patents in artificial intelligence in 2021, and show the number of patents for each of these companies.","CREATE TABLE TechCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Industry VARCHAR(50)); INSERT INTO TechCompanies (CompanyID, CompanyName, Industry) VALUES (1, 'Apple', 'Technology'), (2, 'Google', 'Technology'), (3, 'Microsoft', 'Technology'), (4, 'IBM', 'Technology'), (5, 'Intel', 'Technology'); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyID INT, Technology VARCHAR(50), Year INT); INSERT INTO Patents (PatentID, CompanyID, Technology, Year) VALUES (1, 1, 'Artificial Intelligence', 2021), (2, 2, 'Artificial Intelligence', 2021), (3, 2, 'Artificial Intelligence', 2021), (4, 3, 'Artificial Intelligence', 2021), (5, 1, 'Artificial Intelligence', 2021), (6, 5, 'Artificial Intelligence', 2021), (7, 4, 'Artificial Intelligence', 2021), (8, 4, 'Artificial Intelligence', 2021), (9, 4, 'Artificial Intelligence', 2021);","WITH AI_Patents AS (SELECT TechCompanies.CompanyName, COUNT(Patents.PatentID) AS PatentCount FROM TechCompanies JOIN Patents ON TechCompanies.CompanyID=Patents.CompanyID WHERE Patents.Technology='Artificial Intelligence' AND Patents.Year=2021 GROUP BY TechCompanies.CompanyName) SELECT CompanyName, PatentCount FROM AI_Patents ORDER BY PatentCount DESC LIMIT 5;","The query first creates a common table expression (CTE) named AI_Patents. It joins the TechCompanies and Patents tables, and then groups by company name to count the number of AI patents. It filters for patents in the field of 'Artificial Intelligence' and those issued in the year 2021. After creating the CTE, it selects the company name and patent count from AI_Patents, orders the results by patent count in descending order, and finally limits the output to the top 5 companies."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Add the latest vehicle sales data for 'Tesla Model 3' in the 'North America' region.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, SaleDate, UnitsSold) VALUES (1, 'Model S', 'North America', '2020-12-31', 50000), (2, 'Model 3', 'Europe', '2020-12-31', 40000), (3, 'Leaf', 'Asia', '2020-12-31', 30000), (4, 'Bolt', 'North America', '2020-12-31', 20000), (5, 'Prius', 'Europe', '2020-12-31', 10000);","INSERT INTO VehicleSales (SaleID, ModelName, Region, SaleDate, UnitsSold) VALUES ((SELECT MAX(SaleID) FROM VehicleSales) + 1, 'Tesla Model 3', 'North America', CURRENT_DATE, 60000);","This SQL query first calculates the maximum value of SaleID in the VehicleSales table and adds 1 to it to generate a new unique identifier. It then inserts a new record into the VehicleSales table, setting the ModelName to 'Tesla Model 3', the Region to 'North America', the SaleDate to the current date, and the UnitsSold to 60000."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Find the top 10 districts with the highest total government expenditure for education and infrastructure, and how this expenditure compares to the average spending per district.","CREATE TABLE Expenditure(DistrictID INT PRIMARY KEY, DistrictName VARCHAR(50), EducationExpenditure DECIMAL, InfrastructureExpenditure DECIMAL); INSERT INTO Expenditure (DistrictID, DistrictName, EducationExpenditure, InfrastructureExpenditure) VALUES (1, 'District A', 5000000, 2000000), (2, 'District B', 3000000, 1500000), (3, 'District C', 4000000, 2500000), (4, 'District D', 3500000, 2100000), (5, 'District E', 4500000, 2200000);","WITH TotalExpenditure AS (SELECT DistrictName, (EducationExpenditure + InfrastructureExpenditure) AS TotalExpenditure FROM Expenditure), AverageExpenditure AS (SELECT AVG(EducationExpenditure + InfrastructureExpenditure) AS AvgExpenditure FROM Expenditure), RankedDistricts AS (SELECT DistrictName, TotalExpenditure, DENSE_RANK() OVER (ORDER BY TotalExpenditure DESC) AS Rank FROM TotalExpenditure) SELECT r.DistrictName, r.TotalExpenditure, a.AvgExpenditure FROM RankedDistricts r, AverageExpenditure a WHERE Rank <= 10;","The query first creates a common table expression (CTE) to calculate the total expenditure (Education + Infrastructure) for each district. It then calculates the average total expenditure across all districts and ranks districts in descending order of total expenditure. Finally, it retrieves the top 10 districts, along with their total expenditure and average expenditure across all districts."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find out the average carbon footprint for each type of activity in the past year and return those that have a carbon footprint greater than 5000.,"CREATE TABLE Activities (ActivityID INT PRIMARY KEY, ActivityType VARCHAR(50), CarbonFootprint DECIMAL, ActivityDate DATE); INSERT INTO Activities (ActivityID, ActivityType, CarbonFootprint, ActivityDate) VALUES (1, 'Transport', 1200, '2020-01-01'), (2, 'Manufacturing', 7500, '2020-05-01'), (3, 'Agriculture', 5000, '2020-06-01'), (4, 'Energy Production', 10000, '2020-03-01'), (5, 'Waste Management', 3000, '2020-02-01');","WITH YearlyActivities AS (SELECT ActivityType, AVG(CarbonFootprint) AS AvgCarbonFootprint FROM Activities WHERE ActivityDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY ActivityType) SELECT ActivityType, AvgCarbonFootprint FROM YearlyActivities WHERE AvgCarbonFootprint > 5000;",The query first creates a common table expression (CTE) that groups activities by type and calculates the average carbon footprint for each type over the past year. It then selects those activities whose average carbon footprint is greater than 5000.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Find the top 5 popular sustainable fashion brands among millennials in North America and Europe, based on the number of purchases made in the last year.","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Age INT, Region VARCHAR(50)); INSERT INTO Customers (CustomerID, Age, Region) VALUES (1, 24, 'North America'), (2, 30, 'Europe'), (3, 26, 'North America'), (4, 32, 'Europe'), (5, 28, 'North America'); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, CustomerID INT, BrandID INT, PurchaseDate DATE); INSERT INTO Purchases (PurchaseID, CustomerID, BrandID, PurchaseDate) VALUES (1, 1, 1, '2020-07-20'), (2, 2, 2, '2020-08-15'), (3, 3, 1, '2020-09-10'), (4, 4, 2, '2020-10-05'), (5, 5, 3, '2020-11-30'); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainabilityScore DECIMAL); INSERT INTO Brands (BrandID, BrandName, SustainabilityScore) VALUES (1, 'Brand A', 88.5), (2, 'Brand B', 90.0), (3, 'Brand C', 85.0), (4, 'Brand D', 87.5), (5, 'Brand E', 90.5);","WITH BrandPurchases AS (SELECT b.BrandName, COUNT(p.PurchaseID) AS Purchases FROM Purchases p JOIN Customers c ON p.CustomerID = c.CustomerID JOIN Brands b ON p.BrandID = b.BrandID WHERE c.Age <= 30 AND (c.Region = 'North America' OR c.Region = 'Europe') AND p.PurchaseDate > '2019-12-31' GROUP BY b.BrandName) SELECT BrandName, Purchases FROM BrandPurchases ORDER BY Purchases DESC LIMIT 5;","The query begins by creating a common table expression (CTE) named BrandPurchases. This CTE aggregates the number of purchases made by millennial customers (age <= 30) from North America and Europe for each brand, during the past year. It does this by joining the Purchases, Customers, and Brands tables together and grouping by the brand name. The final SELECT statement then retrieves the brand name and the number of purchases from the CTE and orders the brands in descending order by the number of purchases. It then limits the output to the top 5 brands."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Find out the top 5 music artists in terms of total revenue generated from their album sales and concerts in the USA for the year 2020.,"CREATE TABLE Artists (ArtistID INT PRIMARY KEY, ArtistName VARCHAR(50)); CREATE TABLE AlbumSales (AlbumID INT PRIMARY KEY, ArtistID INT, Sales_USA DECIMAL, Year INT); CREATE TABLE Concerts (ConcertID INT PRIMARY KEY, ArtistID INT, Revenue DECIMAL, Year INT); INSERT INTO Artists (ArtistID, ArtistName) VALUES (1, 'Artist1'), (2, 'Artist2'), (3, 'Artist3'), (4, 'Artist4'), (5, 'Artist5'); INSERT INTO AlbumSales (AlbumID, ArtistID, Sales_USA, Year) VALUES (1, 1, 3000000, 2020), (2, 2, 2000000, 2020), (3, 3, 1500000, 2020), (4, 4, 1000000, 2020), (5, 5, 500000, 2020); INSERT INTO Concerts (ConcertID, ArtistID, Revenue, Year) VALUES (1, 1, 5000000, 2020), (2, 2, 4000000, 2020), (3, 3, 3500000, 2020), (4, 4, 3000000, 2020), (5, 5, 2500000, 2020);","WITH AlbumRevenue AS (SELECT ArtistID, SUM(Sales_USA) AS TotalAlbumRevenue FROM AlbumSales WHERE Year = 2020 GROUP BY ArtistID), ConcertRevenue AS (SELECT ArtistID, SUM(Revenue) AS TotalConcertRevenue FROM Concerts WHERE Year = 2020 GROUP BY ArtistID) SELECT A.ArtistName, (AR.TotalAlbumRevenue + CR.TotalConcertRevenue) AS TotalRevenue FROM Artists A INNER JOIN AlbumRevenue AR ON A.ArtistID = AR.ArtistID INNER JOIN ConcertRevenue CR ON A.ArtistID = CR.ArtistID ORDER BY TotalRevenue DESC LIMIT 5;",The query makes use of two common table expressions (CTEs) to calculate the total album sales and concert revenue for each artist for the year 2020. These CTEs are then inner joined with the Artists table on the ArtistID. The total revenue for each artist is calculated as the sum of album sales and concert revenue. The results are ordered in descending order of total revenue and limited to the top 5 artists.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Insert data into the FashionTrends, FashionConsumers and FashionSustainability tables. Then, provide the top 5 most popular sustainable fashion items among consumers aged 18-25.","CREATE TABLE FashionTrends (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), TrendPopularity INT); CREATE TABLE FashionConsumers (ConsumerID INT PRIMARY KEY, Age INT, FavoriteItem VARCHAR(50)); CREATE TABLE FashionSustainability (ItemID INT, SustainabilityScore DECIMAL); INSERT INTO FashionTrends (ItemID, ItemName, TrendPopularity) VALUES (1, 'Organic Cotton T-Shirt', 200), (2, 'Recycled Denim Jeans', 180), (3, 'Bamboo Fabric Dress', 220), (4, 'Reclaimed Leather Jacket', 175), (5, 'Eco-friendly Sneakers', 210); INSERT INTO FashionConsumers (ConsumerID, Age, FavoriteItem) VALUES (1, 22, 'Organic Cotton T-Shirt'), (2, 24, 'Recycled Denim Jeans'), (3, 20, 'Bamboo Fabric Dress'), (4, 23, 'Reclaimed Leather Jacket'), (5, 21, 'Eco-friendly Sneakers'); INSERT INTO FashionSustainability (ItemID, SustainabilityScore) VALUES (1, 95.0), (2, 92.5), (3, 90.0), (4, 91.0), (5, 94.5);","WITH RankedItems AS (SELECT f1.ItemName, f1.TrendPopularity, f2.SustainabilityScore, DENSE_RANK() OVER (ORDER BY f1.TrendPopularity DESC) AS Rank FROM FashionTrends f1 JOIN FashionSustainability f2 ON f1.ItemID = f2.ItemID JOIN FashionConsumers f3 ON f1.ItemName = f3.FavoriteItem WHERE f3.Age BETWEEN 18 AND 25) SELECT ItemName, TrendPopularity, SustainabilityScore FROM RankedItems WHERE Rank <= 5;","The query first inserts data into the FashionTrends, FashionConsumers, and FashionSustainability tables. It then creates a common table expression (CTE) to rank fashion items based on their popularity among consumers aged 18-25, and their sustainability score. Finally, it selects the top 5 items using the DENSE_RANK function."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Insert values into the 'Sales' and 'Vehicles' tables for a new electric model that has been launched in Europe and North America. Then, calculate the total sales for this model in these regions, comparing it against the overall sales of all electric models in the market.","CREATE TABLE Sales (SaleID INT PRIMARY KEY, ModelID INT, Region VARCHAR(50), UnitsSold INT); CREATE TABLE Vehicles (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO Vehicles (ModelID, ModelName, Type) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Bolt', 'Electric'), (5, 'Prius', 'Electric'), (6, 'New Model', 'Electric');","INSERT INTO Sales (SaleID, ModelID, Region, UnitsSold) VALUES (1, 6, 'Europe', 5000), (2, 6, 'North America', 4500); WITH TotalSales AS (SELECT SUM(UnitsSold) AS TotalUnits FROM Sales WHERE ModelID = 6 AND Region IN ('Europe', 'North America')), TotalElectricSales AS (SELECT SUM(UnitsSold) AS TotalElecUnits FROM Sales INNER JOIN Vehicles ON Sales.ModelID = Vehicles.ModelID WHERE Type = 'Electric') SELECT (TotalUnits / TotalElecUnits) * 100 AS SalesPercentage FROM TotalSales, TotalElectricSales;","The SQL statement first inserts the sales data for the new model in Europe and North America. Then, in the subqueries, it calculates the total units sold for this new model in these regions (TotalSales) and the total units sold for all electric models (TotalElectricSales). Finally, it calculates the percentage of sales of the new model compared to the total sales of all electric models by dividing the total units sold by the total electric units sold and multiplying by 100."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the top 5 crops with the highest yield per region in the last year, along with the farming practices used for each.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL, Year INT); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, CropID INT, PracticeName VARCHAR(50), Effectiveness DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield, Year) VALUES (1, 'Corn', 'North America', 150.5, 2021), (2, 'Rice', 'Asia', 180.0, 2021), (3, 'Wheat', 'Europe', 130.0, 2021), (4, 'Soybean', 'South America', 120.7, 2021), (5, 'Potato', 'North America', 160.0, 2021); INSERT INTO FarmingPractices (PracticeID, CropID, PracticeName, Effectiveness) VALUES (1, 1, 'Irrigation', 0.85), (2, 2, 'Crop Rotation', 0.95), (3, 3, 'Fertilization', 0.90), (4, 4, 'Pest Control', 0.80), (5, 5, 'Irrigation', 0.85);","WITH RankedCrops AS (SELECT CropName, Region, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank FROM CropYields WHERE Year = 2021) SELECT RankedCrops.CropName, RankedCrops.Region, RankedCrops.Yield, FarmingPractices.PracticeName FROM RankedCrops JOIN FarmingPractices ON RankedCrops.CropID = FarmingPractices.CropID WHERE Rank <= 5;","The query first creates a common table expression (CTE) that ranks crops within each region based on their yield in descending order for the last year. Then it joins this ranking with the farming practices table to retrieve the practices used for each crop. Finally, it selects from this join the top 5 crops with the highest yield in each region along with their corresponding farming practices."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report detailing the highest yielding crops in each region for the past year.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); CREATE TABLE CropSalePrices (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), SalePrice DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 2500), (2, 'Corn', 'Europe', 2300), (3, 'Rice', 'Asia', 5000), (4, 'Barley', 'North America', 2200), (5, 'Sorghum', 'Europe', 2100); INSERT INTO CropSalePrices (CropID, CropName, Region, SalePrice) VALUES (1, 'Wheat', 'North America', 1.2), (2, 'Corn', 'Europe', 1.0), (3, 'Rice', 'Asia', 0.8), (4, 'Barley', 'North America', 1.1), (5, 'Sorghum', 'Europe', 1.3);","WITH CropIncome AS (SELECT CropYields.CropName, CropYields.Region, (CropYields.Yield * CropSalePrices.SalePrice) AS Income FROM CropYields JOIN CropSalePrices ON CropYields.CropID = CropSalePrices.CropID), RankedCrops AS (SELECT CropName, Region, Income, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Income DESC) AS Rank FROM CropIncome) SELECT CropName, Region FROM RankedCrops WHERE Rank = 1;","The query first creates a common table expression (CTE) called CropIncome to store the income from each crop in each region, calculated as the yield times the sale price. It then creates a second CTE called RankedCrops that ranks the crops within each region by income in descending order using the DENSE_RANK function. The final SELECT statement returns the crop with the highest income in each region, which is determined by where the rank is 1."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Show me the top 5 crops with the highest yield from farms in Asia.,"CREATE TABLE FarmData (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), FarmID INT, Yield DECIMAL); INSERT INTO FarmData (FarmID, FarmName, Region) VALUES (1, 'Farm 1', 'Asia'), (2, 'Farm 2', 'Europe'), (3, 'Farm 3', 'Asia'), (4, 'Farm 4', 'North America'), (5, 'Farm 5', 'Asia'); INSERT INTO CropYield (CropID, CropName, FarmID, Yield) VALUES (1, 'Wheat', 1, 5000), (2, 'Rice', 2, 3000), (3, 'Corn', 3, 4000), (4, 'Soybeans', 4, 6000), (5, 'Wheat', 5, 5500);","SELECT CropName, SUM(Yield) as TotalYield FROM CropYield WHERE FarmID IN (SELECT FarmID FROM FarmData WHERE Region = 'Asia') GROUP BY CropName ORDER BY TotalYield DESC LIMIT 5;","The query first selects the 'FarmID' from the 'FarmData' table where the 'Region' is Asia. It then selects 'CropName' from the 'CropYield' table where 'FarmID' matches the result from the first selection. It sums up the 'Yield' for each 'CropName' and orders them in descending order. Finally, it limits the result to the top 5 crops with the highest yield."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find out the top 5 most purchased sustainable clothing brands in 2022.,"CREATE TABLE SustainableBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), PurchaseCount INT, Year INT); INSERT INTO SustainableBrands (BrandID, BrandName, PurchaseCount, Year) VALUES (1, 'Brand A', 5000, 2022), (2, 'Brand B', 4500, 2022), (3, 'Brand C', 4000, 2022), (4, 'Brand D', 3500, 2022), (5, 'Brand E', 3000, 2022), (6, 'Brand F', 2500, 2022);","SELECT BrandName, PurchaseCount FROM SustainableBrands WHERE Year = 2022 ORDER BY PurchaseCount DESC LIMIT 5;",The query is selecting the brand name and purchase count from the SustainableBrands table for the year 2022. It then orders the results by the purchase count in descending order to get the top 5 most purchased brands. The LIMIT clause is used to limit the results to only the top 5.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Update the table to reflect new crop yield data for the year 2022, then find the top 3 regions with the highest average yield per hectare for wheat in that year.","CREATE TABLE CropYield (ID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, YieldPerHectare DECIMAL); INSERT INTO CropYield (ID, CropName, Region, Year, YieldPerHectare) VALUES (1, 'Wheat', 'North America', 2021, 7.5), (2, 'Wheat', 'Europe', 2021, 8.0), (3, 'Wheat', 'Asia', 2021, 6.0), (4, 'Wheat', 'Africa', 2021, 5.0), (5, 'Wheat', 'Australia', 2021, 5.5);","UPDATE CropYield SET YieldPerHectare = CASE WHEN Region = 'North America' THEN 7.6 WHEN Region = 'Europe' THEN 8.2 WHEN Region = 'Asia' THEN 6.5 WHEN Region = 'Africa' THEN 5.3 WHEN Region = 'Australia' THEN 5.8 END WHERE CropName = 'Wheat' AND Year = 2021; WITH RankedRegions AS (SELECT Region, AVG(YieldPerHectare) as AvgYield, RANK() OVER (ORDER BY AVG(YieldPerHectare) DESC) AS Rank FROM CropYield WHERE CropName = 'Wheat' AND Year = 2022 GROUP BY Region) SELECT Region, AvgYield FROM RankedRegions WHERE Rank <= 3;","The query first updates the yield per hectare for the wheat crop in various regions for the year 2022. It then creates a common table expression (CTE) to calculate the average yield per hectare and rank regions based on this average in descending order. Finally, it selects the top 3 regions with the highest average yield per hectare for wheat in 2022."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Get a list of the top 5 countries with the highest CO2 emissions for the year 2020, and also rollback any changes if an error occurs during the transaction.","CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CO2Emissions (Country, Year, Emissions) VALUES ('USA', 2020, 5000), ('China', 2020, 6000), ('India', 2020, 3000), ('Russia', 2020, 2000), ('Japan', 2020, 1500), ('Germany', 2020, 1000);","BEGIN TRANSACTION; TRY BEGIN SELECT TOP 5 Country, Emissions FROM CO2Emissions WHERE Year = 2020 ORDER BY Emissions DESC; COMMIT; END TRY BEGIN CATCH ROLLBACK; END CATCH;","The SQL query begins a transaction and tries to select the top 5 countries with the highest CO2 emissions for the year 2020 and order them in descending order based on emissions. If any error occurs during this process, the transaction is rolled back to ensure the database remains in a consistent state."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 emerging technologies with the highest amount of investments in each industry category.,"CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, TechName VARCHAR(50), Industry VARCHAR(50), InvestmentAmount DECIMAL); INSERT INTO Investments (InvestmentID, TechName, Industry, InvestmentAmount) VALUES (1, 'AI', 'Healthcare', 1500000), (2, 'Blockchain', 'Finance', 2300000), (3, 'IoT', 'Manufacturing', 1800000), (4, 'Cybersecurity', 'IT', 2100000), (5, 'Quantum Computing', 'Research', 2200000), (6, 'AI', 'Finance', 2500000), (7, 'Blockchain', 'Healthcare', 1750000), (8, 'IoT', 'IT', 1950000), (9, 'Cybersecurity', 'Manufacturing', 2050000), (10, 'Quantum Computing', 'Healthcare', 2400000);","WITH RankedTech AS (SELECT TechName, Industry, InvestmentAmount, ROW_NUMBER() OVER (PARTITION BY Industry ORDER BY InvestmentAmount DESC) AS Rank FROM Investments) SELECT Industry, TechName, InvestmentAmount FROM RankedTech WHERE Rank <= 5 ORDER BY Industry, Rank;",The query first creates a common table expression (CTE) that ranks each technology based on the amount of investment they have in each industry category in descending order. It then selects the top 5 technologies in each industry category based on their ranks and orders them by their industry category and rank.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores information about different types of crops, including their yield per acre, and then find the top 3 crops with the highest yield per acre in Asia.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), YieldPerAcre DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, YieldPerAcre) VALUES (1, 'Wheat', 'North America', 50.5), (2, 'Corn', 'Europe', 60.0), (3, 'Rice', 'Asia', 80.0), (4, 'Soybean', 'Asia', 85.7), (5, 'Barley', 'Europe', 45.0);","WITH RankedCrops AS (SELECT CropName, YieldPerAcre, DENSE_RANK() OVER (ORDER BY YieldPerAcre DESC) AS Rank FROM CropYield WHERE Region = 'Asia') SELECT CropName, YieldPerAcre FROM RankedCrops WHERE Rank <= 3;","The query creates a common table expression (CTE) to rank crops based on their yield per acre in descending order, but only for those grown in Asia. It then selects the top 3 highest yielding crops using the DENSE_RANK function."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Find the top 5 countries with the highest average annual CO2 emissions between 1990 and 2000, and compare it with their annual average CO2 emissions between 2010 and 2020.","CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CO2Emissions (Country, Year, Emissions) VALUES ('USA', 1990, 5000.0), ('China', 1990, 3500.0), ('India', 1990, 2000.0), ('USA', 2000, 5500.0), ('China', 2000, 4000.0), ('India', 2000, 2500.0), ('USA', 2010, 6000.0), ('China', 2010, 5000.0), ('India', 2010, 3000.0), ('USA', 2020, 6500.0), ('China', 2020, 5500.0), ('India', 2020, 3500.0);","WITH AvgEmissions1990_2000 AS (SELECT Country, AVG(Emissions) AS AvgEmissions FROM CO2Emissions WHERE Year BETWEEN 1990 AND 2000 GROUP BY Country), AvgEmissions2010_2020 AS (SELECT Country, AVG(Emissions) AS AvgEmissions FROM CO2Emissions WHERE Year BETWEEN 2010 AND 2020 GROUP BY Country) SELECT a.Country, a.AvgEmissions AS AvgEmissions1990_2000, b.AvgEmissions AS AvgEmissions2010_2020 FROM AvgEmissions1990_2000 a INNER JOIN AvgEmissions2010_2020 b ON a.Country = b.Country ORDER BY a.AvgEmissions DESC LIMIT 5;",The query first creates two common table expressions (CTEs): AvgEmissions1990_2000 and AvgEmissions2010_2020. Each CTE calculates the average annual CO2 emissions for each country between 1990-2000 and 2010-2020 respectively. The main query then joins these two CTEs on the Country field and selects the top 5 countries based on average CO2 emissions between 1990 and 2000. It also displays their average CO2 emissions between 2010 and 2020 for comparison.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the top 5 countries with the highest average annual temperature increase over the last decade.,"CREATE TABLE ClimateChange (Country VARCHAR(50), Year INT, AvgAnnualTemp DECIMAL); INSERT INTO ClimateChange (Country, Year, AvgAnnualTemp) VALUES ('USA', 2010, 12.5), ('USA', 2020, 14.6), ('China', 2010, 13.2), ('China', 2020, 15.3), ('India', 2010, 25.6), ('India', 2020, 26.9), ('Russia', 2010, -5.6), ('Russia', 2020, -3.9), ('Brazil', 2010, 26.2), ('Brazil', 2020, 27.5);","WITH TempIncrease AS (SELECT Country, (MAX(AvgAnnualTemp) - MIN(AvgAnnualTemp)) / (MAX(Year) - MIN(Year)) AS AnnualIncrease FROM ClimateChange GROUP BY Country) SELECT Country, AnnualIncrease FROM TempIncrease ORDER BY AnnualIncrease DESC LIMIT 5;","The SQL query first creates a common table expression (CTE) named TempIncrease. In this CTE, the query calculates the difference between the maximum and minimum average annual temperature for each country over the years, divided by the difference in years to get the average annual increase. After that, it selects the top 5 countries with the highest annual temperature increase from the TempIncrease CTE, ordered in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Identify the top 5 cities with the highest average citizen income in each state for the last financial year.,"CREATE TABLE StateInfo (StateID INT PRIMARY KEY, StateName VARCHAR(50)); CREATE TABLE CityInfo (CityID INT PRIMARY KEY, CityName VARCHAR(50), StateID INT REFERENCES StateInfo(StateID)); CREATE TABLE CitizenIncome (CitizenID INT PRIMARY KEY, CityID INT REFERENCES CityInfo(CityID), Year INT, Income DECIMAL); INSERT INTO StateInfo (StateID, StateName) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'); INSERT INTO CityInfo (CityID, CityName, StateID) VALUES (1, 'Los Angeles', 1), (2, 'San Francisco', 1), (3, 'Houston', 2), (4, 'Dallas', 2), (5, 'New York City', 3); INSERT INTO CitizenIncome (CitizenID, CityID, Year, Income) VALUES (1, 1, 2021, 80000), (2, 2, 2021, 90000), (3, 3, 2021, 75000), (4, 4, 2021, 70000), (5, 5, 2021, 95000);","WITH AvgIncome AS (SELECT ci.CityID, ci.Year, AVG(ci.Income) as AvgIncome FROM CitizenIncome ci WHERE ci.Year = 2021 GROUP BY ci.CityID, ci.Year) SELECT TOP 5 s.StateName, c.CityName, ai.AvgIncome FROM AvgIncome ai INNER JOIN CityInfo c ON ai.CityID = c.CityID INNER JOIN StateInfo s ON c.StateID = s.StateID ORDER BY ai.AvgIncome DESC;","The SQL query first creates a common table expression (CTE) to calculate the average income of citizens for each city in 2021. It then selects the top 5 cities with the highest average income, sorted in descending order, along with their respective state names. The INNER JOIN operation is used to link the CityInfo and StateInfo tables with the CTE."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Show a report detailing the top 5 selling electric car models in Europe for the year 2020.,"CREATE TABLE CarSales (CarID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Year INT, Sales INT); INSERT INTO CarSales (CarID, ModelName, Region, Year, Sales) VALUES (1, 'Tesla Model 3', 'Europe', 2020, 100000), (2, 'Renault Zoe', 'Europe', 2020, 95000), (3, 'Volkswagen ID.3', 'Europe', 2020, 75000), (4, 'Hyundai Kona', 'Europe', 2020, 70000), (5, 'Audi e-tron', 'Europe', 2020, 65000);","WITH TopSales AS (SELECT ModelName, Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS Rank FROM CarSales WHERE Year = 2020 AND Region = 'Europe') SELECT ModelName, Sales FROM TopSales WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank electric car models based on their sales in Europe for the year 2020 in descending order. It then selects the top 5 best-selling models using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Provide the transaction details for all users who have made purchases of AI products in the last month, and include their user and product information.","CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50), UserEmail VARCHAR(50)); CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Category VARCHAR(50)); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, UserID INT, ProductID INT, PurchaseDate DATE, TransactionAmount DECIMAL, FOREIGN KEY (UserID) REFERENCES Users(UserID), FOREIGN KEY (ProductID) REFERENCES Products(ProductID));","BEGIN TRANSACTION; SELECT U.UserName, U.UserEmail, P.ProductName, T.TransactionAmount, T.PurchaseDate FROM Users U INNER JOIN Transactions T ON U.UserID = T.UserID INNER JOIN Products P ON T.ProductID = P.ProductID WHERE P.Category = 'AI' AND T.PurchaseDate >= DATEADD(MONTH, -1, GETDATE()); COMMIT TRANSACTION;","The query begins a transaction to ensure all operations are executed together. It selects user information, product names, transaction amounts, and purchase dates by joining the Users, Transactions, and Products tables. Specifically, it filters for transactions involving AI products that occurred within the last month. Finally, it commits the transaction to save the changes."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records",Analyze the market trends for electric vehicles and update the database to reflect the latest average sales figures for each model across different regions.,"CREATE TABLE ElectricVehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), AvgSales INT); CREATE TABLE SalesUpdates (ModelID INT PRIMARY KEY, NewAvgSales INT);","WITH UpdatedSales AS (SELECT EV.ModelID, EV.ModelName, EV.Region, SU.NewAvgSales FROM ElectricVehicleSales EV JOIN SalesUpdates SU ON EV.ModelID = SU.ModelID) UPDATE ElectricVehicleSales SET AvgSales = (SELECT NewAvgSales FROM UpdatedSales US WHERE ElectricVehicleSales.ModelID = US.ModelID);","The query uses a common table expression (CTE) to join the ElectricVehicleSales and SalesUpdates tables, retrieving the latest average sales figures. It then updates the AvgSales in the ElectricVehicleSales table with the new values from the SalesUpdates table based on the ModelID."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new record into the LegislativeActions table indicating that Bill ID 100 was approved by the House on 2023-10-01.,"CREATE TABLE LegislativeActions (ActionID INT PRIMARY KEY, BillID INT, ActionType VARCHAR(50), ActionDate DATE); CREATE TABLE Bills (BillID INT PRIMARY KEY, BillName VARCHAR(100), BillDescription TEXT);","INSERT INTO LegislativeActions (ActionID, BillID, ActionType, ActionDate) VALUES (1, 100, 'Approved by House', '2023-10-01');","The query inserts a new record into the LegislativeActions table. It assigns an ActionID of 1, associates it with Bill ID 100, specifies the action type as 'Approved by House', and sets the action date to '2023-10-01'."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Show me detailed information about the most sold vehicle models in each region for the last year.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), UnitsSold INT, SaleDate DATE); INSERT INTO VehicleSales (SaleID, ModelName, Region, UnitsSold, SaleDate) VALUES (1, 'Model S', 'North America', 5000, '2021-06-10'), (2, 'Model 3', 'Europe', 5500, '2021-05-15'), (3, 'Leaf', 'Asia', 4800, '2021-04-20'), (4, 'Bolt', 'North America', 5300, '2021-06-05'), (5, 'Prius', 'Europe', 6000, '2021-05-10');","WITH YearlySales AS (SELECT ModelName, Region, SUM(UnitsSold) as TotalSold FROM VehicleSales WHERE SaleDate BETWEEN '2021-01-01' AND '2021-12-31' GROUP BY ModelName, Region) SELECT ModelName, Region, MAX(TotalSold) as MostSold FROM YearlySales GROUP BY Region;",The query first creates a common table expression (CTE) to calculate the total units sold for each model in each region within the last year. It then selects the model with the highest sales in each region.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Create a report that shows the average duration of treatment and patient outcomes for different diseases, based on patient demographics, specifically for each age group and gender.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(50)); CREATE TABLE Diseases (DiseaseID INT PRIMARY KEY, DiseaseName VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, DiseaseID INT, PatientID INT, StartDate DATE, EndDate DATE, Outcome VARCHAR(50));","SELECT D.DiseaseName, P.Gender, AVG(T.EndDate - T.StartDate) AS AvgTreatmentDuration, T.Outcome FROM Patients P INNER JOIN Treatments T ON P.PatientID = T.PatientID INNER JOIN Diseases D ON D.DiseaseID = T.DiseaseID GROUP BY D.DiseaseName, P.Gender, T.Outcome ORDER BY AvgTreatmentDuration DESC;","This query first joins the Patients, Treatments and Diseases tables using inner joins. It then calculates the average duration of treatment for each disease, for each gender and for each outcome by subtracting the StartDate from the EndDate of the treatment period. The results are grouped by the disease, gender and outcome. The final report is ordered by the average treatment duration in descending order."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 3 cities with the highest average annual temperature increase over the past decade.,"CREATE TABLE ClimateData (CityID INT PRIMARY KEY, CityName VARCHAR(50), Year INT, AvgAnnualTemperature DECIMAL); INSERT INTO ClimateData (CityID, CityName, Year, AvgAnnualTemperature) VALUES (1, 'New York', 2012, 12.5), (1, 'New York', 2022, 13.5), (2, 'Los Angeles', 2012, 16.5), (2, 'Los Angeles', 2022, 17.6), (3, 'Chicago', 2012, 10.0), (3, 'Chicago', 2022, 11.1), (4, 'Houston', 2012, 20.0), (4, 'Houston', 2022, 21.2), (5, 'Phoenix', 2012, 23.0), (5, 'Phoenix', 2022, 24.5);","WITH TempIncrease AS (SELECT CityName, (MAX(AvgAnnualTemperature) - MIN(AvgAnnualTemperature)) AS TempChange FROM ClimateData WHERE Year BETWEEN 2012 AND 2022 GROUP BY CityName) SELECT CityName, TempChange FROM TempIncrease ORDER BY TempChange DESC LIMIT 3;",The query first creates a common table expression (CTE) named TempIncrease to calculate the temperature change for each city by finding the difference between the maximum and minimum average annual temperatures over the past decade. It then selects the top 3 cities with the highest temperature increase and orders them in descending order of temperature change.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Provide a report detailing the top ten technologies with the highest amount of funding and the number of their funding rounds, sorted in descending order by total funding, for each year.","CREATE TABLE FundingData (TechnologyID INT PRIMARY KEY, TechnologyName VARCHAR(50), FundingAmount DECIMAL, FundingRound VARCHAR(50), Year INT); INSERT INTO FundingData (TechnologyID, TechnologyName, FundingAmount, FundingRound, Year) VALUES (1, 'AI', 1000000, 'Series A', 2020), (2, 'Blockchain', 2000000, 'Series B', 2020), (3, 'IoT', 500000, 'Seed', 2020), (4, 'Cloud Computing', 1500000, 'Series A', 2020), (5, 'AR', 1200000, 'Seed', 2020);","WITH YearlyFunds AS (SELECT TechnologyName, Year, SUM(FundingAmount) AS TotalFunding, COUNT(FundingRound) AS FundingRounds FROM FundingData GROUP BY TechnologyName, Year) SELECT TechnologyName, Year, TotalFunding, FundingRounds FROM YearlyFunds ORDER BY TotalFunding DESC LIMIT 10;","The SQL query first creates a common table expression (CTE) that groups the funding data by technology and year, calculating the total amount of funding and the number of funding rounds for each group. It then selects the technology name, the year, the total amount of funding, and the number of funding rounds from this CTE, sorting the results in descending order by the total amount of funding and limiting the results to the top ten technologies."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Find out the top 5 countries with the highest average daily rate (ADR) for a hotel room in 2021 and the average number of days visitors stayed in these hotels.,"CREATE TABLE HotelRates (Country VARCHAR(50), Year INT, ADR DECIMAL, AvgStayDays DECIMAL); INSERT INTO HotelRates (Country, Year, ADR, AvgStayDays) VALUES ('USA', 2021, 120.5, 3), ('France', 2021, 118.0, 2), ('Japan', 2021, 110.0, 4), ('Australia', 2021, 115.7, 3), ('Canada', 2021, 95.0, 5), ('Germany', 2021, 100.0, 2), ('Spain', 2021, 90.0, 4), ('Italy', 2021, 95.5, 3), ('UK', 2021, 105.0, 4), ('China', 2021, 98.0, 4);","WITH RankedCountries AS (SELECT Country, ADR, AvgStayDays, DENSE_RANK() OVER (ORDER BY ADR DESC) AS Rank FROM HotelRates WHERE Year = 2021) SELECT Country, ADR, AvgStayDays FROM RankedCountries WHERE Rank <= 5;",The query first creates a common table expression (CTE) and ranks the countries based on the average daily rate (ADR) for a hotel room in descending order for the year 2021. It then selects the top 5 countries with the highest ADR and also provides the average number of days visitors stayed in these hotels.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store carbon emission reductions from various conservation projects across different regions, and then display the top 3 projects with the highest reductions.","CREATE TABLE ConservationProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Region VARCHAR(50), CarbonReduction DECIMAL); INSERT INTO ConservationProjects (ProjectID, ProjectName, Region, CarbonReduction) VALUES (1, 'Reforestation Initiative', 'Amazon', 500.2), (2, 'Solar Power Expansion', 'Sahara', 450.3), (3, 'Wind Farm Installation', 'North Sea', 320.7), (4, 'Mangrove Restoration', 'Southeast Asia', 280.5), (5, 'Urban Green Spaces', 'Europe', 150.0);","WITH RankedProjects AS (SELECT ProjectName, CarbonReduction, RANK() OVER (ORDER BY CarbonReduction DESC) AS Rank FROM ConservationProjects) SELECT ProjectName, CarbonReduction FROM RankedProjects WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank conservation projects based on their carbon emission reductions in descending order. It then selects the top 3 projects with the highest reductions using the RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,common table expressions,data retrieval: basic data fetching queries,Retrieve the most recent data entries for each category of wearable technology from the past year.,"CREATE TABLE WearableTech (EntryID INT PRIMARY KEY, Category VARCHAR(50), DataEntryDate DATE, DataValue DECIMAL); CREATE TABLE TechCategories (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(50)); INSERT INTO WearableTech (EntryID, Category, DataEntryDate, DataValue) VALUES (1, 'Smartwatch', '2022-09-15', 75.0), (2, 'Fitness Tracker', '2022-10-10', 58.0), (3, 'Smart Glasses', '2022-09-01', 85.0), (4, 'Smartwatch', '2023-08-25', 80.0), (5, 'Fitness Tracker', '2023-05-17', 60.0);","WITH LatestEntries AS (SELECT Category, MAX(DataEntryDate) AS LatestDate FROM WearableTech WHERE DataEntryDate >= DATEADD(year, -1, GETDATE()) GROUP BY Category) SELECT WT.Category, WT.DataEntryDate, WT.DataValue FROM WearableTech WT JOIN LatestEntries LE ON WT.Category = LE.Category AND WT.DataEntryDate = LE.LatestDate;","The query first creates a common table expression (CTE) called LatestEntries which finds the most recent DataEntryDate for each Category in the WearableTech table, considering only entries from the past year. Then, it selects the Category, DataEntryDate, and DataValue from the WearableTech table that match the most recent DataEntryDate found in the CTE."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert a new record in the 'MovieRevenue' table for a movie that has just been released, and then display the top 5 movies with highest worldwide gross revenue.","CREATE TABLE MovieRevenue (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), ReleaseYear INT, WorldwideGross DECIMAL); INSERT INTO MovieRevenue (MovieID, MovieName, ReleaseYear, WorldwideGross) VALUES (1, 'Avengers: Endgame', 2019, 2797800564), (2, 'Avatar', 2009, 2787965087), (3, 'Titanic', 1997, 2187463944), (4, 'Star Wars: The Force Awakens', 2015, 2068223624), (5, 'Avengers: Infinity War', 2018, 2048359754);","INSERT INTO MovieRevenue (MovieID, MovieName, ReleaseYear, WorldwideGross) VALUES (6, 'New Release', 2021, 1000000); WITH RankedMovies AS (SELECT MovieName, WorldwideGross, DENSE_RANK() OVER (ORDER BY WorldwideGross DESC) AS Rank FROM MovieRevenue) SELECT MovieName, WorldwideGross FROM RankedMovies WHERE Rank <= 5;","This query first inserts a new record into the 'MovieRevenue' table, representing a movie that has just been released. Then it creates a common table expression (CTE) that ranks movies based on their worldwide gross revenue in descending order. The DENSE_RANK function is used for this purpose. Finally, it selects the top 5 movies with the highest worldwide gross revenue."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total revenue generated from the sales of each movie genre in 2020.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE Sales (SaleID INT PRIMARY KEY, MovieID INT, SaleDate DATE, Revenue DECIMAL); INSERT INTO Movies (MovieID, Title, Genre) VALUES (1, 'Inception', 'Sci-Fi'), (2, 'The Dark Knight', 'Action'), (3, 'Avengers', 'Action'), (4, 'Interstellar', 'Sci-Fi'), (5, 'The Godfather', 'Drama'); INSERT INTO Sales (SaleID, MovieID, SaleDate, Revenue) VALUES (1, 1, '2020-07-16', 80000000), (2, 2, '2020-06-25', 100000000), (3, 3, '2020-09-15', 120000000), (4, 4, '2020-12-09', 90000000), (5, 5, '2020-04-07', 75000000);","BEGIN TRANSACTION; SELECT M.Genre, SUM(S.Revenue) AS TotalRevenue FROM Movies M INNER JOIN Sales S ON M.MovieID = S.MovieID WHERE YEAR(S.SaleDate) = 2020 GROUP BY M.Genre; COMMIT;",The query starts a transaction and then joins the Movies and Sales tables on the MovieID column. It then groups the combined table by the Genre column from the Movies table and calculates the sum of the Revenue column from the Sales table for each genre. This result set represents the total revenue for each movie genre in 2020. The transaction is then committed to ensure the data integrity.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Show the top 5 athletes with the highest average scores in international tournaments from the past year.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Nationality VARCHAR(50)); CREATE TABLE Tournaments (TournamentID INT PRIMARY KEY, TournamentName VARCHAR(50), TournamentDate DATE); CREATE TABLE Scores (ScoreID INT PRIMARY KEY, AthleteID INT, TournamentID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (TournamentID) REFERENCES Tournaments(TournamentID));","WITH RecentScores AS (SELECT A.AthleteName, S.Score, T.TournamentDate FROM Scores S JOIN Athletes A ON S.AthleteID = A.AthleteID JOIN Tournaments T ON S.TournamentID = T.TournamentID WHERE T.TournamentDate >= DATEADD(YEAR, -1, GETDATE())), AvgScores AS (SELECT AthleteName, AVG(Score) AS AvgScore FROM RecentScores GROUP BY AthleteName), RankedAthletes AS (SELECT AthleteName, AvgScore, DENSE_RANK() OVER (ORDER BY AvgScore DESC) AS Rank FROM AvgScores) SELECT AthleteName, AvgScore FROM RankedAthletes WHERE Rank <= 5;","The query first gathers scores from the past year using the RecentScores common table expression (CTE). Then, it calculates the average score for each athlete in the AvgScores CTE. After that, it ranks these athletes based on their average scores in descending order using the DENSE_RANK function in the RankedAthletes CTE. Finally, it selects the top 5 athletes with the highest average scores."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average yield for each crop type per region, then pivot the data to show the regions as columns and crop types as rows","CREATE TABLE CropYields (YieldID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (YieldID, CropType, Region, Yield) VALUES (1, 'Wheat', 'North America', 3.2), (2, 'Corn', 'Europe', 5.6), (3, 'Rice', 'Asia', 4.0), (4, 'Wheat', 'Europe', 2.7), (5, 'Corn', 'North America', 6.0);","WITH AverageYields AS (SELECT CropType, Region, AVG(Yield) AS AvgYield FROM CropYields GROUP BY CropType, Region) SELECT * FROM AverageYields PIVOT (AVG(AvgYield) FOR Region IN ('North America', 'Europe', 'Asia'));",The SQL query first creates a common table expression to calculate the average crop yield per region. It then pivots this data to structure it in a way that the regions are represented as columns and the crop types as rows. The average yields are shown at the intersection of each crop type and region.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,List the top 5 most watched TV shows in the United States for the year 2020.,"CREATE TABLE Shows (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), Region VARCHAR(50), Year INT, Views INT); INSERT INTO Shows (ShowID, ShowName, Region, Year, Views) VALUES (1, 'Stranger Things', 'United States', 2020, 20000000), (2, 'The Crown', 'United States', 2020, 18000000), (3, 'The Mandalorian', 'United States', 2020, 19000000), (4, 'Ozark', 'United States', 2020, 17000000), (5, 'The Witcher', 'United States', 2020, 21000000);","WITH RankedShows AS (SELECT ShowName, Views, DENSE_RANK() OVER (ORDER BY Views DESC) AS Rank FROM Shows WHERE Year = 2020 AND Region = 'United States') SELECT ShowName, Views FROM RankedShows WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank TV shows based on their views in descending order for the year 2020 and specific region (United States). It then selects the top 5 most watched shows using the DENSE_RANK function.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table to track the most recent legislative actions for each bill, and then display the most recent action for each bill sorted by the date of action.","CREATE TABLE Bills (BillID INT PRIMARY KEY, BillName VARCHAR(100), IntroducedDate DATE); CREATE TABLE LegislativeActions (ActionID INT PRIMARY KEY, BillID INT, ActionDate DATE, ActionDescription VARCHAR(255), FOREIGN KEY (BillID) REFERENCES Bills(BillID));","WITH RecentActions AS (SELECT BillID, ActionDescription, ActionDate, ROW_NUMBER() OVER (PARTITION BY BillID ORDER BY ActionDate DESC) AS rn FROM LegislativeActions) SELECT BillID, ActionDescription, ActionDate FROM RecentActions WHERE rn = 1 ORDER BY ActionDate DESC;","The query creates a common table expression (CTE) to assign a row number to each action per bill, ordered by the action date in descending order. It then selects the most recent action for each bill by filtering the results to where the row number equals 1, and finally, it sorts the results by the action date in descending order."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,"Show the average crop yields per region for the last 5 years, pivot the data so that we have years as columns, regions as rows and crop yields as the cell values.","CREATE TABLE CropYield (CropYear INT, Region VARCHAR(50), CropYield DECIMAL); INSERT INTO CropYield (CropYear, Region, CropYield) VALUES (2017, 'North America', 2.30), (2018, 'North America', 2.50), (2019, 'North America', 2.45), (2020, 'North America', 2.55), (2021, 'North America', 2.60), (2017, 'Europe', 2.80), (2018, 'Europe', 2.75), (2019, 'Europe', 2.85), (2020, 'Europe', 2.90), (2021, 'Europe', 3.00), (2017, 'Asia', 2.60), (2018, 'Asia', 2.65), (2019, 'Asia', 2.70), (2020, 'Asia', 2.75), (2021, 'Asia', 2.80);","SELECT * FROM (SELECT CropYear, Region, CropYield FROM CropYield) AS source_table PIVOT (AVG(CropYield) FOR CropYear IN ([2017], [2018], [2019], [2020], [2021])) AS PivotTable;","The SQL query transforms the data from the 'CropYield' table into a pivot table format. First, it selects the 'CropYear', 'Region', and 'CropYield' columns from the 'CropYield' table. Then, the PIVOT function is used to create a new table ('PivotTable') that displays the average 'CropYield' for each 'CropYear' (from 2017 to 2021) for each 'Region'. This means that the rows represent the 'Region', the columns represent the 'CropYear', and the cell values represent the average 'CropYield'."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the total yield of wheat produced in North America in 2020.,"CREATE TABLE CropYield (ID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO CropYield (ID, CropType, Region, Year, Yield) VALUES (1, 'Wheat', 'North America', 2020, 850.2), (2, 'Corn', 'South America', 2020, 1300.5), (3, 'Wheat', 'North America', 2020, 1050.3), (4, 'Rice', 'Asia', 2020, 2000.1), (5, 'Wheat', 'Europe', 2020, 950.6);",SELECT SUM(Yield) as TotalYield FROM CropYield WHERE CropType = 'Wheat' AND Region = 'North America' AND Year = 2020;,"The query is summing up the yield of wheat for the region North America for the year 2020 from the CropYield table. It filters the records for the crop type 'Wheat', region 'North America' and the year '2020', and then it calculates the sum of the yield of these filtered records."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Show me a report that visualizes the carbon dioxide emissions by sector in each country from highest to lowest, and then show the top 5 sectors with the highest emissions in each country.","CREATE TABLE CarbonEmissions (Country VARCHAR(50), Sector VARCHAR(50), Emissions DECIMAL); INSERT INTO CarbonEmissions (Country, Sector, Emissions) VALUES ('USA', 'Transportation', 2000.5), ('USA', 'Industry', 1800), ('USA', 'Residential', 1500), ('Germany', 'Transportation', 1800), ('Germany', 'Industry', 1700), ('Germany', 'Residential', 1600), ('China', 'Transportation', 2500), ('China', 'Industry', 2100), ('China', 'Residential', 1900);","WITH RankedSectors AS (SELECT Country, Sector, Emissions, DENSE_RANK() OVER (PARTITION BY Country ORDER BY Emissions DESC) AS Rank FROM CarbonEmissions) SELECT Country, Sector, Emissions FROM RankedSectors WHERE Rank <= 5;",The query first creates a common table expression (CTE) to rank the sectors by their emissions in descending order within each country. It then filters to show only the top 5 sectors with the highest emissions in each country using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Find out the top 3 selling car models in each region. If there is a tie, show all tied models.","CREATE TABLE Sales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), UnitsSold INT); INSERT INTO Sales (SaleID, ModelName, Region, UnitsSold) VALUES (1, 'Model S', 'North America', 5000), (2, 'Model 3', 'Europe', 4500), (3, 'Leaf', 'Asia', 7000), (4, 'Bolt', 'North America', 5300), (5, 'Prius', 'Europe', 4000), (6, 'Model S', 'Asia', 6500), (7, 'Leaf', 'North America', 4800), (8, 'Model 3', 'Asia', 6000), (9, 'Bolt', 'Europe', 4700), (10, 'Prius', 'North America', 5200);","WITH RankedModels AS (SELECT ModelName, Region, UnitsSold, DENSE_RANK() OVER (PARTITION BY Region ORDER BY UnitsSold DESC) AS Rank FROM Sales) SELECT ModelName, Region, UnitsSold FROM RankedModels WHERE Rank <= 3;","The SQL query first creates a common table expression (CTE) that calculates the rank of each car model in each region based on units sold. It uses the DENSE_RANK function to assign ranks, and the PARTITION BY clause to reset the rank counter for each region. Then it selects the car model, region and units sold from the CTE where rank is less than or equal to 3, thus providing the top 3 selling car models in each region."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 sustainable fashion brands based on the average customer rating over the last year, and ensure the results are committed only if the average rating is above 4.","CREATE TABLE CustomerReviews (ReviewID INT PRIMARY KEY, BrandID INT, CustomerID INT, ReviewDate DATE, Rating INT); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainabilityScore DECIMAL); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, BrandID INT, CustomerID INT, TransactionDate DATE, AmountSpent DECIMAL);","BEGIN; WITH AvgRatings AS (SELECT B.BrandName, AVG(R.Rating) AS AvgRating FROM CustomerReviews R JOIN Brands B ON R.BrandID = B.BrandID WHERE R.ReviewDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY B.BrandName HAVING AVG(R.Rating) > 4) SELECT TOP 3 BrandName, AvgRating FROM AvgRatings ORDER BY AvgRating DESC; COMMIT;",The query starts a transaction and calculates the average rating for each brand based on customer reviews from the past year. It filters brands with an average rating above 4. Then it selects the top 3 brands with the highest average rating and commits the transaction.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Provide a report showing the number of vehicles sold by each manufacturer in each region, but only for those manufacturers who have sold more than 1000 vehicles in total.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, Manufacturer VARCHAR(50), Region VARCHAR(50), Sold INT); INSERT INTO VehicleSales (SaleID, Manufacturer, Region, Sold) VALUES (1, 'Tesla', 'North America', 500), (2, 'Toyota', 'Europe', 1200), (3, 'Hyundai', 'Asia', 300), (4, 'Tesla', 'Europe', 1100), (5, 'Toyota', 'North America', 900);","WITH TotalSales AS (SELECT Manufacturer, SUM(Sold) AS TotalSold FROM VehicleSales GROUP BY Manufacturer) SELECT VS.Manufacturer, VS.Region, VS.Sold FROM VehicleSales VS INNER JOIN TotalSales TS ON VS.Manufacturer = TS.Manufacturer WHERE TS.TotalSold > 1000;",The query first creates a common table expression (CTE) to calculate the total number of vehicles sold by each manufacturer. It then joins this CTE with the original VehicleSales table to filter out those manufacturers who have sold more than 1000 vehicles in total. The final result shows the number of vehicles sold by each of these manufacturers in each region.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 companies with the most patent filed in the field of AI in the year 2020.,"CREATE TABLE AIPatents (PatentID INT PRIMARY KEY, CompanyName VARCHAR(50), FiledYear INT); INSERT INTO AIPatents (PatentID, CompanyName, FiledYear) VALUES (1, 'IBM', 2020), (2, 'Microsoft', 2020), (3, 'Google', 2020), (4, 'IBM', 2020), (5, 'Facebook', 2020), (6, 'IBM', 2020), (7, 'Microsoft', 2020),(8, 'Intel', 2020), (9, 'IBM', 2020), (10, 'Intel', 2020);","WITH CountedPatents AS (SELECT CompanyName, COUNT(PatentID) AS PatentCount FROM AIPatents WHERE FiledYear = 2020 GROUP BY CompanyName) SELECT CompanyName, PatentCount FROM CountedPatents ORDER BY PatentCount DESC LIMIT 5;","This query first creates a common table expression (CTE) to count the number of AI patents filed in the year 2020 by each company using the COUNT() function. It then selects the top 5 companies with the most patents filed in 2020, ordering the results in descending order by the number of patents. The LIMIT keyword is used to restrict the output to the top 5 results."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Provide transactional statements to insert records into the CropYield table for the year 2022, and then display the top 10 crops with the highest yield.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Yield INT); CREATE TABLE TransactionLog (TransactionID INT PRIMARY KEY, TransactionTime DATETIME, TableName VARCHAR(50), Operation VARCHAR(50), DataContent TEXT);","BEGIN TRANSACTION; INSERT INTO CropYield (CropID, CropName, Year, Yield) VALUES (1, 'Wheat', 2022, 2000), (2, 'Corn', 2022, 1800), (3, 'Rice', 2022, 2200), (4, 'Barley', 2022, 1900), (5, 'Soybean', 2022, 2100); INSERT INTO TransactionLog (TransactionID, TransactionTime, TableName, Operation, DataContent) VALUES (1, GETDATE(), 'CropYield', 'INSERT', 'CropID: 1,CropName: Wheat, Year: 2022, Yield: 2000'), (2, GETDATE(), 'CropYield', 'INSERT', 'CropID: 2,CropName: Corn, Year: 2022, Yield: 1800'), (3, GETDATE(), 'CropYield', 'INSERT', 'CropID: 3,CropName: Rice, Year: 2022, Yield: 2200'), (4, GETDATE(), 'CropYield', 'INSERT', 'CropID: 4,CropName: Barley, Year: 2022, Yield: 1900'), (5, GETDATE(), 'CropYield', 'INSERT', 'CropID: 5,CropName: Soybean, Year: 2022, Yield: 2100'); COMMIT; WITH RankedCrops AS (SELECT CropName, Yield, RANK() OVER (ORDER BY Yield DESC) AS Rank FROM CropYield WHERE Year = 2022) SELECT CropName, Yield FROM RankedCrops WHERE Rank <= 10;","The transaction begins and inserts records into the CropYield table for the year 2022. It also inserts records of these operations into the TransactionLog table, including the current date and time, table name, operation type, and data content. After that, it commits the transaction. The query then creates a common table expression (CTE) to rank crops based on their yield in descending order for the year 2022. It finally selects the top 10 crops with the highest yield using the RANK function."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the names of customers who have stayed in 5-star hotels but never in 3-star hotels.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50));CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), StarRating INT);CREATE TABLE Stays (StayID INT PRIMARY KEY, CustomerID INT, HotelID INT, StayDate DATE);",SELECT C.CustomerName FROM Customers C WHERE C.CustomerID IN (SELECT S.CustomerID FROM Stays S JOIN Hotels H ON S.HotelID = H.HotelID WHERE H.StarRating = 5) AND C.CustomerID NOT IN (SELECT S.CustomerID FROM Stays S JOIN Hotels H ON S.HotelID = H.HotelID WHERE H.StarRating = 3);,The query first selects the CustomerNames from the Customers table where the CustomerID is found in stays at 5-star hotels. It then excludes those CustomerIDs that are found in stays at 3-star hotels using the NOT IN clause. The result is a list of customers who have stayed in 5-star hotels but never in 3-star hotels.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store data on various reforestation projects, including project details and organizations involved, and then display the top 3 projects with the highest tree density, including the organization name.","CREATE TABLE ReforestationProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Region VARCHAR(50), TreeDensity DECIMAL); CREATE TABLE Organizations (OrgID INT PRIMARY KEY, OrgName VARCHAR(100)); CREATE TABLE ProjectOrganizations (ProjectID INT, OrgID INT, FOREIGN KEY (ProjectID) REFERENCES ReforestationProjects(ProjectID), FOREIGN KEY (OrgID) REFERENCES Organizations(OrgID));","WITH RankedProjects AS (SELECT RP.ProjectName, RP.TreeDensity, O.OrgName, DENSE_RANK() OVER (ORDER BY RP.TreeDensity DESC) AS Rank FROM ReforestationProjects RP INNER JOIN ProjectOrganizations PO ON RP.ProjectID = PO.ProjectID INNER JOIN Organizations O ON PO.OrgID = O.OrgID) SELECT ProjectName, TreeDensity, OrgName FROM RankedProjects WHERE Rank <= 3;","The query creates a common table expression (CTE) that ranks reforestation projects based on their tree density in descending order using the DENSE_RANK function. It joins the ReforestationProjects, ProjectOrganizations, and Organizations tables using inner joins to get the organization name for each project. Finally, it selects the top 3 projects with the highest tree density along with the organization name."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 most popular sustainable fashion brands across different regions over the past year, and then display the regions with the highest consumer engagement for these brands using transactional control statements.","CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE ConsumerBehavior (BehaviorID INT PRIMARY KEY, Region VARCHAR(50), BrandID INT, EngagementLevel INT, CONSTRAINT FK_Brand FOREIGN KEY (BrandID) REFERENCES FashionBrands(BrandID)); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, BehaviorID INT, TransactionDate DATE, Amount DECIMAL, CONSTRAINT FK_Behavior FOREIGN KEY (BehaviorID) REFERENCES ConsumerBehavior(BehaviorID)); INSERT INTO FashionBrands (BrandID, BrandName, IsSustainable) VALUES (1, 'EcoChic', TRUE), (2, 'GreenThreads', TRUE), (3, 'SustainWear', TRUE), (4, 'FastFashion', FALSE); INSERT INTO ConsumerBehavior (BehaviorID, Region, BrandID, EngagementLevel) VALUES (1, 'North America', 1, 85), (2, 'Europe', 2, 90), (3, 'Asia', 3, 95), (4, 'North America', 4, 70);","BEGIN; WITH TopBrands AS (SELECT BrandID, SUM(EngagementLevel) AS TotalEngagement FROM ConsumerBehavior WHERE BrandID IN (SELECT BrandID FROM FashionBrands WHERE IsSustainable = TRUE) AND TransactionDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY BrandID ORDER BY TotalEngagement DESC FETCH FIRST 3 ROWS ONLY), RegionEngagement AS (SELECT Region, BrandID, SUM(EngagementLevel) AS RegionEngagement FROM ConsumerBehavior WHERE BrandID IN (SELECT BrandID FROM TopBrands) GROUP BY Region, BrandID) SELECT Region, BrandName, RegionEngagement FROM RegionEngagement INNER JOIN FashionBrands ON RegionEngagement.BrandID = FashionBrands.BrandID ORDER BY RegionEngagement DESC; COMMIT;","The query begins a transaction and then calculates the top 3 most popular sustainable fashion brands over the past year. It uses a common table expression (CTE) to sum and rank the engagement levels for these brands. A second CTE then calculates the total engagement level for these top brands in each region. Finally, the results are selected and ordered by engagement level, and the transaction is committed."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,data retrieval: basic data fetching queries,Show me the top 5 countries with the highest wheat yield per hectare in 2020.,"CREATE TABLE WheatYield (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, WheatYieldPerHectare DECIMAL); INSERT INTO WheatYield (CountryID, CountryName, Year, WheatYieldPerHectare) VALUES (1, 'United States', 2020, 3.3), (2, 'Canada', 2020, 3.5), (3, 'Australia', 2020, 1.8), (4, 'Russia', 2020, 2.5), (5, 'China', 2020, 5.0), (6, 'India', 2020, 2.9), (7, 'Brazil', 2020, 1.4);","WITH RankedCountries AS (SELECT CountryName, WheatYieldPerHectare, DENSE_RANK() OVER (ORDER BY WheatYieldPerHectare DESC) AS Rank FROM WheatYield WHERE Year = 2020) SELECT CountryName, WheatYieldPerHectare FROM RankedCountries WHERE Rank <= 5;",The query first creates a common table expression (CTE) to rank countries based on their wheat yield per hectare in descending order for the year 2020. It then selects the top 5 countries with the highest yield using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Retrieve the top 5 athletes who have the highest average performance scores from different sports events over the past year, excluding any suspended athletes.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, Name VARCHAR(100), Status VARCHAR(20)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, EventID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","WITH AthleteScores AS (SELECT A.Name, AVG(P.Score) AS AvgScore FROM Athletes A JOIN Performance P ON A.AthleteID = P.AthleteID JOIN Events E ON P.EventID = E.EventID WHERE A.Status != 'Suspended' AND E.EventDate > DATEADD(YEAR, -1, GETDATE()) GROUP BY A.Name), RankedAthletes AS (SELECT Name, AvgScore, DENSE_RANK() OVER (ORDER BY AvgScore DESC) AS Rank FROM AthleteScores) SELECT Name, AvgScore FROM RankedAthletes WHERE Rank <= 5;","The query first calculates the average performance score for each athlete who is not suspended and participated in events over the past year. It then ranks these athletes based on their average scores in descending order. Finally, it selects the top 5 athletes with the highest average scores using the DENSE_RANK function."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Provide a breakdown of government expenditure on healthcare by region for the last fiscal year and rank them in descending order.,"CREATE TABLE GovSpending (ID INT PRIMARY KEY, Region VARCHAR(50), Expenditure DECIMAL, FiscalYear INT); INSERT INTO GovSpending (ID, Region, Expenditure, FiscalYear) VALUES (1, 'North', 5000000, 2021), (2, 'South', 6000000, 2021), (3, 'East', 7000000, 2021), (4, 'West', 5500000, 2021), (5, 'Central', 6500000, 2021);","WITH ExpenditureRank AS (SELECT Region, Expenditure, RANK() OVER (ORDER BY Expenditure DESC) AS Rank FROM GovSpending WHERE FiscalYear = 2021) SELECT Region, Expenditure FROM ExpenditureRank WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) called ExpenditureRank, which selects the Region and Expenditure from the GovSpending table for the fiscal year 2021. It also creates a rank column that ranks the expenditures in descending order. The main query then selects the top 5 regions with the highest expenditure from the CTE."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects",Create a table that tracks customer preferences across different hotel brands in various regions and then show the most popular preference per region.,"CREATE TABLE HotelBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE CustomerPreferences (PreferenceID INT PRIMARY KEY, PreferenceName VARCHAR(50)); CREATE TABLE HotelCustomerPreferences (CustomerID INT PRIMARY KEY, BrandID INT, RegionID INT, PreferenceID INT, FOREIGN KEY (BrandID) REFERENCES HotelBrands(BrandID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID), FOREIGN KEY (PreferenceID) REFERENCES CustomerPreferences(PreferenceID)); INSERT INTO HotelBrands (BrandID, BrandName) VALUES (1, 'Marriott'), (2, 'Hilton'), (3, 'Hyatt'); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'); INSERT INTO CustomerPreferences (PreferenceID, PreferenceName) VALUES (1, 'Free WiFi'), (2, 'Continental Breakfast'), (3, 'Late Checkout');","WITH PreferenceCounts AS (SELECT RegionID, PreferenceID, COUNT(*) AS PreferenceCount FROM HotelCustomerPreferences GROUP BY RegionID, PreferenceID), RankedPreferences AS (SELECT RegionID, PreferenceID, DENSE_RANK() OVER (PARTITION BY RegionID ORDER BY PreferenceCount DESC) AS Rank FROM PreferenceCounts) SELECT r.RegionName, cp.PreferenceName FROM RankedPreferences rp JOIN Regions r ON rp.RegionID = r.RegionID JOIN CustomerPreferences cp ON rp.PreferenceID = cp.PreferenceID WHERE rp.Rank = 1;","The query first aggregates the count of each preference per region. Then, it ranks these preferences within each region based on their count. Finally, it selects the most popular preference for each region by choosing those ranked first and joins back to get the region and preference names."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Retrieve the number of patents granted for each technology category in 2020.,"CREATE TABLE Patents2020 (PatentID INT PRIMARY KEY, TechCategory VARCHAR(50), GrantDate DATE); INSERT INTO Patents2020 (PatentID, TechCategory, GrantDate) VALUES (1, 'AI', '2020-05-12'), (2, 'Blockchain', '2020-03-07'), (3, 'AR/VR', '2020-11-22'), (4, 'AI', '2020-06-29'), (5, 'IoT', '2020-12-30');","SELECT TechCategory, COUNT(*) AS PatentCount FROM Patents2020 WHERE YEAR(GrantDate) = 2020 GROUP BY TechCategory;",The query first filters the patents granted in the year 2020. It then groups the data by the technology category and uses the COUNT function to calculate the number of patents granted for each technology category in 2020. The result is a list of technology categories along with the corresponding count of patents granted in 2020.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that consolidates patient demographics, medical histories, treatment protocols, and outcomes to facilitate drug efficacy studies, and then display the top 3 most effective drugs based on patient recovery rates.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10), Ethnicity VARCHAR(50)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), Dose DECIMAL, StartDate DATE, EndDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Outcomes (OutcomeID INT PRIMARY KEY, PatientID INT, RecoveryRate DECIMAL, SideEffects VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","CREATE TABLE DrugEfficacy AS SELECT DrugName, AVG(RecoveryRate) AS AvgRecoveryRate FROM Treatments T JOIN Outcomes O ON T.PatientID = O.PatientID GROUP BY DrugName; WITH RankedDrugs AS (SELECT DrugName, AvgRecoveryRate, DENSE_RANK() OVER (ORDER BY AvgRecoveryRate DESC) AS Rank FROM DrugEfficacy) SELECT DrugName, AvgRecoveryRate FROM RankedDrugs WHERE Rank <= 3;","The query first creates a new table 'DrugEfficacy' that consolidates drug names and their average recovery rates by joining the Treatments and Outcomes tables. It then uses a common table expression (CTE) to rank these drugs based on their average recovery rates in descending order. Finally, it selects the top 3 most effective drugs using the DENSE_RANK function."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects",Develop a table to store the performance data of athletes in different sports and years and then generate an output that lists the top 5 athletes with the highest average scores in each sport for the last 5 years.,"CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), EventYear INT, Score DECIMAL); INSERT INTO AthletePerformance (AthleteID, AthleteName, Sport, EventYear, Score) VALUES (1, 'Athlete1', 'Basketball', 2020, 28.7), (2, 'Athlete2', 'Swimming', 2021, 9.2), (3, 'Athlete3', 'Golf', 2019, 69.5), (4, 'Athlete4', 'Tennis', 2020, 6.0), (5, 'Athlete5', 'Basketball', 2018, 23.6);","WITH RankedAthletes AS (SELECT AthleteName, Sport, AVG(Score) AS AvgScore, DENSE_RANK() OVER (PARTITION BY Sport ORDER BY AVG(Score) DESC) AS Rank FROM AthletePerformance WHERE EventYear >= (SELECT MAX(EventYear)-5 FROM AthletePerformance) GROUP BY AthleteName, Sport) SELECT AthleteName, Sport, AvgScore FROM RankedAthletes WHERE Rank <= 5;","This SQL query first creates a common table expression (CTE) named 'RankedAthletes' which calculates the average score for each athlete in each sport for the last 5 years. It then ranks these athletes within their respective sports based on this average score in descending order using the DENSE_RANK function. Finally, it selects the top 5 athletes in each sport based on this ranking."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average occupancy rate for different hotel chains across various countries and identify the top 5 countries with the highest average occupancy rates in the past year.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), ChainName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Occupancy (RecordID INT PRIMARY KEY, HotelID INT, Date DATE, OccupiedRooms INT, TotalRooms INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","WITH AvgOccupancy AS (SELECT H.Country, AVG(CAST(O.OccupiedRooms AS FLOAT) / O.TotalRooms) * 100 AS AvgOccupancyRate FROM Hotels H INNER JOIN Occupancy O ON H.HotelID = O.HotelID WHERE O.Date BETWEEN DATEADD(YEAR, -1, GETDATE()) AND GETDATE() GROUP BY H.Country) SELECT Country, AvgOccupancyRate FROM AvgOccupancy ORDER BY AvgOccupancyRate DESC LIMIT 5;",The query calculates the average occupancy rate for hotels across different countries by joining the Hotels and Occupancy tables based on HotelID. It filters the records to include only those from the past year. The average occupancy rate for each country is calculated and the top 5 countries with the highest average occupancy rates are selected and displayed.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Retrieve the total number of patients who have been treated using Protocol A and their average age.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10), DemographicInfo VARCHAR(100)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE TreatmentProtocols (TreatmentID INT PRIMARY KEY, ProtocolName VARCHAR(50), Description TEXT); CREATE TABLE PatientTreatments (TreatmentID INT, PatientID INT, DateOfTreatment DATE, Outcome VARCHAR(50), FOREIGN KEY (TreatmentID) REFERENCES TreatmentProtocols(TreatmentID), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT COUNT(Patients.PatientID) AS TotalPatients, AVG(Patients.Age) AS AverageAge FROM Patients JOIN PatientTreatments ON Patients.PatientID=PatientTreatments.PatientID JOIN TreatmentProtocols ON PatientTreatments.TreatmentID=TreatmentProtocols.TreatmentID WHERE TreatmentProtocols.ProtocolName='Protocol A';","The query joins the Patients, PatientTreatments, and TreatmentProtocols tables to obtain records of patients treated with 'Protocol A'. It then calculates the total number of such patients and their average age. The COUNT function counts the number of patients, while the AVG function computes the average age."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average crop yield per hectare for different crops in various regions.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), YieldPerHectare DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, YieldPerHectare) VALUES (1, 'Wheat', 'North America', 3.5), (2, 'Corn', 'Europe', 7.8), (3, 'Rice', 'Asia', 6.2), (4, 'Soybean', 'South America', 2.9), (5, 'Barley', 'Europe', 4.0);","WITH AvgYield AS (SELECT CropName, Region, AVG(YieldPerHectare) AS AverageYield FROM CropYield GROUP BY CropName, Region) SELECT CropName, Region, AverageYield FROM AvgYield;","The query creates a common table expression (CTE) that calculates the average yield per hectare for each crop in different regions by grouping the data by CropName and Region. It then selects the crop name, region, and their respective average yields from the CTE."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,"Show the total government spending breakdown by department over the last five years, and highlight any department whose annual spending increased by more than 10% compared to the previous year.","CREATE TABLE GovernmentSpending (Year INT, Department VARCHAR(50), Spending DECIMAL); INSERT INTO GovernmentSpending (Year, Department, Spending) VALUES (2016, 'Education', 1000000), (2017, 'Education', 1050000), (2018, 'Education', 1155000), (2019, 'Education', 1270500), (2020, 'Education', 1397550), (2016, 'Health', 2000000), (2017, 'Health', 2200000), (2018, 'Health', 2420000), (2019, 'Health', 2662000), (2020, 'Health', 2928200);","WITH YearlyIncrease AS (SELECT Year, Department, Spending, LAG(Spending) OVER (PARTITION BY Department ORDER BY Year) AS PreviousYearSpending FROM GovernmentSpending) SELECT Year, Department, Spending, ((Spending - PreviousYearSpending) / PreviousYearSpending) * 100 AS SpendingIncreasePercentage FROM YearlyIncrease WHERE ((Spending - PreviousYearSpending) / PreviousYearSpending) * 100 > 10;","The SQL query first creates a common table expression (CTE) named 'YearlyIncrease', which includes a new column 'PreviousYearSpending' that represents the spending of the previous year for each department. This is achieved using the LAG function, which provides access to a row at a given physical offset that comes before the current row. Then, from the 'YearlyIncrease' CTE, the query selects the year, department, spending and calculates the percentage increase in spending compared to the previous year for each department. It finally filters out the departments where the spending increase percentage is more than 10."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showcasing the total investment and number of startups in each technology sector for the year 2020. The report should also include the sector with the highest investment in that year.,"CREATE TABLE TechInvestments (InvestmentID INT PRIMARY KEY, StartupName VARCHAR(50), Sector VARCHAR(50), Investment DECIMAL, Year INT); INSERT INTO TechInvestments (InvestmentID, StartupName, Sector, Investment, Year) VALUES (1, 'Startup A', 'AI', 2000000, 2020), (2, 'Startup B', 'Blockchain', 500000, 2020), (3, 'Startup C', 'AI', 1500000, 2020), (4, 'Startup D', 'Cybersecurity', 1000000, 2020), (5, 'Startup E', 'AI', 500000, 2020);","WITH TotalInvestment AS (SELECT Sector, SUM(Investment) AS TotalInvestment, COUNT(StartupName) AS NumberOfStartups FROM TechInvestments WHERE Year = 2020 GROUP BY Sector), MaxInvestment AS (SELECT MAX(TotalInvestment) AS HighestInvestment FROM TotalInvestment) SELECT t.Sector, t.TotalInvestment, t.NumberOfStartups, CASE WHEN t.TotalInvestment = m.HighestInvestment THEN 'Yes' ELSE 'No' END AS IsHighestInvestment FROM TotalInvestment t, MaxInvestment m;",The query first generates a subquery named 'TotalInvestment' that sums up the total investment and counts the number of startups in each sector for the year 2020. It then creates another subquery named 'MaxInvestment' that identifies the maximum investment value across all sectors. The final SELECT statement joins these two subqueries and adds a conditional column 'IsHighestInvestment' that indicates whether the total investment in a sector is the highest for that year.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,"Identify the top 5 patients with the highest number of different medications prescribed, ranked by the total count of different medications.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(50), SideEffects VARCHAR(255)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, PrescribedDate DATE); INSERT INTO Patients (PatientID, Age, Gender, Region) VALUES (1, 45, 'Male', 'North America'), (2, 36, 'Female', 'Europe'), (3, 55, 'Male', 'Asia'), (4, 27, 'Female', 'North America'), (5, 70, 'Male', 'Europe'); INSERT INTO Medications (MedicationID, MedicationName, SideEffects) VALUES (1, 'Medication A', 'Nausea, Vomiting'), (2, 'Medication B', 'Dizziness, Fatigue'), (3, 'Medication C', 'Dry mouth, Blurred vision'), (4, 'Medication D', 'Weight gain, Sleep problems'), (5, 'Medication E', 'Constipation, Increased heart rate'); INSERT INTO Prescriptions (PrescriptionID, PatientID, MedicationID, PrescribedDate) VALUES (1, 1, 1, '2022-01-01'), (2, 2, 2, '2022-01-02'), (3, 3, 3, '2022-01-03'), (4, 1, 4, '2022-01-04'), (5, 2, 3, '2022-01-05'), (6, 1, 2, '2022-01-06'), (7, 3, 2, '2022-01-07'), (8, 4, 5, '2022-01-08'), (9, 5, 4, '2022-01-09'), (10, 1, 5, '2022-01-10');","WITH RankedPatients AS (SELECT p.PatientID, COUNT(DISTINCT pr.MedicationID) AS MedicationCount, RANK() OVER (ORDER BY COUNT(DISTINCT pr.MedicationID) DESC) AS Rank FROM Patients p INNER JOIN Prescriptions pr ON p.PatientID = pr.PatientID GROUP BY p.PatientID) SELECT PatientID, MedicationCount FROM RankedPatients WHERE Rank <= 5;","The query starts by creating a common table expression (CTE) named RankedPatients. Within this CTE, it joins the Patients table with the Prescriptions table based on the PatientID. It then groups by PatientID and calculates the count of distinct MedicationID for each patient (representing the number of different medications prescribed). The RANK() function is used to rank the patients based on the count of distinct medications in descending order. Finally, the main query selects the PatientID and MedicationCount from the RankedPatients CTE for only those rows where the Rank is less than or equal to 5 (representing the top 5 patients with the highest count of different medications)."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that tracks the adoption rates of different emerging technologies across various industries and regions, and then display the technologies that are popular in all regions but not yet adopted in any of the traditional industries.","CREATE TABLE EmergingTechnologies (TechID INT PRIMARY KEY, TechName VARCHAR(50), Industry VARCHAR(50), Region VARCHAR(50), AdoptionRate DECIMAL); CREATE TABLE TraditionalIndustries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); INSERT INTO EmergingTechnologies (TechID, TechName, Industry, Region, AdoptionRate) VALUES (1, 'Blockchain', 'Finance', 'North America', 75.4), (2, 'AI', 'Healthcare', 'Europe', 80.2), (3, 'IoT', 'Manufacturing', 'Asia', 65.0), (4, '5G', 'Telecommunications', 'Africa', 70.1), (5, 'Quantum Computing', 'Research', 'Oceania', 50.5);","WITH PopularTechnologies AS (SELECT DISTINCT TechName FROM EmergingTechnologies WHERE AdoptionRate > 50), TraditionalIndustryTech AS (SELECT DISTINCT TechName FROM EmergingTechnologies WHERE Industry IN (SELECT IndustryName FROM TraditionalIndustries)) SELECT TechName FROM PopularTechnologies EXCEPT SELECT TechName FROM TraditionalIndustryTech INTERSECT SELECT TechName FROM EmergingTechnologies WHERE Region IN (SELECT RegionName FROM Regions);","The query first creates a common table expression (CTE) called PopularTechnologies that selects distinct technologies with an adoption rate greater than 50%. It then creates another CTE called TraditionalIndustryTech that selects distinct technologies adopted by traditional industries. Finally, the main query uses the EXCEPT set operation to find technologies that are popular but not adopted by traditional industries, and the INTERSECT set operation to ensure these technologies are popular in all regions."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the total sales and average price of electric vehicles (EVs) across different regions for the past year, and include the number of models sold in each region.","CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, ModelID INT, Region VARCHAR(50), SaleDate DATE, SalePrice DECIMAL); CREATE TABLE Vehicles (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE VehicleTypes (TypeID INT PRIMARY KEY, TypeName VARCHAR(50)); INSERT INTO Vehicles (ModelID, ModelName, Type) VALUES (1, 'Model S', 'EV'), (2, 'Leaf', 'EV'), (3, 'Bolt', 'EV'), (4, 'Prius', 'Hybrid');","SELECT R.RegionName, COUNT(DISTINCT V.ModelID) AS NumberOfModels, SUM(VS.SalePrice) AS TotalSales, AVG(VS.SalePrice) AS AveragePrice FROM VehicleSales VS INNER JOIN Vehicles V ON VS.ModelID = V.ModelID INNER JOIN Regions R ON VS.Region = R.RegionName WHERE V.Type = 'EV' AND VS.SaleDate >= DATEADD(year, -1, GETDATE()) GROUP BY R.RegionName;","The query calculates the total sales, average price, and number of distinct EV models sold in each region over the past year. It joins the VehicleSales, Vehicles, and Regions tables using INNER JOINs, and filters the results to include only electric vehicles (EVs) sold within the last year. The GROUP BY clause aggregates the data by region."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table for storing details about different species of trees, their average age, and the amount of carbon they can sequester annually. Then, display the top 3 species which can sequester the most carbon.","CREATE TABLE TreeSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), AvgAge INT, CarbonSequestration DECIMAL); INSERT INTO TreeSpecies (SpeciesID, SpeciesName, AvgAge, CarbonSequestration) VALUES (1, 'Oak', 200, 48.5), (2, 'Pine', 150, 38.0), (3, 'Beech', 300, 54.0), (4, 'Maple', 100, 42.0), (5, 'Cypress', 250, 52.0);","WITH RankedSpecies AS (SELECT SpeciesName, CarbonSequestration, DENSE_RANK() OVER (ORDER BY CarbonSequestration DESC) AS Rank FROM TreeSpecies) SELECT SpeciesName, CarbonSequestration FROM RankedSpecies WHERE Rank <= 3;",The query starts by creating a common table expression (CTE) to rank tree species based on their carbon sequestration ability in descending order. It then selects the top 3 species which can sequester the most carbon using the DENSE_RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the most common drug side effects among patients aged 60 and above who have had cardiac surgeries.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, SurgeryType VARCHAR(50)); CREATE TABLE DrugSideEffects (EffectID INT PRIMARY KEY, EffectName VARCHAR(50), PatientID INT, FOREIGN KEY(PatientID) REFERENCES Patients(PatientID)); INSERT INTO Patients (PatientID, Age, SurgeryType) VALUES (1, 65, 'Cardiac Surgery'), (2, 70, 'Cardiac Surgery'), (3, 75, 'Cardiac Surgery'), (4, 80, 'Cardiac Surgery'), (5, 85, 'Cardiac Surgery'); INSERT INTO DrugSideEffects (EffectID, EffectName, PatientID) VALUES (1, 'Nausea', 1), (2, 'Nausea', 2), (3, 'Headache', 3), (4, 'Nausea', 4), (5, 'Dizziness', 5);","WITH FilteredPatients AS (SELECT PatientID FROM Patients WHERE Age >= 60 AND SurgeryType = 'Cardiac Surgery') SELECT EffectName, COUNT(*) AS Frequency FROM DrugSideEffects WHERE PatientID IN (SELECT PatientID FROM FilteredPatients) GROUP BY EffectName ORDER BY Frequency DESC;","The query first creates a temporary table, FilteredPatients, containing the IDs of patients who are aged 60 and above and have had cardiac surgeries. This is done using a subquery. Then, the query selects side effect names and their frequency in the DrugSideEffects table, but only for the patients present in the FilteredPatients table (done using a subquery in the WHERE clause). The final result is a list of side effects and their frequency among the specified group of patients, ordered by frequency in descending order."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about the adoption rates of different emerging technologies across various industries, and then display the top 5 industries with the highest adoption rates for Artificial Intelligence.","CREATE TABLE Industries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(255)); CREATE TABLE Technologies (TechnologyID INT PRIMARY KEY, TechnologyName VARCHAR(255)); CREATE TABLE AdoptionRates (AdoptionRateID INT PRIMARY KEY, IndustryID INT, TechnologyID INT, AdoptionRate DECIMAL, FOREIGN KEY (IndustryID) REFERENCES Industries(IndustryID), FOREIGN KEY (TechnologyID) REFERENCES Technologies(TechnologyID)); INSERT INTO Industries (IndustryID, IndustryName) VALUES (1, 'Healthcare'), (2, 'Finance'), (3, 'Manufacturing'), (4, 'Retail'), (5, 'Telecommunications'); INSERT INTO Technologies (TechnologyID, TechnologyName) VALUES (1, 'Artificial Intelligence'), (2, 'Blockchain'), (3, 'Internet of Things');","WITH RankedAdoptions AS (SELECT I.IndustryName, A.AdoptionRate, DENSE_RANK() OVER (ORDER BY A.AdoptionRate DESC) AS Rank FROM AdoptionRates A INNER JOIN Industries I ON A.IndustryID = I.IndustryID WHERE A.TechnologyID = (SELECT TechnologyID FROM Technologies WHERE TechnologyName = 'Artificial Intelligence')) SELECT IndustryName, AdoptionRate FROM RankedAdoptions WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank industries based on their adoption rates of Artificial Intelligence in descending order. An inner join is used to link the IndustryID from the AdoptionRates table to the corresponding IndustryName in the Industries table. The query then selects the top 5 industries with the highest adoption rates using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a database to store data about different species, their population, the region they inhabit, and the environmental conservation efforts taken for each species. Then, provide a list of species for which conservation efforts are 'Endangered' or 'Critically Endangered' in Asia.","CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Population INT); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); INSERT INTO Species (SpeciesID, SpeciesName, Population) VALUES (1, 'Tiger', 3200), (2, 'Elephant', 41500), (3, 'Panda', 1864), (4, 'Snow Leopard', 6000); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'Asia'), (2, 'Africa'), (3, 'North America'); CREATE TABLE ConservationEfforts (EffortID INT PRIMARY KEY, SpeciesID INT, RegionID INT, ConservationStatus VARCHAR(50)); INSERT INTO ConservationEfforts (EffortID, SpeciesID, RegionID, ConservationStatus) VALUES (1, 1, 1, 'Endangered'), (2, 2, 2, 'Vulnerable'), (3, 3, 1, 'Vulnerable'), (4, 4, 1, 'Endangered');","SELECT S.SpeciesName, R.RegionName, C.ConservationStatus FROM Species S INNER JOIN ConservationEfforts C ON S.SpeciesID = C.SpeciesID INNER JOIN Regions R ON C.RegionID = R.RegionID WHERE (C.ConservationStatus = 'Endangered' OR C.ConservationStatus = 'Critically Endangered') AND R.RegionName = 'Asia';","The query first joins Species, ConservationEfforts, and Regions tables using INNER JOIN based on SpeciesID and RegionID. Then, it filters out the species with conservation status 'Endangered' or 'Critically Endangered' in the 'Asia' region. Finally, it displays the species name, region name, and conservation status."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,"Generate a report showing the annual trend of CO2 emissions by each country. The report should display the year, the country and the amount of CO2 emissions for that year, sorted by year and country. It should also include a column that shows the change in CO2 emissions from the previous year.","CREATE TABLE CO2Emissions (Year INT, Country VARCHAR(50), Emissions DECIMAL); INSERT INTO CO2Emissions (Year, Country, Emissions) VALUES (2000, 'USA', 5000.5), (2001, 'USA', 5050.0), (2002, 'USA', 5120.0), (2000, 'China', 4500.7), (2001, 'China', 4600.2), (2002, 'China', 4700.0);","WITH EmissionsChange AS (SELECT Year, Country, Emissions, LAG(Emissions) OVER (PARTITION BY Country ORDER BY Year) as PrevEmissions FROM CO2Emissions) SELECT Year, Country, Emissions, Emissions - PrevEmissions as Change FROM EmissionsChange ORDER BY Year, Country;","The SQL query first creates a common table expression (CTE) named EmissionsChange that includes a column for the previous year's emissions for each country. It uses the LAG function to retrieve the previous year's emissions. This CTE is partitioned by country and ordered by year. The main query then selects the year, country, emissions and the change in emissions from the previous year from the EmissionsChange CTE. This is calculated as the difference between the current year's emissions and the previous year's emissions. The results are ordered by year and country."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the details of different tech companies including their location, sectors, and total funding, and then find the companies from the 'AI' sector that have funding more than the average funding of companies in the 'Cloud Computing' sector.","CREATE TABLE TechCompanies (ID INT PRIMARY KEY, CompanyName VARCHAR(50), Location VARCHAR(50), Sector VARCHAR(50), TotalFunding DECIMAL); INSERT INTO TechCompanies (ID, CompanyName, Location, Sector, TotalFunding) VALUES (1, 'Company A', 'USA', 'AI', 500.0), (2, 'Company B', 'Europe', 'Cloud Computing', 300.0), (3, 'Company C', 'Asia', 'AI', 200.0), (4, 'Company D', 'USA', 'Cloud Computing', 400.0), (5, 'Company E', 'Europe', 'AI', 600.0);","WITH AvgCloudFunding AS (SELECT AVG(TotalFunding) AS AverageFunding FROM TechCompanies WHERE Sector = 'Cloud Computing') SELECT CompanyName, Location, TotalFunding FROM TechCompanies WHERE Sector = 'AI' AND TotalFunding > (SELECT AverageFunding FROM AvgCloudFunding);","The query first creates a common table expression (CTE) named 'AvgCloudFunding' to calculate the average funding of companies in the 'Cloud Computing' sector. Then, it selects the companies from the 'AI' sector whose total funding is greater than the average funding of companies in the 'Cloud Computing' sector."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Log media consumption activities, commit the successful records and rollback if there's any error.","CREATE TABLE MediaConsumption (ActivityID INT PRIMARY KEY, UserID INT, MediaType VARCHAR(50), ConsumptionTime TIMESTAMP); CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50)); CREATE TABLE Media (MediaID INT PRIMARY KEY, MediaType VARCHAR(50), Title VARCHAR(100));","BEGIN TRANSACTION; INSERT INTO MediaConsumption (ActivityID, UserID, MediaType, ConsumptionTime) VALUES (1, 101, 'Movie', '2023-10-05 20:30:00'); COMMIT;","The query begins a transaction to log a media consumption activity. It inserts a new record into the MediaConsumption table and then commits the transaction. If the insertion fails, the transaction can be rolled back to maintain data integrity."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Find the top 5 vehicle models that are the most popular in terms of sales in the hybrid and electric vehicle categories, and then remove those models that are not available in all regions.","CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Sales INT, Category VARCHAR(50), Region VARCHAR(50)); INSERT INTO VehicleSales (ModelID, ModelName, Sales, Category, Region) VALUES (1, 'Model S', 15000, 'Electric', 'North America'), (2, 'Model 3', 20000, 'Electric', 'Europe'), (3, 'Leaf', 12000, 'Hybrid', 'Asia'), (4, 'Bolt', 18000, 'Electric', 'North America'), (5, 'Prius', 25000, 'Hybrid', 'Europe'), (6, 'Volt', 10000, 'Electric', 'North America'), (7, 'Insight', 8000, 'Hybrid', 'Asia'), (8, 'Zoe', 13000, 'Electric', 'Europe'), (9, 'Model Y', 22000, 'Electric', 'North America'), (10, 'Mirai', 7000, 'Hybrid', 'Asia');","WITH RankedModels AS (SELECT ModelName, SUM(Sales) AS TotalSales, COUNT(DISTINCT Region) AS RegionCount, DENSE_RANK() OVER (ORDER BY SUM(Sales) DESC) AS Rank FROM VehicleSales WHERE Category IN ('Hybrid', 'Electric') GROUP BY ModelName), Top5Models AS (SELECT ModelName FROM RankedModels WHERE Rank <= 5) SELECT ModelName FROM Top5Models WHERE ModelName IN (SELECT ModelName FROM RankedModels WHERE RegionCount = (SELECT COUNT(DISTINCT Region) FROM VehicleSales));","The query first creates a common table expression (CTE) to rank vehicle models based on their total sales across all regions, while also counting the distinct number of regions each model is available in. It then selects the top 5 most popular models using the DENSE_RANK function. Finally, it removes any models from the top 5 that are not available in all regions by checking if their region count matches the total number of distinct regions."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average occupancy rates for different hotels across various regions, and then display the top 5 hotels with the highest occupancy rates.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE OccupancyRates (OccupancyID INT PRIMARY KEY, HotelID INT, Year INT, AvgOccupancyRate DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID)); INSERT INTO Hotels (HotelID, HotelName, Region) VALUES (1, 'Hotel A', 'North America'), (2, 'Hotel B', 'Europe'), (3, 'Hotel C', 'Asia'), (4, 'Hotel D', 'North America'), (5, 'Hotel E', 'Europe'); INSERT INTO OccupancyRates (OccupancyID, HotelID, Year, AvgOccupancyRate) VALUES (1, 1, 2022, 85.5), (2, 2, 2022, 88.0), (3, 3, 2022, 90.0), (4, 4, 2022, 87.7), (5, 5, 2022, 82.0);","WITH RankedHotels AS (SELECT h.HotelName, o.AvgOccupancyRate, DENSE_RANK() OVER (ORDER BY o.AvgOccupancyRate DESC) AS Rank FROM Hotels h JOIN OccupancyRates o ON h.HotelID = o.HotelID) SELECT HotelName, AvgOccupancyRate FROM RankedHotels WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank hotel occupancy rates in descending order. It then selects the top 5 hotels with the highest average occupancy rates using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the average annual carbon emissions for each country and the number of conservation projects they have undertaken, but only for those countries with more than 10 projects.","CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); CREATE TABLE ConservationProjects (Country VARCHAR(50), ProjectID INT, ProjectName VARCHAR(100)); INSERT INTO CarbonEmissions (Country, Year, Emissions) VALUES ('USA', 2020, 5.4), ('Germany', 2020, 2.8), ('China', 2020, 10.6), ('India', 2020, 2.3); INSERT INTO ConservationProjects (Country, ProjectID, ProjectName) VALUES ('USA', 1, 'Project Green'), ('USA', 2, 'Project Blue'), ('Germany', 3, 'Project Sky'), ('China', 4, 'Project Earth'), ('India', 5, 'Project Water'), ('USA', 6, 'Project Air'), ('USA', 7, 'Project Fire'), ('Germany', 8, 'Project Ice'), ('China', 9, 'Project Wind'), ('India', 10, 'Project Sea'), ('USA', 11, 'Project Space');","WITH ProjectCounts AS (SELECT Country, COUNT(ProjectID) as ProjectCount FROM ConservationProjects GROUP BY Country) SELECT CE.Country, AVG(CE.Emissions) as AvgEmissions, PC.ProjectCount FROM CarbonEmissions CE INNER JOIN ProjectCounts PC ON CE.Country = PC.Country WHERE PC.ProjectCount > 10 GROUP BY CE.Country, PC.ProjectCount;","The query first creates a common table expression (CTE) to count the number of projects each country has. It then joins this CTE with the CarbonEmissions table on the country. The results are grouped by country and the average emissions and project count for each country is selected, but only for those countries with more than 10 projects."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Show me the average duration of movies created by each production company in 2020,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(50), ProductionCompany VARCHAR(50), ReleaseYear INT, DurationInMinutes INT); INSERT INTO Movies (MovieID, Title, ProductionCompany, ReleaseYear, DurationInMinutes) VALUES (1, 'Movie A', 'Company 1', 2020, 120), (2, 'Movie B', 'Company 2', 2020, 125), (3, 'Movie C', 'Company 1', 2020, 100), (4, 'Movie D', 'Company 3', 2020, 115), (5, 'Movie E', 'Company 2', 2020, 105);","SELECT ProductionCompany, AVG(DurationInMinutes) as AvgDuration FROM Movies WHERE ReleaseYear = 2020 GROUP BY ProductionCompany;","The query first filters the Movies table for rows where the Release Year is 2020. Then, it groups the resulting rows by Production Company. For each group, it calculates the average movie duration and returns the Production Company name and corresponding average duration."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new patient's medical history record into the database.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), Treatment VARCHAR(100), Outcome VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","INSERT INTO MedicalHistories (HistoryID, PatientID, Diagnosis, Treatment, Outcome) VALUES (1, 1, 'Hypertension', 'Medication', 'Improved');","This query inserts a new record into the MedicalHistories table, associating it with an existing patient in the Patients table. It specifies the HistoryID, PatientID, Diagnosis, Treatment, and Outcome for the new medical history entry."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the total investment in blockchain technology sector by each company in the last 5 years, and return only those companies that have invested more than 50 million dollars.","CREATE TABLE Investments (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Sector VARCHAR(50), Investment DECIMAL, Year INT); INSERT INTO Investments (CompanyID, CompanyName, Sector, Investment, Year) VALUES (1, 'Company A', 'Blockchain', 60.0, 2018), (2, 'Company B', 'AI', 80.0, 2017), (3, 'Company C', 'Blockchain', 100.0, 2020), (4, 'Company A', 'Blockchain', 70.0, 2019), (5, 'Company B', 'Blockchain', 55.0, 2021), (6, 'Company A', 'Blockchain', 75.0, 2021);","SELECT CompanyName, SUM(Investment) AS TotalInvestment FROM Investments WHERE Sector = 'Blockchain' AND Year > (SELECT MAX(Year) FROM Investments) - 5 GROUP BY CompanyName HAVING SUM(Investment) > 50;","The SQL query first filters the rows from the Investments table where the sector is 'Blockchain' and the year is within the last 5 years. Then, it groups the rows by company name, calculates the total investment for each company, and only returns those companies where the total investment is more than 50 million dollars."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Insert records for government spending on education and healthcare in different states for the year 2021, and then find out the states that have spent more than the national average on healthcare.","CREATE TABLE GovernmentSpending (State VARCHAR(50), EducationSpending DECIMAL, HealthcareSpending DECIMAL, Year INT); INSERT INTO GovernmentSpending (State, EducationSpending, HealthcareSpending, Year) VALUES ('California', 20000, 30000, 2021), ('Texas', 15000, 25000, 2021), ('New York', 18000, 28000, 2021), ('Florida', 17000, 26000, 2021), ('Illinois', 16000, 27000, 2021);","WITH AvgHealthcare AS (SELECT AVG(HealthcareSpending) AS NationalAverage FROM GovernmentSpending WHERE Year = 2021) SELECT State, HealthcareSpending FROM GovernmentSpending, AvgHealthcare WHERE Year = 2021 AND HealthcareSpending > AvgHealthcare.NationalAverage;","The query first creates a common table expression (CTE) to calculate the national average healthcare spending for the year 2021. Then, from the GovernmentSpending table, it selects the states that have spent more than this national average on healthcare in 2021."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 most popular fashion items based on sales in the past quarter, segmented by region.","CREATE TABLE FashionSales (ItemID INT PRIMARY KEY, ItemName VARCHAR(100), Region VARCHAR(100), Sales INT, SaleDate DATE); INSERT INTO FashionSales (ItemID, ItemName, Region, Sales, SaleDate) VALUES (1, 'Leather Jacket', 'North America', 500, '2023-07-12'), (2, 'Denim Jeans', 'Europe', 450, '2023-08-03'), (3, 'Sneakers', 'Asia', 600, '2023-07-25'), (4, 'Silk Scarf', 'North America', 200, '2023-09-10'), (5, 'Evening Gown', 'Europe', 300, '2023-07-19');","WITH QuarterlySales AS (SELECT ItemName, Region, SUM(Sales) AS TotalSales, RANK() OVER (PARTITION BY Region ORDER BY SUM(Sales) DESC) AS Rank FROM FashionSales WHERE SaleDate BETWEEN DATEADD(QUARTER, -1, GETDATE()) AND GETDATE() GROUP BY ItemName, Region) SELECT ItemName, Region, TotalSales FROM QuarterlySales WHERE Rank <= 5;","The query creates a common table expression (CTE) called QuarterlySales that sums up sales for each fashion item by region within the past quarter. It then ranks these items based on their total sales within each region using the RANK() function. Finally, it selects the top 5 most popular items in each region based on their sales."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Find out the top 3 most popular genres in North America and Europe separately, and then list out the genres which are popular in both regions.","CREATE TABLE MediaConsumption (UserID INT PRIMARY KEY, Region VARCHAR(50), Genre VARCHAR(50)); INSERT INTO MediaConsumption (UserID, Region, Genre) VALUES (1, 'North America', 'Action'), (2, 'North America', 'Comedy'), (3, 'North America', 'Drama'), (4, 'Europe', 'Action'), (5, 'Europe', 'Romance'), (6, 'Europe', 'Drama'), (7, 'Europe', 'Comedy'), (8, 'North America', 'Romance'), (9, 'North America', 'Drama'), (10, 'Europe', 'Action');","WITH NorthAmerica AS (SELECT Genre, COUNT(UserID) AS NA_Count FROM MediaConsumption WHERE Region = 'North America' GROUP BY Genre ORDER BY NA_Count DESC LIMIT 3), Europe AS (SELECT Genre, COUNT(UserID) AS E_Count FROM MediaConsumption WHERE Region = 'Europe' GROUP BY Genre ORDER BY E_Count DESC LIMIT 3) SELECT NorthAmerica.Genre FROM NorthAmerica INTERSECT SELECT Europe.Genre FROM Europe;","The query first creates two separate common table expressions (CTEs) for North America and Europe. In each CTE, it counts the number of users per genre in the given region and selects the top 3 most popular genres. The INTERSECT operation is then used to find genres that appear in the top 3 in both regions."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Find the top 5 countries with the highest average tourist expenditure in 2020.,"CREATE TABLE TouristExpenditure (ExpenditureID INT PRIMARY KEY, Country VARCHAR(50), Year INT, AvgExpenditure DECIMAL); INSERT INTO TouristExpenditure (ExpenditureID, Country, Year, AvgExpenditure) VALUES (1, 'USA', 2020, 1500.5), (2, 'Spain', 2020, 1300.0), (3, 'France', 2020, 1200.8), (4, 'Japan', 2020, 1100.2), (5, 'Germany', 2020, 1000.0), (6, 'Italy', 2020, 900.5), (7, 'UK', 2020, 850.0);","WITH RankedCountries AS (SELECT Country, AvgExpenditure, DENSE_RANK() OVER (ORDER BY AvgExpenditure DESC) AS Rank FROM TouristExpenditure WHERE Year = 2020) SELECT Country, AvgExpenditure FROM RankedCountries WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) that ranks countries based on their average tourist expenditure in the year 2020, in descending order. It then selects the top 5 countries with the highest average tourist expenditure from the ranked list using the DENSE_RANK function."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the annual public policy spending by various departments in different states, and then find the top 5 departments that have the maximum total spending across all states.","CREATE TABLE PublicPolicySpending (DeptID INT PRIMARY KEY, DeptName VARCHAR(50), State VARCHAR(50), Year INT, Spending DECIMAL); INSERT INTO PublicPolicySpending (DeptID, DeptName, State, Year, Spending) VALUES (1, 'Education', 'California', 2020, 50000.0), (2, 'Health', 'Texas', 2020, 47000.0), (3, 'Defense', 'New York', 2020, 65000.0), (4, 'Transport', 'Florida', 2020, 38000.0), (5, 'Education', 'Texas', 2020, 52000.0);","WITH TotalSpending AS (SELECT DeptName, SUM(Spending) as TotalSpending FROM PublicPolicySpending GROUP BY DeptName) SELECT DeptName, TotalSpending FROM TotalSpending ORDER BY TotalSpending DESC LIMIT 5;",The query first creates a common table expression (CTE) to group departments and calculate their total spending across all states. It then selects the top 5 departments with the maximum total spending and displays them in descending order.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the information of different IoT devices, their adoption rates in different regions, and display the trend of adoption rates per device category in a pivot table format.","CREATE TABLE IoTDevices (DeviceID INT PRIMARY KEY, DeviceName VARCHAR(50), DeviceCategory VARCHAR(50), Region VARCHAR(50), AdoptionRate DECIMAL); INSERT INTO IoTDevices (DeviceID, DeviceName, DeviceCategory, Region, AdoptionRate) VALUES (1, 'Alexa', 'Smart Home', 'North America', 75.5), (2, 'Nest', 'Smart Home', 'Europe', 65.0), (3, 'Fitbit', 'Wearables', 'Asia', 60.0), (4, 'Apple Watch', 'Wearables', 'North America', 80.7), (5, 'Tesla Model S', 'Autonomous Vehicle', 'Europe', 45.0);","WITH PivotData AS (SELECT DeviceCategory, Region, AdoptionRate FROM IoTDevices) SELECT * FROM PivotData PIVOT (AVG (AdoptionRate) FOR Region IN ('North America', 'Europe', 'Asia'))","The query first creates a common table expression (CTE) to select the device category, region, and adoption rate from the IoTDevices table. Then, it uses a PIVOT function to transform the rows into columns, showing the average adoption rate for each combination of device category and region. The result is a clear display of adoption rates per device category by region."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the crop yields for the year 2023 by increasing all yields by 10%.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Year, Yield) VALUES (1, 'Wheat', 2022, 35.2), (2, 'Corn', 2022, 40.7), (3, 'Rice', 2022, 55.3), (4, 'Barley', 2022, 30.5), (5, 'Soybean', 2022, 25.8);",UPDATE CropYields SET Yield = Yield * 1.1 WHERE Year = 2023;,The query updates the 'CropYields' table by setting the 'Yield' column to 110% of its current value for all records where the 'Year' is 2023. This effectively increases the crop yields for 2023 by 10%.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the top 3 most popular TV shows in each genre based on total viewership minutes, along with the average rating for each show.","CREATE TABLE TVShows (ShowID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), Rating DECIMAL, TotalViewershipMinutes INT);CREATE TABLE Genre (GenreID INT PRIMARY KEY, GenreName VARCHAR(50));CREATE TABLE ShowGenre (ShowID INT, GenreID INT, PRIMARY KEY (ShowID, GenreID));INSERT INTO TVShows (ShowID, Title, Genre, Rating, TotalViewershipMinutes) VALUES (1, 'Breaking Bad', 'Drama', 9.5, 500000), (2, 'Stranger Things', 'Sci-Fi', 8.9, 450000), (3, 'The Office', 'Comedy', 9.0, 300000), (4, 'Friends', 'Comedy', 8.5, 350000), (5, 'Game of Thrones', 'Fantasy', 9.3, 550000);INSERT INTO Genre (GenreID, GenreName) VALUES (1, 'Drama'), (2, 'Sci-Fi'), (3, 'Comedy'), (4, 'Fantasy');INSERT INTO ShowGenre (ShowID, GenreID) VALUES (1, 1), (2, 2), (3, 3), (4, 3), (5, 4);","WITH GenreRank AS (SELECT GenreName, Title, TotalViewershipMinutes, Rating, DENSE_RANK() OVER (PARTITION BY GenreName ORDER BY TotalViewershipMinutes DESC) AS Rank FROM TVShows T INNER JOIN ShowGenre SG ON T.ShowID = SG.ShowID INNER JOIN Genre G ON SG.GenreID = G.GenreID) SELECT GenreName, Title, TotalViewershipMinutes, Rating FROM GenreRank WHERE Rank <= 3;","The query first generates a common table expression (CTE) named GenreRank that ranks TV shows within each genre based on total viewership minutes in descending order using the DENSE_RANK function. It then selects the genre name, title, total viewership minutes, and rating for the top 3 ranked shows in each genre according to viewership minutes."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Update the sales data for electric vehicles (EVs) to reflect the latest quarter's numbers, ensuring that regional sales targets for Europe are met.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT, Quarter VARCHAR(10)); CREATE TABLE SalesTargets (TargetID INT PRIMARY KEY, Region VARCHAR(50), TargetSales INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, Sales, Quarter) VALUES (1, 'Model S', 'North America', 3000, 'Q1'), (2, 'Model 3', 'Europe', 2500, 'Q1'), (3, 'Leaf', 'Asia', 2000, 'Q1'), (4, 'Bolt', 'Europe', 1500, 'Q1'), (5, 'Prius', 'North America', 1800, 'Q1'); INSERT INTO SalesTargets (TargetID, Region, TargetSales) VALUES (1, 'North America', 5000), (2, 'Europe', 4000), (3, 'Asia', 3000);",UPDATE VehicleSales SET Sales = (SELECT TargetSales FROM SalesTargets WHERE SalesTargets.Region = VehicleSales.Region) WHERE VehicleSales.Region = 'Europe';,"The query updates the Sales column in the VehicleSales table for all rows where the Region is 'Europe'. It sets the Sales value to the target sales value found in the SalesTargets table for the corresponding region. To achieve this, a subquery is used to fetch the target sales for Europe from the SalesTargets table and update the Sales in the VehicleSales table accordingly."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Start a transaction to update the budget allocation for healthcare in different regions and commit the changes if the total budget allocation is within the national limit, otherwise rollback.","CREATE TABLE BudgetAllocation (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Sector VARCHAR(50), AllocatedAmount DECIMAL); INSERT INTO BudgetAllocation (RegionID, RegionName, Sector, AllocatedAmount) VALUES (1, 'North', 'Healthcare', 50000), (2, 'South', 'Healthcare', 60000), (3, 'East', 'Healthcare', 55000), (4, 'West', 'Healthcare', 45000);",BEGIN TRANSACTION; UPDATE BudgetAllocation SET AllocatedAmount = 70000 WHERE RegionName = 'North' AND Sector = 'Healthcare'; UPDATE BudgetAllocation SET AllocatedAmount = 80000 WHERE RegionName = 'South' AND Sector = 'Healthcare'; IF ((SELECT SUM(AllocatedAmount) FROM BudgetAllocation WHERE Sector = 'Healthcare') <= 250000) COMMIT; ELSE ROLLBACK;,"The query begins a transaction to update the allocated budget amounts for healthcare in the North and South regions. It then checks if the total healthcare budget allocation across all regions is within the national limit of 250,000. If it is, the transaction is committed, saving the changes; otherwise, the transaction is rolled back, reverting the changes."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find out which technology sector has the highest number of innovative startups in the last 5 years and display the top 10 sectors.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), FoundingYear INT, Sector VARCHAR(50)); INSERT INTO Startups (StartupID, StartupName, FoundingYear, Sector) VALUES (1, 'TechXYZ', 2017, 'AI'), (2, 'HealthInnov', 2018, 'Healthcare'), (3, 'GreenEnergy', 2016, 'Renewable Energy'), (4, 'CyberSec', 2019, 'Cybersecurity'), (5, 'FinTrack', 2020, 'FinTech');","WITH SectorStartups AS (SELECT Sector, COUNT(StartupID) AS NumberOfStartups FROM Startups WHERE FoundingYear >= (YEAR(CURRENT_DATE) - 5) GROUP BY Sector) SELECT Sector, NumberOfStartups FROM SectorStartups ORDER BY NumberOfStartups DESC LIMIT 10;","The SQL query first generates a Common Table Expression (CTE) named 'SectorStartups' that aggregates the number of startups in each sector for the last five years. It then selects the top 10 sectors with the most number of startups from this CTE, ordering them in descending order."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Insert the latest market trends in AI, Blockchain, Cloud Computing, and IoT into the TechTrends table and then retrieve all the trends which are common to both AI and IoT.","CREATE TABLE TechTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), TrendType VARCHAR(50)); INSERT INTO TechTrends (TrendID, TrendName, TrendType) VALUES (1, 'Deep Learning', 'AI'), (2, 'Neural Networks', 'AI'), (3, 'Smart Contracts', 'Blockchain'), (4, 'Decentralized Finance', 'Blockchain'), (5, 'Hybrid Cloud', 'Cloud Computing'), (6, 'Cloud Security', 'Cloud Computing'), (7, 'Smart Home', 'IoT'), (8, 'Industrial IoT', 'IoT'), (9, 'Deep Learning', 'IoT'), (10, 'Neural Networks', 'IoT');","WITH AI_Trends AS (SELECT TrendName FROM TechTrends WHERE TrendType = 'AI'), IoT_Trends AS (SELECT TrendName FROM TechTrends WHERE TrendType = 'IoT') SELECT TrendName FROM AI_Trends INTERSECT SELECT TrendName FROM IoT_Trends;",The query first creates two common table expressions to separate the trends related to AI and IoT. It then uses the INTERSECT operator to find and select the trends that are common to both AI and IoT.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find out the top 3 most popular travel destinations for the year 2021.,"CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Visits INT); INSERT INTO Destinations (DestinationID, DestinationName, Visits) VALUES (1, 'Paris', 2000), (2, 'New York', 4000), (3, 'Tokyo', 3500), (4, 'Sydney', 1500), (5, 'London', 3000);","BEGIN TRANSACTION; SELECT TOP 3 DestinationName, Visits FROM Destinations ORDER BY Visits DESC; COMMIT;","The query begins a new transaction to ensure data consistency. It then selects the top 3 travel destinations with the most visits from the Destinations table and orders them in descending order based on the number of visits. After the query is executed, the transaction is committed to save the changes to the database."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total sales of electric vehicles in 2022 for each region and commit the transaction if the total sales exceed 100,000 units.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), SaleDate DATE, UnitsSold INT, Region VARCHAR(50)); CREATE TABLE Models (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); INSERT INTO VehicleSales (SaleID, ModelName, SaleDate, UnitsSold, Region) VALUES (1, 'Tesla Model S', '2022-05-10', 20000, 'North America'), (2, 'Nissan Leaf', '2022-06-15', 15000, 'Europe'), (3, 'BMW i3', '2022-07-20', 12000, 'Asia'), (4, 'Chevy Bolt', '2022-08-25', 18000, 'North America'), (5, 'Tesla Model 3', '2022-09-30', 30000, 'Europe');","BEGIN TRANSACTION; WITH ElectricVehicleSales AS (SELECT Region, SUM(UnitsSold) AS TotalUnitsSold FROM VehicleSales WHERE SaleDate BETWEEN '2022-01-01' AND '2022-12-31' AND ModelName IN (SELECT ModelName FROM Models WHERE Type = 'Electric') GROUP BY Region) SELECT * FROM ElectricVehicleSales; IF (SELECT SUM(TotalUnitsSold) FROM ElectricVehicleSales) > 100000 COMMIT; ELSE ROLLBACK;","The query begins a transaction and uses a common table expression (CTE) to calculate the total units sold for electric vehicles in 2022, grouped by region. If the total sales across all regions exceed 100,000 units, the transaction is committed; otherwise, it is rolled back."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average treatment cost for patients based on their age groups.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10));CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, Cost DECIMAL, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT p.Age, AVG(t.Cost) AS AvgTreatmentCost FROM Patients p INNER JOIN Treatments t ON p.PatientID = t.PatientID GROUP BY p.Age;",The query joins the Patients and Treatments tables on the PatientID field to combine patient demographic information with their treatment costs. It then groups the data by patient age and calculates the average treatment cost for each age group using the AVG function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Delete all records of crops that have been harvested before 2020 and then insert a new record for a crop harvest for the year 2021.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), HarvestYear INT, Yield DECIMAL); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), Description TEXT); CREATE TABLE SupplyChain (SupplyID INT PRIMARY KEY, CropID INT, SupplyStage VARCHAR(50), FOREIGN KEY (CropID) REFERENCES CropYields(CropID)); CREATE TABLE GlobalFoodSecurityInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(100), StartDate DATE, EndDate DATE); CREATE TABLE Farmers (FarmerID INT PRIMARY KEY, FarmerName VARCHAR(50), Region VARCHAR(50));","DELETE FROM CropYields WHERE HarvestYear < 2020; INSERT INTO CropYields (CropID, CropName, HarvestYear, Yield) VALUES (6, 'Corn', 2021, 1500);","The query first deletes all rows from the CropYields table where the HarvestYear is less than 2020. This operation removes outdated records. Subsequently, a new record for a crop harvest in the year 2021 is inserted into the CropYields table. The new record includes a CropID of 6, a CropName of 'Corn', a HarvestYear of 2021, and a Yield of 1500."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the top 5 technology companies investing the most in AI research and development over the last 3 years.,"CREATE TABLE TechCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Industry VARCHAR(50)); INSERT INTO TechCompanies (CompanyID, CompanyName, Industry) VALUES (1, 'Google', 'Technology'), (2, 'Microsoft', 'Technology'), (3, 'Apple', 'Technology'), (4, 'Facebook', 'Technology'), (5, 'Amazon', 'Technology'); CREATE TABLE AInvestments (InvestmentID INT PRIMARY KEY, CompanyID INT, Year INT, InvestmentValue DECIMAL); INSERT INTO AInvestments (InvestmentID, CompanyID, Year, InvestmentValue) VALUES (1, 1, 2020, 5000.00), (2, 2, 2019, 4000.00), (3, 3, 2021, 3000.00), (4, 4, 2019, 2000.00), (5, 5, 2020, 1000.00);","WITH RatedInvestments AS (SELECT CompanyName, SUM(InvestmentValue) as TotalInvestment, DENSE_RANK() OVER (ORDER BY SUM(InvestmentValue) DESC) AS Rank FROM TechCompanies TC JOIN AInvestments AI ON TC.CompanyID = AI.CompanyID WHERE Year BETWEEN 2019 AND 2021 GROUP BY CompanyName) SELECT CompanyName, TotalInvestment FROM RatedInvestments WHERE Rank <= 5;",The query creates a common table expression (CTE) to calculate total investment of each company in AI research and development in the last 3 years and rank them in descending order. It then selects the top 5 companies with the highest investment using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Create a dashboard that shows the total amount invested in AI technology by each company and the return on investment (ROI) over the past 5 years.,"CREATE TABLE AIInvestments (InvestmentID INT PRIMARY KEY, CompanyName VARCHAR(50), Year INT, InvestmentAmount DECIMAL, ROI DECIMAL); INSERT INTO AIInvestments (InvestmentID, CompanyName, Year, InvestmentAmount, ROI) VALUES (1, 'TechCorp', 2017, 5000000, 0.08), (2, 'Innovatech', 2018, 3000000, 0.12), (3, 'DataSolutions', 2019, 7000000, 0.10), (4, 'AIPros', 2020, 4000000, 0.15), (5, 'FutureTech', 2021, 6000000, 0.11);","SELECT CompanyName, SUM(InvestmentAmount) AS TotalInvestment, AVG(ROI) AS AvgROI FROM AIInvestments WHERE Year BETWEEN 2017 AND 2021 GROUP BY CompanyName;","This query selects the company name, the total amount invested in AI technology, and the average return on investment from the AIInvestments table. It groups the results by company name and only includes investments made between 2017 and 2021."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 most popular sustainable fashion brands in terms of sales across different regions and their average consumer ratings.,"CREATE TABLE SalesData (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), Sales INT);CREATE TABLE ConsumerRatings (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), AvgRating DECIMAL);CREATE VIEW SustainableBrands AS SELECT BrandID, BrandName FROM SalesData WHERE BrandName IN ('Brand A', 'Brand B', 'Brand C', 'Brand D', 'Brand E');","WITH BrandSales AS (SELECT s.BrandName, s.Region, SUM(s.Sales) AS TotalSales, r.AvgRating FROM SalesData s JOIN ConsumerRatings r ON s.BrandID = r.BrandID GROUP BY s.BrandName, s.Region, r.AvgRating), RankedBrands AS (SELECT BrandName, Region, TotalSales, AvgRating, DENSE_RANK() OVER (ORDER BY TotalSales DESC) AS Rank FROM BrandSales) SELECT BrandName, Region, TotalSales, AvgRating FROM RankedBrands WHERE Rank <= 5;","The query first creates a common table expression (CTE) named BrandSales that joins SalesData and ConsumerRatings tables, aggregating total sales and including average ratings. It then ranks these brands based on their total sales in descending order using the DENSE_RANK function. Finally, it selects the top 5 brands in terms of sales for the report."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert the details of a new sustainable fashion label into the database and then find out the best selling product of this new label in each region based on the sales data.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainabilityRating DECIMAL); CREATE TABLE Products (ProductID INT PRIMARY KEY, BrandID INT, ProductName VARCHAR(50), Category VARCHAR(50)); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, Region VARCHAR(50), QuantitySold INT); INSERT INTO FashionBrands (BrandID, BrandName, SustainabilityRating) VALUES (1, 'New Label', 9.5), (2, 'Old Brand', 7.0); INSERT INTO Products (ProductID, BrandID, ProductName, Category) VALUES (1, 1, 'Sustainable Jeans', 'Denim'), (2, 2, 'Classic Tee', 'T-Shirts'), (3, 1, 'Eco-Friendly Shirt', 'Shirts'), (4, 1, 'Recycled Shoes', 'Footwear'); INSERT INTO Sales (SaleID, ProductID, Region, QuantitySold) VALUES (1, 1, 'North America', 200), (2, 3, 'Europe', 150), (3, 4, 'Asia', 250), (4, 2, 'North America', 100);","WITH BrandSales AS (SELECT p.ProductName, s.Region, SUM(s.QuantitySold) AS TotalSold FROM Products p JOIN Sales s ON p.ProductID = s.ProductID WHERE p.BrandID = (SELECT BrandID FROM FashionBrands WHERE BrandName = 'New Label') GROUP BY p.ProductName, s.Region) SELECT bs.ProductName, bs.Region, DENSE_RANK() OVER (PARTITION BY bs.Region ORDER BY bs.TotalSold DESC) AS Rank FROM BrandSales bs WHERE Rank = 1;",The query creates a common table expression (CTE) to aggregate the total quantity sold for each product of the new label in each region. It then assigns a rank to each product based on the total quantity sold within each region using the DENSE_RANK function. It finally selects the best selling product in each region.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the top 10 most popular sustainable fashion brands and their average consumer ratings across different regions.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE ConsumerRatings (RatingID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), Rating DECIMAL, FOREIGN KEY (BrandID) REFERENCES FashionBrands(BrandID)); CREATE TABLE BrandPopularity (PopularityID INT PRIMARY KEY, BrandID INT, Year INT, PopularityScore DECIMAL, FOREIGN KEY (BrandID) REFERENCES FashionBrands(BrandID));","WITH PopularBrands AS (SELECT FB.BrandName, FB.IsSustainable, AVG(CR.Rating) AS AvgRating, BP.PopularityScore FROM FashionBrands FB INNER JOIN ConsumerRatings CR ON FB.BrandID = CR.BrandID INNER JOIN BrandPopularity BP ON FB.BrandID = BP.BrandID WHERE FB.IsSustainable = TRUE GROUP BY FB.BrandName, FB.IsSustainable, BP.PopularityScore ORDER BY BP.PopularityScore DESC) SELECT BrandName, AvgRating FROM PopularBrands LIMIT 10;","The query first creates a common table expression (CTE) called PopularBrands that joins the FashionBrands, ConsumerRatings, and BrandPopularity tables using INNER JOIN. It filters for sustainable fashion brands, groups by brand name and sustainability status, and calculates the average consumer rating and popularity score. Finally, it selects the top 10 brands based on popularity score and retrieves their names and average ratings."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Create a database that stores detailed information about vehicle sales, including model, region, and sale date. Then, delete records of all sales that took place before 2015.","CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, UnitsSold INT); INSERT INTO VehicleSales (SalesID, ModelName, Region, SaleDate, UnitsSold) VALUES (1, 'Model S', 'North America', '2014-06-01', 100), (2, 'Model 3', 'Europe', '2016-02-01', 150), (3, 'Leaf', 'Asia', '2015-11-01', 200), (4, 'Bolt', 'North America', '2014-12-01', 90), (5, 'Prius', 'Europe', '2015-07-01', 110);",DELETE FROM VehicleSales WHERE YEAR(SaleDate) < 2015;,The SQL query is deleting all records from the VehicleSales table where the year of the SaleDate is less than 2015. This will remove all sales that took place before the year 2015 from the database.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records","Identify and list the top 10 government projects by expenditure for the current year, along with their respective departments and rank them based on the amount spent.","CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), DepartmentName VARCHAR(100), Year INT, Expenditure DECIMAL); INSERT INTO GovernmentProjects (ProjectID, ProjectName, DepartmentName, Year, Expenditure) VALUES (1, 'Project Alpha', 'Department of Health', 2023, 5000000), (2, 'Project Beta', 'Department of Education', 2023, 4500000), (3, 'Project Gamma', 'Department of Infrastructure', 2023, 6000000), (4, 'Project Delta', 'Department of Defense', 2023, 7500000), (5, 'Project Epsilon', 'Department of Housing', 2023, 3000000), (6, 'Project Zeta', 'Department of Transportation', 2023, 3500000), (7, 'Project Eta', 'Department of Energy', 2023, 7000000), (8, 'Project Theta', 'Department of Agriculture', 2023, 2000000), (9, 'Project Iota', 'Department of Commerce', 2023, 4000000), (10, 'Project Kappa', 'Department of Labor', 2023, 2500000);","WITH RankedProjects AS (SELECT ProjectName, DepartmentName, Expenditure, ROW_NUMBER() OVER (ORDER BY Expenditure DESC) AS Rank FROM GovernmentProjects WHERE Year = 2023) SELECT ProjectName, DepartmentName, Expenditure, Rank FROM RankedProjects WHERE Rank <= 10;","The query creates a common table expression (CTE) named RankedProjects that selects project names, department names, and expenditures for the year 2023. It uses the ROW_NUMBER window function to assign a rank based on the expenditure in descending order and then filters to display only the top 10 ranked projects."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that records the seasonal changes in crop yields across different regions, and then display the top 3 regions with the highest average yield for each season.","CREATE TABLE CropYields (YieldID INT PRIMARY KEY, Region VARCHAR(50), Season VARCHAR(20), CropType VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (YieldID, Region, Season, CropType, Yield) VALUES (1, 'North America', 'Spring', 'Wheat', 30.5), (2, 'Europe', 'Summer', 'Corn', 45.0), (3, 'Asia', 'Fall', 'Rice', 50.0), (4, 'South America', 'Winter', 'Soybean', 25.7), (5, 'Africa', 'Spring', 'Maize', 35.0);","WITH SeasonalAvg AS (SELECT Region, Season, AVG(Yield) AS AvgYield FROM CropYields GROUP BY Region, Season), RankedRegions AS (SELECT Region, Season, AvgYield, ROW_NUMBER() OVER (PARTITION BY Season ORDER BY AvgYield DESC) AS Rank FROM SeasonalAvg) SELECT Region, Season, AvgYield FROM RankedRegions WHERE Rank <= 3;","The query first calculates the average yield for each region and season by grouping the data in the CropYields table. It then ranks these regions within each season using the ROW_NUMBER window function to assign ranks based on average yield in descending order. Finally, it selects the top 3 regions with the highest average yields for each season by filtering the results where the rank is less than or equal to 3."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total revenue generated from ticket sales for each sports event and then find the events that generated higher revenue than the average revenue across all events, ensuring transactional integrity.","CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE); CREATE TABLE Tickets (TicketID INT PRIMARY KEY, EventID INT, TicketPrice DECIMAL, QuantitySold INT, FOREIGN KEY (EventID) REFERENCES Events(EventID)); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, EventID INT, TransactionDate DATE, FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN TRANSACTION; WITH EventRevenue AS (SELECT E.EventID, E.EventName, SUM(T.TicketPrice * T.QuantitySold) AS TotalRevenue FROM Events E JOIN Tickets T ON E.EventID = T.EventID GROUP BY E.EventID, E.EventName), AverageRevenue AS (SELECT AVG(TotalRevenue) AS AvgRevenue FROM EventRevenue) SELECT EventName, TotalRevenue FROM EventRevenue WHERE TotalRevenue > (SELECT AvgRevenue FROM AverageRevenue); COMMIT;","The SQL query starts a transaction using BEGIN TRANSACTION. It then creates a common table expression (CTE) called EventRevenue that calculates the total revenue for each event by joining the Events and Tickets tables and summing up the product of ticket price and quantity sold, grouped by event. Another CTE called AverageRevenue computes the average revenue across all events. The main query then selects the event names and their total revenue from EventRevenue where the total revenue is greater than the average revenue. Finally, the transaction is committed using COMMIT."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Find the top 3 most endangered species in each continent and the conservation efforts being taken for them.,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), ConservationStatus VARCHAR(50), Continent VARCHAR(50)); CREATE TABLE ConservationEfforts (ConservationID INT PRIMARY KEY, SpeciesID INT, InitiativeName VARCHAR(100), InitiativeDescription VARCHAR(255)); INSERT INTO Species (SpeciesID, SpeciesName, ConservationStatus, Continent) VALUES (1, 'Amur Leopard', 'Critically Endangered', 'Asia'), (2, 'Black Rhino', 'Critically Endangered', 'Africa'), (3, 'Cross River Gorilla', 'Critically Endangered', 'Africa'), (4, 'Hawksbill Turtle', 'Critically Endangered', 'Oceania'), (5, 'South China Tiger', 'Critically Endangered', 'Asia'); INSERT INTO ConservationEfforts(ConservationID, SpeciesID, InitiativeName, InitiativeDescription) VALUES (1, 1, 'Amur Leopard Conservation', 'Efforts to monitor populations and protect habitat.'), (2, 2, 'Black Rhino Conservation', 'Anti-poaching initiatives and habitat restoration.'), (3, 3, 'Cross River Gorilla Conservation', 'Preservation of natural habitats and anti-poaching.'), (4, 4, 'Hawksbill Turtle Conservation', 'Beach protection and reducing illegal trade.'), (5, 5, 'South China Tiger Conservation', 'Breeding programs and habitat restoration.');","WITH RankedSpecies AS (SELECT SpeciesName, ConservationStatus, Continent, DENSE_RANK() OVER (PARTITION BY Continent ORDER BY CASE WHEN ConservationStatus = 'Critically Endangered' THEN 1 WHEN ConservationStatus = 'Endangered' THEN 2 ELSE 3 END) AS Rank FROM Species) SELECT RS.SpeciesName, RS.ConservationStatus, RS.Continent, CE.InitiativeName, CE.InitiativeDescription FROM RankedSpecies RS INNER JOIN ConservationEfforts CE ON RS.SpeciesID = CE.SpeciesID WHERE RS.Rank <= 3;","The query uses a common table expression (CTE) to rank species based on their conservation status within each continent. It assigns a lower rank to species that are critically endangered compared to those that are just endangered. The main query then joins this CTE with the ConservationEfforts table to retrieve information about the conservation initiatives for each species, and it filters for species with a rank of 3 or less, which means the top 3 most endangered species in each continent."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average performance metrics for athletes from each country participating in different sports events. The report should be sorted by the average score and display the top 5 countries for each sports event.,"CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Country VARCHAR(50), SportsEvent VARCHAR(50), Score DECIMAL); INSERT INTO AthletePerformance (AthleteID, AthleteName, Country, SportsEvent, Score) VALUES (1, 'Athlete A', 'USA', 'Basketball', 90.5), (2, 'Athlete B', 'China', 'Swimming', 92.0), (3, 'Athlete C', 'Russia', 'Gymnastics', 96.0), (4, 'Athlete D', 'Germany', 'Athletics', 95.7), (5, 'Athlete E', 'Australia', 'Swimming', 93.0);","WITH AvgPerformance AS (SELECT Country, SportsEvent, AVG(Score) AS AvgScore FROM AthletePerformance GROUP BY Country, SportsEvent), RankedPerformance AS (SELECT Country, SportsEvent, AvgScore, ROW_NUMBER() OVER (PARTITION BY SportsEvent ORDER BY AvgScore DESC) AS CountryRank FROM AvgPerformance) SELECT Country, SportsEvent, AvgScore FROM RankedPerformance WHERE CountryRank <= 5;",The SQL query first creates a common table expression (CTE) named AvgPerformance to calculate the average score for each country in each sports event. Then another CTE named RankedPerformance is created to assign a rank to each country within each sports event based on the average score in descending order. The final SELECT statement retrieves the top 5 countries with the highest average scores for each sports event.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 drugs with the highest number of side effects reported in the last year. Exclude any drugs that were introduced to the market less than a year ago.,"CREATE TABLE DrugDescription (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), DateIntroduced DATE); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, DrugID INT, ReportDate DATE, Description VARCHAR(200)); INSERT INTO DrugDescription (DrugID, DrugName, DateIntroduced) VALUES (1, 'Drug A', '2019-01-01'), (2, 'Drug B', '2020-01-01'), (3, 'Drug C', '2018-01-01'), (4, 'Drug D', '2017-01-01'), (5, 'Drug E', '2019-06-01'); INSERT INTO SideEffects (EffectID, DrugID, ReportDate, Description) VALUES (1, 1, '2021-01-01', 'Nausea'), (2, 2, '2021-02-01', 'Dizziness'), (3, 3, '2021-03-01', 'Headache'), (4, 4, '2021-04-01', 'Fatigue'), (5, 5, '2021-05-01', 'Insomnia');","WITH DrugEffects AS (SELECT DrugName, COUNT(*) AS NumOfEffects FROM SideEffects INNER JOIN DrugDescription ON SideEffects.DrugID = DrugDescription.DrugID WHERE ReportDate >= DATEADD(year, -1, GETDATE()) AND DateIntroduced < DATEADD(year, -1, GETDATE()) GROUP BY DrugName) SELECT DrugName, NumOfEffects FROM DrugEffects ORDER BY NumOfEffects DESC LIMIT 5;","The SQL query first creates a common table expression (CTE) named DrugEffects that combines the DrugDescription and SideEffects tables. Within this CTE, it only considers drugs that have been introduced more than a year ago and side effects reported in the last year. For each drug, it counts the number of reported side effects. The main query then selects the drug name and the number of effects from the CTE, orders the result set by the number of effects in descending order, and limits the output to the top 5 drugs."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records","Update the 'PublicServices' table to reflect a newly implemented policy change that has increased the budget for all 'Healthcare' services by 10%, and then display the top 5 public services with the highest budgets.","CREATE TABLE PublicServices (ServiceID INT PRIMARY KEY, ServiceName VARCHAR(50), Budget DECIMAL); INSERT INTO PublicServices (ServiceID, ServiceName, Budget) VALUES (1, 'Education', 50000), (2, 'Healthcare', 45000), (3, 'Infrastructure', 70000), (4, 'Defense', 60000), (5, 'Welfare', 40000);","UPDATE PublicServices SET Budget = Budget * 1.1 WHERE ServiceName = 'Healthcare'; WITH RankedServices AS (SELECT ServiceName, Budget, DENSE_RANK() OVER (ORDER BY Budget DESC) AS Rank FROM PublicServices) SELECT ServiceName, Budget FROM RankedServices WHERE Rank <= 5;","The query first updates the 'PublicServices' table to reflect a 10% increase in the budget for 'Healthcare' services. Then, it creates a common table expression (CTE) to rank public services based on their budgets in descending order. Finally, it selects the top 5 services with the highest budgets using the DENSE_RANK function."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Update the total funding amount for conservation projects in 'Amazon Rainforest' region, then retrieve all updated project details along with their respective funding sources.","CREATE TABLE Projects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Region VARCHAR(100), FundingAmount DECIMAL);CREATE TABLE FundingSources (SourceID INT PRIMARY KEY, SourceName VARCHAR(100));CREATE TABLE ProjectFunding (ProjectID INT, SourceID INT, FundingAmount DECIMAL, FOREIGN KEY (ProjectID) REFERENCES Projects(ProjectID), FOREIGN KEY (SourceID) REFERENCES FundingSources(SourceID));","UPDATE Projects SET FundingAmount = (SELECT SUM(FundingAmount) FROM ProjectFunding WHERE ProjectID = Projects.ProjectID) WHERE Region = 'Amazon Rainforest'; SELECT p.ProjectID, p.ProjectName, p.Region, p.FundingAmount, f.SourceName FROM Projects p JOIN ProjectFunding pf ON p.ProjectID = pf.ProjectID JOIN FundingSources f ON pf.SourceID = f.SourceID WHERE p.Region = 'Amazon Rainforest';","The query first updates the FundingAmount in the Projects table for projects in the 'Amazon Rainforest' region by summing up the funding amounts from the ProjectFunding table. It then retrieves the updated project details along with their respective funding sources by joining the Projects, ProjectFunding, and FundingSources tables, filtered to only include projects in the 'Amazon Rainforest' region."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average age of patients who stopped medication due to severe side effects, compared to those who continued, and identify any medication that significantly changes the average age of the patient.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, MedicationID INT); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(50)); CREATE TABLE TreatmentHistory (HistoryID INT PRIMARY KEY, PatientID INT, MedicationID INT, TreatmentOutcome VARCHAR(50)); INSERT INTO Patients (PatientID, Age, MedicationID) VALUES (1, 45, 101), (2, 60, 102), (3, 50, 103), (4, 55, 101), (5, 65, 102); INSERT INTO Medications (MedicationID, MedicationName) VALUES (101, 'Medicine A'), (102, 'Medicine B'), (103, 'Medicine C'); INSERT INTO TreatmentHistory (HistoryID, PatientID, MedicationID, TreatmentOutcome) VALUES (1, 1, 101, 'Continued'), (2, 2, 102, 'Stopped'), (3, 3, 103, 'Continued'), (4, 4, 101, 'Stopped'), (5, 5, 102, 'Continued');","BEGIN; WITH StoppedPatients AS (SELECT AVG(Age) as AvgStoppedAge, MedicationID FROM Patients JOIN TreatmentHistory ON Patients.PatientID = TreatmentHistory.PatientID WHERE TreatmentHistory.TreatmentOutcome = 'Stopped' GROUP BY MedicationID), ContinuedPatients AS (SELECT AVG(Age) as AvgContinuedAge, MedicationID FROM Patients JOIN TreatmentHistory ON Patients.PatientID = TreatmentHistory.PatientID WHERE TreatmentHistory.TreatmentOutcome = 'Continued' GROUP BY MedicationID) SELECT Medications.MedicationName, StoppedPatients.AvgStoppedAge, ContinuedPatients.AvgContinuedAge FROM StoppedPatients JOIN ContinuedPatients ON StoppedPatients.MedicationID = ContinuedPatients.MedicationID JOIN Medications ON Medications.MedicationID = StoppedPatients.MedicationID WHERE ABS(StoppedPatients.AvgStoppedAge - ContinuedPatients.AvgContinuedAge) > 5; COMMIT;",The query begins a transaction and uses two common table expressions (CTEs) to calculate the average age of patients who have stopped medication due to severe side effects and those who have continued medication. These CTEs join Patients and TreatmentHistory tables based on the PatientID. The data is then grouped by the MedicationID. The main query then joins the two CTEs on MedicationID and also joins the result with the Medications table to get the medication names. It finally selects only the medications where the difference in average ages of stopped and continued patients is more than 5 years. The transaction is then committed.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find out the top 5 sustainable brands with the highest customer rating in Europe.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainabilityScore DECIMAL); CREATE TABLE CustomerRatings (RatingID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), CustomerRating DECIMAL); INSERT INTO Brands (BrandID, BrandName, SustainabilityScore) VALUES (1, 'Brand A', 95.5), (2, 'Brand B', 89.0), (3, 'Brand C', 92.5), (4, 'Brand D', 90.7), (5, 'Brand E', 94.0); INSERT INTO CustomerRatings (RatingID, BrandID, Region, CustomerRating) VALUES (1, 1, 'Europe', 4.5), (2, 2, 'Europe', 4.2), (3, 3, 'Europe', 4.7), (4, 4, 'Europe', 4.5), (5, 5, 'Europe', 4.3);","WITH RankedBrands AS (SELECT B.BrandName, B.SustainabilityScore, CR.CustomerRating, DENSE_RANK() OVER (ORDER BY CR.CustomerRating DESC) AS Rank FROM Brands B INNER JOIN CustomerRatings CR ON B.BrandID = CR.BrandID WHERE CR.Region = 'Europe' AND B.SustainabilityScore >= 90) SELECT BrandName, SustainabilityScore, CustomerRating FROM RankedBrands WHERE Rank <= 5;","The SQL query first creates a common table expression 'RankedBrands' that ranks brands based on customer ratings in descending order, only considering brands that have a sustainability score of 90 or above and are from Europe. It uses an INNER JOIN to combine data from the Brands and CustomerRatings tables. Afterwards, it selects the top 5 brands with the highest customer ratings from the 'RankedBrands' table."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Insert a new vehicle sale record for a Tesla Model X in the Sales table, ensuring that the VehicleID matches that of the Tesla Model X from the Vehicles table.","CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), Year INT); INSERT INTO Vehicles (VehicleID, ModelName, Manufacturer, Year) VALUES (1, 'Model X', 'Tesla', 2020), (2, 'Model S', 'Tesla', 2019), (3, 'Civic', 'Honda', 2021); CREATE TABLE Sales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, FOREIGN KEY (VehicleID) REFERENCES Vehicles(VehicleID));","INSERT INTO Sales (SaleID, VehicleID, SaleDate, SalePrice) VALUES (1, (SELECT VehicleID FROM Vehicles WHERE ModelName = 'Model X'), '2023-10-01', 85000);",The query inserts a new record into the Sales table. It uses a subquery to select the VehicleID from the Vehicles table where the ModelName is 'Model X'. This ensures that the correct VehicleID is inserted for the Tesla Model X. The SaleDate and SalePrice are provided directly in the INSERT statement.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 crops with the highest average yield in regions that have implemented organic farming practices, and rollback any changes if an error occurs during the transaction.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgYield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, AvgYield) VALUES (1, 'Corn', 'North America', 150.5), (2, 'Wheat', 'Europe', 118.0), (3, 'Rice', 'Asia', 200.0), (4, 'Soybean', 'South America', 80.0), (5, 'Barley', 'Australia', 90.0); CREATE TABLE FarmingPractices (Region VARCHAR(50), Practice VARCHAR(50)); INSERT INTO FarmingPractices (Region, Practice) VALUES ('North America', 'Organic'), ('Europe', 'Organic'), ('Asia', 'Conventional'), ('South America', 'Conventional'), ('Australia', 'Organic');","BEGIN TRANSACTION; TRY BEGIN WITH RankedCrops AS (SELECT CropName, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM CropYield WHERE Region IN (SELECT Region FROM FarmingPractices WHERE Practice = 'Organic')) SELECT CropName, AvgYield FROM RankedCrops WHERE Rank <= 5; COMMIT; END TRY BEGIN CATCH ROLLBACK; END CATCH;","The query starts a transaction. In the TRY block, it creates a common table expression (CTE) to rank crops based on their average yield in descending order, but only for regions where organic farming practices are implemented. It then selects the top 5 crops with the highest average yield using the DENSE_RANK function and commits the transaction. If an error occurs during the transaction, it is caught in the CATCH block and the transaction is rolled back."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the most popular tourist destinations and the average length of stay for each destination from the past year.,"CREATE TABLE TouristDestinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100), Region VARCHAR(50)); CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, HotelID INT, DestinationID INT, CustomerID INT, CheckInDate DATE, CheckOutDate DATE, FOREIGN KEY (DestinationID) REFERENCES TouristDestinations(DestinationID)); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), Country VARCHAR(50));","SELECT TD.DestinationName, AVG(DATEDIFF(HB.CheckOutDate, HB.CheckInDate)) AS AvgLengthOfStay FROM TouristDestinations TD INNER JOIN HotelBookings HB ON TD.DestinationID = HB.DestinationID WHERE HB.CheckInDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY TD.DestinationName ORDER BY AvgLengthOfStay DESC;",The query retrieves the most popular tourist destinations and the average length of stay for each destination from the past year. It first joins the TouristDestinations and HotelBookings tables on the DestinationID field using an INNER JOIN. The query then filters bookings to include only those within the past year. It calculates the average length of stay by computing the difference between the CheckOutDate and CheckInDate and averages this value using the AVG function. The results are grouped by destination name and ordered by the average length of stay in descending order.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a transaction history for each car model sold, including the date, dealer, and price, then calculate the total sales and avg. selling price for each model.","CREATE TABLE CarSales (TransactionID INT PRIMARY KEY, Model VARCHAR(50), Dealer VARCHAR(50), SaleDate DATE, Price DECIMAL); INSERT INTO CarSales (TransactionID, Model, Dealer, SaleDate, Price) VALUES (1, 'Model S', 'Dealer A', '2020-01-01', 75000), (2, 'Model 3', 'Dealer B', '2020-02-01', 35000), (3, 'Leaf', 'Dealer C', '2020-03-01', 30000), (4, 'Bolt', 'Dealer D', '2020-04-01', 40000), (5, 'Prius', 'Dealer E', '2020-05-01', 25000);","BEGIN; CREATE VIEW TotalSales AS SELECT Model, COUNT(*) AS TotalSales, AVG(Price) AS AvgSellingPrice FROM CarSales GROUP BY Model; COMMIT; SELECT * FROM TotalSales;","The SQL query first creates a transaction to ensure data consistency. Then, it creates a view named 'TotalSales' that groups the sales data by car model and calculates the total sales and average selling price for each model. After the transaction is committed, it then selects and returns the data from the 'TotalSales' view."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 5 patients with the highest number of treatments and display their demographic information.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Gender CHAR(1), Age INT); CREATE TABLE Treatments (PatientID INT, TreatmentName VARCHAR(50), TreatmentCount INT); INSERT INTO Patients (PatientID, FirstName, LastName, Gender, Age) VALUES (1, 'John', 'Doe', 'M', 50), (2, 'Jane', 'Roe', 'F', 45), (3, 'Jim', 'Poe', 'M', 60), (4, 'Jill', 'Koe', 'F', 55), (5, 'Jack', 'Moe', 'M', 40); INSERT INTO Treatments (PatientID, TreatmentName, TreatmentCount) VALUES (1, 'Chemo', 5), (1, 'Radiation', 7), (2, 'Chemo', 9), (2, 'Radiation', 6), (3, 'Chemo', 4), (3, 'Radiation', 8), (4, 'Chemo', 2), (4, 'Radiation', 3), (5, 'Chemo', 10), (5, 'Radiation', 15);","WITH TotalTreatments AS (SELECT PatientID, SUM(TreatmentCount) AS TotalCount FROM Treatments GROUP BY PatientID) SELECT P.FirstName, P.LastName, P.Gender, P.Age FROM Patients P JOIN TotalTreatments T ON P.PatientID = T.PatientID ORDER BY T.TotalCount DESC LIMIT 5;","The query begins by creating a common table expression (CTE) to calculate the total number of treatments for each patient. It groups the treatments by patient ID and sums the treatment count. Then it joins this CTE with the Patients table on the PatientID to match the patient demographics with the total treatment counts. Finally, it orders the results in descending order by the total treatment count and limits the result to the top 5 patients."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,"Create a report that shows the top 3 most popular sports among fans in different regions, based on ticket sales and social media engagements.","CREATE TABLE TicketSales (EventID INT PRIMARY KEY, Sport VARCHAR(50), Region VARCHAR(50), TicketsSold INT); INSERT INTO TicketSales (EventID, Sport, Region, TicketsSold) VALUES (1, 'Football', 'North America', 1000000), (2, 'Soccer', 'Europe', 1500000), (3, 'Cricket', 'Asia', 2000000), (4, 'Basketball', 'North America', 800000), (5, 'Tennis', 'Europe', 500000); CREATE TABLE SocialMedia (Sport VARCHAR(50), Region VARCHAR(50), SocialEngagements INT); INSERT INTO SocialMedia (Sport, Region, SocialEngagements) VALUES ('Football', 'North America', 5000000), ('Soccer', 'Europe', 7000000), ('Cricket', 'Asia', 8000000), ('Basketball', 'North America', 4000000), ('Tennis', 'Europe', 2000000);","WITH RankedSports AS (SELECT Sport, Region, (TicketsSold + SocialEngagements) AS TotalEngagement, DENSE_RANK() OVER (PARTITION BY Region ORDER BY (TicketsSold + SocialEngagements) DESC) AS Rank FROM (SELECT t.Sport, t.Region, t.TicketsSold, s.SocialEngagements FROM TicketSales t JOIN SocialMedia s ON t.Sport = s.Sport AND t.Region = s.Region)) SELECT Sport, Region, TotalEngagement FROM RankedSports WHERE Rank <= 3;","The SQL query first joins the TicketSales and SocialMedia tables on the Sport and Region columns. It then creates a new column, TotalEngagement, which is the sum of TicketsSold and SocialEngagements. A common table expression (CTE) is then used to rank the sports within each region based on TotalEngagement in descending order. Finally, the query selects the Sport, Region, and TotalEngagement from the CTE where the rank is less than or equal to 3, effectively returning the top 3 most popular sports in each region."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total government spending on healthcare and education in each state for the last fiscal year.,"CREATE TABLE StateSpending (State VARCHAR(50), Category VARCHAR(50), FiscalYear INT, Amount DECIMAL); INSERT INTO StateSpending (State, Category, FiscalYear, Amount) VALUES ('California', 'Healthcare', 2021, 150000000), ('California', 'Education', 2021, 200000000), ('Texas', 'Healthcare', 2021, 120000000), ('Texas', 'Education', 2021, 180000000), ('New York', 'Healthcare', 2021, 140000000), ('New York', 'Education', 2021, 190000000);","SELECT State, SUM(Amount) AS TotalSpending FROM StateSpending WHERE FiscalYear = 2021 AND (Category = 'Healthcare' OR Category = 'Education') GROUP BY State;","The SQL query filters the StateSpending table for records from the last fiscal year (2021) and where the spending category is either 'Healthcare' or 'Education'. Then, it groups the records by state and calculates the total spending for each state. The result is a list of states with their total spending on healthcare and education for the last fiscal year."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total government spending per capita for each demographic segment and region over the last 5 years.,"CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, Year INT, Region VARCHAR(50), TotalSpending DECIMAL); CREATE TABLE Demographics (DemographicID INT PRIMARY KEY, Year INT, Region VARCHAR(50), Population INT, AgeGroup VARCHAR(20), Gender VARCHAR(10), Race VARCHAR(20));","WITH SpendingPerCapita AS (SELECT g.Year, g.Region, d.AgeGroup, d.Gender, d.Race, SUM(g.TotalSpending) / SUM(d.Population) AS SpendingPerCapita FROM GovernmentSpending g JOIN Demographics d ON g.Year = d.Year AND g.Region = d.Region GROUP BY g.Year, g.Region, d.AgeGroup, d.Gender, d.Race) SELECT Year, Region, AgeGroup, Gender, Race, SpendingPerCapita FROM SpendingPerCapita WHERE Year >= YEAR(CURRENT_DATE) - 5;","The query first creates a common table expression (CTE) named SpendingPerCapita that joins the GovernmentSpending and Demographics tables based on the year and region. It calculates the total government spending per capita for each demographic segment (AgeGroup, Gender, Race) by dividing the total spending by the population for each segment. The final SELECT statement retrieves the spending per capita for each demographic segment and region over the last 5 years."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Show the top 5 destinations with the highest average customer satisfaction scores, broken down by customer age groups and travel seasons.","CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(100)); CREATE TABLE CustomerSatisfaction (SatisfactionID INT PRIMARY KEY, DestinationID INT, CustomerAgeGroup VARCHAR(50), TravelSeason VARCHAR(50), SatisfactionScore DECIMAL, FOREIGN KEY (DestinationID) REFERENCES Destinations(DestinationID));","WITH AverageSatisfaction AS (SELECT DestinationID, CustomerAgeGroup, TravelSeason, AVG(SatisfactionScore) AS AvgScore FROM CustomerSatisfaction GROUP BY DestinationID, CustomerAgeGroup, TravelSeason), RankedDestinations AS (SELECT DestinationID, CustomerAgeGroup, TravelSeason, AvgScore, DENSE_RANK() OVER (ORDER BY AvgScore DESC) AS Rank FROM AverageSatisfaction) SELECT d.DestinationName, r.CustomerAgeGroup, r.TravelSeason, r.AvgScore FROM RankedDestinations r JOIN Destinations d ON r.DestinationID = d.DestinationID WHERE r.Rank <= 5;","The query first calculates the average satisfaction scores for each destination based on customer age groups and travel seasons. It then ranks these average scores in descending order using the DENSE_RANK function. Finally, it selects the top 5 destinations with the highest average scores, along with the corresponding customer age groups and travel seasons, and joins this data with the Destinations table to retrieve the destination names."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Show me the top 10 popular movies in the year 2020 based on the number of views.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), ReleaseYear INT); INSERT INTO Movies (MovieID, MovieName, ReleaseYear) VALUES (1, 'Movie A', 2020), (2, 'Movie B', 2020), (3, 'Movie C', 2019), (4, 'Movie D', 2018), (5, 'Movie E', 2020); CREATE TABLE Views (ViewID INT PRIMARY KEY, MovieID INT, ViewDate DATE); INSERT INTO Views (ViewID, MovieID, ViewDate) VALUES (1, 1, '2020-01-01'), (2, 1, '2020-01-02'), (3, 2, '2020-01-03'), (4, 3, '2020-01-04'), (5, 4, '2020-01-05'), (6, 5, '2020-01-06');","SELECT M.MovieName, COUNT(V.ViewID) AS NumberOfViews FROM Movies M JOIN Views V ON M.MovieID = V.MovieID WHERE M.ReleaseYear = 2020 GROUP BY M.MovieName ORDER BY NumberOfViews DESC LIMIT 10;","The SQL query first joins the Movies and Views tables on the MovieID column. It then filters the results for movies released in the year 2020. For each movie, it counts the number of views, and orders the results in descending order of views. Finally, it limits the results to the top 10 movies."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the percentage of different types of IoT devices sold in each region for the past year.,"CREATE TABLE IoTDevices (DeviceID INT PRIMARY KEY, DeviceType VARCHAR(50), Region VARCHAR(50), SoldUnits INT, SaleDate DATE); INSERT INTO IoTDevices (DeviceID, DeviceType, Region, SoldUnits, SaleDate) VALUES (1, 'Smart Home', 'North America', 5000, '2020-12-12'), (2, 'Wearable', 'Europe', 3000, '2020-12-11'), (3, 'Healthcare', 'Asia', 7000, '2020-12-10'), (4, 'Industrial', 'North America', 2000, '2020-12-09'), (5, 'Smart City', 'Europe', 6000, '2020-12-08');","WITH YearlySales AS (SELECT DeviceType, Region, SUM(SoldUnits) AS TotalUnits FROM IoTDevices WHERE SaleDate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY DeviceType, Region), TotalSales AS (SELECT Region, SUM(TotalUnits) AS UnitsSold FROM YearlySales GROUP BY Region) SELECT ys.DeviceType, ys.Region, (ys.TotalUnits/ ts.UnitsSold) * 100 AS Percentage FROM YearlySales ys JOIN TotalSales ts ON ys.Region = ts.Region;","The query first creates a common table expression (CTE) to calculate total units sold per device type for each region for the past year. Another CTE is used to calculate the total units sold in each region. Finally, it joins these two CTEs on the region and calculates the percentage of each type of device sold in each region."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total goals scored by each player this season and find those players who have scored more than 10 goals and their respective teams.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT, Position VARCHAR(50)); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, HomeTeamID INT, AwayTeamID INT); CREATE TABLE Goals (GoalID INT PRIMARY KEY, MatchID INT, PlayerID INT, GoalTime TIME);","SELECT P.PlayerName, T.TeamName, COUNT(G.GoalID) AS TotalGoals FROM Players P JOIN Goals G ON P.PlayerID = G.PlayerID JOIN Teams T ON P.TeamID = T.TeamID GROUP BY P.PlayerName, T.TeamName HAVING COUNT(G.GoalID) > 10;","The SQL query joins the Players, Goals, and Teams tables to calculate the total number of goals scored by each player. Using the COUNT function and GROUP BY clause, it aggregates the goals per player and filters those who have scored more than 10 goals using the HAVING clause."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the total government spending on health and education by demographic group, and the effectiveness of these spendings based on citizen satisfaction survey results.","CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, Category VARCHAR(50), Amount DECIMAL, DemographicGroup VARCHAR(50)); CREATE TABLE Demographics (GroupID INT PRIMARY KEY, GroupName VARCHAR(50), Population INT); CREATE TABLE SatisfactionSurvey (SurveyID INT PRIMARY KEY, GroupID INT, Category VARCHAR(50), SatisfactionLevel DECIMAL, FOREIGN KEY (GroupID) REFERENCES Demographics(GroupID));","SELECT d.GroupName, gs.Category, SUM(gs.Amount) AS TotalSpending, AVG(ss.SatisfactionLevel) AS AvgSatisfaction FROM GovernmentSpending gs INNER JOIN Demographics d ON gs.DemographicGroup = d.GroupName LEFT JOIN SatisfactionSurvey ss ON d.GroupID = ss.GroupID AND gs.Category = ss.Category WHERE gs.Category IN ('Health', 'Education') GROUP BY d.GroupName, gs.Category;","This query retrieves the total amount of government spending on health and education per demographic group and the average satisfaction level for each category. First, it joins GovernmentSpending with Demographics based on the demographic group. Then, it performs a LEFT JOIN with SatisfactionSurvey, making sure to match both the demographic group and spending category. The query filters only for 'Health' and 'Education' categories, and groups the results by demographic group and category. Finally, it calculates the total spending and average satisfaction level for each group and category combination."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table for storing data about different technology trends, their adoption rates across various industries, and then display the top 5 trends ranked by their average adoption rates.","CREATE TABLE TechTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), Industry VARCHAR(100), AdoptionRate DECIMAL); INSERT INTO TechTrends (TrendID, TrendName, Industry, AdoptionRate) VALUES (1, 'Artificial Intelligence', 'Healthcare', 70.5), (2, 'Blockchain', 'Finance', 80.0), (3, 'Cloud Computing', 'IT Services', 90.0), (4, 'Machine Learning', 'Manufacturing', 75.7), (5, 'IoT', 'Agriculture', 65.0);","WITH RankedTrends AS (SELECT TrendName, AdoptionRate, DENSE_RANK() OVER (ORDER BY AdoptionRate DESC) AS Rank FROM TechTrends) SELECT TrendName, AdoptionRate FROM RankedTrends WHERE Rank <= 5;","The SQL query first creates a common table expression named 'RankedTrends' that ranks technology trends based on their adoption rates in descending order. It uses the DENSE_RANK function to deal with equal adoption rates (e.g., two trends both with an adoption rate of 80%). Then it selects the top 5 technology trends from the 'RankedTrends' CTE, where the rank is less than or equal to 5."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Implement a transaction to update the crop yields for a specific farm, ensuring that the entire update is rolled back if any single update fails.","CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE CropYields (YieldID INT PRIMARY KEY, FarmID INT, CropType VARCHAR(50), YieldAmount FLOAT, HarvestDate DATE, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID));",BEGIN TRANSACTION; UPDATE CropYields SET YieldAmount = 5000 WHERE FarmID = 1 AND CropType = 'Wheat'; UPDATE CropYields SET YieldAmount = 3000 WHERE FarmID = 1 AND CropType = 'Corn'; IF @@ERROR <> 0 BEGIN ROLLBACK TRANSACTION; END ELSE BEGIN COMMIT TRANSACTION; END;,"The SQL query starts a transaction to update the crop yields for a specific farm. It updates the yield amounts for Wheat and Corn in the CropYields table where the FarmID is 1. If any of the updates fail, the transaction is rolled back entirely, ensuring data integrity. If both updates succeed, the transaction is committed."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Provide the top 5 cities that tourists have visited the most in the past year and the most preferred type of accommodation in each city.,"CREATE TABLE TouristData (TouristID INT PRIMARY KEY, CityVisited VARCHAR(50), AccommodationType VARCHAR(50)); INSERT INTO TouristData (TouristID, CityVisited, AccommodationType) VALUES (1, 'Paris', 'Hotel'), (2, 'London', 'Bed & Breakfast'), (3, 'New York', 'Airbnb'), (4, 'Paris', 'Bed & Breakfast'), (5, 'London', 'Hotel');","WITH CityRank AS (SELECT CityVisited, COUNT(*) AS Visits, RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM TouristData GROUP BY CityVisited), AccommodationRank AS (SELECT CityVisited, AccommodationType, RANK() OVER (PARTITION BY CityVisited ORDER BY COUNT(*) DESC) AS Rank FROM TouristData GROUP BY CityVisited, AccommodationType) SELECT CityRank.CityVisited, CityRank.Visits, AccommodationRank.AccommodationType FROM CityRank INNER JOIN AccommodationRank ON CityRank.CityVisited = AccommodationRank.CityVisited WHERE CityRank.Rank <= 5 AND AccommodationRank.Rank = 1;","The SQL query first creates a common table expression (CTE) to rank cities based on the number of visits by tourists in the past year. It calculates the rank using the RANK() function, which assigns a unique rank to each distinct number of visits in descending order. The query then creates another CTE to rank the types of accommodations preferred by tourists within each city, again using the RANK() function. Finally, it joins these two CTEs on the CityVisited column and selects the top 5 cities along with the most preferred type of accommodation in each city."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the top 5 hotels in terms of total room nights booked for the past year, broken down by booking source.","CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, HotelID INT, BookingSource VARCHAR(50), RoomNights INT, BookingDate DATE); INSERT INTO HotelBookings (BookingID, HotelID, BookingSource, RoomNights, BookingDate) VALUES (1, 101, 'Online', 2, '2021-06-01'), (2, 102, 'Direct', 1, '2021-07-01'), (3, 101, 'Agent', 3, '2021-08-01'), (4, 103, 'Online', 2, '2021-09-01'), (5, 101, 'Direct', 1, '2021-10-01'); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName) VALUES (101, 'Hotel A'), (102, 'Hotel B'), (103, 'Hotel C');","WITH YearlyBookings AS (SELECT h.HotelName, b.BookingSource, SUM(b.RoomNights) as TotalRoomNights FROM HotelBookings b INNER JOIN Hotels h ON b.HotelID = h.HotelID WHERE b.BookingDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY h.HotelName, b.BookingSource) SELECT HotelName, BookingSource, TotalRoomNights FROM YearlyBookings ORDER BY TotalRoomNights DESC LIMIT 5;","The query first creates a common table expression (CTE) named YearlyBookings that groups the bookings by hotel and booking source, calculating the total room nights for each group for the past year. It then selects the hotel name, booking source, and total room nights from the CTE, sorts the results in descending order by total room nights, and limits the output to the top 5 rows."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a transaction to update the customer preferences based on their recent bookings and rollback the transaction if there is any error.,"CREATE TABLE CustomerPreferences (CustomerID INT PRIMARY KEY, PreferredRoomType VARCHAR(50), PreferredMeal VARCHAR(50)); CREATE TABLE RecentBookings (BookingID INT PRIMARY KEY, CustomerID INT, RoomType VARCHAR(50), Meal VARCHAR(50));","BEGIN TRANSACTION; UPDATE CustomerPreferences SET PreferredRoomType = (SELECT TOP 1 RoomType FROM RecentBookings WHERE CustomerID = CustomerPreferences.CustomerID ORDER BY BookingID DESC), PreferredMeal = (SELECT TOP 1 Meal FROM RecentBookings WHERE CustomerID = CustomerPreferences.CustomerID ORDER BY BookingID DESC); IF @@ERROR != 0 BEGIN ROLLBACK TRANSACTION; END ELSE BEGIN COMMIT TRANSACTION; END","The SQL query begins a transaction to update the 'CustomerPreferences' table based on the most recent bookings of each customer in the 'RecentBookings' table. The 'PreferredRoomType' and 'PreferredMeal' fields are updated with the most recent 'RoomType' and 'Meal' from the 'RecentBookings' table for each customer. If any error occurs during the update, the transaction is rolled back to preserve database integrity; otherwise, the transaction is committed."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about the adoption rates of various emerging technologies in different industries over the years, and then display a pivoted view where each technology is a column and the rows represent different years.","CREATE TABLE TechnologyAdoption (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50), TechnologyName VARCHAR(50), Year INT, AdoptionRate DECIMAL); INSERT INTO TechnologyAdoption (IndustryID, IndustryName, TechnologyName, Year, AdoptionRate) VALUES (1, 'Automotive', 'AI', 2021, 45.3), (2, 'Healthcare', 'Blockchain', 2021, 30.2), (3, 'Finance', 'AI', 2022, 50.1), (4, 'Manufacturing', 'IoT', 2021, 60.5), (5, 'Retail', 'AI', 2022, 38.7);","WITH PivotedData AS (SELECT Year, IndustryName, TechnologyName, AdoptionRate FROM TechnologyAdoption) SELECT Year, MAX(CASE WHEN TechnologyName = 'AI' THEN AdoptionRate END) AS AI, MAX(CASE WHEN TechnologyName = 'Blockchain' THEN AdoptionRate END) AS Blockchain, MAX(CASE WHEN TechnologyName = 'IoT' THEN AdoptionRate END) AS IoT FROM PivotedData GROUP BY Year;","The query first selects the relevant columns from the TechnologyAdoption table and then pivots the data so that each technology's adoption rate becomes a separate column. The MAX function within the CASE statements is used to handle the pivoting, and the data is grouped by year to show adoption rates of different technologies by year."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 brands with the highest sales for sustainable fashion products in 2021 in North America and Europe, and provide a breakdown by customer age groups.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, AgeGroup VARCHAR(50)); INSERT INTO Customers (CustomerID, AgeGroup) VALUES (1, '18-24'), (2, '25-34'), (3, '35-44'), (4, '45-54'), (5, '55+'); CREATE TABLE Sales (SaleID INT PRIMARY KEY, BrandID INT, CustomerID INT, Region VARCHAR(50), SaleYear INT, SaleAmount DECIMAL, FOREIGN KEY (BrandID) REFERENCES Brands(BrandID), FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)); INSERT INTO Sales (SaleID, BrandID, CustomerID, Region, SaleYear, SaleAmount) VALUES (1, 1, 1, 'North America', 2021, 5000.00), (2, 2, 2, 'Europe', 2021, 4000.00), (3, 3, 3, 'North America', 2021, 3000.00), (4, 4, 4, 'Europe', 2021, 2000.00), (5, 5, 5, 'North America', 2021, 1000.00);","BEGIN TRANSACTION; WITH RegionSales AS (SELECT BrandID, SUM(SaleAmount) as TotalSales FROM Sales WHERE Region IN ('North America', 'Europe') AND SaleYear = 2021 GROUP BY BrandID), TopBrands AS (SELECT BrandID, TotalSales, DENSE_RANK() OVER (ORDER BY TotalSales DESC) AS Rank FROM RegionSales) SELECT B.BrandName, C.AgeGroup, T.TotalSales FROM TopBrands T INNER JOIN Brands B ON T.BrandID = B.BrandID INNER JOIN Sales S ON T.BrandID = S.BrandID INNER JOIN Customers C ON S.CustomerID = C.CustomerID WHERE T.Rank <= 5 ORDER BY T.TotalSales DESC, C.AgeGroup; COMMIT;","The SQL query initiates a transaction. It first creates a common table expression (CTE) named 'RegionSales' that aggregates total sales by brand for 2021 in North America and Europe. A second CTE named 'TopBrands' ranks these brands based on their total sales using the DENSE_RANK function. The main SELECT statement then joins the 'TopBrands' with the 'Brands', 'Sales', and 'Customers' tables to get the top 5 brands along with customer age groups and total sales. Ranking is based on total sales in descending order and customer age group. Finally, the transaction is committed."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert a new record of a sci-fi movie that garnered 2 million views in Asia, then update its genre to 'action', and finally, delete any movies in the database that were released before 2000 and have less than 1000 views.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(50), Genre VARCHAR(50), ReleaseYear INT, Views INT, Region VARCHAR(50)); CREATE TABLE Genres (GenreID INT PRIMARY KEY, GenreName VARCHAR(50)); INSERT INTO Genres (GenreID, GenreName) VALUES (1, 'Sci-fi'), (2, 'Action');","INSERT INTO Movies (MovieID, Title, Genre, ReleaseYear, Views, Region) VALUES (1, 'Star Trail', 'Sci-fi', 2022, 2000000, 'Asia'); UPDATE Movies SET Genre = 'Action' WHERE MovieID = 1; DELETE FROM Movies WHERE ReleaseYear < 2000 AND Views < 1000;","The three SQL queries first insert a new record of a movie titled 'Star Trail' into the 'Movies' table, specifying its genre as 'Sci-fi', its release year as 2022, its views as 2 million and its region as 'Asia'. Then, the genre of 'Star Trail' is updated to 'Action'. Lastly, any movies in the database that were released before the year 2000 and have less than 1000 views are deleted."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores data on reforestation projects, their regions, total area reforested, and average carbon sequestration per hectare, then display the regions with an average carbon sequestration per hectare above 5 tons.","CREATE TABLE ReforestationProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Region VARCHAR(50), TotalAreaReforested DECIMAL, AvgCarbonSequestrationPerHectare DECIMAL); INSERT INTO ReforestationProjects (ProjectID, ProjectName, Region, TotalAreaReforested, AvgCarbonSequestrationPerHectare) VALUES (1, 'Project Green', 'Amazon', 1500.0, 5.5), (2, 'Project Sierra', 'Sierra Nevada', 800.0, 6.2), (3, 'Project Savannah', 'African Savannah', 1200.0, 4.9), (4, 'Project Boreal', 'Boreal Forest', 950.0, 5.1), (5, 'Project Rainforest', 'Asian Rainforest', 1400.0, 6.0);","SELECT Region, AVG(AvgCarbonSequestrationPerHectare) AS AvgCarbonSequestration FROM ReforestationProjects GROUP BY Region HAVING AVG(AvgCarbonSequestrationPerHectare) > 5;","The query creates a table for reforestation projects and inserts sample data into it. Then, it groups the data by region and calculates the average carbon sequestration per hectare for each region. Finally, it filters the results to show only regions where the average carbon sequestration per hectare is above 5 tons."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert data of annual carbon footprints of various companies and then find the company that has reduced its carbon footprint the most between 2015 and 2020.,"CREATE TABLE CarbonFootprint (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50), Year INT, CarbonFootprint INT); INSERT INTO CarbonFootprint (CompanyID, CompanyName, Year, CarbonFootprint) VALUES (1, 'Company A', 2015, 2000), (2, 'Company A', 2020, 1500), (3, 'Company B', 2015, 3000), (4, 'Company B', 2020, 2500), (5, 'Company C', 2015, 5000), (6, 'Company C', 2020, 4500);","WITH FootprintDifference AS (SELECT CompanyName, (Max(CarbonFootprint) - Min(CarbonFootprint)) AS Difference FROM CarbonFootprint WHERE Year IN (2015, 2020) GROUP BY CompanyName) SELECT CompanyName FROM FootprintDifference WHERE Difference = (SELECT Max(Difference) FROM FootprintDifference);","The SQL query creates a common table expression (CTE) named FootprintDifference that calculates the difference in carbon footprint for each company between the years 2015 and 2020. It then selects the company from this CTE that has the maximum difference in carbon footprint, which is the company that reduced its carbon footprint the most during this period."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Find the top 5 content creators with the highest audience engagement across all platforms in 2021.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50), Platform VARCHAR(50), TotalEngagements INT, Year INT); INSERT INTO ContentCreators (CreatorID, CreatorName, Platform, TotalEngagements, Year) VALUES (1, 'Creator A', 'YouTube', 5000000, 2021), (2, 'Creator B', 'Instagram', 4000000, 2021), (3, 'Creator C', 'Twitch', 3000000, 2021), (4, 'Creator D', 'Twitter', 2000000, 2021), (5, 'Creator E', 'Facebook', 1000000, 2021);","WITH RankedCreators AS (SELECT CreatorName, SUM(TotalEngagements) as TotalEngagements, DENSE_RANK() OVER (ORDER BY SUM(TotalEngagements) DESC) AS Rank FROM ContentCreators WHERE Year = 2021 GROUP BY CreatorName) SELECT CreatorName, TotalEngagements FROM RankedCreators WHERE Rank <= 5;","The query first creates a common table expression (CTE) to group data by content creator and calculates the sum of total engagements for each creator. It then ranks these creators based on the total engagements in descending order using the DENSE_RANK function. After creating the CTE, the query retrieves the top 5 creators with the highest audience engagement across all platforms for the year 2021."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Display the total carbon emissions of each country along with the names of the countries for the year 2022, ensuring data integrity with a transaction block.","CREATE TABLE Emissions (CountryID INT PRIMARY KEY, Year INT, CarbonEmission DECIMAL); CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50)); INSERT INTO Emissions (CountryID, Year, CarbonEmission) VALUES (1, 2022, 1500.75), (2, 2022, 2500.50), (3, 2022, 1800.25); INSERT INTO Countries (CountryID, CountryName) VALUES (1, 'USA'), (2, 'China'), (3, 'India');","BEGIN TRANSACTION; SELECT c.CountryName, e.CarbonEmission FROM Emissions e INNER JOIN Countries c ON e.CountryID = c.CountryID WHERE e.Year = 2022; COMMIT;","The query starts a transaction block to ensure the integrity of the data. It then performs an INNER JOIN between the Emissions and Countries tables on the CountryID field. The WHERE clause filters the results to include only the records for the year 2022. Finally, the transaction is committed to save the results."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert a new record into the AudienceEngagement table for a new series and then display the top 3 series with the highest average engagement scores.,"CREATE TABLE MediaConsumption (UserID INT PRIMARY KEY, MediaID INT, ConsumptionDate DATE, DurationWatched INT); CREATE TABLE ContentCreation (ContentID INT PRIMARY KEY, CreatorID INT, ContentType VARCHAR(50), ReleaseDate DATE); CREATE TABLE AudienceEngagement (EngagementID INT PRIMARY KEY, SeriesID INT, UserID INT, EngagementScore DECIMAL); CREATE TABLE SeriesInfo (SeriesID INT PRIMARY KEY, SeriesName VARCHAR(100), Genre VARCHAR(50));","INSERT INTO AudienceEngagement (EngagementID, SeriesID, UserID, EngagementScore) VALUES (101, 5, 202, 8.5); WITH SeriesAvgEngagement AS (SELECT SeriesID, AVG(EngagementScore) AS AvgScore FROM AudienceEngagement GROUP BY SeriesID) SELECT s.SeriesName, sae.AvgScore FROM SeriesAvgEngagement sae JOIN SeriesInfo s ON sae.SeriesID = s.SeriesID ORDER BY sae.AvgScore DESC LIMIT 3;","The query inserts a new record into the AudienceEngagement table with specific values for EngagementID, SeriesID, UserID, and EngagementScore. It then calculates the average engagement score for each series using a common table expression (CTE) and joins this with the SeriesInfo table to retrieve the series name and average engagement score. Finally, it orders the series by the average engagement score in descending order and displays the top 3 series."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the 3 most popular programming languages based on the number of Github repositories created in 2021.,"CREATE TABLE GithubRepos (RepoID INT PRIMARY KEY, Language VARCHAR(50), CreationDate DATE); INSERT INTO GithubRepos (RepoID, Language, CreationDate) VALUES (1, 'Python', '2021-01-15'), (2, 'Java', '2021-03-20'), (3, 'JavaScript', '2021-07-30'), (4, 'Python', '2021-02-11'), (5, 'C++', '2021-10-05'), (6, 'Java', '2021-09-14'), (7, 'Python', '2021-12-12'), (8, 'JavaScript', '2021-11-27'), (9, 'Java', '2021-05-04'), (10, 'Python', '2021-07-19');","WITH LanguageCount AS (SELECT Language, COUNT(*) as RepoCount FROM GithubRepos WHERE YEAR(CreationDate) = 2021 GROUP BY Language) SELECT Language, RepoCount FROM LanguageCount ORDER BY RepoCount DESC LIMIT 3;","The SQL query first creates a common table expression (CTE) called LanguageCount that groups Github repositories by programming language and counts the number of repositories for each language for the year 2021. It then selects the programming languages and their corresponding counts from the CTE, orders the results by the count in descending order and finally limits the result to the top 3 languages."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert a new patient's medical history and then find all patients who have had the same treatment and their outcomes.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DateOfBirth DATE, Gender VARCHAR(10)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), Treatment VARCHAR(100), Outcome VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients (PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(100), Description TEXT); CREATE TABLE Outcomes (OutcomeID INT PRIMARY KEY, OutcomeDescription TEXT);","INSERT INTO MedicalHistories (HistoryID, PatientID, Diagnosis, Treatment, Outcome) VALUES (101, 1, 'Hypertension', 'Medication A', 'Improved'); WITH TreatmentPatients AS (SELECT PatientID FROM MedicalHistories WHERE Treatment = (SELECT Treatment FROM MedicalHistories WHERE HistoryID = 101)) SELECT Patients.FirstName, Patients.LastName, MedicalHistories.Outcome FROM Patients JOIN MedicalHistories ON Patients.PatientID = MedicalHistories.PatientID WHERE Patients.PatientID IN (SELECT PatientID FROM TreatmentPatients);","The query first inserts a new record into the MedicalHistories table for a patient with a specific treatment and outcome. Then it uses a common table expression (CTE) to find all patients who have received the same treatment as the new record. Finally, it selects the first and last names of these patients along with their treatment outcomes by joining the Patients and MedicalHistories tables, filtering for the relevant patient IDs."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report on the revenue from ticket sales for each sports event, categorized by fan engagement levels, and ensure that the transaction is rolled back if any data inconsistencies are found.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE, Revenue DECIMAL);CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, Description VARCHAR(100));CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, EventID INT FOREIGN KEY REFERENCES SportsEvents(EventID), EngagementID INT FOREIGN KEY REFERENCES FanEngagement(EngagementID), SaleAmount DECIMAL);","BEGIN TRANSACTION; WITH PIVOTED_SALES AS (SELECT EventName, [Low] AS LowEngagementSales, [Medium] AS MediumEngagementSales, [High] AS HighEngagementSales FROM (SELECT se.EventName, fe.Description, ts.SaleAmount FROM TicketSales ts JOIN SportsEvents se ON ts.EventID = se.EventID JOIN FanEngagement fe ON ts.EngagementID = fe.EngagementID) AS SourceTable PIVOT(SUM(SaleAmount) FOR Description IN ([Low], [Medium], [High])) AS PivotTable) SELECT EventName, LowEngagementSales, MediumEngagementSales, HighEngagementSales FROM PIVOTED_SALES; IF @@ERROR <> 0 BEGIN ROLLBACK TRANSACTION; END ELSE BEGIN COMMIT TRANSACTION; END;","The query first initiates a transaction. It then creates a common table expression (CTE) to pivot the sales data based on fan engagement levels. The PIVOT operation transforms the engagement description into columns and sums the sales amounts. Finally, it checks for errors; if any errors are encountered, it rolls back the transaction, otherwise, it commits the transaction to ensure data consistency."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the names and average prices of the top 3 most expensive sustainable fashion brands sold in North America.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN);CREATE TABLE ProductPrices (ProductID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), Price DECIMAL, FOREIGN KEY (BrandID) REFERENCES FashionBrands(BrandID));INSERT INTO FashionBrands (BrandID, BrandName, IsSustainable) VALUES (1, 'EcoWear', TRUE), (2, 'GreenStyle', TRUE), (3, 'FastFashion', FALSE), (4, 'SustainableElegance', TRUE), (5, 'Trendy', FALSE);INSERT INTO ProductPrices (ProductID, BrandID, Region, Price) VALUES (1, 1, 'North America', 150.0), (2, 1, 'North America', 130.0), (3, 2, 'North America', 200.0), (4, 3, 'Europe', 50.0), (5, 4, 'North America', 180.0), (6, 5, 'Asia', 90.0);","SELECT BrandName, AVG(Price) AS AvgPrice FROM FashionBrands FB JOIN ProductPrices PP ON FB.BrandID = PP.BrandID WHERE FB.IsSustainable = TRUE AND PP.Region = 'North America' GROUP BY BrandName ORDER BY AvgPrice DESC LIMIT 3;","The query first joins the FashionBrands and ProductPrices tables based on BrandID. Then, it filters the results to include only sustainable brands (IsSustainable = TRUE) and products sold in North America. Next, it groups the results by BrandName and calculates the average price (AvgPrice) for each brand. Finally, it orders the brands by AvgPrice in descending order and limits the results to the top 3 brands."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"Find out the top 5 countries with the highest total value of sports merchandise sold, within the last year.","CREATE TABLE MerchandiseSales (SaleID INT PRIMARY KEY, Country VARCHAR(50), MerchandiseType VARCHAR(50), SaleDate DATE, SaleValue DECIMAL); INSERT INTO MerchandiseSales (SaleID, Country, MerchandiseType, SaleDate, SaleValue) VALUES (1, 'USA', 'Jersey', '2020-03-05', 100.0), (2, 'Germany', 'Football', '2020-06-01', 90.0), (3, 'Brazil', 'Cap', '2020-08-15', 50.0), (4, 'USA', 'Cap', '2020-12-07', 30.0), (5, 'UK', 'Jersey', '2021-01-02', 80.0), (6, 'Germany', 'Jersey', '2021-02-20', 120.0),(7, 'USA', 'Football', '2021-03-01', 70.0), (8, 'Brazil', 'Jersey', '2021-03-25', 60.0), (9, 'UK', 'Cap', '2021-04-12', 40.0), (10, 'UK', 'Football', '2021-05-30', 80.0);","WITH SalesInLastYear AS (SELECT Country, SUM(SaleValue) as TotalSaleValue FROM MerchandiseSales WHERE SaleDate BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND CURDATE() GROUP BY Country) SELECT Country, TotalSaleValue FROM SalesInLastYear ORDER BY TotalSaleValue DESC LIMIT 5;",This query first creates a common table expression (CTE) called 'SalesInLastYear' which groups the sales data by countries and calculates the total sale value for each country within the last year. The main SELECT statement then retrieves the top 5 countries with the highest total sale value from this CTE and orders them in descending order.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,data retrieval: basic data fetching queries,Find the top 5 crops with the highest average yield across different regions in the last 5 years.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, AvgYield DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Year, AvgYield) VALUES (1, 'Wheat', 'North America', 2017, 120.5), (2, 'Corn', 'Europe', 2018, 118.0), (3, 'Rice', 'Asia', 2019, 110.0), (4, 'Soybean', 'North America', 2020, 115.7), (5, 'Barley', 'Europe', 2021, 95.0);","WITH RankedCrops AS (SELECT CropName, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM CropYield WHERE Year >= (SELECT MAX(Year) FROM CropYield) - 5) SELECT CropName, AvgYield FROM RankedCrops WHERE Rank <= 5;","The query first creates a common table expression (CTE) named 'RankedCrops'. It then ranks the crops based on their average yield in descending order for the last 5 years using the DENSE_RANK function. Finally, it selects the top 5 crops with the highest average yield."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the top 5 Artificial Intelligence (AI) startups based on their total funding received in the last 5 years, and for each of these startups, find the name of the startup, the total funding received, and the main technological disruptor they are focusing on.","CREATE TABLE AI_Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(50), TechDisruptor VARCHAR(50)); INSERT INTO AI_Startups (StartupID, StartupName, TechDisruptor) VALUES (1, 'DeepMind', 'Deep Learning'), (2, 'OpenAI', 'Generative Pretrained Transformer 3'), (3, 'Cerebras Systems', 'AI hardware'), (4, 'DataRobot', 'Automated Machine Learning'), (5, 'Tempo Automation', 'Electronics Manufacturing Services'); CREATE TABLE Funding (FundingID INT PRIMARY KEY, StartupID INT, Year INT, Amount DECIMAL); INSERT INTO Funding (FundingID, StartupID, Year, Amount) VALUES (1, 1, 2020, 1000.0), (2, 1, 2019, 800.0), (3, 2, 2020, 600.0), (4, 2, 2019, 400.0), (5, 3, 2020, 200.0), (6, 3, 2019, 200.0), (7, 4, 2020, 300.0), (8, 4, 2019, 300.0), (9, 5, 2020, 500.0), (10, 5, 2019, 500.0);","WITH FiveYearFunding AS (SELECT StartupID, SUM(Amount) AS TotalFunding FROM Funding WHERE Year >= (YEAR(CURRENT_DATE) - 5) GROUP BY StartupID), TopStartups AS (SELECT StartupID, TotalFunding, DENSE_RANK() OVER (ORDER BY TotalFunding DESC) AS Rank FROM FiveYearFunding) SELECT s.StartupName, f.TotalFunding, s.TechDisruptor FROM TopStartups f INNER JOIN AI_Startups s ON f.StartupID = s.StartupID WHERE f.Rank <= 5 ORDER BY f.TotalFunding DESC;","The query first creates a common table expression (CTE) to calculate the total funding received by each startup in the last 5 years. Then it creates another CTE to rank these startups based on the total funding received, in descending order. Finally, it joins the AI_Startups table with the TopStartups CTE to get the name of the startup and the main technological disruptor they are focusing on, for the top 5 startups ranked by funding."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Add a new record representing the annual carbon dioxide emission for China in 2020, then show the 5 countries with the highest emissions for that year.","CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, Emission DECIMAL); INSERT INTO CO2Emissions (Country, Year, Emission) VALUES ('India', 2020, 2000.1), ('United States', 2020, 2500.4), ('Brazil', 2020, 1500.3), ('Australia', 2020, 1200.2), ('Russia', 2020, 2200.5);","INSERT INTO CO2Emissions (Country, Year, Emission) VALUES ('China', 2020, 2800.7); WITH RankedCountries AS (SELECT Country, Emission, DENSE_RANK() OVER (ORDER BY Emission DESC) AS Rank FROM CO2Emissions WHERE Year = 2020) SELECT Country, Emission FROM RankedCountries WHERE Rank <= 5;","The first SQL query is inserting a new record for China with its CO2 emission in 2020. The second query is creating a common table expression (CTE) that ranks countries based on their CO2 emissions for the year 2020 in descending order, and then selects the top 5 countries with the highest emissions."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue per hotel for different regions, and then display the top 5 highest revenue-generating hotels.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Region VARCHAR(50)); CREATE TABLE Reservations (ReservationID INT PRIMARY KEY, HotelID INT, CheckInDate DATE, CheckOutDate DATE, TotalRevenue DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","CREATE TABLE HotelRevenue AS SELECT HotelID, SUM(TotalRevenue) AS TotalRevenue FROM Reservations GROUP BY HotelID; WITH RankedHotels AS (SELECT h.HotelName, hr.TotalRevenue, DENSE_RANK() OVER (ORDER BY hr.TotalRevenue DESC) AS Rank FROM HotelRevenue hr JOIN Hotels h ON hr.HotelID = h.HotelID) SELECT HotelName, TotalRevenue FROM RankedHotels WHERE Rank <= 5;","The query first creates a table to store the aggregated total revenue for each hotel. It then uses a common table expression (CTE) to rank hotels based on their total revenue in descending order. Finally, it selects the top 5 highest revenue-generating hotels using the DENSE_RANK function."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 5 financial technologies that have the highest investments and run transactions to increase their investments by 10%.,"CREATE TABLE FinTech (ID INT PRIMARY KEY, Technology VARCHAR(50), Investment DECIMAL); INSERT INTO FinTech (ID, Technology, Investment) VALUES (1, 'Blockchain', 1000000.00), (2, 'Artificial Intelligence', 5000000.00), (3, 'Robo-Advising', 3000000.00), (4, 'Cybersecurity', 4000000.00), (5, 'InsureTech', 2000000.00);","BEGIN; WITH RankedTech AS (SELECT Technology, Investment, DENSE_RANK() OVER (ORDER BY Investment DESC) AS Rank FROM FinTech) UPDATE FinTech SET Investment = Investment * 1.10 WHERE Technology IN (SELECT Technology FROM RankedTech WHERE Rank <= 5); COMMIT;","The SQL query starts a transaction and creates a common table expression (CTE) to rank financial technologies based on their current investment in descending order. It then updates the investment of the top 5 financial technologies, increasing their investment by 10%. The transaction is then committed to save the changes."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Identify the top 5 crops with highest yield per acre in each region for the year 2020.,"CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, YieldperAcre DECIMAL); INSERT INTO Crops (CropID, CropName, Region, Year, YieldperAcre) VALUES (1, 'Wheat', 'North America', 2020, 50.5), (2, 'Corn', 'Europe', 2020, 60.0), (3, 'Rice', 'Asia', 2020, 80.0), (4, 'Soybean', 'South America',2020, 45.7), (5, 'Barley', 'Africa', 2020, 30.0), (6, 'Oats', 'North America', 2020, 35.0), (7, 'Rye', 'Europe', 2020, 55.0), (8, 'Millet', 'Asia', 2020, 70.0), (9, 'Sorghum', 'South America', 2020, 60.0), (10, 'Maize', 'Africa', 2020, 75.0);","WITH RankedCrops AS (SELECT CropName, YieldperAcre, DENSE_RANK() OVER (PARTITION BY Region ORDER BY YieldperAcre DESC) AS Rank FROM Crops WHERE Year = 2020) SELECT Region, CropName, YieldperAcre FROM RankedCrops WHERE Rank <= 5;","The query begins by creating a common table expression (CTE) named RankedCrops that ranks the crops within each region based on their yield per acre in descending order for the year 2020. This is achieved using the DENSE_RANK window function. The main query then selects the region, crop name, and yield per acre from this CTE where the rank is less than or equal to 5, thereby giving the top 5 crops with the highest yield per acre in each region for the year 2020."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the country with the highest total carbon dioxide emissions from the year 2000 to 2020.,"CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CarbonEmissions (Country, Year, Emissions) VALUES ('USA', 2000, 6.2), ('China', 2000, 3.2), ('USA', 2010, 5.9), ('China', 2010, 8.2), ('USA', 2020, 5.1), ('China', 2020, 10.2);","SELECT Country, SUM(Emissions) as TotalEmissions FROM CarbonEmissions WHERE Year BETWEEN 2000 AND 2020 GROUP BY Country ORDER BY TotalEmissions DESC LIMIT 1;",The query is summing up the total carbon dioxide emissions for each country from the year 2000 to 2020. Then it is ordering these totals in descending order and selecting the country with the highest total emissions.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores information on consumer spending across different fashion categories in various regions, and then display the top 3 categories with the highest average spending per consumer.","CREATE TABLE ConsumerSpending (SpendingID INT PRIMARY KEY, CategoryName VARCHAR(50), Region VARCHAR(50), AvgSpendingPerConsumer DECIMAL); INSERT INTO ConsumerSpending (SpendingID, CategoryName, Region, AvgSpendingPerConsumer) VALUES (1, 'Footwear', 'North America', 200.50), (2, 'Apparel', 'Europe', 150.30), (3, 'Accessories', 'Asia', 120.00), (4, 'Cosmetics', 'North America', 180.75), (5, 'Jewelry', 'Europe', 300.60);","WITH RankedCategories AS (SELECT CategoryName, AvgSpendingPerConsumer, DENSE_RANK() OVER (ORDER BY AvgSpendingPerConsumer DESC) AS Rank FROM ConsumerSpending) SELECT CategoryName, AvgSpendingPerConsumer FROM RankedCategories WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank fashion categories based on their average spending per consumer in descending order. It then selects the top 3 categories with the highest average spending per consumer using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 countries with the highest average annual rainfall and the percentage change compared to the previous year.,"CREATE TABLE RainfallData (Country VARCHAR(50), Year INT, AvgAnnualRainfall DECIMAL); INSERT INTO RainfallData (Country, Year, AvgAnnualRainfall) VALUES ('India', 2020, 1100), ('Brazil', 2020, 1800), ('Japan', 2020, 1700), ('Colombia', 2020, 3000), ('Singapore', 2020, 2300), ('India', 2019, 1050), ('Brazil', 2019, 1750), ('Japan', 2019, 1650), ('Colombia', 2019, 2950), ('Singapore', 2019, 2250);","WITH RainfallRanks AS (SELECT Country, AvgAnnualRainfall, LAG(AvgAnnualRainfall) OVER(PARTITION BY Country ORDER BY Year) PreviousYearRainfall, RANK() OVER (ORDER BY AvgAnnualRainfall DESC) Rank FROM RainfallData WHERE Year = 2020) SELECT Country, AvgAnnualRainfall, ((AvgAnnualRainfall - PreviousYearRainfall) / PreviousYearRainfall) * 100 AS PercentageChange FROM RainfallRanks WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) named RainfallRanks which calculates the average annual rainfall for each country for the year 2020 and its rank based on the rainfall. It also calculates the previous year's rainfall for each country using the LAG window function. The main query then calculates the percentage change in rainfall from the previous year for the top 5 countries with the highest average annual rainfall.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the top 5 most popular film genres in North America based on viewer count over the last 5 years, sorted in descending order.","CREATE TABLE Genres (GenreID INT PRIMARY KEY, GenreName VARCHAR(50)); CREATE TABLE Movies (MovieID INT PRIMARY KEY, GenreID INT, MovieName VARCHAR(100), ReleaseYear INT); CREATE TABLE Audience (AudienceID INT PRIMARY KEY, Region VARCHAR(50)); CREATE TABLE Views (ViewID INT PRIMARY KEY, MovieID INT, AudienceID INT, ViewDate DATE); INSERT INTO Genres (GenreID, GenreName) VALUES (1, 'Action'), (2, 'Comedy'), (3, 'Drama'), (4, 'Horror'), (5, 'Sci-Fi'); INSERT INTO Movies (MovieID, GenreID, MovieName, ReleaseYear) VALUES (1, 1, 'Avengers Endgame', 2019), (2, 2, 'Jumanji', 2019), (3, 3, 'Joker', 2019), (4, 4, 'IT', 2019), (5, 5, 'Star Wars', 2019); INSERT INTO Audience (AudienceID, Region) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'), (4, 'Australia'), (5, 'Africa'); INSERT INTO Views (ViewID, MovieID, AudienceID, ViewDate) VALUES (1, 1, 1, '2020-01-01'), (2, 2, 1, '2020-01-02'), (3, 3, 1, '2020-01-03'), (4, 4, 1, '2020-01-04'), (5, 5, 1, '2020-01-05');","WITH GenreViews AS (SELECT g.GenreName, COUNT(v.ViewID) AS ViewsCount FROM Genres g INNER JOIN Movies m ON g.GenreID = m.GenreID INNER JOIN Views v ON m.MovieID = v.MovieID INNER JOIN Audience a ON v.AudienceID = a.AudienceID WHERE a.Region = 'North America' AND YEAR(v.ViewDate) >= YEAR(CURRENT_DATE) - 5 GROUP BY g.GenreName) SELECT GenreName, ViewsCount FROM GenreViews ORDER BY ViewsCount DESC LIMIT 5;","The query first creates a common table expression (CTE) named GenreViews that joins four tables: Genres, Movies, Views, and Audience. It then selects the genre and count of views for each genre for audiences in North America over the last 5 years. The resulting CTE is then used to retrieve the top 5 most popular genres based on the count of views in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"Provide the total government spending by sector for each year, and filter the results to show only those sectors where the average yearly spending is greater than $1 billion.","CREATE TABLE GovernmentSpending (Year INT, Sector VARCHAR(50), Amount DECIMAL); CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(50)); INSERT INTO GovernmentSpending (Year, Sector, Amount) VALUES (2020, 'Healthcare', 1500000000), (2020, 'Education', 800000000), (2021, 'Healthcare', 1600000000), (2021, 'Education', 850000000), (2021, 'Defense', 1200000000);","SELECT Year, Sector, SUM(Amount) AS TotalSpending FROM GovernmentSpending GROUP BY Year, Sector HAVING AVG(Amount) > 1000000000;","The query calculates the total government spending by sector for each year and filters the results to include only those sectors where the average yearly spending exceeds $1 billion. It groups the data by year and sector, sums the spending amounts, and uses the HAVING clause to filter based on the average spending."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average points per game for basketball players from different teams over the last season.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT, Position VARCHAR(20)); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), CoachName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, SeasonYear INT, Date DATE); CREATE TABLE PlayerStats (PlayerID INT, GameID INT, Points INT, Assists INT, Rebounds INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (GameID) REFERENCES Games(GameID));","SELECT P.PlayerName, T.TeamName, AVG(PS.Points) AS AvgPointsPerGame FROM Players P JOIN PlayerStats PS ON P.PlayerID = PS.PlayerID JOIN Teams T ON P.TeamID = T.TeamID JOIN Games G ON PS.GameID = G.GameID WHERE G.SeasonYear = 2022 GROUP BY P.PlayerName, T.TeamName;","The SQL query calculates the average points per game for each player during the 2022 season. It joins the Players, PlayerStats, Teams, and Games tables to collect necessary data. It groups the results by player name and team name, and then calculates the average points scored per game for each player. Finally, it displays the player name, team name, and the calculated average points per game."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Update the engagement score of creators who have released more than 10 videos in the last year and have an average view count above 10,000.","CREATE TABLE MediaConsumption (UserID INT PRIMARY KEY, ContentID INT, ViewCount INT, ReleaseDate DATE); CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50), TotalVideos INT, AvgViewCount DECIMAL, EngagementScore DECIMAL); CREATE TABLE EngagementMetrics (MetricID INT PRIMARY KEY, CreatorID INT, EngagementScore DECIMAL);","WITH ActiveCreators AS (SELECT CreatorID, TotalVideos, AvgViewCount FROM ContentCreators WHERE TotalVideos > 10 AND AvgViewCount > 10000), UpdatedEngagement AS (SELECT AC.CreatorID, (EC.EngagementScore * 1.1) AS NewScore FROM ActiveCreators AC JOIN EngagementMetrics EC ON AC.CreatorID = EC.CreatorID) UPDATE EngagementMetrics SET EngagementScore = UE.NewScore FROM UpdatedEngagement UE WHERE EngagementMetrics.CreatorID = UE.CreatorID;","The query first identifies creators who have released more than 10 videos and have an average view count above 10,000 using a common table expression (CTE) called ActiveCreators. It then calculates a new engagement score by multiplying the current score by 1.1 in another CTE called UpdatedEngagement. Finally, it updates the EngagementMetrics table with the new engagement scores for the relevant creators."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 most viewed TV shows and Movies from North America and Europe in 2020.,"CREATE TABLE MediaConsumption (ID INT PRIMARY KEY, MediaType VARCHAR(20), Title VARCHAR(100), Region VARCHAR(50), Views BIGINT); INSERT INTO MediaConsumption (ID, MediaType, Title, Region, Views) VALUES (1, 'Movie', 'Avengers Endgame', 'North America', 20000000), (2, 'TV Show', 'Game of Thrones', 'North America', 18000000), (3, 'Movie', 'Parasite', 'Europe', 15000000), (4, 'TV Show', 'Fleabag', 'Europe', 12000000), (5, 'Movie', 'Frozen II', 'North America', 10000000);","WITH RankedMedia AS (SELECT Title, Views, DENSE_RANK() OVER (ORDER BY Views DESC) AS Rank FROM MediaConsumption WHERE Region IN ('North America', 'Europe') AND Year = 2020) SELECT Title, Views FROM RankedMedia WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank TV shows and movies based on their views in descending order in the regions North America and Europe for the year 2020. It then selects the top 5 most viewed TV shows and movies using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the quarterly sales data for different fashion brands across various regions, and then display the top 5 brands with the highest sales for each quarter.","CREATE TABLE QuarterlySales (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), Quarter VARCHAR(20), Sales DECIMAL); INSERT INTO QuarterlySales (BrandID, BrandName, Region, Quarter, Sales) VALUES (1, 'Gucci', 'North America', 'Q1', 120.5), (2, 'Prada', 'Europe', 'Q1', 118.0), (3, 'Versace', 'Asia', 'Q1', 110.0), (4, 'Chanel', 'North America', 'Q2', 115.7), (5, 'Dior', 'Europe', 'Q2', 95.0);","WITH RankedBrands AS (SELECT BrandName, Quarter, Sales, DENSE_RANK() OVER (PARTITION BY Quarter ORDER BY Sales DESC) AS Rank FROM QuarterlySales) SELECT BrandName, Quarter, Sales FROM RankedBrands WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank fashion brands based on their quarterly sales in descending order, partitioned by quarter. It then selects the top 5 brands with the highest sales for each quarter using the DENSE_RANK function."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create tables to store information about government departments, their employees, their projects, the contractors involved in these projects and the project costs. Then write a query to find the department that has the highest total project cost.","CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Department of Education'), (2, 'Department of Health'), (3, 'Department of Defense'); CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, DepartmentID INT, EmployeeName VARCHAR(100)); INSERT INTO Employees (EmployeeID, DepartmentID, EmployeeName) VALUES (1, 1, 'John Doe'), (2, 2, 'Jane Smith'), (3, 3, 'James Brown'); CREATE TABLE Projects (ProjectID INT PRIMARY KEY, EmployeeID INT, ProjectName VARCHAR(100)); INSERT INTO Projects (ProjectID, EmployeeID, ProjectName) VALUES (1, 1, 'Project Education'), (2, 2, 'Project Health'), (3, 3, 'Project Defense'); CREATE TABLE Contractors (ContractorID INT PRIMARY KEY, ProjectID INT, ContractorName VARCHAR(100)); INSERT INTO Contractors (ContractorID, ProjectID, ContractorName) VALUES (1, 1, 'Contractor A'), (2, 2, 'Contractor B'), (3, 3, 'Contractor C'); CREATE TABLE ProjectCosts (CostID INT PRIMARY KEY, ProjectID INT, Cost DECIMAL); INSERT INTO ProjectCosts (CostID, ProjectID, Cost) VALUES (1, 1, 1500000.00), (2, 2, 2000000.00), (3, 3, 2500000.00);","WITH DepartmentCosts AS (SELECT D.DepartmentName, SUM(PC.Cost) AS TotalCost FROM Departments D INNER JOIN Employees E ON D.DepartmentID = E.DepartmentID INNER JOIN Projects P ON E.EmployeeID = P.EmployeeID INNER JOIN ProjectCosts PC ON P.ProjectID = PC.ProjectID GROUP BY D.DepartmentName) SELECT DepartmentName, TotalCost FROM DepartmentCosts ORDER BY TotalCost DESC LIMIT 1;","The query first creates a Common Table Expression (CTE) - DepartmentCosts. In DepartmentCosts, it performs an INNER JOIN on the Departments, Employees, Projects, and ProjectCosts tables on their respective ids to calculate the total cost per department. This is done through the SUM function on the Cost field, grouping by DepartmentName. Then, from the CTE, it selects the DepartmentName and the corresponding TotalCost, ordered in descending order of TotalCost. It limits the output to 1, thus returning the department with the highest total project cost."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the latest fashion trends along with consumer behavior and sustainability practices from different regions.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), StartDate DATE, EndDate DATE); CREATE TABLE ConsumerBehavior (BehaviorID INT PRIMARY KEY, Description VARCHAR(255), TrendID INT, FOREIGN KEY (TrendID) REFERENCES FashionTrends(TrendID)); CREATE TABLE SustainablePractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(100), Description VARCHAR(255)); CREATE TABLE Region (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE RegionalTrends (RTID INT PRIMARY KEY, TrendID INT, RegionID INT, PracticeID INT, CONSTRAINT FK_TrendID FOREIGN KEY (TrendID) REFERENCES FashionTrends(TrendID), CONSTRAINT FK_RegionID FOREIGN KEY (RegionID) REFERENCES Region(RegionID), CONSTRAINT FK_PracticeID FOREIGN KEY (PracticeID) REFERENCES SustainablePractices(PracticeID));","SELECT ft.TrendName, cb.Description AS ConsumerBehavior, sp.PracticeName, r.RegionName FROM FashionTrends ft INNER JOIN ConsumerBehavior cb ON ft.TrendID = cb.TrendID INNER JOIN RegionalTrends rt ON ft.TrendID = rt.TrendID INNER JOIN Region r ON rt.RegionID = r.RegionID INNER JOIN SustainablePractices sp ON rt.PracticeID = sp.PracticeID WHERE ft.EndDate IS NULL;","The query retrieves the latest (ongoing) fashion trends by checking where the EndDate is NULL. It joins the FashionTrends table with ConsumerBehavior and RegionalTrends to get the trends, behavior, and practices. Then, it joins with the Region and SustainablePractices tables to fetch the respective region and sustainability practices. INNER JOINs ensure that only records present in all joined tables are retrieved."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,List the top 10 movies with the highest audience engagement score in the past year.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseDate DATE); CREATE TABLE AudienceEngagement (EngagementID INT PRIMARY KEY, MovieID INT, EngagementScore DECIMAL, EngagementDate DATE, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID));","WITH EngagementRank AS (SELECT M.Title, AE.EngagementScore, ROW_NUMBER() OVER (PARTITION BY M.Title ORDER BY AE.EngagementScore DESC) AS Rank FROM Movies M JOIN AudienceEngagement AE ON M.MovieID = AE.MovieID WHERE AE.EngagementDate >= DATEADD(year, -1, GETDATE())) SELECT Title, EngagementScore FROM EngagementRank WHERE Rank = 1 ORDER BY EngagementScore DESC LIMIT 10;","The query first creates a common table expression (CTE) named EngagementRank which ranks movies based on their engagement score for the past year. It uses ROW_NUMBER() to rank each movie's engagement score in descending order within each movie title. The main query then selects the top-ranked (i.e., highest engagement score) entry for each movie and orders the results by engagement score in descending order, limiting the result to the top 10 movies."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the top 3 emerging technologies in terms of market growth in the last year and compares their growth rates across different regions.,"CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(50), Category VARCHAR(50)); CREATE TABLE MarketGrowth (GrowthID INT PRIMARY KEY, TechID INT, Region VARCHAR(50), GrowthRate DECIMAL, Year INT, FOREIGN KEY (TechID) REFERENCES Technologies(TechID)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); INSERT INTO Technologies (TechID, TechName, Category) VALUES (1, 'AI', 'Software'), (2, 'Blockchain', 'Software'), (3, 'IoT', 'Hardware'); INSERT INTO MarketGrowth (GrowthID, TechID, Region, GrowthRate, Year) VALUES (1, 1, 'North America', 25.6, 2022), (2, 1, 'Europe', 23.4, 2022), (3, 2, 'Asia', 30.2, 2022), (4, 3, 'North America', 18.7, 2022); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia');","WITH Growth2022 AS (SELECT TechID, AVG(GrowthRate) AS AvgGrowthRate FROM MarketGrowth WHERE Year = 2022 GROUP BY TechID), TopTechnologies AS (SELECT TechID, AvgGrowthRate, DENSE_RANK() OVER (ORDER BY AvgGrowthRate DESC) AS Rank FROM Growth2022) SELECT T.TechName, MG.Region, MG.GrowthRate FROM TopTechnologies TT JOIN Technologies T ON TT.TechID = T.TechID JOIN MarketGrowth MG ON TT.TechID = MG.TechID WHERE TT.Rank <= 3 AND MG.Year = 2022;","The query first creates a common table expression (CTE) called Growth2022 that calculates the average growth rate for each technology in 2022. Then, another CTE called TopTechnologies ranks these technologies based on their average growth rates. Finally, the main query retrieves the technology names, regions, and growth rates for the top 3 technologies in 2022."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the yield data for wheat farms in the Midwest region and then display the updated records.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), Region VARCHAR(50));CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50));CREATE TABLE YieldData (YieldID INT PRIMARY KEY, FarmID INT, CropID INT, Yield DECIMAL, Year INT, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID), FOREIGN KEY (CropID) REFERENCES Crops(CropID));INSERT INTO Farms (FarmID, FarmName, Region) VALUES (1, 'Green Acres', 'Midwest'), (2, 'Sunny Fields', 'Midwest'), (3, 'Hilltop Farm', 'Northeast');INSERT INTO Crops (CropID, CropName) VALUES (1, 'Wheat'), (2, 'Corn');INSERT INTO YieldData (YieldID, FarmID, CropID, Yield, Year) VALUES (1, 1, 1, 30.5, 2022), (2, 2, 1, 28.3, 2022), (3, 3, 2, 40.2, 2022);",UPDATE YieldData SET Yield = 32.0 WHERE FarmID IN (SELECT FarmID FROM Farms WHERE Region = 'Midwest') AND CropID = (SELECT CropID FROM Crops WHERE CropName = 'Wheat');SELECT * FROM YieldData WHERE CropID = (SELECT CropID FROM Crops WHERE CropName = 'Wheat');,"The SQL query first updates the yield data for wheat farms located in the Midwest region. It sets the yield to 32.0 for those specific records. Following the update, it selects and displays all records from the YieldData table where the crop is wheat."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the trend of biodegradable clothing purchases in the last five years in North America, Europe, and Asia. Also, include a breakdown by age groups and gender.","CREATE TABLE BiodegradableClothing (PurchaseID INT PRIMARY KEY, Date DATE, Region VARCHAR(50), AgeGroup VARCHAR(20), Gender VARCHAR(10), Quantity INT); INSERT INTO BiodegradableClothing (PurchaseID, Date, Region, AgeGroup, Gender, Quantity) VALUES (1, '2016-07-21', 'North America', '18-25', 'Male', 20), (2, '2017-08-16', 'Europe', '26-35', 'Female', 35), (3, '2018-09-10', 'Asia', '36-45', 'Male', 45), (4, '2019-10-05', 'North America', '46-55', 'Female', 50), (5, '2020-11-30', 'Europe', '56+', 'Male', 55);","WITH CTE AS (SELECT YEAR(Date) AS Year, Region, AgeGroup, Gender, SUM(Quantity) AS TotalPurchases FROM BiodegradableClothing GROUP BY YEAR(Date), Region, AgeGroup, Gender) SELECT Year, Region, AgeGroup, Gender, TotalPurchases FROM CTE PIVOT (SUM(TotalPurchases) FOR Region IN ('North America', 'Europe', 'Asia')) AS PivotedTable ORDER BY Year;","The SQL query first creates a Common Table Expression (CTE) that groups the data by year, region, age group, and gender, and calculates the total purchases of biodegradable clothing. The query then pivots this data to show the sum of purchases for each region - North America, Europe, and Asia, and presents it in a tabular format ordered by year."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a transaction that inserts the latest market trends for different technologies in the TechTrends table, then fetches the top 3 technologies with the highest growth percentage in the past year.","CREATE TABLE TechTrends (TechID INT PRIMARY KEY, TechnologyName VARCHAR(50), MarketGrowth DECIMAL, Year INT); BEGIN TRANSACTION; INSERT INTO TechTrends (TechID, TechnologyName, MarketGrowth, Year) VALUES (1, 'AI', 18.5, 2020), (2, 'Blockchain', 16.3, 2020), (3, 'Cloud Computing', 15.7, 2020), (4, 'IoT', 19.1, 2020), (5, 'Cybersecurity', 12.0, 2020); COMMIT;","WITH TrendRanking AS (SELECT TechnologyName, MarketGrowth, DENSE_RANK() OVER (ORDER BY MarketGrowth DESC) AS Rank FROM TechTrends WHERE Year = (SELECT MAX(Year) FROM TechTrends)) SELECT TechnologyName, MarketGrowth FROM TrendRanking WHERE Rank <= 3;",The SQL query starts a transaction to insert data into the TechTrends table. It then commits the transaction to ensure the data is saved. It then creates a common table expression (CTE) to rank technologies based on their market growth in the most recent year. It then selects the top 3 technologies with the highest market growth using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert new records into the AthletePerformance table for a basketball game and then retrieve the top five players with the highest total points scored in the current season, taking into account points from both home and away games and considering player transfers between teams.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), CurrentTeamID INT, FOREIGN KEY (CurrentTeamID) REFERENCES Teams(TeamID)); CREATE TABLE AthletePerformance (PerformanceID INT PRIMARY KEY, AthleteID INT, TeamID INT, PointsScored INT, IsHomeGame BOOLEAN, GameDate DATE, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (TeamID) REFERENCES Teams(TeamID)); INSERT INTO Teams (TeamID, TeamName, Region) VALUES (1, 'Lakers', 'West'), (2, 'Heat', 'East'), (3, 'Celtics', 'East'); INSERT INTO Athletes (AthleteID, AthleteName, CurrentTeamID) VALUES (1, 'LeBron James', 1), (2, 'Jimmy Butler', 2), (3, 'Jayson Tatum', 3);","INSERT INTO AthletePerformance (PerformanceID, AthleteID, TeamID, PointsScored, IsHomeGame, GameDate) VALUES (1, 1, 1, 30, TRUE, '2022-10-01'), (2, 1, 1, 28, FALSE, '2022-10-03'), (3, 2, 2, 25, TRUE, '2022-10-01'), (4, 2, 2, 27, FALSE, '2022-10-03'), (5, 3, 3, 24, TRUE, '2022-10-01'), (6, 3, 3, 26, FALSE, '2022-10-03'); WITH PlayerTotalPoints AS (SELECT Athletes.AthleteName, SUM(AthletePerformance.PointsScored) AS TotalPoints FROM Athletes INNER JOIN AthletePerformance ON Athletes.AthleteID = AthletePerformance.AthleteID WHERE AthletePerformance.GameDate >= '2022-09-01' GROUP BY Athletes.AthleteName) SELECT AthleteName, TotalPoints FROM PlayerTotalPoints ORDER BY TotalPoints DESC LIMIT 5;",The query starts by inserting new performance records for athletes in the AthletePerformance table. It then creates a CTE (Common Table Expression) that calculates the total points scored by each player in the current season. This is achieved by summing up the points scored by each player from the AthletePerformance table where the game date is after the start of the season. It then retrieves the top five players with the highest total points by ordering the results in descending order of total points and limiting the output to five records.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show me the top three matches with the highest fan engagement in the last year, and roll back the transaction if any error occurs.","CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, Team1 VARCHAR(50), Team2 VARCHAR(50), Attendance INT); INSERT INTO Matches (MatchID, MatchDate, Team1, Team2, Attendance) VALUES (1, '2020-01-05', 'Team A', 'Team B', 25000), (2, '2020-05-10', 'Team C', 'Team D', 30000), (3, '2020-08-20', 'Team E', 'Team F', 40000), (4, '2020-12-25', 'Team G', 'Team H', 35000), (5, '2021-03-30', 'Team I', 'Team J', 28000);","BEGIN; SELECT Team1, Team2, Attendance FROM Matches WHERE MatchDate > '2020-04-01' ORDER BY Attendance DESC LIMIT 3; ROLLBACK;","The SQL statement starts a transaction with the BEGIN command. It then selects the teams and attendance from the Matches table for matches that occurred in the last year, sorting them by attendance in descending order and limiting the results to the top three matches. If any error occurs during this process, the transaction will be rolled back, undoing any changes made during the transaction."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find all players who have scored more than 500 points in a single season, and provide a list of their team affiliations during that season. Ensure the data is consistent and any changes made during the transaction can be rolled back if necessary.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE SeasonScores (PlayerID INT, SeasonYear INT, PointsScored INT, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID)); INSERT INTO Players (PlayerID, PlayerName, TeamID) VALUES (1, 'Michael Jordan', 1), (2, 'LeBron James', 2), (3, 'Kobe Bryant', 1); INSERT INTO Teams (TeamID, TeamName, Region) VALUES (1, 'Chicago Bulls', 'North America'), (2, 'Los Angeles Lakers', 'North America'); INSERT INTO SeasonScores (PlayerID, SeasonYear, PointsScored) VALUES (1, 1996, 800), (2, 2008, 650), (3, 2006, 700);","BEGIN TRANSACTION; WITH HighScorers AS (SELECT Players.PlayerName, Teams.TeamName, SeasonScores.SeasonYear, SeasonScores.PointsScored FROM Players INNER JOIN SeasonScores ON Players.PlayerID = SeasonScores.PlayerID INNER JOIN Teams ON Players.TeamID = Teams.TeamID WHERE SeasonScores.PointsScored > 500) SELECT * FROM HighScorers ORDER BY PointsScored DESC; COMMIT;","The SQL transaction begins with a BEGIN TRANSACTION statement. The SQL query first creates a CTE (Common Table Expression) named HighScorers, which joins the Players, Teams, and SeasonScores tables based on matching PlayerID and TeamID. It filters for seasons where the player scored more than 500 points. It then selects all the records from this CTE and orders them in descending order by the number of points scored. If any error occurred during this transaction, all changes can be rolled back to the state before the transaction started with the ROLLBACK command. The transaction is completed with COMMIT, which means all changes made in the transaction are saved to the database."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Analyze consumer purchasing behavior trends in different regions for the last quarter and display the top 10 most popular fashion products.,"CREATE TABLE ConsumerPurchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, ProductID INT, Region VARCHAR(50), PurchaseDate DATE); CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(100), Category VARCHAR(50), Price DECIMAL); CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, AgeGroup VARCHAR(20), Gender VARCHAR(10));","BEGIN; WITH RecentPurchases AS (SELECT ProductID, COUNT(*) AS PurchaseCount FROM ConsumerPurchases WHERE PurchaseDate >= DATEADD(QUARTER, -1, GETDATE()) GROUP BY ProductID), RankedProducts AS (SELECT P.ProductName, P.Category, RP.PurchaseCount, RANK() OVER (ORDER BY RP.PurchaseCount DESC) AS Rank FROM RecentPurchases RP JOIN Products P ON RP.ProductID = P.ProductID) SELECT ProductName, Category, PurchaseCount FROM RankedProducts WHERE Rank <= 10; COMMIT;","The query first initiates a transaction with the BEGIN statement. It then creates a Common Table Expression (CTE) named RecentPurchases to count the number of purchases for each product in the last quarter. Another CTE named RankedProducts is created to rank these products by their purchase count in descending order. Finally, it selects the top 10 products based on their rank and commits the transaction."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find the top 5 most viewed TV shows and their average rating in each age demographic bracket.,"CREATE TABLE TVShows (ShowID INT PRIMARY KEY, ShowName VARCHAR(50)); INSERT INTO TVShows (ShowID, ShowName) VALUES (1, 'Breaking Bad'), (2, 'Friends'), (3, 'The Crown'), (4, 'The Office'), (5, 'Money Heist'); CREATE TABLE Viewership (ViewerID INT, ShowID INT, AgeDemographic VARCHAR(50), ViewCount INT, AvgRating DECIMAL); INSERT INTO Viewership (ViewerID, ShowID, AgeDemographic, ViewCount, AvgRating) VALUES (1, 1, '18-24', 100000, 9.5), (2, 2, '25-34', 200000, 8.7), (3, 3, '35-44', 150000, 8.9), (4, 4, '45-54', 180000, 9.2), (5, 5, '55+', 120000, 8.8);","WITH RankedShows AS (SELECT AgeDemographic, ShowName, ViewCount, AvgRating, RANK() OVER (PARTITION BY AgeDemographic ORDER BY ViewCount DESC) AS Rank FROM Viewership INNER JOIN TVShows ON Viewership.ShowID = TVShows.ShowID) SELECT AgeDemographic, ShowName, ViewCount, AvgRating FROM RankedShows WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank TV shows based on their view count within each age demographic in descending order. It then selects the top 5 most viewed shows in each age demographic using the RANK function. The average rating of each show is also displayed.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert a new customer preference for a specific hotel and then update the customer preference rating for all customers who have visited this hotel in the past year.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), Email VARCHAR(100)); CREATE TABLE CustomerPreferences (PreferenceID INT PRIMARY KEY, CustomerID INT, HotelID INT, PreferenceRating DECIMAL, CONSTRAINT FK_CustomerID FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID), CONSTRAINT FK_HotelID FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID)); CREATE TABLE Visits (VisitID INT PRIMARY KEY, CustomerID INT, HotelID INT, VisitDate DATE, CONSTRAINT FK_CustomerID_Visits FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID), CONSTRAINT FK_HotelID_Visits FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","INSERT INTO CustomerPreferences (PreferenceID, CustomerID, HotelID, PreferenceRating) VALUES (101, 1, 2, 4.5); WITH RecentVisits AS (SELECT CustomerID FROM Visits WHERE HotelID = 2 AND VisitDate >= DATEADD(YEAR, -1, GETDATE())) UPDATE CustomerPreferences SET PreferenceRating = 4.5 WHERE CustomerID IN (SELECT CustomerID FROM RecentVisits) AND HotelID = 2;","The query first inserts a new customer preference for a particular hotel into the CustomerPreferences table. It then uses a common table expression (CTE) to find all customers who have visited this hotel in the past year. Finally, it updates the preference rating for these customers in the CustomerPreferences table."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a transaction that updates the quantity of maize in the supply chain table for a specific supplier and rolls back if it tries to make quantity less than zero.,"CREATE TABLE SupplyChain (SupplierID INT PRIMARY KEY, Crop VARCHAR(50), Quantity DECIMAL); INSERT INTO SupplyChain (SupplierID, Crop, Quantity) VALUES (1, 'Maize', 1000), (2, 'Wheat', 500), (3, 'Sorghum', 800); CREATE TABLE Suppliers (SupplierID INT PRIMARY KEY, SupplierName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Suppliers (SupplierID, SupplierName, Region) VALUES (1, 'Supplier A', 'North America'), (2, 'Supplier B', 'Europe'), (3, 'Supplier C', 'Asia');",BEGIN TRANSACTION; UPDATE SupplyChain SET Quantity = Quantity - 200 WHERE SupplierID = 1; IF (SELECT Quantity FROM SupplyChain WHERE SupplierID = 1) < 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;,"The query begins a transaction that updates the quantity of maize in the SupplyChain table for a specific supplier (SupplierID = 1). It subtracts 200 from the current quantity. If the new quantity is less than zero, the transaction is rolled back. Otherwise, the changes are committed to the database."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average treatment outcome for different age groups and genders.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(20), Gender VARCHAR(10)); CREATE TABLE TreatmentOutcomes (PatientID INT, TreatmentID INT, OutcomeScore DECIMAL, PRIMARY KEY (PatientID, TreatmentID));","SELECT AgeGroup, Gender, AVG(OutcomeScore) AS AvgOutcome FROM PatientDemographics pd JOIN TreatmentOutcomes to ON pd.PatientID = to.PatientID GROUP BY AgeGroup, Gender;","The query joins the PatientDemographics and TreatmentOutcomes tables using the PatientID. It then groups the results by AgeGroup and Gender, calculating the average OutcomeScore for each combination. The result is a report showing the average treatment outcome for different age groups and genders."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert the total sales data for the newly launched electric vehicle models and then list down the top 3 selling models in the European region.,"CREATE TABLE ElectricVehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), TotalSales INT); INSERT INTO ElectricVehicleSales (ModelID, ModelName, Region, TotalSales) VALUES (1, 'Model 3', 'Europe', 5000), (2, 'Model S', 'Europe', 4000), (3, 'Leaf', 'Europe', 3500), (4, 'Polestar', 'Europe', 3000), (5, 'i3', 'Europe', 2500);","WITH RankedSales AS (SELECT ModelName, TotalSales, DENSE_RANK() OVER (ORDER BY TotalSales DESC) AS Rank FROM ElectricVehicleSales WHERE Region = 'Europe') SELECT ModelName, TotalSales FROM RankedSales WHERE Rank <= 3;","The SQL query first creates a common table expression (CTE) named 'RankedSales' that ranks the electric vehicle models based on their total sales in descending order, specifically for the European region. Then, it retrieves the top 3 selling models from the 'RankedSales' CTE using the DENSE_RANK function."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the most recent product launches and their market performance metrics by joining product, launch, and performance tables.","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Category VARCHAR(50)); CREATE TABLE Launches (LaunchID INT PRIMARY KEY, ProductID INT, LaunchDate DATE, Region VARCHAR(50)); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, ProductID INT, Sales INT, MarketShare DECIMAL, FOREIGN KEY (ProductID) REFERENCES Products(ProductID));","SELECT P.ProductName, L.LaunchDate, L.Region, F.Sales, F.MarketShare FROM Products P INNER JOIN Launches L ON P.ProductID = L.ProductID INNER JOIN Performance F ON P.ProductID = F.ProductID WHERE L.LaunchDate = (SELECT MAX(LaunchDate) FROM Launches WHERE ProductID = P.ProductID);","The query retrieves the most recent product launches and their market performance metrics. It joins the Products table with the Launches table on ProductID using an INNER JOIN to get the launch details. Then, it further joins with the Performance table on ProductID to get sales and market share data. The subquery ensures that only the most recent launch date for each product is considered."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Begin a transaction to update the budget allocations for government projects and roll back if the total budget exceeds a specified limit.,"CREATE TABLE GovernmentProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), Department VARCHAR(50), Budget DECIMAL); CREATE TABLE BudgetAllocations (AllocationID INT PRIMARY KEY, ProjectID INT, Amount DECIMAL, CONSTRAINT FK_Project FOREIGN KEY (ProjectID) REFERENCES GovernmentProjects(ProjectID));",BEGIN TRANSACTION; UPDATE BudgetAllocations SET Amount = Amount + 5000 WHERE ProjectID = 1; IF (SELECT SUM(Amount) FROM BudgetAllocations) > 1000000 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;,"The query begins a transaction to update the budget for a specific project by increasing its allocation by 5000. It checks if the total budget exceeds 1,000,000; if it does, it rolls back the transaction, otherwise, it commits the transaction, ensuring budget constraints are adhered to."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert into the 'PublicSpending' table the projected government spending for the next fiscal year in different sectors, and then rank the sectors based on the spending in descending order.","CREATE TABLE PublicSpending (SectorID INT PRIMARY KEY, SectorName VARCHAR(50), FiscalYear INT, ProjectedSpending DECIMAL); INSERT INTO PublicSpending (SectorID, SectorName, FiscalYear, ProjectedSpending) VALUES (1, 'Healthcare', 2022, 5000000), (2, 'Education', 2022, 4000000), (3, 'Defense', 2022, 5500000), (4, 'Infrastructure', 2022, 4500000), (5, 'Social Services', 2022, 3000000);","WITH RankedSectors AS (SELECT SectorName, ProjectedSpending, DENSE_RANK() OVER (ORDER BY ProjectedSpending DESC) AS Rank FROM PublicSpending WHERE FiscalYear = 2022) SELECT SectorName, ProjectedSpending FROM RankedSectors;",The SQL statement first inserts into the 'PublicSpending' table the projected spending for different sectors for the next fiscal year. Then it creates a common table expression (CTE) to rank the sectors based on the projected spending in descending order and selects the sectors and their respective projected spending.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert data for the recent football match between Team A and Team B, and then display the top 3 players with the most goals across all the matches played so far. Also, update the total goals scored by each team in the Teams table.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT); CREATE TABLE Matches (MatchID INT PRIMARY KEY, TeamA_ID INT, TeamB_ID INT, MatchDate DATE); CREATE TABLE Goals (GoalID INT PRIMARY KEY, MatchID INT, PlayerID INT, GoalTime TIME); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), TotalGoals INT); INSERT INTO Matches (MatchID, TeamA_ID, TeamB_ID, MatchDate) VALUES (1, 1, 2, '2022-01-01'); INSERT INTO Players (PlayerID, PlayerName, TeamID) VALUES (1, 'Player 1', 1), (2, 'Player 2', 2), (3, 'Player 3', 1), (4, 'Player 4', 2);","INSERT INTO Goals (GoalID, MatchID, PlayerID, GoalTime) VALUES (1, 1, 1, '00:15:00'), (2, 1, 2, '00:30:00'), (3, 1, 3, '00:45:00'); UPDATE Teams SET TotalGoals = (SELECT COUNT(*) FROM Goals INNER JOIN Players ON Goals.PlayerID = Players.PlayerID WHERE Teams.TeamID = Players.TeamID); WITH TopScorers AS (SELECT PlayerName, COUNT(*) AS Goals FROM Players INNER JOIN Goals ON Players.PlayerID = Goals.PlayerID GROUP BY PlayerName) SELECT TOP 3 * FROM TopScorers ORDER BY Goals DESC;","The query first inserts goal data for the recent match into the Goals table. It then updates the total number of goals scored by each team in the Teams table by counting the number of goals scored by the players belonging to each team. Finally, the query creates a common table expression (CTE) to calculate the total number of goals scored by each player, and selects the top 3 players with the most goals."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that shows the emerging technology companies that have both patents and investments, and then display the companies that have patents but no investments.","CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyName VARCHAR(100), PatentTitle VARCHAR(200)); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, CompanyName VARCHAR(100), InvestmentAmount DECIMAL);",CREATE TABLE CompaniesWithPatentsNoInvestments AS SELECT CompanyName FROM Patents EXCEPT SELECT CompanyName FROM Investments; SELECT * FROM CompaniesWithPatentsNoInvestments;,"The query first creates a new table called CompaniesWithPatentsNoInvestments, which includes only those companies that have patents but no investments by using the EXCEPT set operation. It then selects all rows from this new table to display the companies."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Provide a breakdown of the top 5 athletes with the highest total revenue from sponsorships and championship winnings, for each sport category, after accounting for all their expenses. Begin a new transaction for this report generation and make sure to rollback in case of any error.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), SportCategory VARCHAR(50)); CREATE TABLE Revenues (AthleteID INT, Sponsorship DECIMAL, Championship DECIMAL); CREATE TABLE Expenses (AthleteID INT, ExpenseAmount DECIMAL); INSERT INTO Athletes (AthleteID, AthleteName, SportCategory) VALUES (1, 'Michael Phelps', 'Swimming'), (2, 'Serena Williams', 'Tennis'), (3, 'Lionel Messi', 'Football'), (4, 'Roger Federer', 'Tennis'), (5, 'LeBron James', 'Basketball'); INSERT INTO Revenues (AthleteID, Sponsorship, Championship) VALUES (1, 2000000, 500000), (2, 5000000, 3000000), (3, 10000000, 5000000), (4, 4000000, 2000000), (5, 8000000, 4000000); INSERT INTO Expenses (AthleteID, ExpenseAmount) VALUES (1, 1000000), (2, 1500000), (3, 2500000), (4, 1000000), (5, 2000000);","BEGIN TRANSACTION; WITH RevenueExpenses AS (SELECT A.AthleteID, A.AthleteName, A.SportCategory, (R.Sponsorship + R.Championship - E.ExpenseAmount) AS TotalEarnings FROM Athletes A INNER JOIN Revenues R ON A.AthleteID=R.AthleteID INNER JOIN Expenses E ON A.AthleteID=E.AthleteID), RankedAthletes AS (SELECT AthleteName, SportCategory, TotalEarnings, DENSE_RANK() OVER (PARTITION BY SportCategory ORDER BY TotalEarnings DESC) AS Rank FROM RevenueExpenses) SELECT AthleteName, SportCategory, TotalEarnings FROM RankedAthletes WHERE Rank <= 5; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The SQL query begins a new transaction and creates two common table expressions (CTEs). The first CTE, RevenueExpenses, combines data from the Athletes, Revenues, and Expenses tables to calculate the total earnings for each athlete after deducting their expenses. The second CTE, RankedAthletes, assigns a rank to each athlete within their respective sport category based on these total earnings in descending order. The query then selects the top 5 athletes from each sport category based on these rankings. If any error occurs during this process, the transaction is rolled back. Otherwise, it is committed."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a new transaction to add the carbon emission data of different regions. Then, identify the top 3 regions with the highest decrease in carbon emissions and the top 3 with the highest increase in carbon emissions.","CREATE TABLE CarbonEmissions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Year INT, Emission DECIMAL); INSERT INTO CarbonEmissions (RegionID, RegionName, Year, Emission) VALUES (1, 'North America', 2019, 5000.5), (2, 'Europe', 2019, 4000.0), (3, 'Asia', 2019, 4500.0), (4, 'North America', 2020, 4800.0), (5, 'Europe', 2020, 4200.0), (6, 'Asia', 2020, 4600.0);","BEGIN; INSERT INTO CarbonEmissions (RegionID, RegionName, Year, Emission) VALUES (7, 'South America', 2019, 3000.0), (8, 'South America', 2020, 3200.0); COMMIT; WITH RankedRegions AS (SELECT RegionName, Year, Emission, LAG(Emission) OVER (PARTITION BY RegionName ORDER BY Year) AS PrevEmission, (Emission - LAG(Emission) OVER (PARTITION BY RegionName ORDER BY Year)) AS Diff FROM CarbonEmissions) SELECT RegionName, MAX(Diff) AS MaxIncrease FROM RankedRegions WHERE Diff IS NOT NULL GROUP BY RegionName ORDER BY MaxIncrease DESC LIMIT 3 UNION ALL SELECT RegionName, MIN(Diff) AS MaxDecrease FROM RankedRegions WHERE Diff IS NOT NULL GROUP BY RegionName ORDER BY MaxDecrease ASC LIMIT 3;","The query first starts a new transaction to insert additional data for South America into the CarbonEmissions table. Once the insertions are completed, the transaction is committed. Next, the query creates a common table expression (CTE) to calculate the yearly difference in emissions for each region. Using the LAG function, it subtracts the previous year's emissions from the current year's to calculate the difference. Finally, it selects the top 3 regions with the highest increase and the highest decrease in carbon emissions using UNION ALL, and orders the results by the size of the increase or decrease."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table to store fashion brand sustainability ratings based on carbon footprint, waste management, and water use. Then, retrieve the top 5 brands with the highest sustainability score for each category.","CREATE TABLE BrandSustainability (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), CarbonFootprintRating DECIMAL, WasteManagementRating DECIMAL, WaterUseRating DECIMAL); INSERT INTO BrandSustainability (BrandID, BrandName, CarbonFootprintRating, WasteManagementRating, WaterUseRating) VALUES (1, 'Brand A', 85.0, 90.0, 80.0), (2, 'Brand B', 80.0, 85.0, 82.0), (3, 'Brand C', 89.0, 88.0, 78.0), (4, 'Brand D', 92.0, 90.0, 80.5), (5, 'Brand E', 87.0, 80.0, 85.0);","WITH RankedBrands AS (SELECT BrandName, CarbonFootprintRating, DENSE_RANK() OVER (ORDER BY CarbonFootprintRating DESC) AS CarbonRank, WasteManagementRating, DENSE_RANK() OVER (ORDER BY WasteManagementRating DESC) AS WasteRank, WaterUseRating, DENSE_RANK() OVER (ORDER BY WaterUseRating DESC) AS WaterRank FROM BrandSustainability) SELECT BrandName, CarbonFootprintRating, WasteManagementRating, WaterUseRating FROM RankedBrands WHERE CarbonRank <= 5 OR WasteRank <= 5 OR WaterRank <= 5;","The query first creates a common table expression (CTE) to rank the fashion brands based on their sustainability ratings in each category (carbon footprint, waste management, and water use). The ranking is done in descending order with the highest rating coming first. The DENSE_RANK function is used to assign the rank. After the ranking, the query retrieves the top 5 brands in each sustainability category. The brands are selected if they appear in the top 5 of any category."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average carbon emissions per country for the past decade, including only countries with emissions above the global average.","CREATE TABLE CarbonEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, Emissions DECIMAL); CREATE TABLE GlobalEmissions (Year INT PRIMARY KEY, GlobalAvgEmissions DECIMAL);","WITH AvgEmissions AS (SELECT CountryName, AVG(Emissions) AS AvgEmission FROM CarbonEmissions WHERE Year BETWEEN YEAR(CURDATE()) - 10 AND YEAR(CURDATE()) GROUP BY CountryName), HighEmitters AS (SELECT AE.CountryName, AE.AvgEmission FROM AvgEmissions AE JOIN GlobalEmissions GE ON AE.AvgEmission > GE.GlobalAvgEmissions WHERE GE.Year = YEAR(CURDATE())) SELECT CountryName, AvgEmission FROM HighEmitters;","The query first calculates the average emissions for each country over the past decade. Then, it filters out the countries whose average emissions are below the global average for the current year. Finally, it selects the country names and their respective average emissions from the filtered results."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average carbon dioxide emissions for different countries, and also the projects initiated by those countries to reduce the emission, then display the top 5 countries with most such projects.","CREATE TABLE CarbonEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), AvgCO2Emissions DECIMAL); INSERT INTO CarbonEmissions (CountryID, CountryName, AvgCO2Emissions) VALUES (1, 'China', 10.5), (2, 'USA', 9.0), (3, 'India', 7.0), (4, 'Russia', 8.7), (5, 'Japan', 6.0); CREATE TABLE EmissionProjects (ProjectID INT PRIMARY KEY, CountryID INT, ProjectName VARCHAR(50), ProjectImpact DECIMAL); INSERT INTO EmissionProjects (ProjectID, CountryID, ProjectName, ProjectImpact) VALUES (1, 1, 'Clean Air Initiative', 3.5), (2, 2, 'Green Energy Project', 2.0), (3, 3, 'Emission Control Project', 1.5), (4, 4, 'Air Quality Improvement Project', 2.7), (5, 5, 'Sustainable Energy Project', 2.0);","WITH ProjectCounts AS (SELECT CountryName, COUNT(ProjectID) AS NumProjects FROM CarbonEmissions INNER JOIN EmissionProjects ON CarbonEmissions.CountryID = EmissionProjects.CountryID GROUP BY CountryName) SELECT CountryName, NumProjects FROM ProjectCounts ORDER BY NumProjects DESC LIMIT 5;","The query first creates a common table expression (CTE) to join the CarbonEmissions and EmissionProjects tables on CountryID and count the number of projects for each country. It then selects the country name and number of projects from the CTE and orders the results by the number of projects in descending order, limiting the output to the top 5."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert a new patient demographic data, update their medical history, and delete an incorrect treatment protocol.","CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Gender VARCHAR(10), Age INT, Ethnicity VARCHAR(50)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(50), YearDiagnosed INT); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, PatientID INT, Treatment VARCHAR(100), SideEffects VARCHAR(100)); INSERT INTO PatientDemographics (PatientID, FirstName, LastName, Gender, Age, Ethnicity) VALUES (1001, 'John', 'Doe', 'Male', 55, 'Asian');","INSERT INTO PatientDemographics (PatientID, FirstName, LastName, Gender, Age, Ethnicity) VALUES (1002, 'Jane', 'Doe', 'Female', 50, 'Caucasian'); UPDATE MedicalHistory SET YearDiagnosed = 2005 WHERE PatientID = 1001 AND Diagnosis = 'Diabetes'; DELETE FROM TreatmentProtocols WHERE PatientID = 1001 AND Treatment = 'Incorrect Protocol';","The SQL statements first insert new demographic data for two patients into the PatientDemographics table. Then, the medical history of a patient is updated in the MedicalHistory table, specifically the year a patient was diagnosed with a certain condition. Finally, an incorrect treatment protocol for a patient is deleted from the TreatmentProtocols table."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Retrieve the average yield for wheat crops in different regions.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Wheat', 'North America', 3.5), (2, 'Wheat', 'Europe', 4.1), (3, 'Wheat', 'Asia', 2.9), (4, 'Wheat', 'Africa', 2.7);","SELECT Region, AVG(Yield) AS AvgYield FROM CropYields WHERE CropName='Wheat' GROUP BY Region;",The SQL query selects the regions and calculates the average yield for wheat crops in each region. It uses the GROUP BY clause to group the data by region and the AVG function to calculate the average yield for each group.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,data retrieval: basic data fetching queries,Find the top 10 selling cars in Europe and Asia for the year 2020.,"CREATE TABLE VehicleSales (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT, Year INT); INSERT INTO VehicleSales (VehicleID, ModelName, Region, Sales, Year) VALUES (1, 'Model S', 'Europe', 20000, 2020), (2, 'Model 3', 'Asia', 18000, 2020), (3, 'Leaf', 'Europe', 15000, 2020), (4, 'Bolt', 'Asia', 17000, 2020), (5, 'Prius', 'Europe', 12000, 2020);","WITH RankedSales AS (SELECT ModelName, Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS Rank FROM VehicleSales WHERE Region IN ('Europe', 'Asia') AND Year = 2020) SELECT ModelName, Sales FROM RankedSales WHERE Rank <= 10;","The SQL query first creates a Common Table Expression (CTE) named RankedSales that selects the ModelName and Sales from the VehicleSales table for the regions Europe and Asia for the year 2020. It ranks them based on Sales in descending order using DENSE_RANK. Then, it selects the ModelName and Sales from the CTE where the rank is less than or equal to 10, effectively returning the top 10 selling cars in Europe and Asia for 2020."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Show me the top 5 best selling products in the Women's Apparel category from Europe region in 2021.,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Category VARCHAR(50)); INSERT INTO Products (ProductID, ProductName, Category) VALUES (1, 'Dress', 'Women''s Apparel'), (2, 'Skirt', 'Women''s Apparel'), (3, 'Blouse', 'Women''s Apparel'), (4, 'Jeans', 'Women''s Apparel'), (5, 'T-Shirt', 'Men''s Apparel'); CREATE TABLE Sales (SalesID INT PRIMARY KEY, ProductID INT, Region VARCHAR(50), Year INT, UnitsSold INT); INSERT INTO Sales (SalesID, ProductID, Region, Year, UnitsSold) VALUES (1, 1, 'Europe', 2021, 10000), (2, 2, 'Europe', 2021, 12000), (3, 3, 'Europe', 2021, 11000), (4, 4, 'Europe', 2021, 10500), (5, 5, 'Europe', 2021, 9000);","SELECT TOP 5 P.ProductName, S.UnitsSold FROM Products AS P INNER JOIN Sales AS S ON P.ProductID = S.ProductID WHERE P.Category = 'Women''s Apparel' AND S.Region = 'Europe' AND S.Year = 2021 ORDER BY S.UnitsSold DESC;","The query first joins the Products and Sales tables on the ProductID column. It then filters the resulting table for rows where the product Category is 'Women's Apparel', the sales Region is 'Europe', and the sale Year is 2021. Finally, it orders the result by the UnitsSold column in descending order and selects the top 5 rows, providing the product names and units sold for the top 5 products in the Women's Apparel category in Europe in 2021."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the attendance details for different sports events across various regions, and then show the top 5 sports events with the highest attendance in North America.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), Region VARCHAR(50), Attendance INT); INSERT INTO SportsEvents (EventID, EventName, Region, Attendance) VALUES (1, 'Super Bowl', 'North America', 75000), (2, 'Wimbledon', 'Europe', 45000), (3, 'Olympics', 'Asia', 80000), (4, 'Cricket World Cup', 'Asia', 60000), (5, 'World Cup', 'Europe', 70000), (6, 'NBA Finals', 'North America', 20000), (7, 'Stanley Cup', 'North America', 18000);","WITH RankedEvents AS (SELECT EventName, Attendance, DENSE_RANK() OVER (ORDER BY Attendance DESC) AS Rank FROM SportsEvents WHERE Region = 'North America') SELECT EventName, Attendance FROM RankedEvents WHERE Rank <= 5;","This query first creates a common table expression (CTE) to rank the sports events based on their attendance in descending order, but only for events in North America. It then selects the top 5 events with the highest attendance using the DENSE_RANK function."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average treatment success rate for different medical conditions, and then display the top 3 most successful treatments.","CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), Location VARCHAR(100)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES PatientDemographics(PatientID)); CREATE TABLE TreatmentProtocols (TreatmentID INT PRIMARY KEY, Condition VARCHAR(100), TreatmentName VARCHAR(100)); CREATE TABLE TreatmentOutcomes (OutcomeID INT PRIMARY KEY, TreatmentID INT, PatientID INT, SuccessRate DECIMAL, FOREIGN KEY (TreatmentID) REFERENCES TreatmentProtocols(TreatmentID), FOREIGN KEY (PatientID) REFERENCES PatientDemographics(PatientID));","WITH SuccessRates AS (SELECT TreatmentName, AVG(SuccessRate) AS AvgSuccessRate FROM TreatmentOutcomes TO JOIN TreatmentProtocols TP ON TO.TreatmentID = TP.TreatmentID GROUP BY TreatmentName) SELECT TreatmentName, AvgSuccessRate FROM SuccessRates ORDER BY AvgSuccessRate DESC LIMIT 3;",The query creates a common table expression (CTE) to calculate the average success rate for each treatment by joining the TreatmentOutcomes and TreatmentProtocols tables. It then selects and displays the top 3 treatments with the highest average success rate.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Show me the 5 most booked hotels in the last month.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, BookingDate DATE); INSERT INTO Hotels (HotelID, HotelName, Region) VALUES (1, 'Hotel California', 'North America'), (2, 'Hotel Europa', 'Europe'), (3, 'Asia Suites', 'Asia'), (4, 'Savannah Sands', 'Africa'), (5, 'Outback Oasis', 'Australia'); INSERT INTO Bookings (BookingID, HotelID, CustomerID, BookingDate) VALUES (1, 1, 100, CURDATE() - INTERVAL 3 DAY), (2, 2, 101, CURDATE() - INTERVAL 10 DAY), (3, 1, 102, CURDATE() - INTERVAL 15 DAY), (4, 3, 103, CURDATE() - INTERVAL 20 DAY), (5, 4, 104, CURDATE() - INTERVAL 25 DAY), (6, 5, 105, CURDATE() - INTERVAL 30 DAY), (7, 1, 106, CURDATE() - INTERVAL 35 DAY);","SELECT h.HotelName, COUNT(b.BookingID) AS TotalBookings FROM Hotels h INNER JOIN Bookings b ON h.HotelID = b.HotelID WHERE b.BookingDate > CURDATE() - INTERVAL 1 MONTH GROUP BY h.HotelName ORDER BY TotalBookings DESC LIMIT 5;","The query selects from the Hotels and Bookings tables. It then joins these two tables based on the HotelID. The WHERE clause filters out bookings that are older than 1 month. Then it groups the results by the HotelName and counts the number of bookings for each hotel. Finally, it orders the results in descending order and only shows the top 5 hotels with the most bookings."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,common table expressions,data retrieval: basic data fetching queries,Identify the top 5 hotels in Europe based on the number of bookings in the last year.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, Region) VALUES (1, 'Hotel Paris', 'Europe'), (2, 'Hotel London', 'Europe'), (3, 'Hotel Madrid', 'Europe'), (4, 'Hotel Berlin', 'Europe'), (5, 'Hotel Rome', 'Europe'); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, BookingDate DATE); INSERT INTO Bookings (BookingID, HotelID, BookingDate) VALUES (1, 1, '2020-06-15'), (2, 1, '2020-08-20'), (3, 2, '2020-07-30'), (4, 2, '2020-09-10'), (5, 3, '2020-10-05');","WITH YearlyBookings AS (SELECT HotelID, COUNT(*) AS NumberOfBookings FROM Bookings WHERE BookingDate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY HotelID) SELECT H.HotelName, B.NumberOfBookings FROM YearlyBookings B INNER JOIN Hotels H ON B.HotelID = H.HotelID WHERE H.Region = 'Europe' ORDER BY B.NumberOfBookings DESC LIMIT 5;","The query starts by creating a common table expression (CTE) that calculates the total number of bookings for each hotel in the last year. The CTE is then joined with the Hotels table to get the hotel names. The result is filtered to include only hotels in Europe and ordered by the number of bookings in descending order. Finally, the top 5 hotels are selected using the LIMIT clause."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the patient records to set all patients over the age of 65 who have completed their treatment protocols to 'Completed' in the TreatmentStatus column.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentName VARCHAR(255), TreatmentStatus VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",UPDATE Treatments T INNER JOIN Patients P ON T.PatientID = P.PatientID SET T.TreatmentStatus = 'Completed' WHERE P.Age > 65 AND T.TreatmentStatus IS NOT NULL;,The query updates the TreatmentStatus column in the Treatments table to 'Completed' for all patients who are over the age of 65 and have a non-null TreatmentStatus. It uses an INNER JOIN to combine the Patients and Treatments tables based on the PatientID column.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects",Create a table to store movie ratings for different demographics and then retrieve a list of the top 10 highest rated movies in 2020 among teenagers.,"CREATE TABLE MovieRatings (MovieID INT PRIMARY KEY, MovieName VARCHAR(100), Year INT, TeenRating DECIMAL, AdultRating DECIMAL); INSERT INTO MovieRatings (MovieID, MovieName, Year, TeenRating, AdultRating) VALUES (1, 'Movie A', 2020, 8.5, 7.2), (2, 'Movie B', 2020, 9.0, 8.2), (3, 'Movie C', 2020, 7.5, 8.9), (4, 'Movie D', 2020, 9.2, 6.9), (5, 'Movie E', 2020, 8.9, 7.0);","WITH TeenTopMovies AS (SELECT MovieName, TeenRating, RANK() OVER (ORDER BY TeenRating DESC) AS Rank FROM MovieRatings WHERE Year = 2020) SELECT MovieName, TeenRating FROM TeenTopMovies WHERE Rank <= 10;",The query creates a common table expression (CTE) to rank movies based on their rating among teenagers in descending order for the year 2020. It then selects the top 10 highest rated movies using the RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on the average crop yield per region for the last five years.,"CREATE TABLE CropYields (Region VARCHAR(50), Year INT, CropType VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (Region, Year, CropType, Yield) VALUES ('North America', 2018, 'Wheat', 500.5), ('Europe', 2018, 'Wheat', 480.0), ('Asia', 2019, 'Rice', 650.0), ('Africa', 2020, 'Maize', 300.0), ('South America', 2021, 'Soybean', 200.0);","SELECT Region, AVG(Yield) AS AvgYield FROM CropYields WHERE Year BETWEEN 2018 AND 2022 GROUP BY Region;",The query selects the average crop yield per region for the last five years by filtering the data to include only years between 2018 and 2022. It then groups the results by region and calculates the average yield for each region.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the detailed performance data of soccer players across various matches, and then display the top 5 players with the highest goal to game ratio.","CREATE TABLE PlayerPerf (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), MatchID INT, GoalsScored INT); INSERT INTO PlayerPerf (PlayerID, PlayerName, MatchID, GoalsScored) VALUES (1, 'Ronaldo', 101, 3), (2, 'Messi', 102, 2), (3, 'Neymar', 103, 1), (4, 'Mbappe', 104, 4), (5, 'Lewandowski', 105, 2); CREATE TABLE MatchData (MatchID INT PRIMARY KEY, MatchDate DATE, Stadium VARCHAR(50), Attendance INT); INSERT INTO MatchData (MatchID, MatchDate, Stadium, Attendance) VALUES (101, '2022-02-01', 'Stadium A', 50000), (102, '2022-02-02', 'Stadium B', 60000), (103, '2022-02-03', 'Stadium C', 55000), (104, '2022-02-04', 'Stadium D', 52000), (105, '2022-02-05', 'Stadium E', 53000);","WITH PlayerMatchCount AS (SELECT PlayerID, PlayerName, COUNT(MatchID) AS TotalMatches, SUM(GoalsScored) AS TotalGoals FROM PlayerPerf GROUP BY PlayerID, PlayerName) SELECT PlayerName, TotalGoals/TotalMatches AS GoalGameRatio FROM PlayerMatchCount ORDER BY GoalGameRatio DESC LIMIT 5;","The query first creates a common table expression (CTE) to calculate the total number of matches and total goals for each player using the GROUP BY clause. It then calculates the goal to game ratio for each player and orders the players by this ratio in descending order. Finally, it limits the results to the top 5 players."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Identify the top 5 countries with the highest average Carbon Dioxide (CO2) emissions per capita over the last decade, and display along with their respective continent.","CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, PerCapitaEmission DECIMAL, Continent VARCHAR(50)); INSERT INTO CO2Emissions (Country, Year, PerCapitaEmission, Continent) VALUES ('USA', 2012, 15.0, 'North America'), ('China', 2012, 7.1, 'Asia'), ('Germany', 2012, 9.1, 'Europe'), ('India', 2012, 1.8, 'Asia'), ('Brazil', 2012, 2.2, 'South America');","WITH AverageEmissions AS (SELECT Country, Continent, AVG(PerCapitaEmission) AS AvgEmission FROM CO2Emissions WHERE Year > 2010 GROUP BY Country, Continent) SELECT Country, Continent, AvgEmission FROM AverageEmissions ORDER BY AvgEmission DESC LIMIT 5;","The SQL query first creates a Common Table Expression (CTE) named 'AverageEmissions' that groups the data by Country and Continent, and calculates the average Per Capita CO2 Emissions over the last decade. It then selects the top 5 countries with the highest average emissions and their respective continents, ordered in descending order of average emissions."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 hotels with the highest total revenue in the last quarter, excluding cancelled bookings.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, BookingDate DATE, TotalRevenue DECIMAL, Status VARCHAR(20)); INSERT INTO Hotels (HotelID, HotelName, Region) VALUES (1, 'Hotel Paradise', 'Europe'), (2, 'Ritz', 'North America'), (3, 'Sheraton', 'Asia'), (4, 'Marriott', 'Europe'), (5, 'Hilton', 'North America'); INSERT INTO Bookings (BookingID, HotelID, CustomerID, BookingDate, TotalRevenue, Status) VALUES (1, 1, 100, '2022-01-01', 2000, 'Confirmed'), (2, 2, 101, '2022-01-10', 1500, 'Confirmed'), (3, 3, 102, '2022-01-20', 3000, 'Cancelled'), (4, 4, 103, '2022-02-01', 2500, 'Confirmed'), (5, 5, 104, '2022-02-10', 3500, 'Confirmed');","WITH Revenue AS (SELECT HotelID, SUM(TotalRevenue) as Revenue FROM Bookings WHERE Status = 'Confirmed' AND BookingDate >= DATEADD(quarter, -1, GETDATE()) GROUP BY HotelID) SELECT TOP 5 h.HotelName, r.Revenue FROM Revenue r JOIN Hotels h ON h.HotelID = r.HotelID ORDER BY r.Revenue DESC;","The query first creates a Common Table Expression (CTE) named 'Revenue' that calculates the total revenue for each hotel in the last quarter, excluding bookings with status 'Cancelled'. It then joins this CTE with the Hotels table to get the hotel names and finally selects the top 5 hotels with the highest revenue."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects",Create a table to track hotel bookings and then display top 5 hotels with the highest number of bookings.,"CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, HotelName VARCHAR(50), BookingDate DATE, NumberOfGuests INT); INSERT INTO HotelBookings (BookingID, HotelName, BookingDate, NumberOfGuests) VALUES (1, 'Hotel California', '2020-01-01', 4), (2, 'Hotel California', '2020-01-02', 3), (3, 'Ritz Carlton', '2020-01-03', 2), (4, 'Marriott', '2020-01-04', 5), (5, 'Hyatt', '2020-01-05', 2);","WITH HotelBookingsCount AS (SELECT HotelName, COUNT(*) as TotalBookings FROM HotelBookings GROUP BY HotelName) SELECT HotelName, TotalBookings FROM HotelBookingsCount ORDER BY TotalBookings DESC LIMIT 5;","The SQL query begins with a Common Table Expression (CTE) that groups all bookings by hotel name, and counts the number of bookings each hotel has. The main query then selects the hotel name and total bookings from the CTE, orders them in descending order by the total bookings, and limits the output to the top 5 hotels with the most bookings."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,"Show the total sales and average price of electric vehicles by region for the last year, and then display the data in a pivot table format.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50), Manufacturer VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice, Region) VALUES (1, 101, '2022-05-15', 30000, 'North America'), (2, 102, '2022-06-10', 32000, 'Europe'), (3, 101, '2022-07-20', 31000, 'Asia'), (4, 103, '2022-08-05', 45000, 'Europe'), (5, 104, '2022-09-30', 22000, 'North America'); INSERT INTO Vehicles (VehicleID, ModelName, Type, Manufacturer) VALUES (101, 'Model S', 'Electric', 'Tesla'), (102, 'Model 3', 'Electric', 'Tesla'), (103, 'Leaf', 'Electric', 'Nissan'), (104, 'Bolt', 'Electric', 'Chevrolet');","SELECT Region, SUM(SalePrice) AS TotalSales, AVG(SalePrice) AS AvgPrice FROM VehicleSales WHERE VehicleID IN (SELECT VehicleID FROM Vehicles WHERE Type = 'Electric') AND SaleDate BETWEEN DATEADD(YEAR, -1, GETDATE()) AND GETDATE() GROUP BY Region PIVOT (SUM(TotalSales) FOR Region IN ([North America], [Europe], [Asia]));","The query first filters the sales data to include only electric vehicles sold in the last year. It then computes the total sales and average sale price of these vehicles by region. Finally, the query pivots the data to display the regions as columns with their corresponding total sales."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Insert a new patient record and calculate the average treatment cost for patients with the same condition, then display the average cost for each condition.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), Condition VARCHAR(50), TreatmentCost DECIMAL); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentDate DATE, Cost DECIMAL, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","INSERT INTO Patients (PatientID, Name, Age, Gender, Condition, TreatmentCost) VALUES (101, 'John Doe', 45, 'Male', 'Diabetes', 500); WITH ConditionCosts AS (SELECT Condition, AVG(TreatmentCost) AS AvgCost FROM Patients GROUP BY Condition) SELECT Condition, AvgCost FROM ConditionCosts;","The query begins by inserting a new patient record with specific details into the Patients table. It then creates a common table expression (CTE) named ConditionCosts that calculates the average treatment cost for each medical condition by using the AVG function grouped by the Condition column. Finally, it selects and displays the average treatment cost for each condition from the CTE."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that logs the number of times a movie has been streamed in different countries, then display the top 10 most streamed movies in the United States.","CREATE TABLE MovieStreaming (StreamID INT PRIMARY KEY, MovieTitle VARCHAR(100), Country VARCHAR(50), StreamCount INT); INSERT INTO MovieStreaming (StreamID, MovieTitle, Country, StreamCount) VALUES (1, 'Inception', 'United States', 10000), (2, 'Avengers', 'United States', 12000), (3, 'Titanic', 'Canada', 8000), (4, 'Frozen', 'United States', 15000), (5, 'Joker', 'United Kingdom', 9500), (6, 'Parasite', 'South Korea', 20000), (7, 'Avatar', 'United States', 13000), (8, 'Interstellar', 'Canada', 7000), (9, 'The Dark Knight', 'United Kingdom', 10500), (10, 'Godfather', 'United States', 11000);","WITH RankedMovies AS (SELECT MovieTitle, StreamCount, RANK() OVER (ORDER BY StreamCount DESC) AS Rank FROM MovieStreaming WHERE Country = 'United States') SELECT MovieTitle, StreamCount FROM RankedMovies WHERE Rank <= 10;",The query creates a common table expression (CTE) to rank movies based on their streaming count in the United States in descending order. It then selects the top 10 most streamed movies using the RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total number of innovation projects started in the last year by different companies and list those companies that have initiated more than 10 projects.,"CREATE TABLE InnovationProjects (ProjectID INT PRIMARY KEY, CompanyName VARCHAR(100), ProjectTitle VARCHAR(100), StartDate DATE); CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Industry VARCHAR(50));","SELECT CompanyName, COUNT(ProjectID) AS TotalProjects FROM InnovationProjects WHERE YEAR(StartDate) = YEAR(CURRENT_DATE) - 1 GROUP BY CompanyName HAVING COUNT(ProjectID) > 10;","The query selects the company names and counts the number of innovation projects they started in the last year. It groups the results by company name and uses the HAVING clause to filter out companies that have initiated more than 10 projects. The YEAR function is used to extract the year from the StartDate, and CURRENT_DATE is used to get the current date."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Find the top 10 most popular movies in North America and Europe, and identify which of these are popular in both regions.","CREATE TABLE MoviePopularity (MovieID INT PRIMARY KEY, MovieName VARCHAR(50), Region VARCHAR(50), ViewCount INT); INSERT INTO MoviePopularity (MovieID, MovieName, Region, ViewCount) VALUES (1, 'Movie A', 'North America', 1000), (2, 'Movie B', 'Europe', 500), (3, 'Movie C', 'North America', 1200), (4, 'Movie D', 'Europe', 700), (5, 'Movie E', 'North America', 800);","WITH NorthAmerica AS (SELECT MovieName FROM MoviePopularity WHERE Region = 'North America' ORDER BY ViewCount DESC LIMIT 10), Europe AS (SELECT MovieName FROM MoviePopularity WHERE Region = 'Europe' ORDER BY ViewCount DESC LIMIT 10) SELECT MovieName FROM NorthAmerica INTERSECT SELECT MovieName FROM Europe;","The query first creates two common table expressions (CTEs): one for the top 10 most popular movies in North America and another for the top 10 most popular movies in Europe. It then uses the INTERSECT operator to find movies that appear in both lists, effectively identifying the most popular movies in both regions."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the average annual temperature and carbon emissions for each country from the year 2000 onwards, only including countries that have both data points available.","CREATE TABLE CountryData (CountryID INT PRIMARY KEY, CountryName VARCHAR(100)); CREATE TABLE AnnualTemperature (CountryID INT, Year INT, AvgTemperature DECIMAL, FOREIGN KEY (CountryID) REFERENCES CountryData(CountryID)); CREATE TABLE CarbonEmissions (CountryID INT, Year INT, Emissions DECIMAL, FOREIGN KEY (CountryID) REFERENCES CountryData(CountryID));","SELECT c.CountryName, t.Year, t.AvgTemperature, e.Emissions FROM CountryData c INNER JOIN AnnualTemperature t ON c.CountryID = t.CountryID INNER JOIN CarbonEmissions e ON c.CountryID = e.CountryID AND t.Year = e.Year WHERE t.Year >= 2000;","The query retrieves the average annual temperature and carbon emissions for each country from the year 2000 onwards. It uses an INNER JOIN to combine the `CountryData`, `AnnualTemperature`, and `CarbonEmissions` tables, ensuring that only countries with both temperature and emissions data for each year are included. The WHERE clause filters the data to include only those records from the year 2000 onwards."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find the top 3 clothing brands that have the highest average sales in the last year, broken down by region.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Sales (SalesID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), Sales DECIMAL, Year INT); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'); INSERT INTO Sales (SalesID, BrandID, Region, Sales, Year) VALUES (1, 1, 'North America', 1200000, 2021), (2, 2, 'Europe', 950000, 2021), (3, 3, 'Asia', 875000, 2021), (4, 1, 'Europe', 1100000, 2021), (5, 2, 'North America', 980000, 2021);","WITH SalesLastYear AS (SELECT BrandID, Region, AVG(Sales) AS AvgSales FROM Sales WHERE Year = 2021 GROUP BY BrandID, Region) SELECT B.BrandName, SL.Region, SL.AvgSales FROM SalesLastYear SL INNER JOIN Brands B ON SL.BrandID = B.BrandID ORDER BY SL.AvgSales DESC LIMIT 3;","The query first creates a common table expression (CTE) to calculate the average sales of each brand in each region for the year 2021. It then joins this CTE with the Brands table to bring in the brand names, before ordering the results by average sales in descending order and limiting the output to the top 3 brands."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a transaction that inserts the yield data of a new crop into the CropYield table, and if the crop yield per acre is less than 1, rollback the transaction.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), YieldPerAcre DECIMAL); CREATE TABLE Crop (CropID INT PRIMARY KEY, CropName VARCHAR(50), SpeciesName VARCHAR(50));","BEGIN TRANSACTION; INSERT INTO CropYield (CropID, CropName, Region, YieldPerAcre) VALUES (1, 'Wheat', 'North America', 0.8); IF (SELECT YieldPerAcre FROM CropYield WHERE CropID = 1) < 1 BEGIN ROLLBACK TRANSACTION; END; COMMIT TRANSACTION;","The query begins a transaction and attempts to insert a record into the CropYield table. It then checks if the YieldPerAcre for the newly inserted record is less than 1. If it is, the transaction is rolled back, meaning the insert operation is undone. If the YieldPerAcre is not less than 1, the transaction is committed, and the insert operation is finalized."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the sales data for electric vehicles across different countries, and then select the total sales per country.","CREATE TABLE ElectricVehicleSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Country VARCHAR(50), SalesYear INT, TotalSales INT);","WITH CountrySales AS (SELECT Country, SUM(TotalSales) AS TotalCountrySales FROM ElectricVehicleSales GROUP BY Country) SELECT Country, TotalCountrySales FROM CountrySales;",The query first creates a common table expression (CTE) that groups the sales data by country and calculates the sum of total sales for each country. It then selects the country and the corresponding total sales from this CTE.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report displaying the top 3 most innovative companies in terms of average annual R&D expenditure over the past 5 years.,"CREATE TABLE Company (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100)); CREATE TABLE RnDExpenditure (ExpenditureID INT PRIMARY KEY, CompanyID INT, Year INT, Amount DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Company(CompanyID));","WITH AvgRnD AS (SELECT CompanyID, AVG(Amount) AS AvgAmount FROM RnDExpenditure WHERE Year >= YEAR(CURDATE()) - 5 GROUP BY CompanyID HAVING COUNT(DISTINCT Year) = 5) SELECT CompanyName, AvgAmount FROM AvgRnD JOIN Company ON AvgRnD.CompanyID = Company.CompanyID ORDER BY AvgAmount DESC LIMIT 3;",The query creates a common table expression (CTE) to calculate the average R&D expenditure for each company over the past 5 years and ensures that only those companies with expenditure data for all 5 years are considered. It then joins this data with the Company table to display the top 3 companies based on their average R&D expenditure.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average age of patients for each drug administered, focusing only on drugs administered to more than 100 patients.","CREATE TABLE Patient (PatientID INT PRIMARY KEY, Age INT, DrugID INT); CREATE TABLE Drug (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); INSERT INTO Patient (PatientID, Age, DrugID) VALUES (1, 65, 1), (2, 70, 1), (3, 60, 2), (4, 75, 2), (5, 80, 3); INSERT INTO Drug (DrugID, DrugName) VALUES (1, 'Drug A'), (2, 'Drug B'), (3, 'Drug C');","SELECT D.DrugName, AVG(P.Age) AS AverageAge FROM Patient P JOIN Drug D ON P.DrugID = D.DrugID GROUP BY D.DrugName HAVING COUNT(P.PatientID) > 100;","The query joins the Patient and Drug tables on the DrugID field, then groups by DrugName. The average age of patients for each drug is calculated with the AVG function. The HAVING clause filters out drugs that were administered to less than 100 patients."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the average customer ratings for different hotels across various regions and then display the top 5 highest-rated hotels.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Region VARCHAR(50)); CREATE TABLE CustomerRatings (RatingID INT PRIMARY KEY, HotelID INT, CustomerID INT, Rating INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID)); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100));","WITH AvgRatings AS (SELECT H.HotelName, H.Region, AVG(CR.Rating) AS AvgRating FROM Hotels H INNER JOIN CustomerRatings CR ON H.HotelID = CR.HotelID GROUP BY H.HotelName, H.Region), RankedHotels AS (SELECT HotelName, Region, AvgRating, DENSE_RANK() OVER (ORDER BY AvgRating DESC) AS Rank FROM AvgRatings) SELECT HotelName, Region, AvgRating FROM RankedHotels WHERE Rank <= 5;","The query first creates a common table expression (CTE) named AvgRatings that calculates the average customer rating for each hotel by joining the Hotels and CustomerRatings tables. It then creates another CTE named RankedHotels, which ranks these hotels based on their average ratings in descending order. Finally, it selects and displays the top 5 highest-rated hotels using the DENSE_RANK function."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show the total sales of electric vehicles for each manufacturer for the last quarter, sorted by total sales in descending order.","CREATE TABLE EV_Sales (Manufacturer VARCHAR(50), Model VARCHAR(50), Quarter VARCHAR(10), Sales INT); INSERT INTO EV_Sales (Manufacturer, Model, Quarter, Sales) VALUES ('Tesla', 'Model S', 'Q4', 12000), ('Tesla', 'Model 3', 'Q4', 18000), ('Nissan', 'Leaf', 'Q4', 9000), ('Chevrolet', 'Bolt', 'Q4', 7500), ('Toyota', 'Prius Prime', 'Q4', 6000);","SELECT Manufacturer, SUM(Sales) as Total_Sales FROM EV_Sales WHERE Quarter = 'Q4' GROUP BY Manufacturer ORDER BY Total_Sales DESC;","This query is aggregating the sales by manufacturer for electric vehicles for the last quarter. It uses the SUM function to calculate the total sales for each manufacturer and the GROUP BY statement to separate the data by manufacturer. The WHERE statement is used to filter the data for only the last quarter, and the ORDER BY statement is used to sort the results in descending order based on total sales."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Track the sales transactions for electric vehicles and ensure that the data is committed only if all related entries are successfully processed, otherwise, discard any changes.","CREATE TABLE ElectricVehicleSales (TransactionID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SaleAmount DECIMAL, BuyerID INT); CREATE TABLE VehicleDetails (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), Year INT, Type VARCHAR(20)); CREATE TABLE BuyerInfo (BuyerID INT PRIMARY KEY, BuyerName VARCHAR(50), BuyerContact VARCHAR(50)); CREATE TABLE TransactionDetails (TransactionID INT PRIMARY KEY, ElectricVehicleSalesID INT, Details VARCHAR(255));","BEGIN TRANSACTION; INSERT INTO ElectricVehicleSales (TransactionID, VehicleID, SaleDate, SaleAmount, BuyerID) VALUES (1, 101, '2023-10-01', 35000, 501); INSERT INTO TransactionDetails (TransactionID, ElectricVehicleSalesID, Details) VALUES (1, 1, 'First payment for Model X'); COMMIT;","The query starts a database transaction using the BEGIN TRANSACTION statement. It then inserts new records into the ElectricVehicleSales and TransactionDetails tables. If both insert operations succeed, the changes are committed to the database using the COMMIT statement. If any insert operation fails, the transaction would be rolled back (not shown explicitly but implied), ensuring data integrity by discarding any partial changes."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average score of athletes in different sports events and list those with an average score above 75. Begin the transaction and commit if successful; otherwise, rollback.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, Name VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50), Date DATE); CREATE TABLE Scores (ScoreID INT PRIMARY KEY, AthleteID INT, EventID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN TRANSACTION; WITH AvgScores AS (SELECT A.Name, E.EventName, AVG(S.Score) AS AvgScore FROM Scores S JOIN Athletes A ON S.AthleteID = A.AthleteID JOIN Events E ON S.EventID = E.EventID GROUP BY A.Name, E.EventName HAVING AVG(S.Score) > 75) SELECT A.Name, E.EventName, AvgScore FROM AvgScores; COMMIT;","The query first starts a transaction. It then creates a common table expression (CTE) named 'AvgScores' that calculates the average score of athletes in different events. It groups the results by athlete name and event name and filters out those with an average score above 75 using the HAVING clause. Finally, it selects the athlete names, event names, and their average scores. If the transaction is successful, it commits the changes; otherwise, it will rollback."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,data retrieval: basic data fetching queries,Find the total revenue generated by each type of cloud service in the year 2020.,"CREATE TABLE CloudServices (ServiceID INT PRIMARY KEY, ServiceType VARCHAR(50), LaunchDate DATE); INSERT INTO CloudServices (ServiceID, ServiceType, LaunchDate) VALUES (1, 'IaaS', '2018-06-01'), (2, 'PaaS', '2017-11-01'), (3, 'SaaS', '2019-03-01'); CREATE TABLE ServiceRevenue (RevenueID INT PRIMARY KEY, ServiceID INT, Revenue DECIMAL, RevenueDate DATE); INSERT INTO ServiceRevenue (RevenueID, ServiceID, Revenue, RevenueDate) VALUES (1, 1, 50000, '2020-04-01'), (2, 2, 75000, '2020-06-01'), (3, 3, 100000, '2020-08-01'), (4, 1, 60000, '2020-12-01'), (5, 2, 85000, '2020-12-01'), (6, 3, 120000, '2020-12-01');","WITH Revenue2020 AS (SELECT ServiceID, Revenue FROM ServiceRevenue WHERE YEAR(RevenueDate) = '2020') SELECT cs.ServiceType, SUM(r.Revenue) AS TotalRevenue FROM Revenue2020 r INNER JOIN CloudServices cs ON r.ServiceID = cs.ServiceID GROUP BY cs.ServiceType;","The SQL query first creates a common table expression (CTE) that selects service IDs and revenues from the ServiceRevenue table for the year 2020. It then joins this CTE with the CloudServices table, grouping by service type. The total revenue for each service type in 2020 is calculated using the SUM function."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the total revenue generated by each hotel chain in Europe for the last year and identify any outliers using revenue trends from previous years.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelChain VARCHAR(100), Location VARCHAR(100)); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, HotelID INT, TransactionDate DATE, Revenue DECIMAL); CREATE TABLE RevenueTrends (HotelID INT PRIMARY KEY, Year INT, AnnualRevenue DECIMAL);","BEGIN; WITH CurrentYearRevenue AS (SELECT H.HotelChain, SUM(T.Revenue) AS TotalRevenue FROM Hotels H INNER JOIN Transactions T ON H.HotelID = T.HotelID WHERE H.Location = 'Europe' AND YEAR(T.TransactionDate) = YEAR(CURDATE()) - 1 GROUP BY H.HotelChain), PreviousYearsRevenue AS (SELECT H.HotelChain, AVG(RT.AnnualRevenue) AS AvgRevenue FROM Hotels H INNER JOIN RevenueTrends RT ON H.HotelID = RT.HotelID WHERE H.Location = 'Europe' AND RT.Year < YEAR(CURDATE()) - 1 GROUP BY H.HotelChain) SELECT CYR.HotelChain, CYR.TotalRevenue, PYR.AvgRevenue FROM CurrentYearRevenue CYR INNER JOIN PreviousYearsRevenue PYR ON CYR.HotelChain = PYR.HotelChain WHERE CYR.TotalRevenue > PYR.AvgRevenue * 1.25 OR CYR.TotalRevenue < PYR.AvgRevenue * 0.75; COMMIT;","The query first begins a transaction and then calculates the total revenue for each hotel chain in Europe for the last year. It uses a common table expression (CTE) named CurrentYearRevenue to aggregate this data. Another CTE named PreviousYearsRevenue calculates the average revenue for these hotel chains over previous years. Finally, it joins these CTEs to compare the current year revenue with the average revenue from previous years and identifies hotel chains with significant deviations (outliers). The transaction is then committed."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Find out the top 5 brands that have produced the most sustainable clothing products in 2021, along with the number of sustainable products they've produced and their average customer ratings.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Products (ProductID INT PRIMARY KEY, BrandID INT, ProductType VARCHAR(50), Year INT, IsSustainable BOOLEAN, FOREIGN KEY (BrandID) REFERENCES Brands(BrandID)); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, ProductID INT, CustomerRating DECIMAL, FOREIGN KEY (ProductID) REFERENCES Products(ProductID));","WITH SustainabilityRank AS (SELECT Brands.BrandName, COUNT(Products.ProductID) AS SustainableProductCount, AVG(Ratings.CustomerRating) AS AvgRating FROM Brands INNER JOIN Products ON Brands.BrandID = Products.BrandID INNER JOIN Ratings ON Products.ProductID = Ratings.ProductID WHERE Products.IsSustainable = TRUE AND Products.Year = 2021 GROUP BY Brands.BrandName) SELECT BrandName, SustainableProductCount, AvgRating FROM SustainabilityRank ORDER BY SustainableProductCount DESC LIMIT 5;","The query first creates a common table expression (CTE) named 'SustainabilityRank' that calculates the count of sustainable products each brand has produced in 2021, as well as the average customer rating of these products. It then selects the brand name, the count of sustainable products, and the average rating from this CTE, orders the results by the count of sustainable products in descending order, and limits the results to the top 5 brands."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 vehicle models that were most frequently sold in Asia in 2021 and the top 5 vehicle models that were most frequently sold in North America in 2021. Return the intersection of these two lists.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Year INT, SalesVolume INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, Year, SalesVolume) VALUES (1, 'Model S', 'Asia', 2021, 50000), (2, 'Model 3', 'Asia', 2021, 60000), (3, 'Leaf', 'North America', 2021, 70000), (4, 'Bolt', 'North America', 2021, 80000), (5, 'Prius', 'Asia', 2021, 90000);","WITH AsiaTop AS (SELECT ModelName, SUM(SalesVolume) AS TotalSales FROM VehicleSales WHERE Region = 'Asia' AND Year = 2021 GROUP BY ModelName ORDER BY TotalSales DESC LIMIT 5), NorthAmericaTop AS (SELECT ModelName, SUM(SalesVolume) AS TotalSales FROM VehicleSales WHERE Region = 'North America' AND Year = 2021 GROUP BY ModelName ORDER BY TotalSales DESC LIMIT 5) SELECT a.ModelName FROM AsiaTop AS a INTERSECT SELECT n.ModelName FROM NorthAmericaTop AS n;","The query first creates two common table expressions (CTEs): 'AsiaTop' and 'NorthAmericaTop'. 'AsiaTop' contains the top 5 vehicle models sold in Asia in 2021, and 'NorthAmericaTop' contains the top 5 vehicle models sold in North America in 2021. Both CTEs are derived by aggregating the sales volume of each model for the respective region and year, then ordering the results in descending order of sales volume and limiting the results to the top 5. The INTERSECT operator is then used to find the intersection of the two lists, i.e., the vehicle models that appear in both the 'AsiaTop' and 'NorthAmericaTop' lists."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Provide a list of countries that have planted more than 10000 trees annually since 2010 as a part of their reforestation efforts.,"CREATE TABLE Reforestation (Country VARCHAR(50), Year INT, TreesPlanted INT); INSERT INTO Reforestation (Country, Year, TreesPlanted) VALUES ('USA', 2010, 12000), ('Brazil', 2010, 15000), ('India', 2011, 11000), ('USA', 2011, 13000), ('Brazil', 2011, 14000), ('India', 2012, 10500), ('USA', 2012, 15000), ('Brazil', 2012, 17000), ('India', 2013, 11000), ('USA', 2013, 12000), ('Brazil', 2013, 16000);",SELECT Country FROM Reforestation WHERE Year >= 2010 GROUP BY Country HAVING MIN(TreesPlanted) > 10000;,The query first filters the Reforestation table for records from 2010 onwards. It then groups the data by country. The HAVING clause is used to only include countries where the minimum number of trees planted in any given year since 2010 is more than 10000.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 countries with the highest average wheat yield in 2019 and list their respective farming practices.,"CREATE TABLE WheatYield (Country VARCHAR(50), Year INT, Yield DECIMAL); INSERT INTO WheatYield (Country, Year, Yield) VALUES ('USA', 2019, 50.5), ('Canada', 2019, 45.0), ('Russia', 2019, 48.0), ('India', 2019, 42.3), ('China', 2019, 51.0), ('Australia', 2019, 39.2); CREATE TABLE FarmingPractices (Country VARCHAR(50), Practice VARCHAR(255)); INSERT INTO FarmingPractices (Country, Practice) VALUES ('USA', 'Mechanized farming'), ('Canada', 'Mixed farming'), ('Russia', 'Intensive farming'), ('India', 'Subsistence farming'), ('China', 'Intensive farming'), ('Australia', 'Organic farming');","WITH RankedCountries AS (SELECT Country, Yield, DENSE_RANK() OVER (ORDER BY Yield DESC) AS Rank FROM WheatYield WHERE Year = 2019) SELECT RC.Country, RC.Yield, FP.Practice FROM RankedCountries RC JOIN FarmingPractices FP ON RC.Country = FP.Country WHERE RC.Rank <= 5;","The SQL query first creates a Common Table Expression (CTE), 'RankedCountries', that ranks countries based on their wheat yield in 2019 in descending order. Then, it joins this CTE with the 'FarmingPractices' table on the 'Country' column to fetch the farming practices of these countries. Finally, it returns the name, yield, and farming practice of the countries that are ranked in the top 5."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"Retrieve the total government spending per citizen in each region where the average spending exceeds $10,000.","CREATE TABLE GovernmentSpending (Region VARCHAR(50), CitizenID INT, Spending DECIMAL); CREATE TABLE Citizens (CitizenID INT PRIMARY KEY, Region VARCHAR(50), Age INT, Gender VARCHAR(10)); INSERT INTO GovernmentSpending (Region, CitizenID, Spending) VALUES ('East', 1, 5000), ('East', 2, 15000), ('West', 3, 12000), ('West', 4, 7000), ('South', 5, 8000); INSERT INTO Citizens (CitizenID, Region, Age, Gender) VALUES (1, 'East', 34, 'Male'), (2, 'East', 45, 'Female'), (3, 'West', 29, 'Male'), (4, 'West', 36, 'Female'), (5, 'South', 50, 'Male');","SELECT Region, SUM(Spending)/COUNT(DISTINCT CitizenID) AS SpendingPerCitizen FROM GovernmentSpending GROUP BY Region HAVING AVG(Spending) > 10000;","The query calculates the total government spending per citizen in each region by first grouping the data by regions. It then sums up the total spending in each group and divides it by the count of distinct citizens in that group. The HAVING clause filters the results to include only those regions where the average spending per citizen exceeds $10,000."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Create a table that stores the government's annual budget for different departments, insert the budget data for 5 departments for the year 2022, and then update the budget for the 'Healthcare' department.","CREATE TABLE GovBudget (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), BudgetYear INT, AnnualBudget DECIMAL); INSERT INTO GovBudget (DepartmentID, DepartmentName, BudgetYear, AnnualBudget) VALUES (1, 'Defense', 2022, 740.5), (2, 'Healthcare', 2022, 612.0), (3, 'Education', 2022, 88.0), (4, 'Transportation', 2022, 87.1), (5, 'Energy', 2022, 35.2);",UPDATE GovBudget SET AnnualBudget = 650 WHERE DepartmentName = 'Healthcare' AND BudgetYear = 2022;,"The query first creates a table named 'GovBudget' that stores the government's annual budget for different departments. It then inserts budget data for 5 departments for the year 2022. Lastly, it updates the budget for the 'Healthcare' department to 650."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Delete rows related to policies that have been revoked in the last 5 years and then list the top 10 policies which had the most expenditure before they were revoked.,"CREATE TABLE Policies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(50), Expenditure DECIMAL, RevokedDate DATE); INSERT INTO Policies (PolicyID, PolicyName, Expenditure, RevokedDate) VALUES (1, 'Policy A', 1000.0, '2017-01-01'), (2, 'Policy B', 2000.0, '2019-01-01'), (3, 'Policy C', 3000.0, '2020-01-01'), (4, 'Policy D', 4000.0, '2021-01-01'), (5, 'Policy E', 5000.0, NULL);","DELETE FROM Policies WHERE RevokedDate >= DATEADD(year, -5, GETDATE()); WITH RankedPolicies AS (SELECT PolicyName, Expenditure, RANK() OVER (ORDER BY Expenditure DESC) AS Rank FROM Policies) SELECT PolicyName, Expenditure FROM RankedPolicies WHERE Rank <= 10;","The SQL query first deletes rows from the Policies table where the RevokedDate is within the last 5 years. The query then creates a common table expression (CTE) to rank the policies based on their expenditure in descending order. Finally, it selects the top 10 policies with the most expenditure using the RANK function."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report detailing the difference in consumer behavior for sustainable vs. non-sustainable fashion brands across different regions.,"CREATE TABLE ConsumerBehavior (ConsumerID INT PRIMARY KEY, Region VARCHAR(50), BrandID INT, PurchaseDate DATE, IsSustainable BOOLEAN); CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50));","SELECT Region, BrandName, COUNT(*) AS PurchaseCount FROM (SELECT Region, BrandName FROM ConsumerBehavior CB INNER JOIN FashionBrands FB ON CB.BrandID = FB.BrandID WHERE IsSustainable = TRUE UNION ALL SELECT Region, BrandName FROM ConsumerBehavior CB INNER JOIN FashionBrands FB ON CB.BrandID = FB.BrandID WHERE IsSustainable = FALSE) AS AllData GROUP BY Region, BrandName ORDER BY Region, PurchaseCount DESC;","The query generates a report that combines data on consumer behavior for sustainable and non-sustainable brands by using a UNION ALL operation to gather all relevant purchase data. It then groups the results by region and brand name, and counts the number of purchases for each group. Finally, it orders the results by region and purchase count in descending order."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert a record of a new video content alongside its creator and update the average audience engagement score for the creator.,"CREATE TABLE Creators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50), AvgEngagementScore DECIMAL);CREATE TABLE VideoContent (VideoID INT PRIMARY KEY, VideoTitle VARCHAR(100), CreatorID INT, UploadDate DATE, FOREIGN KEY (CreatorID) REFERENCES Creators(CreatorID));CREATE TABLE AudienceEngagement (EngagementID INT PRIMARY KEY, VideoID INT, EngagementScore DECIMAL, FOREIGN KEY (VideoID) REFERENCES VideoContent(VideoID));","WITH NewVideo AS (INSERT INTO VideoContent (VideoID, VideoTitle, CreatorID, UploadDate) VALUES (101, 'Epic Journey', 1, '2023-10-05') RETURNING CreatorID), UpdateEngagement AS (INSERT INTO AudienceEngagement (EngagementID, VideoID, EngagementScore) VALUES (201, 101, 87.5) RETURNING EngagementScore) UPDATE Creators SET AvgEngagementScore = (SELECT AVG(EngagementScore) FROM AudienceEngagement WHERE VideoID IN (SELECT VideoID FROM VideoContent WHERE CreatorID = (SELECT CreatorID FROM NewVideo))) WHERE CreatorID = (SELECT CreatorID FROM NewVideo);","The query consists of multiple parts: First, it inserts a new record into the VideoContent table for the new video content 'Epic Journey' and captures the CreatorID using a common table expression (CTE) named NewVideo. Then, it inserts a new record into the AudienceEngagement table to record the initial engagement score for the new video, capturing the EngagementScore using another CTE named UpdateEngagement. Finally, it updates the AvgEngagementScore in the Creators table for the creator of the new video by calculating the average engagement score of all videos associated with that creator."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,List the top 3 most watched shows by viewers under the age of 25.,"CREATE TABLE Viewers (ViewerID INT PRIMARY KEY, Name VARCHAR(50), Age INT); CREATE TABLE Shows (ShowID INT PRIMARY KEY, Title VARCHAR(100)); CREATE TABLE WatchHistory (ViewerID INT, ShowID INT, WatchTime INT, FOREIGN KEY (ViewerID) REFERENCES Viewers(ViewerID), FOREIGN KEY (ShowID) REFERENCES Shows(ShowID));",SELECT Title FROM Shows WHERE ShowID IN (SELECT ShowID FROM WatchHistory WHERE ViewerID IN (SELECT ViewerID FROM Viewers WHERE Age < 25) GROUP BY ShowID ORDER BY COUNT(ShowID) DESC LIMIT 3);,"The query first identifies viewers under the age of 25 using a subquery. It then uses another subquery to find the shows watched by these viewers and counts the number of times each show was watched. Finally, it selects the top 3 most-watched shows based on the count, in descending order."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Given the number of tree planting initiatives conducted in different regions over the past year, identify the regions with the highest increase in tree count and commit these results to a new table called TopTreeRegions. If any error occurs, rollback the transaction.","CREATE TABLE TreePlantingInitiatives (InitiativeID INT PRIMARY KEY, Region VARCHAR(50), TreesPlanted INT, Year INT); INSERT INTO TreePlantingInitiatives (InitiativeID, Region, TreesPlanted, Year) VALUES (1, 'Europe', 1000, 2022), (2, 'Asia', 1500, 2022), (3, 'North America', 1200, 2022), (4, 'Europe', 1800, 2023), (5, 'Asia', 2000, 2023), (6, 'North America', 1600, 2023);","BEGIN TRANSACTION; WITH InitialCounts AS (SELECT Region, SUM(TreesPlanted) AS InitialTreeCount FROM TreePlantingInitiatives WHERE Year = 2022 GROUP BY Region), FinalCounts AS (SELECT Region, SUM(TreesPlanted) AS FinalTreeCount FROM TreePlantingInitiatives WHERE Year = 2023 GROUP BY Region), TreeIncrease AS (SELECT I.Region, (F.FinalTreeCount - I.InitialTreeCount) AS TreeCountIncrease FROM InitialCounts I JOIN FinalCounts F ON I.Region = F.Region) SELECT Region, TreeCountIncrease INTO TopTreeRegions FROM TreeIncrease WHERE TreeCountIncrease = (SELECT MAX(TreeCountIncrease) FROM TreeIncrease); COMMIT;","The query starts a transaction and creates common table expressions (CTEs) to calculate the initial and final tree counts for each region from the years 2022 and 2023 respectively. It then calculates the increase in tree count for each region and selects the region with the highest increase, storing the result in a new table called TopTreeRegions. If any error occurs during the process, the transaction is rolled back."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the top 5 treatments with the highest success rates, stratified by age group and gender, for patients diagnosed with diabetes.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(10), Gender VARCHAR(10), Diagnosis VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, TreatmentName VARCHAR(50), SuccessRate DECIMAL, PatientID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","WITH TreatmentSuccess AS (SELECT T.TreatmentName, P.AgeGroup, P.Gender, T.SuccessRate, ROW_NUMBER() OVER (PARTITION BY P.AgeGroup, P.Gender ORDER BY T.SuccessRate DESC) AS Rank FROM Treatments T JOIN Patients P ON T.PatientID = P.PatientID WHERE P.Diagnosis = 'Diabetes') SELECT TreatmentName, AgeGroup, Gender, SuccessRate FROM TreatmentSuccess WHERE Rank <= 5;","The query first creates a common table expression (CTE) called TreatmentSuccess that joins the Treatments and Patients tables to fetch treatment success rates for patients diagnosed with diabetes, along with their age group and gender. It then ranks these treatments within each age group and gender based on success rate in descending order. Finally, it selects the top 5 treatments for each age group and gender combination."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the average age of patients who experienced severe side effects for each drug regimen and list the top 5 drug regimens with the oldest average age of patients.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, DrugRegimen VARCHAR(50), SideEffectSeverity VARCHAR(50)); INSERT INTO Patients (PatientID, Age, Gender) VALUES (1, 67, 'Male'), (2, 70, 'Female'), (3, 52, 'Male'), (4, 59, 'Female'), (5, 63, 'Male'); INSERT INTO Treatments (TreatmentID, PatientID, DrugRegimen, SideEffectSeverity) VALUES (1, 1, 'Drug A', 'Severe'), (2, 2, 'Drug B', 'Mild'), (3, 1, 'Drug C', 'Severe'), (4, 3, 'Drug A', 'Severe'), (5, 2, 'Drug D', 'Moderate');","WITH SevereSideEffects AS (SELECT DrugRegimen, AVG(Age) AS AvgAge FROM Treatments JOIN Patients ON Treatments.PatientID = Patients.PatientID WHERE SideEffectSeverity = 'Severe' GROUP BY DrugRegimen) SELECT DrugRegimen, AvgAge FROM SevereSideEffects ORDER BY AvgAge DESC LIMIT 5;","The query first creates a temporary table of drug regimens and the average age of patients who experienced severe side effects from them. It then selects the top 5 drug regimens with the highest average age of patients who experienced severe side effects, ordered in descending order by average age."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total sales of sustainable clothing items, broken down by region and month for the year 2020, and identify the top 5 regions with the highest sales.","CREATE TABLE Sales (SaleID INT PRIMARY KEY, ClothingItemID INT, Region VARCHAR(50), SaleDate DATE, Price DECIMAL); CREATE TABLE ClothingItems (ClothingItemID INT PRIMARY KEY, ItemType VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO Sales (SaleID, ClothingItemID, Region, SaleDate, Price) VALUES (1, 1, 'North America', '2020-01-05', 120.0), (2, 2, 'Europe', '2020-02-15', 100.0), (3, 3, 'Asia', '2020-03-20', 150.0), (4, 4, 'North America', '2020-05-10', 180.0), (5, 5, 'Europe', '2020-07-05', 200.0); INSERT INTO ClothingItems (ClothingItemID, ItemType, IsSustainable) VALUES (1, 'Shirt', TRUE), (2, 'Pants', FALSE), (3, 'Shirt', TRUE), (4, 'Dress', TRUE), (5, 'Pants', FALSE);","WITH MonthlySales AS (SELECT Region, EXTRACT(MONTH FROM SaleDate) AS Month, SUM(Price) AS TotalSales FROM Sales JOIN ClothingItems ON Sales.ClothingItemID = ClothingItems.ClothingItemID WHERE YEAR(SaleDate) = 2020 AND IsSustainable = TRUE GROUP BY Region, Month), RankedRegions AS (SELECT Region, SUM(TotalSales) AS YearlySales, RANK() OVER (ORDER BY SUM(TotalSales) DESC) AS Rank FROM MonthlySales GROUP BY Region) SELECT Region, YearlySales FROM RankedRegions WHERE Rank <= 5;","The query first creates a common table expression (CTE) to calculate the total sales per month for each region, for sustainable clothing items sold in 2020. It then creates another CTE to calculate the total yearly sales for each region and rank them in descending order based on the sales. Finally, it selects the top 5 regions with the highest sales of sustainable clothing items in 2020."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that identifies the top 10 most popular TV shows in terms of audience engagement, and then display the list of these shows along with their creators and revenue generated.","CREATE TABLE TVShows (ShowID INT PRIMARY KEY, ShowName VARCHAR(100), CreatorID INT, Revenue DECIMAL); CREATE TABLE AudienceEngagement (EngagementID INT PRIMARY KEY, ShowID INT, EngagementLevel INT); CREATE TABLE Creators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(100));","CREATE TABLE TopShows AS SELECT TVS.ShowID, TVS.ShowName, TVS.CreatorID, TVS.Revenue FROM TVShows TVS INNER JOIN (SELECT ShowID, SUM(EngagementLevel) AS TotalEngagement FROM AudienceEngagement GROUP BY ShowID ORDER BY TotalEngagement DESC LIMIT 10) TE ON TVS.ShowID = TE.ShowID; SELECT TS.ShowName, C.CreatorName, TS.Revenue FROM TopShows TS INNER JOIN Creators C ON TS.CreatorID = C.CreatorID;",The query first creates a new table 'TopShows' by joining 'TVShows' and 'AudienceEngagement' to find the top 10 shows with the highest engagement levels. It then performs an INNER JOIN on 'TopShows' and 'Creators' to retrieve the names of the top 10 shows along with their creators and revenue generated.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store comprehensive patient data and a table for drug efficacy studies. Then write a query to find the five most common side effects for a specific drug and the demographics of patients experiencing these side effects.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), Ethnicity VARCHAR(50)); INSERT INTO Patients (PatientID, Age, Gender, Ethnicity) VALUES (1, 45, 'Male', 'Caucasian'), (2, 55, 'Female', 'African American'), (3, 65, 'Male', 'Asian'), (4, 75, 'Female', 'Hispanic'), (5, 85, 'Male', 'Caucasian'); CREATE TABLE DrugEfficacy (StudyID INT PRIMARY KEY, DrugName VARCHAR(50), PatientID INT, SideEffect VARCHAR(50)); INSERT INTO DrugEfficacy (StudyID, DrugName, PatientID, SideEffect) VALUES (1, 'Drug A', 1, 'Nausea'), (2, 'Drug A', 2, 'Headache'), (3, 'Drug A', 3, 'Dizziness'), (4, 'Drug A', 4, 'Nausea'), (5, 'Drug A', 5, 'Dizziness');","WITH SideEffectFrequency AS (SELECT SideEffect, COUNT(*) AS Frequency FROM DrugEfficacy WHERE DrugName = 'Drug A' GROUP BY SideEffect), TopSideEffects AS (SELECT SideEffect FROM SideEffectFrequency ORDER BY Frequency DESC LIMIT 5), PatientDemographics AS (SELECT Patients.* FROM Patients JOIN DrugEfficacy ON Patients.PatientID = DrugEfficacy.PatientID WHERE DrugEfficacy.SideEffect IN (SELECT SideEffect FROM TopSideEffects)) SELECT * FROM PatientDemographics;","The query first creates a common table expression (CTE) named SideEffectFrequency that groups the side effects experienced from Drug A and counts the frequency of each. Then, it creates another CTE named TopSideEffects that selects the five most common side effects. Next, it generates a CTE named PatientDemographics that joins the Patients table with the DrugEfficacy table on the PatientID and filters for patients who experienced one of the top five side effects. The final SELECT statement returns all columns from the PatientDemographics CTE, representing the demographics of patients who experienced the five most common side effects of Drug A."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,data retrieval: basic data fetching queries,"Show me the top 10 most visited tourist destinations in Europe for the last quarter, based on the number of hotel bookings","CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, HotelID INT, GuestID INT, CheckInDate DATE, CheckOutDate DATE); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Destination VARCHAR(50), StarRating INT); INSERT INTO HotelBookings (BookingID, HotelID, GuestID, CheckInDate, CheckOutDate) VALUES (1, 1, 101, '2021-10-01', '2021-10-05'), (2, 2, 102, '2021-10-10', '2021-10-15'), (3, 3, 103, '2021-11-01', '2021-11-05'), (4, 4, 104, '2021-11-10', '2021-11-15'), (5, 5, 105, '2021-12-01', '2021-12-05'); INSERT INTO Hotels (HotelID, HotelName, Destination, StarRating) VALUES (1, 'Hotel Paris', 'Paris', 5), (2, 'Hotel Rome', 'Rome', 4), (3, 'Hotel Berlin', 'Berlin', 3), (4, 'Hotel Madrid', 'Madrid', 5), (5, 'Hotel Vienna', 'Vienna', 4);","WITH QuarterlyBookings AS (SELECT H.Destination, COUNT(*) AS NumBookings FROM HotelBookings B JOIN Hotels H ON B.HotelID = H.HotelID WHERE B.CheckInDate BETWEEN '2021-10-01' AND '2021-12-31' GROUP BY H.Destination) SELECT Destination, NumBookings FROM QuarterlyBookings ORDER BY NumBookings DESC LIMIT 10;",The SQL query first creates a common table expression (CTE) to count the number of hotel bookings for each destination between the specified dates. It then selects the top 10 destinations with the most bookings and orders them in descending order of the number of bookings.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the names and ages of patients who have received more than three treatments for a chronic condition and have shown improvement in their follow-up outcomes.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(100), TreatmentCount INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentProtocol VARCHAR(100), Date DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE FollowUp (FollowUpID INT PRIMARY KEY, PatientID INT, Outcome VARCHAR(100), FollowUpDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT P.Name, P.Age FROM Patients P WHERE P.PatientID IN (SELECT MH.PatientID FROM MedicalHistory MH WHERE MH.TreatmentCount > 3) AND P.PatientID IN (SELECT F.PatientID FROM FollowUp F WHERE F.Outcome = 'Improved');","The query first retrieves the patient IDs from the MedicalHistory table where the treatment count is greater than three. It then checks the FollowUp table to see if these patients have an outcome labeled as 'Improved'. Finally, it fetches the names and ages of these patients from the Patients table."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 10 regions with the highest total electric vehicle sales in the past year.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, UnitsSold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(20)); INSERT INTO VehicleModels (ModelID, ModelName, Type) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Bolt', 'Electric'), (5, 'Prius', 'Hybrid');","WITH SalesData AS (SELECT Region, SUM(UnitsSold) AS TotalUnits FROM VehicleSales vs INNER JOIN VehicleModels vm ON vs.ModelName = vm.ModelName WHERE vm.Type = 'Electric' AND SaleDate BETWEEN DATEADD(year, -1, GETDATE()) AND GETDATE() GROUP BY Region), RankedSales AS (SELECT Region, TotalUnits, ROW_NUMBER() OVER (ORDER BY TotalUnits DESC) AS Rank FROM SalesData) SELECT Region, TotalUnits FROM RankedSales WHERE Rank <= 10;","The query first creates a common table expression (CTE) named SalesData to calculate the total units sold for electric vehicles in the past year grouped by region. It then creates another CTE named RankedSales to rank these regions based on total units sold in descending order using the ROW_NUMBER function. Finally, it selects the top 10 regions with the highest total electric vehicle sales."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a list of the top 5 best selling electric vehicle models in Europe and North America, excluding models that are not available in both regions.","CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO VehicleSales (ModelID, ModelName, Region, Sales) VALUES (1, 'Model S', 'Europe', 20000), (2, 'Model 3', 'North America', 50000), (3, 'Leaf', 'Europe', 15000), (4, 'Bolt', 'North America', 40000), (5, 'Kona', 'Europe', 12000), (6, 'Model S', 'North America', 30000), (7, 'Leaf', 'North America', 25000), (8, 'Model 3', 'Europe', 45000), (9, 'Bolt', 'Europe', 5000), (10, 'Kona', 'North America', 7000); CREATE TABLE VehicleAvailability (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), AvailableInEurope BOOLEAN, AvailableInNA BOOLEAN); INSERT INTO VehicleAvailability (ModelID, ModelName, AvailableInEurope, AvailableInNA) VALUES (1, 'Model S', TRUE, TRUE), (2, 'Model 3', TRUE, TRUE), (3, 'Leaf', TRUE, TRUE), (4, 'Bolt', TRUE, TRUE), (5, 'Kona', TRUE, FALSE);","WITH EuropeSales AS (SELECT ModelName, SUM(Sales) as TotalSales FROM VehicleSales WHERE Region = 'Europe' GROUP BY ModelName), NASales AS (SELECT ModelName, SUM(Sales) as TotalSales FROM VehicleSales WHERE Region = 'North America' GROUP BY ModelName), IntersectSales AS (SELECT EuropeSales.ModelName FROM EuropeSales INTERSECT SELECT NASales.ModelName FROM NASales), RankedModels AS (SELECT IntersectSales.ModelName, EuropeSales.TotalSales + NASales.TotalSales as GlobalSales FROM IntersectSales JOIN EuropeSales ON IntersectSales.ModelName = EuropeSales.ModelName JOIN NASales ON IntersectSales.ModelName = NASales.ModelName JOIN VehicleAvailability ON IntersectSales.ModelName = VehicleAvailability.ModelName WHERE VehicleAvailability.AvailableInEurope = TRUE AND VehicleAvailability.AvailableInNA = TRUE ORDER BY GlobalSales DESC) SELECT ModelName, GlobalSales FROM RankedModels LIMIT 5;",The query first creates two separate subqueries to sum up the total sales of each vehicle model in Europe and North America. It then uses the INTERSECT operator to find models that are sold in both regions. This result is then joined with the total sales and vehicle availability information to filter out models that are not available in both regions. The total global sales are then calculated and the models are ranked in descending order of global sales. The query finally returns the top 5 models having the highest global sales.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that will collect information about fashion trends, including data about the trend, region, sustainability level, and consumer behavior ratings. Then, using this table, find the top 5 sustainable fashion trends in Europe based on consumer ratings.","CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), SustainabilityLevel INT, ConsumerRating DECIMAL); INSERT INTO FashionTrends (TrendID, TrendName, Region, SustainabilityLevel, ConsumerRating) VALUES (1, 'Vegan Leather', 'Europe', 85, 4.7), (2, 'Recycled Denim', 'North America', 78, 4.5), (3, 'Organic Cotton', 'Asia', 80, 4.2), (4, 'Bamboo Fiber', 'Europe', 87, 4.9), (5, 'Secondhand Shopping', 'Europe', 90, 4.8);","WITH RankedTrends AS (SELECT TrendName, SustainabilityLevel, ConsumerRating, DENSE_RANK() OVER (ORDER BY ConsumerRating DESC) AS Rank FROM FashionTrends WHERE Region = 'Europe' AND SustainabilityLevel > 80) SELECT TrendName, SustainabilityLevel, ConsumerRating FROM RankedTrends WHERE Rank <= 5;","The query first creates a common table expression (CTE) that ranks fashion trends in Europe, with a sustainability level over 80, based on their consumer ratings in descending order. The DENSE_RANK function is used to assign a rank to each trend. The final step is to select the top 5 trends based on their rank."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create tables that store data for media content, user interactions, and revenue streams, and then display the total revenue generated by the most popular content in each category.","CREATE TABLE MediaContent (ContentID INT PRIMARY KEY, Title VARCHAR(100), Category VARCHAR(50), ReleaseDate DATE); CREATE TABLE UserInteractions (UserID INT PRIMARY KEY, ContentID INT, InteractionType VARCHAR(50), InteractionDate DATE); CREATE TABLE RevenueStreams (RevenueID INT PRIMARY KEY, ContentID INT, RevenueAmount DECIMAL, RevenueDate DATE); CREATE TABLE Categories (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(50));","WITH PopularContent AS (SELECT MC.ContentID, MC.Title, MC.Category, SUM(RS.RevenueAmount) AS TotalRevenue, DENSE_RANK() OVER (PARTITION BY MC.Category ORDER BY COUNT(UI.InteractionType) DESC) AS Rank FROM MediaContent MC INNER JOIN UserInteractions UI ON MC.ContentID = UI.ContentID INNER JOIN RevenueStreams RS ON MC.ContentID = RS.ContentID GROUP BY MC.ContentID, MC.Title, MC.Category) SELECT Title, Category, TotalRevenue FROM PopularContent WHERE Rank = 1;","The query first creates a Common Table Expression (CTE) named PopularContent that joins the MediaContent, UserInteractions, and RevenueStreams tables. It calculates the total revenue for each content and ranks the content within each category based on the number of user interactions. Finally, it selects the title, category, and total revenue of the most popular content in each category, where the rank is 1."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Create a table to store customer feedback for different hotels and then remove all records of feedback with a rating below 3.,"CREATE TABLE CustomerFeedback (FeedbackID INT PRIMARY KEY, CustomerID INT, HotelID INT, Rating INT, Comment VARCHAR(250)); INSERT INTO CustomerFeedback (FeedbackID, CustomerID, HotelID, Rating, Comment) VALUES (1, 101, 201, 5, 'Excellent service'), (2, 102, 202, 2, 'Poor food quality'), (3, 103, 203, 4, 'Great location'), (4, 104, 204, 1, 'Very noisy'), (5, 105, 205, 3, 'Decent stay');",DELETE FROM CustomerFeedback WHERE Rating < 3;,"The SQL query deletes all records from the CustomerFeedback table where the Rating is less than 3, thus removing all feedback with a rating below 3."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 3 best-selling vehicle models in Europe and Asia in terms of units sold for each brand.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, Brand VARCHAR(50), Model VARCHAR(50), Region VARCHAR(50), UnitsSold INT); INSERT INTO VehicleSales (SaleID, Brand, Model, Region, UnitsSold) VALUES (1, 'Tesla', 'Model S', 'Europe', 50000), (2, 'Tesla', 'Model 3', 'Asia', 60000), (3, 'Toyota', 'Corolla', 'Europe', 40000), (4, 'Toyota', 'Camry', 'Asia', 30000), (5, 'BMW', 'Series 3', 'Europe', 45000), (6, 'BMW', 'Series 5', 'Asia', 35000);","WITH EuropeSales AS (SELECT Brand, Model, UnitsSold, ROW_NUMBER() OVER (PARTITION BY Brand ORDER BY UnitsSold DESC) AS Rank FROM VehicleSales WHERE Region = 'Europe'), AsiaSales AS (SELECT Brand, Model, UnitsSold, ROW_NUMBER() OVER (PARTITION BY Brand ORDER BY UnitsSold DESC) AS Rank FROM VehicleSales WHERE Region = 'Asia') SELECT Brand, Model, Region, UnitsSold FROM (SELECT Brand, Model, 'Europe' as Region, UnitsSold FROM EuropeSales WHERE Rank <= 3 UNION ALL SELECT Brand, Model, 'Asia' as Region, UnitsSold FROM AsiaSales WHERE Rank <= 3) ORDER BY Brand, Region, UnitsSold DESC;","The query creates two common table expressions (CTEs) to rank vehicle models within each brand based on units sold in Europe and Asia respectively. It then selects the top 3 best-selling models for each brand in both regions using the ROW_NUMBER function. The results from both regions are combined using UNION ALL and finally sorted by brand, region and units sold in descending order."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Show me the top 5 most popular fashion brands in North America.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), PopularityScore DECIMAL); INSERT INTO FashionBrands (BrandID, BrandName, Region, PopularityScore) VALUES (1, 'Brand A', 'North America', 85.5), (2, 'Brand B', 'Europe', 70.0), (3, 'Brand C', 'North America', 90.0), (4, 'Brand D', 'Asia', 60.5), (5, 'Brand E', 'North America', 88.0);","SELECT BrandName, PopularityScore FROM FashionBrands WHERE Region = 'North America' ORDER BY PopularityScore DESC LIMIT 5;",The query selects the BrandName and PopularityScore columns from the FashionBrands table where the Region is 'North America'. It then orders the results by PopularityScore in descending order and limits the output to the top 5 entries.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table to store data about movies, including the title, genre, box office revenue, and studio. Then, calculate the average revenue for each genre and display only the genres that have an average revenue greater than $200 million.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), Revenue DECIMAL, Studio VARCHAR(50)); INSERT INTO Movies (MovieID, Title, Genre, Revenue, Studio) VALUES (1, 'Avatar', 'Sci-Fi', 2787965089, '20th Century Fox'), (2, 'Titanic', 'Romantic', 2187463944, 'Paramount Pictures'), (3, 'Star Wars: The Force Awakens', 'Sci-Fi', 2068223624, 'Walt Disney Pictures'), (4, 'Avengers: Endgame', 'Superhero', 2797800564, 'Marvel Studios'), (5, 'The Lion King', 'Animation', 1656943394, 'Walt Disney Pictures');","WITH GenreRevenue AS (SELECT Genre, AVG(Revenue) AS AvgRevenue FROM Movies GROUP BY Genre) SELECT Genre, AvgRevenue FROM GenreRevenue WHERE AvgRevenue > 2000000000;",The SQL query first creates a common table expression (CTE) to calculate the average box office revenue for each genre. It then selects all genres from the CTE where the average revenue is greater than $200 million.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show the top 3 regions with the highest total sales of electric vehicles in the last month, and present them along with the corresponding best-selling model in each of those regions. If a transaction fails, it should be rolled back to maintain data integrity.","CREATE TABLE VehicleSales (TransactionID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, QuantitySold INT); CREATE TABLE VehicleType (ModelName VARCHAR(50) PRIMARY KEY, Type VARCHAR(50)); INSERT INTO VehicleSales (TransactionID, ModelName, Region, SaleDate, QuantitySold) VALUES (1, 'Model S', 'North America', '2022-01-01', 100), (2, 'Model 3', 'Europe', '2022-01-02', 120), (3, 'Leaf', 'Asia', '2022-01-03', 90), (4, 'Bolt', 'North America', '2022-01-04', 70), (5, 'Prius', 'Europe', '2022-01-05', 150); INSERT INTO VehicleType (ModelName, Type) VALUES ('Model S', 'Electric'), ('Model 3', 'Electric'), ('Leaf', 'Electric'), ('Bolt', 'Electric'), ('Prius', 'Hybrid');","BEGIN TRANSACTION; WITH MonthlySales AS (SELECT Region, SUM(QuantitySold) AS TotalSales FROM VehicleSales WHERE SaleDate >= DATEADD(month, -1, GETDATE()) AND ModelName IN (SELECT ModelName FROM VehicleType WHERE Type = 'Electric') GROUP BY Region), TopModels AS (SELECT Region, ModelName, SUM(QuantitySold) AS ModelSales FROM VehicleSales WHERE SaleDate >= DATEADD(month, -1, GETDATE()) AND ModelName IN (SELECT ModelName FROM VehicleType WHERE Type = 'Electric') GROUP BY Region, ModelName) SELECT MS.Region, MS.TotalSales, TM.ModelName FROM MonthlySales MS JOIN TopModels TM ON MS.Region = TM.Region WHERE TM.ModelSales = (SELECT MAX(ModelSales) FROM TopModels WHERE Region = MS.Region) ORDER BY MS.TotalSales DESC LIMIT 3; IF @@ERROR <> 0 ROLLBACK TRANSACTION; COMMIT TRANSACTION;","The query starts a transaction and defines two Common Table Expressions (CTEs). The first CTE (MonthlySales) calculates the total sales of electric vehicles in each region over the past month. The second CTE (TopModels) finds the best-selling electric vehicle model in each region over the past month. The main query joins these two CTEs on the region and selects the top 3 regions with the highest total sales, along with the best-selling model in each of those regions. If there is any error during the execution, the transaction is rolled back. Otherwise, it is committed."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Show me the top 5 most popular fashion trends in Europe for the year 2020.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), Year INT, Popularity INT); INSERT INTO FashionTrends (TrendID, TrendName, Region, Year, Popularity) VALUES (1, 'Oversized Blazers', 'Europe', 2020, 500), (2, 'Face Masks', 'Europe', 2020, 1000), (3, 'Tie-Dye', 'Europe', 2020, 800), (4, 'Mini Bags', 'Asia', 2019, 400), (5, 'Puff Sleeves', 'North America', 2019, 1200);","WITH RankedTrends AS (SELECT TrendName, Popularity, DENSE_RANK() OVER (ORDER BY Popularity DESC) AS Rank FROM FashionTrends WHERE Region = 'Europe' AND Year = 2020) SELECT TrendName, Popularity FROM RankedTrends WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank fashion trends based on their popularity in descending order for the year 2020 in Europe. It then selects the top 5 most popular trends using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Create a table to store customer booking details including their preferred room type and booking source. Generate a report indicating the most popular room type and booking source for all customers.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(50), Country VARCHAR(50), Email VARCHAR(100)); CREATE TABLE RoomTypes (RoomTypeID INT PRIMARY KEY, RoomTypeName VARCHAR(50)); CREATE TABLE BookingSources (SourceID INT PRIMARY KEY, SourceName VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, RoomTypeID INT, SourceID INT, BookingDate DATE, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID), FOREIGN KEY (RoomTypeID) REFERENCES RoomTypes(RoomTypeID), FOREIGN KEY (SourceID) REFERENCES BookingSources(SourceID)); INSERT INTO Customers (CustomerID, Name, Country, Email) VALUES (1, 'John Doe', 'USA', 'johndoe@example.com'), (2, 'Jane Doe', 'Canada', 'janedoe@example.com'); INSERT INTO RoomTypes (RoomTypeID, RoomTypeName) VALUES (1, 'Deluxe'), (2, 'Standard'); INSERT INTO BookingSources (SourceID, SourceName) VALUES (1, 'Online'), (2, 'Walk-in'); INSERT INTO Bookings (BookingID, CustomerID, RoomTypeID, SourceID, BookingDate) VALUES (1, 1, 1, 1, '2022-01-01'), (2, 2, 2, 2, '2022-01-02');","WITH RoomTypePopularity AS (SELECT RoomTypeID, COUNT(*) AS TotalBookings FROM Bookings GROUP BY RoomTypeID), SourcePopularity AS (SELECT SourceID, COUNT(*) AS TotalBookings FROM Bookings GROUP BY SourceID) SELECT RoomTypeName, TotalBookings AS MostPopularRoomType FROM RoomTypePopularity JOIN RoomTypes ON RoomTypePopularity.RoomTypeID = RoomTypes.RoomTypeID ORDER BY TotalBookings DESC LIMIT 1 UNION ALL SELECT SourceName, TotalBookings AS MostPopularBookingSource FROM SourcePopularity JOIN BookingSources ON SourcePopularity.SourceID = BookingSources.SourceID ORDER BY TotalBookings DESC LIMIT 1;","The query creates two Common Table Expressions (CTEs) - RoomTypePopularity and SourcePopularity. RoomTypePopularity groups the bookings by RoomTypeID to calculate the total number of bookings for each room type. Similarly, SourcePopularity groups the bookings by SourceID to calculate the total bookings from each source. The main query then joins these CTEs with the RoomTypes and BookingSources tables respectively to get the room type and booking source names. It orders the results by total bookings in descending order and selects the top result from each, effectively getting the most popular room type and booking source."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the patient's record with new medication details and then find the top 5 drugs that have the most side effects reported by patients.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, PatientName VARCHAR(50), Age INT, Gender VARCHAR(50), MedicalHistory VARCHAR(255)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(50), SideEffects VARCHAR(255)); CREATE TABLE PatientMedications (PatientID INT, MedicationID INT, MedicationStartDate DATE, MedicationEndDate DATE); INSERT INTO Patients (PatientID, PatientName, Age, Gender, MedicalHistory) VALUES (1, 'John Doe', 65, 'Male', 'Diabetes'), (2, 'Jane Doe', 60, 'Female', 'Hypertension'); INSERT INTO Medications (MedicationID, MedicationName, SideEffects) VALUES (1, 'Metformin', 'Nausea'), (2, 'Lisinopril', 'Dizziness'); INSERT INTO PatientMedications (PatientID, MedicationID, MedicationStartDate, MedicationEndDate) VALUES (1, 1, '2022-01-01', '2022-01-31'), (2, 2, '2022-02-01', NULL);","UPDATE PatientMedications SET MedicationEndDate = '2022-02-28' WHERE PatientID = 1 AND MedicationID = 1; WITH SideEffectsCount AS (SELECT MedicationName, COUNT(*) as SideEffectsReported FROM Medications JOIN PatientMedications ON Medications.MedicationID = PatientMedications.MedicationID GROUP BY MedicationName) SELECT MedicationName, SideEffectsReported FROM SideEffectsCount ORDER BY SideEffectsReported DESC LIMIT 5;","The SQL query first updates the PatientMedications table to end the medication for patient ID 1. It then creates a common table expression (CTE) named SideEffectsCount to count the number of side effects for each medication. This is achieved by joining the Medications and PatientMedications tables and grouping the results by medication name. The query then selects the top 5 medications with the most side effects, ordered in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Find the top 5 athletes with the highest average speed across all events they participated in, within a particular season.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50), Season VARCHAR(20)); CREATE TABLE Participation (AthleteID INT, EventID INT, AverageSpeed DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID)); INSERT INTO Athletes (AthleteID, AthleteName) VALUES (1, 'Athlete A'), (2, 'Athlete B'), (3, 'Athlete C'), (4, 'Athlete D'), (5, 'Athlete E'); INSERT INTO Events (EventID, EventName, Season) VALUES (1, 'Event 1', 'Summer'), (2, 'Event 2', 'Winter'), (3, 'Event 3', 'Summer'), (4, 'Event 4', 'Winter'), (5, 'Event 5', 'Summer'); INSERT INTO Participation (AthleteID, EventID, AverageSpeed) VALUES (1, 1, 30.5), (1, 2, 28.0), (2, 3, 32.0), (2, 4, 34.7), (2, 5, 33.0), (3, 1, 29.5), (3, 2, 31.0), (4, 3, 27.0), (4, 4, 30.7), (5, 1, 28.0), (5, 2, 29.5);","WITH SeasonEvents AS (SELECT EventID FROM Events WHERE Season = 'Summer'), AthleteAverageSpeeds AS (SELECT P.AthleteID, AVG(P.AverageSpeed) AS AvgSpeed FROM Participation P INNER JOIN SeasonEvents E ON P.EventID = E.EventID GROUP BY P.AthleteID) SELECT A.AthleteName, AS.AvgSpeed FROM AthleteAverageSpeeds AS INNER JOIN Athletes A ON AS.AthleteID = A.AthleteID ORDER BY AS.AvgSpeed DESC LIMIT 5;","The query first creates a common table expression (CTE) to retrieve all events within the 'Summer' season. It then creates another CTE to calculate the average speed of each athlete across these events. Finally, it joins the AthleteAverageSpeeds CTE with the Athletes table to retrieve the athlete names, and orders the result by average speed in descending order to return the top 5 athletes with the highest average speed."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show the top 3 countries with the highest average annual temperatures for the last 5 years, only considering years with at least 100 temperature readings.","CREATE TABLE ClimateData (Country VARCHAR(50), Year INT, TempReadings INT, AvgAnnualTemp DECIMAL); INSERT INTO ClimateData (Country, Year, TempReadings, AvgAnnualTemp) VALUES ('Australia', 2017, 120, 30), ('Canada', 2017, 105, -5), ('Brazil', 2017, 110, 26), ('Australia', 2018, 105, 29), ('Canada', 2018, 95, -7), ('Brazil', 2018, 108, 26.5), ('Australia', 2019, 115, 30.5), ('Canada', 2019, 108, -6), ('Brazil', 2019, 105, 25.5), ('Australia', 2020, 125, 31), ('Canada', 2020, 110, -4.5), ('Brazil', 2020, 112, 27);","WITH FilteredYears AS (SELECT Country, Year, AvgAnnualTemp FROM ClimateData WHERE TempReadings >= 100 AND Year > YEAR(CURRENT_DATE) - 5), AvgTemp AS (SELECT Country, AVG(AvgAnnualTemp) as AvgTemp FROM FilteredYears GROUP BY Country) SELECT Country, AvgTemp FROM AvgTemp ORDER BY AvgTemp DESC LIMIT 3;","The query first creates a common table expression (CTE) to filter out the countries and years with less than 100 temperature readings and only considers the last 5 years. Another CTE is used to calculate the average annual temperature for each country over the chosen years. Finally, the main query selects the top 3 countries with the highest average temperatures."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total revenue generated and average customer satisfaction, segmented by hotel and country, for all five-star hotels in the last year.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), StarRating INT, Country VARCHAR(50));CREATE TABLE Reservations (ReservationID INT PRIMARY KEY, HotelID INT, CustomerID INT, CheckInDate DATE, CheckOutDate DATE, TotalAmount DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), CustomerSatisfaction INT);CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50));CREATE TABLE HotelRatings (RatingID INT PRIMARY KEY, HotelID INT, CustomerID INT, SatisfactionScore INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID), FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","WITH LastYearReservations AS (SELECT R.HotelID, R.TotalAmount, C.CustomerSatisfaction FROM Reservations R INNER JOIN Hotels H ON R.HotelID = H.HotelID INNER JOIN Customers C ON R.CustomerID = C.CustomerID WHERE H.StarRating = 5 AND R.CheckInDate >= DATEADD(year, -1, GETDATE())), HotelRevenueSatisfaction AS (SELECT H.HotelName, H.Country, SUM(LYR.TotalAmount) AS TotalRevenue, AVG(LYR.CustomerSatisfaction) AS AvgCustomerSatisfaction FROM LastYearReservations LYR INNER JOIN Hotels H ON LYR.HotelID = H.HotelID GROUP BY H.HotelName, H.Country) SELECT HR.HotelName, HR.Country, HR.TotalRevenue, HR.AvgCustomerSatisfaction FROM HotelRevenueSatisfaction HR INNER JOIN Countries C ON HR.Country = C.CountryName;","The query first creates a common table expression (CTE) named LastYearReservations that retrieves total revenue and customer satisfaction scores for five-star hotels from the last year. Another CTE, HotelRevenueSatisfaction, aggregates this data by hotel and country to calculate total revenue and average customer satisfaction. Finally, the main query selects and displays the hotel name, country, total revenue, and average customer satisfaction, ensuring the country names are accurate by joining with the Countries table."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the top 5 sustainable fashion brands in terms of consumer preference and their global sales for the last fiscal year.,"CREATE TABLE BrandSales (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), GlobalSales DECIMAL); INSERT INTO BrandSales (BrandID, BrandName, GlobalSales) VALUES (1, 'Brand A', 5000000), (2, 'Brand B', 4000000), (3, 'Brand C', 3000000), (4, 'Brand D', 2000000), (5, 'Brand E', 1000000); CREATE TABLE ConsumerPreference (ConsumerID INT PRIMARY KEY, BrandID INT, PreferenceScore INT); INSERT INTO ConsumerPreference (ConsumerID, BrandID, PreferenceScore) VALUES (1, 1, 95), (2, 2, 90), (3, 3, 85), (4, 4, 80), (5, 5, 75);","WITH RankedBrands AS (SELECT BrandName, AVG(PreferenceScore) AS AvgPreferenceScore, GlobalSales, DENSE_RANK() OVER (ORDER BY AvgPreferenceScore DESC, GlobalSales DESC) AS Rank FROM BrandSales INNER JOIN ConsumerPreference ON BrandSales.BrandID = ConsumerPreference.BrandID GROUP BY BrandName, GlobalSales) SELECT BrandName, AvgPreferenceScore, GlobalSales FROM RankedBrands WHERE Rank <= 5;","This query first creates a common table expression (CTE) called RankedBrands. Within this CTE, it joins the BrandSales and ConsumerPreference tables on the BrandID and calculates the average preference score for each brand. These results are then ordered by average preference score and global sales, and assigns a rank to each row using the DENSE_RANK function. Finally, it selects the top 5 brands from the RankedBrands CTE."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Update the table to reflect the latest market trends in the wearable technology sector, and then display the total sales for each product category across different regions.","CREATE TABLE WearableTech (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Category VARCHAR(50), Region VARCHAR(50), Sales INT); CREATE TABLE MarketTrends (TrendID INT PRIMARY KEY, TrendDescription VARCHAR(255), ImpactFactor DECIMAL); CREATE TABLE RegionSales (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), TotalSales INT); INSERT INTO WearableTech (ProductID, ProductName, Category, Region, Sales) VALUES (1, 'Smartwatch', 'Fitness', 'North America', 5000), (2, 'VR Headset', 'Gaming', 'Europe', 3000), (3, 'Fitness Tracker', 'Fitness', 'Asia', 7000);","WITH UpdatedSales AS (SELECT Category, SUM(Sales) AS TotalSales FROM WearableTech GROUP BY Category) SELECT * FROM UpdatedSales PIVOT (SUM(TotalSales) FOR Category IN ('Fitness', 'Gaming'));","The query first summarizes sales data by category from the WearableTech table. It then uses the PIVOT function to transform this summary data, displaying the total sales for each product category ('Fitness' and 'Gaming') across different regions."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total revenue for different streaming platforms, and then display the platforms that have revenue exceeding $1 million.","CREATE TABLE StreamingPlatforms (PlatformID INT PRIMARY KEY, PlatformName VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO StreamingPlatforms (PlatformID, PlatformName, TotalRevenue) VALUES (1, 'Netflix', 2500000.00), (2, 'Hulu', 500000.00), (3, 'Disney+', 3000000.00), (4, 'Amazon Prime', 2000000.00), (5, 'HBO Max', 800000.00);","SELECT PlatformName, TotalRevenue FROM StreamingPlatforms WHERE TotalRevenue > 1000000;",The query selects the PlatformName and TotalRevenue columns from the StreamingPlatforms table where the TotalRevenue is greater than $1 million. This helps in identifying the streaming platforms that have generated substantial revenue.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Retrieve the average age of patients who have been prescribed a particular drug and have experienced specific side effects.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (PatientID INT, Condition VARCHAR(100), PRIMARY KEY (PatientID, Condition)); CREATE TABLE Treatments (PatientID INT, DrugName VARCHAR(100), Dosage VARCHAR(50), PRIMARY KEY (PatientID, DrugName)); CREATE TABLE SideEffects (PatientID INT, DrugName VARCHAR(100), SideEffect VARCHAR(100), PRIMARY KEY (PatientID, DrugName, SideEffect));",SELECT AVG(PD.Age) AS AverageAge FROM PatientDemographics PD WHERE PD.PatientID IN (SELECT SE.PatientID FROM SideEffects SE WHERE SE.DrugName = 'DrugA' AND SE.SideEffect = 'Nausea');,"The query first selects the average age of patients from the PatientDemographics table. It then uses a subquery to filter patients who have experienced the side effect 'Nausea' from the drug 'DrugA'. The subquery fetches the PatientIDs from the SideEffects table that meet these criteria and returns them to the outer query, which computes the average age of these patients."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Show me the top 5 most purchased sustainable fashion items this month.,"CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, ProductID INT, CustomerID INT, PurchaseDate DATE); CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO Transactions (TransactionID, ProductID, CustomerID, PurchaseDate) VALUES (1, 101, 1, '2022-04-01'), (2, 102, 2, '2022-04-02'), (3, 101, 3, '2022-04-03'), (4, 103, 4, '2022-04-04'), (5, 101, 5, '2022-04-05'); INSERT INTO Products (ProductID, ProductName, IsSustainable) VALUES (101, 'Organic Cotton T-shirt', TRUE), (102, 'Recycled Polyester Dress', TRUE), (103, 'Vegan Leather Jacket', TRUE), (104, 'Conventional Cotton T-shirt', FALSE), (105, 'Regular Polyester Dress', FALSE);","WITH MonthlyTransactions AS (SELECT ProductID FROM Transactions WHERE PurchaseDate BETWEEN '2022-04-01' AND '2022-04-30'), SustainablePurchases AS (SELECT ProductID, ProductName FROM Products JOIN MonthlyTransactions ON Products.ProductID = MonthlyTransactions.ProductID WHERE IsSustainable = TRUE), RankedItems AS (SELECT ProductName, COUNT(*) AS PurchaseCount, DENSE_RANK() OVER (ORDER BY COUNT(*) DESC) AS Rank FROM SustainablePurchases GROUP BY ProductName) SELECT ProductName, PurchaseCount FROM RankedItems WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) to select all transactions that occurred this month. It then joins this with the Products table to filter only sustainable products. It groups these by product name and counts the number of purchases for each product. These products are then ranked by their purchase count in descending order using the DENSE_RANK function. Finally, it selects the top 5 most purchased sustainable products this month."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the budget allocation for various government departments and then display the departments with the highest allocation in the last fiscal year.,"CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); CREATE TABLE BudgetAllocations (AllocationID INT PRIMARY KEY, DepartmentID INT, FiscalYear INT, AllocationAmount DECIMAL, FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Health'), (2, 'Education'), (3, 'Defense'), (4, 'Infrastructure'), (5, 'Environment'); INSERT INTO BudgetAllocations (AllocationID, DepartmentID, FiscalYear, AllocationAmount) VALUES (1, 1, 2022, 5000000), (2, 2, 2022, 3000000), (3, 3, 2022, 7000000), (4, 4, 2022, 2000000), (5, 5, 2022, 1000000);","WITH RankedDepartments AS (SELECT D.DepartmentName, B.AllocationAmount, DENSE_RANK() OVER (ORDER BY B.AllocationAmount DESC) AS Rank FROM BudgetAllocations B JOIN Departments D ON B.DepartmentID = D.DepartmentID WHERE B.FiscalYear = 2022) SELECT DepartmentName, AllocationAmount FROM RankedDepartments WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank government departments based on their budget allocation for the fiscal year 2022 in descending order. It then selects the top 3 departments with the highest allocation using the DENSE_RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 5 drugs with the highest efficacy based on the patient's age group and commence a transaction to update the patient's treatment protocol if a more efficient drug is found.,"CREATE TABLE PatientData (PatientID INT PRIMARY KEY, AgeGroup VARCHAR(20), TreatmentProtocol VARCHAR(100)); CREATE TABLE DrugEfficacy (DrugName VARCHAR(50), EfficacyRate DECIMAL, AgeGroup VARCHAR(20)); INSERT INTO PatientData (PatientID, AgeGroup, TreatmentProtocol) VALUES (1, '20-30', 'Protocol A'), (2, '30-40', 'Protocol B'), (3, '40-50', 'Protocol C'); INSERT INTO DrugEfficacy (DrugName, EfficacyRate, AgeGroup) VALUES ('Drug A', 90.5, '20-30'), ('Drug B', 85.0, '30-40'), ('Drug C', 80.0, '40-50'), ('Drug D', 95.0, '20-30'), ('Drug E', 92.0, '30-40');","BEGIN TRANSACTION; WITH RankedDrugs AS (SELECT DrugName, EfficacyRate, DENSE_RANK() OVER (PARTITION BY AgeGroup ORDER BY EfficacyRate DESC) AS Rank FROM DrugEfficacy) UPDATE PatientData SET TreatmentProtocol = (SELECT DrugName FROM RankedDrugs WHERE Rank = 1 AND AgeGroup = PatientData.AgeGroup) WHERE EXISTS (SELECT 1 FROM RankedDrugs WHERE Rank = 1 AND AgeGroup = PatientData.AgeGroup AND DrugName != PatientData.TreatmentProtocol); COMMIT TRANSACTION;","This query starts a transaction. Then, it creates a common table expression (CTE) that ranks the drugs by their efficacy rate within each age group in descending order. The UPDATE statement then checks each patient's current treatment protocol against the top-ranked drug for their age group. If the patient's current treatment protocol is not the highest efficacy drug, the patient's treatment protocol is updated to the highest efficacy drug. After all updates are done, the transaction is committed."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Insert a record in the Customers table for a new guest who prefers vegan meals and give a count of customers who prefer vegan meals.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), MealPreference VARCHAR(50)); INSERT INTO Customers (CustomerID, CustomerName, MealPreference) VALUES (1, 'John Doe', 'Non-Vegetarian'), (2, 'Jane Doe', 'Vegetarian'), (3, 'Mary Jane', 'Vegan');","INSERT INTO Customers (CustomerID, CustomerName, MealPreference) VALUES (4, 'New Guest', 'Vegan'); SELECT COUNT(*) FROM Customers WHERE MealPreference = 'Vegan';",The SQL query inserts a new record into the Customers table for a guest who prefers vegan meals. It then counts the total number of customers in the table who prefer vegan meals and returns this count.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the total sales revenue of electric vehicle models for each region in 2020, and then calculate the total sales revenue across all regions.","CREATE TABLE EVSalesRevenue (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SalesRevenue DECIMAL); INSERT INTO EVSalesRevenue (ModelID, ModelName, Region, SalesRevenue) VALUES (1, 'Model S', 'North America', 75000000.00), (2, 'Model 3', 'Europe', 150000000.00), (3, 'Leaf', 'Asia', 65000000.00), (4, 'Bolt', 'North America', 80000000.00), (5, 'Prius', 'Europe', 120000000.00);"," ""SELECT SUM(SalesRevenue) AS TotalSalesRevenue FROM EVSalesRevenue;""",The query calculates the total sales revenue for all electric vehicle models across all regions by summing up the SalesRevenue column from the EVSalesRevenue table.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Provide a list of fashion items that are trending in both North America and Europe, excluding those that are unsustainable based on consumer feedback, and make sure to handle the transaction with proper SQL transaction statements.","CREATE TABLE FashionTrends (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Region VARCHAR(50), Trending INT); CREATE TABLE ConsumerFeedback (FeedbackID INT PRIMARY KEY, ItemID INT, Sustainable BOOLEAN, FOREIGN KEY (ItemID) REFERENCES FashionTrends(ItemID)); INSERT INTO FashionTrends (ItemID, ItemName, Region, Trending) VALUES (1, 'Denim Jacket', 'North America', 1), (2, 'Leather Boots', 'Europe', 1), (3, 'Silk Scarf', 'North America', 1), (4, 'Wool Coat', 'Europe', 1), (5, 'Cotton T-Shirt', 'North America', 0); INSERT INTO ConsumerFeedback (FeedbackID, ItemID, Sustainable) VALUES (1, 1, TRUE), (2, 2, FALSE), (3, 3, TRUE), (4, 4, TRUE), (5, 5, FALSE);","BEGIN TRANSACTION; WITH TrendingItems AS (SELECT ItemName FROM FashionTrends WHERE Region = 'North America' AND Trending = 1 INTERSECT SELECT ItemName FROM FashionTrends WHERE Region = 'Europe' AND Trending = 1), SustainableItems AS (SELECT ItemName FROM FashionTrends FT JOIN ConsumerFeedback CF ON FT.ItemID = CF.ItemID WHERE CF.Sustainable = TRUE) SELECT ItemName FROM TrendingItems INTERSECT SELECT ItemName FROM SustainableItems; COMMIT;","The query first begins a transaction. It then uses a common table expression (CTE) to select fashion items that are trending in both North America and Europe by using the INTERSECT set operation on two SELECT statements filtering by region and trending status. Another CTE selects items marked as sustainable based on consumer feedback. Finally, it performs an INTERSECT operation between the two CTEs to get the list of items that are both trending in these regions and sustainable. The transaction is then committed."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the top 3 hotels with the highest total bookings in the last quarter.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Location VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, Location) VALUES (1, 'Holiday Inn', 'New York'), (2, 'Marriott', 'Los Angeles'), (3, 'Hilton', 'Chicago'), (4, 'Four Seasons', 'Miami'), (5, 'Hyatt', 'Las Vegas'); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CheckInDate DATE, CheckOutDate DATE, GuestID INT); INSERT INTO Bookings (BookingID, HotelID, CheckInDate, CheckOutDate, GuestID) VALUES (1, 1, '2021-10-01', '2021-10-03', 101), (2, 1, '2021-10-05', '2021-10-08', 102), (3, 2, '2021-10-02', '2021-10-04', 103), (4, 3, '2021-10-03', '2021-10-06', 104), (5, 1, '2021-10-07', '2021-10-10', 105);","WITH QuarterlyBookings AS (SELECT HotelID, COUNT(*) AS TotalBookings FROM Bookings WHERE CheckInDate BETWEEN '2021-10-01' AND '2021-12-31' GROUP BY HotelID) SELECT H.HotelName, Q.TotalBookings FROM QuarterlyBookings Q INNER JOIN Hotels H ON Q.HotelID = H.HotelID ORDER BY Q.TotalBookings DESC LIMIT 3;","The SQL query begins by creating a common table expression (CTE) named QuarterlyBookings. This CTE is used to count the total number of bookings for each hotel within the last quarter. The SQL query then joins this CTE with the Hotels table to get the name of each hotel. Finally, the query orders the results by the total number of bookings in descending order and limits the result to the top 3 hotels."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the treatment outcome for patients who were treated with 'DrugX' and have 'Diabetes' as a medical history to 'Improved' if their last recorded outcome was 'Stable'.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), Outcome VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));",UPDATE Treatments SET Outcome = 'Improved' WHERE DrugName = 'DrugX' AND PatientID IN (SELECT PatientID FROM MedicalHistory WHERE Condition = 'Diabetes') AND Outcome = 'Stable';,"The query updates the outcome to 'Improved' for patients who were treated with 'DrugX' and have 'Diabetes' in their medical history, but only if their last recorded outcome was 'Stable'. The subquery selects the PatientID from the MedicalHistory table where the condition is 'Diabetes'."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,Find out the top 5 countries with the highest count of endangered species and the percentage change in their count from last year by region,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Status VARCHAR(50)); CREATE TABLE SpeciesCount (CountID INT PRIMARY KEY, SpeciesID INT, Country VARCHAR(50), Year INT, Count INT); CREATE TABLE CountryRegion (Country VARCHAR(50) PRIMARY KEY, Region VARCHAR(50)); INSERT INTO Species (SpeciesID, SpeciesName, Status) VALUES (1, 'Siberian Tiger', 'Endangered'), (2, 'Asian Elephant', 'Endangered'), (3, 'Polar Bear', 'Endangered'); INSERT INTO SpeciesCount (CountID, SpeciesID, Country, Year, Count) VALUES (1, 1, 'Russia', 2020, 500), (2, 1, 'Russia', 2021, 480), (3, 2, 'India', 2020, 2600), (4, 2, 'India', 2021, 2500), (5, 3, 'Canada', 2020, 15000), (6, 3, 'Canada', 2021, 14500); INSERT INTO CountryRegion (Country, Region) VALUES ('Russia', 'Europe'), ('India', 'Asia'), ('Canada', 'North America');","WITH EndangeredSpecies AS (SELECT Country, COUNT(DISTINCT SpeciesID) AS SpeciesCount FROM Species JOIN SpeciesCount ON Species.SpeciesID = SpeciesCount.SpeciesID WHERE Status = 'Endangered' GROUP BY Country), PreviousYearCount AS (SELECT Country, Count AS PreviousYearCount FROM SpeciesCount WHERE Year = 2020), CurrentYearCount AS (SELECT Country, Count AS CurrentYearCount FROM SpeciesCount WHERE Year = 2021) SELECT CountryRegion.Region, EndangeredSpecies.Country, EndangeredSpecies.SpeciesCount, (CurrentYearCount.CurrentYearCount - PreviousYearCount.PreviousYearCount)/PreviousYearCount.PreviousYearCount*100 AS PercentageChange FROM EndangeredSpecies LEFT JOIN PreviousYearCount ON EndangeredSpecies.Country = PreviousYearCount.Country LEFT JOIN CurrentYearCount ON EndangeredSpecies.Country = CurrentYearCount.Country LEFT JOIN CountryRegion ON EndangeredSpecies.Country = CountryRegion.Country ORDER BY EndangeredSpecies.SpeciesCount DESC LIMIT 5;","This query first creates a temporary view to get the count of distinct endangered species by country. It then creates two more views to get the species count for the previous and current year. Finally, it joins these views on the country column and calculates the percentage change in the species count from last year. The output is then ordered by the species count in descending order and limited to the top 5 countries."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the top 3 regions with the highest increase in the number of endangered species over the past decade and ensure the transaction is committed only if the data is accurate.,"CREATE TABLE SpeciesObservation (ObservationID INT PRIMARY KEY, SpeciesName VARCHAR(100), Region VARCHAR(100), ObservationDate DATE, Status VARCHAR(50)); CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), Status VARCHAR(50)); CREATE TABLE Region (RegionID INT PRIMARY KEY, RegionName VARCHAR(100));","BEGIN; WITH EndangeredGrowth AS (SELECT Region, COUNT(CASE WHEN Status = 'Endangered' THEN 1 END) AS EndangeredCount, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY ObservationDate DESC) AS RowNum FROM SpeciesObservation WHERE ObservationDate BETWEEN DATEADD(YEAR, -10, GETDATE()) AND GETDATE() GROUP BY Region) SELECT TOP 3 Region, EndangeredCount FROM EndangeredGrowth WHERE RowNum = 1 ORDER BY EndangeredCount DESC; COMMIT;","The query starts a transaction with the BEGIN statement. It then creates a common table expression (CTE) called EndangeredGrowth to count the number of endangered species in each region over the past decade. The ROW_NUMBER window function is used to rank the observations within each region by the most recent observation date. Finally, the query selects the top 3 regions with the highest count of endangered species and commits the transaction to ensure that the data is correct before finalizing the operation."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve a list of countries that have both successfully reduced their carbon emissions and increased their forest coverage over the last 5 years, along with the percentage of change in both areas.","CREATE TABLE CarbonEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CarbonEmissions (CountryID, CountryName, Year, Emissions) VALUES (1, 'Country A', 2016, 200.0), (1, 'Country A', 2021, 150.0), (2, 'Country B', 2016, 300.0), (2, 'Country B', 2021, 350.0); CREATE TABLE ForestCoverage (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, Coverage DECIMAL); INSERT INTO ForestCoverage (CountryID, CountryName, Year, Coverage) VALUES (1, 'Country A', 2016, 30.0), (1, 'Country A', 2021, 35.0), (2, 'Country B', 2016, 40.0), (2, 'Country B', 2021, 38.0);","WITH EmissionsReduction AS (SELECT CountryName FROM (SELECT CountryName, (Max(Emissions) - Min(Emissions)) / Max(Emissions) * 100 AS Reduction FROM CarbonEmissions GROUP BY CountryName) WHERE Reduction > 0), CoverageIncrease AS (SELECT CountryName FROM (SELECT CountryName, (Max(Coverage) - Min(Coverage)) / Min(Coverage) * 100 AS Increase FROM ForestCoverage GROUP BY CountryName) WHERE Increase > 0) SELECT E.CountryName, Reduction, Increase FROM EmissionsReduction E JOIN CoverageIncrease C ON E.CountryName = C.CountryName;","The query creates two common table expressions (CTEs), one for countries that have reduced their carbon emissions and another for countries that have increased their forest coverage. It calculates the percentage change in both areas over the last 5 years. It then joins the two CTEs on country name to get a list of countries that have achieved both reductions in carbon emissions and increases in forest coverage."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find out the average carbon dioxide emissions of factories within each region over the last 5 years and list the regions with emissions above the global average.,"CREATE TABLE Factories (FactoryID INT PRIMARY KEY, FactoryName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Emissions (EmissionID INT PRIMARY KEY, FactoryID INT, EmissionYear INT, Co2Emission DECIMAL);","WITH AvgEmissions AS (SELECT Region, AVG(Co2Emission) AS AverageEmission FROM Factories JOIN Emissions ON Factories.FactoryID = Emissions.FactoryID WHERE EmissionYear BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY Region), GlobalAverage AS (SELECT AVG(AverageEmission) AS GlobalAvg FROM AvgEmissions) SELECT Region, AverageEmission FROM AvgEmissions WHERE AverageEmission > (SELECT GlobalAvg FROM GlobalAverage);","The query first creates a common table expression (CTE) to calculate the average carbon dioxide emissions for each region over the last five years. It then calculates the global average of these regional averages. Finally, it selects the regions whose average emissions are above the global average."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Provide a summary of the total revenue per content type and region between June and August, and rollback changes if there's any error during the transaction.","CREATE TABLE EntertainmentRevenue (ContentID INT PRIMARY KEY, ContentType VARCHAR(50), Region VARCHAR(50), Revenue DECIMAL, Date DATE); INSERT INTO EntertainmentRevenue (ContentID, ContentType, Region, Revenue, Date) VALUES (1, 'Movie', 'North America', 20000.00, '2020-07-10'), (2, 'TV Show', 'Europe', 15000.00, '2020-07-20'), (3, 'Music', 'Asia', 25000.00, '2020-08-05'), (4, 'Podcast', 'North America', 5000.00, '2020-06-15'), (5, 'Audiobook', 'Europe', 8000.00, '2020-08-25');","BEGIN TRANSACTION; SAVEPOINT StartTransaction; TRY BEGIN SELECT ContentType, Region, SUM(Revenue) AS TotalRevenue FROM EntertainmentRevenue WHERE Date BETWEEN '2020-06-01' AND '2020-08-31' GROUP BY ContentType, Region; COMMIT END TRY BEGIN CATCH ROLLBACK TRANSACTION StartTransaction; END CATCH;","The SQL query initiates a transaction and creates a savepoint. It then attempts to select the 'ContentType', 'Region', and total 'Revenue' from the 'EntertainmentRevenue' table for the dates between '2020-06-01' and '2020-08-31', and groups the results by 'ContentType' and 'Region'. If there is an error during execution, it catches the error and rolls back the transaction to the savepoint. If there is no error, it commits the transaction."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total number of electric vehicle sales in each region after ensuring all transactions are committed to the database.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), Region VARCHAR(50), SaleDate DATE, Quantity INT, VehicleType VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleModel, Region, SaleDate, Quantity, VehicleType) VALUES (1, 'Model X', 'North America', '2023-01-15', 150, 'Electric'), (2, 'Model Y', 'Europe', '2023-02-20', 200, 'Electric'), (3, 'Leaf', 'Asia', '2023-03-10', 180, 'Electric'), (4, 'Bolt', 'North America', '2023-04-05', 120, 'Electric'), (5, 'Prius', 'Europe', '2023-05-18', 90, 'Hybrid');","BEGIN TRANSACTION; SELECT Region, SUM(Quantity) AS TotalSales FROM VehicleSales WHERE VehicleType = 'Electric' GROUP BY Region; COMMIT;","The query starts a transaction, selects the sum of electric vehicle sales (Quantity) grouped by region, and commits the transaction. This ensures that all the operations are completed successfully before finalizing the transaction, thereby maintaining data integrity."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total government spending by department for the last fiscal year.,"CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, DepartmentName VARCHAR(100), FiscalYear INT, AmountSpent DECIMAL);INSERT INTO GovernmentSpending (SpendingID, DepartmentName, FiscalYear, AmountSpent) VALUES (1, 'Department of Health', 2022, 1200000.00), (2, 'Department of Education', 2022, 950000.00), (3, 'Department of Transportation', 2022, 750000.00), (4, 'Department of Health', 2021, 1150000.00), (5, 'Department of Education', 2021, 900000.00);","SELECT DepartmentName, SUM(AmountSpent) AS TotalSpent FROM GovernmentSpending WHERE FiscalYear = 2022 GROUP BY DepartmentName;",The query selects the total spending for each department in the last fiscal year (2022). It groups the records by department name and sums the amount spent for each department.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the customer preferences for vegan menu options in our database based on a recent survey.,"CREATE TABLE CustomerPreferences (CustomerID INT PRIMARY KEY, Name VARCHAR(50), VeganPreference BOOLEAN); INSERT INTO CustomerPreferences (CustomerID, Name, VeganPreference) VALUES (1, 'John Doe', FALSE), (2, 'Jane Doe', TRUE), (3, 'Kim Smith', TRUE), (4, 'Rob Johnson', FALSE), (5, 'Liz Allen', FALSE);",UPDATE CustomerPreferences SET VeganPreference = TRUE WHERE Name = 'John Doe';,"The SQL query updates the 'VeganPreference' field for the customer named 'John Doe' in the 'CustomerPreferences' table to TRUE, indicating that he prefers vegan menu options."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Retrieve the names and total spending of all government departments that have a total spending exceeding 100 million.,"CREATE TABLE Departments (DeptID INT PRIMARY KEY, DeptName VARCHAR(100));CREATE TABLE Spending (SpendingID INT PRIMARY KEY, DeptID INT, TotalSpending DECIMAL, FOREIGN KEY (DeptID) REFERENCES Departments(DeptID));","SELECT DeptName, TotalSpending FROM Departments d JOIN Spending s ON d.DeptID = s.DeptID WHERE TotalSpending > 100000000;",This SQL query retrieves the names and total spending amounts of government departments where the total spending exceeds 100 million. It joins the 'Departments' and 'Spending' tables on the DeptID column and filters the results to include only those departments with spending over 100 million.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Track the performance of athletes in various sports events, and if any athlete's performance drops below a certain threshold in two consecutive events, rollback the transaction and update the rankings.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100), Nationality VARCHAR(50)); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, EventID INT, Score DECIMAL, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (EventID) REFERENCES Events(EventID));","BEGIN TRANSACTION; WITH LowPerformers AS (SELECT AthleteID, EventID, Score, LEAD(Score, 1) OVER (PARTITION BY AthleteID ORDER BY EventDate) AS NextScore FROM Performance INNER JOIN Events ON Performance.EventID = Events.EventID) SELECT AthleteID FROM LowPerformers WHERE Score < 50 AND NextScore < 50; IF @@ROWCOUNT > 0 BEGIN ROLLBACK TRANSACTION; END ELSE BEGIN UPDATE Rankings SET Rank = Rank + 1 WHERE AthleteID IN (SELECT AthleteID FROM LowPerformers WHERE Score >= 50); COMMIT TRANSACTION; END;","The query starts a transaction, then uses a common table expression (CTE) to identify athletes with scores below 50 in two consecutive events by joining the Performance and Events tables. If any such athletes are found, it rolls back the transaction. Otherwise, it updates the rankings and commits the transaction."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 3 crops with the highest yield per region and the corresponding farming practices used, based on the latest agricultural data.","CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50)); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE CropYields (CropID INT, RegionID INT, Year INT, Yield DECIMAL, PracticeID INT, FOREIGN KEY (CropID) REFERENCES Crops(CropID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID), FOREIGN KEY (PracticeID) REFERENCES FarmingPractices(PracticeID)); INSERT INTO Crops VALUES (1, 'Wheat'), (2, 'Corn'), (3, 'Rice'); INSERT INTO FarmingPractices VALUES (1, 'Organic'), (2, 'Conventional'); INSERT INTO Regions VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'); INSERT INTO CropYields VALUES (1, 1, 2020, 8000, 1), (2, 2, 2020, 7000, 2), (3, 3, 2020, 9000, 1), (1, 2, 2020, 7500, 2), (2, 3, 2020, 8500, 1), (3, 1, 2020, 9500, 2);","WITH RankedYields AS (SELECT r.RegionName, c.CropName, cy.Yield, fp.PracticeName, RANK() OVER (PARTITION BY r.RegionName ORDER BY cy.Yield DESC) as Rank FROM CropYields cy INNER JOIN Crops c ON c.CropID = cy.CropID INNER JOIN Regions r ON r.RegionID = cy.RegionID INNER JOIN FarmingPractices fp ON fp.PracticeID = cy.PracticeID WHERE cy.Year = 2020) SELECT RegionName, CropName, Yield, PracticeName FROM RankedYields WHERE Rank <= 3;","The query starts by creating a common table expression (CTE) called RankedYields. This CTE joins the CropYields, Crops, Regions, and FarmingPractices tables to associate each yield row with its crop name, region name, and farming practice. It also ranks the yields within each region in descending order using the RANK function. The main query then selects the top 3 yields from each region from the RankedYields CTE."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 crops with the highest yield per acre in 2020 for each region, along with the farming practices used and the supply chain stages for these crops.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, YieldPerAcre DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, Year, YieldPerAcre) VALUES (1, 'Wheat', 'North America', 2020, 70.2), (2, 'Rice', 'Asia', 2020, 60.0), (3, 'Corn', 'South America', 2020, 75.0), (4, 'Oats', 'Europe', 2020, 50.0), (5, 'Barley', 'Africa', 2020, 45.0); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, CropID INT, PracticeName VARCHAR(50)); INSERT INTO FarmingPractices (PracticeID, CropID, PracticeName) VALUES (1, 1, 'Crop rotation'), (2, 2, 'Paddy field'), (3, 3, 'No-till farming'), (4, 4, 'Monoculture'), (5, 5, 'Crop diversity'); CREATE TABLE SupplyChain (ChainID INT PRIMARY KEY, CropID INT, Stage VARCHAR(50)); INSERT INTO SupplyChain (ChainID, CropID, Stage) VALUES (1, 1, 'Harvesting'), (2, 2, 'Processing'), (3, 3, 'Distribution'), (4, 4, 'Retail'), (5, 5, 'Consumption');","WITH RankedCrops AS (SELECT CropName, Region, YieldPerAcre, DENSE_RANK() OVER (PARTITION BY Region ORDER BY YieldPerAcre DESC) AS Rank FROM CropYield WHERE Year = 2020) SELECT RC.CropName, RC.Region, RC.YieldPerAcre, FP.PracticeName, SC.Stage FROM RankedCrops RC INNER JOIN FarmingPractices FP ON RC.CropID = FP.CropID INNER JOIN SupplyChain SC ON RC.CropID = SC.CropID WHERE Rank <= 5;","The query first creates a common table expression (CTE) to rank the crops in each region based on their yield per acre in descending order for the year 2020. It then joins this CTE with the FarmingPractices and SupplyChain tables on the CropID field. Finally, it selects the top 5 crops with the highest yield per acre in each region, along with the farming practice used and the supply chain stage for these crops. The join type used is inner join which returns rows from both tables where there is a match."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert a new record into the 'ClimateChangeMetrics' table that represents the carbon emissions for a new country, then find the top 10 countries with the highest carbon emissions by joining the 'ClimateChangeMetrics' table with the 'CountryDetails' table based on country code.","CREATE TABLE ClimateChangeMetrics (CountryCode INT PRIMARY KEY, CarbonEmissions DECIMAL); CREATE TABLE CountryDetails (CountryCode INT PRIMARY KEY, CountryName VARCHAR(50)); INSERT INTO ClimateChangeMetrics (CountryCode, CarbonEmissions) VALUES (101, 5000.5); INSERT INTO CountryDetails (CountryCode, CountryName) VALUES (101, 'New Country');","INSERT INTO ClimateChangeMetrics (CountryCode, CarbonEmissions) VALUES (102, 5500.5); INSERT INTO CountryDetails (CountryCode, CountryName) VALUES (102, 'Another Country'); WITH RankedCountries AS (SELECT cd.CountryName, ccm.CarbonEmissions, RANK() OVER (ORDER BY ccm.CarbonEmissions DESC) AS Rank FROM ClimateChangeMetrics ccm INNER JOIN CountryDetails cd ON ccm.CountryCode = cd.CountryCode) SELECT CountryName, CarbonEmissions FROM RankedCountries WHERE Rank <= 10;","The query first inserts a new record into the 'ClimateChangeMetrics' and 'CountryDetails' tables representing a new country and its carbon emissions data. It then creates a common table expression (CTE) to rank countries based on their carbon emissions in descending order using the RANK function. Finally, it selects the top 10 countries with the highest carbon emissions by joining the 'ClimateChangeMetrics' table with the 'CountryDetails' table based on country code."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 brands that have the most sustainable practices based on consumer reviews.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, BrandID INT, ReviewContent VARCHAR(255), SustainabilityRating INT); INSERT INTO Reviews (ReviewID, BrandID, ReviewContent, SustainabilityRating) VALUES (1, 1, 'Love the eco-friendly practices!', 5), (2, 2, 'Could be more sustainable.', 3), (3, 3, 'Impressed by their sustainability.', 4), (4, 4, 'Not enough focus on environmental impact.', 2), (5, 5, 'They are leading the way in sustainability.', 5);","WITH RankedBrands AS (SELECT BrandName, AVG(SustainabilityRating), RANK() OVER (ORDER BY AVG(SustainabilityRating) DESC) as Rank FROM Reviews JOIN Brands ON Reviews.BrandID = Brands.BrandID GROUP BY BrandName) SELECT BrandName, AVG(SustainabilityRating) FROM RankedBrands WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank brands based on the average sustainability rating from consumer reviews, in descending order. It then selects the top 5 brands with the highest average sustainability rating."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 3 departments with the highest average annual spending per citizen within each region.,"CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), DepartmentID INT, Region VARCHAR(50)); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, Region VARCHAR(50), Population INT); CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, DepartmentID INT, Region VARCHAR(50), AnnualSpending DECIMAL);","WITH RegionalSpending AS (SELECT d.DepartmentName, g.Region, AVG(g.AnnualSpending / c.Population) AS AvgSpendingPerCitizen FROM GovernmentSpending g JOIN Departments d ON g.DepartmentID = d.DepartmentID JOIN CitizenDemographics c ON g.Region = c.Region GROUP BY d.DepartmentName, g.Region), RankedDepartments AS (SELECT *, DENSE_RANK() OVER (PARTITION BY Region ORDER BY AvgSpendingPerCitizen DESC) AS Rank FROM RegionalSpending) SELECT DepartmentName, Region, AvgSpendingPerCitizen FROM RankedDepartments WHERE Rank <= 3;","The query first calculates the average annual spending per citizen for each department in each region using a common table expression (CTE) called RegionalSpending. It then ranks these departments within each region using the DENSE_RANK function. Finally, it selects the top 3 departments with the highest average annual spending per citizen within each region."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the names and ages of patients along with their prescribed medications and any reported side effects.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, PatientName VARCHAR(50), Age INT); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(255), Treatment VARCHAR(255)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, Medication VARCHAR(255)); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, PrescriptionID INT, SideEffect VARCHAR(255)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(255), Efficacy DECIMAL);","SELECT p.PatientName, p.Age, pr.Medication, s.SideEffect FROM Patients p INNER JOIN Prescriptions pr ON p.PatientID = pr.PatientID LEFT JOIN SideEffects s ON pr.PrescriptionID = s.PrescriptionID;","The query first selects patient names and ages from the Patients table. It then performs an INNER JOIN with the Prescriptions table to fetch the medications prescribed to each patient. After that, it performs a LEFT JOIN with the SideEffects table to fetch any reported side effects for the given prescriptions. This ensures that all patients and their prescribed medications are listed, along with any side effects if they exist."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average duration of treatments for patients who received multiple types of medication and commit these changes, but rollback if the average exceeds 180 days.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), TreatmentStart DATE, TreatmentEnd DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, Name VARCHAR(100), Type VARCHAR(50)); CREATE TABLE PatientMedications (PatientMedicationID INT PRIMARY KEY, PatientID INT, MedicationID INT, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));","BEGIN TRANSACTION; WITH TreatmentDurations AS (SELECT P.PatientID, AVG(DATEDIFF(DAY, MH.TreatmentStart, MH.TreatmentEnd)) AS AvgTreatmentDuration FROM Patients P JOIN MedicalHistory MH ON P.PatientID = MH.PatientID JOIN PatientMedications PM ON P.PatientID = PM.PatientID GROUP BY P.PatientID HAVING COUNT(DISTINCT PM.MedicationID) > 1) SELECT * INTO TempTreatmentDurations FROM TreatmentDurations; IF (SELECT MAX(AvgTreatmentDuration) FROM TempTreatmentDurations) > 180 BEGIN ROLLBACK; END ELSE BEGIN COMMIT; END","The query first calculates the average treatment duration for patients who have received multiple types of medication by joining the Patients, MedicalHistory, and PatientMedications tables. It groups the results by PatientID and only includes those with more than one distinct medication type. The results are stored in a temporary table TempTreatmentDurations. If the maximum average treatment duration in this table exceeds 180 days, the transaction is rolled back; otherwise, it is committed."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average revenue per fan for each team across all their home games, sorted by revenue in descending order. Exclude teams with less than 10 home games.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Games (GameID INT PRIMARY KEY, TeamID INT, OpponentID INT, Date DATE, Venue VARCHAR(50), TicketsSold INT, Revenue DECIMAL); CREATE TABLE Fans (FanID INT PRIMARY KEY, TeamID INT, FanName VARCHAR(50), GamesAttended INT); INSERT INTO Teams (TeamID, TeamName) VALUES (1, 'Lakers'), (2, 'Warriors'), (3, 'Celtics'); INSERT INTO Games (GameID, TeamID, OpponentID, Date, Venue, TicketsSold, Revenue) VALUES (1, 1, 2, '2019-10-31', 'Staples Center', 20000, 500000), (2, 2, 1, '2019-11-01', 'Chase Center', 19500, 487500), (3, 1, 3, '2019-11-02', 'Staples Center', 20500, 512500); INSERT INTO Fans (FanID, TeamID, FanName, GamesAttended) VALUES (1, 1, 'Fan1', 15), (2, 1, 'Fan2', 20), (3, 2, 'Fan3', 25);","BEGIN TRANSACTION; WITH GameStats AS (SELECT TeamID, COUNT(*) AS HomeGames, SUM(Revenue) AS TotalRevenue FROM Games WHERE Venue LIKE '%Center' GROUP BY TeamID HAVING COUNT(*) >= 10), FanStats AS (SELECT TeamID, COUNT(*) AS TotalFans FROM Fans GROUP BY TeamID) SELECT T.TeamName, (G.TotalRevenue/F.TotalFans) AS AvgRevenuePerFan FROM GameStats G INNER JOIN FanStats F ON G.TeamID = F.TeamID INNER JOIN Teams T ON G.TeamID = T.TeamID ORDER BY AvgRevenuePerFan DESC; COMMIT;","The query begins a transaction. It then creates two Common Table Expressions (CTEs): GameStats, which calculates the total home games and total revenue for each team, and FanStats, which counts the total number of fans for each team. These CTEs only include teams with at least 10 home games. The query then performs an inner join on these CTEs and the Teams table, based on the TeamID, and calculates the average revenue per fan. The result is ordered by average revenue per fan in descending order. The transaction is then committed."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Retrieve the number of patients who experienced side effects for each drug in the study and have a minimum of 5 reported side effects.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Age INT, Gender VARCHAR(10), Demographics VARCHAR(100)); CREATE TABLE MedicalHistory (MedicalHistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(100), Treatment VARCHAR(100), Outcome VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(100), EfficacyRate DECIMAL(5,2)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, DrugID INT, PatientID INT, SideEffect VARCHAR(100), Severity VARCHAR(50), FOREIGN KEY (DrugID) REFERENCES DrugEfficacy(DrugID), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","SELECT DrugName, COUNT(SideEffectID) AS NumberOfSideEffects FROM SideEffects JOIN DrugEfficacy ON SideEffects.DrugID = DrugEfficacy.DrugID GROUP BY DrugName HAVING COUNT(SideEffectID) >= 5;","The query joins the SideEffects and DrugEfficacy tables on DrugID, then groups the results by DrugName. It counts the number of side effects for each drug and uses the HAVING clause to filter out drugs with fewer than 5 reported side effects."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Show a report of the top NBA teams by total fan engagement, combining metrics from social media interactions and ticket sales.","CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE SocialMediaMetrics (MetricID INT PRIMARY KEY, TeamID INT, Likes INT, Shares INT, Comments INT); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, TeamID INT, TicketsSold INT); INSERT INTO Teams (TeamID, TeamName, Region) VALUES (1, 'Lakers', 'West'), (2, 'Celtics', 'East'), (3, 'Warriors', 'West'), (4, 'Bulls', 'East'), (5, 'Heat', 'East'); INSERT INTO SocialMediaMetrics (MetricID, TeamID, Likes, Shares, Comments) VALUES (1, 1, 5000, 4000, 2000), (2, 2, 4500, 3500, 1800), (3, 3, 4200, 3800, 1900), (4, 4, 4000, 3700, 2200), (5, 5, 4700, 3600, 2000); INSERT INTO TicketSales (SaleID, TeamID, TicketsSold) VALUES (1, 1, 20000), (2, 2, 19000), (3, 3, 18500), (4, 4, 18000), (5, 5, 19500);","WITH CombinedMetrics AS (SELECT t.TeamName, (s.Likes + s.Shares + s.Comments + ts.TicketsSold) AS TotalEngagement FROM Teams t INNER JOIN SocialMediaMetrics s ON t.TeamID = s.TeamID INNER JOIN TicketSales ts ON t.TeamID = ts.TeamID) SELECT TeamName, TotalEngagement FROM CombinedMetrics ORDER BY TotalEngagement DESC;","The SQL query begins by creating a common table expression (CTE) named 'CombinedMetrics'. This CTE performs an inner join operation between the Teams, SocialMediaMetrics, and TicketSales tables on the 'TeamID' field. It then computes the total fan engagement for each team by adding up the 'Likes', 'Shares', 'Comments', and 'TicketsSold' values. The final part of the query selects the 'TeamName' and 'TotalEngagement' fields from the CTE, and orders the results in descending order by the 'TotalEngagement' field to display the NBA teams with the highest total fan engagement."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table to store fashion trends and devise a query to get the 10 most popular fashion trends based on user engagement statistics.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(255), UserEngagement INT); INSERT INTO FashionTrends (TrendID, TrendName, UserEngagement) VALUES (1, 'Athleisure', 1240), (2, 'Sustainable Fashion', 2150), (3, 'Vintage Aesthetics', 1785), (4, 'Minimalism', 2031), (5, 'Streetwear', 2203), (6, 'Boho Chic', 1500), (7, 'Neon Colors', 1312), (8, 'Tropical Prints', 1130), (9, 'Monochrome', 1650), (10, 'Androgynous Styles', 1699);","WITH RankedTrends AS (SELECT TrendName, UserEngagement, DENSE_RANK() OVER (ORDER BY UserEngagement DESC) AS Rank FROM FashionTrends) SELECT TrendName, UserEngagement FROM RankedTrends WHERE Rank <= 10;",The query creates a common table expression (CTE) to rank fashion trends based on user engagement in descending order. It then selects the top 10 most popular trends using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a database that stores information about different species, their conservation status, and their geographical distribution. Then, use a common table expression to find the top 5 most endangered species in each region.","CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), ConservationStatus VARCHAR(50)); INSERT INTO Species (SpeciesID, SpeciesName, ConservationStatus) VALUES (1, 'Black Rhino', 'Critically Endangered'), (2, 'Sumatran Elephant', 'Critically Endangered'), (3, 'Amur Leopard', 'Critically Endangered'), (4, 'Sea Turtle', 'Endangered'), (5, 'Giant Panda', 'Vulnerable'); CREATE TABLE SpeciesDistribution (DistributionID INT PRIMARY KEY, SpeciesID INT, Region VARCHAR(50)); INSERT INTO SpeciesDistribution (DistributionID, SpeciesID, Region) VALUES (1, 1, 'Africa'), (2, 2, 'Asia'), (3, 3, 'Asia'), (4, 4, 'Worldwide'), (5, 5, 'Asia');","WITH RankedSpecies AS (SELECT s.SpeciesName, sd.Region, s.ConservationStatus, DENSE_RANK() OVER (PARTITION BY sd.Region ORDER BY CASE WHEN s.ConservationStatus = 'Critically Endangered' THEN 1 WHEN s.ConservationStatus = 'Endangered' THEN 2 WHEN s.ConservationStatus = 'Vulnerable' THEN 3 ELSE 4 END) AS Rank FROM Species s JOIN SpeciesDistribution sd ON s.SpeciesID = sd.SpeciesID) SELECT SpeciesName, Region, ConservationStatus FROM RankedSpecies WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) to rank species within each region based on their conservation status using the DENSE_RANK function. Species are ranked with 'Critically Endangered' as the highest priority, followed by 'Endangered' and 'Vulnerable'. The query then selects the top 5 most endangered species in each region from the CTE."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records",Identify the top 5 hotels in each region based on the customer feedback ratings after updating the customer feedback rating of 'Ritz Hotel' in 'Europe' region to 4.8 and deleting the records of 'Sunshine Hotel' from 'Asia' region.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50), CustomerRating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, Region, CustomerRating) VALUES (1, 'Ritz Hotel', 'Europe', 4.5), (2, 'Sunshine Hotel', 'Asia', 4.0), (3, 'Ocean View', 'North America', 4.6), (4, 'Mountain Escape', 'Europe', 4.9), (5, 'City Center', 'Asia', 4.8);","UPDATE Hotels SET CustomerRating = 4.8 WHERE HotelName = 'Ritz Hotel' AND Region = 'Europe'; DELETE FROM Hotels WHERE HotelName = 'Sunshine Hotel' AND Region = 'Asia'; WITH RankedHotels AS (SELECT HotelName, CustomerRating, DENSE_RANK() OVER (PARTITION BY Region ORDER BY CustomerRating DESC) AS Rank FROM Hotels) SELECT * FROM RankedHotels WHERE Rank <= 5;","The SQL queries first update the customer rating for 'Ritz Hotel' in 'Europe' to 4.8, and then delete any records of 'Sunshine Hotel' from 'Asia' region. It then creates a common table expression (CTE) to rank hotels in each region based on their customer ratings in descending order. Finally, it selects the top 5 hotels in each region using the DENSE_RANK function."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Show me the top 5 medications with the highest average efficacy across all patients, based on their medical history.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(50), MedicationType VARCHAR(50)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, MedicationID INT, Efficacy DECIMAL);","WITH MedicationEfficacy AS (SELECT MedicationID, AVG(Efficacy) AS AvgEfficacy FROM MedicalHistory GROUP BY MedicationID) SELECT m.MedicationName, e.AvgEfficacy FROM MedicationEfficacy e JOIN Medications m ON e.MedicationID = m.MedicationID ORDER BY AvgEfficacy DESC LIMIT 5;","The query first creates a subquery (MedicationEfficacy) that calculates the average efficacy for each medication from the MedicalHistory table. Then it joins this subquery with the Medications table to get the medication names and sorts them by average efficacy in decreasing order. Finally, it retrieves the top 5 medications with the highest average efficacy."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Retrieve the number of patients who experienced side effects from a specific drug within the last year, categorized by severity.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender CHAR(1));CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), Medications VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentName VARCHAR(255), StartDate DATE, EndDate DATE, Outcome VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(100), EfficacyRate DECIMAL);CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, PatientID INT, DrugID INT, EffectDate DATE, Severity VARCHAR(50), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (DrugID) REFERENCES DrugEfficacy(DrugID));","SELECT Severity, COUNT(*) AS NumberOfPatients FROM SideEffects WHERE DrugID = (SELECT DrugID FROM DrugEfficacy WHERE DrugName = 'SPECIFIC_DRUG') AND EffectDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY Severity;","The query first filters the SideEffects table to find records for the specific drug by matching the DrugID from the DrugEfficacy table where the DrugName equals 'SPECIFIC_DRUG'. It then ensures the side effects occurred within the last year by comparing the EffectDate to the current date minus one year. Finally, it groups the results by the severity of the side effects and counts the number of patients in each severity category."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 5 drugs with the highest efficacy based on patient outcomes in the last year.,"CREATE TABLE PatientData (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Disease VARCHAR(50), Treatment VARCHAR(50)); CREATE TABLE DrugEfficacy (EfficacyID INT PRIMARY KEY, DrugName VARCHAR(50), PatientID INT, OutcomeRating DECIMAL); INSERT INTO PatientData (PatientID, Age, Gender, Region) VALUES (1, 45, 'Male', 'North America'), (2, 32, 'Female', 'Europe'), (3, 60, 'Male', 'Asia'), (4, 25, 'Female', 'North America'), (5, 70, 'Male', 'Europe'); INSERT INTO MedicalHistory (HistoryID, PatientID, Disease, Treatment) VALUES (1, 1, 'Disease A', 'Drug 1'), (2, 2, 'Disease B', 'Drug 2'), (3, 3, 'Disease C', 'Drug 3'), (4, 4, 'Disease D', 'Drug 4'), (5, 5, 'Disease E', 'Drug 5'); INSERT INTO DrugEfficacy (EfficacyID, DrugName, PatientID, OutcomeRating) VALUES (1, 'Drug 1', 1, 8.5), (2, 'Drug 2', 2, 7.5), (3, 'Drug 3', 3, 9.0), (4, 'Drug 4', 4, 7.0), (5, 'Drug 5', 5, 8.0);","WITH RankedDrugs AS (SELECT DrugName, AVG(OutcomeRating) as AverageRating, DENSE_RANK() OVER (ORDER BY AVG(OutcomeRating) DESC) AS Rank FROM DrugEfficacy GROUP BY DrugName) SELECT DrugName, AverageRating FROM RankedDrugs WHERE Rank <= 5;",The query first creates a common table expression (CTE) named 'RankedDrugs'. This CTE calculates the average outcome rating for each drug and ranks them in descending order of this average rating. The DENSE_RANK function is used to rank the drugs. The main query then selects the top 5 drugs from this CTE based on their rank.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store the government's annual expenditure on different policy sectors in various states, and then display the sectors that have seen the most expenditure over the past 5 years.","CREATE TABLE PolicyExpenditure (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(50), State VARCHAR(50), AnnualExpenditure DECIMAL, Year INT); INSERT INTO PolicyExpenditure (PolicyID, PolicyName, State, AnnualExpenditure, Year) VALUES (1, 'Healthcare', 'California', 15000000, 2017), (2, 'Education', 'Colorado', 12000000, 2017), (3, 'Defense', 'Texas', 20000000, 2017), (4,'Infrastructure', 'New York', 18000000, 2017), (5,'Agriculture', 'Georgia', 9000000, 2017);","WITH RankedPolicies AS (SELECT PolicyName, SUM(AnnualExpenditure) as TotalExpenditure, DENSE_RANK() OVER (ORDER BY TotalExpenditure DESC) AS Rank FROM PolicyExpenditure WHERE Year >= (YEAR(CURRENT_DATE) - 5) GROUP BY PolicyName) SELECT PolicyName, TotalExpenditure FROM RankedPolicies WHERE Rank <= 5;","The query starts by creating a table to store the government's annual expenditure on different policy sectors in various states. Then, a common table expression (CTE) is created that calculates the sum of annual expenditures for each policy sector over the past 5 years, and ranks them using the DENSE_RANK function based on the total expenditure in descending order. Finally, the query selects the policy sectors that rank within the top 5 in terms of total expenditure."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that lists the top 5 most common side effects for drugs prescribed to patients aged 65 and above, along with the number of occurrences for each side effect.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(255), Treatment VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE DrugPrescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(255), Dosage VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE SideEffects (EffectID INT PRIMARY KEY, PrescriptionID INT, SideEffect VARCHAR(255), FOREIGN KEY (PrescriptionID) REFERENCES DrugPrescriptions(PrescriptionID));","WITH ElderlyPatients AS (SELECT PatientID FROM Patients WHERE Age >= 65), ElderlyPrescriptions AS (SELECT dp.PrescriptionID, dp.DrugName FROM DrugPrescriptions dp JOIN ElderlyPatients ep ON dp.PatientID = ep.PatientID), SideEffectCounts AS (SELECT se.SideEffect, COUNT(se.SideEffect) AS Occurrences FROM SideEffects se JOIN ElderlyPrescriptions ep ON se.PrescriptionID = ep.PrescriptionID GROUP BY se.SideEffect) SELECT SideEffect, Occurrences FROM SideEffectCounts ORDER BY Occurrences DESC LIMIT 5;","The query first creates a common table expression (CTE) named ElderlyPatients to identify patients aged 65 and above. Then, it forms another CTE called ElderlyPrescriptions to get the prescriptions given to these elderly patients. After that, it builds a CTE named SideEffectCounts to count the occurrences of each side effect for these prescriptions. Finally, it selects the top 5 most common side effects by ordering the counts in descending order."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Retrieve the list of patients who have experienced severe side effects from the drug Aspirin.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender CHAR(1)); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, DrugName VARCHAR(50), SideEffects VARCHAR(100)); CREATE TABLE PatientMedications (PatientID INT, MedicationID INT, SideEffectSeverity INT);",SELECT P.Name FROM Patients P INNER JOIN PatientMedications PM ON P.PatientID = PM.PatientID INNER JOIN Medications M ON PM.MedicationID = M.MedicationID WHERE M.DrugName = 'Aspirin' AND PM.SideEffectSeverity >= 7;,"The query first joins the Patients table with the PatientMedications table on the PatientID, then joins the result with the Medications table on the MedicationID. It then applies a filter to select only those rows where the DrugName is 'Aspirin' and the SideEffectSeverity is 7 or greater. The result is a list of names of patients who have experienced severe side effects from the drug Aspirin."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table that tracks the most streamed movies in different regions, and then display the top 10 movies with the highest number of streams.","CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Region VARCHAR(50), StreamCount INT); INSERT INTO Movies (MovieID, Title, Region, StreamCount) VALUES (1, 'Inception', 'North America', 5000000), (2, 'Parasite', 'Asia', 7000000), (3, 'Interstellar', 'Europe', 4500000), (4, 'The Dark Knight', 'South America', 5200000), (5, 'Joker', 'North America', 4800000), (6, 'Avengers: Endgame', 'Asia', 7300000), (7, 'Titanic', 'Europe', 6500000), (8, 'Frozen', 'North America', 3200000), (9, 'Avatar', 'South America', 6100000), (10, 'Black Panther', 'Africa', 4700000);","WITH RankedMovies AS (SELECT Title, StreamCount, DENSE_RANK() OVER (ORDER BY StreamCount DESC) AS Rank FROM Movies) SELECT Title, StreamCount FROM RankedMovies WHERE Rank <= 10;",The query creates a common table expression (CTE) named RankedMovies to rank movies based on their stream count in descending order. It then selects the top 10 movies with the highest stream count using the DENSE_RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Insert new patient records and then find the average length of hospital stay for patients aged 60 and above who were treated for hypertension in the last year.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DOB DATE, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), TreatmentDate DATE, Outcome VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, HistoryID INT, TreatmentProtocol VARCHAR(255), LengthOfStay INT, SideEffects VARCHAR(255), FOREIGN KEY (HistoryID) REFERENCES MedicalHistory(HistoryID));","INSERT INTO Patients (PatientID, FirstName, LastName, DOB, Gender) VALUES (1001, 'John', 'Doe', '1955-03-15', 'Male'), (1002, 'Jane', 'Smith', '1948-07-21', 'Female'); INSERT INTO MedicalHistory (HistoryID, PatientID, Diagnosis, TreatmentDate, Outcome) VALUES (2001, 1001, 'Hypertension', '2022-06-01', 'Stable'), (2002, 1002, 'Hypertension', '2022-09-15', 'Improved'); INSERT INTO Treatments (TreatmentID, HistoryID, TreatmentProtocol, LengthOfStay, SideEffects) VALUES (3001, 2001, 'Medication', 5, 'Nausea'), (3002, 2002, 'Lifestyle Changes', 3, 'None'); SELECT AVG(LengthOfStay) AS AvgLengthOfStay FROM Patients p JOIN MedicalHistory mh ON p.PatientID = mh.PatientID JOIN Treatments t ON mh.HistoryID = t.HistoryID WHERE mh.Diagnosis = 'Hypertension' AND mh.TreatmentDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) AND TIMESTAMPDIFF(YEAR, p.DOB, CURDATE()) >= 60;","The query first inserts new patient records into the Patients table and corresponding medical history and treatment details into MedicalHistory and Treatments tables. It then joins these tables to calculate the average length of hospital stay for patients aged 60 and above who were treated for hypertension in the last year. The JOIN operations link the patient information with their medical history and treatment records, and the WHERE clause filters the results to meet the specified conditions."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Provide the top 5 most popular sustainable fashion brands in Europe based on sales.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO Brands (BrandID, BrandName, IsSustainable) VALUES (1, 'Brand A', TRUE), (2, 'Brand B', TRUE), (3, 'Brand C', FALSE), (4, 'Brand D', TRUE), (5, 'Brand E', FALSE); CREATE TABLE Sales (SaleID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), UnitsSold INT); INSERT INTO Sales (SaleID, BrandID, Region, UnitsSold) VALUES (1, 1, 'Europe', 1000), (2, 2, 'Europe', 1500), (3, 3, 'Europe', 500), (4, 4, 'Europe', 2000), (5, 5, 'Europe', 300);","SELECT b.BrandName, SUM(s.UnitsSold) AS TotalSales FROM Brands b INNER JOIN Sales s ON b.BrandID = s.BrandID WHERE b.IsSustainable = TRUE AND s.Region = 'Europe' GROUP BY b.BrandName ORDER BY TotalSales DESC LIMIT 5;","The query first joins the Brands and Sales tables on the BrandID column. It then filters the results to include only those rows where the brand is sustainable and the region is Europe. It groups the results by brand name and calculates the total sales for each brand. Finally, it orders the results by total sales in descending order and limits the output to the top 5 brands."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Provide a list of the top 5 hotels based on average customer ratings for each country.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Country VARCHAR(50), RoomCount INT); CREATE TABLE CustomerRatings (RatingID INT PRIMARY KEY, HotelID INT, CustomerID INT, Rating DECIMAL); INSERT INTO Hotels (HotelID, HotelName, Country, RoomCount) VALUES (1, 'Hotel Paradise', 'USA', 200), (2, 'Hotel Royale', 'France', 150), (3, 'Hotel Peace', 'India', 250), (4, 'Hotel Comfort', 'USA', 180), (5, 'Hotel Luxury', 'France', 120); INSERT INTO CustomerRatings (RatingID, HotelID, CustomerID, Rating) VALUES (1, 1, 101, 4.5), (2, 2, 102, 4.0), (3, 3, 103, 4.8), (4, 4, 104, 4.3), (5, 5, 105, 3.8);","WITH AverageRatings AS (SELECT HotelID, AVG(Rating) as AvgRating FROM CustomerRatings GROUP BY HotelID), RankedHotels AS (SELECT Hotels.HotelName, Hotels.Country, AverageRatings.AvgRating, RANK() OVER (PARTITION BY Hotels.Country ORDER BY AverageRatings.AvgRating DESC) as Rank FROM Hotels JOIN AverageRatings ON Hotels.HotelID = AverageRatings.HotelID) SELECT HotelName, Country, AvgRating FROM RankedHotels WHERE Rank <= 5;","The query first creates a common table expression (CTE) to calculate the average customer rating for each hotel. Then it ranks the hotels within each country based on these average ratings in descending order. Finally, it selects the top 5 hotels in each country based on these rankings."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the total crop yield for a specific farm based on new data from the latest harvest.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE CropYields (YieldID INT PRIMARY KEY, FarmID INT, CropType VARCHAR(50), Year INT, TotalYield DECIMAL, FOREIGN KEY (FarmID) REFERENCES Farms(FarmID));","WITH UpdatedYields AS (SELECT FarmID, SUM(TotalYield) AS NewTotalYield FROM CropYields WHERE Year = 2023 GROUP BY FarmID) UPDATE CropYields SET TotalYield = uy.NewTotalYield FROM CropYields cy JOIN UpdatedYields uy ON cy.FarmID = uy.FarmID WHERE cy.Year = 2023;",The query first creates a common table expression (CTE) named UpdatedYields that calculates the new total yield for each farm based on the latest harvest data for the year 2023. It then updates the TotalYield column in the CropYields table with these new values by joining the CTE with the CropYields table on the FarmID.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 soccer players with the highest total goals scored in the major leagues over the past year.,"CREATE TABLE SoccerPlayers (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), League VARCHAR(50), GoalsScored INT); INSERT INTO SoccerPlayers (PlayerID, PlayerName, League, GoalsScored) VALUES (1, 'Lionel Messi', 'Spanish La Liga', 30), (2, 'Cristiano Ronaldo', 'Italian Serie A', 29), (3, 'Robert Lewandowski', 'German Bundesliga', 41), (4, 'Harry Kane', 'English Premier League', 23), (5, 'Kylian Mbappe', 'French Ligue 1', 27);","WITH RankedPlayers AS (SELECT PlayerName, GoalsScored, DENSE_RANK() OVER (ORDER BY GoalsScored DESC) AS Rank FROM SoccerPlayers) SELECT PlayerName, GoalsScored FROM RankedPlayers WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank soccer players based on their total goals scored in descending order. It then selects the top 5 players with the highest total goals scored using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find out the top 5 hotels which have the highest average daily rate (ADR) for rooms booked in the last quarter and also had at least 50 bookings.,"CREATE TABLE HotelTransactions (TransactionID INT PRIMARY KEY, HotelID INT, HotelName VARCHAR(50), BookingDate DATE, RoomRate DECIMAL); INSERT INTO HotelTransactions (TransactionID, HotelID, HotelName, BookingDate, RoomRate) VALUES (1, 101, 'Hotel Sunshine', '2021-10-01', 120.5), (2, 102, 'Hotel Moonlight', '2021-09-30', 118.0), (3, 103, 'Hotel Starlight', '2021-11-15', 110.0), (4, 104, 'Hotel Dawn', '2021-12-20', 115.7), (5, 105, 'Hotel Dusk', '2021-10-05', 95.0);","BEGIN TRANSACTION; WITH HotelRates AS (SELECT HotelName, AVG(RoomRate) AS AvgDailyRate, COUNT(TransactionID) AS NumberOfBookings FROM HotelTransactions WHERE BookingDate >= DATEADD(qq, DATEDIFF(qq, 0, GETDATE()) - 1, 0) AND BookingDate < DATEADD(qq, DATEDIFF(qq, 0, GETDATE()), 0) GROUP BY HotelName HAVING COUNT(TransactionID) >= 50) SELECT TOP 5 HotelName, AvgDailyRate FROM HotelRates ORDER BY AvgDailyRate DESC; COMMIT;","The query starts by initiating a SQL transaction. It then creates a common table expression (CTE) called HotelRates, which groups transactions by hotel name, and calculates their average daily rate and the total number of bookings for each hotel. The WHERE clause filters out transactions to only include those that were booked in the last quarter. The HAVING clause filters out hotels that had less than 50 bookings. The main query then selects the top 5 hotels with the highest average daily rate from the CTE and orders them in descending order. The transaction is then committed."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,data retrieval: basic data fetching queries,Show me the top 5 best-selling electric vehicle models in Europe in 2020.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), SaleYear INT, Quantity INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, SaleYear, Quantity) VALUES (1, 'Model S', 'Europe', 2020, 20000), (2, 'Model 3', 'Europe', 2020, 25000), (3, 'Leaf', 'Europe', 2020, 18000), (4, 'i3', 'Europe', 2020, 15000), (5, 'Zoe', 'Europe', 2020, 22000);","WITH RankedModels AS (SELECT ModelName, SUM(Quantity) AS TotalSales, DENSE_RANK() OVER (ORDER BY SUM(Quantity) DESC) AS Rank FROM VehicleSales WHERE Region = 'Europe' AND SaleYear = 2020 GROUP BY ModelName) SELECT ModelName, TotalSales FROM RankedModels WHERE Rank <= 5;",The query first creates a common table expression (CTE) that sums up the total sales for each model in Europe in 2020 and ranks them in descending order of sales. It then uses this CTE to fetch the top 5 best-selling electric vehicle models.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the sales data for vehicle models that have been discontinued and delete the records for models that are no longer in the global market.,"CREATE TABLE VehicleSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), UnitsSold INT, MarketStatus VARCHAR(20)); INSERT INTO VehicleSales (ModelID, ModelName, UnitsSold, MarketStatus) VALUES (1, 'Model S', 50000, 'Active'), (2, 'Model 3', 70000, 'Active'), (3, 'Leaf', 30000, 'Discontinued'), (4, 'Bolt', 40000, 'Discontinued'), (5, 'Prius', 35000, 'Active');",UPDATE VehicleSales SET UnitsSold = 0 WHERE MarketStatus = 'Discontinued'; DELETE FROM VehicleSales WHERE MarketStatus NOT IN ('Active');,The query first updates the 'UnitsSold' to 0 for all vehicle models that are discontinued. Then it deletes all records from the 'VehicleSales' table where the 'MarketStatus' is not 'Active'.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the total number of companies that have adopted AI technologies in each sector and only include sectors with more than 10 companies.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(100), HasAdoptedAI BOOLEAN); CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(100)); INSERT INTO Companies (CompanyID, CompanyName, Sector, HasAdoptedAI) VALUES (1, 'Tech Innovators', 'Technology', TRUE), (2, 'Green Future', 'Energy', FALSE), (3, 'Health First', 'Healthcare', TRUE), (4, 'Smart Homes Inc.', 'Real Estate', TRUE), (5, 'AI Pioneers', 'Technology', TRUE);","SELECT Sector, COUNT(*) AS TotalCompanies FROM Companies WHERE HasAdoptedAI = TRUE GROUP BY Sector HAVING COUNT(*) > 10;",The query counts the number of companies that have adopted AI technologies for each sector. It uses the COUNT function to aggregate the companies and the HAVING clause to filter out sectors that have 10 or fewer companies that have adopted AI.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the average crop yield for different regions and types of crops, and then display this information along with the farmer's name and farming practice used.","CREATE TABLE CropYields (RegionID INT, CropType VARCHAR(50), AvgYield DECIMAL); CREATE TABLE Farmers (FarmerID INT PRIMARY KEY, FarmerName VARCHAR(50)); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50)); CREATE TABLE FarmerPractices (FarmerID INT, PracticeID INT); CREATE TABLE FarmerCrops (FarmerID INT, CropType VARCHAR(50), RegionID INT);","CREATE TABLE AvgCropYield (RegionID INT, CropType VARCHAR(50), AvgYield DECIMAL); INSERT INTO AvgCropYield(RegionID, CropType, AvgYield) SELECT FarmerCrops.RegionID, FarmerCrops.CropType, AVG(CropYields.AvgYield) FROM CropYields INNER JOIN FarmerCrops ON CropYields.RegionID = FarmerCrops.RegionID AND CropYields.CropType = FarmerCrops.CropType GROUP BY FarmerCrops.RegionID, FarmerCrops.CropType;","The query creates a table named AvgCropYield which stores the average crop yield for different regions and crop types. It joins the CropYields table with the FarmerCrops table on matching RegionID and CropType to calculate the average yield for each combination of region and crop type, then inserts the results into the AvgCropYield table."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the total revenue of all movies produced by 'Universal Studios' to reflect a 10% increase and then fetch the updated revenue for each movie.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Studio VARCHAR(50), TotalRevenue DECIMAL); INSERT INTO Movies (MovieID, Title, Studio, TotalRevenue) VALUES (1, 'Jurassic Park', 'Universal Studios', 1000000), (2, 'Despicable Me', 'Universal Studios', 500000), (3, 'Fast & Furious', 'Universal Studios', 800000), (4, 'Minions', 'Universal Studios', 300000), (5, 'ET', 'Universal Studios', 1200000);","UPDATE Movies SET TotalRevenue = TotalRevenue * 1.10 WHERE Studio = 'Universal Studios'; SELECT Title, TotalRevenue FROM Movies WHERE Studio = 'Universal Studios';","The query first updates the TotalRevenue field for all movies produced by 'Universal Studios' by increasing the current revenue by 10%. Then, it fetches the updated revenue for each movie produced by 'Universal Studios' by selecting the Title and updated TotalRevenue from the Movies table."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that captures details about various sports events, including the event ID, name, type of sport, location and number of attendees. Then construct a query to identify the top 5 sports events with highest fan engagement measured by number of attendees.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), SportType VARCHAR(50), Location VARCHAR(50), NumberOfAttendees INT); INSERT INTO SportsEvents (EventID, EventName, SportType, Location, NumberOfAttendees) VALUES (1, 'Super Bowl', 'Football', 'Miami', 70000), (2, 'World Series', 'Baseball', 'Los Angeles', 50000), (3, 'NBA Finals', 'Basketball', 'New York', 48000), (4, 'Stanley Cup', 'Hockey', 'Chicago', 60000), (5, 'FIFA World Cup', 'Soccer', 'Paris', 80000);","WITH EventRanking AS (SELECT EventName, NumberOfAttendees, DENSE_RANK() OVER (ORDER BY NumberOfAttendees DESC) AS Rank FROM SportsEvents) SELECT EventName, NumberOfAttendees FROM EventRanking WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) named 'EventRanking' that ranks sports events by the number of attendees in descending order. Then it selects the events and the numbers of attendees from the CTE where the ranking is within the top 5.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total government spending in each state, broken down by department, and list the top 5 states with the highest total spending.","CREATE TABLE StateSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), DepartmentID INT, Spending DECIMAL); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50)); CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(50)); INSERT INTO StateSpending (StateID, StateName, DepartmentID, Spending) VALUES (1, 'California', 1, 500000), (2, 'Texas', 2, 400000), (3, 'New York', 3, 300000), (4, 'Florida', 4, 200000), (5, 'Illinois', 5, 100000); INSERT INTO Departments (DepartmentID, DepartmentName) VALUES (1, 'Health'), (2, 'Education'), (3, 'Defense'), (4, 'Transportation'), (5, 'Energy'); INSERT INTO States (StateID, StateName) VALUES (1, 'California'), (2, 'Texas'), (3, 'New York'), (4, 'Florida'), (5, 'Illinois');","WITH StateSpendingSum AS (SELECT ss.StateName, SUM(ss.Spending) AS TotalSpending FROM StateSpending ss INNER JOIN Departments d ON ss.DepartmentID = d.DepartmentID GROUP BY ss.StateName), RankedStates AS (SELECT StateName, TotalSpending, DENSE_RANK() OVER (ORDER BY TotalSpending DESC) AS Rank FROM StateSpendingSum) SELECT StateName, TotalSpending FROM RankedStates WHERE Rank <= 5;","The query starts by creating a common table expression (CTE) to sum the total spending for each state. It then ranks the states based on total spending in descending order. Finally, it selects the top 5 states with the highest total spending using the DENSE_RANK function."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report that shows the top 5 shows with the highest average viewer count across all regions for the past week, and then update the record of the show with the highest average count with a 'popular' tag.","CREATE TABLE ShowViewership (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), Region VARCHAR(50), AvgViewerCount DECIMAL, Tag VARCHAR(50) DEFAULT NULL); INSERT INTO ShowViewership (ShowID, ShowName, Region, AvgViewerCount) VALUES (1, 'Game of Thrones', 'North America', 3.5), (2, 'Breaking Bad', 'Europe', 2.8), (3, 'Money Heist', 'Asia', 2.5), (4, 'Stranger Things', 'North America', 3.2), (5, 'The Witcher', 'Europe', 3.0);","WITH RankedShows AS (SELECT ShowName, AvgViewerCount, DENSE_RANK() OVER (ORDER BY AvgViewerCount DESC) AS Rank FROM ShowViewership) UPDATE ShowViewership SET Tag = 'popular' WHERE ShowName = (SELECT ShowName FROM RankedShows WHERE Rank = 1); SELECT ShowName, AvgViewerCount FROM RankedShows WHERE Rank <= 5;","This query first creates a common table expression (CTE) to rank the shows based on their average viewer count in descending order using the DENSE_RANK function. It then updates the 'Tag' column of the show with the highest average viewer count to 'popular'. Finally, it selects the top 5 shows with the highest viewer count."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve and display the common species found in both forest and marine conservation areas.,"CREATE TABLE ForestSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50)); CREATE TABLE MarineSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50)); INSERT INTO ForestSpecies (SpeciesID, SpeciesName) VALUES (1, 'Deer'), (2, 'Fox'), (3, 'Bear'), (4, 'Eagle'); INSERT INTO MarineSpecies (SpeciesID, SpeciesName) VALUES (1, 'Shark'), (2, 'Dolphin'), (3, 'Seal'), (4, 'Eagle');",SELECT SpeciesName FROM ForestSpecies INTERSECT SELECT SpeciesName FROM MarineSpecies;,The query retrieves the names of species that are found in both the ForestSpecies and MarineSpecies tables by using the INTERSECT set operation to find common entries.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert data related to crop yield and farming practices from various farms and then provide an analysis of the average yield per crop type for farms that follow organic farming methods.,"CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), FarmingMethod VARCHAR(50)); CREATE TABLE CropYields (YieldID INT PRIMARY KEY, FarmID INT, CropType VARCHAR(50), Yield DECIMAL); INSERT INTO Farms (FarmID, FarmName, FarmingMethod) VALUES (1, 'Farm A', 'Organic'), (2, 'Farm B', 'Conventional'), (3, 'Farm C', 'Organic'); INSERT INTO CropYields (YieldID, FarmID, CropType, Yield) VALUES (1, 1, 'Wheat', 1000.0), (2, 2, 'Corn', 1500.0), (3, 1, 'Rice', 800.0), (4, 3, 'Wheat', 900.0), (5, 2, 'Rice', 1200.0);","WITH OrganicFarms AS (SELECT FarmID FROM Farms WHERE FarmingMethod = 'Organic') SELECT CropType, AVG(Yield) AS AvgYield FROM CropYields WHERE FarmID IN (SELECT FarmID FROM OrganicFarms) GROUP BY CropType;",The query creates a common table expression (CTE) to select all farms that follow organic farming methods. It then calculates the average yield per crop type for these farms using the AVG function and the GROUP BY clause.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Show me the total carbon emissions produced by each country in 2020 and compare it with the emissions from 2019.,"CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, EmissionAmount DECIMAL); INSERT INTO CarbonEmissions (Country, Year, EmissionAmount) VALUES ('USA', 2019, 5000.0), ('USA', 2020, 4800.0), ('China', 2019, 5500.0), ('China', 2020, 5800.0), ('India', 2019, 2000.0), ('India', 2020, 2100.0);","SELECT Country, SUM(CASE WHEN Year = 2019 THEN EmissionAmount ELSE 0 END) AS Emission2019, SUM(CASE WHEN Year = 2020 THEN EmissionAmount ELSE 0 END) AS Emission2020 FROM CarbonEmissions WHERE Year IN (2019, 2020) GROUP BY Country;",The query is using the CASE statement to pivot the data by year. It sums the emission amounts for each country for 2019 and 2020 separately. The WHERE clause is used to limit the data to only these two years.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the regions where climate initiatives have been consistently funded for at least 3 consecutive years and which have also seen an increase in biodiversity metrics.,"CREATE TABLE ClimateInitiatives (InitiativeID INT PRIMARY KEY, Region VARCHAR(50), Year INT, FundingAmount DECIMAL); CREATE TABLE BiodiversityMetrics (MetricID INT PRIMARY KEY, Region VARCHAR(50), Year INT, BiodiversityIndex DECIMAL);","BEGIN TRANSACTION; WITH FundedRegions AS (SELECT Region, Year FROM ClimateInitiatives GROUP BY Region, Year HAVING COUNT(*) >= 3), ImprovedBiodiversity AS (SELECT Region FROM BiodiversityMetrics GROUP BY Region HAVING MAX(BiodiversityIndex) > MIN(BiodiversityIndex)) SELECT DISTINCT Region FROM FundedRegions INTERSECT SELECT DISTINCT Region FROM ImprovedBiodiversity; COMMIT;","The query begins a transaction and creates two Common Table Expressions (CTEs). The first CTE, FundedRegions, identifies regions that have received funding for climate initiatives for at least 3 consecutive years. The second CTE, ImprovedBiodiversity, identifies regions that have seen an increase in their biodiversity metrics over time. The final SELECT statement uses the INTERSECT operation to find regions that appear in both CTEs, indicating they both received consistent funding and saw biodiversity improvements. The transaction is then committed."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 10 regions with the highest average annual temperature increase over the past 20 years and the corresponding protected areas in those regions.,"CREATE TABLE TemperatureData (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), Year INT, AvgTemperature DECIMAL); CREATE TABLE ProtectedAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(100), RegionID INT, AreaSize DECIMAL); INSERT INTO TemperatureData (RegionID, RegionName, Year, AvgTemperature) VALUES (1, 'Region A', 2001, 15.2), (1, 'Region A', 2021, 16.8), (2, 'Region B', 2001, 14.5), (2, 'Region B', 2021, 16.1), (3, 'Region C', 2001, 13.3), (3, 'Region C', 2021, 14.7); INSERT INTO ProtectedAreas (AreaID, AreaName, RegionID, AreaSize) VALUES (1, 'Reserve A1', 1, 200.5), (2, 'Reserve B1', 2, 150.0), (3, 'Reserve C1', 3, 180.3);","WITH TempIncrease AS (SELECT RegionID, RegionName, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS TempChange FROM TemperatureData WHERE Year BETWEEN (SELECT MAX(Year) - 20 FROM TemperatureData) AND (SELECT MAX(Year) FROM TemperatureData) GROUP BY RegionID, RegionName), RankedRegions AS (SELECT RegionName, TempChange, DENSE_RANK() OVER (ORDER BY TempChange DESC) AS Rank FROM TempIncrease) SELECT r.RegionName, r.TempChange, p.AreaName FROM RankedRegions r JOIN ProtectedAreas p ON r.RegionID = p.RegionID WHERE r.Rank <= 10;","The query first calculates the temperature change over the past 20 years for each region using a common table expression (CTE). It then ranks these regions based on the temperature change in descending order. Finally, it selects the top 10 regions with the highest temperature increase and lists the protected areas in those regions by joining with the ProtectedAreas table."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 countries with the highest percentage of sustainable fashion brands based on consumer reviews and region.,"CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(100), Country VARCHAR(100), IsSustainable BOOLEAN); CREATE TABLE ConsumerReviews (ReviewID INT PRIMARY KEY, BrandID INT, ReviewScore DECIMAL, ReviewText TEXT, FOREIGN KEY (BrandID) REFERENCES FashionBrands(BrandID)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, Country VARCHAR(100), RegionName VARCHAR(100));","WITH BrandSustainability AS (SELECT Country, COUNT(*) AS SustainableCount, (SELECT COUNT(*) FROM FashionBrands WHERE Country = fb.Country) AS TotalBrands FROM FashionBrands fb WHERE IsSustainable = TRUE GROUP BY Country), CountrySustainability AS (SELECT bs.Country, (bs.SustainableCount * 100.0 / bs.TotalBrands) AS SustainabilityPercentage FROM BrandSustainability bs) SELECT cs.Country, cs.SustainabilityPercentage FROM CountrySustainability cs JOIN Regions r ON cs.Country = r.Country ORDER BY cs.SustainabilityPercentage DESC LIMIT 5;","The query first creates a common table expression (CTE) called BrandSustainability to count the number of sustainable fashion brands per country and the total number of brands per country. Then, a second CTE, CountrySustainability, calculates the sustainability percentage for each country. Finally, the main query selects the top 5 countries with the highest sustainability percentages and orders them in descending order. The results are filtered to include only countries listed in the Regions table."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Show me the list of models that are both electric and have been sold in Asia and Europe.,"CREATE TABLE Cars (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), CarType VARCHAR(20)); INSERT INTO Cars (ModelID, ModelName, CarType) VALUES (1, 'Tesla Model S', 'Electric'), (2, 'Toyota Prius', 'Hybrid'), (3, 'Nissan Leaf', 'Electric'), (4, 'BMW i3', 'Electric'), (5, 'Chevrolet Bolt', 'Electric'); CREATE TABLE CarSales (SaleID INT PRIMARY KEY, ModelID INT, Region VARCHAR(20)); INSERT INTO CarSales (SaleID, ModelID, Region) VALUES (1, 1, 'Asia'), (2, 1, 'Europe'), (3, 2, 'North America'), (4, 3, 'Asia'), (5, 3, 'Europe'), (6, 4, 'Europe'), (7, 5, 'North America');","WITH ElectricCars AS (SELECT ModelID FROM Cars WHERE CarType = 'Electric'), AsiaSales AS (SELECT ModelID FROM CarSales WHERE Region = 'Asia'), EuropeSales AS (SELECT ModelID FROM CarSales WHERE Region = 'Europe') SELECT ModelName FROM Cars WHERE ModelID IN (SELECT ModelID FROM ElectricCars INTERSECT SELECT ModelID FROM AsiaSales INTERSECT SELECT ModelID FROM EuropeSales);","The query first creates three separate views: one for electric cars, one for cars sold in Asia, and one for cars sold in Europe. It then uses the INTERSECT operation to find the intersection of these three views - i.e., electric cars that have been sold in both Asia and Europe. The result is then used to retrieve the model names from the Cars table."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Start a transaction to record a new public policy proposal, insert the relevant details, and then commit the transaction.","CREATE TABLE PublicPolicyProposals (ProposalID INT PRIMARY KEY, ProposalName VARCHAR(100), ProposalDate DATE, ProposalDescription TEXT, ProposerID INT, Status VARCHAR(50)); CREATE TABLE Proposers (ProposerID INT PRIMARY KEY, ProposerName VARCHAR(100), ProposerRole VARCHAR(50));","BEGIN TRANSACTION; INSERT INTO PublicPolicyProposals (ProposalID, ProposalName, ProposalDate, ProposalDescription, ProposerID, Status) VALUES (1, 'Environmental Policy Act', '2023-12-01', 'A proposal aimed at reducing carbon emissions by 30% over the next decade.', 101, 'Pending'); COMMIT;","The query begins a transaction to ensure atomicity. It inserts a new record into the PublicPolicyProposals table with details such as ProposalID, ProposalName, ProposalDate, ProposalDescription, ProposerID, and Status. Finally, it commits the transaction to make the insert operation permanent."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the top 5 projects with the highest funding that are specifically aimed at biodiversity conservation in Asia.,"CREATE TABLE Projects (ID INT PRIMARY KEY, ProjectName VARCHAR(50), Region VARCHAR(50), Purpose VARCHAR(100), Funding DECIMAL); INSERT INTO Projects (ID, ProjectName, Region, Purpose, Funding) VALUES (1, 'Coral Reef Conservation', 'Asia', 'Biodiversity Conservation', 1000000), (2, 'Rainforest Restoration', 'South America', 'Biodiversity Conservation', 2000000), (3, 'Mangrove Plantation', 'Asia', 'Biodiversity Conservation', 1500000), (4, 'Endangered Species Breeding Program', 'Africa', 'Biodiversity Conservation', 500000), (5, 'Wildlife Sanctuary Expansion', 'Asia', 'Biodiversity Conservation', 1800000);","WITH RankedProjects AS (SELECT ProjectName, Funding, DENSE_RANK() OVER (ORDER BY Funding DESC) as Rank FROM Projects WHERE Region = 'Asia' AND Purpose = 'Biodiversity Conservation') SELECT ProjectName, Funding FROM RankedProjects WHERE Rank <= 5;",The query first creates a common table expression (CTE) to rank the biodiversity conservation projects in Asia based on the funding they received in descending order. It then selects the top 5 projects with the highest funding using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects",Create a table that stores the total revenue from different music genres in various regions and then display the top 5 genres which have the highest revenue.,"CREATE TABLE MusicRevenue (GenreID INT PRIMARY KEY, GenreName VARCHAR(50), Region VARCHAR(50), Revenue DECIMAL); INSERT INTO MusicRevenue (GenreID, GenreName, Region, Revenue) VALUES (1, 'Pop', 'North America', 1000.5), (2, 'Rock', 'Europe', 900.0), (3, 'Jazz', 'Asia', 800.0), (4, 'Classical', 'North America', 700.7), (5, 'Hip Hop', 'Europe', 600.0);","WITH RankedGenres AS (SELECT GenreName, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM MusicRevenue) SELECT GenreName, Revenue FROM RankedGenres WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) that ranks music genres based on their total revenue in descending order. It then selects the top 5 genres with the highest revenue using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Can you identify the top 3 travel destinations with the highest visitor growth rate over the past year?,"CREATE TABLE TravelTrends (Destination VARCHAR(50), VisitorCount YEAR INT, VisitorCount INT, PRIMARY KEY(Destination, Year)); INSERT INTO TravelTrends (Destination, Year, VisitorCount) VALUES ('Paris', 2021, 100000), ('Rome', 2021, 90000), ('New York', 2021, 110000), ('Paris', 2020, 80000), ('Rome', 2020, 75000), ('New York', 2020, 95000);","WITH GrowthRate AS (SELECT Destination, ((VisitorCount - LAG(VisitorCount) OVER (PARTITION BY Destination ORDER BY Year))/LAG(VisitorCount) OVER (PARTITION BY Destination ORDER BY Year))*100 AS GrowthRate FROM TravelTrends) SELECT Destination, GrowthRate FROM GrowthRate ORDER BY GrowthRate DESC LIMIT 3;","The SQL query calculates the growth rate for each travel destination by subtracting the previous year's visitor count from the current year's visitor count, dividing by the previous year's visitor count, then multiplying by 100. It then orders the results in descending order by growth rate, and selects the top 3 destinations."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 products with the highest total sales from each region, taking into account any transactions that were rolled back.","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Price DECIMAL); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, QuantitySold INT, Region VARCHAR(50), SaleStatus VARCHAR(15)); INSERT INTO Products (ProductID, ProductName, Price) VALUES (1, 'Dress', 75.0), (2, 'Shirt', 50.0), (3, 'Jeans', 80.0), (4, 'Jacket', 120.0), (5, 'Shoes', 100.0); INSERT INTO Sales (SaleID, ProductID, QuantitySold, Region, SaleStatus) VALUES (1, 1, 100, 'North America', 'COMMITTED'), (2, 2, 150, 'Europe', 'COMMITTED'), (3, 3, 200, 'Asia', 'ROLLEDBACK'), (4, 4, 250, 'North America', 'COMMITTED'), (5, 5, 300, 'Europe', 'COMMITTED');","WITH FilteredSales AS (SELECT * FROM Sales WHERE SaleStatus = 'COMMITTED'), JoinedSales AS (SELECT fs.SaleID, fs.ProductID, fs.QuantitySold, fs.Region, fs.SaleStatus, p.ProductName, p.Price FROM FilteredSales fs JOIN Products p ON fs.ProductID = p.ProductID), SalesWithTotal AS (SELECT js.Region, js.ProductName, (js.QuantitySold * js.Price) AS TotalSales FROM JoinedSales js) SELECT Region, ProductName, RANK() OVER(PARTITION BY Region ORDER BY TotalSales DESC) AS Rank FROM SalesWithTotal WHERE Rank <= 5;","The query first filters out any sales that were rolled back using a common table expression (CTE). It then joins the remaining sales with the products table to get the product names and prices. Another CTE is used to calculate the total sales for each product in each region. Finally, a SELECT statement with a window function is used to rank the products based on total sales within each region, and the top 5 products for each region are selected."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records","Create a table to store details about different programming languages, their usage in various industries and track their trend over last 5 years. Then, provide a list of top 3 programming languages that have shown the most growth in the 'Healthcare' industry.","CREATE TABLE ProgrammingLanguages (LangID INT PRIMARY KEY, LangName VARCHAR(50), Industry VARCHAR(50), Year INT, Usage DECIMAL); INSERT INTO ProgrammingLanguages (LangID, LangName, Industry, Year, Usage) VALUES (1, 'Python', 'Healthcare', 2017, 15.0), (2, 'Java', 'Healthcare', 2017, 25.0), (3, 'JavaScript', 'Healthcare', 2017, 10.0), (4, 'Python', 'Healthcare', 2018, 20.0), (5, 'Java', 'Healthcare', 2018, 27.0), (6, 'JavaScript', 'Healthcare', 2018, 12.5), (7, 'Python', 'Healthcare', 2019, 22.5), (8, 'Java', 'Healthcare', 2019, 30.0), (9, 'JavaScript', 'Healthcare', 2019, 15.0), (10, 'Python', 'Healthcare', 2020, 30.0), (11, 'Java', 'Healthcare', 2020, 32.5), (12, 'JavaScript', 'Healthcare', 2020, 17.5);","WITH Growth AS (SELECT LangName, (MAX(Usage) - MIN(Usage)) as Growth FROM ProgrammingLanguages WHERE Industry = 'Healthcare' GROUP BY LangName) SELECT LangName, Growth FROM Growth ORDER BY Growth DESC LIMIT 3;","The SQL query creates a common table expression (CTE) to calculate the growth of each programming language in the Healthcare industry over the years. This is done by subtracting the minimum usage (representing the usage from 5 years ago) from the maximum usage (representing the latest usage). The result is a table with each language and its corresponding growth, which is then ordered in descending order to show the languages with the most growth. The query then returns the top 3 languages with the highest growth."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 3 highest scoring athletes across different sports, excluding any athlete who has been involved in more than one sport.","CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), Score INT); CREATE TABLE AthleteParticipation (AthleteID INT, Sport VARCHAR(50), PRIMARY KEY(AthleteID, Sport));","WITH SingleSportAthletes AS (SELECT AthleteID FROM AthleteParticipation GROUP BY AthleteID HAVING COUNT(DISTINCT Sport) = 1), TopScorers AS (SELECT AthleteName, Sport, Score, ROW_NUMBER() OVER (PARTITION BY Sport ORDER BY Score DESC) AS Rank FROM AthletePerformance WHERE AthleteID IN (SELECT AthleteID FROM SingleSportAthletes)) SELECT AthleteName, Sport, Score FROM TopScorers WHERE Rank <= 3;","The query first creates a common table expression (CTE) called SingleSportAthletes to identify athletes who participate in only one sport. It then creates another CTE called TopScorers to rank these athletes based on their scores in descending order within each sport. Finally, it selects the top 3 athletes by score for each sport."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Find out the top 5 AI technologies that received the highest investment in the last quarter of 2021.,"CREATE TABLE AiTechInvestments (InvestmentID INT PRIMARY KEY, TechName VARCHAR(50), Quarter VARCHAR(10), Year INT, InvestmentAmount DECIMAL); INSERT INTO AiTechInvestments (InvestmentID, TechName, Quarter, Year, InvestmentAmount) VALUES (1, 'Natural Language Processing', 'Q4', 2021, 5000000.00), (2, 'Machine Learning', 'Q4', 2021, 7000000.00), (3, 'Robotics', 'Q4', 2021, 4000000.00), (4, 'Computer Vision', 'Q4', 2021, 6000000.00), (5, 'Speech Recognition', 'Q4', 2021, 8000000.00);","WITH RankedTech AS (SELECT TechName, InvestmentAmount, DENSE_RANK() OVER (ORDER BY InvestmentAmount DESC) AS Rank FROM AiTechInvestments WHERE Quarter = 'Q4' AND Year = 2021) SELECT TechName, InvestmentAmount FROM RankedTech WHERE Rank <= 5;",This SQL query first creates a common table expression (CTE) and ranks AI technologies based on the investment amount they received in descending order for the last quarter of 2021. It then selects the top 5 AI technologies with the highest investment using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total sales of electric vehicles by each manufacturer in the year 2022.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, ManufacturerID INT, SaleDate DATE, UnitsSold INT); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), IsElectric BOOLEAN); CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50));","SELECT M.ManufacturerName, SUM(VS.UnitsSold) AS TotalUnitsSold FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID INNER JOIN Manufacturers M ON VS.ManufacturerID = M.ManufacturerID WHERE V.IsElectric = TRUE AND YEAR(VS.SaleDate) = 2022 GROUP BY M.ManufacturerName;","The query joins the VehicleSales table with the Vehicles and Manufacturers tables to obtain the required details. It filters the results to include only electric vehicles and sales made in the year 2022. Finally, it groups the results by manufacturer and calculates the total units sold for each manufacturer."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the number of goals scored by an athlete in a specific match.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, MatchDate DATE, Sport VARCHAR(50)); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, AthleteID INT, MatchID INT, Goals INT, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (MatchID) REFERENCES Matches(MatchID));",UPDATE Performance SET Goals = 3 WHERE AthleteID = 1 AND MatchID = 2;,This query updates the number of goals to 3 for the athlete with AthleteID 1 in the match with MatchID 2 by setting the 'Goals' field value to 3 in the 'Performance' table.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the booking status to 'Confirmed' for all the bookings made by VIP customers in the last month.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), CustomerStatus VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, BookingDate DATE, BookingStatus VARCHAR(50), FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));","UPDATE Bookings SET BookingStatus = 'Confirmed' WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE CustomerStatus = 'VIP') AND BookingDate >= DATEADD(MONTH, -1, GETDATE());","The query updates the 'BookingStatus' to 'Confirmed' for all records in the 'Bookings' table where the 'CustomerID' is found in the 'Customers' table with a 'CustomerStatus' of 'VIP'. Additionally, it ensures that the 'BookingDate' is within the last month by using the DATEADD function to subtract one month from the current date and only selecting bookings that meet this criterion."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Add details of a new public policy initiative and its estimated budgeted cost into the policy database, then retrieve all policies that have a budgeted cost above $500,000, sorted by cost in descending order.","CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), PolicyDescription VARCHAR(255), EstimatedCost DECIMAL(10,2)); INSERT INTO PublicPolicy (PolicyID, PolicyName, PolicyDescription, EstimatedCost) VALUES (1, 'Clean Energy Initiative', 'A policy aimed at promoting the use of clean and renewable energy sources', 750000.00), (2, 'Digital Literacy Program', 'A program to improve digital literacy among senior citizens', 300000.00), (3, 'Affordable Housing Scheme', 'A policy to provide affordable housing options to low-income families', 1200000.00), (4, 'Healthcare Reform', 'A policy to improve the quality and affordability of healthcare', 2500000.00), (5, 'Education Reform', 'A policy to improve the quality of education and accessibility to educational resources', 1000000.00);","INSERT INTO PublicPolicy (PolicyID, PolicyName, PolicyDescription, EstimatedCost) VALUES (6, 'New Public Policy', 'Description of the new public policy', 600000.00); SELECT PolicyName, EstimatedCost FROM PublicPolicy WHERE EstimatedCost > 500000 ORDER BY EstimatedCost DESC;","The query first inserts a new row into the PublicPolicy table, representing a new policy initiative with an estimated cost of $600,000. The query then selects all policy names and their estimated costs from the PublicPolicy table, but only for those policies where the estimated cost is more than $500,000. The result is sorted in descending order by the estimated cost."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 countries with the highest number of endangered species in each category and the associated conservation efforts.,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Category VARCHAR(50), Status VARCHAR(50), Country VARCHAR(50)); INSERT INTO Species (SpeciesID, SpeciesName, Category, Status, Country) VALUES (1, 'Amur Leopard', 'Mammals', 'Endangered', 'Russia'), (2, 'Black Rhino', 'Mammals', 'Endangered', 'Kenya'), (3, 'Hawksbill Turtle', 'Reptiles', 'Endangered', 'Australia'), (4, 'Asian Elephant', 'Mammals', 'Endangered', 'India'), (5, 'Orangutan', 'Mammals', 'Endangered', 'Indonesia'); CREATE TABLE ConservationEfforts (EffortID INT PRIMARY KEY, SpeciesID INT, Effort VARCHAR(100)); INSERT INTO ConservationEfforts (EffortID, SpeciesID, Effort) VALUES (1, 1, 'Protection of habitat'), (2, 2, 'Anti-poaching measures'), (3, 3, 'Protection of nesting sites'), (4, 4, 'Protection of habitat'), (5, 5, 'Anti-poaching measures');","WITH EndangeredSpecies AS (SELECT Country, Category, COUNT(*) AS Total FROM Species WHERE Status = 'Endangered' GROUP BY Country, Category) SELECT Country, Category, Total, CE.Effort FROM EndangeredSpecies ES JOIN ConservationEfforts CE ON ES.SpeciesID = CE.SpeciesID WHERE Total IN (SELECT TOP 5 Total FROM EndangeredSpecies ORDER BY Total DESC);","The query first creates a common table expression named EndangeredSpecies that groups the Species table by Country and Category and counts the number of endangered species for each group. It then joins this table with the ConservationEfforts table on the SpeciesID field and selects the Country, Category, total number of endangered species, and the associated conservation effort. The WHERE clause filters the data to only include groups that are in the top 5 in terms of the total number of endangered species."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total revenue from digital content subscriptions and the total audience engagement for each content creator, using an inner join between the ContentCreators and SubscriptionRevenue tables.","CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(50), JoinDate DATE); CREATE TABLE SubscriptionRevenue (RevenueID INT PRIMARY KEY, CreatorID INT, RevenueAmount DECIMAL, SubscriptionDate DATE, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID)); CREATE TABLE AudienceEngagement (EngagementID INT PRIMARY KEY, CreatorID INT, EngagementType VARCHAR(50), EngagementCount INT, EngagementDate DATE, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID));","SELECT CC.CreatorName, SUM(SR.RevenueAmount) AS TotalRevenue, SUM(AE.EngagementCount) AS TotalEngagement FROM ContentCreators CC INNER JOIN SubscriptionRevenue SR ON CC.CreatorID = SR.CreatorID INNER JOIN AudienceEngagement AE ON CC.CreatorID = AE.CreatorID GROUP BY CC.CreatorName;",The SQL query first joins the ContentCreators table with the SubscriptionRevenue table on the CreatorID to get the revenue details for each creator. It then performs another inner join with the AudienceEngagement table on CreatorID to get the engagement details. The query groups the data by CreatorName and calculates the total revenue and total engagement for each content creator by using the SUM function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Please provide a summary of the most popular travel destinations based on customer bookings, organized in descending order.","CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, Destination VARCHAR(50), BookingDate DATE); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), CustomerEmail VARCHAR(50));","SELECT Destination, COUNT(BookingID) AS BookingCount FROM Bookings GROUP BY Destination ORDER BY BookingCount DESC;",The query selects the destination and counts the number of bookings for each destination. It groups the results by the destination and then orders the count of bookings in descending order to show the most popular travel destinations based on customer bookings.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects",Create a table for yearly crop yield data for different regions and list the top 5 regions with the highest average yield for wheat in the last 5 years.,"CREATE TABLE CropYield (Year INT, Region VARCHAR(50), Crop VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (Year, Region, Crop, Yield) VALUES (2016, 'North America', 'Wheat', 45.5), (2017, 'Europe', 'Wheat', 42.0), (2018, 'Asia', 'Wheat', 38.0), (2019, 'North America', 'Wheat', 48.7), (2020, 'Europe', 'Wheat', 44.0), (2016, 'South America', 'Wheat', 40.0), (2017, 'Africa', 'Wheat', 35.0), (2018, 'Australia', 'Wheat', 46.0), (2019, 'Asia', 'Wheat', 50.0), (2020, 'North America', 'Wheat', 51.0);","WITH RankedRegions AS (SELECT Region, AVG(Yield) as AvgYield, RANK() OVER (ORDER BY AVG(Yield) DESC) AS Rank FROM CropYield WHERE Crop = 'Wheat' AND Year > 2015 GROUP BY Region) SELECT Region, AvgYield FROM RankedRegions WHERE Rank <= 5;",The query first creates a common table expression (CTE) to calculate the average yield for each region over the last 5 years for wheat. The RANK function is used to rank the regions based on their average yield in descending order. It then selects the top 5 regions with the highest average yield using the conditions in the WHERE clause.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve the top 5 dealerships in Europe that have the highest sales of electric vehicles in the last year, and rollback the transaction if there is an error.","CREATE TABLE Dealership (DealershipID INT PRIMARY KEY, DealershipName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Dealership (DealershipID, DealershipName, Region) VALUES (1, 'Dealer1', 'Europe'), (2, 'Dealer2', 'Asia'), (3, 'Dealer3', 'North America'), (4, 'Dealer4', 'Europe'), (5, 'Dealer5', 'Europe'); CREATE TABLE Sales (SalesID INT PRIMARY KEY, DealershipID INT, VehicleType VARCHAR(50), SaleDate DATE, NoOfVehicles INT); INSERT INTO Sales (SalesID, DealershipID, VehicleType, SaleDate, NoOfVehicles) VALUES (1, 1, 'Electric', '2020-05-15', 100), (2, 2, 'Gas', '2020-07-01', 50), (3, 3, 'Electric', '2020-09-20', 200), (4, 4, 'Electric', '2020-11-15', 150), (5, 5, 'Electric', '2020-12-30', 120);","BEGIN TRANSACTION; TRY BEGIN SELECT D.DealershipName, SUM(S.NoOfVehicles) AS TotalSales FROM Dealership D INNER JOIN Sales S ON D.DealershipID = S.DealershipID WHERE D.Region = 'Europe' AND S.VehicleType = 'Electric' AND YEAR(S.SaleDate) = YEAR(DATEADD(year, -1, GETDATE())) GROUP BY D.DealershipName ORDER BY TotalSales DESC TOP 5; COMMIT; END TRY BEGIN CATCH ROLLBACK; END CATCH;","The query starts a transaction and then tries to execute the main query. The query joins the Dealership and Sales tables on DealershipID, filters for dealerships in Europe that have sold electric vehicles in the last year, and calculates the total number of vehicles sold by each dealership. The dealerships are then ordered by total sales in descending order, and the top 5 are returned. If there is an error during the execution of the main query, the transaction is rolled back and no changes are made."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store the annual budget allocated to different departments across various states, and then display the top 5 states with the highest total budget.","CREATE TABLE DepartmentBudget (State VARCHAR(50), Department VARCHAR(50), BudgetAmount DECIMAL); INSERT INTO DepartmentBudget (State, Department, BudgetAmount) VALUES ('California', 'Education', 25000.00), ('New York', 'Health', 18000.00), ('Texas', 'Defense', 22000.00), ('Florida', 'Agriculture', 15000.00), ('Illinois', 'Transport', 20000.00);","WITH RankedStates AS (SELECT State, SUM(BudgetAmount) as TotalBudget, DENSE_RANK() OVER (ORDER BY SUM(BudgetAmount) DESC) AS Rank FROM DepartmentBudget GROUP BY State) SELECT State, TotalBudget FROM RankedStates WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) to aggregate the total budget allocated to each state, and then ranks them in descending order. It finally selects the states and their corresponding total budget if their rank is within the top 5."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the top 3 most popular sustainable fashion brands among different age groups.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), PopularityIndex DECIMAL); CREATE TABLE ConsumerBehavior (BehaviorID INT PRIMARY KEY, ConsumerID INT, BrandID INT, AgeGroup VARCHAR(10)); CREATE TABLE SustainableBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainabilityScore DECIMAL); INSERT INTO FashionTrends (TrendID, TrendName, PopularityIndex) VALUES (1, 'Eco-Friendly', 88.5); INSERT INTO ConsumerBehavior (BehaviorID, ConsumerID, BrandID, AgeGroup) VALUES (1, 101, 1, '18-25'); INSERT INTO SustainableBrands (BrandID, BrandName, SustainabilityScore) VALUES (1, 'BrandA', 95.0);","WITH RankedBrands AS (SELECT sb.BrandName, cb.AgeGroup, COUNT(cb.ConsumerID) AS PopularityCount, DENSE_RANK() OVER (PARTITION BY cb.AgeGroup ORDER BY COUNT(cb.ConsumerID) DESC) AS Rank FROM ConsumerBehavior cb INNER JOIN SustainableBrands sb ON cb.BrandID = sb.BrandID GROUP BY sb.BrandName, cb.AgeGroup) SELECT BrandName, AgeGroup, PopularityCount FROM RankedBrands WHERE Rank <= 3;","The query first creates a common table expression (CTE) named RankedBrands that calculates the popularity of sustainable brands within different age groups by counting the occurrences of each brand. It ranks these brands within each age group using the DENSE_RANK function. Finally, it selects the top 3 most popular brands for each age group by filtering the ranks to be less than or equal to 3."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 crops with the highest yield per acre for the current season across North America and Europe, and compare it with the previous season. If any crop does not appear in the top 5 for the current season but was present in the previous season, list it separately.","CREATE TABLE CurrentSeasonYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), YieldPerAcre DECIMAL); INSERT INTO CurrentSeasonYields (CropID, CropName, Region, YieldPerAcre) VALUES (1, 'Wheat', 'North America', 2.5), (2, 'Corn', 'Europe', 3.0), (3, 'Rice', 'North America', 2.0), (4, 'Soybeans', 'Europe', 1.5), (5, 'Barley', 'North America', 1.8); CREATE TABLE PreviousSeasonYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), YieldPerAcre DECIMAL); INSERT INTO PreviousSeasonYields (CropID, CropName, Region, YieldPerAcre) VALUES (1, 'Wheat', 'North America', 2.3), (2, 'Corn', 'Europe', 2.9), (3, 'Rye', 'North America', 2.1), (4, 'Soybeans', 'Europe', 1.6), (5, 'Oats', 'North America', 1.7);","WITH RankedCrops AS (SELECT CropName, YieldPerAcre, DENSE_RANK() OVER (ORDER BY YieldPerAcre DESC) AS Rank FROM CurrentSeasonYields WHERE Region IN ('North America', 'Europe')), PreviousTopCrops AS (SELECT CropName FROM PreviousSeasonYields WHERE CropName NOT IN (SELECT CropName FROM RankedCrops WHERE Rank <= 5)) SELECT CropName, YieldPerAcre FROM RankedCrops WHERE Rank <= 5 UNION ALL SELECT CropName, NULL FROM PreviousTopCrops;","The query first ranks the crops based on their yield per acre in descending order for the current season in both North America and Europe. It then creates a separate list of crops that were in the top 5 in the previous season but not in the current season. The final result combines these two lists, showing the top 5 crops for the current season with their yields and the crops that dropped out of the top 5 with their yields set to NULL."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average customer ratings for different hotels, but only include hotels that have received at least 50 reviews.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100));CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, CustomerID INT, Rating INT, ReviewDate DATE, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","SELECT h.HotelName, AVG(r.Rating) AS AvgRating FROM Hotels h JOIN Reviews r ON h.HotelID = r.HotelID GROUP BY h.HotelName HAVING COUNT(r.ReviewID) >= 50;",The query joins the Hotels and Reviews tables on HotelID. It groups the results by HotelName and calculates the average rating for each hotel. The HAVING clause ensures that only hotels with at least 50 reviews are included in the result.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert new fan engagement data and then retrieve all engagements related to soccer events that occurred in the current year.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, Name VARCHAR(50), Sport VARCHAR(50), Country VARCHAR(50));CREATE TABLE Events (EventID INT PRIMARY KEY, Sport VARCHAR(50), EventName VARCHAR(100), EventDate DATE);CREATE TABLE FanEngagement (EngagementID INT PRIMARY KEY, EventID INT, FanID INT, EngagementType VARCHAR(50), EngagementDate DATE);INSERT INTO Athletes (AthleteID, Name, Sport, Country) VALUES (1, 'John Doe', 'Soccer', 'USA'); INSERT INTO Events (EventID, Sport, EventName, EventDate) VALUES (1, 'Soccer', 'World Cup', '2023-07-15');","INSERT INTO FanEngagement (EngagementID, EventID, FanID, EngagementType, EngagementDate) VALUES (1, 1, 1, 'Social Media', CURRENT_DATE); SELECT * FROM FanEngagement WHERE EventID IN (SELECT EventID FROM Events WHERE Sport = 'Soccer' AND YEAR(EventDate) = YEAR(CURRENT_DATE));",The query first inserts a new record into the FanEngagement table with the current date. It then retrieves all fan engagements related to soccer events that took place in the current year by leveraging a subquery. The subquery filters events that are of the sport 'Soccer' and have occurred within the current year. The main query then selects all records from the FanEngagement table that match the filtered EventIDs.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Generate a report showing the total number of vehicles sold by each manufacturer for the current year in each region, focusing on eco-friendly vehicles.","CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(100)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ManufacturerID INT, VehicleType VARCHAR(50), ModelYear INT); CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, RegionID INT, SaleYear INT); INSERT INTO Manufacturers (ManufacturerID, ManufacturerName) VALUES (1, 'Tesla'), (2, 'Toyota'), (3, 'Hyundai'); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'); INSERT INTO Vehicles (VehicleID, ManufacturerID, VehicleType, ModelYear) VALUES (1, 1, 'Electric', 2021), (2, 2, 'Hybrid', 2021), (3, 3, 'Hydrogen', 2021); INSERT INTO VehicleSales (SaleID, VehicleID, RegionID, SaleYear) VALUES (1, 1, 1, 2021), (2, 2, 2, 2021), (3, 3, 3, 2021);","SELECT M.ManufacturerName, R.RegionName, COUNT(*) AS TotalSales FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID INNER JOIN Manufacturers M ON V.ManufacturerID = M.ManufacturerID INNER JOIN Regions R ON VS.RegionID = R.RegionID WHERE V.VehicleType IN ('Electric', 'Hybrid', 'Hydrogen') AND VS.SaleYear = YEAR(CURRENT_DATE) GROUP BY M.ManufacturerName, R.RegionName;","The SQL query joins four tables: VehicleSales, Vehicles, Manufacturers, and Regions. It first joins VehicleSales and Vehicles on VehicleID, then joins with Manufacturers on ManufacturerID, and finally with Regions on RegionID. The WHERE clause filters for eco-friendly vehicles (Electric, Hybrid, Hydrogen) and sales made in the current year. The SELECT statement groups the results by ManufacturerName and RegionName, and counts the total number of sales in each group."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Show me a list of all electric cars sold in the US in 2020.,"CREATE TABLE ElectricCars (CarID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), SalesYear INT, Region VARCHAR(50), UnitsSold INT); INSERT INTO ElectricCars (CarID, ModelName, Manufacturer, SalesYear, Region, UnitsSold) VALUES (1, 'Model S', 'Tesla', 2020, 'US', 35000), (2, 'Model 3', 'Tesla', 2020, 'US', 60000), (3, 'Leaf', 'Nissan', 2020, 'US', 18000), (4, 'Bolt', 'Chevrolet', 2020, 'US', 20000), (5, 'i3', 'BMW', 2020, 'US', 8000);","SELECT ModelName, Manufacturer, UnitsSold FROM ElectricCars WHERE SalesYear = 2020 AND Region = 'US';","The SQL query is selecting the ModelName, Manufacturer, and UnitsSold columns from the ElectricCars table where the SalesYear equals 2020 and the Region is 'US'. This will return a list of all electric cars sold in the US in 2020."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,"Show me a breakdown of average crop yield per acre for each crop type across different regions, focusing specifically on those regions implementing sustainable farming practices.","CREATE TABLE CropYield (YieldID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), YieldPerAcre DECIMAL); INSERT INTO CropYield (YieldID, CropType, Region, YieldPerAcre) VALUES (1, 'Wheat', 'North America', 52.5), (2, 'Rice', 'Asia', 75.0), (3, 'Corn', 'South America', 80.0), (4, 'Soybeans', 'Europe', 32.7), (5, 'Barley', 'Australia', 22.0); CREATE TABLE SustainableFarming (RegionID INT PRIMARY KEY, Region VARCHAR(50), SustainablePractices BOOL); INSERT INTO SustainableFarming (RegionID, Region, SustainablePractices) VALUES (1, 'North America', TRUE), (2, 'Asia', FALSE), (3, 'South America', TRUE), (4, 'Europe', TRUE), (5, 'Australia', FALSE);","WITH YieldByCrop AS (SELECT CropType, Region, AVG(YieldPerAcre) AS AvgYield FROM CropYield GROUP BY CropType, Region), SustainableRegions AS (SELECT Region FROM SustainableFarming WHERE SustainablePractices = TRUE) SELECT YieldByCrop.CropType, YieldByCrop.Region, YieldByCrop.AvgYield FROM YieldByCrop JOIN SustainableRegions ON YieldByCrop.Region = SustainableRegions.Region;","The query first aggregates the average yield per acre for each crop type across different regions. Then, it identifies the regions where sustainable farming practices are implemented. Finally, it joins these two sets of results to display the average crop yield per acre for each crop type specifically in the regions implementing sustainable farming practices."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,"Retrieve the total spending on education and healthcare by region, and display regions where spending on education exceeds spending on healthcare.","CREATE TABLE GovernmentSpending (Region VARCHAR(50), Category VARCHAR(50), Amount DECIMAL); INSERT INTO GovernmentSpending (Region, Category, Amount) VALUES ('North', 'Education', 1000000), ('North', 'Healthcare', 900000), ('South', 'Education', 750000), ('South', 'Healthcare', 850000), ('East', 'Education', 950000), ('East', 'Healthcare', 950000), ('West', 'Education', 1100000), ('West', 'Healthcare', 950000);","SELECT Region, 'Education' AS Category, Amount FROM GovernmentSpending WHERE Category = 'Education' AND Amount > (SELECT Amount FROM GovernmentSpending AS gs2 WHERE gs2.Region = GovernmentSpending.Region AND gs2.Category = 'Healthcare') UNION SELECT Region, 'Healthcare' AS Category, Amount FROM GovernmentSpending WHERE Category = 'Healthcare' AND Amount > (SELECT Amount FROM GovernmentSpending AS gs2 WHERE gs2.Region = GovernmentSpending.Region AND gs2.Category = 'Education');","The query retrieves the total spending on education and healthcare by region. It then uses a UNION operation to combine the results of two SELECT statements: one that fetches regions where education spending exceeds healthcare spending, and another that fetches regions where healthcare spending exceeds education spending. The final result displays the regions along with the category and amount where spending is higher."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that tracks the adoption rates of various emerging technologies across different industries and regions, and then display the top 3 regions with the highest adoption rates for each technology.","CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(50));CREATE TABLE Industries (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50));CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50));CREATE TABLE AdoptionRates (AdoptionID INT PRIMARY KEY, TechID INT, IndustryID INT, RegionID INT, AdoptionRate DECIMAL, FOREIGN KEY (TechID) REFERENCES Technologies(TechID), FOREIGN KEY (IndustryID) REFERENCES Industries(IndustryID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH RankedAdoption AS (SELECT TechName, RegionName, AdoptionRate, DENSE_RANK() OVER (PARTITION BY TechName ORDER BY AdoptionRate DESC) AS Rank FROM AdoptionRates AR INNER JOIN Technologies T ON AR.TechID = T.TechID INNER JOIN Regions R ON AR.RegionID = R.RegionID) SELECT TechName, RegionName, AdoptionRate FROM RankedAdoption WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank regions based on their adoption rates for each technology in descending order. It then selects the top 3 regions with the highest adoption rates for each technology using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store the details of different blockchain technologies, their market cap, launch date, and the region where they are popular. Display the top 5 blockchain technologies in terms of market cap in North America.","CREATE TABLE BlockchainTech (TechID INT PRIMARY KEY, TechName VARCHAR(50), MarketCap DECIMAL, LaunchDate DATE, Region VARCHAR(50)); INSERT INTO BlockchainTech (TechID, TechName, MarketCap, LaunchDate, Region) VALUES (1, 'Bitcoin', 687.5, '2009-01-03', 'North America'), (2, 'Ethereum', 148.7, '2015-07-30', 'Europe'), (3, 'Cardano', 40.5, '2017-09-29', 'Asia'), (4, 'Polkadot', 35.8, '2020-05-26', 'North America'), (5, 'ChainLink', 13.0, '2017-09-20', 'Europe');","WITH TopBlockchainTech AS (SELECT TechName, MarketCap, DENSE_RANK() OVER (ORDER BY MarketCap DESC) AS Rank FROM BlockchainTech WHERE Region = 'North America') SELECT TechName, MarketCap FROM TopBlockchainTech WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) that ranks the blockchain technologies based on their market cap in descending order for the North America region. Then it selects the top 5 blockchain technologies by market cap using the DENSE_RANK function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report displaying the top 5 drugs with the most side effects, along with their efficacy rate for each age group.","CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), AgeGroup VARCHAR(50), EfficacyRate DECIMAL); INSERT INTO DrugEfficacy (DrugID, DrugName, AgeGroup, EfficacyRate) VALUES (1, 'Drug A', '20-30', 85.0), (2, 'Drug B', '30-40', 90.0), (3, 'Drug C', '40-50', 88.0), (4, 'Drug D', '50-60', 92.0), (5, 'Drug E', '60-70', 89.0); CREATE TABLE DrugSideEffects (DrugID INT, SideEffect VARCHAR(100)); INSERT INTO DrugSideEffects (DrugID, SideEffect) VALUES (1, 'Nausea'), (2, 'Headache'), (3, 'Dizziness'), (4, 'Fatigue'), (5, 'Dry Mouth');","WITH SideEffectsCount AS (SELECT DrugID, COUNT(DrugID) as SideEffects FROM DrugSideEffects GROUP BY DrugID), DrugRanks AS (SELECT e.DrugName, e.AgeGroup, e.EfficacyRate, s.SideEffects, ROW_NUMBER() OVER(PARTITION BY e.AgeGroup ORDER BY s.SideEffects DESC, e.EfficacyRate DESC) as Rank FROM DrugEfficacy e JOIN SideEffectsCount s ON e.DrugID = s.DrugID) SELECT DrugName, AgeGroup, EfficacyRate, SideEffects FROM DrugRanks WHERE Rank <= 5;","The query first creates a subquery 'SideEffectsCount' to count the number of side effects for each drug. Then it creates another subquery 'DrugRanks' to assign a rank to each drug within each age group based on the number of side effects and the efficacy rate. Finally, it selects the top 5 drugs for each age group based on the rank. The drugs are ranked in descending order of the number of side effects, and for drugs with the same number of side effects, they are ranked in descending order of their efficacy rates."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store sales data for different vehicle models and regions, and then provide a list of top 5 models with the highest sales in each region, along with their corresponding sustainable technology type.","CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, ModelID INT, Region VARCHAR(50), Sales DECIMAL); INSERT INTO VehicleSales (SalesID, ModelID, Region, Sales) VALUES (1, 'Model S', 'North America', 50000), (2, 'Model 3', 'Europe', 45000), (3, 'Leaf', 'Asia', 40000), (4, 'Bolt', 'North America', 35000), (5, 'Prius', 'Europe', 30000); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), TechType VARCHAR(50)); INSERT INTO VehicleModels (ModelID, ModelName, TechType) VALUES ('Model S', 'Electric'), ('Model 3', 'Electric'), ('Leaf', 'Electric'), ('Bolt', 'Hybrid'), ('Prius', 'Hybrid');","WITH RankedSales AS (SELECT v.ModelName, v.TechType, s.Region, s.Sales, DENSE_RANK() OVER (PARTITION BY s.Region ORDER BY s.Sales DESC) AS Rank FROM VehicleSales s INNER JOIN VehicleModels v ON s.ModelID = v.ModelID) SELECT ModelName, TechType, Region, Sales FROM RankedSales WHERE Rank <= 5;","The SQL query creates a common table expression (CTE) to rank vehicle models based on their sales for each region. Using the DENSE_RANK function, it ranks models in descending order of their sales in each region. Finally, it selects the top 5 highest selling models in each region along with their corresponding sustainable technology type."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the sales data of sustainable fashion brands in different regions, and then show the top 5 brands with the highest total sales.","CREATE TABLE SustainableFashionSales (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), TotalSales DECIMAL); INSERT INTO SustainableFashionSales (BrandID, BrandName, Region, TotalSales) VALUES (1, 'Brand A', 'North America', 1500000), (2, 'Brand B', 'Europe', 1300000), (3, 'Brand C', 'Asia', 1400000), (4, 'Brand D', 'North America', 1200000), (5, 'Brand E', 'Europe', 1100000);","WITH RankedBrands AS (SELECT BrandName, TotalSales, DENSE_RANK() OVER (ORDER BY TotalSales DESC) AS Rank FROM SustainableFashionSales) SELECT BrandName, TotalSales FROM RankedBrands WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) to rank fashion brands based on their total sales in descending order. Then it selects the top 5 brands with the highest total sales using the DENSE_RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores monthly occupancy rates for different hotels across various regions, and then display the top 3 hotels with the highest annual average occupancy rates.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Region VARCHAR(50)); CREATE TABLE MonthlyOccupancy (MonthID INT PRIMARY KEY, HotelID INT, OccupancyRate DECIMAL, CONSTRAINT fk_hotel FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID)); INSERT INTO Hotels (HotelID, HotelName, Region) VALUES (1, 'Grand Palace', 'North America'), (2, 'Ocean View', 'Europe'), (3, 'Mountain Retreat', 'Asia'); INSERT INTO MonthlyOccupancy (MonthID, HotelID, OccupancyRate) VALUES (1, 1, 75.6), (2, 1, 80.4), (3, 2, 85.2), (4, 2, 88.1), (5, 3, 90.3), (6, 3, 92.5);","WITH AnnualOccupancy AS (SELECT HotelID, AVG(OccupancyRate) AS AvgAnnualOccupancy FROM MonthlyOccupancy GROUP BY HotelID), RankedHotels AS (SELECT h.HotelName, a.AvgAnnualOccupancy, DENSE_RANK() OVER (ORDER BY a.AvgAnnualOccupancy DESC) AS Rank FROM Hotels h INNER JOIN AnnualOccupancy a ON h.HotelID = a.HotelID) SELECT HotelName, AvgAnnualOccupancy FROM RankedHotels WHERE Rank <= 3;","The query first creates a common table expression (CTE) to calculate the annual average occupancy rate for each hotel. It then ranks the hotels based on their average annual occupancy rate in descending order using the DENSE_RANK function. Finally, it selects the top 3 hotels with the highest annual average occupancy rates."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the average performance of athletes in each sport, sorted by sport with highest average performance. Also, reveal the top 5 sports with the highest average athlete performance.","CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), Performance DECIMAL); INSERT INTO AthletePerformance (AthleteID, AthleteName, Sport, Performance) VALUES (1, 'Athlete A', 'Basketball', 90.2), (2, 'Athlete B', 'Football', 88.3), (3, 'Athlete C', 'Tennis', 92.1), (4, 'Athlete D', 'Basketball', 91.5),(5, 'Athlete E', 'Tennis', 93.0);","WITH RankedSports AS (SELECT Sport, AVG(Performance) AS AvgPerformance, DENSE_RANK() OVER (ORDER BY AVG(Performance) DESC) AS Rank FROM AthletePerformance GROUP BY Sport) SELECT Sport, AvgPerformance FROM RankedSports WHERE Rank <= 5;",The query creates a common table expression (CTE) to calculate the average performance of athletes in each sport and rank the sports based on the average performance in descending order. It then selects the top 5 sports with the highest average athlete performance using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Find out the top 10 countries with the highest average CO2 emissions per capita in the last decade.,"CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, PerCapitaEmissions DECIMAL); INSERT INTO CO2Emissions (Country, Year, PerCapitaEmissions) VALUES ('USA', 2010, 17.5), ('USA', 2011, 16.5), ('USA', 2012, 16.0), ('USA', 2013, 16.5), ('USA', 2014, 16.7), ('USA', 2015, 16.1), ('USA', 2016, 15.5), ('USA', 2017, 15.7), ('USA', 2018, 15.2), ('USA', 2019, 15), ('China', 2010, 6.2), ('China', 2011, 7), ('China', 2012, 7.5), ('China', 2013, 7.8), ('China', 2014, 7.9), ('China', 2015, 7.5), ('China', 2016, 7.2), ('China', 2017, 7.4), ('China', 2018, 7.1), ('China', 2019, 6.9);","WITH DecadeAvg AS (SELECT Country, AVG(PerCapitaEmissions) AS AvgEmissions FROM CO2Emissions WHERE Year BETWEEN 2010 AND 2019 GROUP BY Country) SELECT Country, AvgEmissions FROM DecadeAvg ORDER BY AvgEmissions DESC LIMIT 10;",The query first creates a common table expression (CTE) named DecadeAvg to calculate the average per capita CO2 emissions for each country over the last decade. It then selects the top 10 countries with the highest average per capita emissions and sorts them in descending order.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Analyze the number of reservations made by each guest for the year 2020, the total revenue these reservations generated, and the most preferred room type of each guest. Also, showcase the guests who made more than 3 reservations and generated over $5000 in revenue.","CREATE TABLE Guests (GuestID INT PRIMARY KEY, GuestName VARCHAR(50), Email VARCHAR(50)); CREATE TABLE Rooms (RoomID INT PRIMARY KEY, RoomType VARCHAR(50), Price DECIMAL); CREATE TABLE Reservations (ReservationID INT PRIMARY KEY, GuestID INT, RoomID INT, ReservationDate DATE, AmountPaid DECIMAL); INSERT INTO Guests (GuestID, GuestName, Email) VALUES (1, 'John Doe', 'johndoe@example.com'), (2, 'Jane Smith', 'janesmith@example.com'), (3, 'Jack Black', 'jackblack@example.com'); INSERT INTO Rooms (RoomID, RoomType, Price) VALUES (1, 'Deluxe', 200.0), (2, 'Standard', 150.0), (3, 'Suite', 300.0); INSERT INTO Reservations (ReservationID, GuestID, RoomID, ReservationDate, AmountPaid) VALUES (1, 1, 2, '2020-01-10', 150.0), (2, 2, 1, '2020-03-20', 200.0), (3, 3, 3, '2020-05-15', 300.0), (4, 1, 1, '2020-07-30', 200.0), (5, 2, 3, '2020-10-05', 300.0), (6, 3, 2, '2020-12-20', 150.0);","BEGIN TRANSACTION; WITH ReservationDetails AS (SELECT g.GuestName, COUNT(r.ReservationID) AS NumReservations, SUM(r.AmountPaid) AS TotalRevenue, ROOMS.RoomType, YEAR(r.ReservationDate) AS Year FROM Guests g INNER JOIN Reservations r ON g.GuestID = r.GuestID INNER JOIN Rooms rm ON r.RoomID = rm.RoomID GROUP BY g.GuestName, rm.RoomType, YEAR(r.ReservationDate)) SELECT GuestName, NumReservations, TotalRevenue, RoomType FROM ReservationDetails WHERE Year = 2020 AND NumReservations > 3 AND TotalRevenue > 5000; COMMIT;","The query starts by creating a common table expression (CTE) named 'ReservationDetails'. This CTE joins the 'Guests', 'Reservations', and 'Rooms' tables, and groups the result set by guest name, room type, and reservation year. It calculates the count of reservations made by each guest (NumReservations), the total revenue generated by each guest (TotalRevenue), and gets the room type for each reservation. After the CTE, the query selects the guest name, number of reservations, total revenue, and room type from the CTE where the year is 2020, the number of reservations is more than 3, and the total revenue is more than $5000. The query is enclosed in a transaction to ensure data integrity."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Add a new vehicle with its sales data to the database.,"CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), Year INT); CREATE TABLE Sales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, Quantity INT, Price DECIMAL, FOREIGN KEY (VehicleID) REFERENCES Vehicles(VehicleID));","INSERT INTO Vehicles (VehicleID, ModelName, Manufacturer, Year) VALUES (6, 'Model X', 'Tesla', 2023); INSERT INTO Sales (SaleID, VehicleID, SaleDate, Quantity, Price) VALUES (11, 6, '2023-10-01', 100, 80000.00);","The query first inserts a new vehicle into the 'Vehicles' table with its respective details. Then, it adds a new sales record for this vehicle in the 'Sales' table, specifying the sale ID, vehicle ID, sale date, quantity sold, and price."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 3 most popular fashion brands in each region for the current year based on sales data. Ensure that any errors during the transaction are handled properly.,"CREATE TABLE SalesData (SaleID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), SalesAmount DECIMAL, SaleDate DATE); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), CountryOfOrigin VARCHAR(50));","BEGIN TRANSACTION; WITH RankedBrands AS (SELECT BrandName, Region, ROW_NUMBER() OVER (PARTITION BY Region ORDER BY SUM(SalesAmount) DESC) AS Rank FROM SalesData WHERE YEAR(SaleDate) = YEAR(CURRENT_DATE) GROUP BY BrandName, Region) SELECT BrandName, Region FROM RankedBrands WHERE Rank <= 3; COMMIT;","The query begins a transaction and then creates a common table expression (CTE) that ranks fashion brands by total sales amount within each region for the current year. It uses the ROW_NUMBER() window function to rank the brands. The main query then selects the top 3 brands for each region. Finally, the transaction is committed to ensure data integrity."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report that shows the top 5 most watched movies that are also among the highest-rated.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseDate DATE); CREATE TABLE WatchHistory (UserID INT, MovieID INT, WatchDate DATE); CREATE TABLE Ratings (UserID INT, MovieID INT, Rating DECIMAL); INSERT INTO Movies (MovieID, Title, Genre, ReleaseDate) VALUES (1, 'Inception', 'Sci-Fi', '2010-07-16'), (2, 'The Dark Knight', 'Action', '2008-07-18'), (3, 'Interstellar', 'Sci-Fi', '2014-11-07'), (4, 'Parasite', 'Thriller', '2019-05-30'), (5, 'Avengers: Endgame', 'Action', '2019-04-26');","WITH WatchedMovies AS (SELECT MovieID, COUNT(UserID) AS WatchCount FROM WatchHistory GROUP BY MovieID), RatedMovies AS (SELECT MovieID, AVG(Rating) AS AvgRating FROM Ratings GROUP BY MovieID), Combined AS (SELECT w.MovieID, m.Title, w.WatchCount, r.AvgRating FROM WatchedMovies w INNER JOIN RatedMovies r ON w.MovieID = r.MovieID INNER JOIN Movies m ON m.MovieID = w.MovieID) SELECT Title, WatchCount, AvgRating FROM Combined ORDER BY WatchCount DESC, AvgRating DESC LIMIT 5;","The query first creates two subqueries: one to count how many times each movie was watched and another to calculate the average rating for each movie. It then combines these two subqueries and joins them with the Movies table to get movie titles. Finally, it selects the top 5 movies based on watch count and average rating, ordered in descending order."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,pivoting and unpivoting,data retrieval: basic data fetching queries,Show me the top 5 vehicle models with the highest number of sales and their corresponding sales numbers in different regions in the last quarter.,"CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), QuarterlySales INT); INSERT INTO VehicleSales (SalesID, ModelName, Region, QuarterlySales) VALUES (1, 'Model S', 'North America', 15000), (2, 'Model 3', 'Europe', 18000), (3, 'Leaf', 'Asia', 14000), (4, 'Bolt', 'North America', 17000), (5, 'Prius', 'Europe', 16000), (6, 'Model S', 'Asia', 18000), (7, 'Model 3', 'North America', 20000), (8, 'Bolt', 'Europe', 19000), (9, 'Prius', 'Asia', 15000);","WITH RankedModels AS (SELECT ModelName, SUM(QuarterlySales) as TotalSales, DENSE_RANK() OVER (ORDER BY SUM(QuarterlySales) DESC) AS Rank FROM VehicleSales GROUP BY ModelName) SELECT ModelName, TotalSales FROM RankedModels WHERE Rank <= 5 PIVOT (SUM(TotalSales) FOR Region IN ('North America', 'Europe', 'Asia'));","The query first sums up the quarterly sales of each vehicle model and ranks them in descending order by using a common table expression (CTE) named 'RankedModels'. It then selects the top 5 models with the highest sales using the DENSE_RANK function. Finally, it uses the PIVOT operator to transform the data from a long format to a wide format, with sales numbers broken down by region."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Insert a new record for a popular TV show, then update its number of viewers based on audience engagement report and finally, delete any record of shows that have been discontinued.","CREATE TABLE TVShows (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), Genre VARCHAR(50), NumOfViewers INT); CREATE TABLE AudienceEngagement (EngagementID INT PRIMARY KEY, ShowID INT, EngagementScore DECIMAL); CREATE TABLE DiscontinuedShows (ShowID INT);","INSERT INTO TVShows (ShowID, ShowName, Genre, NumOfViewers) VALUES (1, 'The Popular Show', 'Drama', 1000); UPDATE TVShows SET NumOfViewers = NumOfViewers + (SELECT EngagementScore FROM AudienceEngagement WHERE ShowID = 1) WHERE ShowID = 1; DELETE FROM TVShows WHERE ShowID IN (SELECT ShowID FROM DiscontinuedShows);","The SQL commands first insert a new record into the TVShows table, then update the number of viewers for the new TV show based on the engagement score from the AudienceEngagement table. The last command deletes any TV shows that appear in the DiscontinuedShows table."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Begin a transaction to update the record of a patient named 'John Doe' with the new diagnosis of 'Type 2 Diabetes', commit the change if successful, otherwise, rollback the transaction.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FullName VARCHAR(50), Diagnosis VARCHAR(50)); INSERT INTO Patients (PatientID, FullName, Diagnosis) VALUES (1, 'John Doe', 'Healthy'), (2, 'Jane Doe', 'Healthy');",BEGIN TRANSACTION; UPDATE Patients SET Diagnosis = 'Type 2 Diabetes' WHERE FullName = 'John Doe'; IF @@ERROR = 0 COMMIT ELSE ROLLBACK TRANSACTION;,"The SQL statement is initiating a transaction to update the diagnosis status of a patient named 'John Doe' in the 'Patients' table. If the operation is successful, the changes made to the database will be saved permanently by the COMMIT statement. If any errors are encountered during the operation, the changes made so far will be discarded and the database state will be rolled back to the state prior to the start of the transaction."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the total sales and average price of electric vehicles (EVs) by manufacturer, including details on the region and year of sales.","CREATE TABLE Manufacturers (ManufacturerID INT PRIMARY KEY, ManufacturerName VARCHAR(50), Region VARCHAR(50));CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), ManufacturerID INT, VehicleType VARCHAR(20), Price DECIMAL, FOREIGN KEY (ManufacturerID) REFERENCES Manufacturers(ManufacturerID));CREATE TABLE Sales (SaleID INT PRIMARY KEY, VehicleID INT, SaleYear INT, SaleAmount INT, FOREIGN KEY (VehicleID) REFERENCES Vehicles(VehicleID));CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50));CREATE TABLE VehicleRegionSales (SaleID INT PRIMARY KEY, VehicleID INT, RegionID INT, SaleAmount INT, FOREIGN KEY (VehicleID) REFERENCES Vehicles(VehicleID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","SELECT M.ManufacturerName, V.VehicleType, R.RegionName, S.SaleYear, SUM(S.SaleAmount) AS TotalSales, AVG(V.Price) AS AvgPrice FROM Manufacturers M INNER JOIN Vehicles V ON M.ManufacturerID = V.ManufacturerID INNER JOIN Sales S ON V.VehicleID = S.VehicleID INNER JOIN VehicleRegionSales VRS ON S.SaleID = VRS.SaleID INNER JOIN Regions R ON VRS.RegionID = R.RegionID WHERE V.VehicleType = 'Electric' GROUP BY M.ManufacturerName, V.VehicleType, R.RegionName, S.SaleYear;","The query retrieves the total sales and average price of electric vehicles by manufacturer. It performs an INNER JOIN across the Manufacturers, Vehicles, Sales, VehicleRegionSales, and Regions tables to gather relevant data. The results are filtered to include only electric vehicles and are grouped by manufacturer name, vehicle type, region name, and sale year. The SUM function calculates the total sales, while the AVG function calculates the average price."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Find the top 5 most popular sustainable fashion brands in each region, based on consumer purchase patterns.","CREATE TABLE ConsumerPurchases (PurchaseID INT PRIMARY KEY, BrandID INT, ConsumerID INT, Region VARCHAR(50)); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), SustainablePracticeRating DECIMAL); INSERT INTO ConsumerPurchases (PurchaseID, BrandID, ConsumerID, Region) VALUES (1, 1, 101, 'North America'), (2, 2, 102, 'Europe'), (3, 3, 103, 'Asia'), (4, 1, 104, 'North America'), (5, 2, 105, 'Europe'); INSERT INTO Brands (BrandID, BrandName, SustainablePracticeRating) VALUES (1, 'Brand A', 4.5), (2, 'Brand B', 4.2), (3, 'Brand C', 3.9);","WITH RegionalBrands AS (SELECT Region, BrandID, COUNT(*) as PurchaseCount FROM ConsumerPurchases GROUP BY Region, BrandID), RankedBrands AS (SELECT Region, BrandID, PurchaseCount, DENSE_RANK() OVER (PARTITION BY Region ORDER BY PurchaseCount DESC) as Rank FROM RegionalBrands) SELECT RB.Region, B.BrandName, RB.PurchaseCount FROM RankedBrands RB JOIN Brands B ON RB.BrandID = B.BrandID WHERE Rank <= 5;","The query first generates a table RegionalBrands, which groups purchase data by region and BrandID and counts the number of purchases. Then a new table RankedBrands is created that ranks these brands within each region by the number of purchases (using the DENSE_RANK function partitioned by Region). Finally, the top 5 brands in each region are selected by joining the RankedBrands table with the Brands table on BrandID and filtering for Rank <= 5."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Show me the total sales and average price of each car model sold in California in 2021.,"CREATE TABLE CarSales (ID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Year INT, UnitsSold INT, Price DECIMAL); INSERT INTO CarSales (ID, ModelName, Region, Year, UnitsSold, Price) VALUES (1, 'Model S', 'California', 2021, 500, 75000), (2, 'Model 3', 'California', 2021, 1200, 35000), (3, 'Leaf', 'California', 2021, 800, 30000), (4, 'Bolt', 'California', 2021, 700, 37000), (5, 'Prius', 'California', 2021, 1000, 24500);","SELECT ModelName, SUM(UnitsSold) as TotalSales, AVG(Price) as AveragePrice FROM CarSales WHERE Region = 'California' AND Year = 2021 GROUP BY ModelName;","The SQL query is selecting the car model name, the total units sold, and the average price for each car model from the CarSales table. It then filters the data to only include sales that occurred in the region 'California' during the year 2021. Finally, it groups the data by the model name to provide total sales and average price for each car model."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"Show me the average carbon footprint for each country for the last 5 years, with countries that have reduced their carbon emissions the most at the top.","CREATE TABLE CarbonFootprints (Country VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CarbonFootprints (Country, Year, Emissions) VALUES ('USA', 2016, 15.5), ('China', 2016, 10.2), ('India', 2016, 2.5), ('USA', 2017, 14.9), ('China', 2017, 10.1), ('India', 2017, 2.6), ('USA', 2018, 14.2), ('China', 2018, 10.0), ('India', 2018, 2.7), ('USA', 2019, 13.8), ('China', 2019, 9.8), ('India', 2019, 2.8), ('USA', 2020, 13.2), ('China', 2020, 9.6), ('India', 2020, 2.9);","WITH AvgEmissions AS (SELECT Country, AVG(Emissions) AS AvgEmissions FROM CarbonFootprints WHERE Year > YEAR(CURRENT_DATE) - 5 GROUP BY Country), EmissionsChange AS (SELECT Country, MAX(Emissions) - MIN(Emissions) AS Change FROM CarbonFootprints WHERE Year > YEAR(CURRENT_DATE) - 5 GROUP BY Country) SELECT a.Country, a.AvgEmissions, e.Change FROM AvgEmissions a JOIN EmissionsChange e ON a.Country = e.Country ORDER BY e.Change ASC;","The query first calculates the average carbon footprint for each country over the last 5 years. Then, it determines the change in carbon footprint for each country over the same period by subtracting the minimum footprint from the maximum. It finally joins these two tables and sorts the result by the change in carbon footprint, in ascending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Update the room rate for all rooms in the 'Luxury' category by increasing the current rate by 10%.,"CREATE TABLE HotelRooms (RoomID INT PRIMARY KEY, RoomCategory VARCHAR(50), RoomRate DECIMAL); INSERT INTO HotelRooms (RoomID, RoomCategory, RoomRate) VALUES (1, 'Luxury', 250.0), (2, 'Standard', 150.0), (3, 'Luxury', 300.0), (4, 'Economy', 100.0);",UPDATE HotelRooms SET RoomRate = RoomRate * 1.1 WHERE RoomCategory = 'Luxury';,"The query updates the 'RoomRate' for all rooms that fall under the 'Luxury' category by multiplying the current rate by 1.1, effectively increasing it by 10%."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Find the top 3 most popular sustainable fashion brands based on the number of purchases in the last year.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Sustainable BOOLEAN); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, BrandID INT, PurchaseDate DATE, Quantity INT); INSERT INTO Brands (BrandID, BrandName, Sustainable) VALUES (1, 'EcoWear', TRUE), (2, 'GreenThreads', TRUE), (3, 'FastFashion', FALSE), (4, 'TrendySustainable', TRUE); INSERT INTO Purchases (PurchaseID, BrandID, PurchaseDate, Quantity) VALUES (1, 1, '2022-06-15', 5), (2, 2, '2022-07-20', 3), (3, 1, '2022-08-25', 7), (4, 3, '2022-09-10', 10), (5, 2, '2022-10-05', 8), (6, 4, '2022-11-15', 12);","WITH LastYearPurchases AS (SELECT BrandID, SUM(Quantity) AS TotalPurchases FROM Purchases WHERE PurchaseDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY BrandID) SELECT b.BrandName, lyp.TotalPurchases FROM LastYearPurchases lyp JOIN Brands b ON lyp.BrandID = b.BrandID WHERE b.Sustainable = TRUE ORDER BY lyp.TotalPurchases DESC LIMIT 3;","The query first creates a common table expression (CTE) called LastYearPurchases that aggregates the total number of purchases for each brand in the last year. It filters these results to only include sustainable brands by joining with the Brands table. Finally, it orders the results by the total number of purchases in descending order and limits the output to the top 3 brands."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Insert the data of plastic waste produced by each country in 2020 and find out the top 5 countries that have produced the most plastic waste.,"CREATE TABLE PlasticWaste (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, PlasticWasteInTons DECIMAL); INSERT INTO PlasticWaste (CountryID, CountryName, Year, PlasticWasteInTons) VALUES (1, 'United States', 2020, 42000000), (2, 'China', 2020, 55000000), (3, 'India', 2020, 15000000), (4, 'Brazil', 2020, 11000000), (5, 'Germany', 2020, 10000000), (6, 'France', 2020, 9000000), (7, 'United Kingdom', 2020, 8500000), (8, 'Italy', 2020, 8000000);","WITH RankedCountries AS (SELECT CountryName, PlasticWasteInTons, RANK() OVER (ORDER BY PlasticWasteInTons DESC) AS Rank FROM PlasticWaste WHERE Year = 2020) SELECT CountryName, PlasticWasteInTons FROM RankedCountries WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank countries based on the amount of plastic waste they produced in 2020 in descending order. It then selects the top 5 countries using the RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert data for the new wheat varieties tested this year in farms across multiple regions, and then find the top 5 varieties with the highest average yield by region.","CREATE TABLE WheatVarieties (VarietyID INT PRIMARY KEY, VarietyName VARCHAR(50), Region VARCHAR(50), AvgYield DECIMAL); INSERT INTO WheatVarieties (VarietyID, VarietyName, Region, AvgYield) VALUES (1, 'Durum', 'North America', 3.2), (2, 'Hard Red', 'Europe', 2.8), (3, 'Soft Red', 'Asia', 2.5), (4, 'Hard White', 'North America', 3.1), (5, 'Soft White', 'Europe', 2.9);","WITH RankedVarieties AS (SELECT VarietyName, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM WheatVarieties WHERE Region = 'North America') SELECT VarietyName, AvgYield FROM RankedVarieties WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank wheat varieties based on their average yield in descending order. It then selects the top 5 varieties with the highest yield only in the 'North America' region using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,pivoting and unpivoting,data retrieval: basic data fetching queries,"Find the top 5 companies that had the most patents granted for AI technologies in 2020, along with the number of patents and the categories they fall into.","CREATE TABLE AI_Patents (PatentID INT PRIMARY KEY, CompanyName VARCHAR(50), Year INT, Category VARCHAR(50)); INSERT INTO AI_Patents (PatentID, CompanyName, Year, Category) VALUES (1, 'IBM', 2020, 'Machine Learning'), (2, 'Microsoft', 2020, 'Natural Language Processing'), (3, 'Google', 2020, 'Robotics'), (4, 'Amazon', 2020, 'Vision'), (5, 'Facebook', 2020, 'Machine Learning'), (6, 'IBM', 2020, 'Natural Language Processing'), (7, 'Microsoft', 2020, 'Robotics'), (8, 'Google', 2020, 'Vision'), (9, 'Amazon', 2020, 'Machine Learning'), (10, 'Facebook', 2020, 'Natural Language Processing');","WITH Patent_Rank AS (SELECT CompanyName, Category, COUNT(PatentID) as PatentCount, DENSE_RANK() OVER (ORDER BY COUNT(PatentID) DESC) as Rank FROM AI_Patents WHERE Year = 2020 GROUP BY CompanyName, Category) SELECT CompanyName, Category, PatentCount FROM Patent_Rank WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank companies based on the number of patents they had granted for AI technologies in 2020. It groups by company name and category to get the counts, then ranks them in descending order of count using the DENSE_RANK function. Then it selects the top 5 companies, along with their categories and patent counts, from this ranked list."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report of all the projects that are currently being funded to combat climate change, sort them by the amount funded from highest to lowest, and rollback the transaction if there's an error.","CREATE TABLE ClimateChangeProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), FundingAmount DECIMAL); INSERT INTO ClimateChangeProjects (ProjectID, ProjectName, FundingAmount) VALUES (1, 'Project S', 500000), (2, 'Project M', 2000000), (3, 'Project X', 1200000), (4, 'Project Y', 800000), (5, 'Project Z', 1500000);","BEGIN TRANSACTION; BEGIN TRY SELECT ProjectName, FundingAmount FROM ClimateChangeProjects ORDER BY FundingAmount DESC; COMMIT TRANSACTION; END TRY BEGIN CATCH ROLLBACK TRANSACTION; END CATCH;","The SQL command starts a transaction and then tries to select all the projects sorted by their funding amounts in descending order. If there's an error in the SELECT command, the transaction will be rolled back, otherwise, the transaction will be committed."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert records into the MediaConsumption table that track the number of viewers for different television shows, then update the records to reflect changes in viewership, and finally delete records for shows that have been canceled. After that, pivot the data to get the total viewership for each television network.","CREATE TABLE MediaConsumption (ShowID INT PRIMARY KEY, ShowName VARCHAR(50), Network VARCHAR(50), Viewers INT); INSERT INTO MediaConsumption (ShowID, ShowName, Network, Viewers) VALUES (1, 'Breaking Bad', 'AMC', 2000000), (2, 'Game of Thrones', 'HBO', 5000000), (3, 'The Office', 'NBC', 3000000), (4, 'Friends', 'NBC', 4000000), (5, 'The Sopranos', 'HBO', 2500000);","UPDATE MediaConsumption SET Viewers = Viewers + 10000 WHERE ShowName = 'Breaking Bad'; DELETE FROM MediaConsumption WHERE ShowName = 'Game of Thrones'; SELECT Network, SUM(Viewers) AS TotalViewers FROM MediaConsumption GROUP BY Network PIVOT TotalViewers FOR Network IN ('AMC','HBO','NBC');","The SQL query starts by inserting records into the MediaConsumption table for different television shows, including their network and number of viewers. It then increases the viewership for 'Breaking Bad' by 10,000 and deletes the record for 'Game of Thrones'. Finally, it pivots the data to get the total viewership for each television network by summing up the viewers for each network."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the average crop yield for each type of crop, and then update the CropYield table with these averages in a transaction. If any step fails, rollback the transaction.","CREATE TABLE CropYield (YieldID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); CREATE TABLE CropAverage (CropType VARCHAR(50) PRIMARY KEY, AvgYield DECIMAL);","BEGIN TRANSACTION; WITH AvgYieldByCrop AS (SELECT CropType, AVG(Yield) AS AvgYield FROM CropYield GROUP BY CropType) UPDATE CropYield SET Yield = (SELECT AvgYield FROM AvgYieldByCrop WHERE CropYield.CropType = AvgYieldByCrop.CropType); INSERT INTO CropAverage (CropType, AvgYield) SELECT CropType, AvgYield FROM AvgYieldByCrop; COMMIT;","The query starts a transaction, calculates the average yield for each type of crop using a common table expression (CTE), and updates the CropYield table with these average values. It then inserts the average yield data into the CropAverage table. If any step fails, the transaction will be rolled back."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Show the top 3 countries with the highest average reduction in CO2 emissions over the past 5 years.,"CREATE TABLE Emissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, CO2Emissions DECIMAL); INSERT INTO Emissions (CountryID, CountryName, Year, CO2Emissions) VALUES (1, 'Country A', 2016, 500.0), (1, 'Country A', 2017, 480.0), (1, 'Country A', 2018, 470.0), (1, 'Country A', 2019, 460.0), (1, 'Country A', 2020, 450.0), (2, 'Country B', 2016, 600.0), (2, 'Country B', 2017, 590.0), (2, 'Country B', 2018, 580.0), (2, 'Country B', 2019, 570.0), (2, 'Country B', 2020, 560.0), (3, 'Country C', 2016, 300.0), (3, 'Country C', 2017, 290.0), (3, 'Country C', 2018, 280.0), (3, 'Country C', 2019, 275.0), (3, 'Country C', 2020, 270.0);","WITH AvgEmissions AS (SELECT CountryName, AVG(CO2Emissions) AS AvgCO2 FROM Emissions WHERE Year BETWEEN 2016 AND 2020 GROUP BY CountryName), RankedCountries AS (SELECT CountryName, AvgCO2, RANK() OVER (ORDER BY AvgCO2 DESC) AS Rank FROM AvgEmissions) SELECT CountryName, AvgCO2 FROM RankedCountries WHERE Rank <= 3;","The query first calculates the average CO2 emissions for each country over the past 5 years using the AVG function and groups the results by country. It then ranks these countries based on their average CO2 emissions in descending order using the RANK() window function. Finally, it selects the top 3 countries with the highest average reduction in CO2 emissions based on their rank."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a table to store the count of different types of transactions (INSERT, UPDATE, DELETE) in a tech firm and display the transaction type that has occurred the most.","CREATE TABLE TransactionCount (TransactionID INT PRIMARY KEY, TransactionType VARCHAR(50), TransactionCount INT); INSERT INTO TransactionCount (TransactionID, TransactionType, TransactionCount) VALUES (1, 'INSERT', 200), (2, 'UPDATE', 150), (3, 'DELETE', 100);","WITH RankedTransactions AS (SELECT TransactionType, TransactionCount, DENSE_RANK() OVER (ORDER BY TransactionCount DESC) AS Rank FROM TransactionCount) SELECT TransactionType, TransactionCount FROM RankedTransactions WHERE Rank = 1;",The query creates a common table expression (CTE) to rank transaction types based on their count in descending order. It then selects the transaction type that has occurred the most using the DENSE_RANK function.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Begin a transaction that removes all records of species extinction in the last 5 years, but roll it back if the number of affected records exceeds 100.","CREATE TABLE SpeciesExtinction (ExtinctionID INT PRIMARY KEY, SpeciesName VARCHAR(100), DateOfExtinction DATE); INSERT INTO SpeciesExtinction (ExtinctionID, SpeciesName, DateOfExtinction) VALUES (1, 'Dodo', '1681-01-01'), (2, 'Passenger Pigeon', '1914-09-01'), (3, 'Western Black Rhinoceros', '2011-11-10');","BEGIN TRANSACTION; DELETE FROM SpeciesExtinction WHERE DateOfExtinction >= DATEADD(YEAR, -5, GETDATE()); IF (SELECT COUNT(*) FROM SpeciesExtinction WHERE DateOfExtinction >= DATEADD(YEAR, -5, GETDATE())) > 100 BEGIN ROLLBACK TRANSACTION; END ELSE BEGIN COMMIT TRANSACTION; END;","The transaction begins by attempting to delete all records from the SpeciesExtinction table where the extinction date is within the last 5 years. It then checks if the count of affected records exceeds 100. If it does, the transaction is rolled back, undoing the deletions. If not, it commits the transaction, making the deletions permanent."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Track the average purchase amount and number of purchases by customers for each clothing category over the last year. Revert any changes if an error occurs.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), Email VARCHAR(50)); CREATE TABLE Categories (CategoryID INT PRIMARY KEY, CategoryName VARCHAR(50)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, CustomerID INT, CategoryID INT, PurchaseAmount DECIMAL, PurchaseDate DATE, FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID), FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID));","BEGIN TRANSACTION; WITH CategoryStats AS (SELECT C.CategoryName, P.CustomerID, COUNT(P.PurchaseID) AS TotalPurchases, AVG(P.PurchaseAmount) AS AvgPurchaseAmount FROM Purchases P JOIN Categories C ON P.CategoryID = C.CategoryID WHERE P.PurchaseDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY C.CategoryName, P.CustomerID) SELECT * FROM CategoryStats; COMMIT;",The query tracks average purchase amounts and number of purchases by customers for each clothing category over the past year. It uses a common table expression (CTE) to aggregate and calculate the necessary statistics. The transaction ensures that all changes are completed or none at all (rollback in case of error).
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Show me the top 3 football clubs with the highest average attendance in the last 5 years.,"CREATE TABLE FootballClubs (ClubID INT PRIMARY KEY, ClubName VARCHAR(50)); INSERT INTO FootballClubs (ClubID, ClubName) VALUES (1, 'Manchester United'), (2, 'Real Madrid'), (3, 'Barcelona'); CREATE TABLE ClubAttendance (MatchID INT PRIMARY KEY, ClubID INT, Date DATE, Attendance INT); INSERT INTO ClubAttendance (MatchID, ClubID, Date, Attendance) VALUES (1, 1, '2017-09-01', 75000), (2, 2, '2017-09-02', 80000), (3, 3, '2017-09-03', 90000), (4, 1, '2018-09-01', 76000), (5, 2, '2018-09-02', 80500), (6, 3, '2018-09-03', 91000);","WITH AvgAttendance AS (SELECT ClubID, AVG(Attendance) AS AverageAttendance FROM ClubAttendance WHERE Date >= DATEADD(year, -5, GETDATE()) GROUP BY ClubID) SELECT FC.ClubName, AA.AverageAttendance FROM AvgAttendance AA JOIN FootballClubs FC ON AA.ClubID = FC.ClubID ORDER BY AA.AverageAttendance DESC LIMIT 3;","The query first calculates the average attendance for each football club over the past 5 years. It then joins this average attendance information with the football club names. Finally, it orders the clubs in descending order of their average attendance and limits the output to the top 3 clubs."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a database that stores information on hotels, such as their location, average room rate, occupancy rate, and unique amenities. Then, find the top 5 hotels in Europe with the highest average room rate that also offer free Wi-Fi.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Location VARCHAR(50), AvgRoomRate DECIMAL, OccupancyRate DECIMAL, WiFi VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, Location, AvgRoomRate, OccupancyRate, WiFi) VALUES (1, 'Hotel A', 'Europe', 500.5, 70.5, 'Yes'), (2, 'Hotel B', 'Asia', 450.5, 80.5, 'Yes'), (3, 'Hotel C', 'North America', 400.5, 75.5, 'No'), (4, 'Hotel D', 'Europe', 600.5, 85.5, 'Yes'), (5, 'Hotel E', 'Europe', 700.5, 90.5, 'No');","WITH FilteredHotels AS (SELECT HotelName, AvgRoomRate, DENSE_RANK() OVER (ORDER BY AvgRoomRate DESC) AS Rank FROM Hotels WHERE Location = 'Europe' AND WiFi = 'Yes') SELECT HotelName, AvgRoomRate FROM FilteredHotels WHERE Rank <= 5;","This query first creates a common table expression (CTE) called FilteredHotels to select hotels located in Europe that offer free Wi-Fi. Within this CTE, it uses the DENSE_RANK function to rank the selected hotels by their average room rates in descending order. The main query then selects the top 5 hotels from the CTE based on their rank."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 football players with the most goals in the last season, including any ties.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), TeamID INT); CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(50)); CREATE TABLE Goals (GoalID INT PRIMARY KEY, PlayerID INT, Season VARCHAR(50), Date DATE, GoalCount INT); INSERT INTO Players (PlayerID, PlayerName, TeamID) VALUES (1, 'Player A', 1), (2, 'Player B', 2), (3, 'Player C', 3), (4, 'Player D', 4), (5, 'Player E', 5); INSERT INTO Teams (TeamID, TeamName) VALUES (1, 'Team A'), (2, 'Team B'), (3, 'Team C'), (4, 'Team D'), (5, 'Team E'); INSERT INTO Goals (GoalID, PlayerID, Season, Date, GoalCount) VALUES (1, 1, '2020-2021', '2021-05-01', 20), (2, 2, '2020-2021', '2021-05-02', 18), (3, 3, '2020-2021', '2021-05-03', 22), (4, 4, '2020-2021', '2021-05-04', 21), (5, 5, '2020-2021', '2021-05-05', 19);","WITH SeasonGoals AS (SELECT p.PlayerName, SUM(g.GoalCount) AS TotalGoals FROM Players p JOIN Goals g ON p.PlayerID = g.PlayerID WHERE g.Season = '2020-2021' GROUP BY p.PlayerName) SELECT PlayerName, TotalGoals, DENSE_RANK() OVER (ORDER BY TotalGoals DESC) AS Rank FROM SeasonGoals WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) called SeasonGoals that selects each player's name and their total goals scored in the 2020-2021 season. The CTE uses a JOIN clause to combine data from the Players and Goals tables, and a WHERE clause to filter out goals not made in the specified season. The main SELECT statement then selects the player's name and their total goals, and creates a Rank column using the DENSE_RANK() window function. This function ranks players based on their total goals in descending order, with the highest scorer getting a rank of 1. The WHERE clause in the main SELECT statement then filters out players with a rank greater than 5, resulting in the top 5 goal scorers of the season, including ties."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Identify the top 3 startups by funding amount in the AI sector and update their status to 'Leading Innovator'.,"CREATE TABLE Startups (StartupID INT PRIMARY KEY, StartupName VARCHAR(100), Sector VARCHAR(50), FundingAmount DECIMAL, Status VARCHAR(50)); INSERT INTO Startups (StartupID, StartupName, Sector, FundingAmount, Status) VALUES (1, 'AI Revolution', 'AI', 5000000.00, 'Growing'), (2, 'Tech Innovators', 'AI', 7500000.00, 'Growing'), (3, 'Future AI', 'AI', 6500000.00, 'Growing'), (4, 'Blockchain Pioneers', 'Blockchain', 8000000.00, 'Growing'), (5, 'AI Disruptors', 'AI', 7000000.00, 'Growing');","WITH RankedStartups AS (SELECT StartupID, DENSE_RANK() OVER (ORDER BY FundingAmount DESC) AS Rank FROM Startups WHERE Sector = 'AI') UPDATE Startups SET Status = 'Leading Innovator' WHERE StartupID IN (SELECT StartupID FROM RankedStartups WHERE Rank <= 3);",The query uses a common table expression (CTE) to rank the startups in the AI sector based on their funding amount in descending order. It then updates the status of the top 3 ranked startups to 'Leading Innovator' by joining the CTE with the Startups table.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Update the total amount of government spending for a specific project by project ID.,"CREATE TABLE GovernmentSpending (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), TotalAmount DECIMAL, StartDate DATE, EndDate DATE);",UPDATE GovernmentSpending SET TotalAmount = 1050000 WHERE ProjectID = 1;,This query updates the total amount of government spending to 1050000 for the project with ProjectID 1 in the GovernmentSpending table.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Create a table that stores the amount of carbon dioxide emissions per country over the years and then display the top 10 countries with the highest increase in CO2 emissions from 2010 to 2020.,"CREATE TABLE CO2Emissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, CO2Emission DECIMAL); INSERT INTO CO2Emissions (CountryID, CountryName, Year, CO2Emission) VALUES (1, 'USA', 2010, 5000.0), (1, 'USA', 2020, 6000.0), (2, 'China', 2010, 3000.0), (2, 'China', 2020, 4500.0), (3, 'India', 2010, 2000.0), (3, 'India', 2020, 2500.0);","WITH EmissionChange AS (SELECT CountryName, (MAX(CO2Emission) - MIN(CO2Emission)) AS EmissionIncrease FROM CO2Emissions WHERE Year BETWEEN 2010 AND 2020 GROUP BY CountryName) SELECT CountryName, EmissionIncrease FROM EmissionChange ORDER BY EmissionIncrease DESC LIMIT 10;",The query creates a common table expression (CTE) to calculate the increase in CO2 emissions for each country between 2010 and 2020. It then sorts these countries in descending order of emission increase and limits the result to the top 10 countries.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,common table expressions,data retrieval: basic data fetching queries,Identify the top 5 patients with the most medical visits and display their demographics and total number of visits.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Age INT, Gender VARCHAR(10), Ethnicity VARCHAR(50)); INSERT INTO Patients (PatientID, FirstName, LastName, Age, Gender, Ethnicity) VALUES (1, 'John', 'Doe', 45, 'Male', 'Caucasian'), (2, 'Jane', 'Smith', 30, 'Female', 'African American'), (3, 'Bob', 'Johnson', 60, 'Male', 'Hispanic'), (4, 'Alice', 'Williams', 50, 'Female', 'Asian'), (5, 'Charlie', 'Brown', 40, 'Male', 'Native American'); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, VisitDate DATE, Diagnosis VARCHAR(100)); INSERT INTO MedicalHistory (HistoryID, PatientID, VisitDate, Diagnosis) VALUES (1, 1, '2022-01-01', 'Flu'), (2, 1, '2022-02-01', 'Allergy'), (3, 2, '2022-01-15', 'Asthma'), (4, 2, '2022-02-15', 'Diabetes'), (5, 3, '2022-01-30', 'Arthritis'), (6, 4, '2022-02-01', 'Hypertension'), (7, 2, '2022-02-28', 'Flu'), (8, 1, '2022-03-01', 'Diabetes'), (9, 3, '2022-03-15', 'Allergy'), (10, 5, '2022-03-30', 'Arthritis');","WITH PatientVisits AS (SELECT PatientID, COUNT(HistoryID) as TotalVisits FROM MedicalHistory GROUP BY PatientID) SELECT Patients.FirstName, Patients.LastName, Patients.Age, Patients.Gender, Patients.Ethnicity, PatientVisits.TotalVisits FROM Patients INNER JOIN PatientVisits ON Patients.PatientID=PatientVisits.PatientID ORDER BY PatientVisits.TotalVisits DESC LIMIT 5;","The SQL query first creates a common table expression (CTE) named PatientVisits to calculate the total number of visits for each patient. It then joins this CTE with the Patients table using an INNER JOIN on the PatientID column. The result is a list of patient demographics (first name, last name, age, gender, and ethnicity) and the total number of visits. Finally, the query orders the list in descending order by total visits and limits the result to the top 5 patients."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create tables to store patient demographic information, medical histories, treatment protocols, and drug efficacy studies. Then, find the top 5 drugs with the most side effects for patients over 60 years old.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(20)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(50)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, DrugID INT); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50)); CREATE TABLE DrugEfficacy (EfficacyID INT PRIMARY KEY, DrugID INT, SideEffects INT);","WITH ElderlyPatients AS (SELECT PatientID FROM Patients WHERE Age > 60), DrugSideEffects AS (SELECT d.DrugName, de.SideEffects FROM Drugs d INNER JOIN DrugEfficacy de ON d.DrugID = de.DrugID), ElderlyDrugSideEffects AS (SELECT ep.PatientID, dse.DrugName, dse.SideEffects FROM ElderlyPatients ep JOIN Treatments t ON ep.PatientID = t.PatientID JOIN DrugSideEffects dse ON t.DrugID = dse.DrugID) SELECT DrugName, SUM(SideEffects) AS TotalSideEffects FROM ElderlyDrugSideEffects GROUP BY DrugName ORDER BY TotalSideEffects DESC LIMIT 5;",The query first creates a subquery of patients over 60 years old. It then creates a subquery of drugs and their associated side effects. The two subqueries are joined to get the drugs used by the elderly patients and their side effects. The query then sums up the side effects for each drug and orders the results in descending order to get the top 5 drugs with the most side effects.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Find out the 5 latest technological inventions from the tech_inventions table and get their names and the industries they belong to.,"CREATE TABLE tech_inventions (InventionID INT PRIMARY KEY, InventionName VARCHAR(100), Industry VARCHAR(100), InventionDate DATE); INSERT INTO tech_inventions (InventionID, InventionName, Industry, InventionDate) VALUES (1, 'Quantum Computer', 'Computing', '2021-01-15'), (2, 'Self Driving Car', 'Automotive', '2020-07-20'), (3, 'Foldable Smartphone', 'Telecommunication', '2019-09-05'), (4, 'Virtual Reality Headset', 'Gaming', '2021-05-10'), (5, '5G Network', 'Telecommunication', '2021-03-30');","WITH RankedInventions AS (SELECT InventionName, Industry, ROW_NUMBER() OVER (ORDER BY InventionDate DESC) AS Rank FROM tech_inventions) SELECT InventionName, Industry FROM RankedInventions WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank the technological inventions based on their date of invention in descending order. It then selects the top 5 latest inventions along with their respective industries using the ROW_NUMBER function.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 5 patients with the highest total number of prescribed drugs after their respective treatments started, also, rollback the transaction if there is any error during the process","CREATE TABLE Patients (PatientID INT PRIMARY KEY, PatientName VARCHAR(100), DOB DATE, Gender VARCHAR(10)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentStart DATE, TreatmentEnd DATE); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50), PrescriptionDate DATE);","BEGIN TRANSACTION; TRY BEGIN WITH DrugCount AS (SELECT p.PatientID, p.PatientName, COUNT(DrugName) AS TotalDrugs FROM Prescriptions pr JOIN Patients p ON pr.PatientID = p.PatientID WHERE PrescriptionDate >= (SELECT TreatmentStart FROM Treatments t WHERE t.PatientID = p.PatientID) GROUP BY p.PatientID, p.PatientName), RankedPatients AS (SELECT PatientID, PatientName, TotalDrugs, RANK() OVER (ORDER BY TotalDrugs DESC) AS Rank FROM DrugCount) SELECT PatientID, PatientName, TotalDrugs FROM RankedPatients WHERE Rank <= 5; COMMIT END; CATCH BEGIN ROLLBACK END","The query initiates a transaction, then proceeds to create a common table expression (CTE) 'DrugCount' that calculates the total number of drugs prescribed to each patient after their treatment started. Another CTE, 'RankedPatients', is created to rank patients based on their total drug count in descending order. The final SELECT statement fetches the top 5 patients with the most drugs prescribed after the start of their treatment. If any error occurs during the transaction, the transaction will be rolled back to maintain database integrity."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Identify the top 3 farming regions with the highest average wheat yield over the past decade.,"CREATE TABLE CropYields (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropType VARCHAR(50), Year INT, Yield DECIMAL); CREATE TABLE FarmingRegions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), Country VARCHAR(50));","WITH AvgYield AS (SELECT RegionName, AVG(Yield) AS AvgYield FROM CropYields WHERE CropType = 'Wheat' AND Year BETWEEN (YEAR(CURDATE()) - 10) AND YEAR(CURDATE()) GROUP BY RegionName), RankedRegions AS (SELECT RegionName, AvgYield, RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM AvgYield) SELECT RegionName, AvgYield FROM RankedRegions WHERE Rank <= 3;","The query first calculates the average yield of wheat for each region over the past decade using a common table expression (CTE) named AvgYield. It then ranks these regions by average yield in descending order using another CTE named RankedRegions, and finally selects the top 3 regions based on their ranks."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert new sales records for a recently launched vehicle model, update the sales numbers for an existing model, and then display the top 3 best-selling models across all regions.","CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50)); CREATE TABLE SalesData (SaleID INT PRIMARY KEY, ModelID INT, Region VARCHAR(50), SalesCount INT, SaleDate DATE, FOREIGN KEY (ModelID) REFERENCES VehicleModels(ModelID));","WITH UpdatedSales AS (UPDATE SalesData SET SalesCount = SalesCount + 200 WHERE ModelID = 2 RETURNING ModelID, SalesCount), InsertedSales AS (INSERT INTO SalesData (SaleID, ModelID, Region, SalesCount, SaleDate) VALUES (6, 3, 'Asia', 350, '2023-10-01') RETURNING ModelID, SalesCount), CombinedSales AS (SELECT ModelID, SUM(SalesCount) AS TotalSales FROM SalesData GROUP BY ModelID) SELECT VM.ModelName, CS.TotalSales FROM CombinedSales CS INNER JOIN VehicleModels VM ON CS.ModelID = VM.ModelID ORDER BY CS.TotalSales DESC LIMIT 3;","The query performs three main operations. First, it updates the sales count for an existing model with ModelID 2 by adding 200 to the current sales count. Second, it inserts a new sales record for a recently launched vehicle model with ModelID 3. Finally, it calculates the total sales for each model, joins this data with the VehicleModels table to get the model names, and then selects the top 3 best-selling models across all regions."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Insert records of this year's crop yields and then show the top 5 crops with the highest average yield per acre in the United States.,"CREATE TABLE CropYields (RecordID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (RecordID, CropName, Region, Yield) VALUES (1, 'Corn', 'Midwest', 180.0), (2, 'Soybean', 'Midwest', 50.0), (3, 'Wheat', 'Midwest', 70.0), (4, 'Rice', 'South', 80.0), (5, 'Cotton', 'South', 200.0), (6, 'Corn', 'South', 150.0), (7, 'Soybean', 'South', 45.0), (8, 'Wheat', 'South', 60.0), (9, 'Rice', 'Midwest', 70.0), (10, 'Cotton', 'Midwest', 175.0);","WITH RankedCrops AS (SELECT CropName, AVG(Yield) as AvgYield, DENSE_RANK() OVER (ORDER BY AVG(Yield) DESC) AS Rank FROM CropYields WHERE Region = 'United States' GROUP BY CropName) SELECT CropName, AvgYield FROM RankedCrops WHERE Rank <= 5;","The query first inserts records into the CropYields table. It then creates a common table expression (CTE) to calculate the average yield of each crop in the United States and rank them in descending order of yield. The DENSE_RANK function is used to rank the crops. Finally, it selects the top 5 crops with the highest average yield."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Provide a report that ranks the top 10 tourist destinations based on the average expenditure per visit, considering only those destinations where the average stay duration is more than 3 days.","CREATE TABLE TouristDestinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), AvgStayDuration INT, AvgExpenditurePerVisit DECIMAL); INSERT INTO TouristDestinations (DestinationID, DestinationName, AvgStayDuration, AvgExpenditurePerVisit) VALUES (1, 'Paris', 4, 800), (2, 'New York', 5, 700), (3, 'Tokyo', 6, 900), (4, 'London', 4, 650), (5, 'Sydney', 7, 1000), (6, 'Berlin', 3, 500), (7, 'Rome', 5, 750), (8, 'Dubai', 4, 850), (9, 'Bangkok', 7, 800), (10, 'Istanbul', 4, 700);","WITH FilteredDestinations AS (SELECT DestinationName, AvgExpenditurePerVisit, ROW_NUMBER() OVER (ORDER BY AvgExpenditurePerVisit DESC) AS Rank FROM TouristDestinations WHERE AvgStayDuration > 3) SELECT DestinationName, AvgExpenditurePerVisit FROM FilteredDestinations WHERE Rank <= 10;","The query first filters the destinations where the average stay duration is more than 3 days. It then ranks these filtered destinations based on the average expenditure per visit in descending order using the ROW_NUMBER function. Finally, it selects the top 10 destinations from these ranked destinations."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the average annual CO2 emissions for each country and display the top 5 countries with the highest emissions.,"CREATE TABLE Emissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, CO2Emissions DECIMAL); CREATE TABLE Countries (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Emissions (CountryID, CountryName, Year, CO2Emissions) VALUES (1, 'USA', 2022, 5000), (2, 'China', 2022, 6000), (3, 'India', 2022, 3000), (4, 'Russia', 2022, 2500), (5, 'Japan', 2022, 1200);","WITH AverageEmissions AS (SELECT CountryName, AVG(CO2Emissions) AS AvgCO2Emissions FROM Emissions GROUP BY CountryName) SELECT CountryName, AvgCO2Emissions FROM AverageEmissions ORDER BY AvgCO2Emissions DESC LIMIT 5;","The query first creates a common table expression (CTE) called AverageEmissions that calculates the average CO2 emissions for each country. It then selects the top 5 countries with the highest average CO2 emissions, ordering the results in descending order and limiting the output to the top 5 records."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,common table expressions,data retrieval: basic data fetching queries,List the top 3 countries with the highest average player performance scores in international soccer tournaments.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Tournaments (TournamentID INT PRIMARY KEY, TournamentName VARCHAR(50), Year INT); CREATE TABLE PlayerPerformance (PerformanceID INT PRIMARY KEY, PlayerID INT, TournamentID INT, PerformanceScore DECIMAL, FOREIGN KEY (PlayerID) REFERENCES Players(PlayerID), FOREIGN KEY (TournamentID) REFERENCES Tournaments(TournamentID));","WITH CountryPerformance AS (SELECT P.Country, AVG(PP.PerformanceScore) AS AvgPerformanceScore FROM Players P JOIN PlayerPerformance PP ON P.PlayerID = PP.PlayerID GROUP BY P.Country), RankedCountries AS (SELECT Country, AvgPerformanceScore, DENSE_RANK() OVER (ORDER BY AvgPerformanceScore DESC) AS Rank FROM CountryPerformance) SELECT Country, AvgPerformanceScore FROM RankedCountries WHERE Rank <= 3;","The query first joins the Players and PlayerPerformance tables to calculate the average performance score for each country. It then ranks these countries based on their average performance scores using a common table expression (CTE) and the DENSE_RANK function. Finally, it selects the top 3 countries with the highest average performance scores."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Show the total budget allocated and spent by each government department for the financial year 2019 in a single report,"CREATE TABLE Budget2019 (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), BudgetAllocated DECIMAL, BudgetSpent DECIMAL); INSERT INTO Budget2019 (DepartmentID, DepartmentName, BudgetAllocated, BudgetSpent) VALUES (1, 'Health', 1000000.00, 950000.00), (2, 'Education', 800000.00, 700000.00), (3, 'Transport', 600000.00, 550000.00), (4, 'Defense', 1200000.00, 1150000.00), (5, 'Justice', 500000.00, 450000.00);","SELECT DepartmentName, BudgetAllocated, BudgetSpent FROM Budget2019;",The query selects the name of each government department along with the budget that was allocated to them and the amount that they spent in the financial year 2019 from the 'Budget2019' table.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a transaction to record a new purchase from the 'EcoFriendlyStore' with the products '100% Cotton Tee' and 'Recycled Fabric Jeans', then rollback if the transaction fails.","CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), Price DECIMAL); INSERT INTO Products (ProductID, ProductName, Price) VALUES (1, '100% Cotton Tee', 25.0), (2, 'Recycled Fabric Jeans', 50.0); CREATE TABLE Stores (StoreID INT PRIMARY KEY, StoreName VARCHAR(50)); INSERT INTO Stores (StoreID, StoreName) VALUES (1, 'EcoFriendlyStore'); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, ProductID INT, StoreID INT, PurchaseDate DATE);","BEGIN TRANSACTION; INSERT INTO Transactions (TransactionID, ProductID, StoreID, PurchaseDate) VALUES (1, 1, 1, GETDATE()), (2, 2, 1, GETDATE()); IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The SQL query begins a new transaction and attempts to insert two new rows into the 'Transactions' table to represent a purchase of two products from the 'EcoFriendlyStore'. The @@ERROR function checks for errors. If there is an error (indicated by a non-zero return value), the transaction is rolled back and the changes are not committed to the database. If there is no error, the transaction is committed and the data is permanently saved."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert a new crop yield record for a farm in the USA that grows wheat with a yield of 30 tons per hectare.,"CREATE TABLE CropYields (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), Country VARCHAR(50), Crop VARCHAR(50), YieldPerHectare DECIMAL); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), Description VARCHAR(255)); CREATE TABLE SupplyChain (ChainID INT PRIMARY KEY, ProductName VARCHAR(50), Stage VARCHAR(50), Country VARCHAR(50));","INSERT INTO CropYields (FarmID, FarmName, Country, Crop, YieldPerHectare) VALUES (1, 'Farm A', 'USA', 'Wheat', 30.0);","The query inserts a new record into the CropYields table for a farm in the USA that grows wheat with a yield of 30 tons per hectare. The values inserted are the FarmID as 1, FarmName as 'Farm A', Country as 'USA', Crop as 'Wheat', and YieldPerHectare as 30.0."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Calculate the total sales revenue for electric vehicles (EVs) in North America in the last quarter and ensure the transaction is committed only if the total revenue is above $1 million.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), Region VARCHAR(50), SaleDate DATE, SaleAmount DECIMAL); CREATE TABLE VehicleInfo (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); CREATE VIEW EVSales AS SELECT VS.SaleID, VS.VehicleModel, VS.Region, VS.SaleDate, VS.SaleAmount FROM VehicleSales VS INNER JOIN VehicleInfo VI ON VS.VehicleModel = VI.ModelName WHERE VI.Type = 'Electric';","BEGIN TRANSACTION; WITH QuarterlyEVSales AS (SELECT SaleAmount FROM EVSales WHERE Region = 'North America' AND SaleDate BETWEEN DATEADD(QUARTER, -1, GETDATE()) AND GETDATE()) SELECT SUM(SaleAmount) AS TotalRevenue FROM QuarterlyEVSales; IF (SELECT SUM(SaleAmount) FROM QuarterlyEVSales) > 1000000 COMMIT TRANSACTION ELSE ROLLBACK TRANSACTION;","The query starts a transaction and then calculates the total sales revenue for electric vehicles in North America for the last quarter. If the total revenue exceeds $1 million, the transaction is committed; otherwise, it is rolled back."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that holds data about crop yields from different farms in various regions, and then show the top 3 farms with the highest average yield per acre.","CREATE TABLE CropYield (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), Region VARCHAR(50), Crop VARCHAR(50), AvgYieldPerAcre DECIMAL); INSERT INTO CropYield (FarmID, FarmName, Region, Crop, AvgYieldPerAcre) VALUES (1, 'Farm A', 'North America', 'Wheat', 1.2), (2, 'Farm B', 'Europe', 'Corn', 1.5), (3, 'Farm C', 'Asia', 'Rice', 1.7), (4, 'Farm D', 'North America', 'Soybeans', 1.1), (5, 'Farm E', 'Europe', 'Barley', 1.3);","WITH RankedFarms AS (SELECT FarmName, AvgYieldPerAcre, DENSE_RANK() OVER (ORDER BY AvgYieldPerAcre DESC) AS Rank FROM CropYield) SELECT FarmName, AvgYieldPerAcre FROM RankedFarms WHERE Rank <= 3;",The query first creates a common table expression (CTE) to rank farms based on their average yield per acre in descending order. It then selects the top 3 farms with the highest average yield per acre using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records",Insert sales data for electric vehicles sold in North America in the year 2022 and then display the total and average sales per model.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, Region VARCHAR(50), Sales INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Technology VARCHAR(50)); INSERT INTO VehicleModels (ModelID, ModelName, Technology) VALUES (1, 'Model S', 'Electric'), (2, 'Model 3', 'Electric'), (3, 'Leaf', 'Electric'), (4, 'Bolt', 'Electric');","INSERT INTO VehicleSales (SaleID, ModelID, SaleDate, Region, Sales) VALUES (1, 1, '2022-01-15', 'North America', 120), (2, 2, '2022-02-10', 'North America', 150), (3, 3, '2022-03-05', 'North America', 100), (4, 4, '2022-04-12', 'North America', 130); SELECT ModelName, SUM(Sales) AS TotalSales, AVG(Sales) AS AvgSales FROM VehicleSales VS JOIN VehicleModels VM ON VS.ModelID = VM.ModelID WHERE VS.Region = 'North America' AND YEAR(VS.SaleDate) = 2022 GROUP BY ModelName;","The query first inserts sales data for electric vehicles sold in North America in 2022. It then joins the VehicleSales and VehicleModels tables on the ModelID, filters the sales data for the North American region and the year 2022, and groups the results by the vehicle model. It calculates the total and average sales for each model using the SUM and AVG aggregation functions."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Insert a new travel trend regarding eco-friendly tourism destinations into the TravelTrends table and then list all travel trends by year.,"CREATE TABLE TravelTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), Year INT); INSERT INTO TravelTrends (TrendID, TrendName, Year) VALUES (1, 'Cultural Tourism', 2020), (2, 'Adventure Tourism', 2021), (3, 'Sustainable Tourism', 2022);","INSERT INTO TravelTrends (TrendID, TrendName, Year) VALUES (4, 'Eco-friendly Tourism', 2023); SELECT Year, TrendName FROM TravelTrends ORDER BY Year;","The query first inserts a new record into the TravelTrends table, with the trend being 'Eco-friendly Tourism' for the year 2023. It then selects all travel trends from the table and orders them by year, listing the year and trend name for each record."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the yearly revenue of different movie genres from various streaming platforms, and then display the top 5 genres with the highest revenue for the year 2020.","CREATE TABLE StreamingRevenue (ID INT PRIMARY KEY, Genre VARCHAR(50), Platform VARCHAR(50), Year INT, Revenue DECIMAL); INSERT INTO StreamingRevenue (ID, Genre, Platform, Year, Revenue) VALUES (1, 'Comedy', 'Netflix', 2020, 5000000.00), (2, 'Horror', 'Amazon Prime', 2020, 4500000.00), (3, 'Action', 'Disney+', 2020, 6000000.00), (4, 'Drama', 'Hulu', 2020, 5500000.00), (5, 'Romance', 'Apple TV+', 2020, 4000000.00);","WITH GenresRank AS (SELECT Genre, Revenue, DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank FROM StreamingRevenue WHERE Year = 2020) SELECT Genre, Revenue FROM GenresRank WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank movie genres based on their revenue in descending order for the year 2020. It then selects the top 5 genres with the highest revenue using the DENSE_RANK function.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,Find the top 5 athletes with the highest average scores in football games held in Europe during 2020.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50)); CREATE TABLE Scores (ScoreID INT PRIMARY KEY, AthleteID INT, GameID INT, Score DECIMAL); CREATE TABLE Games (GameID INT PRIMARY KEY, GameDate DATE, Region VARCHAR(50)); INSERT INTO Athletes (AthleteID, AthleteName, Sport) VALUES (1, 'Messi', 'Football'), (2, 'Ronaldo', 'Football'), (3, 'Neymar', 'Football'), (4, 'Suarez', 'Football'), (5, 'Mbappe', 'Football'); INSERT INTO Scores (ScoreID, AthleteID, GameID, Score) VALUES (1, 1, 1, 3.0), (2, 2, 2, 2.5), (3, 3, 3, 2.0), (4, 4, 4, 2.5), (5, 5, 5, 3.0); INSERT INTO Games (GameID, GameDate, Region) VALUES (1, '2020-01-01', 'Europe'), (2, '2020-02-01', 'Europe'), (3, '2020-03-01', 'Europe'), (4, '2020-04-01', 'Europe'), (5, '2020-05-01', 'Europe');","WITH AvgScores AS (SELECT Athletes.AthleteName, AVG(Scores.Score) AS AvgScore FROM Athletes JOIN Scores ON Athletes.AthleteID = Scores.AthleteID JOIN Games ON Scores.GameID = Games.GameID WHERE Athletes.Sport = 'Football' AND Games.Region = 'Europe' AND YEAR(Games.GameDate) = 2020 GROUP BY Athletes.AthleteName) SELECT AthleteName, AvgScore FROM AvgScores ORDER BY AvgScore DESC LIMIT 5;",The query first creates a Common Table Expression (CTE) that calculates the average scores for each football athlete in games held in Europe during 2020. It then orders these average scores in descending order and selects the top 5 athletes with the highest average scores.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert a new player into the Athletes table and update the average goals in the PlayersPerformance table for that player across all their recorded matches.,"CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, Name VARCHAR(100), Sport VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Matches (MatchID INT PRIMARY KEY, Date DATE, Location VARCHAR(100)); CREATE TABLE PlayersPerformance (PerformanceID INT PRIMARY KEY, AthleteID INT, MatchID INT, Goals INT, Assists INT, FOREIGN KEY (AthleteID) REFERENCES Athletes(AthleteID), FOREIGN KEY (MatchID) REFERENCES Matches(MatchID));","INSERT INTO Athletes (AthleteID, Name, Sport, Country) VALUES (101, 'John Doe', 'Soccer', 'USA'); UPDATE PlayersPerformance SET Goals = (SELECT AVG(Goals) FROM PlayersPerformance WHERE AthleteID = 101) WHERE AthleteID = 101;",The query first inserts a new player into the Athletes table with the given details. It then updates the Goals column in the PlayersPerformance table for that player by calculating the average number of goals across all their recorded matches. This is achieved using a subquery that selects the average goals for the specified AthleteID.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Add a new column to the bookings table to show the total revenue generated by each booking, then find the top 10 bookings that have generated the highest revenue.","CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, RoomID INT, CheckInDate DATE, CheckOutDate DATE, RoomRate DECIMAL, ExtraCharges DECIMAL); CREATE TABLE RoomTypes (RoomID INT PRIMARY KEY, RoomType VARCHAR(50), BasePrice DECIMAL, ExtraPrice DECIMAL); INSERT INTO Bookings (BookingID, CustomerID, RoomID, CheckInDate, CheckOutDate, RoomRate, ExtraCharges) VALUES (1, 101, 1, '2022-01-01', '2022-01-05', 100.00, 20.00), (2, 102, 2, '2022-01-02', '2022-01-06', 150.00, 30.00); INSERT INTO RoomTypes (RoomID, RoomType, BasePrice, ExtraPrice) VALUES (1, 'Standard', 80.00, 20.00), (2, 'Deluxe', 120.00, 30.00);","WITH TotalRevenue AS (SELECT B.BookingID, ((DATEDIFF(day, B.CheckInDate, B.CheckOutDate) * B.RoomRate) + B.ExtraCharges) AS Revenue FROM Bookings AS B) SELECT TOP 10 * FROM TotalRevenue ORDER BY Revenue DESC;","The query first creates a common table expression (CTE) that calculates the total revenue for each booking by multiplying the room rate by the number of days of the booking, and adding any extra charges. It then selects the top 10 bookings by revenue from this CTE, ordered in descending order by revenue."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Update the hotel bookings table to reflect a 10% discount for the customers who have made more than 5 bookings in the past year, then find out the total amount saved by these customers.","CREATE TABLE HotelBookings (BookingID INT PRIMARY KEY, CustomerID INT, RoomID INT, BookingDate DATE, TotalAmount DECIMAL); INSERT INTO HotelBookings (BookingID, CustomerID, RoomID, BookingDate, TotalAmount) VALUES (1, 101, 201, '2021-01-01', 100.00), (2, 101, 202, '2021-02-01', 120.00), (3, 101, 203, '2021-03-01', 130.00), (4, 101, 204, '2021-04-01', 100.00), (5, 101, 205, '2021-05-01', 150.00), (6, 101, 206, '2021-06-01', 110.00);","WITH FrequentCustomers AS (SELECT CustomerID FROM HotelBookings WHERE BookingDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY CustomerID HAVING COUNT(BookingID) > 5) UPDATE HotelBookings SET TotalAmount = TotalAmount * 0.9 WHERE CustomerID IN (SELECT CustomerID FROM FrequentCustomers); SELECT SUM(TotalAmount) * 0.1 AS TotalSaved FROM HotelBookings WHERE CustomerID IN (SELECT CustomerID FROM FrequentCustomers);","The query firstly creates a subquery (common table expression or CTE) named FrequentCustomers that selects the customer IDs for those who have more than 5 bookings in the past year. Then it updates the total amount for these identified customers with a 10% discount in the HotelBookings table. Finally, it calculates the total amount saved by these customers by retrieving the sum of the discounted amounts."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the market share of various companies in different technology sectors across different regions, and then display the top 3 companies with the highest overall market share.","CREATE TABLE TechSectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(50)); CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE MarketShare (CompanyID INT, SectorID INT, RegionID INT, Share DECIMAL, PRIMARY KEY (CompanyID, SectorID, RegionID), FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID), FOREIGN KEY (SectorID) REFERENCES TechSectors(SectorID), FOREIGN KEY (RegionID) REFERENCES Regions(RegionID)); INSERT INTO TechSectors (SectorID, SectorName) VALUES (1, 'AI'), (2, 'Blockchain'), (3, 'IoT'); INSERT INTO Companies (CompanyID, CompanyName) VALUES (1, 'TechCorp'), (2, 'InnovateX'), (3, 'NextGen'); INSERT INTO Regions (RegionID, RegionName) VALUES (1, 'North America'), (2, 'Europe'), (3, 'Asia'); INSERT INTO MarketShare (CompanyID, SectorID, RegionID, Share) VALUES (1, 1, 1, 30.5), (2, 1, 2, 25.0), (3, 1, 3, 20.0), (1, 2, 1, 10.0), (2, 2, 2, 15.0), (3, 2, 3, 35.0);","WITH TotalShare AS (SELECT CompanyName, SUM(Share) AS TotalMarketShare FROM MarketShare MS JOIN Companies C ON MS.CompanyID = C.CompanyID GROUP BY CompanyName), RankedCompanies AS (SELECT CompanyName, TotalMarketShare, DENSE_RANK() OVER (ORDER BY TotalMarketShare DESC) AS Rank FROM TotalShare) SELECT CompanyName, TotalMarketShare FROM RankedCompanies WHERE Rank <= 3;","The query first calculates the total market share for each company by summing their shares across different sectors and regions. It then ranks the companies based on their total market share using the DENSE_RANK function. Finally, it selects and displays the top 3 companies with the highest market share."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average age of patients for each type of treatment protocol and also display the overall treatment success rate for each protocol,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (PatientID INT, TreatmentProtocol VARCHAR(50), TreatmentSuccess BOOLEAN); INSERT INTO PatientDemographics (PatientID, Age, Gender) VALUES (1, 45, 'Male'), (2, 34, 'Female'), (3, 56, 'Male'), (4, 62, 'Female'), (5, 29, 'Male'); INSERT INTO MedicalHistory (PatientID, TreatmentProtocol, TreatmentSuccess) VALUES (1, 'Protocol A', TRUE), (2, 'Protocol B', TRUE), (3, 'Protocol A', FALSE), (4, 'Protocol C', TRUE), (5, 'Protocol B', FALSE);","SELECT TreatmentProtocol, AVG(Age) AS AvgAge, SUM(CASE WHEN TreatmentSuccess = TRUE THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS SuccessRate FROM PatientDemographics JOIN MedicalHistory ON PatientDemographics.PatientID = MedicalHistory.PatientID GROUP BY TreatmentProtocol;","The query first joins the PatientDemographics and MedicalHistory tables on the PatientID field. It then groups the joined data by the TreatmentProtocol field. For each group, it calculates the average age of patients and the percentage of treatments that were successful. The success rate is calculated as the number of successful treatments divided by the total number of treatments, multiplied by 100 to convert it into a percentage."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table to store patient data including their age, gender, and any diagnosed diseases. Then, find the average age of patients who have been diagnosed with diabetes.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(20), DiagnosedDisease VARCHAR(100)); INSERT INTO Patients (PatientID, Age, Gender, DiagnosedDisease) VALUES (1, 45, 'Male', 'Diabetes'), (2, 50, 'Female', 'Heart Disease'), (3, 60, 'Male', 'Diabetes'), (4, 70, 'Female', 'Cancer'), (5, 55, 'Male', 'Diabetes');",SELECT AVG(Age) AS 'Average Age' FROM Patients WHERE DiagnosedDisease = 'Diabetes';,"The SQL query is calculating the average age of patients diagnosed with diabetes. The WHERE clause filters out records of patients who are diagnosed with diabetes, and then the AVG function calculates the average age of this filtered list of patients."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Generate a report that lists the latest sales transactions for each vehicle model along with their respective sales territories, ensuring data consistency with transaction control statements.","CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50)); CREATE TABLE SalesTransactions (TransactionID INT PRIMARY KEY, ModelID INT, Territory VARCHAR(50), SaleDate DATE, FOREIGN KEY (ModelID) REFERENCES VehicleModels(ModelID));","BEGIN; WITH LatestSales AS (SELECT ModelID, Territory, SaleDate, ROW_NUMBER() OVER (PARTITION BY ModelID ORDER BY SaleDate DESC) AS RowNum FROM SalesTransactions) SELECT v.ModelName, l.Territory, l.SaleDate FROM LatestSales l JOIN VehicleModels v ON l.ModelID = v.ModelID WHERE l.RowNum = 1; COMMIT;","The SQL query starts a transaction with BEGIN to ensure data consistency. It then uses a common table expression (CTE) called LatestSales to partition sales transactions by ModelID and order them by SaleDate in descending order, assigning a row number to each transaction. The main SELECT statement joins the LatestSales CTE with the VehicleModels table to get the model names and selects only the most recent transactions (RowNum = 1). The transaction is finalized with COMMIT."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Delete the records of endangered species that no longer exist in any conservation areas.,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100), ConservationStatus VARCHAR(50)); CREATE TABLE ConservationAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE SpeciesInAreas (SpeciesID INT, AreaID INT, FOREIGN KEY (SpeciesID) REFERENCES Species(SpeciesID), FOREIGN KEY (AreaID) REFERENCES ConservationAreas(AreaID));",DELETE FROM Species WHERE SpeciesID NOT IN (SELECT SpeciesID FROM SpeciesInAreas);,"The query deletes records from the Species table where the SpeciesID is not found in the SpeciesInAreas table, effectively removing records of species that are not present in any conservation areas."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total sales of different car models in various regions. Then, pivot the table to display the total sales of each model in each region.","CREATE TABLE CarSales (SalesID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), TotalSales INT); INSERT INTO CarSales (SalesID, ModelName, Region, TotalSales) VALUES (1, 'Model S', 'North America', 20000), (2, 'Model 3', 'Europe', 18000), (3, 'Leaf', 'Asia', 22000), (4, 'Bolt', 'North America', 21000), (5, 'Prius', 'Europe', 19500);","SELECT ModelName, [North America], [Europe], [Asia] FROM (SELECT ModelName, Region, TotalSales FROM CarSales) AS SourceTable PIVOT (SUM(TotalSales) FOR Region IN ([North America], [Europe], [Asia])) AS PivotTable;","The query first selects the model name, region, and total sales from the CarSales table. Then, it pivots this table to create a new table (PivotTable) where each row represents a car model and each column represents a region. The values in the PivotTable are the sum of total sales for each car model in each region."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert a new record of a movie with its view count and update the total view count for the corresponding genre.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), GenreID INT, ViewCount INT); CREATE TABLE Genres (GenreID INT PRIMARY KEY, GenreName VARCHAR(50), TotalViewCount INT);","INSERT INTO Movies (MovieID, Title, GenreID, ViewCount) VALUES (101, 'Inception', 1, 500000); UPDATE Genres SET TotalViewCount = (SELECT SUM(ViewCount) FROM Movies WHERE GenreID = 1) WHERE GenreID = 1;","The SQL query first inserts a new movie 'Inception' with a view count of 500,000 into the Movies table. Then, it updates the TotalViewCount in the Genres table for the genre with GenreID 1 by calculating the sum of view counts for all movies in that genre. The subquery (SELECT SUM(ViewCount) FROM Movies WHERE GenreID = 1) calculates the total view count for all movies in the same genre, and the UPDATE statement sets this value in the Genres table."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Identify and remove records of athletes who have not participated in any events in the last year from the AthletePerformance table.,"CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), LastEventDate DATE); CREATE TABLE Events (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE, AthleteID INT, FOREIGN KEY (AthleteID) REFERENCES AthletePerformance(AthleteID));","DELETE FROM AthletePerformance WHERE AthleteID NOT IN (SELECT AthleteID FROM Events WHERE EventDate > DATE_SUB(CURDATE(), INTERVAL 1 YEAR));",The query deletes records from the AthletePerformance table for athletes who have not participated in any events in the last year. It uses a subquery to find all AthleteIDs from the Events table where the EventDate is within the last year. The main query then deletes records from AthletePerformance where the AthleteID is not in the list generated by the subquery.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores customer preferences for different types of hotel amenities across various regions, and then display the most preferred amenity in each region.","CREATE TABLE CustomerPreferences (CustomerID INT PRIMARY KEY, Region VARCHAR(50), Amenity VARCHAR(50), PreferenceScore DECIMAL); INSERT INTO CustomerPreferences (CustomerID, Region, Amenity, PreferenceScore) VALUES (1, 'North America', 'Pool', 4.5), (2, 'Europe', 'Gym', 4.0), (3, 'Asia', 'Free Wi-Fi', 4.7), (4, 'North America', 'Parking', 4.2), (5, 'Europe', 'Spa', 4.8);","WITH RankedAmenities AS (SELECT Region, Amenity, PreferenceScore, DENSE_RANK() OVER (PARTITION BY Region ORDER BY PreferenceScore DESC) AS Rank FROM CustomerPreferences) SELECT Region, Amenity, PreferenceScore FROM RankedAmenities WHERE Rank = 1;",The query creates a common table expression (CTE) to rank hotel amenities in each region based on customer preference scores in descending order. It then selects the most preferred amenity for each region using the DENSE_RANK function partitioned by region and ordered by preference scores.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total government expenditure on health and education for each state, along with the count of hospitals and schools for each state. Order the results by the combined total spend on health and education in descending order.","CREATE TABLE StateSpend (State VARCHAR(50), HealthExpenditure DECIMAL, EducationExpenditure DECIMAL); INSERT INTO StateSpend (State, HealthExpenditure, EducationExpenditure) VALUES ('California', 50000000, 60000000), ('Texas', 40000000, 45000000), ('New York', 45000000, 55000000), ('Florida', 35000000, 40000000); CREATE TABLE StateInfrastructure (State VARCHAR(50), HospitalCount INT, SchoolCount INT); INSERT INTO StateInfrastructure (State, HospitalCount, SchoolCount) VALUES ('California', 300, 600), ('Texas', 250, 550), ('New York', 275, 575), ('Florida', 200, 450);","WITH CombinedSpend AS (SELECT State, (HealthExpenditure + EducationExpenditure) AS TotalSpend FROM StateSpend), InfrastructureData AS (SELECT State, HospitalCount, SchoolCount FROM StateInfrastructure) SELECT CombinedSpend.State, HealthExpenditure, EducationExpenditure, TotalSpend, HospitalCount, SchoolCount FROM CombinedSpend JOIN InfrastructureData ON CombinedSpend.State = InfrastructureData.State ORDER BY TotalSpend DESC;","The query creates two common table expressions (CTEs). The first CTE, CombinedSpend, computes the total government expenditure on health and education for each state. The second CTE, InfrastructureData, fetches the count of hospitals and schools for each state. The main SELECT statement then joins these two CTEs on the state and outputs the state, the respective health and education expenditures, the total combined spend, and the count of hospitals and schools. The results are then ordered by the total spend in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a transaction for the insertion of new rows in the 'PublicSpending' table that stores the government's spending data across various sectors and rollback the transaction if any error occurs. Then, pivot the 'PublicSpending' table to get the total spending for each sector for each fiscal year.","CREATE TABLE PublicSpending (SpendingID INT PRIMARY KEY, FiscalYear INT, Sector VARCHAR(50), Amount DECIMAL); INSERT INTO PublicSpending (SpendingID, FiscalYear, Sector, Amount) VALUES (1, 2020, 'Healthcare', 5000000), (2, 2020, 'Education', 4000000), (3, 2020, 'Defense', 6000000), (4, 2020, 'Infrastructure', 3000000), (5, 2021, 'Healthcare', 5500000), (6, 2021, 'Education', 4500000), (7, 2021, 'Defense', 6500000), (8, 2021, 'Infrastructure', 3500000);","BEGIN TRANSACTION; INSERT INTO PublicSpending (SpendingID, FiscalYear, Sector, Amount) VALUES (9, 2022, 'Healthcare', 5800000), (10, 2022, 'Education', 4700000), (11, 2022, 'Defense', 6800000), (12, 2022, 'Infrastructure', 3700000); IF @@ERROR <> 0 ROLLBACK TRANSACTION; COMMIT TRANSACTION; SELECT FiscalYear, [Healthcare], [Education], [Defense], [Infrastructure] FROM (SELECT FiscalYear, Sector, Amount FROM PublicSpending) AS SourceTable PIVOT (SUM(Amount) FOR Sector IN ([Healthcare], [Education], [Defense], [Infrastructure])) AS PivotTable;","The SQL query first begins a transaction to insert new rows of data for the fiscal year 2022 into the 'PublicSpending' table. If there is an error during the insertion (checked using @@ERROR), the transaction will be rolled back to ensure data integrity. If the insertion is successful, the transaction is committed to finalize the changes. The second part of the query then pivots the 'PublicSpending' table to sum the 'Amount' for each 'Sector' for each 'FiscalYear', effectively transforming the Sector values into separate columns for each fiscal year."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 3 selling models for each manufacturer in the North America region for Q1 2021 and make sure to rollback the transaction in case of any database failure.,"CREATE TABLE Sales (SaleID INT PRIMARY KEY, ModelID INT, ModelName VARCHAR(50), ManufacturerName VARCHAR(50), Region VARCHAR(50), SaleDate DATE, UnitsSold INT); INSERT INTO Sales (SaleID, ModelID, ModelName, ManufacturerName, Region, SaleDate, UnitsSold) VALUES (1, 1, 'Model S', 'Tesla', 'North America', '2021-01-15', 5000), (2, 2, 'Model 3', 'Tesla', 'North America', '2021-02-10', 7000), (3, 3, 'Leaf', 'Nissan', 'North America', '2021-03-05', 6000), (4, 4, 'Bolt', 'Chevrolet', 'North America', '2021-01-20', 5500), (5, 5, 'Prius', 'Toyota', 'North America', '2021-02-25', 4000);","BEGIN TRANSACTION; TRY BEGIN WITH RankedModels AS (SELECT ModelName, ManufacturerName, SUM(UnitsSold) as TotalUnitsSold, RANK() OVER (PARTITION BY ManufacturerName ORDER BY SUM(UnitsSold) DESC) as Rank FROM Sales WHERE Region = 'North America' AND DATEPART(QUARTER, SaleDate) = 1 AND DATEPART(YEAR, SaleDate) = 2021 GROUP BY ModelName, ManufacturerName) SELECT ModelName, ManufacturerName, TotalUnitsSold FROM RankedModels WHERE Rank <= 3; COMMIT END TRY BEGIN CATCH ROLLBACK END CATCH;","The query starts a new transaction and tries to execute the main query within a try block. The main query creates a common table expression (CTE) to rank the vehicle models based on their total units sold in descending order, within each manufacturer. It then selects the top 3 selling models for each manufacturer. If any error occurs during the execution of the main query, the transaction is rolled back using a catch block, ensuring that the database remains in a consistent state."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Fetch the yearly revenue for each emerging technology category and display it pivoted for the past 3 years.,"CREATE TABLE EmergingTechRevenue (TechID INT PRIMARY KEY, Category VARCHAR(50), Year INT, Revenue DECIMAL); INSERT INTO EmergingTechRevenue (TechID, Category, Year, Revenue) VALUES (1, 'Artificial Intelligence', 2020, 150.0), (2, 'Artificial Intelligence', 2021, 180.0), (3, 'Artificial Intelligence', 2022, 220.0), (4, 'Blockchain', 2020, 50.0), (5, 'Blockchain', 2021, 70.0), (6, 'Blockchain', 2022, 90.0);","SELECT Category, SUM(CASE WHEN Year=2020 THEN Revenue ELSE 0 END) AS Revenue_2020, SUM(CASE WHEN Year=2021 THEN Revenue ELSE 0 END) AS Revenue_2021, SUM(CASE WHEN Year=2022 THEN Revenue ELSE 0 END) AS Revenue_2022 FROM EmergingTechRevenue GROUP BY Category;","The query selects the category of emerging technologies and uses conditional aggregation to pivot the yearly revenue data. It sums the revenue for each category separately for the years 2020, 2021, and 2022, and displays the pivoted results with one column for each year."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the number of patients treated and the average treatment response for each drug used in the past year. Ensure the transaction is committed only if all operations are successful.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), Address VARCHAR(100)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), Treatment VARCHAR(100), Outcome VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, DrugName VARCHAR(100), PatientID INT, Efficacy DECIMAL, SideEffects VARCHAR(100), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","BEGIN; WITH DrugStats AS (SELECT DrugName, COUNT(PatientID) AS NumberOfPatients, AVG(Efficacy) AS AvgEfficacy FROM DrugEfficacy WHERE TreatmentDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY DrugName) SELECT DrugName, NumberOfPatients, AvgEfficacy FROM DrugStats; COMMIT;","The query starts with a BEGIN statement to initiate a transaction. It then creates a common table expression (CTE) named 'DrugStats' to aggregate the number of patients and average efficacy for each drug used in the past year. Finally, it selects and displays the drug name, number of patients treated, and the average efficacy from the CTE. The COMMIT statement ensures that the transaction is completed only if all operations are successful."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Identify the top 3 crops with the highest average yield per hectare over the past 5 years, grouped by region, and update the CropYields table to reflect these findings.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Year INT, YieldPerHectare DECIMAL); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50));","WITH AvgYield AS (SELECT CropID, Region, AVG(YieldPerHectare) AS AvgYield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY AVG(YieldPerHectare) DESC) AS Rank FROM CropYields WHERE Year BETWEEN YEAR(CURRENT_DATE) - 5 AND YEAR(CURRENT_DATE) GROUP BY CropID, Region) UPDATE CropYields SET YieldPerHectare = AvgYield FROM AvgYield WHERE CropYields.CropID = AvgYield.CropID AND CropYields.Region = AvgYield.Region AND AvgYield.Rank <= 3;","The query first creates a CTE (Common Table Expression) named AvgYield, which calculates the average yield per hectare for each crop across different regions over the past 5 years. It then ranks these crops within each region using the DENSE_RANK function. Finally, the query updates the CropYields table to reflect the top 3 crops with the highest average yield per hectare in each region by setting the YieldPerHectare value in CropYields to the calculated average yield from the CTE."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"Find out the total number of electric vehicles sold in each region, and display the regions where the total sales were more than 1000 vehicles.","CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, VehicleType VARCHAR(50), Region VARCHAR(50), NoOfVehiclesSold INT); INSERT INTO VehicleSales (SalesID, VehicleType, Region, NoOfVehiclesSold) VALUES (1, 'Electric', 'North America', 1500), (2, 'Electric', 'Europe', 1200), (3, 'Gasoline', 'Asia', 900), (4, 'Hybrid', 'North America', 800), (5, 'Electric', 'Asia', 1100);","SELECT Region, SUM(NoOfVehiclesSold) AS TotalSales FROM VehicleSales WHERE VehicleType = 'Electric' GROUP BY Region HAVING SUM(NoOfVehiclesSold) > 1000;",This SQL query first filters the vehicle sales information for only electric vehicles. It then groups the data by region and calculates the total number of vehicles sold in each region using the SUM function. The HAVING clause is used to filter out regions where the total sales are not more than 1000 vehicles.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Provide a list of the top 5 departments with the highest total expenditure in the last fiscal year.,"CREATE TABLE DepartmentBudget (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), FiscalYear INT, TotalExpenditure DECIMAL); INSERT INTO DepartmentBudget (DepartmentID, DepartmentName, FiscalYear, TotalExpenditure) VALUES (1, 'Education', 2020, 5000000), (2, 'Health', 2020, 7000000), (3, 'Defense', 2020, 10000000), (4, 'Transport', 2020, 4000000), (5, 'Environment', 2020, 3000000);","WITH RankedDepartments AS (SELECT DepartmentName, TotalExpenditure, RANK() OVER (ORDER BY TotalExpenditure DESC) AS Rank FROM DepartmentBudget WHERE FiscalYear = (SELECT MAX(FiscalYear) FROM DepartmentBudget)) SELECT DepartmentName, TotalExpenditure FROM RankedDepartments WHERE Rank <= 5;",The SQL query creates a common table expression (CTE) to rank Departments based on their total expenditure in descending order for the last fiscal year. It then selects the top 5 departments with highest expenditure using the RANK function.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the average and total revenue generated by each hotel chain in the last quarter, but only include chains that have at least 5 hotels.","CREATE TABLE HotelChains (ChainID INT PRIMARY KEY, ChainName VARCHAR(50)); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), ChainID INT, FOREIGN KEY (ChainID) REFERENCES HotelChains(ChainID)); CREATE TABLE Reservations (ReservationID INT PRIMARY KEY, HotelID INT, ReservationDate DATE, Revenue DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","WITH ChainHotelCount AS (SELECT ChainID, COUNT(HotelID) AS HotelCount FROM Hotels GROUP BY ChainID HAVING COUNT(HotelID) >= 5), LastQuarterRevenue AS (SELECT ChainID, AVG(Revenue) AS AvgRevenue, SUM(Revenue) AS TotalRevenue FROM Reservations WHERE ReservationDate >= DATEADD(QUARTER, -1, GETDATE()) AND ReservationDate < GETDATE() GROUP BY ChainID) SELECT hc.ChainName, lqr.AvgRevenue, lqr.TotalRevenue FROM HotelChains hc JOIN LastQuarterRevenue lqr ON hc.ChainID = lqr.ChainID JOIN ChainHotelCount chc ON hc.ChainID = chc.ChainID;","The query first creates a common table expression (CTE) named 'ChainHotelCount' to count the number of hotels in each chain and includes only those with 5 or more hotels. Another CTE named 'LastQuarterRevenue' calculates the average and total revenue for each chain in the last quarter. The final SELECT statement joins these CTEs with the HotelChains table to get the ChainName, AvgRevenue, and TotalRevenue for each qualifying hotel chain."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create tables to store data on protected areas worldwide, the species they house, and the conservation efforts being made. Then, provide a list of regions with the highest count of endangered species protected, and the total amount of funds allocated for their conservation.","CREATE TABLE ProtectedAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Status VARCHAR(50), AreaID INT); CREATE TABLE ConservationFunds (FundID INT PRIMARY KEY, AreaID INT, Amount DECIMAL); INSERT INTO ProtectedAreas (AreaID, AreaName, Region) VALUES (1, 'Yellowstone', 'North America'), (2, 'Galapagos', 'South America'), (3, 'Serengeti', 'Africa'); INSERT INTO Species (SpeciesID, SpeciesName, Status, AreaID) VALUES (1, 'Grey Wolf', 'Endangered', 1), (2, 'Giant Tortoise', 'Endangered', 2), (3, 'Black Rhinoceros', 'Endangered', 3); INSERT INTO ConservationFunds (FundID, AreaID, Amount) VALUES (1, 1, 1000000), (2, 2, 1500000), (3, 3, 2000000);","WITH EndangeredSpecies AS (SELECT Region, COUNT(*) AS SpeciesCount FROM ProtectedAreas INNER JOIN Species ON ProtectedAreas.AreaID = Species.AreaID WHERE Status = 'Endangered' GROUP BY Region), FundsAllocated AS (SELECT Region, SUM(Amount) AS TotalFunds FROM ProtectedAreas INNER JOIN ConservationFunds ON ProtectedAreas.AreaID = ConservationFunds.AreaID GROUP BY Region) SELECT EndangeredSpecies.Region, SpeciesCount, TotalFunds FROM EndangeredSpecies INNER JOIN FundsAllocated ON EndangeredSpecies.Region = FundsAllocated.Region ORDER BY SpeciesCount DESC, TotalFunds DESC;","The query first creates two common table expressions (CTEs): one to count the number of endangered species in each region and another to sum the total funds allocated for conservation in each region. It then inner joins these CTEs on the 'Region' column and selects the region, species count, and total funds. The results are ordered by the number of endangered species and the total funds, both in descending order."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 hotels with the highest average customer satisfaction rating in each city.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, City) VALUES (1, 'Hotel A', 'New York'), (2, 'Hotel B', 'Los Angeles'), (3, 'Hotel C', 'Chicago'), (4, 'Hotel D', 'Houston'), (5, 'Hotel E', 'Phoenix'); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, HotelID INT, CustomerID INT, Rating DECIMAL); INSERT INTO Ratings (RatingID, HotelID, CustomerID, Rating) VALUES (1, 1, 100, 4.5), (2, 2, 101, 3.7), (3, 3, 102, 4.0), (4, 4, 103, 4.2), (5, 5, 104, 3.9);","WITH AverageRatings AS (SELECT H.HotelName, H.City, AVG(R.Rating) as AvgRating FROM Hotels H JOIN Ratings R ON H.HotelID = R.HotelID GROUP BY H.HotelName, H.City), RankedHotels AS (SELECT HotelName, City, AvgRating, RANK() OVER (PARTITION BY City ORDER BY AvgRating DESC) as Rank FROM AverageRatings) SELECT HotelName, City, AvgRating FROM RankedHotels WHERE Rank <= 5;","The query first creates a common table expression (CTE) named 'AverageRatings' that calculates the average customer rating for each hotel in each city. It then creates another CTE named 'RankedHotels' which ranks the hotels in each city based on the average customer rating in descending order. Finally, it selects the top 5 hotels with the highest average customer rating in each city from the 'RankedHotels' CTE."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Insert a new record for a recently approved policy into the GovernmentPolicies table, then retrieve the top 5 policies with the highest overall approval ratings.","CREATE TABLE GovernmentPolicies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(50), ApprovalRating DECIMAL, ApprovalDate DATE); INSERT INTO GovernmentPolicies (PolicyID, PolicyName, ApprovalRating, ApprovalDate) VALUES (1, 'Healthcare Reform', 65.5, '2020-01-01'), (2, 'Education Act', 72.0, '2019-07-01'), (3, 'Infrastructure Plan', 68.0, '2020-03-01'), (4, 'Environmental Protection', 70.7, '2021-01-01'), (5, 'Economic Recovery Plan', 75.0, '2021-06-01');","INSERT INTO GovernmentPolicies (PolicyID, PolicyName, ApprovalRating, ApprovalDate) VALUES (6, 'Newly Approved Policy', 80.0, '2022-03-01'); WITH RankedPolicies AS (SELECT PolicyName, ApprovalRating, DENSE_RANK() OVER (ORDER BY ApprovalRating DESC) AS Rank FROM GovernmentPolicies) SELECT PolicyName, ApprovalRating FROM RankedPolicies WHERE Rank <= 5;","The query first inserts a new record for a recently approved policy into the GovernmentPolicies table. Then it creates a common table expression (CTE) to rank policies based on their approval rating in descending order. Finally, it selects the top 5 policies with the highest approval ratings using the DENSE_RANK function."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the total sales and market share for electric vehicles by region over the past year, and then retrieve the region-wise market share of all vehicle types to analyze the shift towards sustainable transportation.","CREATE TABLE VehicleSales (SalesID INT PRIMARY KEY, ModelID INT, Region VARCHAR(50), SalesYear INT, TotalSales INT, MarketShare DECIMAL); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Type VARCHAR(50)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); CREATE TABLE MarketShare (RegionID INT, Type VARCHAR(50), MarketShare DECIMAL, PRIMARY KEY (RegionID, Type));","UPDATE VehicleSales SET TotalSales = TotalSales + 500, MarketShare = MarketShare + 0.05 WHERE ModelID IN (SELECT ModelID FROM VehicleModels WHERE Type = 'Electric') AND SalesYear = YEAR(CURDATE()) - 1; SELECT r.RegionName, m.Type, ms.MarketShare FROM Regions r INNER JOIN MarketShare ms ON r.RegionID = ms.RegionID INNER JOIN VehicleModels m ON ms.Type = m.Type;","The query first updates the total sales and market share for electric vehicles in the previous year by adding a fixed number of sales and market share. Then it retrieves the market share of all vehicle types for each region by performing an inner join between the 'Regions' and 'MarketShare' tables, and another inner join with the 'VehicleModels' table to get the type of each vehicle model."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top three spending categories in each state for the last fiscal year.,"CREATE TABLE GovernmentSpending (ID INT PRIMARY KEY, State VARCHAR(50), Category VARCHAR(50), FiscalYear INT, Spending DECIMAL); INSERT INTO GovernmentSpending (ID, State, Category, FiscalYear, Spending) VALUES (1, 'California', 'Healthcare', 2020, 200000.0), (2, 'California', 'Education', 2020, 150000.0), (3, 'California', 'Infrastructure', 2020, 100000.0), (4, 'Texas', 'Healthcare', 2020, 150000.0), (5, 'Texas', 'Education', 2020, 130000.0), (6, 'Texas', 'Defense', 2020, 120000.0);","WITH Rankings AS (SELECT State, Category, Spending, DENSE_RANK() OVER (PARTITION BY State ORDER BY Spending DESC) AS Rank FROM GovernmentSpending WHERE FiscalYear = 2020) SELECT State, Category, Spending FROM Rankings WHERE Rank <= 3;","The query first creates a common table expression (CTE) which ranks each spending category within each state based on spending in descending order for the fiscal year 2020. The DENSE_RANK function is used to provide the ranking. Then from this CTE, the query selects the state, category and spending for those records where the rank is in top 3, effectively giving us the top three spending categories for each state."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,Find out the average rating of the top 5 emerging technologies in the field of healthcare and the corresponding number of reviews.,"CREATE TABLE TechRatings (TechID INT PRIMARY KEY, TechName VARCHAR(50), Industry VARCHAR(50), AvgRating DECIMAL, ReviewCount INT); INSERT INTO TechRatings (TechID, TechName, Industry, AvgRating, ReviewCount) VALUES (1, 'AI Diagnostics', 'Healthcare', 4.5, 200), (2, 'Telemedicine', 'Healthcare', 4.3, 250), (3, 'Genomic Sequencing', 'Healthcare', 4.6, 225), (4, '3D Bioprinting', 'Healthcare', 4.7, 180), (5, 'Nanomedicine', 'Healthcare', 4.4, 210);","WITH RankedTech AS (SELECT TechName, AvgRating, DENSE_RANK() OVER (ORDER BY AvgRating DESC) AS Rank FROM TechRatings WHERE Industry = 'Healthcare') SELECT TechName, AvgRating FROM RankedTech WHERE Rank <= 5;",The query first creates a common table expression (CTE) to rank the emerging technologies in the healthcare industry based on their average rating in descending order. It then retrieves the top 5 technologies and their average ratings using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects",Find the top 10 hottest trending technologies based on the number of online mentions over the last quarter and their percentage growth compared to the previous quarter.,"CREATE TABLE OnlineMentions (TechID INT PRIMARY KEY, Technology VARCHAR(50), Mentions INT, Quarter VARCHAR(10)); INSERT INTO OnlineMentions (TechID, Technology, Mentions, Quarter) VALUES (1, 'AI', 5000, 'Q1'), (2, 'Blockchain', 4000, 'Q1'), (3, 'Cloud Computing', 7000, 'Q1'), (4, 'AI', 8000, 'Q2'), (5, 'Blockchain', 6000, 'Q2'), (6, 'Cloud Computing', 9000, 'Q2');","WITH MentionGrowth AS (SELECT Technology, Mentions, Quarter, LAG(Mentions) OVER (PARTITION BY Technology ORDER BY Quarter) AS PrevMentions FROM OnlineMentions), MentionGrowthPercent AS (SELECT Technology, Quarter, (Mentions - PrevMentions)*100.0/PrevMentions AS GrowthPercent FROM MentionGrowth WHERE Quarter = 'Q2') SELECT Technology, GrowthPercent FROM MentionGrowthPercent ORDER BY GrowthPercent DESC LIMIT 10;","The query first calculates the number of mentions for each technology in the previous quarter using the LAG function in the MentionGrowth CTE. Next, the growth percentage in mentions is calculated in the MentionGrowthPercent CTE. Finally, the query lists the top 10 technologies based on the highest percentage growth in mentions. The results are ordered in descending order by growth percentage."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average viewing time for different content genres, broken down by user age groups, and identify the top 3 genres for each age group based on average viewing time.","CREATE TABLE Users (UserID INT PRIMARY KEY, UserName VARCHAR(50), AgeGroup VARCHAR(20)); CREATE TABLE Content (ContentID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50)); CREATE TABLE ViewingHistory (UserID INT, ContentID INT, ViewingTime DECIMAL, FOREIGN KEY (UserID) REFERENCES Users(UserID), FOREIGN KEY (ContentID) REFERENCES Content(ContentID));","WITH AvgViewing AS (SELECT U.AgeGroup, C.Genre, AVG(V.ViewingTime) AS AvgTime FROM Users U INNER JOIN ViewingHistory V ON U.UserID = V.UserID INNER JOIN Content C ON V.ContentID = C.ContentID GROUP BY U.AgeGroup, C.Genre), RankedGenres AS (SELECT AgeGroup, Genre, AvgTime, DENSE_RANK() OVER (PARTITION BY AgeGroup ORDER BY AvgTime DESC) AS GenreRank FROM AvgViewing) SELECT AgeGroup, Genre, AvgTime FROM RankedGenres WHERE GenreRank <= 3;","The query first calculates the average viewing time for each content genre within each age group using a common table expression (CTE) named AvgViewing. It then ranks the genres within each age group based on the average viewing time in descending order using the DENSE_RANK function in another CTE named RankedGenres. Finally, it selects the top 3 genres for each age group based on the ranking."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,common table expressions,data retrieval: basic data fetching queries,Identify the top 5 regions with the highest percentage of protected areas relative to their total land area.,"CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), TotalLandArea DECIMAL); CREATE TABLE ProtectedAreas (AreaID INT PRIMARY KEY, RegionID INT, ProtectedLandArea DECIMAL, FOREIGN KEY (RegionID) REFERENCES Regions(RegionID));","WITH AreaPercentages AS (SELECT r.RegionName, (pa.ProtectedLandArea / r.TotalLandArea) * 100 AS ProtectedPercentage FROM Regions r JOIN ProtectedAreas pa ON r.RegionID = pa.RegionID) SELECT RegionName, ProtectedPercentage FROM AreaPercentages ORDER BY ProtectedPercentage DESC LIMIT 5;","The query first creates a common table expression (CTE) called AreaPercentages to calculate the percentage of protected land area relative to the total land area for each region. It then retrieves and orders these percentages in descending order, selecting the top 5 regions with the highest protected land percentages."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Find the list of species that are unique to either South America or Africa but not both.,"CREATE TABLE SpeciesData (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Continent VARCHAR(50)); INSERT INTO SpeciesData (SpeciesID, SpeciesName, Continent) VALUES (1, 'Jaguar', 'South America'), (2, 'African Elephant', 'Africa'), (3, 'Anaconda', 'South America'), (4, 'Lion', 'Africa'), (5, 'Penguin', 'South America'), (6, 'Giraffe', 'Africa');",SELECT SpeciesName FROM SpeciesData WHERE Continent = 'South America' EXCEPT SELECT SpeciesName FROM SpeciesData WHERE Continent = 'Africa' UNION SELECT SpeciesName FROM SpeciesData WHERE Continent = 'Africa' EXCEPT SELECT SpeciesName FROM SpeciesData WHERE Continent = 'South America';,"The query retrieves species names that are unique to either South America or Africa by using a combination of the EXCEPT and UNION set operations. First, it finds species present in South America but not in Africa, then it finds those present in Africa but not in South America, and finally, it combines both results to get the unique species."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Retrieve the top 3 emerging technologies in terms of investment amount across different market sectors.,"CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(50), Sector VARCHAR(50)); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, TechID INT, Amount DECIMAL, FOREIGN KEY (TechID) REFERENCES Technologies(TechID));","WITH RankedTechnologies AS (SELECT T.TechName, SUM(I.Amount) AS TotalInvestment, DENSE_RANK() OVER (ORDER BY SUM(I.Amount) DESC) AS Rank FROM Technologies T INNER JOIN Investments I ON T.TechID = I.TechID GROUP BY T.TechName) SELECT TechName, TotalInvestment FROM RankedTechnologies WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank the emerging technologies based on the total investment amount in descending order. It then selects the top 3 technologies with the highest investment amounts using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a database table that stores information about fashion trends, including the trend name, the region where it's popular, the year it became a trend, and its sustainability score, then return the top 5 most sustainable fashion trends in Europe for the year 2020.","CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(50), Region VARCHAR(50), TrendYear INT, SustainabilityScore DECIMAL); INSERT INTO FashionTrends (TrendID, TrendName, Region, TrendYear, SustainabilityScore) VALUES (1, 'Athleisure', 'North America', 2020, 85.5), (2, 'Streetwear', 'Europe', 2020, 90.0), (3, 'Vintage', 'Asia', 2020, 95.0), (4, 'Minimalism', 'North America', 2020, 80.7), (5, 'Eco-Friendly', 'Europe', 2020, 99.0), (6, 'Upcycling', 'Europe', 2020, 98.5), (7, 'Slow Fashion', 'Europe', 2020, 97.0), (8, 'Vegan Leather', 'Europe', 2020, 96.0), (9, 'Organic Cotton', 'Europe', 2020, 95.5), (10, 'Second-Hand', 'Europe', 2020, 94.0);","WITH RankedTrends AS (SELECT TrendName, SustainabilityScore, DENSE_RANK() OVER (ORDER BY SustainabilityScore DESC) AS Rank FROM FashionTrends WHERE Region = 'Europe' AND TrendYear = 2020) SELECT TrendName, SustainabilityScore FROM RankedTrends WHERE Rank <= 5;","The query first creates a common table expression (CTE) to rank fashion trends based on their sustainability scores in descending order. It filters out the trends that are not from Europe and not from the year 2020. Finally, it selects the top 5 most sustainable fashion trends in Europe for the year 2020 using the DENSE_RANK function."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 crops with the highest yield per acre for the last five years in regions that have implemented sustainable farming practices.,"CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50)); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE CropYields (Year INT, Region VARCHAR(50), CropID INT, YieldPerAcre DECIMAL, PracticeID INT); INSERT INTO Crops (CropID, CropName) VALUES (1, 'Corn'), (2, 'Wheat'), (3, 'Soybeans'), (4, 'Rice'), (5, 'Barley'); INSERT INTO FarmingPractices (PracticeID, PracticeName, IsSustainable) VALUES (1, 'Conventional', FALSE), (2, 'Organic', TRUE), (3, 'Permaculture', TRUE), (4, 'Hydroponic', FALSE), (5, 'Agroforestry', TRUE); INSERT INTO CropYields (Year, Region, CropID, YieldPerAcre, PracticeID) VALUES (2018, 'North America', 1, 180.0, 2), (2018, 'Europe', 2, 85.0, 5), (2019, 'Asia', 3, 90.0, 3), (2020, 'South America', 4, 120.0, 3), (2021, 'Africa', 5, 75.0, 1);","WITH SustainableRegions AS (SELECT DISTINCT Region FROM CropYields INNER JOIN FarmingPractices ON CropYields.PracticeID = FarmingPractices.PracticeID WHERE IsSustainable = TRUE AND Year >= (SELECT MAX(Year) - 5 FROM CropYields)), RankedCrops AS (SELECT CropName, YieldPerAcre, DENSE_RANK() OVER (PARTITION BY Region ORDER BY YieldPerAcre DESC) AS Rank FROM CropYields INNER JOIN Crops ON CropYields.CropID = Crops.CropID WHERE Region IN (SELECT Region FROM SustainableRegions)) SELECT CropName, YieldPerAcre FROM RankedCrops WHERE Rank <= 5;","The query starts by identifying regions where sustainable farming practices have been implemented in the last five years. Then, for each of these regions, it ranks the crops based on their yield per acre. Finally, it selects the top 5 crops with the highest yield per acre in each of these regions."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Track the cumulative revenue from different content creators over multiple months and then find out which creators had the highest revenue growth rate within a specified time period. Make sure to handle transactions properly.,"CREATE TABLE MediaConsumption (ConsumptionID INT PRIMARY KEY, UserID INT, ContentID INT, ConsumptionDate DATE, MinutesWatched INT); CREATE TABLE Content (ContentID INT PRIMARY KEY, CreatorID INT, Title VARCHAR(255), Genre VARCHAR(100), ReleaseDate DATE); CREATE TABLE Creators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(255), JoinDate DATE); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, CreatorID INT, MonthYear DATE, Revenue DECIMAL);","BEGIN TRANSACTION; WITH RevenueGrowth AS (SELECT CreatorID, MonthYear, Revenue, LAG(Revenue) OVER (PARTITION BY CreatorID ORDER BY MonthYear) AS PreviousRevenue, (Revenue - LAG(Revenue) OVER (PARTITION BY CreatorID ORDER BY MonthYear)) / LAG(Revenue) OVER (PARTITION BY CreatorID ORDER BY MonthYear) * 100 AS GrowthRate FROM Revenue) SELECT CreatorID, MonthYear, Revenue, GrowthRate FROM RevenueGrowth ORDER BY GrowthRate DESC; COMMIT;","The query starts a transaction and creates a Common Table Expression (CTE) named 'RevenueGrowth' to calculate the revenue growth rate for each creator over different months. It uses the LAG window function to get the previous month's revenue and calculates the growth rate as a percentage change. Finally, it selects and orders the creators by their growth rate in descending order before committing the transaction."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the total vehicle sales for each brand in the year 2022, and display only those brands with total sales greater than 10,000 units.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, Brand VARCHAR(50), Model VARCHAR(50), SaleDate DATE, UnitsSold INT); INSERT INTO VehicleSales (SaleID, Brand, Model, SaleDate, UnitsSold) VALUES (1, 'Toyota', 'Corolla', '2022-03-15', 5000), (2, 'Honda', 'Civic', '2022-05-22', 6000), (3, 'Ford', 'Focus', '2022-08-30', 2000), (4, 'Toyota', 'Camry', '2022-11-11', 7000), (5, 'Ford', 'Mustang', '2022-01-25', 3000);","SELECT Brand, SUM(UnitsSold) AS TotalSales FROM VehicleSales WHERE YEAR(SaleDate) = 2022 GROUP BY Brand HAVING SUM(UnitsSold) > 10000;","The query calculates the total number of units sold for each brand in the year 2022 by using the SUM aggregation function on the UnitsSold column. It groups the results by the Brand column and then filters the grouped results to include only those brands where the sum of UnitsSold is greater than 10,000 units. The HAVING clause is used to filter the grouped results."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Insert data for the latest basketball tournament, then find the top 5 players with the highest average points per game in each position.","CREATE TABLE BasketballEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventDate DATE); INSERT INTO BasketballEvents (EventID, EventName, EventDate) VALUES (1, 'NBA Finals 2022', '2022-12-25'); CREATE TABLE PlayersStats (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Position VARCHAR(20), EventID INT, Points INT, GamesPlayed INT);","INSERT INTO PlayersStats (PlayerID, PlayerName, Position, EventID, Points, GamesPlayed) VALUES (1, 'James', 'Guard', 1, 240, 10), (2, 'Davis', 'Forward', 1, 210, 10), (3, 'Durant', 'Guard', 1, 230, 10), (4, 'Irving', 'Guard', 1, 220, 10), (5, 'Curry', 'Guard', 1, 245, 10), (6, 'Paul', 'Guard', 1, 205, 10); WITH AvgPoints AS (SELECT PlayerName, Position, CAST(Points AS FLOAT)/GamesPlayed AS AvgPointsPerGame FROM PlayersStats WHERE EventID = 1) SELECT Position, PlayerName, MAX(AvgPointsPerGame) AS MaxAvgPoints FROM AvgPoints GROUP BY Position;","The query first inserts data into PlayersStats table for latest basketball tournament. It then creates a common table expression (CTE) to calculate the average points per game for each player. Finally, it displays the top player with the highest average points in each position from the CTE using the MAX function grouped by position."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Insert the data for the new infrastructure projects funded by the government in the last financial year and return the total expenditure on each project type.,"CREATE TABLE InfrastructureProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), ProjectType VARCHAR(50), Budget DECIMAL); INSERT INTO InfrastructureProjects (ProjectID, ProjectName, ProjectType, Budget) VALUES (1, 'Highway 101', 'Road', 50000), (2, 'Main Street Bridge', 'Bridge', 20000), (3, 'Central Park', 'Park', 15000), (4, 'City Hall', 'Building', 30000), (5, 'Downtown Subway', 'Rail', 70000);","INSERT INTO InfrastructureProjects (ProjectID, ProjectName, ProjectType, Budget) VALUES (6, 'Harbor Port', 'Port', 80000); SELECT ProjectType, SUM(Budget) as TotalExpenditure FROM InfrastructureProjects GROUP BY ProjectType;",The query first inserts the data for a new infrastructure project into the table. Then it calculates the total expenditure on each project type by summing up the budget for the projects of the same type. The result is grouped by the project type.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",List the total number of room bookings and total revenue generated by each hotel in the last month and ensure that the transaction is committed.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Location VARCHAR(100)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, RoomNumber INT, BookingDate DATE, NumberOfNights INT, TotalAmount DECIMAL, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID)); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, FirstName VARCHAR(100), LastName VARCHAR(100), Email VARCHAR(100));","BEGIN TRANSACTION; SELECT H.HotelName, COUNT(B.BookingID) AS TotalBookings, SUM(B.TotalAmount) AS TotalRevenue FROM Hotels H LEFT JOIN Bookings B ON H.HotelID = B.HotelID WHERE B.BookingDate >= DATEADD(month, -1, GETDATE()) GROUP BY H.HotelName; COMMIT;","The query begins by starting a transaction. It then calculates the total number of room bookings and total revenue generated by each hotel in the last month. This is achieved by joining the Hotels and Bookings tables on the HotelID field and filtering the bookings made in the last month using the DATEADD function. The results are grouped by hotel name and include the total number of bookings and the total revenue. Finally, the transaction is committed to ensure the changes are saved."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"subqueries, including correlated and nested subqueries","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report displaying the total expenditure, grouped by department, for each fiscal year.","CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), FiscalYear INT, Expenditure DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, FiscalYear, Expenditure) VALUES (1, 'Health', 2021, 500000), (2, 'Education', 2021, 300000), (1, 'Health', 2022, 550000), (2, 'Education', 2022, 320000), (3, 'Defense', 2021, 700000), (3, 'Defense', 2022, 730000);","SELECT DepartmentName, FiscalYear, SUM(Expenditure) AS TotalExpenditure FROM GovernmentSpending GROUP BY DepartmentName, FiscalYear;","The query selects the department name, fiscal year, and the sum of expenditures grouped by department and fiscal year from the GovernmentSpending table. This allows us to see the total spending for each department in each fiscal year."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find how many trees have been planted in Asia and Europe and calculate the difference.,"CREATE TABLE TreesPlanted (Region VARCHAR(50), NumberOfTrees INT); INSERT INTO TreesPlanted (Region, NumberOfTrees) VALUES ('Asia', 1200000), ('Europe', 980000), ('North America', 1500000), ('Africa', 700000), ('South America', 1250000);",BEGIN; SELECT ABS((SELECT NumberOfTrees FROM TreesPlanted WHERE Region = 'Asia') - (SELECT NumberOfTrees FROM TreesPlanted WHERE Region = 'Europe')) AS Difference; COMMIT;,The SQL query starts a new transaction and selects the number of trees planted in both Asia and Europe from the TreesPlanted table. It then calculates the absolute difference between these two values. The transaction is committed at the end.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a report that provides a total number of hours watched for each genre of TV shows and Movies during the last month, and then generate a list of the 10 most popular genres using the BEGIN, COMMIT, and ROLLBACK transactional statements.","CREATE TABLE MediaConsumption (UserID INT, MediaType VARCHAR(50), MediaID INT, HoursWatched DECIMAL, WatchDate DATE); CREATE TABLE MediaDetails (MediaID INT PRIMARY KEY, MediaGenre VARCHAR(50), MediaType VARCHAR(50)); INSERT INTO MediaConsumption (UserID, MediaType, MediaID, HoursWatched, WatchDate) VALUES (1, 'TV Show', 101, 2.5, '2022-09-01'), (2, 'Movie', 201, 1.5, '2022-09-02'), (3, 'TV Show', 102, 3.0, '2022-09-03'), (4, 'Movie', 202, 2.0, '2022-09-04'); INSERT INTO MediaDetails (MediaID, MediaGenre, MediaType) VALUES (101, 'Drama', 'TV Show'), (102, 'Comedy', 'TV Show'), (201, 'Action', 'Movie'), (202, 'Thriller', 'Movie');","BEGIN; WITH MonthlyConsumption AS (SELECT MD.MediaGenre, SUM(MC.HoursWatched) AS TotalHours FROM MediaConsumption MC JOIN MediaDetails MD ON MC.MediaID = MD.MediaID WHERE MC.WatchDate >= DATEADD(month, -1, GETDATE()) GROUP BY MD.MediaGenre), PopularGenres AS (SELECT MediaGenre, TotalHours, RANK() OVER(ORDER BY TotalHours DESC) AS Rank FROM MonthlyConsumption) SELECT MediaGenre, TotalHours FROM PopularGenres WHERE Rank <= 10; COMMIT; ROLLBACK;","The query begins by initiating a transaction. It then creates two CTEs: MonthlyConsumption that aggregates the total hours watched for each genre during the last month and PopularGenres that ranks these genres based on their total hours watched. The final SELECT statement retrieves the 10 most popular genres based on watch time. A COMMIT statement is then used to finalize the transaction. Finally, a ROLLBACK statement is included to undo the transaction if something goes wrong."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Show the total revenue generated by each product category in the last quarter, and compare it with the revenue from the previous quarter.","CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, CategoryID INT, Revenue DECIMAL, SaleDate DATE); INSERT INTO Sales (SaleID, ProductID, CategoryID, Revenue, SaleDate) VALUES (1, 101, 1, 1200.5, '2022-04-01'), (2, 102, 1, 1500.0, '2022-03-01'), (3, 201, 2, 2000.0, '2022-02-01'), (4, 202, 2, 1800.0, '2022-01-01'), (5, 103, 1, 1100.0, '2021-12-01');","WITH Q1 AS (SELECT CategoryID, SUM(Revenue) as Q1_Revenue FROM Sales WHERE SaleDate BETWEEN DATE '2022-01-01' AND DATE '2022-03-31' GROUP BY CategoryID), Q4 AS (SELECT CategoryID, SUM(Revenue) as Q4_Revenue FROM Sales WHERE SaleDate BETWEEN DATE '2021-10-01' AND DATE '2021-12-31' GROUP BY CategoryID) SELECT Q1.CategoryID, Q1.Q1_Revenue, Q4.Q4_Revenue, Q1.Q1_Revenue - Q4.Q4_Revenue as Difference FROM Q1 JOIN Q4 ON Q1.CategoryID = Q4.CategoryID;","The SQL query first creates two common table expressions (CTEs) representing the total revenue by each product category in the first quarter (Q1) of 2022 and the fourth quarter (Q4) of 2021 respectively. It uses the SUM function to add up the Revenue from sales within each quarter, and the GROUP BY clause to separate the sums by CategoryID. The query then joins these two CTEs on CategoryID and selects the CategoryID and total revenue from each quarter, as well as the difference between the two quarters' revenues."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the names of fashion designers, the number of sustainable designs they have produced, and the number of total designs, and then display the top 5 designers with the highest ratio of sustainable designs to total designs.","CREATE TABLE DesignerSustainability (DesignerID INT PRIMARY KEY, DesignerName VARCHAR(50), SustainableDesigns INT, TotalDesigns INT); INSERT INTO DesignerSustainability (DesignerID, DesignerName, SustainableDesigns, TotalDesigns) VALUES (1, 'Stella McCartney', 100, 200), (2, 'Vivienne Westwood', 75, 150), (3, 'Eileen Fisher', 50, 100), (4, 'Ralph Lauren', 30, 60), (5, 'Giorgio Armani', 25, 50);","WITH SustainableRatios AS (SELECT DesignerName, SustainableDesigns, TotalDesigns, CAST(SustainableDesigns AS FLOAT)/TotalDesigns AS Ratio FROM DesignerSustainability) SELECT DesignerName, Ratio FROM SustainableRatios ORDER BY Ratio DESC LIMIT 5;",The query creates a common table expression (CTE) to calculate the ratio of sustainable designs to total designs for each fashion designer. It then sorts these ratios in descending order and selects the top 5 designers with the highest sustainable design ratios.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,pivoting and unpivoting,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the annual carbon emissions by sector, and display the data pivoted such that each sector is a column and each row represents a year.","CREATE TABLE CarbonEmissions (Year INT, Sector VARCHAR(50), Emissions DECIMAL); INSERT INTO CarbonEmissions (Year, Sector, Emissions) VALUES (2020, 'Transportation', 1200.5), (2020, 'Energy', 2500.8), (2020, 'Agriculture', 800.2), (2021, 'Transportation', 1150.4), (2021, 'Energy', 2450.7), (2021, 'Agriculture', 850.3);","SELECT Year, COALESCE([Transportation], 0) AS Transportation, COALESCE([Energy], 0) AS Energy, COALESCE([Agriculture], 0) AS Agriculture FROM (SELECT Year, Sector, Emissions FROM CarbonEmissions) AS SourceTable PIVOT (SUM(Emissions) FOR Sector IN ([Transportation], [Energy], [Agriculture])) AS PivotTable;","The query first selects the data from the CarbonEmissions table, then uses the PIVOT function to transform the 'Sector' rows into columns, calculating the sum of emissions for each sector per year. The COALESCE function is used to replace any NULL values with 0."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data manipulation: inserting, updating, or deleting records","Insert data into existing tables to reflect the government's spending on different public sectors over the last five years, then rank these sectors based on the increase in spending during this period.","CREATE TABLE PublicSpending (Year INT, Sector VARCHAR(50), Amount DECIMAL); INSERT INTO PublicSpending (Year, Sector, Amount) VALUES (2016, 'Health', 50000), (2017, 'Health', 60000), (2018, 'Health', 75000), (2019, 'Health', 80000), (2020, 'Health', 90000), (2016, 'Education', 30000), (2017, 'Education', 35000), (2018, 'Education', 40000), (2019, 'Education', 45000), (2020, 'Education', 50000), (2016, 'Defense', 70000), (2017, 'Defense', 80000), (2018, 'Defense', 85000), (2019, 'Defense', 90000), (2020, 'Defense', 95000);","WITH Difference AS (SELECT Sector, MAX(Amount) - MIN(Amount) AS Diff FROM PublicSpending GROUP BY Sector), RankSectors AS (SELECT Sector, Diff, RANK() OVER (ORDER BY Diff DESC) AS Rank FROM Difference) SELECT Sector, Diff FROM RankSectors WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) named 'Difference' that calculates the increase in government spending in each sector over the last five years, by subtracting the smallest amount spent from the largest for each sector. Another CTE 'RankSectors' is created to rank these sectors in descending order based on the calculated difference using the RANK() window function. The final SELECT statement then retrieves the top 5 sectors with the largest increase in spending."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,"Find the top 5 countries with the most number of endangered species, and list them along with the percentage of species at risk in each of those countries","CREATE TABLE EndangeredSpecies (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Country VARCHAR(50), Status VARCHAR(20)); INSERT INTO EndangeredSpecies (SpeciesID, SpeciesName, Country, Status) VALUES (1, 'Polar Bear', 'Canada', 'Endangered'), (2, 'White Rhino', 'South Africa', 'Critically Endangered'), (3, 'Amur Leopard', 'Russia', 'Critically Endangered'), (4, 'Hawksbill Turtle', 'Australia', 'Critically Endangered'), (5, 'Black-footed Ferret', 'United States', 'Endangered'), (6, 'Mountain Gorilla', 'Rwanda', 'Endangered'), (7, 'Sumatran Elephant', 'Indonesia', 'Critically Endangered'), (8, 'Tiger', 'India', 'Endangered'), (9, 'Giant Panda', 'China', 'Vulnerable'), (10, 'Snow Leopard', 'China', 'Vulnerable');","WITH CountryCount AS (SELECT Country, COUNT(*) AS TotalSpecies FROM EndangeredSpecies GROUP BY Country), EndangeredCount AS (SELECT Country, COUNT(*) AS EndangeredSpecies FROM EndangeredSpecies WHERE Status IN ('Endangered', 'Critically Endangered') GROUP BY Country), Combined AS (SELECT cc.Country, cc.TotalSpecies, ec.EndangeredSpecies FROM CountryCount cc JOIN EndangeredCount ec ON cc.Country = ec.Country) SELECT Country, EndangeredSpecies, ROUND((EndangeredSpecies * 100.0) / TotalSpecies, 2) AS EndangeredPercentage FROM Combined ORDER BY EndangeredSpecies DESC LIMIT 5;","The query first creates three common table expressions (CTEs). The first CTE, CountryCount, calculates the total number of species per country. The second CTE, EndangeredCount, calculates the number of endangered or critically endangered species per country. The third CTE, Combined, joins the first two CTEs on the common 'Country' field. The main SELECT statement then retrieves the top five countries with the most number of endangered species, along with the percentage of species at risk in each of those countries, rounding the percentage to two decimal places. The results are ordered by the number of endangered species in descending order."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Find and update the rows of companies that are both in the 'Technology' sector and have reported a significant increase in their annual revenue, but exclude those who have reported major layoffs.","CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Sector VARCHAR(50), AnnualRevenue DECIMAL, LayoffsReported BOOLEAN); INSERT INTO Companies (CompanyID, CompanyName, Sector, AnnualRevenue, LayoffsReported) VALUES (1, 'Tech Innovators', 'Technology', 5000000.00, FALSE), (2, 'Future Tech', 'Technology', 7000000.00, TRUE), (3, 'Green Energy', 'Energy', 3000000.00, FALSE), (4, 'Cloud Solutions', 'Technology', 9000000.00, FALSE), (5, 'Smart Devices', 'Technology', 2000000.00, TRUE);","WITH IncreasedRevenue AS (SELECT CompanyID, CompanyName FROM Companies WHERE Sector = 'Technology' AND AnnualRevenue > 6000000), NoLayoffs AS (SELECT CompanyID, CompanyName FROM Companies WHERE LayoffsReported = FALSE) UPDATE Companies SET AnnualRevenue = AnnualRevenue * 1.1 WHERE CompanyID IN (SELECT CompanyID FROM IncreasedRevenue INTERSECT SELECT CompanyID FROM NoLayoffs);","The query first creates two common table expressions (CTEs): one for companies in the 'Technology' sector with annual revenue greater than 6 million, and another for companies that have not reported layoffs. It then updates the annual revenue of companies that appear in both CTEs by increasing it by 10%. The INTERSECT set operation ensures that only companies meeting both criteria are updated."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert data about different species' population over the years in various regions into a table and then identify the top 5 species whose population has increased the most over the last decade in North America.,"CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(50), Region VARCHAR(50), Year INT, Population INT); INSERT INTO Species (SpeciesID, SpeciesName, Region, Year, Population) VALUES (1, 'Black Bear', 'North America', 2010, 50000), (2, 'Black Bear', 'North America', 2020, 60000), (3, 'Bald Eagle', 'North America', 2010, 7000), (4, 'Bald Eagle', 'North America', 2020, 10000), (5, 'Giant Panda', 'Asia', 2010, 2000), (6, 'Giant Panda', 'Asia', 2020, 2500);","WITH PopulationIncrease AS (SELECT SpeciesName, MAX(Population) - MIN(Population) AS Increase FROM Species WHERE Region = 'North America' AND Year BETWEEN 2010 AND 2020 GROUP BY SpeciesName) SELECT SpeciesName, Increase FROM PopulationIncrease ORDER BY Increase DESC LIMIT 5;","The query first creates a common table expression (CTE) named PopulationIncrease, which calculates the increase in population for each species in North America between 2010 and 2020. Then, it selects the species name and population increase from the CTE, orders the results in descending order of population increase, and limits the results to the top 5."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the product details for the most popular fashion items in each region and then find out the five most sustainable brands based on their average sustainability ratings.,"CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(100), BrandID INT, Region VARCHAR(50), PopularityScore INT); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(100), SustainabilityRating DECIMAL); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ProductID INT, SaleDate DATE, QuantitySold INT);","WITH UpdatedProducts AS (UPDATE Products SET PopularityScore = PopularityScore + 10 WHERE Region IN (SELECT Region FROM (SELECT Region, MAX(PopularityScore) AS MaxScore FROM Products GROUP BY Region) AS RegionScores WHERE Products.PopularityScore = RegionScores.MaxScore) RETURNING *), SustainableBrands AS (SELECT BrandName, AVG(SustainabilityRating) AS AvgRating FROM Brands GROUP BY BrandID, BrandName) SELECT BrandName, AvgRating FROM SustainableBrands ORDER BY AvgRating DESC LIMIT 5;","The query first updates the popularity scores of the most popular fashion items in each region by increasing their scores by 10. This is done using a subquery to find the maximum popularity score in each region. Then, it creates a common table expression (CTE) to calculate the average sustainability rating for each brand. Finally, it selects the top 5 brands with the highest average sustainability ratings."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the total amount of carbon emissions reduced by each country in the last decade through the use of renewable energy.,"CREATE TABLE RenewableEnergy (Country VARCHAR(50), Year INT, CarbonReduction DECIMAL); INSERT INTO RenewableEnergy (Country, Year, CarbonReduction) VALUES ('USA', 2011, 5000), ('USA', 2012, 5200), ('USA', 2013, 5400), ('USA', 2014, 5600), ('USA', 2015, 5800), ('USA', 2016, 6000), ('USA', 2017, 6200), ('USA', 2018, 6400), ('USA', 2019, 6600), ('USA', 2020, 6800), ('Germany', 2011, 4000), ('Germany', 2012, 4200), ('Germany', 2013, 4400), ('Germany', 2014, 4600), ('Germany', 2015, 4800), ('Germany', 2016, 5000), ('Germany', 2017, 5200), ('Germany', 2018, 5400), ('Germany', 2019, 5600), ('Germany', 2020, 5800);","SELECT Country, SUM(CarbonReduction) as TotalReduction FROM RenewableEnergy WHERE Year BETWEEN 2011 AND 2020 GROUP BY Country;","The SQL query first filters the table 'RenewableEnergy' for rows where the year is between 2011 and 2020. It then groups the remaining rows by country. For each group, it sums the values in the 'CarbonReduction' column to find the total amount of carbon emissions reduced by each country in the last decade."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Retrieve the top 10 most-watched movies along with the number of views and the percentage of total views each movie represents.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), ReleaseDate DATE); CREATE TABLE Viewership (WatchID INT PRIMARY KEY, MovieID INT, UserID INT, WatchDate DATE, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID));","WITH TotalViews AS (SELECT COUNT(*) AS Total FROM Viewership), MovieViews AS (SELECT M.Title, COUNT(V.WatchID) AS Views, COUNT(V.WatchID) * 100.0 / (SELECT Total FROM TotalViews) AS Percentage FROM Viewership V JOIN Movies M ON V.MovieID = M.MovieID GROUP BY M.Title), RankedMovies AS (SELECT Title, Views, Percentage, ROW_NUMBER() OVER (ORDER BY Views DESC) AS RowNum FROM MovieViews) SELECT Title, Views, Percentage FROM RankedMovies WHERE RowNum <= 10;",The query first creates a common table expression (CTE) named TotalViews to calculate the total number of views across all movies. Another CTE named MovieViews calculates the number of views and the percentage of total views for each movie. A final CTE named RankedMovies ranks the movies by the number of views in descending order and assigns a row number to each movie. The main query selects the top 10 movies based on the number of views and includes their view count and percentage of total views.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,"Find out the top 5 countries which have the highest average spending on sustainable fashion, along with their corresponding fashion trends.","CREATE TABLE SustainableFashion (Country VARCHAR(50), AvgSpending DECIMAL, TrendID INT); CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, FashionTrendName VARCHAR(50), TrendDescription VARCHAR(255)); INSERT INTO SustainableFashion (Country, AvgSpending, TrendID) VALUES ('USA', 150.25, 1), ('UK', 140.75, 2), ('Germany', 130.5, 3), ('France', 120.5, 4), ('Japan', 110.75, 5); INSERT INTO FashionTrends (TrendID, FashionTrendName, TrendDescription) VALUES (1, 'Vintage', 'Classic style'), (2, 'Minimalist', 'Simplistic and clean'), (3, 'Boho', 'Free-spirited and natural'), (4, 'Chic', 'Stylish and fashionable'), (5, 'Street', 'Urban and trendy');","WITH RankedCountries AS (SELECT Country, AvgSpending, DENSE_RANK() OVER (ORDER BY AvgSpending DESC) AS Rank FROM SustainableFashion) SELECT RC.Country, RC.AvgSpending, FT.FashionTrendName, FT.TrendDescription FROM RankedCountries AS RC JOIN FashionTrends AS FT ON RC.TrendID = FT.TrendID WHERE Rank <= 5;","The query first creates a common table expression (CTE) to rank countries based on their average spending on sustainable fashion in descending order. It then joins this CTE with the FashionTrends table on the TrendID to fetch the corresponding fashion trend for each country. Finally, it selects the top 5 countries with the highest average spending along with their corresponding fashion trends."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Retrieve the total revenue generated by each content creator who has produced more than 10 videos in the past year.,"CREATE TABLE ContentCreators (CreatorID INT PRIMARY KEY, CreatorName VARCHAR(100), JoinDate DATE); CREATE TABLE Videos (VideoID INT PRIMARY KEY, CreatorID INT, Title VARCHAR(200), UploadDate DATE, Views INT, Revenue DECIMAL, FOREIGN KEY (CreatorID) REFERENCES ContentCreators(CreatorID));","SELECT CreatorName, SUM(Revenue) AS TotalRevenue FROM ContentCreators CC JOIN Videos V ON CC.CreatorID = V.CreatorID WHERE YEAR(UploadDate) = YEAR(CURDATE()) GROUP BY CreatorName HAVING COUNT(VideoID) > 10;","The query joins the ContentCreators and Videos tables based on the CreatorID. It filters the videos uploaded in the current year, groups the results by CreatorName, and calculates the total revenue for each creator. The HAVING clause ensures only those creators who have produced more than 10 videos in the past year are included in the final result."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the sales data of various fashion brands across different regions, and then display the top 5 brands with highest sales in the last quarter.","CREATE TABLE BrandSales (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), QuarterlySales DECIMAL); INSERT INTO BrandSales (BrandID, BrandName, Region, QuarterlySales) VALUES (1, 'Gucci', 'North America', 1500.5), (2, 'Prada', 'Europe', 1800.0), (3, 'Versace', 'Asia', 2000.0), (4, 'Burberry', 'North America', 2200.7), (5, 'Louis Vuitton', 'Europe', 2500.0);","WITH RankedBrands AS (SELECT BrandName, QuarterlySales, DENSE_RANK() OVER (ORDER BY QuarterlySales DESC) AS Rank FROM BrandSales) SELECT BrandName, QuarterlySales FROM RankedBrands WHERE Rank <= 5;",The SQL query first creates a common table expression (CTE) to rank the fashion brands based on their quarterly sales in descending order. The brands with the highest sales get the lowest rank. It then selects the top 5 brands with the highest sales using the DENSE_RANK function.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Find the top 5 models with the highest combined sales in North America and Europe, and the electric vehicle models that are not part of this list.","CREATE TABLE CarSales (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO CarSales (ModelID, ModelName, Region, Sales) VALUES (1, 'Model S', 'North America', 25000), (2, 'Model 3', 'Europe', 30000), (3, 'Leaf', 'Asia', 20000), (4, 'Bolt', 'North America', 15000), (5, 'Prius', 'Europe', 18000); CREATE TABLE ElectricVehicles (EVModelID INT PRIMARY KEY, EVModelName VARCHAR(50)); INSERT INTO ElectricVehicles (EVModelID, EVModelName) VALUES (1, 'Model S'), (2, 'Model 3'), (3, 'Leaf'), (4, 'Bolt');","WITH TopSales AS (SELECT ModelName, SUM(Sales) as TotalSales FROM CarSales WHERE Region IN ('North America', 'Europe') GROUP BY ModelName ORDER BY TotalSales DESC LIMIT 5), EVNotInTopSales AS (SELECT EVModelName FROM ElectricVehicles EXCEPT SELECT ModelName FROM TopSales) SELECT * FROM EVNotInTopSales;","The query first creates a common table expression (CTE) named TopSales that calculates the sum of sales for each model in North America and Europe, and then orders the models by total sales in descending order, limiting the results to the top 5 models. Next, it creates another CTE named EVNotInTopSales that selects the names of electric vehicle models that are not in the TopSales list. Finally, it selects all models from the EVNotInTopSales list."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Start a transaction to record all the new patients admitted in the last 24 hours, from all the doctors' offices, and save their details in the Patients table. Also, find out the total count of patients and total count of unique doctors who admitted them.","CREATE TABLE Doctors (DoctorID INT PRIMARY KEY, DoctorName VARCHAR(50), Specialty VARCHAR(50)); CREATE TABLE PatientAdmissions (AdmissionID INT PRIMARY KEY, PatientID INT, DoctorID INT, AdmissionDate DATETIME); CREATE TABLE Patients (PatientID INT PRIMARY KEY, PatientName VARCHAR(50), Age INT, Gender VARCHAR(10), MedicalHistory TEXT); INSERT INTO Doctors (DoctorID, DoctorName, Specialty) VALUES (1, 'Dr. Smith', 'Cardiology'), (2, 'Dr. Johnson', 'Neurology'), (3, 'Dr. Williams', 'Orthopedics'); INSERT INTO PatientAdmissions (AdmissionID, PatientID, DoctorID, AdmissionDate) VALUES (1, 101, 1, '2022-01-01 10:00:00'), (2, 102, 3, '2022-01-02 11:30:00'), (3, 103, 2, '2022-01-02 13:00:00'), (4, 104, 1, '2022-01-03 09:00:00');","BEGIN TRANSACTION INSERT INTO Patients SELECT pa.PatientID, 'Unknown', NULL, 'Unknown', 'No Past Records' FROM PatientAdmissions pa WHERE pa.AdmissionDate >= DATEADD(day, -1, GETDATE()) AND pa.PatientID NOT IN (SELECT p.PatientID FROM Patients p); COMMIT SELECT COUNT(DISTINCT pa.PatientID) AS TotalPatients, COUNT(DISTINCT pa.DoctorID) AS TotalDoctors FROM PatientAdmissions pa WHERE pa.AdmissionDate >= DATEADD(day, -1, GETDATE());","The query begins a transaction to add new patients into the Patients table. It selects the PatientID from the PatientAdmissions table where the AdmissionDate is within the last 24 hours and the PatientID does not already exist in the Patients table. After inserting these records, it commits the transaction to save the changes. The query then counts the distinct PatientIDs and DoctorIDs from the PatientAdmissions table where the AdmissionDate is within the last 24 hours, giving us the total count of new patients and the count of unique doctors who admitted them in the last 24 hours."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Identify the top five medications with the highest efficacy based on patient outcomes.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10), Region VARCHAR(50)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(50), MedicationName VARCHAR(50), TreatmentProtocol VARCHAR(50)); CREATE TABLE TreatmentOutcomes (OutcomeID INT PRIMARY KEY, HistoryID INT, OutcomeScore INT); CREATE TABLE DrugEfficacy (DrugID INT PRIMARY KEY, MedicationName VARCHAR(50), EfficacyScore DECIMAL);","WITH MedEfficacy AS (SELECT MedicationName, AVG(OutcomeScore) as AvgOutcomeScore FROM MedicalHistories mh JOIN TreatmentOutcomes to ON mh.HistoryID = to.HistoryID GROUP BY MedicationName) SELECT MedicationName, AvgOutcomeScore FROM MedEfficacy ORDER BY AvgOutcomeScore DESC LIMIT 5;","The query first creates a common table expression (CTE) named MedEfficacy. This CTE joins the MedicalHistories and TreatmentOutcomes tables on the HistoryID field, then groups by MedicationName to calculate the average OutcomeScore for each medication. Lastly, it selects the top 5 medications based on this average score in descending order."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries",data retrieval: basic data fetching queries,"Retrieve the names and ages of patients who have been prescribed a specific medication, and the dates they were prescribed it.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT); CREATE TABLE Medications (MedicationID INT PRIMARY KEY, MedicationName VARCHAR(100)); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, MedicationID INT, PrescriptionDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), FOREIGN KEY (MedicationID) REFERENCES Medications(MedicationID));","SELECT p.Name, p.Age, pr.PrescriptionDate FROM Patients p JOIN Prescriptions pr ON p.PatientID = pr.PatientID JOIN Medications m ON pr.MedicationID = m.MedicationID WHERE m.MedicationName = 'specific medication';","The query retrieves the names and ages of patients along with the dates they were prescribed a specific medication. It does this by joining the Patients, Prescriptions, and Medications tables on their respective keys and filtering for the specific medication name in the WHERE clause."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Find the average annual revenue of all hotels in the East region and create a table to store this information.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Region VARCHAR(50), AnnualRevenue DECIMAL); INSERT INTO Hotels (HotelID, HotelName, Region, AnnualRevenue) VALUES (1, 'Hotel Royale', 'East', 5000000), (2, 'Hotel Tranquil', 'West', 3000000), (3, 'Hotel Elite', 'East', 7000000), (4, 'Hotel Elegance', 'North', 4500000), (5, 'Hotel Regal', 'East', 6000000); CREATE TABLE AvgRevenueEast (AvgRevenue DECIMAL);",INSERT INTO AvgRevenueEast (AvgRevenue) SELECT AVG(AnnualRevenue) FROM Hotels WHERE Region = 'East';,The SQL query calculates the average annual revenue of all hotels in the East region from the 'Hotels' table and inserts this value into a new table called 'AvgRevenueEast'.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 3 brands with highest number of sales in each region for the last quarter, and if any transaction fails, the database should rollback to ensure consistency.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Sales (SalesID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), Sales INT, SaleDate DATE); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Zara'), (2, 'H&M'), (3, 'Uniqlo'), (4, 'Gap'), (5, 'Gucci'); INSERT INTO Sales (SalesID, BrandID, Region, Sales, SaleDate) VALUES (1, 1, 'North America', 100, '2022-09-01'), (2, 2, 'Europe', 150, '2022-09-05'), (3, 3, 'Asia', 120, '2022-09-10'), (4, 4, 'North America', 110, '2022-09-15'), (5, 5, 'Europe', 180, '2022-09-20');","BEGIN; WITH QuarterlySales AS (SELECT BrandName, Region, SUM(Sales) AS TotalSales FROM Brands JOIN Sales ON Brands.BrandID = Sales.BrandID WHERE SaleDate >= '2022-07-01' AND SaleDate <= '2022-09-30' GROUP BY BrandName, Region), RankedSales AS (SELECT BrandName, Region, TotalSales, DENSE_RANK() OVER (PARTITION BY Region ORDER BY TotalSales DESC) AS Rank FROM QuarterlySales) SELECT BrandName, Region, TotalSales FROM RankedSales WHERE Rank <= 3; COMMIT;","The query starts a transaction using the BEGIN statement. It then creates a common table expression (CTE) to aggregate the total sales for each brand in each region for the last quarter. Another CTE is used to rank the brands within each region based on their total sales. Finally, it selects the top 3 brands in each region based on sales. If any part of the transaction fails, the COMMIT statement will never be executed and the database will rollback to its previous state."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"two or more joins (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table that records government spending on different public policies and links it with legislative processes and their effectiveness across various regions.,"CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), BudgetAllocated DECIMAL, Region VARCHAR(50)); CREATE TABLE LegislativeProcess (ProcessID INT PRIMARY KEY, ProcessName VARCHAR(100), PolicyID INT, FOREIGN KEY (PolicyID) REFERENCES PublicPolicy(PolicyID)); CREATE TABLE GovernanceEffectiveness (EffectivenessID INT PRIMARY KEY, ProcessID INT, EffectivenessScore DECIMAL, Region VARCHAR(50), FOREIGN KEY (ProcessID) REFERENCES LegislativeProcess(ProcessID)); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50)); INSERT INTO PublicPolicy (PolicyID, PolicyName, BudgetAllocated, Region) VALUES (1, 'Education Reform', 5000000, 'North America'), (2, 'Healthcare Expansion', 7000000, 'Europe'); INSERT INTO LegislativeProcess (ProcessID, ProcessName, PolicyID) VALUES (1, 'Bill Passing', 1), (2, 'Amendment', 2); INSERT INTO GovernanceEffectiveness (EffectivenessID, ProcessID, EffectivenessScore, Region) VALUES (1, 1, 85.5, 'North America'), (2, 2, 78.0, 'Europe');","CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, PolicyID INT, ProcessID INT, EffectivenessID INT, FOREIGN KEY (PolicyID) REFERENCES PublicPolicy(PolicyID), FOREIGN KEY (ProcessID) REFERENCES LegislativeProcess(ProcessID), FOREIGN KEY (EffectivenessID) REFERENCES GovernanceEffectiveness(EffectivenessID));","The query creates a new table called GovernmentSpending which links the existing tables PublicPolicy, LegislativeProcess, and GovernanceEffectiveness. It establishes foreign key relationships to ensure data integrity between the policy, process, and effectiveness records across various regions."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Show the top 3 most innovative companies based on the number of patents filed over the last 5 years.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Industry VARCHAR(100)); CREATE TABLE Patents (PatentID INT PRIMARY KEY, CompanyID INT, PatentDate DATE, PatentTitle VARCHAR(255), FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH PatentCounts AS (SELECT CompanyID, COUNT(PatentID) AS PatentCount FROM Patents WHERE PatentDate >= DATEADD(YEAR, -5, GETDATE()) GROUP BY CompanyID), RankedCompanies AS (SELECT CompanyID, PatentCount, ROW_NUMBER() OVER (ORDER BY PatentCount DESC) AS Rank FROM PatentCounts) SELECT C.CompanyName, RC.PatentCount FROM RankedCompanies RC JOIN Companies C ON RC.CompanyID = C.CompanyID WHERE RC.Rank <= 3;","The query first creates a common table expression (CTE) named 'PatentCounts' that counts the number of patents filed by each company in the last 5 years. A second CTE 'RankedCompanies' then ranks these companies based on their patent count in descending order using the ROW_NUMBER window function. Finally, it selects the top 3 companies by joining 'RankedCompanies' with the 'Companies' table and filtering ranks less than or equal to 3."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 3 most innovative companies in the fintech industry based on their annual R&D expenditure and number of patents filed.,"CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Industry VARCHAR(50)); CREATE TABLE RnDExpenditure (CompanyID INT, Year INT, Expenditure DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); CREATE TABLE Patents (CompanyID INT, Year INT, PatentsFiled INT, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH InnovationScores AS (SELECT c.CompanyName, SUM(r.Expenditure) AS TotalExpenditure, SUM(p.PatentsFiled) AS TotalPatents FROM Companies c JOIN RnDExpenditure r ON c.CompanyID = r.CompanyID JOIN Patents p ON c.CompanyID = p.CompanyID WHERE c.Industry = 'Fintech' GROUP BY c.CompanyName) SELECT CompanyName, TotalExpenditure, TotalPatents FROM InnovationScores ORDER BY TotalExpenditure DESC, TotalPatents DESC LIMIT 3;","The query first creates a common table expression (CTE) named InnovationScores that calculates the total R&D expenditure and total patents filed for each fintech company. It then selects the company name, total R&D expenditure, and total patents filed, ordering the results by total expenditure and then by total patents, and limits the output to the top 3 companies."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 countries with the highest average CO2 emissions per capita from 2010 to 2020.,"CREATE TABLE CO2Emissions (Country VARCHAR(50), Year INT, EmissionsPerCapita DECIMAL); INSERT INTO CO2Emissions (Country, Year, EmissionsPerCapita) VALUES ('USA', 2010, 16.5), ('USA', 2020, 15.9), ('China', 2010, 6.1), ('China', 2020, 7.5), ('India', 2010, 1.7), ('India', 2020, 2.6), ('Germany', 2010, 9.1), ('Germany', 2020, 8.9), ('Brazil', 2010, 2.2), ('Brazil', 2020, 2.4);","WITH AvgEmissions AS (SELECT Country, AVG(EmissionsPerCapita) AS Average FROM CO2Emissions WHERE Year BETWEEN 2010 AND 2020 GROUP BY Country) SELECT Country, Average FROM AvgEmissions ORDER BY Average DESC LIMIT 5;","The SQL query first generates a common table expression that calculates the average CO2 emissions per capita for each country between 2010 and 2020. It then returns the top 5 countries with the highest average emissions, ordered in descending order."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Create a transaction that saves the average yield of each crop type per region from the Harvest table into the CropYieldStats table. Rollback the transaction if there are any errors during the process.,"CREATE TABLE Harvest (HarvestID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); CREATE TABLE CropYieldStats (CropType VARCHAR(50), Region VARCHAR(50), AvgYield DECIMAL);","BEGIN TRANSACTION; TRY BEGIN INSERT INTO CropYieldStats (CropType, Region, AvgYield) SELECT CropType, Region, AVG(Yield) FROM Harvest GROUP BY CropType, Region; COMMIT; END TRY BEGIN CATCH ROLLBACK; END CATCH;","The query starts a transaction and attempts to insert the average yield of each crop type per region from the Harvest table into the CropYieldStats table. If there are any errors during this process, the transaction is rolled back, meaning no changes are made to the database."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 10 emerging technology companies in terms of investment received in the current year, along with the regions they are based in.","CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Region VARCHAR(50)); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, CompanyID INT, InvestmentAmount DECIMAL, InvestmentDate DATE, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID));","WITH CurrentYearInvestments AS (SELECT C.CompanyName, C.Region, SUM(I.InvestmentAmount) AS TotalInvestment FROM Companies C INNER JOIN Investments I ON C.CompanyID = I.CompanyID WHERE YEAR(I.InvestmentDate) = YEAR(CURDATE()) GROUP BY C.CompanyName, C.Region ORDER BY TotalInvestment DESC LIMIT 10) SELECT * FROM CurrentYearInvestments;","The query creates a common table expression (CTE) named CurrentYearInvestments that joins the Companies and Investments tables using an inner join. It filters the investments to include only those from the current year, groups the data by company name and region, and calculates the total investment amount. The results are then ordered by the total investment amount in descending order, and the top 10 companies are selected."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Delete all records of customer preferences who haven't made a booking in the last 5 years and then list the top 3 most preferred travel destinations.,"CREATE TABLE CustomerPreferences (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), PreferredDestination VARCHAR(50), LastBookingDate DATE); INSERT INTO CustomerPreferences (CustomerID, CustomerName, PreferredDestination, LastBookingDate) VALUES (1, 'John Doe', 'Paris', '2016-01-01'), (2, 'Jane Doe', 'Rome', '2019-12-31'), (3, 'Richard Roe', 'London', '2017-06-15'), (4, 'Jane Roe', 'New York', '2020-11-01'), (5, 'John Smith', 'Tokyo', '2015-08-20'); CREATE TABLE Destinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50)); INSERT INTO Destinations (DestinationID, DestinationName) VALUES (1, 'Paris'), (2, 'Rome'), (3, 'London'), (4, 'New York'), (5, 'Tokyo');","DELETE FROM CustomerPreferences WHERE LastBookingDate < DATE_SUB(CURDATE(), INTERVAL 5 YEAR); WITH PreferredDestinations AS (SELECT PreferredDestination, COUNT(*) AS PreferenceCount FROM CustomerPreferences GROUP BY PreferredDestination) SELECT DestinationName, PreferenceCount FROM Destinations INNER JOIN PreferredDestinations ON Destinations.DestinationName = PreferredDestinations.PreferredDestination ORDER BY PreferenceCount DESC LIMIT 3;","The SQL query first deletes all the records from the CustomerPreferences table where the LastBookingDate is more than 5 years ago. It then creates a common table expression (CTE) named PreferredDestinations that groups the remaining records by PreferredDestination and counts the number of occurrences of each destination. The final part of the query joins the Destinations table with the PreferredDestinations CTE on the DestinationName and PreferredDestination respectively, orders the results by the PreferenceCount in descending order and limits the result set to the top 3."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Identify the top 3 regions with the highest average temperature increase over the past decade.,"CREATE TABLE TemperatureData (Region VARCHAR(50), Year INT, AvgTemperature DECIMAL); INSERT INTO TemperatureData (Region, Year, AvgTemperature) VALUES ('North America', 2010, 15.5), ('North America', 2020, 16.1), ('Europe', 2010, 14.2), ('Europe', 2020, 15.3), ('Asia', 2010, 22.0), ('Asia', 2020, 23.1), ('Africa', 2010, 25.5), ('Africa', 2020, 26.6);","WITH TempChange AS (SELECT Region, (MAX(AvgTemperature) - MIN(AvgTemperature)) AS TempIncrease FROM TemperatureData WHERE Year BETWEEN 2010 AND 2020 GROUP BY Region), RankedRegions AS (SELECT Region, TempIncrease, RANK() OVER (ORDER BY TempIncrease DESC) AS Rank FROM TempChange) SELECT Region, TempIncrease FROM RankedRegions WHERE Rank <= 3;","The query first creates a common table expression (CTE) named TempChange to calculate the temperature increase for each region over the past decade. Then, it ranks these regions based on the temperature increase using the RANK window function. Finally, it selects the top 3 regions with the highest average temperature increase."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the impact of different farming practices on crop yields and global food security initiatives, and ensure transactional integrity during the process.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), YieldPerAcre DECIMAL, Year INT); CREATE TABLE FarmingPractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(50), Description VARCHAR(255)); CREATE TABLE CropPractices (CropPracticeID INT PRIMARY KEY, CropID INT, PracticeID INT, ImpactFactor DECIMAL); CREATE TABLE FoodSecurityInitiatives (InitiativeID INT PRIMARY KEY, InitiativeName VARCHAR(50), Description VARCHAR(255), Region VARCHAR(50)); CREATE TABLE InitiativeImpact (ImpactID INT PRIMARY KEY, InitiativeID INT, CropID INT, ImpactValue DECIMAL);","BEGIN TRANSACTION; WITH PracticeYields AS (SELECT C.CropID, C.CropName, P.PracticeName, CP.ImpactFactor * C.YieldPerAcre AS AdjustedYield FROM CropYields C INNER JOIN CropPractices CP ON C.CropID = CP.CropID INNER JOIN FarmingPractices P ON CP.PracticeID = P.PracticeID), InitiativeImpactAnalysis AS (SELECT I.InitiativeName, I.Region, SUM(PY.AdjustedYield * II.ImpactValue) AS TotalImpact FROM PracticeYields PY INNER JOIN InitiativeImpact II ON PY.CropID = II.CropID INNER JOIN FoodSecurityInitiatives I ON II.InitiativeID = I.InitiativeID GROUP BY I.InitiativeName, I.Region) SELECT * FROM InitiativeImpactAnalysis; COMMIT;","The query begins a transaction to ensure data integrity. It first creates a common table expression (CTE) named PracticeYields that calculates adjusted crop yields by multiplying the impact factor of farming practices with the original yield per acre. It then creates another CTE named InitiativeImpactAnalysis to aggregate the total impact of different initiatives on crop yields by summing up the adjusted yields, weighted by the impact value, grouped by initiative and region. Finally, it commits the transaction."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report on total government spending on healthcare by state and the average effectiveness rating of healthcare policies in those states over the past five years.,"CREATE TABLE GovernmentSpending (StateID INT PRIMARY KEY, StateName VARCHAR(50), Year INT, SpendingAmount DECIMAL); CREATE TABLE HealthcarePolicies (PolicyID INT PRIMARY KEY, StateID INT, PolicyName VARCHAR(100), EffectivenessRating DECIMAL); CREATE TABLE States (StateID INT PRIMARY KEY, StateName VARCHAR(50));","SELECT s.StateName, SUM(gs.SpendingAmount) AS TotalSpending, AVG(hp.EffectivenessRating) AS AvgEffectivenessRating FROM GovernmentSpending gs INNER JOIN States s ON gs.StateID = s.StateID LEFT JOIN HealthcarePolicies hp ON s.StateID = hp.StateID WHERE gs.Year BETWEEN YEAR(CURDATE()) - 5 AND YEAR(CURDATE()) GROUP BY s.StateName;","The query calculates the total government spending on healthcare by state and the average effectiveness rating of healthcare policies in those states over the past five years. It performs an INNER JOIN between GovernmentSpending and States tables to get state names, and a LEFT JOIN with HealthcarePolicies to include effectiveness ratings. The results are grouped by state name to provide a summary report."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights",Find the top 5 countries with the highest percentage increase in renewable energy production from the previous year.,"CREATE TABLE RenewableEnergy (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, EnergyProduced DECIMAL); INSERT INTO RenewableEnergy (CountryID, CountryName, Year, EnergyProduced) VALUES (1, 'China', 2020, 2000.5), (2, 'USA', 2020, 1800.0), (3, 'India', 2020, 1500.0), (4, 'Germany', 2020, 1400.7), (5, 'Brazil', 2020, 1300.0), (1, 'China', 2019, 1500.5), (2, 'USA', 2019, 1600.0), (3, 'India', 2019, 1400.0), (4, 'Germany', 2019, 1200.7), (5, 'Brazil', 2019, 1200.0);","WITH EnergyChange AS (SELECT CountryName, Year, EnergyProduced, LAG(EnergyProduced) OVER (PARTITION BY CountryName ORDER BY Year) AS PreviousYearEnergy FROM RenewableEnergy) SELECT CountryName, ((EnergyProduced - PreviousYearEnergy) / PreviousYearEnergy * 100) AS PercentChange FROM EnergyChange WHERE Year = 2020 ORDER BY PercentChange DESC LIMIT 5;","The query creates a common table expression (CTE) to calculate the energy produced by each country in the previous year using the LAG function. It then computes the percentage change in energy production from the previous year for each country. Finally, it selects the top 5 countries with the highest percentage increase in renewable energy production in 2020."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records",Identify the top 5 tech companies that have experienced the most significant increase in patent applications over the past 5 years.,"CREATE TABLE TechCompanies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(50)); INSERT INTO TechCompanies (CompanyID, CompanyName) VALUES (1, 'Google'), (2, 'Apple'), (3, 'Microsoft'), (4, 'Amazon'), (5, 'Facebook'); CREATE TABLE PatentApplications (ApplicationID INT PRIMARY KEY, CompanyID INT, ApplicationYear INT, ApplicationCount INT); INSERT INTO PatentApplications (ApplicationID, CompanyID, ApplicationYear, ApplicationCount) VALUES (1, 1, 2016, 100), (2, 1, 2017, 150), (3, 1, 2018, 200), (4, 1, 2019, 250), (5, 1, 2020, 300), (6, 2, 2016, 80), (7, 2, 2017, 100), (8, 2, 2018, 120), (9, 2, 2019, 150), (10, 2, 2020, 180);","WITH RankedByIncrease AS (SELECT TC.CompanyName, (PA.ApplicationCount -LAG(PA.ApplicationCount,5) OVER (PARTITION BY TC.CompanyName ORDER BY PA.ApplicationYear) ) as Increase FROM TechCompanies TC JOIN PatentApplications PA ON TC.CompanyID=PA.CompanyID WHERE PA.ApplicationYear BETWEEN 2016 AND 2020 ORDER BY Increase DESC) SELECT CompanyName, Increase FROM RankedByIncrease WHERE Increase IS NOT NULL ORDER BY Increase DESC LIMIT 5;",The query first creates a common table expression (CTE) to calculate the increase in patent applications for each company over the past 5 years. It uses the LAG function to get the count from 5 years ago and subtracts it from the current year's count to get the increase. The CTE is ordered by this calculated increase in descending order. The main query then selects the top 5 companies with the highest increase from this ordered CTE.
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,common table expressions,"data manipulation: inserting, updating, or deleting records","Update the 'CountryHotelRatings' table to reflect the new ratings for hotels in France, then generate a report showing the top 5 hotels in France based on the updated ratings.","CREATE TABLE CountryHotelRatings (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Country VARCHAR(50), Rating DECIMAL); INSERT INTO CountryHotelRatings (HotelID, HotelName, Country, Rating) VALUES (1, 'Hotel de Paris', 'France', 4.5), (2, 'Hotel de Crillon', 'France', 4.5), (3, 'Shangri-La Hotel', 'France', 4.0), (4, 'Four Seasons Hotel', 'France', 4.5), (5, 'The Peninsula Paris', 'France', 4.7);","WITH UpdatedRatings AS (UPDATE CountryHotelRatings SET Rating = Rating + 0.2 WHERE Country = 'France' RETURNING *) SELECT HotelName, Rating FROM UpdatedRatings WHERE Country = 'France' ORDER BY Rating DESC LIMIT 5;","The query first updates the 'CountryHotelRatings' table, increasing the ratings for all hotels in France by 0.2. This updated table is then used as the basis for a Common Table Expression (CTE). The CTE is queried to select the hotel name and rating for the top 5 hotels in France based on the updated ratings, ordered in descending order."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,basic SQL with a simple select statement,data retrieval: basic data fetching queries,Provide a ranking of the top 5 football players based on their total goals scored in the last season.,"CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(50), Team VARCHAR(50)); CREATE TABLE Performance (PerformanceID INT PRIMARY KEY, PlayerID INT, Season VARCHAR(50), Goals INT); INSERT INTO Players (PlayerID, PlayerName, Team) VALUES (1, 'Lionel Messi', 'Paris Saint-Germain'), (2, 'Cristiano Ronaldo', 'Manchester United'), (3, 'Robert Lewandowski', 'Bayern Munich'), (4, 'Karim Benzema', 'Real Madrid'), (5, 'Erling Haaland', 'Borussia Dortmund'); INSERT INTO Performance (PerformanceID, PlayerID, Season, Goals) VALUES (1, 1, '2021-2022', 38), (2, 2, '2021-2022', 36), (3, 3, '2021-2022', 41), (4, 4, '2021-2022', 30), (5, 5, '2021-2022', 41);","WITH SeasonGoals AS (SELECT PlayerID, Goals, RANK() OVER (ORDER BY Goals DESC) AS Rank FROM Performance WHERE Season = '2021-2022') SELECT P.PlayerName, S.Goals FROM Players AS P INNER JOIN SeasonGoals AS S ON P.PlayerID = S.PlayerID WHERE S.Rank <= 5 ORDER BY S.Rank;","The query first creates a common table expression (CTE), SeasonGoals, that ranks players based on their goals scored in the '2021-2022' season in descending order. It then joins this CTE with the Players table to get the player names and selects the top 5 players based on their ranking in the CTE. The results are then ordered by the rank."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Insert a new record for a policy related to healthcare and update the policy budget by joining relevant tables.,"CREATE TABLE Policies (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), PolicyType VARCHAR(50), PolicyStatus VARCHAR(20)); CREATE TABLE Budgets (BudgetID INT PRIMARY KEY, PolicyID INT, BudgetAmount DECIMAL, FiscalYear INT); CREATE TABLE Departments (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100)); CREATE TABLE PolicyDepartments (PolicyID INT, DepartmentID INT, PRIMARY KEY (PolicyID, DepartmentID));","INSERT INTO Policies (PolicyID, PolicyName, PolicyType, PolicyStatus) VALUES (6, 'Universal Healthcare', 'Healthcare', 'Active'); UPDATE Budgets SET BudgetAmount = 2000000 WHERE BudgetID = 4 AND PolicyID = 6;","The query first inserts a new record into the Policies table with details about a new healthcare policy. Then, it updates the budget amount for the newly inserted policy by joining the Budgets and Policies tables using the PolicyID. The update ensures that the budget amount is set to 2,000,000 for the fiscal year specified for the given policy."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a report that shows the total carbon emissions for each country from 2000 to 2010, and then display the top 10 countries with the highest total emissions.","CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CarbonEmissions (Country, Year, Emissions) VALUES ('China', 2005, 5716.8), ('USA', 2004, 5571.9), ('India', 2009, 1731.3), ('Russia', 2001, 1997.6), ('Japan', 2006, 1275.7), ('Germany', 2000, 927.8), ('Iran', 2008, 588.7), ('Canada', 2010, 549.1), ('South Korea', 2007, 538.8), ('UK', 2003, 538.0);","WITH TotalEmissions AS (SELECT Country, SUM(Emissions) AS TotalEmissions FROM CarbonEmissions WHERE Year BETWEEN 2000 AND 2010 GROUP BY Country) SELECT Country, TotalEmissions FROM TotalEmissions ORDER BY TotalEmissions DESC LIMIT 10;","The SQL query first creates a common table expression (CTE) named TotalEmissions that groups the carbon emissions by country for the years from 2000 to 2010. The CTE calculates the total emissions for each country within the specified year range. Then, the main query selects the country and total emissions from the CTE, orders the results in descending order by total emissions, and limits the output to the top 10 countries."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,"data manipulation: inserting, updating, or deleting records",Insert a new record into the ElectricVehicles table showing the launch of a new electric vehicle model called 'EcoRide' with a range of 350 miles in North America.,"CREATE TABLE ElectricVehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), RangeMiles INT, Region VARCHAR(50)); CREATE TABLE Sales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, UnitsSold INT); CREATE TABLE Technologies (TechID INT PRIMARY KEY, VehicleID INT, TechnologyName VARCHAR(50), Description VARCHAR(255)); CREATE TABLE SustainableTransportation (SustainableID INT PRIMARY KEY, Initiative VARCHAR(100), Description VARCHAR(255)); CREATE TABLE GlobalMarketAnalysis (AnalysisID INT PRIMARY KEY, Region VARCHAR(50), MarketGrowthRate DECIMAL);","INSERT INTO ElectricVehicles (VehicleID, ModelName, RangeMiles, Region) VALUES (6, 'EcoRide', 350, 'North America');","The query inserts a new record into the ElectricVehicles table with the VehicleID of 6, model name 'EcoRide', a range of 350 miles, and the region as 'North America'."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",How can I record a transaction to update the harvested crop yields for a specific region and then roll back to the previous state if there is any error?,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, Region VARCHAR(50), CropType VARCHAR(50), Yield DECIMAL); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, TransactionDate DATE, CropID INT, OldYield DECIMAL, NewYield DECIMAL);","BEGIN TRANSACTION; UPDATE CropYields SET Yield = 500 WHERE CropID = 1 AND Region = 'Midwest'; INSERT INTO Transactions (TransactionID, TransactionDate, CropID, OldYield, NewYield) VALUES (1, CURRENT_DATE, 1, (SELECT Yield FROM CropYields WHERE CropID = 1 AND Region = 'Midwest'), 500); ROLLBACK TRANSACTION;","The query starts a transaction using BEGIN TRANSACTION. It then updates the Yield value to 500 for a specific crop in the Midwest region in the CropYields table. Then, it records this transaction in the Transactions table with the old and new yield values. Finally, it rolls back the transaction using ROLLBACK TRANSACTION, which undoes the update made to the CropYields table."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records",Update the 'CropYields' table to reflect a 10% increase in yield for all 'Corn' crops in the 'North America' region and then list the top 5 regions with the highest average yield for 'Corn'.,"CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Region, Yield) VALUES (1, 'Corn', 'North America', 150.0), (2, 'Corn', 'South America', 130.0), (3, 'Corn', 'Europe', 110.0), (4, 'Corn', 'Asia', 125.0), (5, 'Corn', 'Australia', 140.0);","UPDATE CropYields SET Yield = Yield * 1.1 WHERE CropName = 'Corn' AND Region = 'North America'; WITH RankedRegions AS (SELECT Region, AVG(Yield) as AvgYield, RANK() OVER (ORDER BY AVG(Yield) DESC) AS Rank FROM CropYields WHERE CropName = 'Corn' GROUP BY Region) SELECT Region, AvgYield FROM RankedRegions WHERE Rank <= 5;","The query first updates the 'CropYields' table to increase the yield of 'Corn' crops in 'North America' by 10%. It then creates a common table expression (CTE) to calculate average yield for 'Corn' crops per region and ranks them in descending order. Finally, it selects the top 5 regions with the highest average yield for 'Corn'."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Begin a transaction to record sales transactions for electric vehicles in the last quarter and ensure it is rolled back if any error occurs. Display the total sales amount for each model in a specific region.,"CREATE TABLE SalesTransactions (TransactionID INT PRIMARY KEY, ModelID INT, Region VARCHAR(50), SaleAmount DECIMAL, TransactionDate DATE);CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50));INSERT INTO SalesTransactions (TransactionID, ModelID, Region, SaleAmount, TransactionDate) VALUES (1, 101, 'North America', 35000, '2023-09-15'), (2, 102, 'Europe', 27000, '2023-09-20'), (3, 101, 'North America', 36000, '2023-09-25'), (4, 103, 'Asia', 22000, '2023-09-30');INSERT INTO VehicleModels (ModelID, ModelName) VALUES (101, 'Model X'), (102, 'Model Y'), (103, 'Model Z');","BEGIN TRANSACTION;SELECT vm.ModelName, st.Region, SUM(st.SaleAmount) AS TotalSales FROM SalesTransactions st INNER JOIN VehicleModels vm ON st.ModelID = vm.ModelID WHERE st.TransactionDate BETWEEN '2023-07-01' AND '2023-09-30' GROUP BY vm.ModelName, st.Region;IF @@ERROR <> 0 ROLLBACK TRANSACTION ELSE COMMIT TRANSACTION;","The query starts a transaction to process sales transactions for electric vehicles in the last quarter. It joins the SalesTransactions and VehicleModels tables to associate sales amounts with specific vehicle models and regions. The SUM function is used to calculate the total sales amount for each model in a given region. The transaction is committed if no errors occur; otherwise, it is rolled back."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Identify the top 3 emerging technologies in terms of market growth rate over the past year across different regions, excluding technologies with an average growth rate below 5%.","CREATE TABLE Technologies (TechID INT PRIMARY KEY, TechName VARCHAR(100), Region VARCHAR(50), MarketGrowth DECIMAL); CREATE TABLE GrowthRates (RateID INT PRIMARY KEY, TechID INT, Year INT, GrowthRate DECIMAL, FOREIGN KEY (TechID) REFERENCES Technologies(TechID));","WITH RankedTechs AS (SELECT t.TechName, t.Region, AVG(g.GrowthRate) AS AvgGrowthRate, DENSE_RANK() OVER (ORDER BY AVG(g.GrowthRate) DESC) AS Rank FROM Technologies t JOIN GrowthRates g ON t.TechID = g.TechID WHERE g.Year = EXTRACT(YEAR FROM CURRENT_DATE) - 1 GROUP BY t.TechName, t.Region HAVING AVG(g.GrowthRate) >= 5) SELECT TechName, Region, AvgGrowthRate FROM RankedTechs WHERE Rank <= 3;","The query creates a common table expression (CTE) to aggregate the average market growth rate of technologies over the past year and then ranks them in descending order. It excludes technologies with an average growth rate below 5%. Finally, it selects the top 3 emerging technologies based on the highest average growth rates in different regions."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Create a table for storing vehicle sales data for various models and regions, then delete all records for a specific model from Asia.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, UnitsSold) VALUES (1, 'Model S', 'North America', 5000), (2, 'Model 3', 'Europe', 4000), (3, 'Leaf', 'Asia', 3000), (4, 'Bolt', 'North America', 2000), (5, 'Prius', 'Europe', 1000);",DELETE FROM VehicleSales WHERE ModelName = 'Leaf' AND Region = 'Asia';,"The query deletes all records from the VehicleSales table where the model name is 'Leaf' and the region is 'Asia'. This is done by using the DELETE FROM statement, followed by the table name and a WHERE clause to specify the conditions for deletion."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Determine the average booking rate and customer spending for each hotel chain across various regions over the past year, and roll back the transaction if any of the calculations fail.","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(100), Region VARCHAR(50)); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), ChainID INT, Region VARCHAR(50)); CREATE TABLE Bookings (BookingID INT PRIMARY KEY, CustomerID INT, HotelID INT, BookingDate DATE, AmountSpent DECIMAL); CREATE TABLE HotelChains (ChainID INT PRIMARY KEY, ChainName VARCHAR(100));","BEGIN TRANSACTION; WITH BookingDetails AS (SELECT H.ChainID, B.AmountSpent, C.Region FROM Bookings B INNER JOIN Hotels H ON B.HotelID = H.HotelID INNER JOIN Customers C ON B.CustomerID = C.CustomerID WHERE B.BookingDate >= DATEADD(YEAR, -1, GETDATE())), AvgBooking AS (SELECT ChainID, Region, AVG(AmountSpent) AS AvgSpending FROM BookingDetails GROUP BY ChainID, Region) SELECT HC.ChainName, AB.Region, AB.AvgSpending FROM AvgBooking AB INNER JOIN HotelChains HC ON AB.ChainID = HC.ChainID; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query starts a transaction and calculates the average customer spending for each hotel chain in different regions over the past year. It performs an INNER JOIN between the Bookings, Hotels, and Customers tables to collect relevant data. It then calculates the average spending per chain and region using a common table expression (CTE) and groups the result by ChainID and Region. Finally, it selects the chain names and average spending amounts by joining the result with the HotelChains table. The transaction is rolled back if any errors occur during execution; otherwise, it is committed."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Get a report on total sales and the most popular vehicle model for each brand in North America for the last quarter, and update the brand popularity table accordingly.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, BrandID INT, SaleDate DATE, Region VARCHAR(50), UnitsSold INT); CREATE TABLE Models (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), BrandID INT); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE BrandPopularity (BrandID INT PRIMARY KEY, Region VARCHAR(50), TotalSales INT, PopularModel VARCHAR(50)); INSERT INTO VehicleSales (SaleID, ModelID, BrandID, SaleDate, Region, UnitsSold) VALUES (1, 1, 1, '2021-10-01', 'North America', 200), (2, 2, 2, '2021-10-02', 'North America', 100), (3, 3, 1, '2021-11-01', 'North America', 300), (4, 4, 2, '2021-11-02', 'North America', 400), (5, 5, 1, '2021-12-01', 'North America', 500); INSERT INTO Models (ModelID, ModelName, BrandID) VALUES (1, 'Model S', 1), (2, 'Model 3', 2), (3, 'Leaf', 1), (4, 'Bolt', 2), (5, 'Prius', 1); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Tesla'), (2, 'Chevrolet');","BEGIN TRANSACTION; WITH SalesReport AS (SELECT BrandID, SUM(UnitsSold) AS TotalSales, ModelID FROM VehicleSales WHERE Region = 'North America' AND DATEPART(quarter, SaleDate) = DATEPART(quarter, GETDATE()) - 1 GROUP BY BrandID, ModelID ORDER BY BrandID, TotalSales DESC), RankedModels AS (SELECT *, ROW_NUMBER() OVER(PARTITION BY BrandID ORDER BY TotalSales DESC) AS Rank FROM SalesReport) UPDATE BrandPopularity SET TotalSales = RankedModels.TotalSales, PopularModel = Models.ModelName FROM RankedModels JOIN Models ON RankedModels.ModelID = Models.ModelID WHERE BrandPopularity.BrandID = RankedModels.BrandID AND RankedModels.Rank = 1; COMMIT;",The SQL query starts a transaction to update the BrandPopularity table. It first generates a SalesReport CTE that calculates the total sales and associates each brand with its models. The models are then ranked based on their total sales. The BrandPopularity table is updated with the total sales and most popular model for each brand in North America for the last quarter. The transaction is then committed to finalize the updates.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Retrieve the latest treatment protocol for patients over 60 who had adverse reactions to a new drug trial and roll back if the protocol was not updated.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(255), Treatment VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE DrugTrials (TrialID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(100), Efficacy VARCHAR(100), SideEffect VARCHAR(255), FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, ProtocolDescription TEXT, LastUpdated DATE);","BEGIN TRANSACTION; UPDATE TreatmentProtocols SET ProtocolDescription = (SELECT TOP 1 Treatment FROM MedicalHistory MH JOIN Patients P ON MH.PatientID = P.PatientID WHERE P.Age > 60 AND MH.Treatment = 'New Drug' AND EXISTS (SELECT 1 FROM DrugTrials DT WHERE DT.PatientID = P.PatientID AND DT.SideEffect IS NOT NULL)) WHERE ProtocolID = (SELECT MAX(ProtocolID) FROM TreatmentProtocols); IF (SELECT COUNT(*) FROM TreatmentProtocols WHERE LastUpdated = CONVERT(DATE, GETDATE())) = 0 ROLLBACK TRANSACTION ELSE COMMIT TRANSACTION;","The query updates the treatment protocol for patients over 60 who had adverse reactions to a new drug trial. It starts a transaction and attempts to update the 'TreatmentProtocols' table with the latest treatment from 'MedicalHistory' for eligible patients. If the 'TreatmentProtocols' table was not updated today, the transaction is rolled back; otherwise, it is committed."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Provide a list of customers who have bought sustainable products more than 5 times in the last month, sorted by their total spend amount.","CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Orders (OrderID INT PRIMARY KEY, CustomerID INT, ProductID INT, OrderDate DATE, Price DECIMAL); CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), IsSustainable BIT); INSERT INTO Customers (CustomerID, CustomerName, Country) VALUES (1, 'John Doe', 'USA'), (2, 'Jane Smith', 'UK'), (3, 'Alice Johnson', 'Canada'); INSERT INTO Orders (OrderID, CustomerID, ProductID, OrderDate, Price) VALUES (1, 1, 1, '2021-01-01', 100.0), (2, 1, 2, '2021-01-02', 200.0), (3, 2, 1, '2021-01-03', 150.0), (4, 2, 3, '2021-01-04', 250.0), (5, 3, 2, '2021-01-05', 300.0); INSERT INTO Products (ProductID, ProductName, IsSustainable) VALUES (1, 'T-shirt', 1), (2, 'Jeans', 1), (3, 'Dress', 0);","WITH SustainableOrders AS (SELECT CustomerID, COUNT(OrderID) AS NumberOfOrders, SUM(Price) AS TotalSpend FROM Orders JOIN Products ON Orders.ProductID = Products.ProductID WHERE Products.IsSustainable = 1 AND OrderDate >= DATEADD(month, -1, GETDATE()) GROUP BY CustomerID) SELECT Customers.CustomerName, SustainableOrders.NumberOfOrders, SustainableOrders.TotalSpend FROM Customers JOIN SustainableOrders ON Customers.CustomerID = SustainableOrders.CustomerID WHERE NumberOfOrders > 5 ORDER BY TotalSpend DESC;","The query starts by creating a common table expression (CTE) that selects all orders of sustainable products from the last month, grouping by the customer ID, and computing the number of orders and total spend for each customer. It then joins this CTE with the Customers table to get the customer names, and filters to include only customers who have made more than 5 sustainable orders. The final result is ordered by total spend in descending order."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about different types of trees, their average carbon sequestration per year, and the region where they are located. Then, find out the top 5 types of trees that sequester the most carbon per year in the North America region.","CREATE TABLE Trees (TreeID INT PRIMARY KEY, TreeType VARCHAR(50), Region VARCHAR(50), AvgCarbonSequestration DECIMAL); INSERT INTO Trees (TreeID, TreeType, Region, AvgCarbonSequestration) VALUES (1, 'Pine', 'North America', 50.5), (2, 'Oak', 'Europe', 38.0), (3, 'Maple', 'Asia', 42.0), (4, 'Birch', 'North America', 52.7), (5, 'Ash', 'Europe', 48.0);","WITH RankedTrees AS (SELECT TreeType, AvgCarbonSequestration, DENSE_RANK() OVER (ORDER BY AvgCarbonSequestration DESC) AS Rank FROM Trees WHERE Region = 'North America') SELECT TreeType, AvgCarbonSequestration FROM RankedTrees WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) named RankedTrees that ranks the types of trees based on their average carbon sequestration in descending order, considering only trees in the North America region. The DENSE_RANK function is used for this purpose. The query then selects the top 5 tree types from the RankedTrees CTE that sequester the most carbon per year."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","List the top 3 players with the highest average scores in basketball games for the current season, excluding players who have played fewer than 10 games.","CREATE TABLE Players (PlayerID INT PRIMARY KEY, PlayerName VARCHAR(100), TeamID INT, Position VARCHAR(50));CREATE TABLE Teams (TeamID INT PRIMARY KEY, TeamName VARCHAR(100), CoachName VARCHAR(100));CREATE TABLE Games (GameID INT PRIMARY KEY, GameDate DATE, HomeTeamID INT, AwayTeamID INT);CREATE TABLE PlayerStats (StatID INT PRIMARY KEY, PlayerID INT, GameID INT, Points INT, Assists INT, Rebounds INT);","WITH PlayerAverages AS (SELECT P.PlayerName, AVG(S.Points) AS AvgPoints, COUNT(S.GameID) AS GamesPlayed FROM Players P JOIN PlayerStats S ON P.PlayerID = S.PlayerID GROUP BY P.PlayerName HAVING COUNT(S.GameID) >= 10) SELECT PlayerName, AvgPoints FROM PlayerAverages ORDER BY AvgPoints DESC LIMIT 3;","The query first creates a common table expression (CTE) named PlayerAverages, which calculates the average points per game (AvgPoints) and the total number of games played (GamesPlayed) for each player. It filters out players who have played fewer than 10 games using the HAVING clause. The main query then selects the player names and their average points from the CTE, ordering the results by average points in descending order and limiting the results to the top 3 players with the highest averages."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,"Show me the top 5 cities with the highest average customer rating for hotels, but only include cities with more than 10 rated hotels.","CREATE TABLE Hotels (HotelID INT PRIMARY KEY, City VARCHAR(50), Rating DECIMAL); INSERT INTO Hotels (HotelID, City, Rating) VALUES (1, 'New York', 4.5), (2, 'London', 4.7), (3, 'Paris', 4.3), (4, 'New York', 5.0), (5, 'Tokyo', 4.4), (6, 'London', 4.8), (7, 'Paris', 3.9), (8, 'New York', 4.7), (9, 'Tokyo', 4.9), (10, 'London', 4.6),(11, 'New York', 4.8), (12, 'London', 5.0), (13, 'Paris', 4.5), (14, 'New York', 5.0), (15, 'Tokyo', 4.3), (16, 'London', 4.7), (17, 'Paris', 4.0), (18, 'New York', 4.5), (19, 'Tokyo', 4.6), (20, 'London', 4.9);","WITH CityRatings AS (SELECT City, AVG(Rating) as AvgRating, COUNT(*) as HotelCount FROM Hotels GROUP BY City) SELECT City, AvgRating FROM CityRatings WHERE HotelCount > 10 ORDER BY AvgRating DESC LIMIT 5;","The query first groups hotels by city, calculating the average rating and count of hotels for each city. It then filters for cities with more than 10 hotels. Finally, it orders the remaining cities by average rating in descending order and returns the top 5."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the top 5 most popular clothing brands in terms of sales for the year 2020, focusing on sustainable fashion brands.","CREATE TABLE Sales (SaleID INT PRIMARY KEY, BrandID INT, SaleDate DATE, Quantity INT); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO Sales (SaleID, BrandID, SaleDate, Quantity) VALUES (1, 1, '2020-01-01', 500), (2, 2, '2020-02-01', 400), (3, 3, '2020-03-01', 300), (4, 4, '2020-04-01', 200), (5, 5, '2020-05-01', 100); INSERT INTO Brands (BrandID, BrandName, IsSustainable) VALUES (1, 'Brand A', TRUE), (2, 'Brand B', TRUE), (3, 'Brand C', FALSE), (4, 'Brand D', TRUE), (5, 'Brand E', FALSE);","WITH SustainableBrands AS (SELECT BrandName, SUM(Quantity) AS TotalSales FROM Sales INNER JOIN Brands ON Sales.BrandID = Brands.BrandID WHERE SaleDate BETWEEN '2020-01-01' AND '2020-12-31' AND IsSustainable = TRUE GROUP BY BrandName) SELECT BrandName, TotalSales FROM SustainableBrands ORDER BY TotalSales DESC LIMIT 5;","The query first creates a common table expression (CTE) named 'SustainableBrands' that calculates the total sales for each brand in the year 2020, but only for brands marked as sustainable. It does this by joining the Sales and Brands tables on the BrandID column, filtering for sales made in 2020 and brands that are sustainable, and then grouping by the brand name. The query then selects the top 5 brands from the CTE based on the total sales, in descending order."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Given the budget allocations for different departments in various fiscal years, find out the departments that had a decrease in budget between 2020 and 2021, and rollback any changes made in the transaction for auditing purposes.","CREATE TABLE DepartmentBudget (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), FiscalYear INT, Budget DECIMAL); INSERT INTO DepartmentBudget (DepartmentID, DepartmentName, FiscalYear, Budget) VALUES (1, 'Health', 2020, 1000000.00), (1, 'Health', 2021, 900000.00), (2, 'Education', 2020, 500000.00), (2, 'Education', 2021, 600000.00), (3, 'Defense', 2020, 2000000.00), (3, 'Defense', 2021, 2100000.00);","BEGIN TRANSACTION; WITH BudgetDecrease AS (SELECT DepartmentName, (SUM(CASE WHEN FiscalYear = 2021 THEN Budget ELSE 0 END) - SUM(CASE WHEN FiscalYear = 2020 THEN Budget ELSE 0 END)) AS ChangeInBudget FROM DepartmentBudget WHERE FiscalYear IN (2020, 2021) GROUP BY DepartmentName) SELECT DepartmentName FROM BudgetDecrease WHERE ChangeInBudget < 0; ROLLBACK TRANSACTION;","The SQL query starts a new transaction and creates a common table expression (CTE) to calculate the change in budget (2021 minus 2020) for each department. It then selects the departments from the CTE where the change in budget is less than 0, indicating a decrease in budget. Finally, it rolls back the transaction to ensure no changes are made to the database during this operation."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,"Can you provide the top 10 most viewed movie genres in North America for the last quarter, sorted by viewership in descending order?","CREATE TABLE MovieGenre (GenreID INT PRIMARY KEY, GenreName VARCHAR(50)); INSERT INTO MovieGenre (GenreID, GenreName) VALUES (1, 'Action'), (2, 'Horror'), (3, 'Comedy'), (4, 'Romance'), (5, 'Drama'), (6, 'Sci-Fi'), (7, 'Thriller'), (8, 'Documentary'), (9, 'Fantasy'), (10, 'Animation'); CREATE TABLE MovieViewership (ViewID INT PRIMARY KEY, MovieGenreID INT, Region VARCHAR(50), Quarter VARCHAR(50), ViewCount INT); INSERT INTO MovieViewership (ViewID, MovieGenreID, Region, Quarter, ViewCount) VALUES (1, 1, 'North America', 'Q4', 5000000), (2, 2, 'North America', 'Q4', 3000000), (3, 3, 'North America', 'Q4', 4500000), (4, 4, 'North America', 'Q4', 2000000), (5, 5, 'North America', 'Q4', 4000000), (6, 6, 'North America', 'Q4', 3500000), (7, 7, 'North America', 'Q4', 2500000), (8, 8, 'North America', 'Q4', 1500000), (9, 9, 'North America', 'Q4', 1000000), (10, 10, 'North America', 'Q4', 6000000);","WITH RankedGenres AS (SELECT GenreName, ViewCount, RANK() OVER (ORDER BY ViewCount DESC) AS Rank FROM MovieViewership INNER JOIN MovieGenre ON MovieGenre.GenreID = MovieViewership.MovieGenreID WHERE Region = 'North America' AND Quarter = 'Q4') SELECT GenreName, ViewCount FROM RankedGenres WHERE Rank <= 10;","The SQL query first creates a common table expression (CTE) named RankedGenres. It joins the MovieViewership and MovieGenre tables based on GenreID, and filters the data for the North America region and for the last quarter. It calculates the rank of each genre based on the view count in descending order. The final SELECT statement retrieves the top 10 movie genres and their view count, filtered by the rank calculated in the CTE."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Insert the total sales data of electric vehicles for different manufacturers from different regions in a new table and, using a subquery, determine the manufacturer who sold the most electric vehicles globally in 2021.","CREATE TABLE EVSales (SalesID INT PRIMARY KEY, Manufacturer VARCHAR(50), Region VARCHAR(50), Year INT, TotalSales DECIMAL); INSERT INTO EVSales (SalesID, Manufacturer, Region, Year, TotalSales) VALUES (1, 'Tesla', 'North America', 2021, 500000), (2, 'BMW', 'Europe', 2021, 300000), (3, 'Nissan', 'Asia', 2021, 250000), (4, 'Tesla', 'Europe', 2021, 450000), (5, 'BMW', 'Asia', 2021, 200000);","SELECT Manufacturer, GlobalSales FROM (SELECT Manufacturer, SUM(TotalSales) AS GlobalSales, RANK() OVER (ORDER BY SUM(TotalSales) DESC) AS Rank FROM EVSales WHERE Year = 2021 GROUP BY Manufacturer) AS RankedManufacturers WHERE Rank = 1;","The query first aggregates the total sales of electric vehicles by manufacturer for the year 2021 using a GROUP BY statement. It assigns a rank to each manufacturer based on the total sales in descending order using the RANK() function. The outer query then selects the manufacturer with the highest global sales, i.e., with a rank of 1."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Update the allocated budget for health services in 2023 and then retrieve the total spending for each category of public services.,"CREATE TABLE GovernmentBudget (BudgetID INT PRIMARY KEY, Category VARCHAR(50), Year INT, Amount DECIMAL); INSERT INTO GovernmentBudget (BudgetID, Category, Year, Amount) VALUES (1, 'Health', 2022, 3000000), (2, 'Education', 2022, 2500000), (3, 'Infrastructure', 2022, 1500000), (4, 'Health', 2023, 3200000), (5, 'Education', 2023, 2800000), (6, 'Infrastructure', 2023, 1600000);","UPDATE GovernmentBudget SET Amount = 3500000 WHERE Category = 'Health' AND Year = 2023; SELECT Category, SUM(Amount) AS TotalSpending FROM GovernmentBudget GROUP BY Category;","The query first updates the allocated budget for health services in the year 2023 to 3,500,000. It then retrieves the total spending for each category of public services by summing the amounts and grouping the results by category."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Find the top 3 destinations with the highest average customer rating for hotels, where the average rating is more than 4.0.","CREATE TABLE CustomerReviews (ReviewID INT PRIMARY KEY, HotelID INT, Destination VARCHAR(50), CustomerID INT, Rating DECIMAL); CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), StarRating INT); CREATE TABLE Customers (CustomerID INT PRIMARY KEY, CustomerName VARCHAR(50), Country VARCHAR(50));","WITH AvgRatings AS (SELECT Destination, AVG(Rating) AS AvgRating FROM CustomerReviews GROUP BY Destination HAVING AVG(Rating) > 4.0) SELECT Destination, AvgRating FROM AvgRatings ORDER BY AvgRating DESC LIMIT 3;","The query first calculates the average rating for each destination with the AVG function and groups the results by destination. It then filters the destinations to include only those with an average rating higher than 4.0 using the HAVING clause. Finally, it selects the top 3 destinations with the highest average rating, ordering them in descending order of average rating."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Identify the customers who have stayed at our New York and Los Angeles branches but not at the Miami branch.,"CREATE TABLE Customer (CustomerID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50)); INSERT INTO Customer (CustomerID, FirstName, LastName) VALUES (1, 'John', 'Doe'), (2, 'Jane', 'Doe'), (3, 'James', 'Smith'), (4, 'Jennifer', 'Johnson'); CREATE TABLE HotelStay (StayID INT PRIMARY KEY, CustomerID INT, Location VARCHAR(50), StayDate DATE); INSERT INTO HotelStay (StayID, CustomerID, Location, StayDate) VALUES (1, 1, 'New York', '2022-01-01'), (2, 1, 'Los Angeles', '2022-02-01'), (3, 2, 'New York', '2022-01-15'), (4, 2, 'Los Angeles', '2022-02-15'), (5, 2, 'Miami', '2022-03-01'), (6, 3, 'New York', '2022-01-30'), (7, 3, 'Miami', '2022-02-28');","WITH NY_LA AS (SELECT CustomerID FROM HotelStay WHERE Location IN ('New York', 'Los Angeles') GROUP BY CustomerID HAVING COUNT(DISTINCT Location) = 2), No_Miami AS (SELECT CustomerID FROM HotelStay WHERE Location = 'Miami') SELECT C.FirstName, C.LastName FROM Customer C WHERE C.CustomerID IN (SELECT CustomerID FROM NY_LA EXCEPT SELECT CustomerID FROM No_Miami);","The query first creates a temporary table 'NY_LA' that groups customers by 'CustomerID' where the location is 'New York' or 'Los Angeles' and counts the distinct locations they have been to. If a customer has been to both locations, their 'CustomerID' will be present in 'NY_LA'. Another temporary table 'No_Miami' is created that contains the 'CustomerID' of customers who have stayed in Miami. The main query extracts the 'FirstName' and 'LastName' of customers from the 'Customer' table whose 'CustomerID' appears in 'NY_LA' but not 'No_Miami' using the EXCEPT operator."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the top 5 hotels in terms of total revenue generated from room bookings for the year 2020. Include a transaction to ensure that the data remains consistent during the query execution.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), Location VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, Location) VALUES (1, 'Hotel Paradise', 'New York'), (2, 'Beach Resort', 'Los Angeles'), (3, 'Mountain Lodge', 'Denver'), (4, 'City Inn', 'Chicago'), (5, 'Harbor View', 'Seattle'); CREATE TABLE RoomBookings (BookingID INT PRIMARY KEY, HotelID INT, CustomerID INT, BookingDate DATE, NumberOfNights INT, PricePerNight DECIMAL); INSERT INTO RoomBookings (BookingID, HotelID, CustomerID, BookingDate, NumberOfNights, PricePerNight) VALUES (1, 1, 101, '2020-05-12', 3, 150.00), (2, 1, 102, '2020-06-15', 2, 200.00), (3, 2, 103, '2020-07-20', 4, 175.00), (4, 3, 104, '2020-08-12', 5, 100.00), (5, 4, 105, '2020-09-05', 2, 120.00);","BEGIN TRANSACTION; WITH TotalRevenue AS (SELECT HotelID, SUM(NumberOfNights * PricePerNight) as Revenue FROM RoomBookings WHERE YEAR(BookingDate) = 2020 GROUP BY HotelID) SELECT H.HotelName, T.Revenue FROM TotalRevenue T JOIN Hotels H ON T.HotelID = H.HotelID ORDER BY T.Revenue DESC LIMIT 5; COMMIT;","The query begins a transaction to ensure data consistency throughout the query execution. It then creates a temporary view 'TotalRevenue' that groups room bookings by hotel and calculates the total revenue (number of nights times price per night) for each hotel for the year 2020. The query then joins this view with the Hotels table to retrieve the hotel names and orders the results by revenue in descending order, limiting the results to the top 5. The transaction is then committed to end the transaction."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Start a transaction to update the sale price of all electric vehicles that were sold in 2022. If the total number of affected rows is more than 100, commit the transaction; otherwise, roll it back.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL);CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, Model VARCHAR(50), Type VARCHAR(50));INSERT INTO Vehicles (VehicleID, Model, Type) VALUES (1, 'Tesla Model S', 'Electric'), (2, 'Nissan Leaf', 'Electric'), (3, 'Ford F-150', 'Gasoline');",BEGIN TRANSACTION; UPDATE VehicleSales SET SalePrice = SalePrice * 1.05 WHERE VehicleID IN (SELECT VehicleID FROM Vehicles WHERE Type = 'Electric') AND SaleDate BETWEEN '2022-01-01' AND '2022-12-31'; IF @@ROWCOUNT > 100 COMMIT; ELSE ROLLBACK;,"The query begins a transaction to update the sale price of all electric vehicles sold in 2022 by increasing it by 5%. It first checks if the vehicle type is 'Electric' and the sale date falls within the year 2022. If the total number of affected rows is more than 100, the transaction is committed. Otherwise, the transaction is rolled back to the original state."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Identify the top 3 most profitable emerging technology sectors by region, ensuring that only sectors with more than 5 companies are considered. Also, ensure transactional integrity in this process.","CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), SectorID INT, Region VARCHAR(50), Profit DECIMAL); CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(100), IsEmerging BOOLEAN); INSERT INTO Companies (CompanyID, CompanyName, SectorID, Region, Profit) VALUES (1, 'Tech Innovators Inc.', 1, 'North America', 1500000.00), (2, 'Future Technologies', 2, 'Europe', 1200000.00), (3, 'Green Energy Solutions', 3, 'Asia', 1800000.00), (4, 'Cyber Innovations', 1, 'Europe', 1350000.00), (5, 'Blockchain Dynamics', 2, 'North America', 2000000.00); INSERT INTO Sectors (SectorID, SectorName, IsEmerging) VALUES (1, 'Cybersecurity', TRUE), (2, 'Blockchain', TRUE), (3, 'Renewable Energy', TRUE);","BEGIN; WITH SectorCount AS (SELECT SectorID, Region, COUNT(*) AS CompanyCount FROM Companies GROUP BY SectorID, Region HAVING COUNT(*) > 5), ProfitableSectors AS (SELECT Sectors.SectorName, Companies.Region, SUM(Companies.Profit) AS TotalProfit FROM Companies INNER JOIN Sectors ON Companies.SectorID = Sectors.SectorID WHERE Sectors.IsEmerging = TRUE GROUP BY Sectors.SectorName, Companies.Region) SELECT SectorName, Region, TotalProfit FROM ProfitableSectors WHERE (SectorName, Region) IN (SELECT SectorName, Region FROM (SELECT SectorName, Region, DENSE_RANK() OVER (PARTITION BY Region ORDER BY TotalProfit DESC) AS Rank FROM ProfitableSectors) RankedSectors WHERE Rank <= 3); COMMIT;","The query first starts a transaction block to ensure transactional integrity. It then creates a common table expression (CTE) named 'SectorCount' to count the number of companies in each sector and region, considering only those with more than 5 companies. Another CTE named 'ProfitableSectors' calculates the total profit for each emerging technology sector by region. Finally, the main query selects the top 3 sectors by total profit for each region using the DENSE_RANK function, committing the transaction at the end."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Show me the top 5 crops with the highest average yield per acre for the year 2020.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, AvgYieldPerAcre DECIMAL); INSERT INTO CropYield (CropID, CropName, Year, AvgYieldPerAcre) VALUES (1, 'Corn', 2020, 180.5), (2, 'Wheat', 2020, 178.0), (3, 'Soybeans', 2020, 150.0), (4, 'Rice', 2020, 160.7), (5, 'Sorghum', 2020, 145.0);","SELECT CropName, AvgYieldPerAcre FROM (SELECT CropName, AvgYieldPerAcre, DENSE_RANK() OVER (ORDER BY AvgYieldPerAcre DESC) AS Rank FROM CropYield WHERE Year = 2020) WHERE Rank <= 5;","The query first filters the table for the year 2020. It then ranks the crops based on their average yield per acre in descending order using the DENSE_RANK function. Finally, it selects the top 5 crops with the highest yield per acre."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find out the total revenue and total transactions per day for the hotel 'Grand Royal', and present the data in a pivot format for analysis. Rollback any changes if there are errors during the process.","CREATE TABLE HotelTransactions (id INT PRIMARY KEY, hotel_name VARCHAR(50), transaction_date DATE, transaction_amount DECIMAL); INSERT INTO HotelTransactions (id, hotel_name, transaction_date, transaction_amount) VALUES (1, 'Grand Royal', '2022-01-01', 200.10), (2, 'Grand Royal', '2022-01-02', 300.50), (3, 'Grand Royal', '2022-01-01', 100.60), (4, 'Beach View', '2022-01-01', 500.20), (5, 'Grand Royal', '2022-01-02', 450.30);","BEGIN; DECLARE @err INT; SELECT @err = @@ERROR; IF @err = 0 BEGIN TRY SELECT hotel_name, transaction_date, COUNT(id) as total_transactions, SUM(transaction_amount) as total_revenue FROM HotelTransactions WHERE hotel_name='Grand Royal' GROUP BY transaction_date PIVOT (SUM(transaction_amount) FOR transaction_date IN ([2021-01-01], [2021-01-02])) AS PivotTable COMMIT; END TRY BEGIN CATCH ROLLBACK; END CATCH; END;","The query starts a new transaction and declares an error handling variable. It then checks if there are no errors before executing the main query, which calculates the total transactions and total revenue per day for the 'Grand Royal' hotel. The results are then presented in a pivot table for easy analysis. If there are any errors during the process, it will rollback the transaction to ensure the integrity of the data."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,common table expressions,data retrieval: basic data fetching queries,Retrieve the top 3 most popular movies based on view count.,"CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(50), ReleaseYear INT); CREATE TABLE Views (ViewID INT PRIMARY KEY, MovieID INT, ViewCount INT, FOREIGN KEY (MovieID) REFERENCES Movies(MovieID));","WITH MoviePopularity AS (SELECT m.Title, v.ViewCount, ROW_NUMBER() OVER (ORDER BY v.ViewCount DESC) AS Rank FROM Movies m JOIN Views v ON m.MovieID = v.MovieID) SELECT Title, ViewCount FROM MoviePopularity WHERE Rank <= 3;","The query first creates a common table expression (CTE) named MoviePopularity that joins the Movies and Views tables. It selects the movie titles and their view counts, ranking them in descending order based on the view count using the ROW_NUMBER() function. Finally, it retrieves the top 3 movies with the highest view counts."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records","Insert a record for a new eco-friendly fashion brand into the BrandSustainability table, then display all fashion brands that have a sustainability score above 80.","CREATE TABLE BrandSustainability (BrandID INT PRIMARY KEY, BrandName VARCHAR(100), SustainabilityScore DECIMAL); CREATE TABLE FashionTrendAnalysis (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), PopularityIndex DECIMAL); CREATE TABLE ConsumerBehavior (BehaviorID INT PRIMARY KEY, BehaviorDescription VARCHAR(255), Frequency INT); CREATE TABLE GlobalFashionIndustry (IndustryID INT PRIMARY KEY, Region VARCHAR(100), MarketValue DECIMAL); CREATE TABLE SustainablePractices (PracticeID INT PRIMARY KEY, PracticeName VARCHAR(100), EffectivenessScore DECIMAL);","INSERT INTO BrandSustainability (BrandID, BrandName, SustainabilityScore) VALUES (6, 'EcoWear', 85); SELECT * FROM BrandSustainability WHERE SustainabilityScore > 80;","The query first inserts a new record into the BrandSustainability table for a brand named 'EcoWear' with a sustainability score of 85. After the insert operation, it selects and displays all records from the BrandSustainability table where the SustainabilityScore is greater than 80."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average age of patients who experienced side effects from a particular drug, grouped by gender.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Age INT, Gender VARCHAR(10)); CREATE TABLE DrugUse (PatientID INT, DrugName VARCHAR(50), SideEffects INT); INSERT INTO Patients (PatientID, Age, Gender) VALUES (1, 60, 'Male'), (2, 45, 'Female'), (3, 55, 'Female'), (4, 62, 'Male'), (5, 70, 'Female'); INSERT INTO DrugUse (PatientID, DrugName, SideEffects) VALUES (1, 'Drug A', 1), (2, 'Drug B', 0), (3, 'Drug A', 1), (4, 'Drug C', 0), (5, 'Drug A', 1);","SELECT Gender, AVG(Age) FROM Patients WHERE PatientID IN (SELECT PatientID FROM DrugUse WHERE DrugName = 'Drug A' AND SideEffects = 1) GROUP BY Gender;","The query first identifies patients who experienced side effects from Drug A by using a subquery in the WHERE clause. It then calculates the average age of these patients, grouped by gender. The GROUP BY clause is used to separate the data into groups of men and women."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Show the total budget allocated to each department for the fiscal year 2021, and also show the top 3 departments which had the most increase in their budgets compared to the previous year.","CREATE TABLE GovernmentBudget (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(50), FiscalYear INT, Budget DECIMAL); INSERT INTO GovernmentBudget (DepartmentID, DepartmentName, FiscalYear, Budget) VALUES (1, 'Education', 2021, 5000), (2, 'Health', 2021, 6000), (3, 'Defense', 2021, 7000), (1, 'Education', 2020, 4000), (2, 'Health', 2020, 5000), (3, 'Defense', 2020, 6000);","WITH BudgetIncrease AS (SELECT DepartmentName, (Budget - LAG(Budget) OVER (PARTITION BY DepartmentName ORDER BY FiscalYear)) AS Increase FROM GovernmentBudget WHERE FiscalYear = 2021) SELECT DepartmentName, Increase FROM BudgetIncrease ORDER BY Increase DESC LIMIT 3;",The query calculates the difference between the budget for each department for the fiscal year 2021 and the previous year. It then orders the departments by budget increase in descending order and limits the result to the top 3.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Provide a list of the top 5 crops with the highest yield per region for the year 2020, and rollback the transaction if an error occurs.","CREATE TABLE CropYields (CropID INT PRIMARY KEY, CropName VARCHAR(50), Year INT, Region VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (CropID, CropName, Year, Region, Yield) VALUES (1, 'Wheat', 2020, 'North America', 120.5), (2, 'Corn', 2020, 'Europe', 118.0), (3, 'Rice', 2020, 'Asia', 110.0), (4, 'Soybean', 2020, 'North America', 115.7), (5, 'Sorghum', 2020, 'Europe', 95.0);","BEGIN TRANSACTION; TRY BEGIN WITH RankedCrops AS (SELECT CropName, Yield, DENSE_RANK() OVER (PARTITION BY Region ORDER BY Yield DESC) AS Rank FROM CropYields WHERE Year = 2020) SELECT CropName, Yield FROM RankedCrops WHERE Rank <= 5; COMMIT; END TRY BEGIN CATCH ROLLBACK; END CATCH;","The query starts a new transaction and attempts to create a common table expression (CTE) to rank crops for each region based on their yield. It then selects the top 5 crops with the highest yield from each region. If an error occurs during this process, the transaction is rolled back to maintain database integrity."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Find the top 5 crops with the highest average yield per acre for each region.,"CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), AvgYieldPerAcre DECIMAL); INSERT INTO CropYield (CropID, CropName, Region, AvgYieldPerAcre) VALUES (1, 'Wheat', 'North America', 50.2), (2, 'Corn', 'Europe', 70.1), (3, 'Rice', 'Asia', 100.0), (4, 'Barley', 'North America', 48.7), (5, 'Sorghum', 'Africa', 30.0);","WITH RankedCrops AS (SELECT CropName, AvgYieldPerAcre, DENSE_RANK() OVER (PARTITION BY Region ORDER BY AvgYieldPerAcre DESC) AS Rank FROM CropYield) SELECT Region, CropName, AvgYieldPerAcre FROM RankedCrops WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank crops in each region based on their average yield per acre in descending order. It then selects the top 5 crops with the highest yield per acre for each region using the DENSE_RANK function.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about the monthly sales of different fashion brands in various regions, and then display the top 3 brands with the highest sales.","CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), MonthlySales DECIMAL); INSERT INTO FashionBrands (BrandID, BrandName, Region, MonthlySales) VALUES (1, 'Brand A', 'North America', 10000.0), (2, 'Brand B', 'Europe', 8500.5), (3, 'Brand C', 'Asia', 12000.0), (4, 'Brand D', 'North America', 9500.0), (5, 'Brand E', 'Europe', 11000.0);","WITH RankedBrands AS (SELECT BrandName, MonthlySales, DENSE_RANK() OVER (ORDER BY MonthlySales DESC) AS Rank FROM FashionBrands) SELECT BrandName, MonthlySales FROM RankedBrands WHERE Rank <= 3;",The query creates a common table expression (CTE) to rank fashion brands based on their monthly sales in descending order. It then selects the top 3 brands with the highest sales using the DENSE_RANK function.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects",Create a table to store the average crop yield for different regions and then display the top 3 regions with the highest yield.,"CREATE TABLE CropData (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropType VARCHAR(50), Yield DECIMAL); INSERT INTO CropData (RegionID, RegionName, CropType, Yield) VALUES (1, 'Midwest', 'Corn', 150.0), (2, 'Southeast', 'Wheat', 120.0), (3, 'West', 'Soybean', 130.0), (4, 'Northeast', 'Barley', 140.0), (5, 'Southwest', 'Cotton', 110.0);","WITH AverageYield AS (SELECT RegionName, AVG(Yield) AS AvgYield FROM CropData GROUP BY RegionName) SELECT RegionName, AvgYield FROM AverageYield ORDER BY AvgYield DESC LIMIT 3;","The query creates a common table expression (CTE) to calculate the average yield for each region. It then selects the top 3 regions with the highest average yield, ordering the results in descending order."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"only one join (specify inner, outer, cross)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about popular fashion brands and the number of sustainable products they offer, and then display the top 3 brands with the highest number of sustainable products.","CREATE TABLE FashionBrands (BrandID INT PRIMARY KEY, BrandName VARCHAR(100)); CREATE TABLE SustainableProducts (ProductID INT PRIMARY KEY, BrandID INT, ProductName VARCHAR(100), IsSustainable BOOLEAN, FOREIGN KEY (BrandID) REFERENCES FashionBrands(BrandID)); INSERT INTO FashionBrands (BrandID, BrandName) VALUES(1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); INSERT INTO SustainableProducts (ProductID, BrandID, ProductName, IsSustainable) VALUES (1, 1, 'Product 1', TRUE), (2, 2, 'Product 2', TRUE), (3, 2, 'Product 3', FALSE), (4, 3, 'Product 4', TRUE), (5, 3, 'Product 5', TRUE), (6, 4, 'Product 6', TRUE), (7, 4, 'Product 7', FALSE), (8, 5, 'Product 8', TRUE), (9, 5, 'Product 9', TRUE), (10, 5, 'Product 10', TRUE);","WITH BrandSustainableCount AS (SELECT fb.BrandName, COUNT(sp.ProductID) AS SustainableCount FROM FashionBrands fb INNER JOIN SustainableProducts sp ON fb.BrandID = sp.BrandID WHERE sp.IsSustainable = TRUE GROUP BY fb.BrandName) SELECT BrandName, SustainableCount FROM BrandSustainableCount ORDER BY SustainableCount DESC LIMIT 3;","The query first creates a common table expression (CTE) called BrandSustainableCount that counts the number of sustainable products each brand offers. It uses an INNER JOIN to combine data from FashionBrands and SustainableProducts tables where the products are sustainable. It then groups the results by brand name. Finally, it selects the top 3 brands with the highest count of sustainable products, ordering the results in descending order by the count."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the average treatment outcome scores for patients grouped by age brackets and gender, including data from their medical history, treatments received, and any side effects experienced.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Gender VARCHAR(10), BirthDate DATE);CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(50), DiagnosisDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, TreatmentName VARCHAR(50), StartDate DATE, EndDate DATE, OutcomeScore DECIMAL, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, TreatmentID INT, Description VARCHAR(255), Severity INT, FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID));CREATE TABLE AgeBrackets (BracketID INT PRIMARY KEY, MinAge INT, MaxAge INT);","WITH AgeBracketedPatients AS (SELECT P.PatientID, P.Gender, CASE WHEN DATEDIFF(YEAR, P.BirthDate, GETDATE()) BETWEEN AB.MinAge AND AB.MaxAge THEN AB.BracketID END AS AgeBracket FROM Patients P CROSS JOIN AgeBrackets AB), PatientOutcomes AS (SELECT ABP.PatientID, ABP.Gender, ABP.AgeBracket, AVG(T.OutcomeScore) AS AvgOutcomeScore FROM AgeBracketedPatients ABP INNER JOIN Treatments T ON ABP.PatientID = T.PatientID INNER JOIN MedicalHistory MH ON ABP.PatientID = MH.PatientID LEFT JOIN SideEffects SE ON T.TreatmentID = SE.TreatmentID GROUP BY ABP.PatientID, ABP.Gender, ABP.AgeBracket) SELECT AgeBracket, Gender, AVG(AvgOutcomeScore) AS AvgOutcomeScore FROM PatientOutcomes GROUP BY AgeBracket, Gender;","The query first creates a common table expression (CTE) 'AgeBracketedPatients' to assign patients into age brackets. Another CTE 'PatientOutcomes' is formed to calculate the average treatment outcome scores for each patient, considering their treatments, medical history, and side effects. Finally, the query calculates and returns the average outcome scores grouped by age brackets and gender."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the most common side effects for patients over 65 who have been treated with Drug X and have a history of hypertension.,"CREATE TABLE Patient (PatientID INT PRIMARY KEY, Age INT, MedicalHistory VARCHAR(100)); CREATE TABLE Treatment (TreatmentID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50)); CREATE TABLE SideEffects (SideEffectID INT PRIMARY KEY, TreatmentID INT, SideEffect VARCHAR(50)); INSERT INTO Patient (PatientID, Age, MedicalHistory) VALUES (1, 70, 'Hypertension'), (2, 65, 'Hypertension'), (3, 68, 'Diabetes'); INSERT INTO Treatment (TreatmentID, PatientID, DrugName) VALUES (1, 1, 'Drug X'), (2, 2, 'Drug X'), (3, 3, 'Drug Y'); INSERT INTO SideEffects (SideEffectID, TreatmentID, SideEffect) VALUES (1, 1, 'Nausea'), (2, 1, 'Dizziness'), (3, 2, 'Nausea');","SELECT SideEffect, COUNT(*) AS Frequency FROM SideEffects INNER JOIN Treatment ON SideEffects.TreatmentID = Treatment.TreatmentID INNER JOIN Patient ON Treatment.PatientID = Patient.PatientID WHERE Patient.Age > 65 AND Patient.MedicalHistory LIKE '%Hypertension%' AND Treatment.DrugName = 'Drug X' GROUP BY SideEffect ORDER BY Frequency DESC;","This query first joins the SideEffects, Treatment, and Patient tables on their respective IDs. It then filters for patients over the age of 65 who have a history of hypertension and have been treated with Drug X. The query groups the data by the side effects experienced and orders them by frequency in descending order. The output will show the most common side effects for this specific group of patients."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",intermediate,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Show me the top 5 sustainable fashion brands based on the average customer ratings, and also provide the total count of sustainable practices each brand is following.","CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, BrandID INT, AvgRating DECIMAL); INSERT INTO Ratings (RatingID, BrandID, AvgRating) VALUES (1, 1, 4.5), (2, 2, 4.0), (3, 3, 4.2), (4, 4, 3.8), (5, 5, 4.1); CREATE TABLE Practices (PracticeID INT PRIMARY KEY, BrandID INT, PracticeName VARCHAR(50)); INSERT INTO Practices (PracticeID, BrandID, PracticeName) VALUES (1, 1, 'Recycling'), (2, 1, 'Organic Materials'), (3, 2, 'Fair Trade'), (4, 2, 'Recycling'), (5, 3, 'Organic Materials'), (6, 4, 'Fair Trade'), (7, 5, 'Recycling'), (8, 5, 'Organic Materials'), (9, 5, 'Fair Trade');","WITH RankedBrands AS (SELECT Brands.BrandName, Ratings.AvgRating, COUNT(Practices.PracticeName) AS NumberOfSustainablePractices, DENSE_RANK() OVER (ORDER BY Ratings.AvgRating DESC) AS Rank FROM Brands INNER JOIN Ratings ON Brands.BrandID = Ratings.BrandID INNER JOIN Practices ON Brands.BrandID = Practices.BrandID GROUP BY Brands.BrandName, Ratings.AvgRating) SELECT BrandName, AvgRating, NumberOfSustainablePractices FROM RankedBrands WHERE Rank <= 5;","The query first creates a common table expression (CTE) to join the Brands, Ratings, and Practices tables, calculate the number of sustainable practices each brand is following, and rank the brands based on their average customer ratings in descending order. It then selects the top 5 brands with the highest average customer ratings and the count of their sustainable practices using the DENSE_RANK function."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,common table expressions,data retrieval: basic data fetching queries,Find the top 5 countries with the highest cumulative electric vehicle sales in 2020.,"CREATE TABLE EVSales (SaleID INT PRIMARY KEY, VehicleModel VARCHAR(50), Country VARCHAR(50), Sales INT, Year INT); INSERT INTO EVSales (SaleID, VehicleModel, Country, Sales, Year) VALUES (1, 'Model S', 'USA', 50000, 2020), (2, 'Leaf', 'Japan', 40000, 2020), (3, 'i3', 'Germany', 30000, 2020), (4, 'Model 3', 'USA', 80000, 2020), (5, 'Zoe', 'France', 25000, 2020), (6, 'Leaf', 'USA', 20000, 2020), (7, 'i3', 'USA', 15000, 2020), (8, 'Zoe', 'Germany', 22000, 2020), (9, 'Model S', 'Japan', 18000, 2020), (10, 'Model 3', 'Japan', 16000, 2020);","WITH CountrySales AS (SELECT Country, SUM(Sales) AS TotalSales FROM EVSales WHERE Year = 2020 GROUP BY Country) SELECT Country, TotalSales FROM CountrySales ORDER BY TotalSales DESC LIMIT 5;",The query first creates a common table expression (CTE) to aggregate the total sales of electric vehicles in each country for the year 2020. It then orders the countries by their total sales in descending order and limits the result to the top 5 countries with the highest cumulative electric vehicle sales.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,common table expressions,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store information about government funded projects, including their costs, duration, and areas of focus, then query to find the top 5 most expensive projects.","CREATE TABLE GovProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(50), FocusArea VARCHAR(50), Cost DECIMAL, DurationMonths INT); INSERT INTO GovProjects (ProjectID, ProjectName, FocusArea, Cost, DurationMonths) VALUES (1, 'Infrastructure Development', 'Infrastructure', 5000000, 24), (2, 'Healthcare Improvement', 'Health', 3000000, 18), (3, 'Education Reform', 'Education', 4000000, 20), (4, 'Environmental Protection', 'Environment', 6000000, 36), (5, 'Public Safety Enhancement', 'Public Safety', 2000000, 12);","WITH RankedProjects AS (SELECT ProjectName, Cost, DENSE_RANK() OVER (ORDER BY Cost DESC) AS Rank FROM GovProjects) SELECT ProjectName, Cost FROM RankedProjects WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank government projects based on their cost in descending order. It then selects the top 5 most expensive projects using the DENSE_RANK function.
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Generate a report showing the total revenue generated by each company in the last fiscal year, and list those companies that had revenue greater than $1 million.","CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100), Industry VARCHAR(50)); CREATE TABLE Revenue (RevenueID INT PRIMARY KEY, CompanyID INT, FiscalYear INT, RevenueAmount DECIMAL, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID)); INSERT INTO Companies (CompanyID, CompanyName, Industry) VALUES (1, 'Tech Innovators Inc.', 'Technology'), (2, 'Green Energy Solutions', 'Energy'), (3, 'HealthTech Ltd.', 'Healthcare'); INSERT INTO Revenue (RevenueID, CompanyID, FiscalYear, RevenueAmount) VALUES (1, 1, 2022, 1500000.00), (2, 2, 2022, 800000.00), (3, 3, 2022, 1200000.00);","SELECT c.CompanyName, SUM(r.RevenueAmount) AS TotalRevenue FROM Companies c JOIN Revenue r ON c.CompanyID = r.CompanyID WHERE r.FiscalYear = 2022 GROUP BY c.CompanyName HAVING SUM(r.RevenueAmount) > 1000000;","The query first joins the Companies and Revenue tables on the CompanyID field. It then filters records to include only those from the fiscal year 2022. Next, it groups the results by CompanyName and calculates the total revenue for each company using the SUM function. Finally, it applies a HAVING clause to return only those companies where the total revenue exceeds $1 million."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Identify the top 3 most popular sustainable fashion brands based on consumer purchase frequency across different regions.,"CREATE TABLE ConsumerPurchases (PurchaseID INT PRIMARY KEY, ConsumerID INT, BrandID INT, PurchaseDate DATE, Region VARCHAR(50)); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); CREATE TABLE Consumers (ConsumerID INT PRIMARY KEY, ConsumerName VARCHAR(50));","WITH RankedBrands AS (SELECT b.BrandName, COUNT(cp.PurchaseID) AS PurchaseCount, DENSE_RANK() OVER (PARTITION BY cp.Region ORDER BY COUNT(cp.PurchaseID) DESC) AS Rank FROM ConsumerPurchases cp JOIN Brands b ON cp.BrandID = b.BrandID WHERE b.IsSustainable = TRUE GROUP BY b.BrandName, cp.Region) SELECT Region, BrandName, PurchaseCount FROM RankedBrands WHERE Rank <= 3;","The query first creates a common table expression (CTE) called RankedBrands, which joins the ConsumerPurchases and Brands tables. It filters the brands to only include sustainable ones, counts the number of purchases for each brand within each region, and ranks them using the DENSE_RANK() window function. Finally, it selects the top 3 most popular sustainable brands in each region based on purchase count."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Retrieve the top 10 countries by total electric vehicle sales in 2022.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, Country VARCHAR(50), VehicleType VARCHAR(50), SalesYear INT, UnitsSold INT); INSERT INTO VehicleSales (SaleID, Country, VehicleType, SalesYear, UnitsSold) VALUES (1, 'USA', 'Electric', 2022, 15000), (2, 'China', 'Electric', 2022, 40000), (3, 'Germany', 'Electric', 2022, 12000), (4, 'Japan', 'Electric', 2022, 8000), (5, 'France', 'Electric', 2022, 10000);","SELECT Country, SUM(UnitsSold) AS TotalElectricVehicleSales FROM VehicleSales WHERE VehicleType = 'Electric' AND SalesYear = 2022 GROUP BY Country ORDER BY TotalElectricVehicleSales DESC LIMIT 10;","The query retrieves the top 10 countries by total electric vehicle sales in 2022. It filters the data for electric vehicles and the sales year 2022, then groups the results by country. It calculates the total units sold per country using the SUM function, orders the results in descending order by the total sales, and limits the output to the top 10 countries."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 3 athletes with the highest average score in international tournaments over the past five years, including their respective countries and the number of tournaments they participated in.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Country VARCHAR(50)); CREATE TABLE Tournaments (TournamentID INT PRIMARY KEY, TournamentName VARCHAR(100), Year INT); CREATE TABLE Scores (ScoreID INT PRIMARY KEY, AthleteID INT, TournamentID INT, Score DECIMAL); CREATE VIEW AthletePerformance AS SELECT a.AthleteID, a.AthleteName, a.Country, t.TournamentID, t.TournamentName, t.Year, s.Score FROM Athletes a JOIN Scores s ON a.AthleteID = s.AthleteID JOIN Tournaments t ON t.TournamentID = s.TournamentID;","WITH RecentAthletePerformance AS (SELECT AthleteID, AthleteName, Country, AVG(Score) AS AvgScore, COUNT(DISTINCT TournamentID) AS TournamentsParticipated FROM AthletePerformance WHERE Year >= YEAR(CURRENT_DATE) - 5 GROUP BY AthleteID, AthleteName, Country) SELECT AthleteName, Country, AvgScore, TournamentsParticipated FROM RecentAthletePerformance ORDER BY AvgScore DESC LIMIT 3;","The query first creates a common table expression (CTE) to filter the athlete performance data to include only records from the past five years. It then calculates the average score and the number of tournaments each athlete participated in during this period. Finally, it selects the top 3 athletes with the highest average scores, along with their respective countries and the number of tournaments they participated in, and orders them in descending order of their average scores."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data definition: creating, altering, or dropping tables and other database objects","Create a table that stores details about government spending during fiscal years in different departments and then find out the average spending on health and education during 2010 to 2020, in descending order of average spending.","CREATE TABLE GovtSpending (Year INT, Department VARCHAR(50), Spending DECIMAL); INSERT INTO GovtSpending (Year, Department, Spending) VALUES (2010, 'Health', 200000), (2010, 'Education', 150000), (2011, 'Health', 210000), (2011, 'Education', 155000), (2012, 'Health', 220000), (2012, 'Education', 160000), (2013, 'Health', 230000), (2013, 'Education', 165000), (2014, 'Health', 240000), (2014, 'Education', 170000), (2015, 'Health', 250000), (2015, 'Education', 175000), (2016, 'Health', 260000), (2016, 'Education', 180000), (2017, 'Health', 270000), (2017, 'Education', 185000), (2018, 'Health', 280000), (2018, 'Education', 190000), (2019, 'Health', 290000), (2019, 'Education', 195000), (2020, 'Health', 300000), (2020, 'Education', 200000);","WITH AverageSpending AS (SELECT Department, AVG(Spending) AS AvgSpending FROM GovtSpending WHERE Year BETWEEN 2010 AND 2020 AND (Department = 'Health' OR Department = 'Education') GROUP BY Department) SELECT Department, AvgSpending FROM AverageSpending ORDER BY AvgSpending DESC;",The query first creates a common table expression (CTE) that calculates the average spending in the Health and Education departments from 2010 to 2020. It then selects the department and average spending from this CTE and orders the results in descending order of average spending.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table that captures the most popular movie genres based on the number of views per region, then display the top 3 most popular genres for each region.","CREATE TABLE MovieViews (ViewID INT PRIMARY KEY, MovieGenre VARCHAR(50), Region VARCHAR(50), NumberOfViews INT); INSERT INTO MovieViews (ViewID, MovieGenre, Region, NumberOfViews) VALUES (1, 'Action', 'North America', 250000), (2, 'Comedy', 'Europe', 300000), (3, 'Drama', 'Asia', 400000), (4, 'Horror', 'North America', 120000), (5, 'Romance', 'Europe', 280000);","WITH RankedGenres AS (SELECT MovieGenre, NumberOfViews, Region, RANK() OVER (PARTITION BY Region ORDER BY NumberOfViews DESC) AS Rank FROM MovieViews) SELECT Region, MovieGenre, NumberOfViews FROM RankedGenres WHERE Rank <= 3;",The query first creates a common table expression (CTE) and ranks the movie genres based on the number of views for each region in descending order using the RANK function. It then selects the top 3 most viewed genres for each region using the WHERE clause on the ranking.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,"two or more joins (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 countries with their total carbon emissions and total renewable energy production over the past decade. Also, include the total area of natural parks in these countries.","CREATE TABLE CarbonEmissions (Country VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CarbonEmissions (Country, Year, Emissions) VALUES ('USA', 2010, 5000.5), ('China', 2010, 8000.7), ('India', 2010, 2000.3), ('Germany', 2010, 1000.2), ('Brazil', 2010, 800.1); CREATE TABLE RenewableEnergy (Country VARCHAR(50), Year INT, Production DECIMAL); INSERT INTO RenewableEnergy (Country, Year, Production) VALUES ('USA', 2010, 1000.5), ('China', 2010, 2000.7), ('India', 2010, 500.3), ('Germany', 2010, 600.2), ('Brazil', 2010, 700.1); CREATE TABLE NaturalParks (Country VARCHAR(50), TotalArea DECIMAL); INSERT INTO NaturalParks (Country, TotalArea) VALUES ('USA', 50000.5), ('China', 30000.7), ('India', 20000.3), ('Germany', 10000.2), ('Brazil', 15000.1);","WITH CTE AS (SELECT ce.Country, SUM(ce.Emissions) as TotalEmissions, SUM(re.Production) as TotalProduction FROM CarbonEmissions ce INNER JOIN RenewableEnergy re ON ce.Country = re.Country AND ce.Year = re.Year GROUP BY ce.Country ORDER BY TotalEmissions DESC LIMIT 5) SELECT CTE.Country, CTE.TotalEmissions, CTE.TotalProduction, np.TotalArea FROM CTE INNER JOIN NaturalParks np ON CTE.Country = np.Country;","The query first creates a common table expression (CTE) that joins the CarbonEmissions and RenewableEnergy tables on both country and year, calculates the total carbon emissions and total renewable energy production for each country over the years, and sorts the countries by total carbon emissions in descending order while limiting the result to top 5 countries. It then joins this CTE with the NaturalParks table on country to include the total area of natural parks in these countries in the final report."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,"two or more joins (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Insert a new record of government expenditure for the year 2022 in the departments of Health, Education and Defense, and then display the total expenditure of each department over the years.","CREATE TABLE Department (DeptID INT PRIMARY KEY, DeptName VARCHAR(50)); INSERT INTO Department (DeptID, DeptName) VALUES (1, 'Health'), (2, 'Education'), (3, 'Defense'); CREATE TABLE Expenditure (ExpID INT PRIMARY KEY, DeptID INT, Year INT, Amount DECIMAL, FOREIGN KEY (DeptID) REFERENCES Department(DeptID)); INSERT INTO Expenditure (ExpID, DeptID, Year, Amount) VALUES (1, 1, 2020, 50000), (2, 2, 2020, 60000), (3, 3, 2020, 70000), (4, 1, 2021, 55000), (5, 2, 2021, 65000), (6, 3, 2021, 75000);","INSERT INTO Expenditure (ExpID, DeptID, Year, Amount) VALUES (7, 1, 2022, 60000), (8, 2, 2022, 70000), (9, 3, 2022, 80000); SELECT D.DeptName, SUM(E.Amount) AS TotalExpenditure FROM Department D INNER JOIN Expenditure E ON D.DeptID = E.DeptID GROUP BY D.DeptName;","The SQL statement first inserts new expenditure records for the Health, Education, and Defense departments for the year 2022. Afterwards, it performs an inner join between the Department and Expenditure tables, grouping the results by department name. It then calculates the total expenditure for each department over the years using the SUM function."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Retrieve the top 3 hotels with the highest average customer satisfaction scores in each continent for the past year.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(100), Continent VARCHAR(50)); CREATE TABLE Reviews (ReviewID INT PRIMARY KEY, HotelID INT, ReviewDate DATE, CustomerSatisfaction INT, FOREIGN KEY (HotelID) REFERENCES Hotels(HotelID));","WITH HotelScores AS (SELECT h.HotelID, h.Continent, AVG(r.CustomerSatisfaction) AS AvgSatisfaction, ROW_NUMBER() OVER (PARTITION BY h.Continent ORDER BY AVG(r.CustomerSatisfaction) DESC) AS Rank FROM Hotels h JOIN Reviews r ON h.HotelID = r.HotelID WHERE r.ReviewDate >= DATEADD(YEAR, -1, GETDATE()) GROUP BY h.HotelID, h.Continent) SELECT HotelID, Continent, AvgSatisfaction FROM HotelScores WHERE Rank <= 3;","The query calculates the average customer satisfaction score for each hotel over the past year. It partitions the results by continent and ranks the hotels within each continent based on their average scores in descending order. Finally, it selects the top 3 hotels per continent based on these rankings."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",advanced,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the top 5 athletes with the most fan engagement (based on social media likes, shares, and comments) across all sports in the last month.","CREATE TABLE AthletePerformance (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(50), Sport VARCHAR(50), PerformanceData DECIMAL); INSERT INTO AthletePerformance (AthleteID, AthleteName, Sport, PerformanceData) VALUES (1, 'Athlete A', 'Basketball', 85.5), (2, 'Athlete B', 'Football', 90.0), (3, 'Athlete C', 'Baseball', 88.0), (4, 'Athlete D', 'Hockey', 89.0), (5, 'Athlete E', 'Golf', 90.0); CREATE TABLE FanEngagement (AthleteID INT, SocialMediaLikes INT, SocialMediaShares INT, SocialMediaComments INT); INSERT INTO FanEngagement (AthleteID, SocialMediaLikes, SocialMediaShares, SocialMediaComments) VALUES (1, 1000, 500, 300), (2, 2000, 1000, 500), (3, 1500, 600, 400), (4, 1800, 900, 450), (5, 2200, 1100, 550);","WITH TotalEngagement AS (SELECT AthleteID, (SocialMediaLikes + SocialMediaShares + SocialMediaComments) AS TotalEngagement FROM FanEngagement) SELECT ap.AthleteName, ap.Sport, te.TotalEngagement FROM AthletePerformance ap JOIN TotalEngagement te ON ap.AthleteID = te.AthleteID ORDER BY te.TotalEngagement DESC LIMIT 5;","The SQL query first creates a common table expression (CTE) named 'TotalEngagement', which calculates the total fan engagement (sum of social media likes, shares, and comments) for each athlete. It then joins this CTE with the 'AthletePerformance' table using the athlete's ID, and selects the athlete's name, sport, and total engagement. The results are ordered by total engagement in descending order, and the top 5 athletes with the highest total engagement are returned."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top five TV shows that have the highest average audience rating, and if there was a sudden drop in ratings, note the episode with its corresponding rating.","CREATE TABLE TVShows (TVShowID INT PRIMARY KEY, TVShowName VARCHAR(50)); CREATE TABLE Episodes (EpisodeID INT PRIMARY KEY, TVShowID INT, EpisodeName VARCHAR(50), AudienceRating DECIMAL, FOREIGN KEY (TVShowID) REFERENCES TVShows(TVShowID)); INSERT INTO TVShows (TVShowID, TVShowName) VALUES (1, 'Breaking Bad'), (2, 'Game of Thrones'), (3, 'Mad Men'), (4, 'The Office'), (5, 'Friends'); INSERT INTO Episodes (EpisodeID, TVShowID, EpisodeName, AudienceRating) VALUES (1, 1, 'Pilot', 8.5), (2, 1, 'Cat's in the Bag...', 8.1), (3, 2, 'Winter Is Coming', 9.0), (4, 2, 'The Kingsroad', 8.8), (5, 3, 'Smoke Gets in Your Eyes', 7.9);","BEGIN TRANSACTION; WITH AverageRatings AS (SELECT TVShowID, AVG(AudienceRating) AS AvgRating FROM Episodes GROUP BY TVShowID), RankedShows AS (SELECT TVShowName, AvgRating, DENSE_RANK() OVER (ORDER BY AvgRating DESC) AS Rank FROM TVShows INNER JOIN AverageRatings ON TVShows.TVShowID = AverageRatings.TVShowID) SELECT TVShowName, AvgRating FROM RankedShows WHERE Rank <= 5; WITH RatingDrop AS (SELECT TVShowName, EpisodeName, AudienceRating, LAG(AudienceRating) OVER (PARTITION BY TVShowID ORDER BY EpisodeID) AS PrevRating FROM TVShows INNER JOIN Episodes ON TVShows.TVShowID = Episodes.TVShowID) SELECT TVShowName, EpisodeName, AudienceRating FROM RatingDrop WHERE AudienceRating < PrevRating; COMMIT;","The query begins a transaction and creates two common table expressions. The first one calculates the average audience rating for each TV show and ranks them in descending order of the average rating. The second one selects the TV show name, episode name, and audience rating for each episode and calculates the previous episode's rating for each show. The query then displays the top 5 TV shows with the highest average audience rating and identifies episodes where there was a drop in audience rating compared to the previous episode. The transaction is then committed."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",beginner,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the top 5 most profitable sports events based on ticket sales revenue for the year 2020.,"CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50), EventType VARCHAR(50), EventDate DATE, TicketPrice DECIMAL, TicketsSold INT); INSERT INTO SportsEvents (EventID, EventName, EventType, EventDate, TicketPrice, TicketsSold) VALUES (1, 'NBA Finals', 'Basketball', '2020-10-11', 200.00, 50000), (2, 'Super Bowl', 'Football', '2020-02-02', 4000.00, 70000), (3, 'Wimbledon', 'Tennis', '2020-07-12', 150.00, 40000), (4, 'Olympics', 'Multiple Sports', '2020-08-08', 250.00, 80000), (5, 'World Series', 'Baseball', '2020-10-27', 300.00, 45000);","WITH Revenue AS (SELECT EventName, (TicketPrice * TicketsSold) AS TotalRevenue FROM SportsEvents WHERE YEAR(EventDate) = 2020) SELECT EventName, TotalRevenue FROM Revenue ORDER BY TotalRevenue DESC LIMIT 5;","The query first creates a common table expression (CTE) named 'Revenue' that calculates the total revenue of each sports event by multiplying the ticket price by the number of tickets sold for the year 2020. It then selects the event name and total revenue from this CTE, orders them in descending order by total revenue, and limits the result to the top 5 events."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Insert a new record for government spending in the healthcare sector for the year 2023.,"CREATE TABLE GovernmentSpending (SpendingID INT PRIMARY KEY, Sector VARCHAR(50), Year INT, Amount DECIMAL);","INSERT INTO GovernmentSpending (SpendingID, Sector, Year, Amount) VALUES (1, 'Healthcare', 2023, 5000000);","The query inserts a new record into the GovernmentSpending table for the healthcare sector, specifying the year as 2023 and the amount as 5,000,000."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,common table expressions,data retrieval: basic data fetching queries,Retrieve the full names and ages of patients who have been prescribed 'Drug A' along with the date of their most recent prescription.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, FullName VARCHAR(100), Age INT); CREATE TABLE Prescriptions (PrescriptionID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50), PrescriptionDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","WITH LatestPrescription AS (SELECT PatientID, MAX(PrescriptionDate) AS MostRecentDate FROM Prescriptions WHERE DrugName = 'Drug A' GROUP BY PatientID) SELECT p.FullName, p.Age, lp.MostRecentDate FROM Patients p INNER JOIN LatestPrescription lp ON p.PatientID = lp.PatientID;",The query first creates a common table expression (CTE) named LatestPrescription to find the most recent prescription date for each patient who has been prescribed 'Drug A'. It then selects the full names and ages of these patients along with the date of their most recent prescription by joining the Patients table with the LatestPrescription CTE.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report that shows the top 5 sustainable fashion brands in terms of sales, for each region.","CREATE TABLE Sales (SalesID INT PRIMARY KEY, BrandID INT, Region VARCHAR(50), SalesAmount DECIMAL); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), IsSustainable BOOLEAN); INSERT INTO Sales (SalesID, BrandID, Region, SalesAmount) VALUES (1, 1, 'North America', 300000), (2, 2, 'Europe', 500000), (3, 1, 'Asia', 200000), (4, 3, 'North America', 150000), (5, 1, 'Europe', 350000); INSERT INTO Brands (BrandID, BrandName, IsSustainable) VALUES (1, 'Brand A', TRUE), (2, 'Brand B', TRUE), (3, 'Brand C', FALSE);","WITH SalesCTE AS (SELECT s.BrandID, b.BrandName, s.Region, SUM(s.SalesAmount) as TotalSales FROM Sales s JOIN Brands b ON s.BrandID = b.BrandID WHERE b.IsSustainable = TRUE GROUP BY s.BrandID, b.BrandName, s.Region), RankCTE AS (SELECT BrandName, Region, TotalSales, DENSE_RANK() OVER (PARTITION BY Region ORDER BY TotalSales DESC) as Rank FROM SalesCTE) SELECT BrandName, Region, TotalSales FROM RankCTE WHERE Rank <= 5;","The query first creates a common table expression (CTE) named 'SalesCTE' that joins the 'Sales' and 'Brands' tables and sums up the sales amount for each brand while filtering for sustainable brands. It then creates another CTE named 'RankCTE' to rank the brands in each region based on their total sales. Lastly, it selects the top 5 brands in each region in terms of sales."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"set operations such as UNION, INTERSECT, and EXCEPT","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Retrieve patient demographics and their treatment outcomes, identify discrepancies in patient data between those who received a new drug treatment versus those who received a placebo, and rollback the changes if inconsistencies are found.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10), Address VARCHAR(100)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), CONSTRAINT FK_PatientID FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50), TreatmentDate DATE, CONSTRAINT FK_TreatmentPatientID FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Outcomes (OutcomeID INT PRIMARY KEY, PatientID INT, TreatmentID INT, OutcomeDescription VARCHAR(255), OutcomeDate DATE, CONSTRAINT FK_OutcomePatientID FOREIGN KEY (PatientID) REFERENCES Patients(PatientID), CONSTRAINT FK_OutcomeTreatmentID FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID)); CREATE TABLE PlaceboGroup (PlaceboID INT PRIMARY KEY, PatientID INT, PlaceboDate DATE, CONSTRAINT FK_PlaceboPatientID FOREIGN KEY (PatientID) REFERENCES Patients(PatientID));","BEGIN TRANSACTION; WITH TreatedPatients AS (SELECT P.PatientID, P.Name, P.Age, P.Gender, T.DrugName, O.OutcomeDescription FROM Patients P INNER JOIN Treatments T ON P.PatientID = T.PatientID INNER JOIN Outcomes O ON T.TreatmentID = O.TreatmentID), PlaceboPatients AS (SELECT P.PatientID, P.Name, P.Age, P.Gender, PG.PlaceboDate FROM Patients P INNER JOIN PlaceboGroup PG ON P.PatientID = PG.PatientID) SELECT * FROM TreatedPatients INTERSECT SELECT * FROM PlaceboPatients; IF @@ROWCOUNT > 0 ROLLBACK TRANSACTION ELSE COMMIT TRANSACTION;","The query starts a transaction and creates two common table expressions (CTEs): TreatedPatients and PlaceboPatients, which include demographic and treatment outcome details for patients who received the drug treatment and those in the placebo group, respectively. It then uses an INTERSECT operation to find any common records between these two groups. If any discrepancies are found (indicated by @@ROWCOUNT > 0), the transaction is rolled back. Otherwise, the transaction is committed."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store data about various countries, their carbon emissions, and the number of conservation areas they have. From this data, find the five countries with the most conservation areas that also have a low carbon footprint.","CREATE TABLE EnvironmentalData (Country VARCHAR(50) PRIMARY KEY, CarbonEmissions DECIMAL, ConservationAreas INT); INSERT INTO EnvironmentalData (Country, CarbonEmissions, ConservationAreas) VALUES ('USA', 5000.0, 100), ('China', 7500.0, 50), ('Brazil', 3000.0, 200), ('Australia', 2000.0, 150), ('Germany', 1500.0, 120), ('India', 6000.0, 80), ('Canada', 2500.0, 180);","WITH RankedCountries AS (SELECT Country, ConservationAreas, DENSE_RANK() OVER (ORDER BY ConservationAreas DESC) AS Rank FROM EnvironmentalData WHERE CarbonEmissions < 3000.0) SELECT Country, ConservationAreas FROM RankedCountries WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) named RankedCountries. In this CTE, it selects the country and the number of conservation areas from the EnvironmentalData table, but only for those countries that have carbon emissions less than 3000. It ranks these countries in descending order of the number of conservation areas using the DENSE_RANK function. The main query then selects the country and the number of conservation areas from the RankedCountries CTE for those countries that are ranked within the top 5."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",advanced,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store data regarding the carbon footprint of various industries in different countries, then present the data in a pivot table format to easily compare the carbon footprint across industries and countries.","CREATE TABLE CarbonFootprint (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(50), Country VARCHAR(50), CarbonFootprint DECIMAL); INSERT INTO CarbonFootprint (IndustryID, IndustryName, Country, CarbonFootprint) VALUES (1, 'Agriculture', 'USA', 550.2), (2, 'Manufacturing', 'China', 1200.5), (3, 'Transportation', 'India', 300.0), (4, 'Energy', 'Germany', 900.7), (5, 'Construction', 'Brazil', 400.0);","SELECT * FROM (SELECT IndustryName, Country, CarbonFootprint FROM CarbonFootprint) PIVOT (SUM(CarbonFootprint) FOR Country IN ('USA', 'China', 'India', 'Germany', 'Brazil'));","The SQL query first selects the necessary columns from the CarbonFootprint table, then applies the PIVOT operator to transform the data into a more readable format. The SUM function is used to calculate the total carbon footprint for each industry in each country."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,"two or more joins (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Find the most common diagnosis among patients ages 55 to 65 with a history of smoking and report the average cost of treatment protocols for that diagnosis.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Age INT, SmokingStatus VARCHAR(50)); CREATE TABLE MedicalHistory (ID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(50)); CREATE TABLE TreatmentProtocols (ID INT PRIMARY KEY, Diagnosis VARCHAR(50), Cost DECIMAL); INSERT INTO PatientDemographics (PatientID, Age, SmokingStatus) VALUES (1, 60, 'Smoker'), (2, 58, 'Smoker'), (3, 66, 'Non-Smoker'), (4, 55, 'Smoker'), (5, 63, 'Smoker'); INSERT INTO MedicalHistory (ID, PatientID, Diagnosis) VALUES (1, 1, 'COPD'), (2, 2, 'COPD'), (3, 3, 'Diabetes'), (4, 4, 'COPD'), (5, 5, 'Hypertension'); INSERT INTO TreatmentProtocols (ID, Diagnosis, Cost) VALUES (1, 'COPD', 5000), (2, 'Diabetes', 4000), (3, 'Hypertension', 3000);","BEGIN TRANSACTION; WITH SmokerDiagnosis AS (SELECT mh.Diagnosis FROM MedicalHistory mh INNER JOIN PatientDemographics pd ON mh.PatientID = pd.PatientID WHERE pd.Age BETWEEN 55 AND 65 AND pd.SmokingStatus = 'Smoker' GROUP BY mh.Diagnosis ORDER BY COUNT(*) DESC LIMIT 1), AvgCost AS (SELECT AVG(tp.Cost) as AverageCost FROM TreatmentProtocols tp INNER JOIN SmokerDiagnosis sd ON tp.Diagnosis = sd.Diagnosis) SELECT * FROM AvgCost; COMMIT;","The query begins by initiating a transaction to ensure consistency during the operation. It then creates a Common Table Expression (CTE) named 'SmokerDiagnosis' that selects the most common diagnosis among patients aged between 55 and 65 who have a history of smoking. Then it creates another CTE named 'AvgCost' to calculate the average cost of the treatment protocols of the most common diagnosis. Finally, it selects the average cost from 'AvgCost' and commits the transaction."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Initiate a transaction to update patient treatment protocols based on recent studies and roll back the transaction if any update fails, then display the affected patient records along with their demographics, medical histories, and treatment outcomes.","CREATE TABLE Patients (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), Age INT, Gender VARCHAR(10)); CREATE TABLE MedicalHistories (HistoryID INT PRIMARY KEY, PatientID INT, Condition VARCHAR(100), DiagnosisDate DATE, FOREIGN KEY (PatientID) REFERENCES Patients(PatientID)); CREATE TABLE Treatments (TreatmentID INT PRIMARY KEY, HistoryID INT, TreatmentProtocol VARCHAR(100), StartDate DATE, Foreign key (HistoryID) REFERENCES MedicalHistories(HistoryID)); CREATE TABLE TreatmentOutcomes (OutcomeID INT PRIMARY KEY, TreatmentID INT, Outcome VARCHAR(100), EvaluationDate DATE, FOREIGN KEY (TreatmentID) REFERENCES Treatments(TreatmentID)); CREATE TABLE RecentStudies (StudyID INT PRIMARY KEY, Condition VARCHAR(100), NewProtocol VARCHAR(100));","BEGIN TRANSACTION; WITH UpdatedTreatments AS (UPDATE Treatments SET TreatmentProtocol = rs.NewProtocol FROM Treatments t INNER JOIN MedicalHistories mh ON t.HistoryID = mh.HistoryID INNER JOIN RecentStudies rs ON mh.Condition = rs.Condition; IF @@ROWCOUNT = 0 ROLLBACK; ELSE COMMIT; SELECT p.FirstName, p.LastName, p.Age, p.Gender, mh.Condition, t.TreatmentProtocol, to.Outcome FROM Patients p INNER JOIN MedicalHistories mh ON p.PatientID = mh.PatientID INNER JOIN Treatments t ON mh.HistoryID = t.HistoryID INNER JOIN TreatmentOutcomes to ON t.TreatmentID = to.TreatmentID WHERE t.TreatmentProtocol = rs.NewProtocol);","The query initiates a transaction to update the TreatmentProtocol in the Treatments table based on recent studies. If the update affects no rows, the transaction is rolled back; otherwise, it is committed. Finally, it selects and displays the affected patient records with their demographics, medical histories, and treatment outcomes."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the trend status of all fashion items that have seen a decline in sales in the last quarter, and then generate a report of these items with their updated status and sales figures.","CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), TrendStatus VARCHAR(20)); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ItemID INT, SaleDate DATE, QuantitySold INT); CREATE TABLE QuarterlySales (ItemID INT, Quarter INT, Year INT, TotalSales INT); INSERT INTO FashionItems VALUES (1, 'T-Shirt', 'Trending'), (2, 'Jeans', 'Stable'), (3, 'Jacket', 'Declining'); INSERT INTO Sales VALUES (1, 1, '2023-07-01', 200), (2, 2, '2023-07-02', 150), (3, 3, '2023-07-03', 100); INSERT INTO QuarterlySales VALUES (1, 3, 2023, 200), (2, 3, 2023, 150), (3, 3, 2023, 100);","WITH DecliningItems AS (SELECT Q1.ItemID FROM QuarterlySales Q1 INNER JOIN QuarterlySales Q2 ON Q1.ItemID = Q2.ItemID WHERE Q1.Quarter = 3 AND Q1.Year = 2023 AND Q2.Quarter = 2 AND Q2.Year = 2023 AND Q1.TotalSales < Q2.TotalSales) UPDATE FashionItems SET TrendStatus = 'Declining' WHERE ItemID IN (SELECT ItemID FROM DecliningItems); SELECT F.ItemID, F.ItemName, F.TrendStatus, Q.TotalSales FROM FashionItems F INNER JOIN QuarterlySales Q ON F.ItemID = Q.ItemID WHERE Q.Quarter = 3 AND Q.Year = 2023 AND F.TrendStatus = 'Declining';","The query first identifies items that have seen a decline in sales from Q2 to Q3 using a common table expression (CTE) named DecliningItems. It then updates the TrendStatus of these items to 'Declining'. Finally, it selects and reports the ItemID, ItemName, updated TrendStatus, and Q3 sales figures for these items."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","data manipulation: inserting, updating, or deleting records","Create a report showing the total sales for each vehicle model in the last year, sorted by the models with the highest CO2 emissions. Exclude models with less than 1000 units sold.","CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelID INT, SaleDate DATE, UnitsSold INT); CREATE TABLE VehicleModels (ModelID INT PRIMARY KEY, ModelName VARCHAR(50), CO2Emissions DECIMAL); INSERT INTO VehicleSales (SaleID, ModelID, SaleDate, UnitsSold) VALUES (1, 1, '2020-01-05', 1500), (2, 2, '2020-02-10', 900), (3, 3, '2020-03-15', 1200), (4, 4, '2020-04-20', 2000), (5, 5, '2020-05-25', 800); INSERT INTO VehicleModels (ModelID, ModelName, CO2Emissions) VALUES (1, 'Model S', 75.0), (2, 'Model 3', 80.5), (3, 'Leaf', 70.0), (4, 'Bolt', 74.5), (5, 'Prius', 69.0);","WITH YearlySales AS (SELECT ModelID, SUM(UnitsSold) AS TotalSales FROM VehicleSales WHERE SaleDate BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY ModelID HAVING SUM(UnitsSold) >= 1000) SELECT vm.ModelName, vm.CO2Emissions, ys.TotalSales FROM YearlySales ys JOIN VehicleModels vm ON ys.ModelID = vm.ModelID ORDER BY vm.CO2Emissions DESC;","The query first creates a common table expression (CTE) named YearlySales that aggregates the total units sold for each model in the last year, excluding models with less than 1000 units sold. It then joins this CTE with the VehicleModels table on the ModelID column to retrieve the model names and CO2 emissions. Finally, the result is sorted in descending order by CO2 emissions."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table to track the emissions data of various countries over different years, and then display the total emissions for each country.","CREATE TABLE CountryEmissions (CountryID INT PRIMARY KEY, CountryName VARCHAR(50), Year INT, Emissions DECIMAL); INSERT INTO CountryEmissions (CountryID, CountryName, Year, Emissions) VALUES (1, 'USA', 2020, 5000.0), (2, 'China', 2020, 10000.0), (3, 'India', 2020, 3000.0), (1, 'USA', 2019, 4800.0), (2, 'China', 2019, 9500.0), (3, 'India', 2019, 2900.0);","SELECT CountryName, SUM(Emissions) AS TotalEmissions FROM CountryEmissions GROUP BY CountryName;",The query selects each country and calculates the total emissions over the years by summing up the emissions for each country. It uses the GROUP BY clause to group the emissions by country.
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",expert,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the total sales and average price of electric vehicles (EVs) by region for the year 2022.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, VehicleID INT, SaleDate DATE, SalePrice DECIMAL, Region VARCHAR(50)); CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Manufacturer VARCHAR(50), VehicleType VARCHAR(50)); INSERT INTO VehicleSales (SaleID, VehicleID, SaleDate, SalePrice, Region) VALUES (1, 101, '2022-02-15', 35000, 'North America'), (2, 102, '2022-03-20', 40000, 'Europe'), (3, 103, '2022-05-10', 30000, 'Asia'), (4, 101, '2022-07-25', 36000, 'North America'), (5, 102, '2022-09-30', 41000, 'Europe'); INSERT INTO Vehicles (VehicleID, ModelName, Manufacturer, VehicleType) VALUES (101, 'Model S', 'Tesla', 'Electric'), (102, 'Leaf', 'Nissan', 'Electric'), (103, 'Bolt', 'Chevrolet', 'Electric');","SELECT VS.Region, COUNT(VS.SaleID) AS TotalSales, AVG(VS.SalePrice) AS AvgPrice FROM VehicleSales VS INNER JOIN Vehicles V ON VS.VehicleID = V.VehicleID WHERE V.VehicleType = 'Electric' AND YEAR(VS.SaleDate) = 2022 GROUP BY VS.Region;","The query performs an inner join between the VehicleSales and Vehicles tables to combine sales data with vehicle information. It filters for electric vehicles and sales from the year 2022. The SELECT statement then calculates the total number of sales and the average sale price for each region, grouping the results by region."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"subqueries, including correlated and nested subqueries","data definition: creating, altering, or dropping tables and other database objects","Create a table that captures the trend of investments in various emerging technology sectors across global regions. Then, write a query to identify the top 5 sectors in each region with the highest total investments over the past five years.","CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, Sector VARCHAR(50), Region VARCHAR(50), Year INT, InvestmentAmount DECIMAL); INSERT INTO Investments (InvestmentID, Sector, Region, Year, InvestmentAmount) VALUES (1, 'AI', 'North America', 2017, 150000000), (2, 'Blockchain', 'Europe', 2018, 200000000), (3, 'IoT', 'Asia', 2019, 125000000), (4, 'AI', 'North America', 2020, 200000000), (5, 'IoT', 'Europe', 2021, 175000000);","WITH YearlyInvestments AS (SELECT Year, Sector, Region, SUM(InvestmentAmount) AS TotalInvestmentAmount FROM Investments WHERE Year > (YEAR(CURRENT_DATE) - 5) GROUP BY Year, Sector, Region), RankedSectors AS (SELECT Year, Sector, Region, TotalInvestmentAmount, ROW_NUMBER() OVER (PARTITION BY Year, Region ORDER BY TotalInvestmentAmount DESC) AS Rank FROM YearlyInvestments) SELECT Year, Region, Sector, TotalInvestmentAmount FROM RankedSectors WHERE Rank <= 5 ORDER BY Year, Region, Rank;",The SQL query first creates a common table expression (CTE) to calculate the total investment amount for each sector in each region for each of the past five years. It then ranks the sectors within each region for each year based on the total investment amount in descending order. The final query selects the top 5 sectors for each region for each year based on this ranking.
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records",Update the patient demographics with a new address and then find the average age for male and female patients diagnosed with diabetes in each region.,"CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, Name VARCHAR(50), Gender VARCHAR(10), Age INT, Address VARCHAR(50), Region VARCHAR(50)); INSERT INTO PatientDemographics (PatientID, Name, Gender, Age, Address, Region) VALUES (1, 'John Doe', 'Male', 45, '123 Main St', 'North America'), (2, 'Jane Smith', 'Female', 50, '456 Oak Ave', 'Europe'); CREATE TABLE MedicalHistory (PatientID INT, Diagnosis VARCHAR(50)); INSERT INTO MedicalHistory (PatientID, Diagnosis) VALUES (1, 'Diabetes'), (2, 'Diabetes');","UPDATE PatientDemographics SET Address = '789 Pine Ln' WHERE PatientID = 1; WITH DiabeticPatients AS (SELECT pd.Gender, pd.Region, pd.Age FROM PatientDemographics pd JOIN MedicalHistory mh ON pd.PatientID = mh.PatientID WHERE mh.Diagnosis = 'Diabetes') SELECT Gender, Region, AVG(Age) FROM DiabeticPatients GROUP BY Gender, Region;","The query first updates the address for the patient with ID 1 in the PatientDemographics table. Then, a common table expression (CTE) named DiabeticPatients is created to join the PatientDemographics and MedicalHistory tables on the PatientID column and select patients diagnosed with diabetes. Finally, the average age of male and female diabetic patients is calculated for each region, grouped by gender and region."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Get the top 5 most purchased sustainable fashion items and their regions based on sales, and execute this transaction safely","CREATE TABLE SustainableFashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(50), Region VARCHAR(50), Sales INT); INSERT INTO SustainableFashionItems (ItemID, ItemName, Region, Sales) VALUES (1, 'Organic Cotton T-Shirt', 'North America', 2000), (2, 'Recycled Polyester Dress', 'Europe', 1000), (3, 'Vegan Leather Jacket', 'Asia', 1200), (4, 'Bamboo Silk Blouse', 'North America', 1500), (5, 'Hemp Denim Jeans', 'Europe', 2200);","BEGIN TRANSACTION; WITH RankedItems AS (SELECT ItemName, Region, Sales, DENSE_RANK() OVER (ORDER BY Sales DESC) AS Rank FROM SustainableFashionItems) SELECT ItemName, Region, Sales FROM RankedItems WHERE Rank <= 5; COMMIT;","The query begins a new transaction, ensuring that the following operations will either all succeed or all fail, preserving data integrity. Next, the query creates a common table expression (CTE) to rank the sustainable fashion items based on their sales in descending order. It then selects the top 5 most purchased items and their regions using the DENSE_RANK function. Finally, the transaction is committed."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Insert a new record into the SustainableFashionPractices table to reflect the latest eco-friendly initiative by a leading fashion brand.,"CREATE TABLE FashionTrends (TrendID INT PRIMARY KEY, TrendName VARCHAR(100), Region VARCHAR(50), Year INT); CREATE TABLE ConsumerBehavior (BehaviorID INT PRIMARY KEY, ConsumerSegment VARCHAR(100), SpendingHabit VARCHAR(100), Region VARCHAR(50)); CREATE TABLE SustainableFashionPractices (PracticeID INT PRIMARY KEY, BrandName VARCHAR(100), Initiative VARCHAR(200), Impact VARCHAR(200)); CREATE TABLE GlobalFashionAnalysis (AnalysisID INT PRIMARY KEY, Metric VARCHAR(100), Value DECIMAL, Year INT);","INSERT INTO SustainableFashionPractices (PracticeID, BrandName, Initiative, Impact) VALUES (1, 'EcoBrand', 'Recycled Materials', 'Reduced Carbon Footprint');","This query inserts a new record into the SustainableFashionPractices table with specified values for PracticeID, BrandName, Initiative, and Impact, capturing a recent eco-friendly initiative by a fashion brand."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",advanced,common table expressions,"data manipulation: inserting, updating, or deleting records","Insert records for new patients along with their demographic details and medical histories into the PatientInfo and MedicalHistory tables, and then list the top 5 patients who had the most medical conditions in the past year.","CREATE TABLE PatientInfo (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DOB DATE, Gender CHAR(1), Address VARCHAR(50)); CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, DiagnosisDate DATE, DiagnosisCode VARCHAR(50), ConditionName VARCHAR(50)); INSERT INTO PatientInfo (PatientID, FirstName, LastName, DOB, Gender, Address) VALUES (1, 'John', 'Doe', '1970-01-01', 'M', '123 Street'), (2, 'Jane', 'Doe', '1980-02-02', 'F', '456 Avenue'), (3, 'Jim', 'Smith', '1990-03-03', 'M', '789 Boulevard'); INSERT INTO MedicalHistory (HistoryID, PatientID, DiagnosisDate, DiagnosisCode, ConditionName) VALUES (1, 1, '2022-01-01', 'D10', 'Condition1'), (2, 1, '2022-01-02', 'D20', 'Condition2'), (3, 2, '2022-01-01', 'D30', 'Condition3'), (4, 2, '2022-01-02', 'D40', 'Condition4'), (5, 3, '2022-01-01', 'D50', 'Condition5');","WITH PatientConditions AS (SELECT PatientID, COUNT(ConditionName) AS ConditionCount FROM MedicalHistory WHERE YEAR(DiagnosisDate) = YEAR(CURDATE()) GROUP BY PatientID) SELECT P.FirstName, P.LastName, PC.ConditionCount FROM PatientInfo P INNER JOIN PatientConditions PC ON P.PatientID = PC.PatientID ORDER BY PC.ConditionCount DESC LIMIT 5;","The query begins by creating a common table expression (CTE) that counts the number of medical conditions for each patient in the current year. It then joins this CTE with the PatientInfo table to get the patient's name and the count of their conditions. Finally, it orders the result set by the count of conditions in descending order and limits the output to the top 5 patients."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the details of Artificial Intelligence startups such as its name, location, founding year, and the amount of funding received. Then, from this database, retrieve the startups that were founded after 2010 and have received funding more than 1 million dollars.","CREATE TABLE AIStartups (StartupID INT PRIMARY KEY, StartupName VARCHAR(100), Location VARCHAR(100), FoundingYear INT, FundingAmount DECIMAL); INSERT INTO AIStartups (StartupID, StartupName, Location, FoundingYear, FundingAmount) VALUES (1, 'OpenAI', 'San Francisco', 2015, 1000000), (2, 'DeepMind', 'London', 2010, 500000), (3, 'SenseTime', 'Hong Kong', 2014, 2000000), (4, 'UiPath', 'New York', 2005, 1000000), (5, 'Clarifai', 'New York', 2013, 3000000);","SELECT StartupName, Location, FoundingYear, FundingAmount FROM AIStartups WHERE FoundingYear > 2010 AND FundingAmount > 1000000;","The query selects the name, location, founding year, and funding amount of startups from the AIStartups table. It then filters these records to only include those startups which were founded after 2010 and have received funding of more than 1 million dollars."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Show the number of patents in the field of AI, IoT, and Blockchain by country for the year 2020.","CREATE TABLE Patents (PatentID INT PRIMARY KEY, Technology VARCHAR(50), Country VARCHAR(50), Year INT, Count INT); INSERT INTO Patents (PatentID, Technology, Country, Year, Count) VALUES (1, 'AI', 'USA', 2020, 1200), (2, 'IoT', 'China', 2020, 1500), (3, 'Blockchain', 'UK', 2020, 800),(4, 'AI', 'India', 2020, 500),(5, 'IoT', 'Germany', 2020, 1300);","SELECT Technology, Country, SUM(Count) as Total_Patents FROM Patents WHERE Year = 2020 GROUP BY Technology, Country ORDER BY Technology, Total_Patents DESC;",The query filters the data for the year 2020 and then groups it by technology and country. It calculates the total number of patents for each technology in each country using the SUM function. The result is then ordered by technology and the total number of patents in descending order.
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,"Retrieve the average spending on healthcare and education by year and region, pivoting the results for easier comparison.","CREATE TABLE GovernmentSpending (Year INT, Region VARCHAR(50), Category VARCHAR(50), Amount DECIMAL); INSERT INTO GovernmentSpending (Year, Region, Category, Amount) VALUES (2020, 'North America', 'Healthcare', 500000), (2020, 'North America', 'Education', 300000), (2020, 'Europe', 'Healthcare', 450000), (2020, 'Europe', 'Education', 320000), (2021, 'North America', 'Healthcare', 520000), (2021, 'North America', 'Education', 310000), (2021, 'Europe', 'Healthcare', 460000), (2021, 'Europe', 'Education', 330000);","SELECT Year, Region, MAX(CASE WHEN Category = 'Healthcare' THEN Amount ELSE 0 END) AS Healthcare_Spending, MAX(CASE WHEN Category = 'Education' THEN Amount ELSE 0 END) AS Education_Spending FROM GovernmentSpending GROUP BY Year, Region;",The query retrieves the yearly spending amounts on healthcare and education for each region. It uses the CASE statement to pivot the 'Category' column into separate columns for 'Healthcare_Spending' and 'Education_Spending'. The results are grouped by 'Year' and 'Region' to show the spending amounts for each combination of year and region.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects",Create a table that tracks the most popular fashion items by region and displays the top 5 items in each region based on sales.,"CREATE TABLE FashionItems (ItemID INT PRIMARY KEY, ItemName VARCHAR(100), Category VARCHAR(50), Price DECIMAL, SustainabilityRating INT); CREATE TABLE Sales (SaleID INT PRIMARY KEY, ItemID INT, Region VARCHAR(50), SaleDate DATE, QuantitySold INT, FOREIGN KEY (ItemID) REFERENCES FashionItems(ItemID));","WITH RankedItems AS (SELECT ItemName, Region, SUM(QuantitySold) AS TotalSold, DENSE_RANK() OVER (PARTITION BY Region ORDER BY SUM(QuantitySold) DESC) AS Rank FROM Sales JOIN FashionItems ON Sales.ItemID = FashionItems.ItemID GROUP BY ItemName, Region) SELECT ItemName, Region, TotalSold FROM RankedItems WHERE Rank <= 5;","The query creates a common table expression (CTE) to rank fashion items based on their total sales in each region. It then selects the top 5 items in each region using the DENSE_RANK function, which ranks items without gaps in ranking numbers."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",beginner,"two or more joins (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 5 brands from North America region that have the highest number of sustainable fashion products and their average customer rating.,"CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50)); INSERT INTO Brands (BrandID, BrandName, Region) VALUES (1, 'Brand A', 'North America'), (2, 'Brand B', 'North America'), (3, 'Brand C', 'Europe'), (4, 'Brand D', 'Asia'), (5, 'Brand E', 'North America'); CREATE TABLE Products (ProductID INT PRIMARY KEY, ProductName VARCHAR(50), BrandID INT, IsSustainable BOOLEAN); INSERT INTO Products (ProductID, ProductName, BrandID, IsSustainable) VALUES (1, 'Product 1', 1, TRUE), (2, 'Product 2', 2, TRUE), (3, 'Product 3', 3, FALSE), (4, 'Product 4', 2, TRUE), (5, 'Product 5', 1, FALSE); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, ProductID INT, CustomerRating DECIMAL); INSERT INTO Ratings (RatingID, ProductID, CustomerRating) VALUES (1, 1, 4.5), (2, 2, 4.0), (3, 3, 3.5), (4, 4, 5.0), (5, 1, 4.7);","WITH SustainableProducts AS (SELECT BrandName, COUNT(*) AS NumOfProducts, AVG(CustomerRating) AS AvgRating FROM Brands INNER JOIN Products ON Brands.BrandID = Products.BrandID INNER JOIN Ratings ON Products.ProductID = Ratings.ProductID WHERE Region = 'North America' AND IsSustainable = TRUE GROUP BY BrandName) SELECT BrandName, NumOfProducts, AvgRating FROM SustainableProducts ORDER BY NumOfProducts DESC, AvgRating DESC LIMIT 5;","The query first creates a common table expression (CTE) to combine the necessary tables (Brands, Products, Ratings) and calculate the number of sustainable products for each brand and their average customer rating, but only for brands from the North America region. Then it selects the brand name, number of sustainable products, and their average rating from the CTE, orders the results by the number of sustainable products (in descending order) and their average rating (also in descending order), and finally limits the result set to the top 5 brands."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,pivoting and unpivoting,"data definition: creating, altering, or dropping tables and other database objects","Create a table that stores the total sales of different vehicle models across various regions, and then display the sales data in a pivoted format with regions as columns.","CREATE TABLE VehicleSales (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), TotalSales INT); INSERT INTO VehicleSales (VehicleID, ModelName, Region, TotalSales) VALUES (1, 'Model X', 'North America', 5000), (2, 'Model Y', 'Europe', 3000), (3, 'Model Z', 'Asia', 7000), (4, 'Model X', 'Europe', 4000), (5, 'Model Y', 'North America', 6000);","SELECT ModelName, SUM(CASE WHEN Region = 'North America' THEN TotalSales ELSE 0 END) AS NorthAmericaSales, SUM(CASE WHEN Region = 'Europe' THEN TotalSales ELSE 0 END) AS EuropeSales, SUM(CASE WHEN Region = 'Asia' THEN TotalSales ELSE 0 END) AS AsiaSales FROM VehicleSales GROUP BY ModelName;","The query creates a table to store vehicle sales data by model and region, then it sums up the sales for each model across different regions. It uses CASE statements to pivot the data with regions as columns, displaying the total sales for 'North America', 'Europe', and 'Asia'."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Create a report showing the total number of electric and hydrogen fuel cell vehicles sold in each continent in 2020, sorted in descending order by the total sales.","CREATE TABLE VehicleSales (CarID INT PRIMARY KEY, CarModel VARCHAR(50), FuelType VARCHAR(50), SalesYear INT, Continent VARCHAR(50), UnitsSold INT); INSERT INTO VehicleSales (CarID, CarModel, FuelType, SalesYear, Continent, UnitsSold) VALUES (1, 'Model S', 'Electric', 2020, 'North America', 50000), (2, 'Model 3', 'Electric', 2020, 'Europe', 70000), (3, 'Leaf', 'Electric', 2020, 'Asia', 100000), (4, 'Mirai', 'Hydrogen', 2020, 'North America', 8000), (5, 'Nexo', 'Hydrogen', 2020, 'Europe', 6000);","WITH TotalSales AS (SELECT Continent, SUM(UnitsSold) AS TotalSales FROM VehicleSales WHERE SalesYear = 2020 AND (FuelType = 'Electric' OR FuelType = 'Hydrogen') GROUP BY Continent) SELECT Continent, TotalSales FROM TotalSales ORDER BY TotalSales DESC;","The query first creates a common table expression (CTE) named TotalSales that groups the sales data from the VehicleSales table by continent. It then sums the number of units sold for electric and hydrogen vehicles for the year 2020. Following that, it selects the continent and total sales from the CTE and sorts the results in descending order by total sales."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",advanced,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Calculate the total revenue from vehicle sales for each dealership during a specific time period, but if any transaction fails, rollback the entire transaction.","CREATE TABLE Dealerships (DealershipID INT PRIMARY KEY, DealershipName VARCHAR(100), Location VARCHAR(100));CREATE TABLE Vehicles (VehicleID INT PRIMARY KEY, Model VARCHAR(50), Manufacturer VARCHAR(50));CREATE TABLE Sales (SaleID INT PRIMARY KEY, DealershipID INT, VehicleID INT, SaleAmount DECIMAL, SaleDate DATE, FOREIGN KEY (DealershipID) REFERENCES Dealerships(DealershipID), FOREIGN KEY (VehicleID) REFERENCES Vehicles(VehicleID));","BEGIN TRANSACTION; WITH RevenuePerDealership AS (SELECT DealershipID, SUM(SaleAmount) AS TotalRevenue FROM Sales WHERE SaleDate BETWEEN '2023-01-01' AND '2023-12-31' GROUP BY DealershipID) SELECT d.DealershipName, r.TotalRevenue FROM Dealerships d INNER JOIN RevenuePerDealership r ON d.DealershipID = r.DealershipID; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query begins a transaction and calculates the total revenue from vehicle sales for each dealership during the specified time period. It uses a common table expression (CTE) to sum the SaleAmount for each DealershipID, filtering by the SaleDate range. Then, it joins the Dealerships table with the CTE to get the dealership names and their corresponding total revenue. If any errors occur during the transaction, it rolls back the transaction to maintain data integrity. Otherwise, it commits the transaction."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records",Insert records of new public policies into the PublicPolicy table and remove policies from last year that were not implemented.,"CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), ImplementationStatus VARCHAR(50), Year INT); CREATE TABLE PolicyUpdates (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), ImplementationStatus VARCHAR(50), Year INT); CREATE TABLE PolicyArchive (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(100), ImplementationStatus VARCHAR(50), Year INT);","INSERT INTO PublicPolicy (PolicyID, PolicyName, ImplementationStatus, Year) SELECT PolicyID, PolicyName, ImplementationStatus, Year FROM PolicyUpdates; DELETE FROM PublicPolicy WHERE Year = YEAR(CURRENT_DATE) - 1 AND ImplementationStatus = 'Not Implemented';","The query first inserts new policies from the PolicyUpdates table into the PublicPolicy table. Then, it deletes records of policies from last year that were not implemented by checking for the year being the current year minus one and the implementation status being 'Not Implemented'."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause","analytics and reporting: generating reports, dashboards, and analytical insights",Find out which hotels have the highest average guest rating in each city.,"CREATE TABLE Hotels (HotelID INT PRIMARY KEY, HotelName VARCHAR(50), City VARCHAR(50)); INSERT INTO Hotels (HotelID, HotelName, City) VALUES (1, 'Hotel Plaza', 'New York'), (2, 'Hotel Azure', 'Los Angeles'), (3, 'Hotel Sunnyside', 'Chicago'), (4, 'Hotel Riverside', 'New York'), (5, 'Hotel Greens', 'Los Angeles'); CREATE TABLE Ratings (RatingID INT PRIMARY KEY, HotelID INT, GuestRating DECIMAL); INSERT INTO Ratings (RatingID, HotelID, GuestRating) VALUES (1, 1, 4.5), (2, 2, 4.2), (3, 3, 4.0), (4, 1, 4.6), (5, 2, 4.4);","SELECT City, HotelName, AVG(GuestRating) as AverageRating FROM Hotels INNER JOIN Ratings ON Hotels.HotelID = Ratings.HotelID GROUP BY City, HotelName HAVING AVG(GuestRating) IN (SELECT MAX(AvgRating) FROM (SELECT City, AVG(GuestRating) as AvgRating FROM Hotels INNER JOIN Ratings ON Hotels.HotelID = Ratings.HotelID GROUP BY City) as SubQuery GROUP BY City);","The query first joins the Hotels and Ratings tables on the HotelID field. It then groups the results by City and HotelName, and calculates the average guest rating for each hotel. To find the hotels with the highest average guest rating for each city, it only includes groups where the average rating is the maximum average rating for that city, as determined by a subquery."
hospitality,"Information on travel and tourism trends, customer preferences, hotel management, and global hospitality analysis.",beginner,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Retrieve the top 5 tourist destinations in Europe and Asia based on visitor counts from the past year.,"CREATE TABLE TouristDestinations (DestinationID INT PRIMARY KEY, DestinationName VARCHAR(50), Region VARCHAR(50), VisitorCount INT); INSERT INTO TouristDestinations (DestinationID, DestinationName, Region, VisitorCount) VALUES (1, 'Paris', 'Europe', 2000000), (2, 'Rome', 'Europe', 1800000), (3, 'London', 'Europe', 1900000), (4, 'Beijing', 'Asia', 2200000), (5, 'Tokyo', 'Asia', 2100000), (6, 'Seoul', 'Asia', 1500000), (7, 'Barcelona', 'Europe', 1700000), (8, 'Istanbul', 'Europe', 1600000), (9, 'Bangkok', 'Asia', 2300000), (10, 'Singapore', 'Asia', 2000000);","WITH RankedDestinations AS (SELECT DestinationName, VisitorCount, DENSE_RANK() OVER (ORDER BY VisitorCount DESC) AS Rank FROM TouristDestinations WHERE Region IN ('Europe', 'Asia')) SELECT DestinationName, VisitorCount FROM RankedDestinations WHERE Rank <= 5;",The query creates a common table expression (CTE) to rank tourist destinations based on their visitor count in descending order. It then selects the top 5 tourist destinations in Europe and Asia using the DENSE_RANK function.
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,pivoting and unpivoting,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Begin a transaction to update the average watch time for each show in the 'ShowPerformance' table and then display the new average watch times for all shows across different regions.,"CREATE TABLE ShowPerformance (ShowID INT PRIMARY KEY, ShowName VARCHAR(100), Region VARCHAR(50), WatchTime INT); CREATE TABLE ShowEngagement (EngagementID INT PRIMARY KEY, ShowID INT, UserID INT, WatchDuration INT, EngagementDate DATE);","BEGIN TRANSACTION; WITH AvgWatchTime AS (SELECT ShowID, Region, AVG(WatchDuration) AS AvgWatchTime FROM ShowEngagement GROUP BY ShowID, Region) UPDATE SP SET SP.WatchTime = AWT.AvgWatchTime FROM ShowPerformance SP INNER JOIN AvgWatchTime AWT ON SP.ShowID = AWT.ShowID AND SP.Region = AWT.Region; SELECT ShowName, Region, WatchTime FROM ShowPerformance; COMMIT;","The query begins a transaction to ensure atomicity. It first calculates the average watch time for each show in different regions using a common table expression (CTE) named 'AvgWatchTime'. This CTE groups watch durations from the 'ShowEngagement' table by ShowID and Region and computes their averages. The main query then updates the 'WatchTime' field in the 'ShowPerformance' table by joining it with the 'AvgWatchTime' CTE on ShowID and Region. Finally, it selects and displays the updated average watch times for all shows across different regions before committing the transaction."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"set operations such as UNION, INTERSECT, and EXCEPT","data manipulation: inserting, updating, or deleting records","Update the performance metrics of athletes who participated in both the Olympics and World Championships, ensuring that only those who have better scores in the Olympics are retained.","CREATE TABLE Athletes (AthleteID INT PRIMARY KEY, AthleteName VARCHAR(100), Country VARCHAR(50)); CREATE TABLE OlympicsPerformance (AthleteID INT, Event VARCHAR(100), Score DECIMAL, Year INT, PRIMARY KEY(AthleteID, Event, Year), FOREIGN KEY(AthleteID) REFERENCES Athletes(AthleteID)); CREATE TABLE WorldChampionshipsPerformance (AthleteID INT, Event VARCHAR(100), Score DECIMAL, Year INT, PRIMARY KEY(AthleteID, Event, Year), FOREIGN KEY(AthleteID) REFERENCES Athletes(AthleteID));","WITH BetterOlympics AS (SELECT o.AthleteID, o.Event, o.Score FROM OlympicsPerformance o JOIN WorldChampionshipsPerformance w ON o.AthleteID = w.AthleteID AND o.Event = w.Event WHERE o.Score > w.Score) DELETE FROM WorldChampionshipsPerformance WHERE (AthleteID, Event) IN (SELECT AthleteID, Event FROM BetterOlympics);","The query first creates a common table expression (CTE) named BetterOlympics, which includes the athletes with better scores in the Olympics than in the World Championships for the same event. It then deletes the records from the WorldChampionshipsPerformance table for the athletes and events that appear in the BetterOlympics CTE."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,common table expressions,"analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 most popular genres of movies streamed in North America in the last year, ranked by total view time.","CREATE TABLE MovieStreams (StreamID INT PRIMARY KEY, UserID INT, MovieID INT, StreamTime DECIMAL, StreamDate DATE); CREATE TABLE Movies (MovieID INT PRIMARY KEY, Title VARCHAR(100), Genre VARCHAR(30)); CREATE TABLE Users (UserID INT PRIMARY KEY, Region VARCHAR(50)); INSERT INTO MovieStreams (StreamID, UserID, MovieID, StreamTime, StreamDate) VALUES (1, 1, 1, 2.5, '2020-11-12'), (2, 2, 2, 1.5, '2020-12-05'), (3, 3, 3, 2.0, '2021-01-20'), (4, 1, 4, 3.0, '2021-02-15'), (5, 2, 1, 1.5, '2021-03-10'); INSERT INTO Movies (MovieID, Title, Genre) VALUES (1, 'Movie A', 'Action'), (2, 'Movie B', 'Comedy'), (3, 'Movie C', 'Drama'), (4, 'Movie D', 'Action'), (5, 'Movie E', 'Drama'); INSERT INTO Users (UserID, Region) VALUES (1, 'North America'), (2, 'North America'), (3, 'Europe');","WITH StreamData AS (SELECT m.Genre, SUM(ms.StreamTime) as TotalTime FROM Movies AS m JOIN MovieStreams AS ms ON m.MovieID = ms.MovieID JOIN Users AS u ON ms.UserID = u.UserID WHERE u.Region = 'North America' AND ms.StreamDate >= '2020-01-01' GROUP BY m.Genre), RankedData AS (SELECT Genre, TotalTime, DENSE_RANK() OVER (ORDER BY TotalTime DESC) as Rank FROM StreamData) SELECT Genre, TotalTime FROM RankedData WHERE Rank <= 5;","The query first creates a common table expression (CTE) called 'StreamData' which joins the 'Movies', 'MovieStreams', and 'Users' tables to calculate the total stream time for each movie genre in North America in the last year. It then creates another CTE 'RankedData' which ranks the genres by total stream time in descending order. Finally, it selects the top 5 genres with the most total stream time from 'RankedData'."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store yearly crop yield data for various regions, and then display the top 5 regions with the highest average yield over the past 5 years for a particular crop.","CREATE TABLE CropYield (Year INT, Region VARCHAR(50), CropType VARCHAR(50), Yield DECIMAL); INSERT INTO CropYield (Year, Region, CropType, Yield) VALUES (2016, 'North America', 'Wheat', 120.5), (2017, 'North America', 'Wheat', 118.0), (2018, 'Asia', 'Wheat', 110.0), (2019, 'Africa', 'Wheat', 115.7), (2020, 'Europe', 'Wheat', 95.0), (2016, 'North America', 'Rice', 130.5), (2017, 'North America', 'Rice', 140.0), (2018, 'Asia', 'Rice', 115.0), (2019, 'Africa', 'Rice', 113.7), (2020, 'Europe', 'Rice', 105.0);","WITH RankedRegions AS (SELECT Region, AVG(Yield) as AvgYield, RANK() OVER (ORDER BY AVG(Yield) DESC) AS Rank FROM CropYield WHERE CropType = 'Wheat' AND Year >= 2016 GROUP BY Region) SELECT Region, AvgYield FROM RankedRegions WHERE Rank <= 5;",The query begins by creating a common table expression (CTE) called RankedRegions. This CTE calculates the average yield for each region over the past 5 years for the specified crop type ('Wheat') and ranks these regions by average yield in descending order using the RANK window function. The main query then selects the top 5 regions with the highest average yield from this CTE.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 regions with the highest average crop yield per farm, using window functions to rank the regions.","CREATE TABLE CropYields (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), FarmID INT, CropType VARCHAR(50), Yield DECIMAL); CREATE TABLE Farms (FarmID INT PRIMARY KEY, FarmName VARCHAR(50), RegionID INT); CREATE TABLE Regions (RegionID INT PRIMARY KEY, RegionName VARCHAR(50));","WITH AvgYieldPerRegion AS (SELECT RegionName, AVG(Yield) AS AvgYield FROM CropYields INNER JOIN Regions ON CropYields.RegionID = Regions.RegionID GROUP BY RegionName), RankedRegions AS (SELECT RegionName, AvgYield, RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM AvgYieldPerRegion) SELECT RegionName, AvgYield FROM RankedRegions WHERE Rank <= 5;","The query first calculates the average crop yield per region by joining the CropYields and Regions tables and grouping by RegionName. Then, it ranks the regions based on their average yield in descending order using the RANK() window function. Finally, it selects the top 5 regions with the highest average crop yield."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",beginner,"aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.), and HAVING clause",data retrieval: basic data fetching queries,Fetch the top 3 genres with the highest average user ratings for TV shows.,"CREATE TABLE MediaConsumption (UserID INT, ShowID INT, Genre VARCHAR(50), UserRating DECIMAL); CREATE TABLE Shows (ShowID INT PRIMARY KEY, ShowName VARCHAR(100), Genre VARCHAR(50));","SELECT Genre, AVG(UserRating) AS AvgRating FROM MediaConsumption GROUP BY Genre HAVING COUNT(ShowID) > 0 ORDER BY AvgRating DESC LIMIT 3;","The query calculates the average user rating for each genre from the MediaConsumption table, groups the results by genre, and uses the HAVING clause to ensure only genres with one or more shows are considered. It then orders the genres by highest average rating and limits the result to the top 3 genres."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 3 crops with the highest average yield per acre, along with their respective farmers, for each region in the last quarter, considering only transactions that were fully committed and not rolled back.","CREATE TABLE CropYield (TransactionID INT PRIMARY KEY, CropName VARCHAR(50), FarmerID INT, Region VARCHAR(50), YieldPerAcre DECIMAL, Quarter INT);  CREATE TABLE TransactionLog (TransactionID INT PRIMARY KEY, Status VARCHAR(50)); CREATE TABLE Farmers (FarmerID INT PRIMARY KEY, FarmerName VARCHAR(50)); INSERT INTO CropYield (TransactionID, CropName, FarmerID, Region, YieldPerAcre, Quarter) VALUES (1, 'Wheat', 1, 'North America', 2.5, 4), (2, 'Corn', 2, 'North America', 2.0, 4), (3, 'Rice', 3, 'Asia', 1.5, 4), (4, 'Barley', 4, 'Europe', 1.0, 4), (5, 'Soybean', 5, 'South America', 1.8, 4); INSERT INTO TransactionLog (TransactionID, Status) VALUES (1, 'COMMITTED'), (2, 'COMMITTED'), (3, 'ROLLED BACK'), (4, 'COMMITTED'), (5, 'COMMITTED'); INSERT INTO Farmers (FarmerID, FarmerName) VALUES (1, 'John'), (2, 'Steve'), (3, 'Lee'), (4, 'Hans'), (5, 'Pedro');","WITH valid_transactions AS (SELECT * FROM CropYield WHERE TransactionID IN (SELECT TransactionID FROM TransactionLog WHERE Status = 'COMMITTED') AND Quarter = 4), ranked_crops AS (SELECT Region, CropName, AVG(YieldPerAcre) AS AvgYield, RANK() OVER(PARTITION BY Region ORDER BY AVG(YieldPerAcre) DESC) AS Rank, FarmerID FROM valid_transactions GROUP BY Region, CropName, FarmerID) SELECT r.Region, r.CropName, f.FarmerName, r.AvgYield FROM ranked_crops r JOIN Farmers f ON r.FarmerID = f.FarmerID WHERE r.Rank <= 3;","The SQL query starts by creating a subquery named 'valid_transactions' to filter out transactions from the CropYield table that were committed and belonged to the last quarter. Next, it ranks average yields of crops for each region and assigns a rank with the help of the 'RANK()' function in a subquery named 'ranked_crops'. Finally, it joins the 'ranked_crops' with the 'Farmers' table on the 'FarmerID' to get the farmer's name and selects the top 3 crops with the highest average yield along with their corresponding regions and farmers."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Provide a list of the top 10 patients who have had the most variations in their blood pressure readings over the last month, along with the number of medication changes they have had in the same period.","CREATE TABLE PatientDemographics (PatientID INT PRIMARY KEY, FirstName VARCHAR(50), LastName VARCHAR(50), DOB DATE); CREATE TABLE MedicalHistories (RecordID INT PRIMARY KEY, PatientID INT, BloodPressureReadings VARCHAR(50), ReadingDate DATE); CREATE TABLE TreatmentProtocols (ProtocolID INT PRIMARY KEY, PatientID INT, TreatmentName VARCHAR(50), TreatmentStartDate DATE, TreatmentEndDate DATE); CREATE TABLE DrugEfficacyStudies (StudyID INT PRIMARY KEY, PatientID INT, DrugName VARCHAR(50), SideEffects VARCHAR(100), StudyDate DATE);","WITH RankedPatients AS (SELECT PatientDemographics.PatientID, COUNT(DISTINCT MedicalHistories.BloodPressureReadings) AS BPVariations, COUNT(DISTINCT TreatmentProtocols.TreatmentName) AS MedicationChanges, DENSE_RANK() OVER (ORDER BY BPVariations DESC) AS Rank FROM PatientDemographics JOIN MedicalHistories ON PatientDemographics.PatientID = MedicalHistories.PatientID JOIN TreatmentProtocols ON PatientDemographics.PatientID = TreatmentProtocols.PatientID WHERE MedicalHistories.ReadingDate BETWEEN DATEADD(MONTH, -1, GETDATE()) AND GETDATE() AND TreatmentProtocols.TreatmentStartDate BETWEEN DATEADD(MONTH, -1, GETDATE()) AND GETDATE() GROUP BY PatientDemographics.PatientID) SELECT FirstName, LastName, BPVariations, MedicationChanges FROM RankedPatients JOIN PatientDemographics ON RankedPatients.PatientID = PatientDemographics.PatientID WHERE Rank <= 10;","The SQL query first creates a common table expression (CTE) named 'RankedPatients' that ranks patients based on the number of distinct blood pressure readings, representing the variations in their blood pressure, in descending order over the last month. It also counts the number of distinct treatments, representing the medication changes, for each patient over the same period. The main query then joins the CTE with the 'PatientDemographics' table to get the first name and last name of the top 10 patients who have had the most blood pressure variations, along with their respective medication changes."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)",data retrieval: basic data fetching queries,Find the top 5 industries which had the highest average investment in technology innovation during the last five years.,"CREATE TABLE TechInvestments (IndustryID INT PRIMARY KEY, IndustryName VARCHAR(100), Year INT, Investment DECIMAL); INSERT INTO TechInvestments (IndustryID, IndustryName, Year, Investment) VALUES (1, 'Healthcare', 2020, 1200.5), (2, 'Automotive', 2020, 950.0), (3, 'Financial Services', 2020, 1150.0), (4, 'Retail', 2020, 800.7), (5, 'Education', 2020, 700.0);","WITH InvestmentsByYear AS (SELECT IndustryName, AVG(Investment) AS AvgInvestment, ROW_NUMBER() OVER (ORDER BY AVG(Investment) DESC) AS Rank FROM TechInvestments WHERE Year >= (SELECT MAX(Year) - 5 FROM TechInvestments) GROUP BY IndustryName) SELECT IndustryName, AvgInvestment FROM InvestmentsByYear WHERE Rank <= 5;","The query first creates a common table expression (CTE) to calculate the average investment in technology innovation for each industry over the last 5 years. It then ranks these industries in descending order based on the average investment. Finally, it retrieves the top 5 industries with the highest average investment."
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",intermediate,"only one join (specify inner, outer, cross)","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Insert a transaction that adds a new protected area to the database. Ensure that if any step of the transaction fails, all changes are rolled back.","CREATE TABLE ProtectedAreas (AreaID INT PRIMARY KEY, AreaName VARCHAR(100), Country VARCHAR(50), EstablishedYear INT); CREATE TABLE SpeciesInProtectedArea (SpeciesID INT, AreaID INT, PRIMARY KEY (SpeciesID, AreaID)); CREATE TABLE Species (SpeciesID INT PRIMARY KEY, SpeciesName VARCHAR(100));","BEGIN TRANSACTION; INSERT INTO ProtectedAreas (AreaID, AreaName, Country, EstablishedYear) VALUES (101, 'New National Park', 'USA', 2023); INSERT INTO SpeciesInProtectedArea (SpeciesID, AreaID) VALUES (1, 101), (2, 101), (3, 101); COMMIT;","The SQL query starts a transaction with the BEGIN TRANSACTION statement. It inserts a new protected area into the ProtectedAreas table. Then, it inserts multiple records into the SpeciesInProtectedArea table to associate existing species with the new protected area. If any of these insert operations fail, the transaction will be rolled back, ensuring that no partial changes are committed to the database. If all operations succeed, the transaction is committed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Update the PublicPolicy table to include a new column, 'PolicyImpact', for each policy that quantifies the estimated impact on the population, and then pivot the table to display each policy with its corresponding impact for the years 2010 to 2020.","CREATE TABLE PublicPolicy (PolicyID INT PRIMARY KEY, PolicyName VARCHAR(50), Year INT, PopulationImpact INT); INSERT INTO PublicPolicy (PolicyID, PolicyName, Year, PopulationImpact) VALUES (1, 'Policy A', 2010, 50000), (2, 'Policy B', 2011, 60000), (3, 'Policy C', 2012, 70000), (4, 'Policy D', 2013, 80000), (5, 'Policy E', 2014, 90000);","WITH PolicyImpact AS (SELECT PolicyName, Year, PopulationImpact FROM PublicPolicy WHERE Year BETWEEN 2010 AND 2020) SELECT * FROM PolicyImpact PIVOT (SUM(PopulationImpact) FOR Year IN ([2010], [2011], [2012], [2013], [2014], [2015], [2016], [2017], [2018], [2019], [2020]));","The query creates a common table expression (CTE) to select the policy name, year and the impact on the population for that year, for the years between 2010 and 2020 from the PublicPolicy table. It then pivots the table using the SUM of the population impact for each year, displaying each policy with its corresponding impact for the years 2010 to 2020."
technology,"Data on emerging technologies, market trends, innovation, and technological disruptions across various industries.",advanced,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,"Retrieve the top 10 companies ranked by their investment in AI-related innovations across different sectors, including details on the sector and the year of investment.","CREATE TABLE Companies (CompanyID INT PRIMARY KEY, CompanyName VARCHAR(100)); CREATE TABLE Sectors (SectorID INT PRIMARY KEY, SectorName VARCHAR(100)); CREATE TABLE Investments (InvestmentID INT PRIMARY KEY, CompanyID INT, SectorID INT, InvestmentAmount DECIMAL, InvestmentYear YEAR, FOREIGN KEY (CompanyID) REFERENCES Companies(CompanyID), FOREIGN KEY (SectorID) REFERENCES Sectors(SectorID));","WITH RankedInvestments AS (SELECT C.CompanyName, S.SectorName, I.InvestmentAmount, I.InvestmentYear, DENSE_RANK() OVER (ORDER BY I.InvestmentAmount DESC) AS Rank FROM Investments I INNER JOIN Companies C ON I.CompanyID = C.CompanyID INNER JOIN Sectors S ON I.SectorID = S.SectorID) SELECT CompanyName, SectorName, InvestmentAmount, InvestmentYear FROM RankedInvestments WHERE Rank <= 10;","The query creates a common table expression (CTE) named RankedInvestments that joins the Companies, Sectors, and Investments tables to retrieve company names, sector names, investment amounts, and investment years. It then ranks the investments in descending order based on the investment amount using the DENSE_RANK function. Finally, it selects the top 10 investments."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",advanced,"only one join (specify inner, outer, cross)","data manipulation: inserting, updating, or deleting records","Update the total views for a song in the MediaConsumption table based on the number of streaming records found in the AudienceEngagement table for that song, and then display the top 5 songs with the most views.","CREATE TABLE MediaConsumption (SongID INT PRIMARY KEY, SongTitle VARCHAR(50), TotalViews INT); INSERT INTO MediaConsumption (SongID, SongTitle, TotalViews) VALUES (1, 'Song A', 5000), (2, 'Song B', 6000), (3, 'Song C', 7000), (4, 'Song D', 8000), (5, 'Song E', 9000); CREATE TABLE AudienceEngagement (EngagementID INT PRIMARY KEY, SongID INT, StreamCount INT); INSERT INTO AudienceEngagement (EngagementID, SongID, StreamCount) VALUES (1, 1, 2000), (2, 2, 3000), (3, 3, 5000), (4, 4, 10000), (5, 5, 15000);","UPDATE MediaConsumption SET TotalViews = TotalViews + (SELECT SUM(StreamCount) FROM AudienceEngagement WHERE AudienceEngagement.SongID = MediaConsumption.SongID); WITH RankedSongs AS (SELECT SongTitle, TotalViews, DENSE_RANK() OVER (ORDER BY TotalViews DESC) AS Rank FROM MediaConsumption) SELECT SongTitle, TotalViews FROM RankedSongs WHERE Rank <= 5;","The query first updates the total views for each song in the MediaConsumption table by adding the sum of stream counts from the AudienceEngagement table for the corresponding song. It then creates a common table expression (CTE) to rank songs based on their total views in descending order. Finally, it selects the top 5 songs with the most views using the DENSE_RANK function."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",beginner,common table expressions,data retrieval: basic data fetching queries,Show the total number of electric vehicles sold by region.,"CREATE TABLE VehicleSales (SaleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), VehicleType VARCHAR(50), UnitsSold INT); INSERT INTO VehicleSales (SaleID, ModelName, Region, VehicleType, UnitsSold) VALUES (1, 'Model S', 'North America', 'Electric', 5000), (2, 'Leaf', 'Europe', 'Electric', 3000), (3, 'Bolt', 'North America', 'Electric', 2000), (4, 'Model 3', 'Asia', 'Electric', 1500), (5, 'Prius', 'Europe', 'Hybrid', 4000);","WITH ElectricVehicleSales AS (SELECT Region, SUM(UnitsSold) AS TotalElectricVehicles FROM VehicleSales WHERE VehicleType = 'Electric' GROUP BY Region) SELECT Region, TotalElectricVehicles FROM ElectricVehicleSales;","The query first creates a common table expression (CTE) named ElectricVehicleSales, which aggregates the total number of electric vehicles sold by region. It then selects the region and the total number of electric vehicles from this CTE."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",advanced,pivoting and unpivoting,"data manipulation: inserting, updating, or deleting records","Calculate the average yield of each crop for each region, then pivot the data to show the regions as columns and crops as rows. Then, delete the row for Corn in the 'North America' column.","CREATE TABLE Crops (CropID INT PRIMARY KEY, CropName VARCHAR(50), Region VARCHAR(50), Yield DECIMAL); INSERT INTO Crops (CropID, CropName, Region, Yield) VALUES (1, 'Corn', 'North America', 180.5), (2, 'Wheat', 'Europe', 150.0), (3, 'Rice', 'Asia', 200.0), (4, 'Soybean', 'South America', 220.7), (5, 'Corn', 'Europe', 170.0), (6, 'Rice', 'Africa', 130.5), (7, 'Wheat', 'North America', 160.0);","WITH AvgYields AS (SELECT CropName, Region, AVG(Yield) AS AvgYield FROM Crops GROUP BY CropName, Region) SELECT * FROM (SELECT CropName, Region, AvgYield FROM AvgYields) PIVOT (AVG(AvgYield) FOR Region IN ('North America', 'Europe', 'Asia', 'South America', 'Africa')); DELETE FROM AvgYields WHERE CropName = 'Corn' AND Region = 'North America';",The first part of the query creates a common table expression (CTE) to calculate the average yield for each crop for each region. The second part of the query uses Pivot operation to transform the rows into columns to show the regions as columns and crops as rows. The final part of the query deletes the row for 'Corn' in the 'North America' column.
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,common table expressions,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Find the top 3 athletes with the highest average score in each sports event after removing the lowest score for each athlete. Also, rollback any changes if there is a system failure during the calculation.","CREATE TABLE AthletePerformance (AthleteID INT, EventID INT, Score DECIMAL); INSERT INTO AthletePerformance (AthleteID, EventID, Score) VALUES (1, 1, 9.8), (1, 1, 8.5), (1, 2, 9.0), (2, 1, 8.0), (2, 1, 9.5), (2, 2, 8.5), (3, 1, 9.7), (3, 1, 8.5), (3, 2, 9.5); CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(50)); INSERT INTO SportsEvents (EventID, EventName) VALUES (1, 'Gymnastics'), (2, 'Swimming');","BEGIN TRANSACTION; WITH MinScores AS (SELECT AthleteID, EventID, MIN(Score) as MinScore FROM AthletePerformance GROUP BY AthleteID, EventID), AdjustedScores AS (SELECT p.AthleteID, p.EventID, p.Score FROM AthletePerformance p LEFT JOIN MinScores m ON p.AthleteID = m.AthleteID AND p.EventID = m.EventID WHERE p.Score > m.MinScore OR m.MinScore IS NULL), AvgScores AS (SELECT AthleteID, EventID, AVG(Score) as AvgScore FROM AdjustedScores GROUP BY AthleteID, EventID), RankedScores AS (SELECT a.AthleteID, e.EventName, AvgScore, DENSE_RANK() OVER (PARTITION BY a.EventID ORDER BY AvgScore DESC) as Rank FROM AvgScores a JOIN SportsEvents e ON a.EventID = e.EventID) SELECT AthleteID, EventName, AvgScore FROM RankedScores WHERE Rank <= 3; ROLLBACK TRANSACTION;","The query starts by creating a transaction to ensure data integrity. Then, the minimum scores for each athlete in each event are calculated and stored in the MinScores CTE. The AdjustedScores CTE then removes these minimum scores from the AthletePerformance table. The average scores for each athlete in each event are then calculated and stored in the AvgScores CTE. The scores are then ranked within each event using the DENSE_RANK function in the RankedScores CTE. Finally, the top 3 athletes in each event, along with their average scores, are selected from the RankedScores CTE. If there is a system failure during the execution of the query, all changes are rolled back to maintain data integrity."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"only one join (specify inner, outer, cross)","analytics and reporting: generating reports, dashboards, and analytical insights","Generate a report showing the top 5 most popular TV shows based on the total number of unique viewers, along with their average rating from viewer feedback.","CREATE TABLE TVShows (ShowID INT PRIMARY KEY, ShowName VARCHAR(100), Genre VARCHAR(50), ReleaseDate DATE);CREATE TABLE Viewers (ViewerID INT PRIMARY KEY, ViewerName VARCHAR(100), Age INT, Country VARCHAR(50));CREATE TABLE ShowViewership (ViewershipID INT PRIMARY KEY, ShowID INT, ViewerID INT, ViewDate DATE);CREATE TABLE ViewerFeedback (FeedbackID INT PRIMARY KEY, ViewerID INT, ShowID INT, Rating DECIMAL(2,1));","WITH PopularShows AS (SELECT TVShows.ShowName, COUNT(DISTINCT ShowViewership.ViewerID) AS UniqueViewers, AVG(ViewerFeedback.Rating) AS AverageRating FROM TVShows INNER JOIN ShowViewership ON TVShows.ShowID = ShowViewership.ShowID LEFT JOIN ViewerFeedback ON TVShows.ShowID = ViewerFeedback.ShowID GROUP BY TVShows.ShowID, TVShows.ShowName) SELECT ShowName, UniqueViewers, AverageRating FROM PopularShows ORDER BY UniqueViewers DESC LIMIT 5;","The query first creates a common table expression (CTE) named PopularShows that calculates the number of unique viewers and the average rating for each TV show by joining the TVShows, ShowViewership, and ViewerFeedback tables. The final SELECT statement then retrieves the top 5 TV shows based on the number of unique viewers, ordering the results in descending order of unique viewers and limiting the output to 5 rows."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",beginner,basic SQL with a simple select statement,"analytics and reporting: generating reports, dashboards, and analytical insights",Generate a report showing the average age of patients grouped by their primary diagnosis.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), Age INT, Gender VARCHAR(10));CREATE TABLE MedicalHistory (HistoryID INT PRIMARY KEY, PatientID INT, Diagnosis VARCHAR(100), Treatment VARCHAR(100));","SELECT Diagnosis, AVG(Age) AS AverageAge FROM Patients JOIN MedicalHistory ON Patients.PatientID = MedicalHistory.PatientID GROUP BY Diagnosis;",The query joins the 'Patients' and 'MedicalHistory' tables on the 'PatientID' field to combine patient demographics with their medical diagnoses. It then calculates the average age of patients for each primary diagnosis and groups the results by the diagnosis field.
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,basic SQL with a simple select statement,"data definition: creating, altering, or dropping tables and other database objects","Create a table to store data on the average yield of different crop types across multiple regions during different seasons. Then, identify and display the top 5 crop types with the highest yield during the summer season.","CREATE TABLE CropYield (CropID INT PRIMARY KEY, CropType VARCHAR(50), Region VARCHAR(50), Season VARCHAR(20), AvgYield DECIMAL); INSERT INTO CropYield (CropID, CropType, Region, Season, AvgYield) VALUES (1, 'Corn', 'North America', 'Summer', 150.0), (2, 'Wheat', 'Europe', 'Winter', 120.0), (3, 'Rice', 'Asia', 'Summer', 300.0), (4, 'Potato', 'North America', 'Fall', 200.0), (5, 'Barley', 'Europe', 'Spring', 90.0);","WITH RankedCrops AS (SELECT CropType, AvgYield, DENSE_RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM CropYield WHERE Season = 'Summer') SELECT CropType, AvgYield FROM RankedCrops WHERE Rank <= 5;","The query first creates a common table expression (CTE) that ranks crop types by average yield in descending order for the summer season only. Then, it selects the top 5 crop types with the highest yield during the summer season using the DENSE_RANK function."
sports,"Detailed data on sports events, athlete performance, fan engagement, sports industry economics, and global sports market trends.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Record the total revenue generated from ticket sales for each sports event by month, and ensure the transaction is committed only if all revenue calculations are successful.","CREATE TABLE SportsEvents (EventID INT PRIMARY KEY, EventName VARCHAR(100), EventDate DATE, TicketPrice DECIMAL); CREATE TABLE TicketSales (SaleID INT PRIMARY KEY, EventID INT, SaleDate DATE, TicketsSold INT, FOREIGN KEY (EventID) REFERENCES SportsEvents(EventID));","BEGIN TRANSACTION; WITH MonthlyRevenue AS (SELECT EventID, DATE_TRUNC('month', SaleDate) AS SaleMonth, SUM(TicketPrice * TicketsSold) AS TotalRevenue FROM TicketSales TS JOIN SportsEvents SE ON TS.EventID = SE.EventID GROUP BY EventID, SaleMonth) INSERT INTO RevenueByMonth (EventID, SaleMonth, TotalRevenue) SELECT * FROM MonthlyRevenue; COMMIT;","The query starts a transaction to ensure all revenue calculations are successful before committing. It first creates a common table expression (CTE) named MonthlyRevenue, which calculates the total revenue for each event by month. The CTE joins TicketSales and SportsEvents tables, groups the data by EventID and SaleMonth, and calculates the total revenue using SUM(TicketPrice * TicketsSold). The results from the CTE are then inserted into the RevenueByMonth table. Finally, the transaction is committed to save the changes."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",expert,"window functions (e.g., ROW_NUMBER, LEAD, LAG, RANK, NTILE, PERCENT_RANK, etc.)","data definition: creating, altering, or dropping tables and other database objects","Create a table to store the top 10 regions with the highest average crop yields for different types of crops, and then display these regions along with their average yields.","CREATE TABLE CropYields (RegionID INT PRIMARY KEY, RegionName VARCHAR(50), CropType VARCHAR(50), Yield DECIMAL); INSERT INTO CropYields (RegionID, RegionName, CropType, Yield) VALUES (1, 'Midwest', 'Corn', 150.0), (2, 'Southeast', 'Cotton', 120.0), (3, 'Midwest', 'Soybean', 130.0), (4, 'Northwest', 'Wheat', 140.0), (5, 'Southwest', 'Corn', 135.0);","WITH AvgYields AS (SELECT RegionName, CropType, AVG(Yield) AS AvgYield FROM CropYields GROUP BY RegionName, CropType), RankedRegions AS (SELECT RegionName, CropType, AvgYield, RANK() OVER (ORDER BY AvgYield DESC) AS Rank FROM AvgYields) SELECT RegionName, CropType, AvgYield FROM RankedRegions WHERE Rank <= 10;","The query first creates a common table expression (CTE) that calculates the average yield for each crop type in each region. Then, it ranks these regions based on their average yield in descending order using the RANK function. Finally, it selects the top 10 ranked regions with the highest average crop yields."
healthcare,"Comprehensive data on patient demographics, medical histories, treatment protocols, and outcomes; drug efficacy studies and side effects.",intermediate,basic SQL with a simple select statement,"transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)",Show the list of patients who have experienced side effects from the drug 'Paracetamol' in the last 6 months and roll back the transaction if there's any error during the execution.,"CREATE TABLE Patients (PatientID INT PRIMARY KEY, Name VARCHAR(50), DOB DATE, Gender VARCHAR(10), MedicalHistory TEXT); CREATE TABLE Drugs (DrugID INT PRIMARY KEY, DrugName VARCHAR(50), SideEffects TEXT); CREATE TABLE PatientDrugs (PatientDrugID INT PRIMARY KEY, PatientID INT, DrugID INT, StartDate DATE, EndDate DATE);","BEGIN TRANSACTION; SELECT p.Name, p.DOB, p.Gender FROM Patients p JOIN PatientDrugs pd ON p.PatientID = pd.PatientID JOIN Drugs d ON d.DrugID = pd.DrugID WHERE d.DrugName = 'Paracetamol' AND pd.EndDate >= DATEADD(month, -6, GETDATE()) ORDER BY pd.EndDate DESC; IF @@ERROR <> 0 ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query starts a new transaction and then tries to select the name, date of birth, and gender of patients from the 'Patients' table who have taken the drug 'Paracetamol' in the last 6 months, as recorded in the 'PatientDrugs' table. The information about the drug 'Paracetamol' is extracted from the 'Drugs' table. If there's any error during the execution of the select statement, the transaction is rolled back; otherwise, it's committed."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Insert the population data for the year 2022 into the CitizenDemographics table and then update the GovernanceEffectiveness table with the latest efficiency score for the same year.,"CREATE TABLE CitizenDemographics (CitizenID INT PRIMARY KEY, Name VARCHAR(100), Age INT, Year INT, Population INT); CREATE TABLE GovernanceEffectiveness (RegionID INT PRIMARY KEY, RegionName VARCHAR(100), Year INT, EfficiencyScore DECIMAL);","INSERT INTO CitizenDemographics (CitizenID, Name, Age, Year, Population) VALUES (101, 'John Doe', 30, 2022, 5000); UPDATE GovernanceEffectiveness SET EfficiencyScore = 85.5 WHERE Year = 2022;","The query first inserts a new record for the year 2022 into the CitizenDemographics table with specific population data. Then, it updates the GovernanceEffectiveness table to set the efficiency score to 85.5 for the same year, 2022."
agriculture,"Data on crop yields, farming practices, agricultural supply chain, and global food security initiatives.",intermediate,"subqueries, including correlated and nested subqueries","data manipulation: inserting, updating, or deleting records","Insert the average wheat yield for the last five years for each region into a new table, and then find out which region has had the highest average yield over this period.","CREATE TABLE WheatYield (Region VARCHAR(50), Year INT, AvgYield DECIMAL); CREATE TABLE WheatYield_Summary (Region VARCHAR(50), FiveYearAvgYield DECIMAL); INSERT INTO WheatYield (Region, Year, AvgYield) VALUES ('North America', 2018, 2.5), ('Europe', 2018, 3.0), ('Asia', 2018, 2.0), ('North America', 2019, 2.7), ('Europe', 2019, 3.2), ('Asia', 2019, 2.2), ('North America', 2020, 2.8), ('Europe', 2020, 3.3), ('Asia', 2020, 2.1), ('North America', 2021, 3.1), ('Europe', 2021, 3.7), ('Asia', 2021, 2.4), ('North America', 2022, 3.4), ('Europe', 2022, 3.9), ('Asia', 2022, 2.6);","INSERT INTO WheatYield_Summary (Region, FiveYearAvgYield) SELECT Region, AVG(AvgYield) AS FiveYearAvgYield FROM WheatYield WHERE Year >= 2018 GROUP BY Region; SELECT Region FROM WheatYield_Summary WHERE FiveYearAvgYield = (SELECT MAX(FiveYearAvgYield) FROM WheatYield_Summary);","The query first inserts the average yield of wheat for each region over the past five years into the WheatYield_Summary table. Then, it selects the region from the WheatYield_Summary table that has the highest five-year average yield. This is achieved using a subquery to find the maximum five-year average yield from the WheatYield_Summary table."
automotive,"Detailed information on vehicle sales, automotive technologies, sustainable transportation, and global automotive market analysis.",intermediate,pivoting and unpivoting,data retrieval: basic data fetching queries,"Create a report showing the total sales of electric vehicle models for each market region, then display the top 3 regions with the highest total sales.","CREATE TABLE EVSales (VehicleID INT PRIMARY KEY, ModelName VARCHAR(50), Region VARCHAR(50), UnitsSold INT); INSERT INTO EVSales (VehicleID, ModelName, Region, UnitsSold) VALUES (1, 'Tesla Model 3', 'North America', 55000), (2, 'Nissan Leaf', 'Europe', 30000), (3, 'BMW i3', 'Asia', 45000), (4, 'Chevrolet Bolt', 'North America', 20000), (5, 'Tesla Model S', 'Europe', 40000);","WITH TotalSales AS (SELECT Region, SUM(UnitsSold) AS TotalUnitsSold FROM EVSales GROUP BY Region) SELECT Region, TotalUnitsSold FROM TotalSales ORDER BY TotalUnitsSold DESC LIMIT 3;","The SQL query first creates a common table expression (CTE) named TotalSales to calculate the total units sold for each region by summing up the UnitsSold column grouped by the Region column from the EVSales table. It then selects the Region and TotalUnitsSold columns from the TotalSales CTE, orders the result set in descending order by the TotalUnitsSold column, and limits the result to the top 3 regions with the highest total sales."
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"set operations such as UNION, INTERSECT, and EXCEPT",data retrieval: basic data fetching queries,Retrieve the top five most popular sustainable fashion brands in Europe and Asia based on consumer buying behavior in last year.,"CREATE TABLE FashionData (BrandID INT PRIMARY KEY, BrandName VARCHAR(50), Region VARCHAR(50), Sustainable BOOLEAN, CustomerCount INT); INSERT INTO FashionData (BrandID, BrandName, Region, Sustainable, CustomerCount) VALUES (1, 'Brand A', 'Europe', TRUE, 5000), (2, 'Brand B', 'Asia', TRUE, 8000), (3, 'Brand C', 'Europe', TRUE, 4500), (4, 'Brand D', 'Asia', FALSE, 9000), (5, 'Brand E', 'Europe', TRUE, 6000);","WITH SustainableBrands AS (SELECT BrandName, Region, CustomerCount FROM FashionData WHERE Sustainable = TRUE AND (Region = 'Europe' OR Region = 'Asia')) SELECT BrandName, Region, CustomerCount FROM SustainableBrands WHERE CustomerCount IN (SELECT TOP 5 CustomerCount FROM SustainableBrands ORDER BY CustomerCount DESC);",The SQL query first isolates the sustainable fashion brands in Europe and Asia by creating a common table expression (CTE). It then selects the top five brands with the highest customer count (indicative of popularity) from this CTE using a nested query.
fashion,"Information on fashion trends, consumer behavior, sustainable fashion practices, and global fashion industry analysis.",expert,"only one join (specify inner, outer, cross)",data retrieval: basic data fetching queries,Find the top 5 brands preferred by customers in Europe based on the number of purchases in the last year.,"CREATE TABLE Customers (CustomerID INT PRIMARY KEY, Name VARCHAR(50), Region VARCHAR(50)); CREATE TABLE Brands (BrandID INT PRIMARY KEY, BrandName VARCHAR(50)); CREATE TABLE Purchases (PurchaseID INT PRIMARY KEY, CustomerID INT, BrandID INT, PurchaseDate DATE); INSERT INTO Customers (CustomerID, Name, Region) VALUES (1, 'John Doe', 'Europe'), (2, 'Jane Doe', 'Europe'), (3, 'Alice Smith', 'North America'), (4, 'Bob Johnson', 'Asia'); INSERT INTO Brands (BrandID, BrandName) VALUES (1, 'Brand A'), (2, 'Brand B'), (3, 'Brand C'), (4, 'Brand D'), (5, 'Brand E'); INSERT INTO Purchases (PurchaseID, CustomerID, BrandID, PurchaseDate) VALUES (1, 1, 1, '2020-12-01'), (2, 1, 2, '2020-12-02'), (3, 2, 1, '2020-12-03'), (4, 2, 3, '2020-12-04'), (5, 3, 2, '2020-12-05'), (6, 4, 4, '2020-12-06'), (7, 4, 5, '2020-12-07');","WITH EuropePurchases AS (SELECT BrandID, COUNT(*) AS PurchaseCount FROM Purchases WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE Region = 'Europe') AND PurchaseDate >= '2020-01-01' GROUP BY BrandID) SELECT B.BrandName, E.PurchaseCount FROM EuropePurchases E INNER JOIN Brands B ON E.BrandID = B.BrandID ORDER BY E.PurchaseCount DESC LIMIT 5;","The SQL query creates a common table expression (CTE) named EuropePurchases that selects the BrandID and count of purchases from the Purchases table for customers in Europe within the last year. It then selects the brand name and purchase count from the EuropePurchases CTE and Brands table, joining on the BrandID. The results are ordered by purchase count in descending order and limited to the top 5."
entertainment,"Records on media consumption patterns, content creation, audience engagement, and entertainment industry revenue streams.",intermediate,"subqueries, including correlated and nested subqueries","transactional processing: SQL transaction control statements (e.g., BEGIN, COMMIT, ROLLBACK)","Track the total revenue generated by each type of media content (such as movies, TV shows, online videos, etc.) in the last quarter, and include changes in revenue for content types that have shown significant increase or decrease compared to the previous quarter. Ensure the transaction is rolled back if any data inconsistency is found.","CREATE TABLE MediaContent (ContentID INT PRIMARY KEY, ContentType VARCHAR(50), Revenue DECIMAL, Quarter INT); CREATE TABLE RevenueChanges (ChangeID INT PRIMARY KEY, ContentType VARCHAR(50), RevenueChange DECIMAL, Quarter INT); CREATE TABLE Transactions (TransactionID INT PRIMARY KEY, ContentID INT, Operation VARCHAR(50), Status VARCHAR(50));","BEGIN TRANSACTION;WITH LastQuarterRevenue AS (SELECT ContentType, SUM(Revenue) AS TotalRevenue FROM MediaContent WHERE Quarter = (SELECT MAX(Quarter) FROM MediaContent) GROUP BY ContentType), PreviousQuarterRevenue AS (SELECT ContentType, SUM(Revenue) AS TotalRevenue FROM MediaContent WHERE Quarter = (SELECT MAX(Quarter) - 1 FROM MediaContent) GROUP BY ContentType), RevenueDifference AS (SELECT LQ.ContentType, LQ.TotalRevenue - PQ.TotalRevenue AS RevenueChange FROM LastQuarterRevenue LQ JOIN PreviousQuarterRevenue PQ ON LQ.ContentType = PQ.ContentType) SELECT LQ.ContentType, LQ.TotalRevenue, RD.RevenueChange FROM LastQuarterRevenue LQ LEFT JOIN RevenueDifference RD ON LQ.ContentType = RD.ContentType; IF EXISTS (SELECT 1 FROM Transactions WHERE Status = 'Failed') ROLLBACK TRANSACTION; ELSE COMMIT TRANSACTION;","The query starts a transaction to track any changes and ensure consistency. It calculates the total revenue for each type of media content for the last quarter and the previous quarter using subqueries. It then calculates the revenue changes by joining the results of the subqueries. Finally, it checks for any failed transactions and rolls back if inconsistencies are found; otherwise, it commits the transaction."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",beginner,pivoting and unpivoting,data retrieval: basic data fetching queries,Provide a list of top 5 departments with the highest total expenditure in 2020.,"CREATE TABLE GovernmentSpending (DepartmentID INT PRIMARY KEY, DepartmentName VARCHAR(100), FiscalYear INT, Expenditure DECIMAL); INSERT INTO GovernmentSpending (DepartmentID, DepartmentName, FiscalYear, Expenditure) VALUES (1, 'Department of Education', 2020, 68000), (2, 'Department of Defense', 2020, 73000), (3, 'Department of Health and Human Services', 2020, 101200), (4, 'Department of Transportation', 2020, 87000), (5, 'Department of Energy', 2020, 30000);","WITH RankedDepartments AS (SELECT DepartmentName, Expenditure, DENSE_RANK() OVER (ORDER BY Expenditure DESC) AS Rank FROM GovernmentSpending WHERE FiscalYear = 2020) SELECT DepartmentName, Expenditure FROM RankedDepartments WHERE Rank <= 5;","The SQL query first creates a common table expression (CTE) by selecting the department name and expenditure from the GovernmentSpending table for the fiscal year 2020. It then ranks the departments based on their expenditure in descending order using the DENSE_RANK function. Lastly, it selects the top 5 departments with the highest expenditure."
government,"Comprehensive records on public policy, legislative processes, government spending, citizen demographics, and governance effectiveness.",intermediate,common table expressions,"data manipulation: inserting, updating, or deleting records",Update the budget allocation for healthcare across all districts to reflect a 10% increase.,"CREATE TABLE GovernmentSpending (DistrictID INT PRIMARY KEY, DistrictName VARCHAR(50), Category VARCHAR(50), Amount DECIMAL); INSERT INTO GovernmentSpending (DistrictID, DistrictName, Category, Amount) VALUES (1, 'District A', 'Healthcare', 1000000), (2, 'District B', 'Healthcare', 1500000), (3, 'District C', 'Healthcare', 2000000);","WITH UpdatedSpending AS (SELECT DistrictID, Amount * 1.10 AS NewAmount FROM GovernmentSpending WHERE Category = 'Healthcare') UPDATE GovernmentSpending SET Amount = (SELECT NewAmount FROM UpdatedSpending WHERE GovernmentSpending.DistrictID = UpdatedSpending.DistrictID) WHERE Category = 'Healthcare';",The query first creates a common table expression (CTE) named UpdatedSpending that calculates the new amount by increasing the current amount by 10% for all districts under the 'Healthcare' category. Then it updates the Amount in the GovernmentSpending table using the new values from the CTE for the same districts.
environment,"Data related to climate change, environmental conservation efforts, biodiversity, and sustainable development initiatives.",expert,basic SQL with a simple select statement,"data manipulation: inserting, updating, or deleting records",Calculate the total carbon emissions reduction achieved by different projects and then update the records to reflect the verified reductions as of the latest audit date.,"CREATE TABLE EmissionProjects (ProjectID INT PRIMARY KEY, ProjectName VARCHAR(100), InitialCarbonReduction DECIMAL, VerifiedCarbonReduction DECIMAL); CREATE TABLE Audits (AuditID INT PRIMARY KEY, ProjectID INT, AuditDate DATE, VerifiedReduction DECIMAL, FOREIGN KEY (ProjectID) REFERENCES EmissionProjects(ProjectID)); INSERT INTO EmissionProjects (ProjectID, ProjectName, InitialCarbonReduction, VerifiedCarbonReduction) VALUES (1, 'Solar Farm', 500.0, 0.0), (2, 'Wind Turbine', 300.0, 0.0), (3, 'Reforestation', 200.0, 0.0); INSERT INTO Audits (AuditID, ProjectID, AuditDate, VerifiedReduction) VALUES (1, 1, '2023-01-15', 480.0), (2, 2, '2023-02-20', 290.0), (3, 3, '2023-03-30', 210.0);",UPDATE EmissionProjects SET VerifiedCarbonReduction = (SELECT SUM(VerifiedReduction) FROM Audits WHERE EmissionProjects.ProjectID = Audits.ProjectID AND AuditDate = (SELECT MAX(AuditDate) FROM Audits WHERE EmissionProjects.ProjectID = Audits.ProjectID));,The query updates the 'VerifiedCarbonReduction' column in the 'EmissionProjects' table to reflect the sum of verified reductions from the latest audit for each project. It uses a nested SELECT statement to find the latest audit date and sum the reductions for each project.
